
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129b4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058d0  08012b78  08012b78  00013b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018448  08018448  0001a1f8  2**0
                  CONTENTS
  4 .ARM          00000008  08018448  08018448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018450  08018450  0001a1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018450  08018450  00019450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018454  08018454  00019454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08018458  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200001f8  08018650  0001a1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  08018650  0001acfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e4f  00000000  00000000  0001a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ac  00000000  00000000  00040077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  00044828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a93  00000000  00000000  00046a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304bb  00000000  00000000  000484c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000299be  00000000  00000000  0007897e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129c18  00000000  00000000  000a233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cbf54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a434  00000000  00000000  001cbf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001d63cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012b5c 	.word	0x08012b5c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	08012b5c 	.word	0x08012b5c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <initTempHumSensor+0x1c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000214 	.word	0x20000214

08000f88 <req_measurements>:

// send command to sensor
void req_measurements() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000f8e:	f640 532c 	movw	r3, #3372	@ 0xd2c
 8000f92:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <req_measurements+0x28>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	1d3a      	adds	r2, r7, #4
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	2188      	movs	r1, #136	@ 0x88
 8000fa4:	f007 fa54 	bl	8008450 <HAL_I2C_Master_Transmit>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000214 	.word	0x20000214

08000fb4 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[6];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 6, 1000);
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <read_raw_measurements+0x58>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	463a      	mov	r2, r7
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	2189      	movs	r1, #137	@ 0x89
 8000fca:	f007 fb59 	bl	8008680 <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000fce:	783b      	ldrb	r3, [r7, #0]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	813b      	strh	r3, [r7, #8]
	data.hum = buf[3] << 8 | buf[4];
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	817b      	strh	r3, [r7, #10]
	return data;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	89ba      	ldrh	r2, [r7, #12]
 8000ffa:	f362 030f 	bfi	r3, r2, #0, #16
 8000ffe:	89fa      	ldrh	r2, [r7, #14]
 8001000:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000214 	.word	0x20000214

08001010 <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 8001016:	f7ff ffb7 	bl	8000f88 <req_measurements>
	raw_data = read_raw_measurements();
 800101a:	f7ff ffcb 	bl	8000fb4 <read_raw_measurements>
 800101e:	4603      	mov	r3, r0
 8001020:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 8001022:	8abb      	ldrh	r3, [r7, #20]
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 8001026:	8afb      	ldrh	r3, [r7, #22]
 8001028:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001034:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001098 <get_temp_hum+0x88>
 8001038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800109c <get_temp_hum+0x8c>
 8001040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001044:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80010a0 <get_temp_hum+0x90>
 8001048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800104c:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001098 <get_temp_hum+0x88>
 800105e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001062:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80010a4 <get_temp_hum+0x94>
 8001066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106a:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107a:	e883 0003 	stmia.w	r3, {r0, r1}
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	ee07 2a10 	vmov	s14, r2
 8001086:	ee07 3a90 	vmov	s15, r3
}
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	3728      	adds	r7, #40	@ 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	477fff00 	.word	0x477fff00
 800109c:	439d8000 	.word	0x439d8000
 80010a0:	42340000 	.word	0x42340000
 80010a4:	42c80000 	.word	0x42c80000

080010a8 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 80010a8:	b084      	sub	sp, #16
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	f107 0c08 	add.w	ip, r7, #8
 80010b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <JOYSTICK_INIT+0x2c>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2254      	movs	r2, #84	@ 0x54
 80010c0:	4619      	mov	r1, r3
 80010c2:	f00f fdc4 	bl	8010c4e <memcpy>
	}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ce:	b004      	add	sp, #16
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2000021c 	.word	0x2000021c

080010d8 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	811a      	strh	r2, [r3, #8]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 8001100:	f107 0214 	add.w	r2, r7, #20
 8001104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	2140      	movs	r1, #64	@ 0x40
 800110e:	4810      	ldr	r0, [pc, #64]	@ (8001150 <readRegister+0x78>)
 8001110:	f007 f99e 	bl	8008450 <HAL_I2C_Master_Transmit>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <readRegister+0x7c>)
 800111a:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 800111c:	f107 0208 	add.w	r2, r7, #8
 8001120:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2140      	movs	r1, #64	@ 0x40
 800112a:	4809      	ldr	r0, [pc, #36]	@ (8001150 <readRegister+0x78>)
 800112c:	f007 faa8 	bl	8008680 <HAL_I2C_Master_Receive>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <readRegister+0x7c>)
 8001136:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <readRegister+0x7c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <readRegister+0x6e>
    }
    return buf0[0];
 8001144:	7a3b      	ldrb	r3, [r7, #8]
  }
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000021c 	.word	0x2000021c
 8001154:	20000218 	.word	0x20000218

08001158 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 800115e:	2003      	movs	r0, #3
 8001160:	f7ff ffba 	bl	80010d8 <readRegister>
 8001164:	4603      	mov	r3, r0
 8001166:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 8001168:	2004      	movs	r0, #4
 800116a:	f7ff ffb5 	bl	80010d8 <readRegister>
 800116e:	4603      	mov	r3, r0
 8001170:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	021a      	lsls	r2, r3, #8
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	119b      	asrs	r3, r3, #6
 800117c:	b29b      	uxth	r3, r3
  }
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 800118c:	2005      	movs	r0, #5
 800118e:	f7ff ffa3 	bl	80010d8 <readRegister>
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 8001196:	2006      	movs	r0, #6
 8001198:	f7ff ff9e 	bl	80010d8 <readRegister>
 800119c:	4603      	mov	r3, r0
 800119e:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	021a      	lsls	r2, r3, #8
 80011a4:	88bb      	ldrh	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	119b      	asrs	r3, r3, #6
 80011aa:	b29b      	uxth	r3, r3
  }
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 80011ba:	f7ff ffcd 	bl	8001158 <getHorizontal>
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 80011c2:	f7ff ffe0 	bl	8001186 <getVertical>
 80011c6:	4603      	mov	r3, r0
 80011c8:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	2bfa      	cmp	r3, #250	@ 0xfa
 80011ce:	d906      	bls.n	80011de <threshold+0x2a>
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d801      	bhi.n	80011de <threshold+0x2a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <threshold+0x2c>
 80011de:	2300      	movs	r3, #0
 80011e0:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2bf9      	cmp	r3, #249	@ 0xf9
 80011e6:	d804      	bhi.n	80011f2 <threshold+0x3e>
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <threshold+0x3e>
		  return 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00a      	b.n	8001208 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d904      	bls.n	8001206 <threshold+0x52>
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <threshold+0x52>
		  return 2;
 8001202:	2302      	movs	r3, #2
 8001204:	e000      	b.n	8001208 <threshold+0x54>
	  }
	  return 0;
 8001206:	2300      	movs	r3, #0
  }
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    int val = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 800121a:	2120      	movs	r1, #32
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f007 f828 	bl	8008274 <HAL_GPIO_ReadPin>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <RowChecker+0x1e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	e000      	b.n	8001230 <RowChecker+0x20>
 800122e:	2301      	movs	r3, #1
 8001230:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 8001232:	2140      	movs	r1, #64	@ 0x40
 8001234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001238:	f007 f81c 	bl	8008274 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <RowChecker+0x36>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	e000      	b.n	8001248 <RowChecker+0x38>
 8001246:	2302      	movs	r3, #2
 8001248:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 800124a:	2180      	movs	r1, #128	@ 0x80
 800124c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001250:	f007 f810 	bl	8008274 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <RowChecker+0x4e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	e000      	b.n	8001260 <RowChecker+0x50>
 800125e:	2303      	movs	r3, #3
 8001260:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 8001262:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <RowChecker+0x74>)
 8001268:	f007 f804 	bl	8008274 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <RowChecker+0x66>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	e000      	b.n	8001278 <RowChecker+0x68>
 8001276:	2304      	movs	r3, #4
 8001278:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 800127a:	687b      	ldr	r3, [r7, #4]
  }
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000c00 	.word	0x48000c00

08001288 <keypad_init>:
//		}
//		return 0;
//	}


void keypad_init(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001292:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <keypad_init+0x38>)
 8001294:	f007 f806 	bl	80082a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <keypad_init+0x3c>)
 80012a0:	f007 f800 	bl	80082a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <keypad_init+0x38>)
 80012ac:	f006 fffa 	bl	80082a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <keypad_init+0x3c>)
 80012b8:	f006 fff4 	bl	80082a4 <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	48001000 	.word	0x48001000
 80012c4:	48001400 	.word	0x48001400

080012c8 <KeyPadReturn>:


	//Processes the row (val) and col values to get the number associated with that row and col
	//weightSel is used to determine if Weight (1) or Age (0) is being input
  uint8_t KeyPadReturn(int row, int col, int weightSel) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
	// 1-based indexing, row 0 is nothing
	// col 4 are letters
    if (row == 0 || col == 4) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <KeyPadReturn+0x18>
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d101      	bne.n	80012e4 <KeyPadReturn+0x1c>
      return 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e0bc      	b.n	800145e <KeyPadReturn+0x196>
    }
    HAL_Delay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f005 fbc9 	bl	8006a7c <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 80012ea:	bf00      	nop
 80012ec:	f7ff ff90 	bl	8001210 <RowChecker>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d0f9      	beq.n	80012ec <KeyPadReturn+0x24>
    }
    HAL_Delay(10);
 80012f8:	200a      	movs	r0, #10
 80012fa:	f005 fbbf 	bl	8006a7c <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3b01      	subs	r3, #1
 8001306:	4958      	ldr	r1, [pc, #352]	@ (8001468 <KeyPadReturn+0x1a0>)
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	440a      	add	r2, r1
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	74fb      	strb	r3, [r7, #19]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 8001312:	7cfb      	ldrb	r3, [r7, #19]
 8001314:	2b23      	cmp	r3, #35	@ 0x23
 8001316:	d13c      	bne.n	8001392 <KeyPadReturn+0xca>
    	// Go to main display
      if (weightCounter == 0) {
 8001318:	4b54      	ldr	r3, [pc, #336]	@ (800146c <KeyPadReturn+0x1a4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <KeyPadReturn+0x5c>
        // If there is no value for weight, just return
        return 0;
 8001320:	2300      	movs	r3, #0
 8001322:	e09c      	b.n	800145e <KeyPadReturn+0x196>
      for (uint8_t i = 0; i < weightCounter; i++) {
        // print the values here
        //printf("%x ", ASCII_Weight[i]);
      }
      printf("\n");*/
      if(weightSel){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <KeyPadReturn+0x70>
          	ASCII_Weight[weightCounter] = '\0';
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <KeyPadReturn+0x1a4>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4b4f      	ldr	r3, [pc, #316]	@ (8001470 <KeyPadReturn+0x1a8>)
 8001332:	2100      	movs	r1, #0
 8001334:	5499      	strb	r1, [r3, r2]
 8001336:	e027      	b.n	8001388 <KeyPadReturn+0xc0>
      }
      else{
    	  ASCII_Age[weightCounter] = '\0';
 8001338:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <KeyPadReturn+0x1a4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <KeyPadReturn+0x1ac>)
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]
    	  age = 0;
 8001344:	4b4c      	ldr	r3, [pc, #304]	@ (8001478 <KeyPadReturn+0x1b0>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
//    	  for (size_t i = weightCounter - 1; i <= 0; i++) {
//    		  age += ASCII_Age[i] * ;
//    	  }
    	  int i = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
    	  while (ASCII_Age[i] != '\0') {
 800134e:	e015      	b.n	800137c <KeyPadReturn+0xb4>
    		  age *= 10;
 8001350:	4b49      	ldr	r3, [pc, #292]	@ (8001478 <KeyPadReturn+0x1b0>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b46      	ldr	r3, [pc, #280]	@ (8001478 <KeyPadReturn+0x1b0>)
 8001360:	701a      	strb	r2, [r3, #0]
    		  age += ASCII_Age[i++] - 48;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	617a      	str	r2, [r7, #20]
 8001368:	4a42      	ldr	r2, [pc, #264]	@ (8001474 <KeyPadReturn+0x1ac>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	3b30      	subs	r3, #48	@ 0x30
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <KeyPadReturn+0x1b0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4413      	add	r3, r2
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <KeyPadReturn+0x1b0>)
 800137a:	701a      	strb	r2, [r3, #0]
    	  while (ASCII_Age[i] != '\0') {
 800137c:	4a3d      	ldr	r2, [pc, #244]	@ (8001474 <KeyPadReturn+0x1ac>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1e3      	bne.n	8001350 <KeyPadReturn+0x88>
    	  }
      }
      weightCounter = 0;
 8001388:	4b38      	ldr	r3, [pc, #224]	@ (800146c <KeyPadReturn+0x1a4>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      //LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
      return 1;
 800138e:	2301      	movs	r3, #1
 8001390:	e065      	b.n	800145e <KeyPadReturn+0x196>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 8001392:	7cfb      	ldrb	r3, [r7, #19]
 8001394:	2b2a      	cmp	r3, #42	@ 0x2a
 8001396:	d006      	beq.n	80013a6 <KeyPadReturn+0xde>
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <KeyPadReturn+0x1a4>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	2305      	movs	r3, #5
 80013a0:	3b02      	subs	r3, #2
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d118      	bne.n	80013d8 <KeyPadReturn+0x110>
    	// Wipe screen
    	if(weightSel){
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <KeyPadReturn+0xf6>
    		LCD_Fill(105, 5, 170, 5+28, C_BLACK);
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2321      	movs	r3, #33	@ 0x21
 80013b2:	22aa      	movs	r2, #170	@ 0xaa
 80013b4:	2105      	movs	r1, #5
 80013b6:	2069      	movs	r0, #105	@ 0x69
 80013b8:	f000 fb2c 	bl	8001a14 <LCD_Fill>
 80013bc:	e007      	b.n	80013ce <KeyPadReturn+0x106>
    	}
    	else{
    		LCD_Fill(80, 5, 170, 5+28, C_BLACK);
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2321      	movs	r3, #33	@ 0x21
 80013c4:	22aa      	movs	r2, #170	@ 0xaa
 80013c6:	2105      	movs	r1, #5
 80013c8:	2050      	movs	r0, #80	@ 0x50
 80013ca:	f000 fb23 	bl	8001a14 <LCD_Fill>
    	}
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <KeyPadReturn+0x1a4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
      return 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e042      	b.n	800145e <KeyPadReturn+0x196>
    }
    //printf("ASCII value: %x\n", ASCII_Value);


    if(weightSel){
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d01c      	beq.n	8001418 <KeyPadReturn+0x150>
    	ASCII_Weight[weightCounter] = ASCII_Value;
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <KeyPadReturn+0x1a4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <KeyPadReturn+0x1a8>)
 80013e6:	7cfb      	ldrb	r3, [r7, #19]
 80013e8:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(105 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 80013ea:	4b20      	ldr	r3, [pc, #128]	@ (800146c <KeyPadReturn+0x1a4>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3369      	adds	r3, #105	@ 0x69
 80013fa:	b298      	uxth	r0, r3
 80013fc:	7cfa      	ldrb	r2, [r7, #19]
 80013fe:	2300      	movs	r3, #0
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <KeyPadReturn+0x1b4>)
 800140a:	2105      	movs	r1, #5
 800140c:	f000 fbc8 	bl	8001ba0 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f003 ffdf 	bl	80053d4 <UG_FontSetTransparency>
 8001416:	e01b      	b.n	8001450 <KeyPadReturn+0x188>
    }
    else{
    	ASCII_Age[weightCounter] = ASCII_Value;
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <KeyPadReturn+0x1a4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <KeyPadReturn+0x1ac>)
 8001420:	7cfb      	ldrb	r3, [r7, #19]
 8001422:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(80 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <KeyPadReturn+0x1a4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	b29b      	uxth	r3, r3
 8001432:	3350      	adds	r3, #80	@ 0x50
 8001434:	b298      	uxth	r0, r3
 8001436:	7cfa      	ldrb	r2, [r7, #19]
 8001438:	2300      	movs	r3, #0
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <KeyPadReturn+0x1b4>)
 8001444:	2105      	movs	r1, #5
 8001446:	f000 fbab 	bl	8001ba0 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f003 ffc2 	bl	80053d4 <UG_FontSetTransparency>

    }

    weightCounter++;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <KeyPadReturn+0x1a4>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <KeyPadReturn+0x1a4>)
 800145a:	701a      	strb	r2, [r3, #0]
    return 0;
 800145c:	2300      	movs	r3, #0
  }
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000000 	.word	0x20000000
 800146c:	2000027e 	.word	0x2000027e
 8001470:	20000270 	.word	0x20000270
 8001474:	20000278 	.word	0x20000278
 8001478:	2000027d 	.word	0x2000027d
 800147c:	08012c10 	.word	0x08012c10

08001480 <running>:



  void running(){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af02      	add	r7, sp, #8
	  uint8_t finished = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
	  //Gathers Weight data
	  LCD_PutStr(5, 5, "Weight: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 800148e:	2300      	movs	r3, #0
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4b79      	ldr	r3, [pc, #484]	@ (8001680 <running+0x200>)
 800149a:	4a7a      	ldr	r2, [pc, #488]	@ (8001684 <running+0x204>)
 800149c:	2105      	movs	r1, #5
 800149e:	2005      	movs	r0, #5
 80014a0:	f000 fb9b 	bl	8001bda <LCD_PutStr>
  while (!finished) {
 80014a4:	e060      	b.n	8001568 <running+0xe8>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ac:	4876      	ldr	r0, [pc, #472]	@ (8001688 <running+0x208>)
 80014ae:	f006 fef9 	bl	80082a4 <HAL_GPIO_WritePin>
      val = RowChecker();
 80014b2:	f7ff fead 	bl	8001210 <RowChecker>
 80014b6:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4, 1);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2104      	movs	r1, #4
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f7ff ff03 	bl	80012c8 <KeyPadReturn>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014cc:	486e      	ldr	r0, [pc, #440]	@ (8001688 <running+0x208>)
 80014ce:	f006 fee9 	bl	80082a4 <HAL_GPIO_WritePin>
      if (finished) break;
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d14b      	bne.n	8001570 <running+0xf0>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014de:	486b      	ldr	r0, [pc, #428]	@ (800168c <running+0x20c>)
 80014e0:	f006 fee0 	bl	80082a4 <HAL_GPIO_WritePin>
      val = RowChecker();
 80014e4:	f7ff fe94 	bl	8001210 <RowChecker>
 80014e8:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3, 1);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2103      	movs	r1, #3
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f7ff feea 	bl	80012c8 <KeyPadReturn>
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014fe:	4863      	ldr	r0, [pc, #396]	@ (800168c <running+0x20c>)
 8001500:	f006 fed0 	bl	80082a4 <HAL_GPIO_WritePin>
      if (finished) break;
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d134      	bne.n	8001574 <running+0xf4>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001510:	485e      	ldr	r0, [pc, #376]	@ (800168c <running+0x20c>)
 8001512:	f006 fec7 	bl	80082a4 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001516:	f7ff fe7b 	bl	8001210 <RowChecker>
 800151a:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	2102      	movs	r1, #2
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f7ff fed1 	bl	80012c8 <KeyPadReturn>
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001530:	4856      	ldr	r0, [pc, #344]	@ (800168c <running+0x20c>)
 8001532:	f006 feb7 	bl	80082a4 <HAL_GPIO_WritePin>
      if (finished) break;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d11d      	bne.n	8001578 <running+0xf8>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001542:	4851      	ldr	r0, [pc, #324]	@ (8001688 <running+0x208>)
 8001544:	f006 feae 	bl	80082a4 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001548:	f7ff fe62 	bl	8001210 <RowChecker>
 800154c:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1, 1);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f7ff feb8 	bl	80012c8 <KeyPadReturn>
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001562:	4849      	ldr	r0, [pc, #292]	@ (8001688 <running+0x208>)
 8001564:	f006 fe9e 	bl	80082a4 <HAL_GPIO_WritePin>
  while (!finished) {
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d09b      	beq.n	80014a6 <running+0x26>
 800156e:	e004      	b.n	800157a <running+0xfa>
      if (finished) break;
 8001570:	bf00      	nop
 8001572:	e002      	b.n	800157a <running+0xfa>
      if (finished) break;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <running+0xfa>
      if (finished) break;
 8001578:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  	  finished = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]
  	  LCD_Fill(5, 5, 170, 5+28, C_BLACK);
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2321      	movs	r3, #33	@ 0x21
 8001584:	22aa      	movs	r2, #170	@ 0xaa
 8001586:	2105      	movs	r1, #5
 8001588:	2005      	movs	r0, #5
 800158a:	f000 fa43 	bl	8001a14 <LCD_Fill>
  	  //Gathers Age data
  	  LCD_PutStr(5, 5, "Age: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <running+0x200>)
 800159a:	4a3d      	ldr	r2, [pc, #244]	@ (8001690 <running+0x210>)
 800159c:	2105      	movs	r1, #5
 800159e:	2005      	movs	r0, #5
 80015a0:	f000 fb1b 	bl	8001bda <LCD_PutStr>
  	while (!finished) {
 80015a4:	e060      	b.n	8001668 <running+0x1e8>
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ac:	4836      	ldr	r0, [pc, #216]	@ (8001688 <running+0x208>)
 80015ae:	f006 fe79 	bl	80082a4 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80015b2:	f7ff fe2d 	bl	8001210 <RowChecker>
 80015b6:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 4, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2104      	movs	r1, #4
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f7ff fe83 	bl	80012c8 <KeyPadReturn>
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015cc:	482e      	ldr	r0, [pc, #184]	@ (8001688 <running+0x208>)
 80015ce:	f006 fe69 	bl	80082a4 <HAL_GPIO_WritePin>
  	      if (finished) return;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d14b      	bne.n	8001670 <running+0x1f0>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015de:	482b      	ldr	r0, [pc, #172]	@ (800168c <running+0x20c>)
 80015e0:	f006 fe60 	bl	80082a4 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80015e4:	f7ff fe14 	bl	8001210 <RowChecker>
 80015e8:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 3, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2103      	movs	r1, #3
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f7ff fe6a 	bl	80012c8 <KeyPadReturn>
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015fe:	4823      	ldr	r0, [pc, #140]	@ (800168c <running+0x20c>)
 8001600:	f006 fe50 	bl	80082a4 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d134      	bne.n	8001674 <running+0x1f4>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001610:	481e      	ldr	r0, [pc, #120]	@ (800168c <running+0x20c>)
 8001612:	f006 fe47 	bl	80082a4 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001616:	f7ff fdfb 	bl	8001210 <RowChecker>
 800161a:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 2, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2102      	movs	r1, #2
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7ff fe51 	bl	80012c8 <KeyPadReturn>
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800162a:	2201      	movs	r2, #1
 800162c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001630:	4816      	ldr	r0, [pc, #88]	@ (800168c <running+0x20c>)
 8001632:	f006 fe37 	bl	80082a4 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11d      	bne.n	8001678 <running+0x1f8>

  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001642:	4811      	ldr	r0, [pc, #68]	@ (8001688 <running+0x208>)
 8001644:	f006 fe2e 	bl	80082a4 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001648:	f7ff fde2 	bl	8001210 <RowChecker>
 800164c:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 1, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2101      	movs	r1, #1
 8001652:	6838      	ldr	r0, [r7, #0]
 8001654:	f7ff fe38 	bl	80012c8 <KeyPadReturn>
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001662:	4809      	ldr	r0, [pc, #36]	@ (8001688 <running+0x208>)
 8001664:	f006 fe1e 	bl	80082a4 <HAL_GPIO_WritePin>
  	while (!finished) {
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d09b      	beq.n	80015a6 <running+0x126>
 800166e:	e004      	b.n	800167a <running+0x1fa>
  	      if (finished) return;
 8001670:	bf00      	nop
 8001672:	e002      	b.n	800167a <running+0x1fa>
  	      if (finished) return;
 8001674:	bf00      	nop
 8001676:	e000      	b.n	800167a <running+0x1fa>
  	      if (finished) return;
 8001678:	bf00      	nop
  	}

  }
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	08012c10 	.word	0x08012c10
 8001684:	08012b78 	.word	0x08012b78
 8001688:	48001400 	.word	0x48001400
 800168c:	48001000 	.word	0x48001000
 8001690:	08012b84 	.word	0x08012b84

08001694 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <setSPI_Size+0x74>)
 80016a0:	f993 3000 	ldrsb.w	r3, [r3]
 80016a4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d027      	beq.n	80016fc <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <setSPI_Size+0x78>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b16      	ldr	r3, [pc, #88]	@ (800170c <setSPI_Size+0x78>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016ba:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80016bc:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <setSPI_Size+0x74>)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10c      	bne.n	80016e4 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <setSPI_Size+0x78>)
 80016cc:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80016d0:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <setSPI_Size+0x78>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <setSPI_Size+0x78>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016e0:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 80016e2:	e00b      	b.n	80016fc <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <setSPI_Size+0x78>)
 80016e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80016ea:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <setSPI_Size+0x78>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <setSPI_Size+0x78>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000010 	.word	0x20000010
 800170c:	20000838 	.word	0x20000838

08001710 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ffb9 	bl	8001694 <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001728:	4815      	ldr	r0, [pc, #84]	@ (8001780 <LCD_WriteCommand+0x70>)
 800172a:	f006 fdbb 	bl	80082a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001734:	4812      	ldr	r0, [pc, #72]	@ (8001780 <LCD_WriteCommand+0x70>)
 8001736:	f006 fdb5 	bl	80082a4 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	2201      	movs	r2, #1
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4810      	ldr	r0, [pc, #64]	@ (8001784 <LCD_WriteCommand+0x74>)
 8001744:	f00a fcf5 	bl	800c132 <HAL_SPI_Transmit>
	  if (argc) {
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00e      	beq.n	800176c <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001754:	480a      	ldr	r0, [pc, #40]	@ (8001780 <LCD_WriteCommand+0x70>)
 8001756:	f006 fda5 	bl	80082a4 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	1c59      	adds	r1, r3, #1
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	b29a      	uxth	r2, r3
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	4807      	ldr	r0, [pc, #28]	@ (8001784 <LCD_WriteCommand+0x74>)
 8001768:	f00a fce3 	bl	800c132 <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001772:	4803      	ldr	r0, [pc, #12]	@ (8001780 <LCD_WriteCommand+0x70>)
 8001774:	f006 fd96 	bl	80082a4 <HAL_GPIO_WritePin>
	}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	48001000 	.word	0x48001000
 8001784:	20000838 	.word	0x20000838

08001788 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001798:	4814      	ldr	r0, [pc, #80]	@ (80017ec <LCD_WriteData+0x64>)
 800179a:	f006 fd83 	bl	80082a4 <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017a4:	4811      	ldr	r0, [pc, #68]	@ (80017ec <LCD_WriteData+0x64>)
 80017a6:	f006 fd7d 	bl	80082a4 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80017aa:	e011      	b.n	80017d0 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017b2:	4293      	cmp	r3, r2
 80017b4:	bf28      	it	cs
 80017b6:	4613      	movcs	r3, r2
 80017b8:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80017ba:	89fa      	ldrh	r2, [r7, #14]
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <LCD_WriteData+0x68>)
 80017c4:	f00a fcb5 	bl	800c132 <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ea      	bne.n	80017ac <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017dc:	4803      	ldr	r0, [pc, #12]	@ (80017ec <LCD_WriteData+0x64>)
 80017de:	f006 fd61 	bl	80082a4 <HAL_GPIO_WritePin>
#endif
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	48001000 	.word	0x48001000
 80017f0:	20000838 	.word	0x20000838

080017f4 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b08b      	sub	sp, #44	@ 0x2c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	4603      	mov	r3, r0
 8001808:	80bb      	strh	r3, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	84bb      	strh	r3, [r7, #36]	@ 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800181e:	883b      	ldrh	r3, [r7, #0]
 8001820:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001822:	232a      	movs	r3, #42	@ 0x2a
 8001824:	763b      	strb	r3, [r7, #24]
 8001826:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800182a:	121b      	asrs	r3, r3, #8
 800182c:	b21b      	sxth	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	767b      	strb	r3, [r7, #25]
 8001832:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001834:	b2db      	uxtb	r3, r3
 8001836:	76bb      	strb	r3, [r7, #26]
 8001838:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800183c:	121b      	asrs	r3, r3, #8
 800183e:	b21b      	sxth	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	76fb      	strb	r3, [r7, #27]
 8001844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001846:	b2db      	uxtb	r3, r3
 8001848:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800184a:	f107 0318 	add.w	r3, r7, #24
 800184e:	2104      	movs	r1, #4
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001856:	232b      	movs	r3, #43	@ 0x2b
 8001858:	743b      	strb	r3, [r7, #16]
 800185a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800185e:	121b      	asrs	r3, r3, #8
 8001860:	b21b      	sxth	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	747b      	strb	r3, [r7, #17]
 8001866:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001868:	b2db      	uxtb	r3, r3
 800186a:	74bb      	strb	r3, [r7, #18]
 800186c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001870:	121b      	asrs	r3, r3, #8
 8001872:	b21b      	sxth	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	74fb      	strb	r3, [r7, #19]
 8001878:	8c3b      	ldrh	r3, [r7, #32]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	2104      	movs	r1, #4
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff43 	bl	8001710 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800188a:	232c      	movs	r3, #44	@ 0x2c
 800188c:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff3b 	bl	8001710 <LCD_WriteCommand>
  }
}
 800189a:	bf00      	nop
 800189c:	372c      	adds	r7, #44	@ 0x2c
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
	...

080018a4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	460b      	mov	r3, r1
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80018b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db39      	blt.n	8001932 <LCD_DrawPixel+0x8e>
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	2bef      	cmp	r3, #239	@ 0xef
 80018c4:	dc35      	bgt.n	8001932 <LCD_DrawPixel+0x8e>
 80018c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db31      	blt.n	8001932 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80018ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018d6:	da2c      	bge.n	8001932 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	b29b      	uxth	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	733b      	strb	r3, [r7, #12]
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80018e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018f8:	f7ff ff7c 	bl	80017f4 <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001902:	480e      	ldr	r0, [pc, #56]	@ (800193c <LCD_DrawPixel+0x98>)
 8001904:	f006 fcce 	bl	80082a4 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800190e:	480b      	ldr	r0, [pc, #44]	@ (800193c <LCD_DrawPixel+0x98>)
 8001910:	f006 fcc8 	bl	80082a4 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001914:	f107 010c 	add.w	r1, r7, #12
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	2202      	movs	r2, #2
 800191e:	4808      	ldr	r0, [pc, #32]	@ (8001940 <LCD_DrawPixel+0x9c>)
 8001920:	f00a fc07 	bl	800c132 <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800192a:	4804      	ldr	r0, [pc, #16]	@ (800193c <LCD_DrawPixel+0x98>)
 800192c:	f006 fcba 	bl	80082a4 <HAL_GPIO_WritePin>
 8001930:	e000      	b.n	8001934 <LCD_DrawPixel+0x90>
    return;
 8001932:	bf00      	nop
#endif
}
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	48001000 	.word	0x48001000
 8001940:	20000838 	.word	0x20000838

08001944 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	@ 0x50
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001954:	e009      	b.n	800196a <LCD_FillPixels+0x26>
      fill[t]=color;
 8001956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	3350      	adds	r3, #80	@ 0x50
 800195c:	443b      	add	r3, r7
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001966:	3301      	adds	r3, #1
 8001968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b20      	cmp	r3, #32
 800196e:	bf28      	it	cs
 8001970:	2320      	movcs	r3, #32
 8001972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001974:	429a      	cmp	r2, r3
 8001976:	d3ee      	bcc.n	8001956 <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 8001978:	e00e      	b.n	8001998 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b20      	cmp	r3, #32
 800197e:	bf28      	it	cs
 8001980:	2320      	movcs	r3, #32
 8001982:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fefc 	bl	8001788 <LCD_WriteData>
      pixels-=sz;
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ed      	bne.n	800197a <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3750      	adds	r7, #80	@ 0x50
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	4603      	mov	r3, r0
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80019c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ce:	d104      	bne.n	80019da <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fe5f 	bl	8001694 <setSPI_Size>
#endif
    return NULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e013      	b.n	8001a02 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80019da:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019ea:	f7ff ff03 	bl	80017f4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fe50 	bl	8001694 <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019fa:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <LCD_FillArea+0x64>)
 80019fc:	f006 fc52 	bl	80082a4 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <LCD_FillArea+0x68>)
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	08001945 	.word	0x08001945

08001a14 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	4611      	mov	r1, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	80fb      	strh	r3, [r7, #6]
 8001a26:	4603      	mov	r3, r0
 8001a28:	80bb      	strh	r3, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	807b      	strh	r3, [r7, #2]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	883a      	ldrh	r2, [r7, #0]
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001a4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a52:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a5a:	f7ff fecb 	bl	80017f4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fe18 	bl	8001694 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 8001a64:	8c3b      	ldrh	r3, [r7, #32]
 8001a66:	4619      	mov	r1, r3
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff ff6b 	bl	8001944 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fe10 	bl	8001694 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}

08001a7e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001a7e:	b590      	push	{r4, r7, lr}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	603a      	str	r2, [r7, #0]
 8001a88:	80fb      	strh	r3, [r7, #6]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	889b      	ldrh	r3, [r3, #4]
 8001a92:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	88db      	ldrh	r3, [r3, #6]
 8001a98:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2bef      	cmp	r3, #239	@ 0xef
 8001a9e:	d837      	bhi.n	8001b10 <LCD_DrawImage+0x92>
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001aa6:	d233      	bcs.n	8001b10 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	89fb      	ldrh	r3, [r7, #14]
 8001aac:	4413      	add	r3, r2
 8001aae:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ab0:	dc30      	bgt.n	8001b14 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001ab2:	88ba      	ldrh	r2, [r7, #4]
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001abc:	dc2c      	bgt.n	8001b18 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	7a1b      	ldrb	r3, [r3, #8]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d12a      	bne.n	8001b1c <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001ac6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001aca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ace:	88fa      	ldrh	r2, [r7, #6]
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b21c      	sxth	r4, r3
 8001adc:	88ba      	ldrh	r2, [r7, #4]
 8001ade:	89bb      	ldrh	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4622      	mov	r2, r4
 8001aec:	f7ff fe82 	bl	80017f4 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff fdcf 	bl	8001694 <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	89ba      	ldrh	r2, [r7, #12]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff fe40 	bl	8001788 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fdc3 	bl	8001694 <setSPI_Size>
 8001b0e:	e006      	b.n	8001b1e <LCD_DrawImage+0xa0>
    return;
 8001b10:	bf00      	nop
 8001b12:	e004      	b.n	8001b1e <LCD_DrawImage+0xa0>
    return;
 8001b14:	bf00      	nop
 8001b16:	e002      	b.n	8001b1e <LCD_DrawImage+0xa0>
    return;
 8001b18:	bf00      	nop
 8001b1a:	e000      	b.n	8001b1e <LCD_DrawImage+0xa0>
    return;
 8001b1c:	bf00      	nop
#endif
  }
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}

08001b24 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4623      	mov	r3, r4
 8001b34:	80fb      	strh	r3, [r7, #6]
 8001b36:	4603      	mov	r3, r0
 8001b38:	80bb      	strh	r3, [r7, #4]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	807b      	strh	r3, [r7, #2]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001b42:	88fa      	ldrh	r2, [r7, #6]
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d10a      	bne.n	8001b60 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001b4a:	88ba      	ldrh	r2, [r7, #4]
 8001b4c:	883b      	ldrh	r3, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d918      	bls.n	8001b84 <LCD_DrawLine+0x60>
 8001b52:	88bb      	ldrh	r3, [r7, #4]
 8001b54:	81bb      	strh	r3, [r7, #12]
 8001b56:	883b      	ldrh	r3, [r7, #0]
 8001b58:	80bb      	strh	r3, [r7, #4]
 8001b5a:	89bb      	ldrh	r3, [r7, #12]
 8001b5c:	803b      	strh	r3, [r7, #0]
 8001b5e:	e011      	b.n	8001b84 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001b60:	88ba      	ldrh	r2, [r7, #4]
 8001b62:	883b      	ldrh	r3, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d10a      	bne.n	8001b7e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d909      	bls.n	8001b84 <LCD_DrawLine+0x60>
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	81fb      	strh	r3, [r7, #14]
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	80fb      	strh	r3, [r7, #6]
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	e002      	b.n	8001b84 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001b84:	883c      	ldrh	r4, [r7, #0]
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	88b9      	ldrh	r1, [r7, #4]
 8001b8a:	88f8      	ldrh	r0, [r7, #6]
 8001b8c:	8c3b      	ldrh	r3, [r7, #32]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4623      	mov	r3, r4
 8001b92:	f7ff ff3f 	bl	8001a14 <LCD_Fill>
  return UG_RESULT_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}

08001ba0 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	4603      	mov	r3, r0
 8001baa:	81fb      	strh	r3, [r7, #14]
 8001bac:	460b      	mov	r3, r1
 8001bae:	81bb      	strh	r3, [r7, #12]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f003 f983 	bl	8004ec0 <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001bc2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bc6:	8c3c      	ldrh	r4, [r7, #32]
 8001bc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4623      	mov	r3, r4
 8001bce:	f003 fb79 	bl	80052c4 <UG_PutChar>
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd90      	pop	{r4, r7, pc}

08001bda <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60ba      	str	r2, [r7, #8]
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	4603      	mov	r3, r0
 8001be6:	81fb      	strh	r3, [r7, #14]
 8001be8:	460b      	mov	r3, r1
 8001bea:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f003 f967 	bl	8004ec0 <UG_FontSelect>
  UG_SetForecolor(color);
 8001bf2:	8b3b      	ldrh	r3, [r7, #24]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fba1 	bl	800533c <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001bfa:	8bbb      	ldrh	r3, [r7, #28]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fbaf 	bl	8005360 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c06:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fac1 	bl	8005194 <UG_PutString>
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <LCD_setPower+0x14>
 8001c2a:	2329      	movs	r3, #41	@ 0x29
 8001c2c:	e000      	b.n	8001c30 <LCD_setPower+0x16>
 8001c2e:	2328      	movs	r3, #40	@ 0x28
 8001c30:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fd69 	bl	8001710 <LCD_WriteCommand>
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <LCD_Update>:

static void LCD_Update(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff fd22 	bl	8001694 <setSPI_Size>
  #endif
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c60:	4829      	ldr	r0, [pc, #164]	@ (8001d08 <LCD_init+0xb4>)
 8001c62:	f006 fb1f 	bl	80082a4 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	4827      	ldr	r0, [pc, #156]	@ (8001d08 <LCD_init+0xb4>)
 8001c6c:	f006 fb1a 	bl	80082a4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f004 ff03 	bl	8006a7c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	4823      	ldr	r0, [pc, #140]	@ (8001d08 <LCD_init+0xb4>)
 8001c7c:	f006 fb12 	bl	80082a4 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001c80:	20c8      	movs	r0, #200	@ 0xc8
 8001c82:	f004 fefb 	bl	8006a7c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001c86:	4921      	ldr	r1, [pc, #132]	@ (8001d0c <LCD_init+0xb8>)
 8001c88:	4821      	ldr	r0, [pc, #132]	@ (8001d10 <LCD_init+0xbc>)
 8001c8a:	f003 f87f 	bl	8004d8c <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001c8e:	4921      	ldr	r1, [pc, #132]	@ (8001d14 <LCD_init+0xc0>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f004 fc0b 	bl	80064ac <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001c96:	4920      	ldr	r1, [pc, #128]	@ (8001d18 <LCD_init+0xc4>)
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f004 fc07 	bl	80064ac <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001c9e:	491f      	ldr	r1, [pc, #124]	@ (8001d1c <LCD_init+0xc8>)
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f004 fc03 	bl	80064ac <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001ca6:	491e      	ldr	r1, [pc, #120]	@ (8001d20 <LCD_init+0xcc>)
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f004 fbff 	bl	80064ac <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f003 fb68 	bl	8005384 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f003 fb79 	bl	80053ac <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001cba:	2300      	movs	r3, #0
 8001cbc:	80fb      	strh	r3, [r7, #6]
 8001cbe:	e013      	b.n	8001ce8 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a17      	ldr	r2, [pc, #92]	@ (8001d24 <LCD_init+0xd0>)
 8001cc6:	441a      	add	r2, r3
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4916      	ldr	r1, [pc, #88]	@ (8001d24 <LCD_init+0xd0>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f7ff fd1d 	bl	8001710 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <LCD_init+0xd0>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b4b      	cmp	r3, #75	@ 0x4b
 8001cec:	d9e8      	bls.n	8001cc0 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f003 f8f6 	bl	8004ee0 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f7ff ff90 	bl	8001c1a <LCD_setPower>
  UG_Update();
 8001cfa:	f004 fbf9 	bl	80064f0 <UG_Update>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	48001000 	.word	0x48001000
 8001d0c:	20000014 	.word	0x20000014
 8001d10:	20000280 	.word	0x20000280
 8001d14:	08001b25 	.word	0x08001b25
 8001d18:	08001a15 	.word	0x08001a15
 8001d1c:	080019a9 	.word	0x080019a9
 8001d20:	08001a7f 	.word	0x08001a7f
 8001d24:	08018000 	.word	0x08018000

08001d28 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6858      	ldr	r0, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8adb      	ldrh	r3, [r3, #22]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f006 faa9 	bl	80082a4 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	1cf9      	adds	r1, r7, #3
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f00a f9e8 	bl	800c132 <HAL_SPI_Transmit>
 8001d62:	4603      	mov	r3, r0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f107 010f 	add.w	r1, r7, #15
 8001d72:	2201      	movs	r2, #1
 8001d74:	f00a fb52 	bl	800c41c <HAL_SPI_Receive>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6858      	ldr	r0, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8adb      	ldrh	r3, [r3, #22]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4619      	mov	r1, r3
 8001d88:	f006 fa8c 	bl	80082a4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
 8001da2:	4613      	mov	r3, r2
 8001da4:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dac:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001dae:	78bb      	ldrb	r3, [r7, #2]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6858      	ldr	r0, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8adb      	ldrh	r3, [r3, #22]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f006 fa6a 	bl	80082a4 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f107 010a 	add.w	r1, r7, #10
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f00a f9a8 	bl	800c132 <HAL_SPI_Transmit>
 8001de2:	4603      	mov	r3, r0
 8001de4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6858      	ldr	r0, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8adb      	ldrh	r3, [r3, #22]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4619      	mov	r1, r3
 8001df2:	f006 fa57 	bl	80082a4 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b088      	sub	sp, #32
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6858      	ldr	r0, [r3, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8adb      	ldrh	r3, [r3, #22]
 8001e20:	2200      	movs	r2, #0
 8001e22:	4619      	mov	r1, r3
 8001e24:	f006 fa3e 	bl	80082a4 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f107 0117 	add.w	r1, r7, #23
 8001e34:	2201      	movs	r2, #1
 8001e36:	f00a f97c 	bl	800c132 <HAL_SPI_Transmit>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f00a fe3e 	bl	800cad0 <HAL_SPI_Transmit_DMA>
 8001e54:	e012      	b.n	8001e7c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	f00a f965 	bl	800c132 <HAL_SPI_Transmit>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6858      	ldr	r0, [r3, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8adb      	ldrh	r3, [r3, #22]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4619      	mov	r1, r3
 8001e78:	f006 fa14 	bl	80082a4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	460b      	mov	r3, r1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6858      	ldr	r0, [r3, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8adb      	ldrh	r3, [r3, #22]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f006 f9fc 	bl	80082a4 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f107 0117 	add.w	r1, r7, #23
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f00a f93a 	bl	800c132 <HAL_SPI_Transmit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10a      	bne.n	8001ede <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	79fa      	ldrb	r2, [r7, #7]
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00a feec 	bl	800ccb0 <HAL_SPI_Receive_DMA>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001edc:	e012      	b.n	8001f04 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	f00a fa96 	bl	800c41c <HAL_SPI_Receive>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6858      	ldr	r0, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8adb      	ldrh	r3, [r3, #22]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	f006 f9d0 	bl	80082a4 <HAL_GPIO_WritePin>
}
 8001f04:	bf00      	nop
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	2101      	movs	r1, #1
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff36 	bl	8001d96 <write_register>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f44:	d801      	bhi.n	8001f4a <set_OCP+0x16>
    imax = 45;
 8001f46:	232d      	movs	r3, #45	@ 0x2d
 8001f48:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001f4e:	d901      	bls.n	8001f54 <set_OCP+0x20>
    imax = 240;
 8001f50:	23f0      	movs	r3, #240	@ 0xf0
 8001f52:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	2b81      	cmp	r3, #129	@ 0x81
 8001f58:	d809      	bhi.n	8001f6e <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	3b2d      	subs	r3, #45	@ 0x2d
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f9c <set_OCP+0x68>)
 8001f60:	fb82 1203 	smull	r1, r2, r2, r3
 8001f64:	1052      	asrs	r2, r2, #1
 8001f66:	17db      	asrs	r3, r3, #31
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e008      	b.n	8001f80 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	331e      	adds	r3, #30
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <set_OCP+0x68>)
 8001f74:	fb82 1203 	smull	r1, r2, r2, r3
 8001f78:	1092      	asrs	r2, r2, #2
 8001f7a:	17db      	asrs	r3, r3, #31
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	f043 0320 	orr.w	r3, r3, #32
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	210b      	movs	r1, #11
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff02 	bl	8001d96 <write_register>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	66666667 	.word	0x66666667

08001fa0 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001fa8:	211d      	movs	r1, #29
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff febc 	bl	8001d28 <read_register>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	461c      	mov	r4, r3
 8001fbc:	4615      	mov	r5, r2
 8001fbe:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001fc2:	211e      	movs	r1, #30
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff feaf 	bl	8001d28 <read_register>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b0a      	cmp	r3, #10
 8001fd8:	d908      	bls.n	8001fec <set_low_data_rate_optimization+0x4c>
 8001fda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fde:	1fd1      	subs	r1, r2, #7
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	d103      	bne.n	8001fec <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2126      	movs	r1, #38	@ 0x26
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fecf 	bl	8001d96 <write_register>
}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}

08002000 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8002008:	2100      	movs	r1, #0
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff7e 	bl	8001f0c <set_mode>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7d5b      	ldrb	r3, [r3, #21]
 8002024:	461a      	mov	r2, r3
 8002026:	210f      	movs	r1, #15
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff feb4 	bl	8001d96 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800202e:	22f0      	movs	r2, #240	@ 0xf0
 8002030:	2112      	movs	r1, #18
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff feaf 	bl	8001d96 <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8002038:	2105      	movs	r1, #5
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ff66 	bl	8001f0c <set_mode>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8002050:	2101      	movs	r1, #1
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff5a 	bl	8001f0c <set_mode>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8002068:	211d      	movs	r1, #29
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fe5c 	bl	8001d28 <read_register>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	461a      	mov	r2, r3
 8002080:	211d      	movs	r1, #29
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fe87 	bl	8001d96 <write_register>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10e      	bne.n	80020c2 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	d901      	bls.n	80020ae <lora_set_tx_power+0x1e>
      level = 15;
 80020aa:	230f      	movs	r3, #15
 80020ac:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	2109      	movs	r1, #9
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fe6b 	bl	8001d96 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80020c0:	e02e      	b.n	8002120 <lora_set_tx_power+0x90>
    if (level > 20) {
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	2b14      	cmp	r3, #20
 80020c6:	d901      	bls.n	80020cc <lora_set_tx_power+0x3c>
      level = 20;
 80020c8:	2314      	movs	r3, #20
 80020ca:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d801      	bhi.n	80020d6 <lora_set_tx_power+0x46>
      level = 2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	2b11      	cmp	r3, #17
 80020da:	d90c      	bls.n	80020f6 <lora_set_tx_power+0x66>
      level -= 3;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	3b03      	subs	r3, #3
 80020e0:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80020e2:	2287      	movs	r2, #135	@ 0x87
 80020e4:	214d      	movs	r1, #77	@ 0x4d
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fe55 	bl	8001d96 <write_register>
      set_OCP(lora, 140);
 80020ec:	218c      	movs	r1, #140	@ 0x8c
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff20 	bl	8001f34 <set_OCP>
 80020f4:	e008      	b.n	8002108 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80020f6:	2284      	movs	r2, #132	@ 0x84
 80020f8:	214d      	movs	r1, #77	@ 0x4d
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fe4b 	bl	8001d96 <write_register>
      set_OCP(lora, 97);
 8002100:	2161      	movs	r1, #97	@ 0x61
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff16 	bl	8001f34 <set_OCP>
    level -= 2;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	3b02      	subs	r3, #2
 800210c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	2109      	movs	r1, #9
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fe3b 	bl	8001d96 <write_register>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8002134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002138:	f04f 0000 	mov.w	r0, #0
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	04d9      	lsls	r1, r3, #19
 8002142:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8002146:	04d0      	lsls	r0, r2, #19
 8002148:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <lora_set_frequency+0x88>)
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	f7fe fd93 	bl	8000c78 <__aeabi_uldivmod>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800215a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	0c02      	lsrs	r2, r0, #16
 8002168:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800216c:	0c0b      	lsrs	r3, r1, #16
 800216e:	b2d3      	uxtb	r3, r2
 8002170:	461a      	mov	r2, r3
 8002172:	2106      	movs	r1, #6
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff fe0e 	bl	8001d96 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800217a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	0a02      	lsrs	r2, r0, #8
 8002188:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800218c:	0a0b      	lsrs	r3, r1, #8
 800218e:	b2d3      	uxtb	r3, r2
 8002190:	461a      	mov	r2, r3
 8002192:	2107      	movs	r1, #7
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fdfe 	bl	8001d96 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800219a:	7c3b      	ldrb	r3, [r7, #16]
 800219c:	461a      	mov	r2, r3
 800219e:	2108      	movs	r1, #8
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff fdf8 	bl	8001d96 <write_register>
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	01e84800 	.word	0x01e84800

080021b4 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d802      	bhi.n	80021cc <lora_set_spreading_factor+0x18>
    sf = 6;
 80021c6:	2306      	movs	r3, #6
 80021c8:	70fb      	strb	r3, [r7, #3]
 80021ca:	e004      	b.n	80021d6 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d901      	bls.n	80021d6 <lora_set_spreading_factor+0x22>
    sf = 12;
 80021d2:	230c      	movs	r3, #12
 80021d4:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d10a      	bne.n	80021f2 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80021dc:	22c5      	movs	r2, #197	@ 0xc5
 80021de:	2131      	movs	r1, #49	@ 0x31
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fdd8 	bl	8001d96 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80021e6:	220c      	movs	r2, #12
 80021e8:	2137      	movs	r1, #55	@ 0x37
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fdd3 	bl	8001d96 <write_register>
 80021f0:	e009      	b.n	8002206 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80021f2:	22c3      	movs	r2, #195	@ 0xc3
 80021f4:	2131      	movs	r1, #49	@ 0x31
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fdcd 	bl	8001d96 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 80021fc:	220a      	movs	r2, #10
 80021fe:	2137      	movs	r1, #55	@ 0x37
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fdc8 	bl	8001d96 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8002206:	211e      	movs	r1, #30
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fd8d 	bl	8001d28 <read_register>
 800220e:	4603      	mov	r3, r0
 8002210:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	b25a      	sxtb	r2, r3
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	b25b      	sxtb	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b25b      	sxtb	r3, r3
 8002226:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	461a      	mov	r2, r3
 800222c:	211e      	movs	r1, #30
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fdb1 	bl	8001d96 <write_register>

  set_low_data_rate_optimization(lora);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff feb3 	bl	8001fa0 <set_low_data_rate_optimization>
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	b29b      	uxth	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	2120      	movs	r1, #32
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fd9b 	bl	8001d96 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	2121      	movs	r1, #33	@ 0x21
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fd91 	bl	8001d96 <write_register>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8002284:	2142      	movs	r1, #66	@ 0x42
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fd4e 	bl	8001d28 <read_register>
 800228c:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 800229e:	2101      	movs	r1, #1
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fd41 	bl	8001d28 <read_register>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d101      	bne.n	80022b8 <lora_is_transmitting+0x22>
 80022b4:	2305      	movs	r3, #5
 80022b6:	e000      	b.n	80022ba <lora_is_transmitting+0x24>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	4611      	mov	r1, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	460b      	mov	r3, r1
 80022d2:	71fb      	strb	r3, [r7, #7]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff ffdc 	bl	8002296 <lora_is_transmitting>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80022e4:	2305      	movs	r3, #5
 80022e6:	e02a      	b.n	800233e <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80022e8:	2101      	movs	r1, #1
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff fe0e 	bl	8001f0c <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f911 	bl	8002518 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	7d1b      	ldrb	r3, [r3, #20]
 80022fa:	461a      	mov	r2, r3
 80022fc:	210d      	movs	r1, #13
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff fd49 	bl	8001d96 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	7d1b      	ldrb	r3, [r3, #20]
 8002308:	461a      	mov	r2, r3
 800230a:	210e      	movs	r1, #14
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fd42 	bl	8001d96 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	461a      	mov	r2, r3
 8002316:	2122      	movs	r1, #34	@ 0x22
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff fd3c 	bl	8001d96 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	79fa      	ldrb	r2, [r7, #7]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff fd6a 	bl	8001dfe <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800232a:	79bb      	ldrb	r3, [r7, #6]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <lora_send_packet_base+0x72>
    return LORA_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e004      	b.n	800233e <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8002334:	2103      	movs	r1, #3
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff fde8 	bl	8001f0c <set_mode>
  return LORA_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	4613      	mov	r3, r2
 8002352:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8002354:	79fa      	ldrb	r2, [r7, #7]
 8002356:	2302      	movs	r3, #2
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff ffb1 	bl	80022c2 <lora_send_packet_base>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8002372:	2112      	movs	r1, #18
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fcd7 	bl	8001d28 <read_register>
 800237a:	4603      	mov	r3, r0
 800237c:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002384:	b2db      	uxtb	r3, r3
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8002396:	211d      	movs	r1, #29
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fcc5 	bl	8001d28 <read_register>
 800239e:	4603      	mov	r3, r0
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 80023a6:	7bbb      	ldrb	r3, [r7, #14]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 80023ac:	2122      	movs	r1, #34	@ 0x22
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fcba 	bl	8001d28 <read_register>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e005      	b.n	80023c6 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 80023ba:	2113      	movs	r1, #19
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff fcb3 	bl	8001d28 <read_register>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 80023e0:	2306      	movs	r3, #6
 80023e2:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 80023e8:	2112      	movs	r1, #18
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7ff fc9c 	bl	8001d28 <read_register>
 80023f0:	4603      	mov	r3, r0
 80023f2:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 80023f4:	22f0      	movs	r2, #240	@ 0xf0
 80023f6:	2112      	movs	r1, #18
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff fccc 	bl	8001d96 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 80023fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da02      	bge.n	800240c <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8002406:	2302      	movs	r3, #2
 8002408:	75fb      	strb	r3, [r7, #23]
    goto done;
 800240a:	e030      	b.n	800246e <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 800240c:	7d7b      	ldrb	r3, [r7, #21]
 800240e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02a      	beq.n	800246c <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8002416:	7d7b      	ldrb	r3, [r7, #21]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8002420:	2303      	movs	r3, #3
 8002422:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002424:	e023      	b.n	800246e <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8002426:	7d7b      	ldrb	r3, [r7, #21]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002434:	e01b      	b.n	800246e <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff ffa9 	bl	800238e <lora_pending_packet_length>
 800243c:	4603      	mov	r3, r0
 800243e:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8002440:	2110      	movs	r1, #16
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff fc70 	bl	8001d28 <read_register>
 8002448:	4603      	mov	r3, r0
 800244a:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 800244c:	7d3b      	ldrb	r3, [r7, #20]
 800244e:	461a      	mov	r2, r3
 8002450:	210d      	movs	r1, #13
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7ff fc9f 	bl	8001d96 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8002458:	f897 3020 	ldrb.w	r3, [r7, #32]
 800245c:	7dba      	ldrb	r2, [r7, #22]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff fd0e 	bl	8001e82 <read_fifo>
    res = LORA_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
 800246a:	e000      	b.n	800246e <lora_receive_packet_base+0x9e>
  }

done:
 800246c:	bf00      	nop
  if (error) {
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <lora_receive_packet_base+0xaa>
    *error = res;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7dfa      	ldrb	r2, [r7, #23]
 8002478:	701a      	strb	r2, [r3, #0]
  }

  return len;
 800247a:	7dbb      	ldrb	r3, [r7, #22]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	2302      	movs	r3, #2
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff96 	bl	80023d0 <lora_receive_packet_base>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 80024c2:	e00b      	b.n	80024dc <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff ff50 	bl	800236a <lora_is_packet_available>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f004 fad3 	bl	8006a7c <HAL_Delay>
    elapsed++;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3ef      	bcc.n	80024c4 <lora_receive_packet_blocking+0x16>
 80024e4:	e000      	b.n	80024e8 <lora_receive_packet_blocking+0x3a>
      break;
 80024e6:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff ffc8 	bl	8002484 <lora_receive_packet>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <lora_enable_interrupt_rx_done>:

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fc43 	bl	8001d96 <write_register>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8002520:	2208      	movs	r2, #8
 8002522:	2112      	movs	r1, #18
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fc36 	bl	8001d96 <write_register>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002570:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fe82 	bl	800227c <lora_version>
 8002578:	4603      	mov	r3, r0
 800257a:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b12      	cmp	r3, #18
 8002580:	d001      	beq.n	8002586 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8002582:	2304      	movs	r3, #4
 8002584:	e031      	b.n	80025ea <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f7ff fd3a 	bl	8002000 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff fd37 	bl	8002000 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8002592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fdc6 	bl	8002128 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800259c:	2107      	movs	r1, #7
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f7ff fe08 	bl	80021b4 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80025a4:	210a      	movs	r1, #10
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7ff fe4b 	bl	8002242 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fd57 	bl	8002060 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80025b2:	210c      	movs	r1, #12
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff fbb7 	bl	8001d28 <read_register>
 80025ba:	4603      	mov	r3, r0
 80025bc:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80025be:	7dbb      	ldrb	r3, [r7, #22]
 80025c0:	f043 0303 	orr.w	r3, r3, #3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	210c      	movs	r1, #12
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff fbe3 	bl	8001d96 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80025d0:	2204      	movs	r2, #4
 80025d2:	2126      	movs	r1, #38	@ 0x26
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff fbde 	bl	8001d96 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80025da:	2111      	movs	r1, #17
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff fd57 	bl	8002090 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff fd30 	bl	8002048 <lora_mode_standby>

  return LORA_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	0000      	movs	r0, r0
 80025f4:	0000      	movs	r0, r0
	...

080025f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025fc:	b0df      	sub	sp, #380	@ 0x17c
 80025fe:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 8002600:	4b63      	ldr	r3, [pc, #396]	@ (8002790 <main+0x198>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a62      	ldr	r2, [pc, #392]	@ (8002790 <main+0x198>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 800260c:	4b61      	ldr	r3, [pc, #388]	@ (8002794 <main+0x19c>)
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 8002612:	4b60      	ldr	r3, [pc, #384]	@ (8002794 <main+0x19c>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002618:	f004 f9bb 	bl	8006992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800261c:	f000 fa5e 	bl	8002adc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002620:	f000 fabe 	bl	8002ba0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002624:	f001 f988 	bl	8003938 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002628:	f000 faee 	bl	8002c08 <MX_ADC1_Init>
  MX_COMP1_Init();
 800262c:	f000 fb50 	bl	8002cd0 <MX_COMP1_Init>
  MX_COMP2_Init();
 8002630:	f000 fb7c 	bl	8002d2c <MX_COMP2_Init>
  MX_I2C1_Init();
 8002634:	f000 fba6 	bl	8002d84 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002638:	f000 fbe4 	bl	8002e04 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800263c:	f000 fc22 	bl	8002e84 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8002640:	f000 fc6c 	bl	8002f1c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002644:	f000 fcb6 	bl	8002fb4 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8002648:	f000 fd00 	bl	800304c <MX_SAI1_Init>
  MX_SAI2_Init();
 800264c:	f000 fd96 	bl	800317c <MX_SAI2_Init>
  MX_SPI3_Init();
 8002650:	f000 fe3a 	bl	80032c8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002654:	f000 fe76 	bl	8003344 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002658:	f000 ff2c 	bl	80034b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800265c:	f000 ff8e 	bl	800357c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002660:	f001 f80e 	bl	8003680 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002664:	f001 f866 	bl	8003734 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8002668:	f001 f95e 	bl	8003928 <MX_USB_OTG_FS_USB_Init>
  MX_TIM17_Init();
 800266c:	f001 f8e6 	bl	800383c <MX_TIM17_Init>
  MX_SPI2_Init();
 8002670:	f000 fdec 	bl	800324c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002674:	2108      	movs	r1, #8
 8002676:	4848      	ldr	r0, [pc, #288]	@ (8002798 <main+0x1a0>)
 8002678:	f00b fa7a 	bl	800db70 <HAL_TIM_PWM_Start>


//  ENABLE_LORA_REPEATEDLY(&lora);
  // IDK why, but the function causes a hard fault, while keeping the loop here is safe
  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 800267c:	a342      	add	r3, pc, #264	@ (adr r3, 8002788 <main+0x190>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	e9cd 2300 	strd	r2, r3, [sp]
 8002686:	2301      	movs	r3, #1
 8002688:	4a44      	ldr	r2, [pc, #272]	@ (800279c <main+0x1a4>)
 800268a:	4945      	ldr	r1, [pc, #276]	@ (80027a0 <main+0x1a8>)
 800268c:	4845      	ldr	r0, [pc, #276]	@ (80027a4 <main+0x1ac>)
 800268e:	f7ff ff50 	bl	8002532 <lora_init>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	 while (res != LORA_OK) {
 8002698:	e010      	b.n	80026bc <main+0xc4>
	   // Initialization failed
		 HAL_Delay(100);
 800269a:	2064      	movs	r0, #100	@ 0x64
 800269c:	f004 f9ee 	bl	8006a7c <HAL_Delay>
		 res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 80026a0:	a339      	add	r3, pc, #228	@ (adr r3, 8002788 <main+0x190>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	e9cd 2300 	strd	r2, r3, [sp]
 80026aa:	2301      	movs	r3, #1
 80026ac:	4a3b      	ldr	r2, [pc, #236]	@ (800279c <main+0x1a4>)
 80026ae:	493c      	ldr	r1, [pc, #240]	@ (80027a0 <main+0x1a8>)
 80026b0:	483c      	ldr	r0, [pc, #240]	@ (80027a4 <main+0x1ac>)
 80026b2:	f7ff ff3e 	bl	8002532 <lora_init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	 while (res != LORA_OK) {
 80026bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ea      	bne.n	800269a <main+0xa2>
	 }
//  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
//  	     if (res != LORA_OK) {
//  	       // Initialization failed
//  	     }
LCD_init();
 80026c4:	f7ff fac6 	bl	8001c54 <LCD_init>
lora_enable_interrupt_rx_done(&lora);
 80026c8:	4836      	ldr	r0, [pc, #216]	@ (80027a4 <main+0x1ac>)
 80026ca:	f7ff ff18 	bl	80024fe <lora_enable_interrupt_rx_done>
lora_mode_receive_continuous(&lora);
 80026ce:	4835      	ldr	r0, [pc, #212]	@ (80027a4 <main+0x1ac>)
 80026d0:	f7ff fca2 	bl	8002018 <lora_mode_receive_continuous>
JOYSTICK_INIT(hi2c1);
 80026d4:	4c34      	ldr	r4, [pc, #208]	@ (80027a8 <main+0x1b0>)
 80026d6:	4668      	mov	r0, sp
 80026d8:	f104 0310 	add.w	r3, r4, #16
 80026dc:	2244      	movs	r2, #68	@ 0x44
 80026de:	4619      	mov	r1, r3
 80026e0:	f00e fab5 	bl	8010c4e <memcpy>
 80026e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026e8:	f7fe fcde 	bl	80010a8 <JOYSTICK_INIT>
TempHum_t data;
initTempHumSensor(&hi2c2);
 80026ec:	482f      	ldr	r0, [pc, #188]	@ (80027ac <main+0x1b4>)
 80026ee:	f7fe fc3b 	bl	8000f68 <initTempHumSensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// 0 = runner view
// 1 = player 1 view
// 2 = weight and age input view
uint8_t current_viewport = 0; //determines what screen state you are on
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
DISPLAY_TIMER_TRIGGERED = 0;
 80026f8:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <main+0x1b8>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
HAL_TIM_Base_Start_IT(&htim17);
 80026fe:	482d      	ldr	r0, [pc, #180]	@ (80027b4 <main+0x1bc>)
 8002700:	f00b f90e 	bl	800d920 <HAL_TIM_Base_Start_IT>

// Set this pin ('D' on keypad) low for interrupt
 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800270a:	482b      	ldr	r0, [pc, #172]	@ (80027b8 <main+0x1c0>)
 800270c:	f005 fdca 	bl	80082a4 <HAL_GPIO_WritePin>


 // DUMMY DATA FOR TESTING DATA
   struct arm_to_base armband_data = {0,0,0,0};
 8002710:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
   struct base_to_arm buzzer = {0};
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100

//   armband_data.velocity = 12.3;
//   armband_data.heartrate = 98.54;
//   armband_data.steps = 20000;
   uint16_t player_data_fill_height = 170;
 8002724:	23aa      	movs	r3, #170	@ 0xaa
 8002726:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
   char player_write_buffer[128];
   char buffer[128];
   int heartrate;
   int stepcount;

   uint8_t buzzing = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
   uint8_t wait = 1;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
    /* USER CODE BEGIN 3 */
	  // STATE MACHINE HERE
	  // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
	  // Joystick allows user to switch between states

	  uint8_t lr = threshold();
 8002736:	f7fe fd3d 	bl	80011b4 <threshold>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
	  // Toggle current_viewport when joystick right
	  if (lr == 2) {
 8002740:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 8002744:	2b02      	cmp	r3, #2
 8002746:	d115      	bne.n	8002774 <main+0x17c>
		  current_viewport = (current_viewport == 2) ? 2 : 1;
 8002748:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800274c:	2b02      	cmp	r3, #2
 800274e:	d101      	bne.n	8002754 <main+0x15c>
 8002750:	2302      	movs	r3, #2
 8002752:	e000      	b.n	8002756 <main+0x15e>
 8002754:	2301      	movs	r3, #1
 8002756:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 800275a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800275e:	2200      	movs	r2, #0
 8002760:	9200      	str	r2, [sp, #0]
 8002762:	22f0      	movs	r2, #240	@ 0xf0
 8002764:	2105      	movs	r1, #5
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff f954 	bl	8001a14 <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 800276c:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <main+0x1b8>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e032      	b.n	80027da <main+0x1e2>
	  }
	  // Toggle current_viewport when joystick left
	  else if(lr == 1){
 8002774:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 8002778:	2b01      	cmp	r3, #1
 800277a:	d12e      	bne.n	80027da <main+0x1e2>
		  current_viewport = (current_viewport == 2) ? 2 : 0;
 800277c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002780:	2b02      	cmp	r3, #2
 8002782:	d11b      	bne.n	80027bc <main+0x1c4>
 8002784:	2302      	movs	r3, #2
 8002786:	e01a      	b.n	80027be <main+0x1c6>
 8002788:	36e55840 	.word	0x36e55840
 800278c:	00000000 	.word	0x00000000
 8002790:	e000edf0 	.word	0xe000edf0
 8002794:	e0001000 	.word	0xe0001000
 8002798:	20000934 	.word	0x20000934
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	200007d4 	.word	0x200007d4
 80027a4:	20000a64 	.word	0x20000a64
 80027a8:	200003b4 	.word	0x200003b4
 80027ac:	20000408 	.word	0x20000408
 80027b0:	20000a7c 	.word	0x20000a7c
 80027b4:	20000a18 	.word	0x20000a18
 80027b8:	48001400 	.word	0x48001400
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 80027c2:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 80027c6:	2200      	movs	r2, #0
 80027c8:	9200      	str	r2, [sp, #0]
 80027ca:	22f0      	movs	r2, #240	@ 0xf0
 80027cc:	2105      	movs	r1, #5
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7ff f920 	bl	8001a14 <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 80027d4:	4bb5      	ldr	r3, [pc, #724]	@ (8002aac <main+0x4b4>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
	  }

	  if(LoRaRecieve == 1){
 80027da:	4bb5      	ldr	r3, [pc, #724]	@ (8002ab0 <main+0x4b8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d160      	bne.n	80028a4 <main+0x2ac>
		  //Get data
//		  	  lora_mode_receive_continuous(&lora);
		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 80027e2:	4639      	mov	r1, r7
 80027e4:	f207 131f 	addw	r3, r7, #287	@ 0x11f
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	f242 7310 	movw	r3, #10000	@ 0x2710
 80027ee:	2280      	movs	r2, #128	@ 0x80
 80027f0:	48b0      	ldr	r0, [pc, #704]	@ (8002ab4 <main+0x4bc>)
 80027f2:	f7ff fe5c 	bl	80024ae <lora_receive_packet_blocking>
		  	  memcpy(&armband_data, &buffer, sizeof(armband_data));
 80027f6:	4639      	mov	r1, r7
 80027f8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80027fc:	2210      	movs	r2, #16
 80027fe:	4618      	mov	r0, r3
 8002800:	f00e fa25 	bl	8010c4e <memcpy>
//		  	  if (res != LORA_OK) {
//		  		  // Receive failed
//		  	  }

		  	  if (heartRateHigh(armband_data.heartrate, age) || heartRateLow(armband_data.heartrate, age)){
 8002804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002808:	4aab      	ldr	r2, [pc, #684]	@ (8002ab8 <main+0x4c0>)
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f002 f836 	bl	8004880 <heartRateHigh>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <main+0x238>
 800281a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800281e:	4aa6      	ldr	r2, [pc, #664]	@ (8002ab8 <main+0x4c0>)
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f002 f857 	bl	80048d8 <heartRateLow>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <main+0x24c>
		  		res = lora_send_packet(&lora, &buzzer, 1);
 8002830:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002834:	2201      	movs	r2, #1
 8002836:	4619      	mov	r1, r3
 8002838:	489e      	ldr	r0, [pc, #632]	@ (8002ab4 <main+0x4bc>)
 800283a:	f7ff fd84 	bl	8002346 <lora_send_packet>
 800283e:	4603      	mov	r3, r0
 8002840:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		  	  }

		  	  // Conditions to set buzz at base station
		  	  if (get_strain_factor() < 50 && get_strain_factor() > 0) {
 8002844:	f002 f8e4 	bl	8004a10 <get_strain_factor>
 8002848:	eef0 7a40 	vmov.f32	s15, s0
 800284c:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8002abc <main+0x4c4>
 8002850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	d50f      	bpl.n	800287a <main+0x282>
 800285a:	f002 f8d9 	bl	8004a10 <get_strain_factor>
 800285e:	eef0 7a40 	vmov.f32	s15, s0
 8002862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	dd06      	ble.n	800287a <main+0x282>

		  		// TEMP BUZZ DATA HERE
		  		TIM3->CCR3 = 15000;
 800286c:	4b94      	ldr	r3, [pc, #592]	@ (8002ac0 <main+0x4c8>)
 800286e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002872:	63da      	str	r2, [r3, #60]	@ 0x3c
		  		buzzing = 1;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
		  	  }

		  	lora_mode_receive_continuous(&lora);
 800287a:	488e      	ldr	r0, [pc, #568]	@ (8002ab4 <main+0x4bc>)
 800287c:	f7ff fbcc 	bl	8002018 <lora_mode_receive_continuous>




		  	if (!lora_is_packet_available(&lora))
 8002880:	488c      	ldr	r0, [pc, #560]	@ (8002ab4 <main+0x4bc>)
 8002882:	f7ff fd72 	bl	800236a <lora_is_packet_available>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <main+0x29a>
		  		LoRaRecieve = 0;
 800288c:	4b88      	ldr	r3, [pc, #544]	@ (8002ab0 <main+0x4b8>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
		  	input_data(armband_data.heartrate, armband_data.velocity);
 8002892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002896:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 f846 	bl	8004930 <input_data>
	  }

	  // HOME SCREEN / RUNNER VIEW
	  if (current_viewport == 0 && DISPLAY_TIMER_TRIGGERED == 1) {
 80028a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d14b      	bne.n	8002944 <main+0x34c>
 80028ac:	4b7f      	ldr	r3, [pc, #508]	@ (8002aac <main+0x4b4>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d147      	bne.n	8002944 <main+0x34c>
		  UG_FontSetTransparency(1);
 80028b4:	2001      	movs	r0, #1
 80028b6:	f002 fd8d 	bl	80053d4 <UG_FontSetTransparency>
		  data = get_temp_hum();
 80028ba:	f7fe fba9 	bl	8001010 <get_temp_hum>
 80028be:	eeb0 7a40 	vmov.f32	s14, s0
 80028c2:	eef0 7a60 	vmov.f32	s15, s1
 80028c6:	ed87 7a45 	vstr	s14, [r7, #276]	@ 0x114
 80028ca:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118

		  // DO THE BELOW ONLY ON TIME INTERVAL
		  LCD_Fill(80, 5, 240, 120, C_BLACK);
 80028ce:	2300      	movs	r3, #0
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2378      	movs	r3, #120	@ 0x78
 80028d4:	22f0      	movs	r2, #240	@ 0xf0
 80028d6:	2105      	movs	r1, #5
 80028d8:	2050      	movs	r0, #80	@ 0x50
 80028da:	f7ff f89b 	bl	8001a14 <LCD_Fill>
		  snprintf(buffer, sizeof(buffer), "Temp: %.3f\nHumid: %.3f\nR1 Stamina: %.3f", data.temp, data.hum, get_strain_factor());
 80028de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fe48 	bl	8000578 <__aeabi_f2d>
 80028e8:	4604      	mov	r4, r0
 80028ea:	460d      	mov	r5, r1
 80028ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fe41 	bl	8000578 <__aeabi_f2d>
 80028f6:	4680      	mov	r8, r0
 80028f8:	4689      	mov	r9, r1
 80028fa:	f002 f889 	bl	8004a10 <get_strain_factor>
 80028fe:	ee10 3a10 	vmov	r3, s0
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fe38 	bl	8000578 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4638      	mov	r0, r7
 800290e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002912:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002916:	e9cd 4500 	strd	r4, r5, [sp]
 800291a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ac4 <main+0x4cc>)
 800291c:	2180      	movs	r1, #128	@ 0x80
 800291e:	f00e f88f 	bl	8010a40 <sniprintf>
		  // Blue = Green
		  LCD_PutStr(5, 5, buffer, DEFAULT_FONT, 0xE3CC, C_BLACK);
 8002922:	463a      	mov	r2, r7
 8002924:	2300      	movs	r3, #0
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	f24e 33cc 	movw	r3, #58316	@ 0xe3cc
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	4b66      	ldr	r3, [pc, #408]	@ (8002ac8 <main+0x4d0>)
 8002930:	2105      	movs	r1, #5
 8002932:	2005      	movs	r0, #5
 8002934:	f7ff f951 	bl	8001bda <LCD_PutStr>
//		  LCD_PutStr(50, 56, "Temp: " + data.temp + "\nHumid: " + data.hum, DEFAULT_FONT, C_GREEN, C_BLACK);
		  // Why the HAL_Delays? don't these only trigger on a timer anyway?
		  HAL_Delay(100);
 8002938:	2064      	movs	r0, #100	@ 0x64
 800293a:	f004 f89f 	bl	8006a7c <HAL_Delay>
		  DISPLAY_TIMER_TRIGGERED = 0;
 800293e:	4b5b      	ldr	r3, [pc, #364]	@ (8002aac <main+0x4b4>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
	  }
	  // We need an actual interrupt, otherwise can't listen for LoRa
	  if(current_viewport == 1 && KeyPadSelect){
 8002944:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <main+0x362>
 800294c:	4b5f      	ldr	r3, [pc, #380]	@ (8002acc <main+0x4d4>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <main+0x362>
		  current_viewport = 2;
 8002954:	2302      	movs	r3, #2
 8002956:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
//		  while(KeyPadSelect == 1){}
	  }
	  if (DISPLAY_TIMER_TRIGGERED == 1 && buzzing) {
 800295a:	4b54      	ldr	r3, [pc, #336]	@ (8002aac <main+0x4b4>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d114      	bne.n	800298c <main+0x394>
 8002962:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <main+0x394>

	  		  if (wait == 0) {
 800296a:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <main+0x38e>
	  			TIM3->CCR3 = 0;
 8002972:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <main+0x4c8>)
 8002974:	2200      	movs	r2, #0
 8002976:	63da      	str	r2, [r3, #60]	@ 0x3c
	  			buzzing = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
	  			wait = 1;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 8002984:	e002      	b.n	800298c <main+0x394>
	  		  } else {
	  			  wait = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
	  		  }
	  	  }

	  if (current_viewport == 1 && DISPLAY_TIMER_TRIGGERED == 1) {
 800298c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002990:	2b01      	cmp	r3, #1
 8002992:	d14c      	bne.n	8002a2e <main+0x436>
 8002994:	4b45      	ldr	r3, [pc, #276]	@ (8002aac <main+0x4b4>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d148      	bne.n	8002a2e <main+0x436>
		  UG_FontSetTransparency(1);
 800299c:	2001      	movs	r0, #1
 800299e:	f002 fd19 	bl	80053d4 <UG_FontSetTransparency>
		  //Get the data that will be displayed by each player

//		  LCD_Fill(100, 5, 240, player_data_fill_height, C_BLACK);
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 80029a2:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2300      	movs	r3, #0
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	4b46      	ldr	r3, [pc, #280]	@ (8002ac8 <main+0x4d0>)
 80029b0:	2105      	movs	r1, #5
 80029b2:	2005      	movs	r0, #5
 80029b4:	f7ff f911 	bl	8001bda <LCD_PutStr>
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
				  "R1 Statistics\n\nVelocity: %.3f\nHeart Rate: %d\nStamina: %.3f\nDistance: %.3f\nStep Count: %d",
				  armband_data.velocity, armband_data.heartrate, get_strain_factor(),
 80029b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fddb 	bl	8000578 <__aeabi_f2d>
 80029c2:	4604      	mov	r4, r0
 80029c4:	460d      	mov	r5, r1
 80029c6:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
				  armband_data.velocity, armband_data.heartrate, get_strain_factor(),
 80029ca:	f002 f821 	bl	8004a10 <get_strain_factor>
 80029ce:	ee10 3a10 	vmov	r3, s0
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fdd0 	bl	8000578 <__aeabi_f2d>
 80029d8:	4680      	mov	r8, r0
 80029da:	4689      	mov	r9, r1
				  armband_data.distance, armband_data.steps);
 80029dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fdc9 	bl	8000578 <__aeabi_f2d>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80029ee:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80029f2:	9108      	str	r1, [sp, #32]
 80029f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80029f8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80029fc:	9602      	str	r6, [sp, #8]
 80029fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002a02:	4a33      	ldr	r2, [pc, #204]	@ (8002ad0 <main+0x4d8>)
 8002a04:	2180      	movs	r1, #128	@ 0x80
 8002a06:	f00e f81b 	bl	8010a40 <sniprintf>
		  // Green = Red
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_GREEN, C_BLACK);
 8002a0a:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac8 <main+0x4d0>)
 8002a1a:	2105      	movs	r1, #5
 8002a1c:	2005      	movs	r0, #5
 8002a1e:	f7ff f8dc 	bl	8001bda <LCD_PutStr>
		  HAL_Delay(100);
 8002a22:	2064      	movs	r0, #100	@ 0x64
 8002a24:	f004 f82a 	bl	8006a7c <HAL_Delay>
		  DISPLAY_TIMER_TRIGGERED = 0;
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <main+0x4b4>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]




	  // WEIGHT AND AGE INPUT
	  if (current_viewport == 2) {
 8002a2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d131      	bne.n	8002a9a <main+0x4a2>
		  LCD_Fill(5, 5, 240, player_data_fill_height, C_BLACK);
 8002a36:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	9200      	str	r2, [sp, #0]
 8002a3e:	22f0      	movs	r2, #240	@ 0xf0
 8002a40:	2105      	movs	r1, #5
 8002a42:	2005      	movs	r0, #5
 8002a44:	f7fe ffe6 	bl	8001a14 <LCD_Fill>
		  while ( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8002a48:	bf00      	nop
 8002a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a4e:	4821      	ldr	r0, [pc, #132]	@ (8002ad4 <main+0x4dc>)
 8002a50:	f005 fc10 	bl	8008274 <HAL_GPIO_ReadPin>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f7      	beq.n	8002a4a <main+0x452>
		     }
		  keypad_init();
 8002a5a:	f7fe fc15 	bl	8001288 <keypad_init>
		  running();
 8002a5e:	f7fe fd0f 	bl	8001480 <running>
		  init_analytics(age);
 8002a62:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <main+0x4c0>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 fee2 	bl	8004830 <init_analytics>
		  KeyPadSelect = 0;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <main+0x4d4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
		  // Go back to runner screen
		  current_viewport = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
		  LCD_Fill(5, 5, 160, 40, C_BLACK);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2328      	movs	r3, #40	@ 0x28
 8002a7e:	22a0      	movs	r2, #160	@ 0xa0
 8002a80:	2105      	movs	r1, #5
 8002a82:	2005      	movs	r0, #5
 8002a84:	f7fe ffc6 	bl	8001a14 <LCD_Fill>
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002a88:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <main+0x4b4>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
		  // Listen to 'D' again
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a94:	4810      	ldr	r0, [pc, #64]	@ (8002ad8 <main+0x4e0>)
 8002a96:	f005 fc05 	bl	80082a4 <HAL_GPIO_WritePin>
//	  //	  UG_Update();
//	  	  LCD_PutStr(50,56, "TESTING", DEFAULT_FONT, C_GREEN, C_BLACK);
//	  	  HAL_Delay(500);


	  heartrate = armband_data.heartrate;
 8002a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	  stepcount = armband_data.steps;
 8002aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aa6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  {
 8002aaa:	e644      	b.n	8002736 <main+0x13e>
 8002aac:	20000a7c 	.word	0x20000a7c
 8002ab0:	20000a7e 	.word	0x20000a7e
 8002ab4:	20000a64 	.word	0x20000a64
 8002ab8:	2000027d 	.word	0x2000027d
 8002abc:	42480000 	.word	0x42480000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	08012b8c 	.word	0x08012b8c
 8002ac8:	08012c10 	.word	0x08012c10
 8002acc:	20000a7d 	.word	0x20000a7d
 8002ad0:	08012bb4 	.word	0x08012bb4
 8002ad4:	48000c00 	.word	0x48000c00
 8002ad8:	48001400 	.word	0x48001400

08002adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b096      	sub	sp, #88	@ 0x58
 8002ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	2244      	movs	r2, #68	@ 0x44
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f00e f81f 	bl	8010b2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af0:	463b      	mov	r3, r7
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002afe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002b02:	f006 fa0d 	bl	8008f20 <HAL_PWREx_ControlVoltageScaling>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002b0c:	f001 f88e 	bl	8003c2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b10:	f006 f9d6 	bl	8008ec0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002b14:	4b21      	ldr	r3, [pc, #132]	@ (8002b9c <SystemClock_Config+0xc0>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1a:	4a20      	ldr	r2, [pc, #128]	@ (8002b9c <SystemClock_Config+0xc0>)
 8002b1c:	f023 0318 	bic.w	r3, r3, #24
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002b24:	2314      	movs	r3, #20
 8002b26:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002b34:	2360      	movs	r3, #96	@ 0x60
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b40:	2301      	movs	r3, #1
 8002b42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002b44:	2310      	movs	r3, #16
 8002b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b50:	2302      	movs	r3, #2
 8002b52:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f006 fa95 	bl	8009088 <HAL_RCC_OscConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002b64:	f001 f862 	bl	8003c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b68:	230f      	movs	r3, #15
 8002b6a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f006 fe9b 	bl	80098bc <HAL_RCC_ClockConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002b8c:	f001 f84e 	bl	8003c2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002b90:	f008 fba4 	bl	800b2dc <HAL_RCCEx_EnableMSIPLLMode>
}
 8002b94:	bf00      	nop
 8002b96:	3758      	adds	r7, #88	@ 0x58
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b0a6      	sub	sp, #152	@ 0x98
 8002ba4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	2294      	movs	r2, #148	@ 0x94
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f00d ffbe 	bl	8010b2e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8002bb2:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8002bb6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002bc0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002bc8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002bd6:	2318      	movs	r3, #24
 8002bd8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002bde:	2302      	movs	r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002be6:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <PeriphCommonClock_Config+0x64>)
 8002be8:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4618      	mov	r0, r3
 8002bee:	f007 f923 	bl	8009e38 <HAL_RCCEx_PeriphCLKConfig>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002bf8:	f001 f818 	bl	8003c2c <Error_Handler>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3798      	adds	r7, #152	@ 0x98
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	01110000 	.word	0x01110000

08002c08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c0e:	463b      	mov	r3, r7
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
 8002c1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c1e:	4b29      	ldr	r3, [pc, #164]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c20:	4a29      	ldr	r2, [pc, #164]	@ (8002cc8 <MX_ADC1_Init+0xc0>)
 8002c22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c24:	4b27      	ldr	r3, [pc, #156]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c2a:	4b26      	ldr	r3, [pc, #152]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c30:	4b24      	ldr	r3, [pc, #144]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c36:	4b23      	ldr	r3, [pc, #140]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c3c:	4b21      	ldr	r3, [pc, #132]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c3e:	2204      	movs	r2, #4
 8002c40:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c42:	4b20      	ldr	r3, [pc, #128]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c62:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c68:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c70:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002c76:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c7e:	4811      	ldr	r0, [pc, #68]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002c80:	f004 f8c0 	bl	8006e04 <HAL_ADC_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002c8a:	f000 ffcf 	bl	8003c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <MX_ADC1_Init+0xc4>)
 8002c90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c92:	2306      	movs	r3, #6
 8002c94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c9a:	237f      	movs	r3, #127	@ 0x7f
 8002c9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ca6:	463b      	mov	r3, r7
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4806      	ldr	r0, [pc, #24]	@ (8002cc4 <MX_ADC1_Init+0xbc>)
 8002cac:	f004 f9f0 	bl	8007090 <HAL_ADC_ConfigChannel>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002cb6:	f000 ffb9 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200002f4 	.word	0x200002f4
 8002cc8:	50040000 	.word	0x50040000
 8002ccc:	04300002 	.word	0x04300002

08002cd0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002cd6:	4a13      	ldr	r2, [pc, #76]	@ (8002d24 <MX_COMP1_Init+0x54>)
 8002cd8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8002cda:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002cdc:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <MX_COMP1_Init+0x58>)
 8002cde:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002ce2:	2280      	movs	r2, #128	@ 0x80
 8002ce4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <MX_COMP1_Init+0x50>)
 8002d0c:	f004 fe64 	bl	80079d8 <HAL_COMP_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8002d16:	f000 ff89 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2000035c 	.word	0x2000035c
 8002d24:	40010200 	.word	0x40010200
 8002d28:	00800030 	.word	0x00800030

08002d2c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002d30:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d32:	4a13      	ldr	r2, [pc, #76]	@ (8002d80 <MX_COMP2_Init+0x54>)
 8002d34:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002d36:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d38:	2270      	movs	r2, #112	@ 0x70
 8002d3a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d3e:	2280      	movs	r2, #128	@ 0x80
 8002d40:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002d66:	4805      	ldr	r0, [pc, #20]	@ (8002d7c <MX_COMP2_Init+0x50>)
 8002d68:	f004 fe36 	bl	80079d8 <HAL_COMP_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002d72:	f000 ff5b 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000388 	.word	0x20000388
 8002d80:	40010204 	.word	0x40010204

08002d84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dfc <MX_I2C1_Init+0x78>)
 8002d8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002d90:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <MX_I2C1_Init+0x7c>)
 8002d92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d94:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d9a:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002da0:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002da6:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dac:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002db2:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dbe:	480e      	ldr	r0, [pc, #56]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002dc0:	f005 faab 	bl	800831a <HAL_I2C_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002dca:	f000 ff2f 	bl	8003c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4809      	ldr	r0, [pc, #36]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002dd2:	f005 ffdd 	bl	8008d90 <HAL_I2CEx_ConfigAnalogFilter>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ddc:	f000 ff26 	bl	8003c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002de0:	2100      	movs	r1, #0
 8002de2:	4805      	ldr	r0, [pc, #20]	@ (8002df8 <MX_I2C1_Init+0x74>)
 8002de4:	f006 f81f 	bl	8008e26 <HAL_I2CEx_ConfigDigitalFilter>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002dee:	f000 ff1d 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200003b4 	.word	0x200003b4
 8002dfc:	40005400 	.word	0x40005400
 8002e00:	00707cbb 	.word	0x00707cbb

08002e04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <MX_I2C2_Init+0x78>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e10:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <MX_I2C2_Init+0x7c>)
 8002e12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002e14:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e1a:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e20:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002e26:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e3e:	480e      	ldr	r0, [pc, #56]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e40:	f005 fa6b 	bl	800831a <HAL_I2C_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002e4a:	f000 feef 	bl	8003c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4809      	ldr	r0, [pc, #36]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e52:	f005 ff9d 	bl	8008d90 <HAL_I2CEx_ConfigAnalogFilter>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002e5c:	f000 fee6 	bl	8003c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002e60:	2100      	movs	r1, #0
 8002e62:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <MX_I2C2_Init+0x74>)
 8002e64:	f005 ffdf 	bl	8008e26 <HAL_I2CEx_ConfigDigitalFilter>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002e6e:	f000 fedd 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000408 	.word	0x20000408
 8002e7c:	40005800 	.word	0x40005800
 8002e80:	00707cbb 	.word	0x00707cbb

08002e84 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e88:	4b22      	ldr	r3, [pc, #136]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002e8a:	4a23      	ldr	r2, [pc, #140]	@ (8002f18 <MX_LPUART1_UART_Init+0x94>)
 8002e8c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002e8e:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e94:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002eaa:	220c      	movs	r2, #12
 8002eac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b19      	ldr	r3, [pc, #100]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eb4:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002eba:	4b16      	ldr	r3, [pc, #88]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002ecc:	4811      	ldr	r0, [pc, #68]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002ece:	f00c f8f1 	bl	800f0b4 <HAL_UART_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ed8:	f000 fea8 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002edc:	2100      	movs	r1, #0
 8002ede:	480d      	ldr	r0, [pc, #52]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002ee0:	f00c ff14 	bl	800fd0c <HAL_UARTEx_SetTxFifoThreshold>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002eea:	f000 fe9f 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4808      	ldr	r0, [pc, #32]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002ef2:	f00c ff49 	bl	800fd88 <HAL_UARTEx_SetRxFifoThreshold>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002efc:	f000 fe96 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002f00:	4804      	ldr	r0, [pc, #16]	@ (8002f14 <MX_LPUART1_UART_Init+0x90>)
 8002f02:	f00c feca 	bl	800fc9a <HAL_UARTEx_DisableFifoMode>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f0c:	f000 fe8e 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2000045c 	.word	0x2000045c
 8002f18:	40008000 	.word	0x40008000

08002f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f20:	4b22      	ldr	r3, [pc, #136]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f22:	4a23      	ldr	r2, [pc, #140]	@ (8002fb0 <MX_USART2_UART_Init+0x94>)
 8002f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f26:	4b21      	ldr	r3, [pc, #132]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f42:	220c      	movs	r2, #12
 8002f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f46:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f4c:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f52:	4b16      	ldr	r3, [pc, #88]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f58:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f5e:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f64:	4811      	ldr	r0, [pc, #68]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f66:	f00c f8a5 	bl	800f0b4 <HAL_UART_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f70:	f000 fe5c 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f74:	2100      	movs	r1, #0
 8002f76:	480d      	ldr	r0, [pc, #52]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f78:	f00c fec8 	bl	800fd0c <HAL_UARTEx_SetTxFifoThreshold>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f82:	f000 fe53 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f86:	2100      	movs	r1, #0
 8002f88:	4808      	ldr	r0, [pc, #32]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f8a:	f00c fefd 	bl	800fd88 <HAL_UARTEx_SetRxFifoThreshold>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002f94:	f000 fe4a 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f98:	4804      	ldr	r0, [pc, #16]	@ (8002fac <MX_USART2_UART_Init+0x90>)
 8002f9a:	f00c fe7e 	bl	800fc9a <HAL_UARTEx_DisableFifoMode>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002fa4:	f000 fe42 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200004f0 	.word	0x200004f0
 8002fb0:	40004400 	.word	0x40004400

08002fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fb8:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fba:	4a23      	ldr	r2, [pc, #140]	@ (8003048 <MX_USART3_UART_Init+0x94>)
 8002fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fda:	220c      	movs	r2, #12
 8002fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe4:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fea:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ff0:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff6:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ffc:	4811      	ldr	r0, [pc, #68]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8002ffe:	f00c f859 	bl	800f0b4 <HAL_UART_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003008:	f000 fe10 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800300c:	2100      	movs	r1, #0
 800300e:	480d      	ldr	r0, [pc, #52]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8003010:	f00c fe7c 	bl	800fd0c <HAL_UARTEx_SetTxFifoThreshold>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800301a:	f000 fe07 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800301e:	2100      	movs	r1, #0
 8003020:	4808      	ldr	r0, [pc, #32]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8003022:	f00c feb1 	bl	800fd88 <HAL_UARTEx_SetRxFifoThreshold>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800302c:	f000 fdfe 	bl	8003c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003030:	4804      	ldr	r0, [pc, #16]	@ (8003044 <MX_USART3_UART_Init+0x90>)
 8003032:	f00c fe32 	bl	800fc9a <HAL_UARTEx_DisableFifoMode>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800303c:	f000 fdf6 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000584 	.word	0x20000584
 8003048:	40004800 	.word	0x40004800

0800304c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8003050:	4b45      	ldr	r3, [pc, #276]	@ (8003168 <MX_SAI1_Init+0x11c>)
 8003052:	4a46      	ldr	r2, [pc, #280]	@ (800316c <MX_SAI1_Init+0x120>)
 8003054:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8003056:	4b44      	ldr	r3, [pc, #272]	@ (8003168 <MX_SAI1_Init+0x11c>)
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800305c:	4b42      	ldr	r3, [pc, #264]	@ (8003168 <MX_SAI1_Init+0x11c>)
 800305e:	2200      	movs	r2, #0
 8003060:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8003062:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <MX_SAI1_Init+0x11c>)
 8003064:	2240      	movs	r2, #64	@ 0x40
 8003066:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003068:	4b3f      	ldr	r3, [pc, #252]	@ (8003168 <MX_SAI1_Init+0x11c>)
 800306a:	2200      	movs	r2, #0
 800306c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800306e:	4b3e      	ldr	r3, [pc, #248]	@ (8003168 <MX_SAI1_Init+0x11c>)
 8003070:	2200      	movs	r2, #0
 8003072:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003074:	4b3c      	ldr	r3, [pc, #240]	@ (8003168 <MX_SAI1_Init+0x11c>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800307a:	4b3b      	ldr	r3, [pc, #236]	@ (8003168 <MX_SAI1_Init+0x11c>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003080:	4b39      	ldr	r3, [pc, #228]	@ (8003168 <MX_SAI1_Init+0x11c>)
 8003082:	2200      	movs	r2, #0
 8003084:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8003086:	4b38      	ldr	r3, [pc, #224]	@ (8003168 <MX_SAI1_Init+0x11c>)
 8003088:	2200      	movs	r2, #0
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800308c:	4b36      	ldr	r3, [pc, #216]	@ (8003168 <MX_SAI1_Init+0x11c>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8003092:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <MX_SAI1_Init+0x11c>)
 8003094:	4a36      	ldr	r2, [pc, #216]	@ (8003170 <MX_SAI1_Init+0x124>)
 8003096:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003098:	4b33      	ldr	r3, [pc, #204]	@ (8003168 <MX_SAI1_Init+0x11c>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800309e:	4b32      	ldr	r3, [pc, #200]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80030a4:	4b30      	ldr	r3, [pc, #192]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80030aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80030b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80030b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80030be:	4b2a      	ldr	r3, [pc, #168]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80030c6:	4b28      	ldr	r3, [pc, #160]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030c8:	2208      	movs	r2, #8
 80030ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80030cc:	4b26      	ldr	r3, [pc, #152]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80030d2:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80030d8:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80030de:	4b22      	ldr	r3, [pc, #136]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80030e4:	4b20      	ldr	r3, [pc, #128]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80030ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80030f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80030fc:	481a      	ldr	r0, [pc, #104]	@ (8003168 <MX_SAI1_Init+0x11c>)
 80030fe:	f008 fc29 	bl	800b954 <HAL_SAI_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8003108:	f000 fd90 	bl	8003c2c <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <MX_SAI1_Init+0x128>)
 800310e:	4a1a      	ldr	r2, [pc, #104]	@ (8003178 <MX_SAI1_Init+0x12c>)
 8003110:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003112:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <MX_SAI1_Init+0x128>)
 8003114:	2200      	movs	r2, #0
 8003116:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003118:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <MX_SAI1_Init+0x128>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800311e:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <MX_SAI1_Init+0x128>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003124:	4b13      	ldr	r3, [pc, #76]	@ (8003174 <MX_SAI1_Init+0x128>)
 8003126:	2200      	movs	r2, #0
 8003128:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800312a:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <MX_SAI1_Init+0x128>)
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8003130:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <MX_SAI1_Init+0x128>)
 8003132:	4a0f      	ldr	r2, [pc, #60]	@ (8003170 <MX_SAI1_Init+0x124>)
 8003134:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <MX_SAI1_Init+0x128>)
 8003138:	2200      	movs	r2, #0
 800313a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800313c:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <MX_SAI1_Init+0x128>)
 800313e:	2200      	movs	r2, #0
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003142:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <MX_SAI1_Init+0x128>)
 8003144:	2200      	movs	r2, #0
 8003146:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003148:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <MX_SAI1_Init+0x128>)
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800314e:	2302      	movs	r3, #2
 8003150:	2200      	movs	r2, #0
 8003152:	2100      	movs	r1, #0
 8003154:	4807      	ldr	r0, [pc, #28]	@ (8003174 <MX_SAI1_Init+0x128>)
 8003156:	f008 fbcb 	bl	800b8f0 <HAL_SAI_InitProtocol>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8003160:	f000 fd64 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000618 	.word	0x20000618
 800316c:	40015424 	.word	0x40015424
 8003170:	0002ee00 	.word	0x0002ee00
 8003174:	200006ac 	.word	0x200006ac
 8003178:	40015404 	.word	0x40015404

0800317c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8003180:	4b2f      	ldr	r3, [pc, #188]	@ (8003240 <MX_SAI2_Init+0xc4>)
 8003182:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <MX_SAI2_Init+0xc8>)
 8003184:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003186:	4b2e      	ldr	r3, [pc, #184]	@ (8003240 <MX_SAI2_Init+0xc4>)
 8003188:	2200      	movs	r2, #0
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800318c:	4b2c      	ldr	r3, [pc, #176]	@ (8003240 <MX_SAI2_Init+0xc4>)
 800318e:	2200      	movs	r2, #0
 8003190:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8003192:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <MX_SAI2_Init+0xc4>)
 8003194:	2240      	movs	r2, #64	@ 0x40
 8003196:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003198:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <MX_SAI2_Init+0xc4>)
 800319a:	2200      	movs	r2, #0
 800319c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800319e:	4b28      	ldr	r3, [pc, #160]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80031a4:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80031aa:	4b25      	ldr	r3, [pc, #148]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80031b0:	4b23      	ldr	r3, [pc, #140]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80031b6:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80031c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031c4:	4a20      	ldr	r2, [pc, #128]	@ (8003248 <MX_SAI2_Init+0xcc>)
 80031c6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80031c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80031ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80031d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80031da:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80031e0:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80031e8:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80031ee:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031f8:	2208      	movs	r2, #8
 80031fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80031fc:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <MX_SAI2_Init+0xc4>)
 80031fe:	2201      	movs	r2, #1
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <MX_SAI2_Init+0xc4>)
 8003204:	2200      	movs	r2, #0
 8003206:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <MX_SAI2_Init+0xc4>)
 800320a:	2200      	movs	r2, #0
 800320c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800320e:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <MX_SAI2_Init+0xc4>)
 8003210:	2200      	movs	r2, #0
 8003212:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <MX_SAI2_Init+0xc4>)
 8003216:	2200      	movs	r2, #0
 8003218:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <MX_SAI2_Init+0xc4>)
 800321c:	2200      	movs	r2, #0
 800321e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8003220:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <MX_SAI2_Init+0xc4>)
 8003222:	2201      	movs	r2, #1
 8003224:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <MX_SAI2_Init+0xc4>)
 8003228:	2200      	movs	r2, #0
 800322a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800322c:	4804      	ldr	r0, [pc, #16]	@ (8003240 <MX_SAI2_Init+0xc4>)
 800322e:	f008 fb91 	bl	800b954 <HAL_SAI_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8003238:	f000 fcf8 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000740 	.word	0x20000740
 8003244:	40015804 	.word	0x40015804
 8003248:	0002ee00 	.word	0x0002ee00

0800324c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003250:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <MX_SPI2_Init+0x74>)
 8003252:	4a1c      	ldr	r2, [pc, #112]	@ (80032c4 <MX_SPI2_Init+0x78>)
 8003254:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003256:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <MX_SPI2_Init+0x74>)
 8003258:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800325c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800325e:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <MX_SPI2_Init+0x74>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003264:	4b16      	ldr	r3, [pc, #88]	@ (80032c0 <MX_SPI2_Init+0x74>)
 8003266:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800326a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800326c:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <MX_SPI2_Init+0x74>)
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003272:	4b13      	ldr	r3, [pc, #76]	@ (80032c0 <MX_SPI2_Init+0x74>)
 8003274:	2200      	movs	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003278:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <MX_SPI2_Init+0x74>)
 800327a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800327e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003280:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <MX_SPI2_Init+0x74>)
 8003282:	2218      	movs	r2, #24
 8003284:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003286:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <MX_SPI2_Init+0x74>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800328c:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <MX_SPI2_Init+0x74>)
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <MX_SPI2_Init+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003298:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <MX_SPI2_Init+0x74>)
 800329a:	2207      	movs	r2, #7
 800329c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <MX_SPI2_Init+0x74>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <MX_SPI2_Init+0x74>)
 80032a6:	2208      	movs	r2, #8
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032aa:	4805      	ldr	r0, [pc, #20]	@ (80032c0 <MX_SPI2_Init+0x74>)
 80032ac:	f008 fe9e 	bl	800bfec <HAL_SPI_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80032b6:	f000 fcb9 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200007d4 	.word	0x200007d4
 80032c4:	40003800 	.word	0x40003800

080032c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80032cc:	4b1b      	ldr	r3, [pc, #108]	@ (800333c <MX_SPI3_Init+0x74>)
 80032ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003340 <MX_SPI3_Init+0x78>)
 80032d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	@ (800333c <MX_SPI3_Init+0x74>)
 80032d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80032da:	4b18      	ldr	r3, [pc, #96]	@ (800333c <MX_SPI3_Init+0x74>)
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80032e0:	4b16      	ldr	r3, [pc, #88]	@ (800333c <MX_SPI3_Init+0x74>)
 80032e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e8:	4b14      	ldr	r3, [pc, #80]	@ (800333c <MX_SPI3_Init+0x74>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032ee:	4b13      	ldr	r3, [pc, #76]	@ (800333c <MX_SPI3_Init+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80032f4:	4b11      	ldr	r3, [pc, #68]	@ (800333c <MX_SPI3_Init+0x74>)
 80032f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032fc:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <MX_SPI3_Init+0x74>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003302:	4b0e      	ldr	r3, [pc, #56]	@ (800333c <MX_SPI3_Init+0x74>)
 8003304:	2200      	movs	r2, #0
 8003306:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <MX_SPI3_Init+0x74>)
 800330a:	2200      	movs	r2, #0
 800330c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330e:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <MX_SPI3_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003314:	4b09      	ldr	r3, [pc, #36]	@ (800333c <MX_SPI3_Init+0x74>)
 8003316:	2207      	movs	r2, #7
 8003318:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <MX_SPI3_Init+0x74>)
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003320:	4b06      	ldr	r3, [pc, #24]	@ (800333c <MX_SPI3_Init+0x74>)
 8003322:	2208      	movs	r2, #8
 8003324:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003326:	4805      	ldr	r0, [pc, #20]	@ (800333c <MX_SPI3_Init+0x74>)
 8003328:	f008 fe60 	bl	800bfec <HAL_SPI_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003332:	f000 fc7b 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000838 	.word	0x20000838
 8003340:	40003c00 	.word	0x40003c00

08003344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b098      	sub	sp, #96	@ 0x60
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800334a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003356:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	611a      	str	r2, [r3, #16]
 8003372:	615a      	str	r2, [r3, #20]
 8003374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003376:	463b      	mov	r3, r7
 8003378:	222c      	movs	r2, #44	@ 0x2c
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f00d fbd6 	bl	8010b2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003382:	4b4a      	ldr	r3, [pc, #296]	@ (80034ac <MX_TIM1_Init+0x168>)
 8003384:	4a4a      	ldr	r2, [pc, #296]	@ (80034b0 <MX_TIM1_Init+0x16c>)
 8003386:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003388:	4b48      	ldr	r3, [pc, #288]	@ (80034ac <MX_TIM1_Init+0x168>)
 800338a:	2200      	movs	r2, #0
 800338c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800338e:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <MX_TIM1_Init+0x168>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003394:	4b45      	ldr	r3, [pc, #276]	@ (80034ac <MX_TIM1_Init+0x168>)
 8003396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800339a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339c:	4b43      	ldr	r3, [pc, #268]	@ (80034ac <MX_TIM1_Init+0x168>)
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033a2:	4b42      	ldr	r3, [pc, #264]	@ (80034ac <MX_TIM1_Init+0x168>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a8:	4b40      	ldr	r3, [pc, #256]	@ (80034ac <MX_TIM1_Init+0x168>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033ae:	483f      	ldr	r0, [pc, #252]	@ (80034ac <MX_TIM1_Init+0x168>)
 80033b0:	f00a fb87 	bl	800dac2 <HAL_TIM_PWM_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80033ba:	f000 fc37 	bl	8003c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033ce:	4619      	mov	r1, r3
 80033d0:	4836      	ldr	r0, [pc, #216]	@ (80034ac <MX_TIM1_Init+0x168>)
 80033d2:	f00b fc85 	bl	800ece0 <HAL_TIMEx_MasterConfigSynchronization>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80033dc:	f000 fc26 	bl	8003c2c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80033e0:	2301      	movs	r3, #1
 80033e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80033e8:	2300      	movs	r3, #0
 80033ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80033ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80033f0:	461a      	mov	r2, r3
 80033f2:	2101      	movs	r1, #1
 80033f4:	482d      	ldr	r0, [pc, #180]	@ (80034ac <MX_TIM1_Init+0x168>)
 80033f6:	f00b fd79 	bl	800eeec <HAL_TIMEx_ConfigBreakInput>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003400:	f000 fc14 	bl	8003c2c <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8003404:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003408:	461a      	mov	r2, r3
 800340a:	2102      	movs	r1, #2
 800340c:	4827      	ldr	r0, [pc, #156]	@ (80034ac <MX_TIM1_Init+0x168>)
 800340e:	f00b fd6d 	bl	800eeec <HAL_TIMEx_ConfigBreakInput>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003418:	f000 fc08 	bl	8003c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800341c:	2360      	movs	r3, #96	@ 0x60
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003424:	2300      	movs	r3, #0
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003428:	2300      	movs	r3, #0
 800342a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800342c:	2300      	movs	r3, #0
 800342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003438:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800343c:	2208      	movs	r2, #8
 800343e:	4619      	mov	r1, r3
 8003440:	481a      	ldr	r0, [pc, #104]	@ (80034ac <MX_TIM1_Init+0x168>)
 8003442:	f00a fe17 	bl	800e074 <HAL_TIM_PWM_ConfigChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 800344c:	f000 fbee 	bl	8003c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003450:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003454:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800345a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800345c:	2300      	movs	r3, #0
 800345e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003468:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800346a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800346e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8003474:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003478:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800347a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800347e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003488:	463b      	mov	r3, r7
 800348a:	4619      	mov	r1, r3
 800348c:	4807      	ldr	r0, [pc, #28]	@ (80034ac <MX_TIM1_Init+0x168>)
 800348e:	f00b fcaf 	bl	800edf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8003498:	f000 fbc8 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800349c:	4803      	ldr	r0, [pc, #12]	@ (80034ac <MX_TIM1_Init+0x168>)
 800349e:	f000 ffc5 	bl	800442c <HAL_TIM_MspPostInit>

}
 80034a2:	bf00      	nop
 80034a4:	3760      	adds	r7, #96	@ 0x60
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000089c 	.word	0x2000089c
 80034b0:	40012c00 	.word	0x40012c00

080034b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	@ 0x28
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ba:	f107 031c 	add.w	r3, r7, #28
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034c6:	463b      	mov	r3, r7
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
 80034d4:	615a      	str	r2, [r3, #20]
 80034d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034d8:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <MX_TIM2_Init+0xc4>)
 80034da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80034e0:	4b25      	ldr	r3, [pc, #148]	@ (8003578 <MX_TIM2_Init+0xc4>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e6:	4b24      	ldr	r3, [pc, #144]	@ (8003578 <MX_TIM2_Init+0xc4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80034ec:	4b22      	ldr	r3, [pc, #136]	@ (8003578 <MX_TIM2_Init+0xc4>)
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295
 80034f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f4:	4b20      	ldr	r3, [pc, #128]	@ (8003578 <MX_TIM2_Init+0xc4>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003578 <MX_TIM2_Init+0xc4>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003500:	481d      	ldr	r0, [pc, #116]	@ (8003578 <MX_TIM2_Init+0xc4>)
 8003502:	f00a fade 	bl	800dac2 <HAL_TIM_PWM_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800350c:	f000 fb8e 	bl	8003c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003514:	2300      	movs	r3, #0
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003518:	f107 031c 	add.w	r3, r7, #28
 800351c:	4619      	mov	r1, r3
 800351e:	4816      	ldr	r0, [pc, #88]	@ (8003578 <MX_TIM2_Init+0xc4>)
 8003520:	f00b fbde 	bl	800ece0 <HAL_TIMEx_MasterConfigSynchronization>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800352a:	f000 fb7f 	bl	8003c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800352e:	2360      	movs	r3, #96	@ 0x60
 8003530:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800353e:	463b      	mov	r3, r7
 8003540:	2200      	movs	r2, #0
 8003542:	4619      	mov	r1, r3
 8003544:	480c      	ldr	r0, [pc, #48]	@ (8003578 <MX_TIM2_Init+0xc4>)
 8003546:	f00a fd95 	bl	800e074 <HAL_TIM_PWM_ConfigChannel>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003550:	f000 fb6c 	bl	8003c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003554:	463b      	mov	r3, r7
 8003556:	2208      	movs	r2, #8
 8003558:	4619      	mov	r1, r3
 800355a:	4807      	ldr	r0, [pc, #28]	@ (8003578 <MX_TIM2_Init+0xc4>)
 800355c:	f00a fd8a 	bl	800e074 <HAL_TIM_PWM_ConfigChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003566:	f000 fb61 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800356a:	4803      	ldr	r0, [pc, #12]	@ (8003578 <MX_TIM2_Init+0xc4>)
 800356c:	f000 ff5e 	bl	800442c <HAL_TIM_MspPostInit>

}
 8003570:	bf00      	nop
 8003572:	3728      	adds	r7, #40	@ 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200008e8 	.word	0x200008e8

0800357c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08e      	sub	sp, #56	@ 0x38
 8003580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003582:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003590:	f107 031c 	add.w	r3, r7, #28
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800359c:	463b      	mov	r3, r7
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	611a      	str	r2, [r3, #16]
 80035aa:	615a      	str	r2, [r3, #20]
 80035ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035ae:	4b32      	ldr	r3, [pc, #200]	@ (8003678 <MX_TIM3_Init+0xfc>)
 80035b0:	4a32      	ldr	r2, [pc, #200]	@ (800367c <MX_TIM3_Init+0x100>)
 80035b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035b4:	4b30      	ldr	r3, [pc, #192]	@ (8003678 <MX_TIM3_Init+0xfc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003678 <MX_TIM3_Init+0xfc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003678 <MX_TIM3_Init+0xfc>)
 80035c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <MX_TIM3_Init+0xfc>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003678 <MX_TIM3_Init+0xfc>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035d4:	4828      	ldr	r0, [pc, #160]	@ (8003678 <MX_TIM3_Init+0xfc>)
 80035d6:	f00a f94b 	bl	800d870 <HAL_TIM_Base_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80035e0:	f000 fb24 	bl	8003c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035ee:	4619      	mov	r1, r3
 80035f0:	4821      	ldr	r0, [pc, #132]	@ (8003678 <MX_TIM3_Init+0xfc>)
 80035f2:	f00a fe53 	bl	800e29c <HAL_TIM_ConfigClockSource>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80035fc:	f000 fb16 	bl	8003c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003600:	481d      	ldr	r0, [pc, #116]	@ (8003678 <MX_TIM3_Init+0xfc>)
 8003602:	f00a fa5e 	bl	800dac2 <HAL_TIM_PWM_Init>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800360c:	f000 fb0e 	bl	8003c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	4619      	mov	r1, r3
 800361e:	4816      	ldr	r0, [pc, #88]	@ (8003678 <MX_TIM3_Init+0xfc>)
 8003620:	f00b fb5e 	bl	800ece0 <HAL_TIMEx_MasterConfigSynchronization>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800362a:	f000 faff 	bl	8003c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800362e:	2360      	movs	r3, #96	@ 0x60
 8003630:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800363e:	463b      	mov	r3, r7
 8003640:	2204      	movs	r2, #4
 8003642:	4619      	mov	r1, r3
 8003644:	480c      	ldr	r0, [pc, #48]	@ (8003678 <MX_TIM3_Init+0xfc>)
 8003646:	f00a fd15 	bl	800e074 <HAL_TIM_PWM_ConfigChannel>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003650:	f000 faec 	bl	8003c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003654:	463b      	mov	r3, r7
 8003656:	2208      	movs	r2, #8
 8003658:	4619      	mov	r1, r3
 800365a:	4807      	ldr	r0, [pc, #28]	@ (8003678 <MX_TIM3_Init+0xfc>)
 800365c:	f00a fd0a 	bl	800e074 <HAL_TIM_PWM_ConfigChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003666:	f000 fae1 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800366a:	4803      	ldr	r0, [pc, #12]	@ (8003678 <MX_TIM3_Init+0xfc>)
 800366c:	f000 fede 	bl	800442c <HAL_TIM_MspPostInit>

}
 8003670:	bf00      	nop
 8003672:	3738      	adds	r7, #56	@ 0x38
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000934 	.word	0x20000934
 800367c:	40000400 	.word	0x40000400

08003680 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003686:	f107 031c 	add.w	r3, r7, #28
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003692:	463b      	mov	r3, r7
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
 80036a0:	615a      	str	r2, [r3, #20]
 80036a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036a4:	4b21      	ldr	r3, [pc, #132]	@ (800372c <MX_TIM4_Init+0xac>)
 80036a6:	4a22      	ldr	r2, [pc, #136]	@ (8003730 <MX_TIM4_Init+0xb0>)
 80036a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80036aa:	4b20      	ldr	r3, [pc, #128]	@ (800372c <MX_TIM4_Init+0xac>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	@ (800372c <MX_TIM4_Init+0xac>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80036b6:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <MX_TIM4_Init+0xac>)
 80036b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <MX_TIM4_Init+0xac>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c4:	4b19      	ldr	r3, [pc, #100]	@ (800372c <MX_TIM4_Init+0xac>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80036ca:	4818      	ldr	r0, [pc, #96]	@ (800372c <MX_TIM4_Init+0xac>)
 80036cc:	f00a f9f9 	bl	800dac2 <HAL_TIM_PWM_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80036d6:	f000 faa9 	bl	8003c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4619      	mov	r1, r3
 80036e8:	4810      	ldr	r0, [pc, #64]	@ (800372c <MX_TIM4_Init+0xac>)
 80036ea:	f00b faf9 	bl	800ece0 <HAL_TIMEx_MasterConfigSynchronization>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80036f4:	f000 fa9a 	bl	8003c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036f8:	2360      	movs	r3, #96	@ 0x60
 80036fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003708:	463b      	mov	r3, r7
 800370a:	220c      	movs	r2, #12
 800370c:	4619      	mov	r1, r3
 800370e:	4807      	ldr	r0, [pc, #28]	@ (800372c <MX_TIM4_Init+0xac>)
 8003710:	f00a fcb0 	bl	800e074 <HAL_TIM_PWM_ConfigChannel>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800371a:	f000 fa87 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800371e:	4803      	ldr	r0, [pc, #12]	@ (800372c <MX_TIM4_Init+0xac>)
 8003720:	f000 fe84 	bl	800442c <HAL_TIM_MspPostInit>

}
 8003724:	bf00      	nop
 8003726:	3728      	adds	r7, #40	@ 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000980 	.word	0x20000980
 8003730:	40000800 	.word	0x40000800

08003734 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b096      	sub	sp, #88	@ 0x58
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003746:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	611a      	str	r2, [r3, #16]
 8003756:	615a      	str	r2, [r3, #20]
 8003758:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	222c      	movs	r2, #44	@ 0x2c
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f00d f9e4 	bl	8010b2e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003766:	4b33      	ldr	r3, [pc, #204]	@ (8003834 <MX_TIM15_Init+0x100>)
 8003768:	4a33      	ldr	r2, [pc, #204]	@ (8003838 <MX_TIM15_Init+0x104>)
 800376a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800376c:	4b31      	ldr	r3, [pc, #196]	@ (8003834 <MX_TIM15_Init+0x100>)
 800376e:	2200      	movs	r2, #0
 8003770:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003772:	4b30      	ldr	r3, [pc, #192]	@ (8003834 <MX_TIM15_Init+0x100>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003778:	4b2e      	ldr	r3, [pc, #184]	@ (8003834 <MX_TIM15_Init+0x100>)
 800377a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800377e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003780:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <MX_TIM15_Init+0x100>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003786:	4b2b      	ldr	r3, [pc, #172]	@ (8003834 <MX_TIM15_Init+0x100>)
 8003788:	2200      	movs	r2, #0
 800378a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378c:	4b29      	ldr	r3, [pc, #164]	@ (8003834 <MX_TIM15_Init+0x100>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003792:	4828      	ldr	r0, [pc, #160]	@ (8003834 <MX_TIM15_Init+0x100>)
 8003794:	f00a f995 	bl	800dac2 <HAL_TIM_PWM_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800379e:	f000 fa45 	bl	8003c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80037aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037ae:	4619      	mov	r1, r3
 80037b0:	4820      	ldr	r0, [pc, #128]	@ (8003834 <MX_TIM15_Init+0x100>)
 80037b2:	f00b fa95 	bl	800ece0 <HAL_TIMEx_MasterConfigSynchronization>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80037bc:	f000 fa36 	bl	8003c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c0:	2360      	movs	r3, #96	@ 0x60
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037c8:	2300      	movs	r3, #0
 80037ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037cc:	2300      	movs	r3, #0
 80037ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037d8:	2300      	movs	r3, #0
 80037da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80037e0:	2200      	movs	r2, #0
 80037e2:	4619      	mov	r1, r3
 80037e4:	4813      	ldr	r0, [pc, #76]	@ (8003834 <MX_TIM15_Init+0x100>)
 80037e6:	f00a fc45 	bl	800e074 <HAL_TIM_PWM_ConfigChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80037f0:	f000 fa1c 	bl	8003c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003808:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800380c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4807      	ldr	r0, [pc, #28]	@ (8003834 <MX_TIM15_Init+0x100>)
 8003818:	f00b faea 	bl	800edf0 <HAL_TIMEx_ConfigBreakDeadTime>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8003822:	f000 fa03 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003826:	4803      	ldr	r0, [pc, #12]	@ (8003834 <MX_TIM15_Init+0x100>)
 8003828:	f000 fe00 	bl	800442c <HAL_TIM_MspPostInit>

}
 800382c:	bf00      	nop
 800382e:	3758      	adds	r7, #88	@ 0x58
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	200009cc 	.word	0x200009cc
 8003838:	40014000 	.word	0x40014000

0800383c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b092      	sub	sp, #72	@ 0x48
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	611a      	str	r2, [r3, #16]
 8003852:	615a      	str	r2, [r3, #20]
 8003854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003856:	463b      	mov	r3, r7
 8003858:	222c      	movs	r2, #44	@ 0x2c
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f00d f966 	bl	8010b2e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003862:	4b2f      	ldr	r3, [pc, #188]	@ (8003920 <MX_TIM17_Init+0xe4>)
 8003864:	4a2f      	ldr	r2, [pc, #188]	@ (8003924 <MX_TIM17_Init+0xe8>)
 8003866:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2441;
 8003868:	4b2d      	ldr	r3, [pc, #180]	@ (8003920 <MX_TIM17_Init+0xe4>)
 800386a:	f640 1289 	movw	r2, #2441	@ 0x989
 800386e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003870:	4b2b      	ldr	r3, [pc, #172]	@ (8003920 <MX_TIM17_Init+0xe4>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003876:	4b2a      	ldr	r3, [pc, #168]	@ (8003920 <MX_TIM17_Init+0xe4>)
 8003878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800387c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387e:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <MX_TIM17_Init+0xe4>)
 8003880:	2200      	movs	r2, #0
 8003882:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003884:	4b26      	ldr	r3, [pc, #152]	@ (8003920 <MX_TIM17_Init+0xe4>)
 8003886:	2200      	movs	r2, #0
 8003888:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800388a:	4b25      	ldr	r3, [pc, #148]	@ (8003920 <MX_TIM17_Init+0xe4>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003890:	4823      	ldr	r0, [pc, #140]	@ (8003920 <MX_TIM17_Init+0xe4>)
 8003892:	f009 ffed 	bl	800d870 <HAL_TIM_Base_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800389c:	f000 f9c6 	bl	8003c2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80038a0:	481f      	ldr	r0, [pc, #124]	@ (8003920 <MX_TIM17_Init+0xe4>)
 80038a2:	f00a f8ad 	bl	800da00 <HAL_TIM_OC_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80038ac:	f000 f9be 	bl	8003c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038b8:	2300      	movs	r3, #0
 80038ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038bc:	2300      	movs	r3, #0
 80038be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038c4:	2300      	movs	r3, #0
 80038c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038c8:	2300      	movs	r3, #0
 80038ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038d0:	2200      	movs	r2, #0
 80038d2:	4619      	mov	r1, r3
 80038d4:	4812      	ldr	r0, [pc, #72]	@ (8003920 <MX_TIM17_Init+0xe4>)
 80038d6:	f00a fb53 	bl	800df80 <HAL_TIM_OC_ConfigChannel>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80038e0:	f000 f9a4 	bl	8003c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038fe:	2300      	movs	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003902:	463b      	mov	r3, r7
 8003904:	4619      	mov	r1, r3
 8003906:	4806      	ldr	r0, [pc, #24]	@ (8003920 <MX_TIM17_Init+0xe4>)
 8003908:	f00b fa72 	bl	800edf0 <HAL_TIMEx_ConfigBreakDeadTime>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8003912:	f000 f98b 	bl	8003c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003916:	bf00      	nop
 8003918:	3748      	adds	r7, #72	@ 0x48
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000a18 	.word	0x20000a18
 8003924:	40014800 	.word	0x40014800

08003928 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08e      	sub	sp, #56	@ 0x38
 800393c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800394e:	4b9e      	ldr	r3, [pc, #632]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003952:	4a9d      	ldr	r2, [pc, #628]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 8003954:	f043 0310 	orr.w	r3, r3, #16
 8003958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800395a:	4b9b      	ldr	r3, [pc, #620]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003966:	4b98      	ldr	r3, [pc, #608]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396a:	4a97      	ldr	r2, [pc, #604]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003972:	4b95      	ldr	r3, [pc, #596]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800397e:	4b92      	ldr	r3, [pc, #584]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 8003980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003982:	4a91      	ldr	r2, [pc, #580]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 8003984:	f043 0320 	orr.w	r3, r3, #32
 8003988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800398a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003996:	4b8c      	ldr	r3, [pc, #560]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399a:	4a8b      	ldr	r2, [pc, #556]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 800399c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039a2:	4b89      	ldr	r3, [pc, #548]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ae:	4b86      	ldr	r3, [pc, #536]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	4a85      	ldr	r2, [pc, #532]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ba:	4b83      	ldr	r3, [pc, #524]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c6:	4b80      	ldr	r3, [pc, #512]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	4a7f      	ldr	r2, [pc, #508]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039d2:	4b7d      	ldr	r3, [pc, #500]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039de:	4b7a      	ldr	r3, [pc, #488]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	4a79      	ldr	r2, [pc, #484]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039e4:	f043 0308 	orr.w	r3, r3, #8
 80039e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ea:	4b77      	ldr	r3, [pc, #476]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039f6:	4b74      	ldr	r3, [pc, #464]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fa:	4a73      	ldr	r2, [pc, #460]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 80039fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a02:	4b71      	ldr	r3, [pc, #452]	@ (8003bc8 <MX_GPIO_Init+0x290>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003a0e:	f005 fb2b 	bl	8009068 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003a12:	2200      	movs	r2, #0
 8003a14:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003a18:	486c      	ldr	r0, [pc, #432]	@ (8003bcc <MX_GPIO_Init+0x294>)
 8003a1a:	f004 fc43 	bl	80082a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8003a24:	486a      	ldr	r0, [pc, #424]	@ (8003bd0 <MX_GPIO_Init+0x298>)
 8003a26:	f004 fc3d 	bl	80082a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4869      	ldr	r0, [pc, #420]	@ (8003bd4 <MX_GPIO_Init+0x29c>)
 8003a30:	f004 fc38 	bl	80082a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a34:	2320      	movs	r3, #32
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a46:	4619      	mov	r1, r3
 8003a48:	4860      	ldr	r0, [pc, #384]	@ (8003bcc <MX_GPIO_Init+0x294>)
 8003a4a:	f004 fa81 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a4e:	2310      	movs	r3, #16
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a5e:	2305      	movs	r3, #5
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a66:	4619      	mov	r1, r3
 8003a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a6c:	f004 fa70 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a70:	23e0      	movs	r3, #224	@ 0xe0
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a80:	4619      	mov	r1, r3
 8003a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a86:	f004 fa63 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003a8a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003a90:	2311      	movs	r3, #17
 8003a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	484a      	ldr	r0, [pc, #296]	@ (8003bcc <MX_GPIO_Init+0x294>)
 8003aa4:	f004 fa54 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8003aa8:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4843      	ldr	r0, [pc, #268]	@ (8003bd0 <MX_GPIO_Init+0x298>)
 8003ac2:	f004 fa45 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003ac6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003acc:	2311      	movs	r3, #17
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003adc:	4619      	mov	r1, r3
 8003ade:	483c      	ldr	r0, [pc, #240]	@ (8003bd0 <MX_GPIO_Init+0x298>)
 8003ae0:	f004 fa36 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ae4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003aea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af0:	2301      	movs	r3, #1
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003af8:	4619      	mov	r1, r3
 8003afa:	4836      	ldr	r0, [pc, #216]	@ (8003bd4 <MX_GPIO_Init+0x29c>)
 8003afc:	f004 fa28 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003b12:	230c      	movs	r3, #12
 8003b14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	482e      	ldr	r0, [pc, #184]	@ (8003bd8 <MX_GPIO_Init+0x2a0>)
 8003b1e:	f004 fa17 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003b22:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b30:	2303      	movs	r3, #3
 8003b32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b34:	230a      	movs	r3, #10
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b42:	f004 fa05 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b5e:	f004 f9f7 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b62:	2301      	movs	r3, #1
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b66:	2301      	movs	r3, #1
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b76:	4619      	mov	r1, r3
 8003b78:	4816      	ldr	r0, [pc, #88]	@ (8003bd4 <MX_GPIO_Init+0x29c>)
 8003b7a:	f004 f9e9 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b7e:	2304      	movs	r3, #4
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003b8e:	230c      	movs	r3, #12
 8003b90:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b96:	4619      	mov	r1, r3
 8003b98:	480e      	ldr	r0, [pc, #56]	@ (8003bd4 <MX_GPIO_Init+0x29c>)
 8003b9a:	f004 f9d9 	bl	8007f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	2017      	movs	r0, #23
 8003ba4:	f004 f8e5 	bl	8007d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ba8:	2017      	movs	r0, #23
 8003baa:	f004 f8fe 	bl	8007daa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2028      	movs	r0, #40	@ 0x28
 8003bb4:	f004 f8dd 	bl	8007d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bb8:	2028      	movs	r0, #40	@ 0x28
 8003bba:	f004 f8f6 	bl	8007daa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003bbe:	bf00      	nop
 8003bc0:	3738      	adds	r7, #56	@ 0x38
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	48001400 	.word	0x48001400
 8003bd0:	48001000 	.word	0x48001000
 8003bd4:	48000c00 	.word	0x48000c00
 8003bd8:	48000800 	.word	0x48000800

08003bdc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	//check which version of the timer triggered this callback and toggle LED
	if(htim == &htim17){
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a06      	ldr	r2, [pc, #24]	@ (8003c00 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d102      	bne.n	8003bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
		DISPLAY_TIMER_TRIGGERED = 1;
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
	}
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000a18 	.word	0x20000a18
 8003c04:	20000a7c 	.word	0x20000a7c

08003c08 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003c10:	1d39      	adds	r1, r7, #4
 8003c12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c16:	2201      	movs	r2, #1
 8003c18:	4803      	ldr	r0, [pc, #12]	@ (8003c28 <__io_putchar+0x20>)
 8003c1a:	f00b fa9b 	bl	800f154 <HAL_UART_Transmit>
  return ch;
 8003c1e:	687b      	ldr	r3, [r7, #4]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000045c 	.word	0x2000045c

08003c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c30:	b672      	cpsid	i
}
 8003c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <Error_Handler+0x8>

08003c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c42:	4a0e      	ldr	r2, [pc, #56]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_MspInit+0x44>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000

08003c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	@ 0x30
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c88:	f107 031c 	add.w	r3, r7, #28
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d54 <HAL_ADC_MspInit+0xd4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d154      	bne.n	8003d4c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003ca8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cae:	4b2a      	ldr	r3, [pc, #168]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cba:	4b27      	ldr	r3, [pc, #156]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	4a26      	ldr	r2, [pc, #152]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cc6:	4b24      	ldr	r3, [pc, #144]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd2:	4b21      	ldr	r3, [pc, #132]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	4a20      	ldr	r2, [pc, #128]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cde:	4b1e      	ldr	r3, [pc, #120]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cea:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cf6:	4b18      	ldr	r3, [pc, #96]	@ (8003d58 <HAL_ADC_MspInit+0xd8>)
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003d02:	233b      	movs	r3, #59	@ 0x3b
 8003d04:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003d06:	230b      	movs	r3, #11
 8003d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0e:	f107 031c 	add.w	r3, r7, #28
 8003d12:	4619      	mov	r1, r3
 8003d14:	4811      	ldr	r0, [pc, #68]	@ (8003d5c <HAL_ADC_MspInit+0xdc>)
 8003d16:	f004 f91b 	bl	8007f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003d1e:	230b      	movs	r3, #11
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d26:	f107 031c 	add.w	r3, r7, #28
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d30:	f004 f90e 	bl	8007f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d34:	2302      	movs	r3, #2
 8003d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003d38:	230b      	movs	r3, #11
 8003d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d40:	f107 031c 	add.w	r3, r7, #28
 8003d44:	4619      	mov	r1, r3
 8003d46:	4806      	ldr	r0, [pc, #24]	@ (8003d60 <HAL_ADC_MspInit+0xe0>)
 8003d48:	f004 f902 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d4c:	bf00      	nop
 8003d4e:	3730      	adds	r7, #48	@ 0x30
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	50040000 	.word	0x50040000
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	48000800 	.word	0x48000800
 8003d60:	48000400 	.word	0x48000400

08003d64 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6c:	f107 0314 	add.w	r3, r7, #20
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1e      	ldr	r2, [pc, #120]	@ (8003dfc <HAL_COMP_MspInit+0x98>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d118      	bne.n	8003db8 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d86:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <HAL_COMP_MspInit+0x9c>)
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003e00 <HAL_COMP_MspInit+0x9c>)
 8003d8c:	f043 0302 	orr.w	r3, r3, #2
 8003d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d92:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <HAL_COMP_MspInit+0x9c>)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003da2:	2303      	movs	r3, #3
 8003da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003daa:	f107 0314 	add.w	r3, r7, #20
 8003dae:	4619      	mov	r1, r3
 8003db0:	4814      	ldr	r0, [pc, #80]	@ (8003e04 <HAL_COMP_MspInit+0xa0>)
 8003db2:	f004 f8cd 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003db6:	e01c      	b.n	8003df2 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a12      	ldr	r2, [pc, #72]	@ (8003e08 <HAL_COMP_MspInit+0xa4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d117      	bne.n	8003df2 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <HAL_COMP_MspInit+0x9c>)
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e00 <HAL_COMP_MspInit+0x9c>)
 8003dc8:	f043 0302 	orr.w	r3, r3, #2
 8003dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dce:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <HAL_COMP_MspInit+0x9c>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dda:	23c0      	movs	r3, #192	@ 0xc0
 8003ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dde:	2303      	movs	r3, #3
 8003de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	4619      	mov	r1, r3
 8003dec:	4805      	ldr	r0, [pc, #20]	@ (8003e04 <HAL_COMP_MspInit+0xa0>)
 8003dee:	f004 f8af 	bl	8007f50 <HAL_GPIO_Init>
}
 8003df2:	bf00      	nop
 8003df4:	3728      	adds	r7, #40	@ 0x28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40010200 	.word	0x40010200
 8003e00:	40021000 	.word	0x40021000
 8003e04:	48000400 	.word	0x48000400
 8003e08:	40010204 	.word	0x40010204

08003e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b0b0      	sub	sp, #192	@ 0xc0
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e24:	f107 0318 	add.w	r3, r7, #24
 8003e28:	2294      	movs	r2, #148	@ 0x94
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f00c fe7e 	bl	8010b2e <memset>
  if(hi2c->Instance==I2C1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4c      	ldr	r2, [pc, #304]	@ (8003f68 <HAL_I2C_MspInit+0x15c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d13c      	bne.n	8003eb6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e3c:	2340      	movs	r3, #64	@ 0x40
 8003e3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e40:	2300      	movs	r3, #0
 8003e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e44:	f107 0318 	add.w	r3, r7, #24
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f005 fff5 	bl	8009e38 <HAL_RCCEx_PeriphCLKConfig>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003e54:	f7ff feea 	bl	8003c2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e58:	4b44      	ldr	r3, [pc, #272]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5c:	4a43      	ldr	r2, [pc, #268]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003e5e:	f043 0302 	orr.w	r3, r3, #2
 8003e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e64:	4b41      	ldr	r3, [pc, #260]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e70:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e78:	2312      	movs	r3, #18
 8003e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e84:	2303      	movs	r3, #3
 8003e86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e94:	4619      	mov	r1, r3
 8003e96:	4836      	ldr	r0, [pc, #216]	@ (8003f70 <HAL_I2C_MspInit+0x164>)
 8003e98:	f004 f85a 	bl	8007f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e9c:	4b33      	ldr	r3, [pc, #204]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea0:	4a32      	ldr	r2, [pc, #200]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003ea2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ea8:	4b30      	ldr	r3, [pc, #192]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003eb4:	e054      	b.n	8003f60 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2e      	ldr	r2, [pc, #184]	@ (8003f74 <HAL_I2C_MspInit+0x168>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d14f      	bne.n	8003f60 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003ec0:	2380      	movs	r3, #128	@ 0x80
 8003ec2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec8:	f107 0318 	add.w	r3, r7, #24
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f005 ffb3 	bl	8009e38 <HAL_RCCEx_PeriphCLKConfig>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003ed8:	f7ff fea8 	bl	8003c2c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003edc:	4b23      	ldr	r3, [pc, #140]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee0:	4a22      	ldr	r2, [pc, #136]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003ee2:	f043 0320 	orr.w	r3, r3, #32
 8003ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee8:	4b20      	ldr	r3, [pc, #128]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003efa:	2312      	movs	r3, #18
 8003efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f06:	2303      	movs	r3, #3
 8003f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f12:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003f16:	4619      	mov	r1, r3
 8003f18:	4817      	ldr	r0, [pc, #92]	@ (8003f78 <HAL_I2C_MspInit+0x16c>)
 8003f1a:	f004 f819 	bl	8007f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f1e:	2304      	movs	r3, #4
 8003f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f24:	2312      	movs	r3, #18
 8003f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f30:	2303      	movs	r3, #3
 8003f32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f36:	2304      	movs	r3, #4
 8003f38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f3c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003f40:	4619      	mov	r1, r3
 8003f42:	480d      	ldr	r0, [pc, #52]	@ (8003f78 <HAL_I2C_MspInit+0x16c>)
 8003f44:	f004 f804 	bl	8007f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f48:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4c:	4a07      	ldr	r2, [pc, #28]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003f4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_I2C_MspInit+0x160>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
}
 8003f60:	bf00      	nop
 8003f62:	37c0      	adds	r7, #192	@ 0xc0
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40005400 	.word	0x40005400
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	48000400 	.word	0x48000400
 8003f74:	40005800 	.word	0x40005800
 8003f78:	48001400 	.word	0x48001400

08003f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b0b2      	sub	sp, #200	@ 0xc8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f94:	f107 0320 	add.w	r3, r7, #32
 8003f98:	2294      	movs	r2, #148	@ 0x94
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f00c fdc6 	bl	8010b2e <memset>
  if(huart->Instance==LPUART1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a64      	ldr	r2, [pc, #400]	@ (8004138 <HAL_UART_MspInit+0x1bc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d13e      	bne.n	800402a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003fac:	2320      	movs	r3, #32
 8003fae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb4:	f107 0320 	add.w	r3, r7, #32
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f005 ff3d 	bl	8009e38 <HAL_RCCEx_PeriphCLKConfig>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fc4:	f7ff fe32 	bl	8003c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8003fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fcc:	4a5b      	ldr	r2, [pc, #364]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003fd4:	4b59      	ldr	r3, [pc, #356]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fe0:	4b56      	ldr	r3, [pc, #344]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe4:	4a55      	ldr	r2, [pc, #340]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8003fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fec:	4b53      	ldr	r3, [pc, #332]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8003fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8003ff8:	f005 f836 	bl	8009068 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003ffc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004016:	2308      	movs	r3, #8
 8004018:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800401c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004020:	4619      	mov	r1, r3
 8004022:	4847      	ldr	r0, [pc, #284]	@ (8004140 <HAL_UART_MspInit+0x1c4>)
 8004024:	f003 ff94 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004028:	e081      	b.n	800412e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a45      	ldr	r2, [pc, #276]	@ (8004144 <HAL_UART_MspInit+0x1c8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d13b      	bne.n	80040ac <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004034:	2302      	movs	r3, #2
 8004036:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004038:	2300      	movs	r3, #0
 800403a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800403c:	f107 0320 	add.w	r3, r7, #32
 8004040:	4618      	mov	r0, r3
 8004042:	f005 fef9 	bl	8009e38 <HAL_RCCEx_PeriphCLKConfig>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800404c:	f7ff fdee 	bl	8003c2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004050:	4b3a      	ldr	r3, [pc, #232]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	4a39      	ldr	r2, [pc, #228]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405a:	6593      	str	r3, [r2, #88]	@ 0x58
 800405c:	4b37      	ldr	r3, [pc, #220]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004068:	4b34      	ldr	r3, [pc, #208]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 800406a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406c:	4a33      	ldr	r2, [pc, #204]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 800406e:	f043 0308 	orr.w	r3, r3, #8
 8004072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004074:	4b31      	ldr	r3, [pc, #196]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 8004076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004080:	2360      	movs	r3, #96	@ 0x60
 8004082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004092:	2303      	movs	r3, #3
 8004094:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004098:	2307      	movs	r3, #7
 800409a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800409e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4828      	ldr	r0, [pc, #160]	@ (8004148 <HAL_UART_MspInit+0x1cc>)
 80040a6:	f003 ff53 	bl	8007f50 <HAL_GPIO_Init>
}
 80040aa:	e040      	b.n	800412e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a26      	ldr	r2, [pc, #152]	@ (800414c <HAL_UART_MspInit+0x1d0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d13b      	bne.n	800412e <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80040b6:	2304      	movs	r3, #4
 80040b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80040ba:	2300      	movs	r3, #0
 80040bc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040be:	f107 0320 	add.w	r3, r7, #32
 80040c2:	4618      	mov	r0, r3
 80040c4:	f005 feb8 	bl	8009e38 <HAL_RCCEx_PeriphCLKConfig>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_UART_MspInit+0x156>
      Error_Handler();
 80040ce:	f7ff fdad 	bl	8003c2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040d2:	4b1a      	ldr	r3, [pc, #104]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	4a19      	ldr	r2, [pc, #100]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 80040d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040de:	4b17      	ldr	r3, [pc, #92]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040ea:	4b14      	ldr	r3, [pc, #80]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ee:	4a13      	ldr	r2, [pc, #76]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 80040f0:	f043 0308 	orr.w	r3, r3, #8
 80040f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040f6:	4b11      	ldr	r3, [pc, #68]	@ (800413c <HAL_UART_MspInit+0x1c0>)
 80040f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004102:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004106:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410a:	2302      	movs	r3, #2
 800410c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004116:	2303      	movs	r3, #3
 8004118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800411c:	2307      	movs	r3, #7
 800411e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004122:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004126:	4619      	mov	r1, r3
 8004128:	4807      	ldr	r0, [pc, #28]	@ (8004148 <HAL_UART_MspInit+0x1cc>)
 800412a:	f003 ff11 	bl	8007f50 <HAL_GPIO_Init>
}
 800412e:	bf00      	nop
 8004130:	37c8      	adds	r7, #200	@ 0xc8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40008000 	.word	0x40008000
 800413c:	40021000 	.word	0x40021000
 8004140:	48001800 	.word	0x48001800
 8004144:	40004400 	.word	0x40004400
 8004148:	48000c00 	.word	0x48000c00
 800414c:	40004800 	.word	0x40004800

08004150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08c      	sub	sp, #48	@ 0x30
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	f107 031c 	add.w	r3, r7, #28
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a3c      	ldr	r2, [pc, #240]	@ (8004260 <HAL_SPI_MspInit+0x110>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d144      	bne.n	80041fc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004172:	4b3c      	ldr	r3, [pc, #240]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004176:	4a3b      	ldr	r2, [pc, #236]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800417c:	6593      	str	r3, [r2, #88]	@ 0x58
 800417e:	4b39      	ldr	r3, [pc, #228]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800418a:	4b36      	ldr	r3, [pc, #216]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 800418c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418e:	4a35      	ldr	r2, [pc, #212]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004196:	4b33      	ldr	r3, [pc, #204]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a2:	4b30      	ldr	r3, [pc, #192]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 80041a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 80041a8:	f043 0308 	orr.w	r3, r3, #8
 80041ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 80041b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041ba:	2304      	movs	r3, #4
 80041bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041be:	2302      	movs	r3, #2
 80041c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c6:	2303      	movs	r3, #3
 80041c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041ca:	2305      	movs	r3, #5
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ce:	f107 031c 	add.w	r3, r7, #28
 80041d2:	4619      	mov	r1, r3
 80041d4:	4824      	ldr	r0, [pc, #144]	@ (8004268 <HAL_SPI_MspInit+0x118>)
 80041d6:	f003 febb 	bl	8007f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80041da:	2312      	movs	r3, #18
 80041dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041de:	2302      	movs	r3, #2
 80041e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e6:	2303      	movs	r3, #3
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041ea:	2305      	movs	r3, #5
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ee:	f107 031c 	add.w	r3, r7, #28
 80041f2:	4619      	mov	r1, r3
 80041f4:	481d      	ldr	r0, [pc, #116]	@ (800426c <HAL_SPI_MspInit+0x11c>)
 80041f6:	f003 feab 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80041fa:	e02d      	b.n	8004258 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1b      	ldr	r2, [pc, #108]	@ (8004270 <HAL_SPI_MspInit+0x120>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d128      	bne.n	8004258 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004206:	4b17      	ldr	r3, [pc, #92]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	4a16      	ldr	r2, [pc, #88]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 800420c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004210:	6593      	str	r3, [r2, #88]	@ 0x58
 8004212:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421e:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	4a10      	ldr	r2, [pc, #64]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800422a:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <HAL_SPI_MspInit+0x114>)
 800422c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004236:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800423a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423c:	2302      	movs	r3, #2
 800423e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004244:	2303      	movs	r3, #3
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004248:	2306      	movs	r3, #6
 800424a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800424c:	f107 031c 	add.w	r3, r7, #28
 8004250:	4619      	mov	r1, r3
 8004252:	4805      	ldr	r0, [pc, #20]	@ (8004268 <HAL_SPI_MspInit+0x118>)
 8004254:	f003 fe7c 	bl	8007f50 <HAL_GPIO_Init>
}
 8004258:	bf00      	nop
 800425a:	3730      	adds	r7, #48	@ 0x30
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40003800 	.word	0x40003800
 8004264:	40021000 	.word	0x40021000
 8004268:	48000800 	.word	0x48000800
 800426c:	48000c00 	.word	0x48000c00
 8004270:	40003c00 	.word	0x40003c00

08004274 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08e      	sub	sp, #56	@ 0x38
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a44      	ldr	r2, [pc, #272]	@ (80043a4 <HAL_TIM_PWM_MspInit+0x130>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d131      	bne.n	80042fa <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004296:	4b44      	ldr	r3, [pc, #272]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 8004298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429a:	4a43      	ldr	r2, [pc, #268]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 800429c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80042a2:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 80042a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ae:	4b3e      	ldr	r3, [pc, #248]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 80042b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b2:	4a3d      	ldr	r2, [pc, #244]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 80042b4:	f043 0310 	orr.w	r3, r3, #16
 80042b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ba:	4b3b      	ldr	r3, [pc, #236]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 80042bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80042c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042cc:	2302      	movs	r3, #2
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d4:	2300      	movs	r3, #0
 80042d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80042d8:	2303      	movs	r3, #3
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042e0:	4619      	mov	r1, r3
 80042e2:	4832      	ldr	r0, [pc, #200]	@ (80043ac <HAL_TIM_PWM_MspInit+0x138>)
 80042e4:	f003 fe34 	bl	8007f50 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80042e8:	2200      	movs	r2, #0
 80042ea:	2100      	movs	r1, #0
 80042ec:	201a      	movs	r0, #26
 80042ee:	f003 fd40 	bl	8007d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80042f2:	201a      	movs	r0, #26
 80042f4:	f003 fd59 	bl	8007daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80042f8:	e050      	b.n	800439c <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004302:	d10c      	bne.n	800431e <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004304:	4b28      	ldr	r3, [pc, #160]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004308:	4a27      	ldr	r2, [pc, #156]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004310:	4b25      	ldr	r3, [pc, #148]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 8004312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	69bb      	ldr	r3, [r7, #24]
}
 800431c:	e03e      	b.n	800439c <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM4)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a23      	ldr	r2, [pc, #140]	@ (80043b0 <HAL_TIM_PWM_MspInit+0x13c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d128      	bne.n	800437a <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004328:	4b1f      	ldr	r3, [pc, #124]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	4a1e      	ldr	r2, [pc, #120]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	6593      	str	r3, [r2, #88]	@ 0x58
 8004334:	4b1c      	ldr	r3, [pc, #112]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004340:	4b19      	ldr	r3, [pc, #100]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 8004342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004344:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 8004346:	f043 0310 	orr.w	r3, r3, #16
 800434a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800434c:	4b16      	ldr	r3, [pc, #88]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 800434e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004358:	2301      	movs	r3, #1
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004364:	2300      	movs	r3, #0
 8004366:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004368:	2302      	movs	r3, #2
 800436a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800436c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004370:	4619      	mov	r1, r3
 8004372:	480e      	ldr	r0, [pc, #56]	@ (80043ac <HAL_TIM_PWM_MspInit+0x138>)
 8004374:	f003 fdec 	bl	8007f50 <HAL_GPIO_Init>
}
 8004378:	e010      	b.n	800439c <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM15)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a0d      	ldr	r2, [pc, #52]	@ (80043b4 <HAL_TIM_PWM_MspInit+0x140>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10b      	bne.n	800439c <HAL_TIM_PWM_MspInit+0x128>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004384:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 8004386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004388:	4a07      	ldr	r2, [pc, #28]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 800438a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800438e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004390:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <HAL_TIM_PWM_MspInit+0x134>)
 8004392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	bf00      	nop
 800439e:	3738      	adds	r7, #56	@ 0x38
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40021000 	.word	0x40021000
 80043ac:	48001000 	.word	0x48001000
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40014000 	.word	0x40014000

080043b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <HAL_TIM_Base_MspInit+0x68>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10c      	bne.n	80043e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ca:	4b16      	ldr	r3, [pc, #88]	@ (8004424 <HAL_TIM_Base_MspInit+0x6c>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	4a15      	ldr	r2, [pc, #84]	@ (8004424 <HAL_TIM_Base_MspInit+0x6c>)
 80043d0:	f043 0302 	orr.w	r3, r3, #2
 80043d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d6:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <HAL_TIM_Base_MspInit+0x6c>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80043e2:	e018      	b.n	8004416 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004428 <HAL_TIM_Base_MspInit+0x70>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d113      	bne.n	8004416 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80043ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <HAL_TIM_Base_MspInit+0x6c>)
 80043f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004424 <HAL_TIM_Base_MspInit+0x6c>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80043fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <HAL_TIM_Base_MspInit+0x6c>)
 80043fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2100      	movs	r1, #0
 800440a:	201a      	movs	r0, #26
 800440c:	f003 fcb1 	bl	8007d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004410:	201a      	movs	r0, #26
 8004412:	f003 fcca 	bl	8007daa <HAL_NVIC_EnableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40000400 	.word	0x40000400
 8004424:	40021000 	.word	0x40021000
 8004428:	40014800 	.word	0x40014800

0800442c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	@ 0x38
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a66      	ldr	r2, [pc, #408]	@ (80045e4 <HAL_TIM_MspPostInit+0x1b8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d11d      	bne.n	800448a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800444e:	4b66      	ldr	r3, [pc, #408]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	4a65      	ldr	r2, [pc, #404]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 8004454:	f043 0310 	orr.w	r3, r3, #16
 8004458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800445a:	4b63      	ldr	r3, [pc, #396]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004466:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	2300      	movs	r3, #0
 8004476:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004478:	2301      	movs	r3, #1
 800447a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800447c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004480:	4619      	mov	r1, r3
 8004482:	485a      	ldr	r0, [pc, #360]	@ (80045ec <HAL_TIM_MspPostInit+0x1c0>)
 8004484:	f003 fd64 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004488:	e0a7      	b.n	80045da <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM2)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004492:	d13a      	bne.n	800450a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004494:	4b54      	ldr	r3, [pc, #336]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 8004496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004498:	4a53      	ldr	r2, [pc, #332]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044a0:	4b51      	ldr	r3, [pc, #324]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 80044a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ac:	4b4e      	ldr	r3, [pc, #312]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 80044ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b0:	4a4d      	ldr	r2, [pc, #308]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 80044b2:	f043 0302 	orr.w	r3, r3, #2
 80044b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b8:	4b4b      	ldr	r3, [pc, #300]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 80044ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044c4:	2301      	movs	r3, #1
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c8:	2302      	movs	r3, #2
 80044ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d0:	2300      	movs	r3, #0
 80044d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044d4:	2301      	movs	r3, #1
 80044d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044e2:	f003 fd35 	bl	8007f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ec:	2302      	movs	r3, #2
 80044ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f4:	2300      	movs	r3, #0
 80044f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044f8:	2301      	movs	r3, #1
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004500:	4619      	mov	r1, r3
 8004502:	483b      	ldr	r0, [pc, #236]	@ (80045f0 <HAL_TIM_MspPostInit+0x1c4>)
 8004504:	f003 fd24 	bl	8007f50 <HAL_GPIO_Init>
}
 8004508:	e067      	b.n	80045da <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM3)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a39      	ldr	r2, [pc, #228]	@ (80045f4 <HAL_TIM_MspPostInit+0x1c8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d11d      	bne.n	8004550 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004514:	4b34      	ldr	r3, [pc, #208]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 8004516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004518:	4a33      	ldr	r2, [pc, #204]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 800451a:	f043 0304 	orr.w	r3, r3, #4
 800451e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004520:	4b31      	ldr	r3, [pc, #196]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 8004522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800452c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004532:	2302      	movs	r3, #2
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004536:	2300      	movs	r3, #0
 8004538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453a:	2300      	movs	r3, #0
 800453c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800453e:	2302      	movs	r3, #2
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004546:	4619      	mov	r1, r3
 8004548:	482b      	ldr	r0, [pc, #172]	@ (80045f8 <HAL_TIM_MspPostInit+0x1cc>)
 800454a:	f003 fd01 	bl	8007f50 <HAL_GPIO_Init>
}
 800454e:	e044      	b.n	80045da <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM4)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a29      	ldr	r2, [pc, #164]	@ (80045fc <HAL_TIM_MspPostInit+0x1d0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d11d      	bne.n	8004596 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800455a:	4b23      	ldr	r3, [pc, #140]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 800455c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455e:	4a22      	ldr	r2, [pc, #136]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004566:	4b20      	ldr	r3, [pc, #128]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004580:	2300      	movs	r3, #0
 8004582:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004584:	2302      	movs	r3, #2
 8004586:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800458c:	4619      	mov	r1, r3
 800458e:	481c      	ldr	r0, [pc, #112]	@ (8004600 <HAL_TIM_MspPostInit+0x1d4>)
 8004590:	f003 fcde 	bl	8007f50 <HAL_GPIO_Init>
}
 8004594:	e021      	b.n	80045da <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM15)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1a      	ldr	r2, [pc, #104]	@ (8004604 <HAL_TIM_MspPostInit+0x1d8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d11c      	bne.n	80045da <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a0:	4b11      	ldr	r3, [pc, #68]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 80045a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a4:	4a10      	ldr	r2, [pc, #64]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 80045a6:	f043 0302 	orr.w	r3, r3, #2
 80045aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045ac:	4b0e      	ldr	r3, [pc, #56]	@ (80045e8 <HAL_TIM_MspPostInit+0x1bc>)
 80045ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80045b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045be:	2302      	movs	r3, #2
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c6:	2300      	movs	r3, #0
 80045c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80045ca:	230e      	movs	r3, #14
 80045cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045d2:	4619      	mov	r1, r3
 80045d4:	4806      	ldr	r0, [pc, #24]	@ (80045f0 <HAL_TIM_MspPostInit+0x1c4>)
 80045d6:	f003 fcbb 	bl	8007f50 <HAL_GPIO_Init>
}
 80045da:	bf00      	nop
 80045dc:	3738      	adds	r7, #56	@ 0x38
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40021000 	.word	0x40021000
 80045ec:	48001000 	.word	0x48001000
 80045f0:	48000400 	.word	0x48000400
 80045f4:	40000400 	.word	0x40000400
 80045f8:	48000800 	.word	0x48000800
 80045fc:	40000800 	.word	0x40000800
 8004600:	48000c00 	.word	0x48000c00
 8004604:	40014000 	.word	0x40014000

08004608 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	@ 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a50      	ldr	r2, [pc, #320]	@ (8004758 <HAL_SAI_MspInit+0x150>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d124      	bne.n	8004664 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800461a:	4b50      	ldr	r3, [pc, #320]	@ (800475c <HAL_SAI_MspInit+0x154>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10b      	bne.n	800463a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004622:	4b4f      	ldr	r3, [pc, #316]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 8004624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004626:	4a4e      	ldr	r2, [pc, #312]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 8004628:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800462c:	6613      	str	r3, [r2, #96]	@ 0x60
 800462e:	4b4c      	ldr	r3, [pc, #304]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 8004630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800463a:	4b48      	ldr	r3, [pc, #288]	@ (800475c <HAL_SAI_MspInit+0x154>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	4a46      	ldr	r2, [pc, #280]	@ (800475c <HAL_SAI_MspInit+0x154>)
 8004642:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004644:	2374      	movs	r3, #116	@ 0x74
 8004646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004650:	2300      	movs	r3, #0
 8004652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004654:	230d      	movs	r3, #13
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4619      	mov	r1, r3
 800465e:	4841      	ldr	r0, [pc, #260]	@ (8004764 <HAL_SAI_MspInit+0x15c>)
 8004660:	f003 fc76 	bl	8007f50 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3f      	ldr	r2, [pc, #252]	@ (8004768 <HAL_SAI_MspInit+0x160>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d135      	bne.n	80046da <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800466e:	4b3b      	ldr	r3, [pc, #236]	@ (800475c <HAL_SAI_MspInit+0x154>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004676:	4b3a      	ldr	r3, [pc, #232]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 8004678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800467a:	4a39      	ldr	r2, [pc, #228]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 800467c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004680:	6613      	str	r3, [r2, #96]	@ 0x60
 8004682:	4b37      	ldr	r3, [pc, #220]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 8004684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800468e:	4b33      	ldr	r3, [pc, #204]	@ (800475c <HAL_SAI_MspInit+0x154>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	4a31      	ldr	r2, [pc, #196]	@ (800475c <HAL_SAI_MspInit+0x154>)
 8004696:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004698:	2308      	movs	r3, #8
 800469a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a4:	2300      	movs	r3, #0
 80046a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80046a8:	230d      	movs	r3, #13
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4619      	mov	r1, r3
 80046b2:	482c      	ldr	r0, [pc, #176]	@ (8004764 <HAL_SAI_MspInit+0x15c>)
 80046b4:	f003 fc4c 	bl	8007f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80046b8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80046bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	2302      	movs	r3, #2
 80046c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c6:	2300      	movs	r3, #0
 80046c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80046ca:	230d      	movs	r3, #13
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046ce:	f107 0314 	add.w	r3, r7, #20
 80046d2:	4619      	mov	r1, r3
 80046d4:	4825      	ldr	r0, [pc, #148]	@ (800476c <HAL_SAI_MspInit+0x164>)
 80046d6:	f003 fc3b 	bl	8007f50 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a24      	ldr	r2, [pc, #144]	@ (8004770 <HAL_SAI_MspInit+0x168>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d135      	bne.n	8004750 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80046e4:	4b23      	ldr	r3, [pc, #140]	@ (8004774 <HAL_SAI_MspInit+0x16c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80046ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 80046ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 80046f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80046f8:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_SAI_MspInit+0x158>)
 80046fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8004704:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_SAI_MspInit+0x16c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <HAL_SAI_MspInit+0x16c>)
 800470c:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800470e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8004712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471c:	2300      	movs	r3, #0
 800471e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004720:	230d      	movs	r3, #13
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	4619      	mov	r1, r3
 800472a:	4813      	ldr	r0, [pc, #76]	@ (8004778 <HAL_SAI_MspInit+0x170>)
 800472c:	f003 fc10 	bl	8007f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004730:	2340      	movs	r3, #64	@ 0x40
 8004732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	2302      	movs	r3, #2
 8004736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473c:	2300      	movs	r3, #0
 800473e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004740:	230d      	movs	r3, #13
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	4619      	mov	r1, r3
 800474a:	480c      	ldr	r0, [pc, #48]	@ (800477c <HAL_SAI_MspInit+0x174>)
 800474c:	f003 fc00 	bl	8007f50 <HAL_GPIO_Init>

    }
}
 8004750:	bf00      	nop
 8004752:	3728      	adds	r7, #40	@ 0x28
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40015404 	.word	0x40015404
 800475c:	20000a80 	.word	0x20000a80
 8004760:	40021000 	.word	0x40021000
 8004764:	48001000 	.word	0x48001000
 8004768:	40015424 	.word	0x40015424
 800476c:	48001400 	.word	0x48001400
 8004770:	40015804 	.word	0x40015804
 8004774:	20000a84 	.word	0x20000a84
 8004778:	48000400 	.word	0x48000400
 800477c:	48000800 	.word	0x48000800

08004780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <NMI_Handler+0x4>

08004788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <HardFault_Handler+0x4>

08004790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <MemManage_Handler+0x4>

08004798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800479c:	bf00      	nop
 800479e:	e7fd      	b.n	800479c <BusFault_Handler+0x4>

080047a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047a4:	bf00      	nop
 80047a6:	e7fd      	b.n	80047a4 <UsageFault_Handler+0x4>

080047a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047b6:	b480      	push	{r7}
 80047b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047d6:	f002 f931 	bl	8006a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047da:	bf00      	nop
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80047e4:	2020      	movs	r0, #32
 80047e6:	f003 fd75 	bl	80082d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  LoRaRecieve = 1;
 80047ea:	4b02      	ldr	r3, [pc, #8]	@ (80047f4 <EXTI9_5_IRQHandler+0x14>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000a7e 	.word	0x20000a7e

080047f8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047fc:	4803      	ldr	r0, [pc, #12]	@ (800480c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80047fe:	f009 fabd 	bl	800dd7c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004802:	4803      	ldr	r0, [pc, #12]	@ (8004810 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004804:	f009 faba 	bl	800dd7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004808:	bf00      	nop
 800480a:	bd80      	pop	{r7, pc}
 800480c:	2000089c 	.word	0x2000089c
 8004810:	20000a18 	.word	0x20000a18

08004814 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004818:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800481c:	f003 fd5a 	bl	80082d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  KeyPadSelect = 1;
 8004820:	4b02      	ldr	r3, [pc, #8]	@ (800482c <EXTI15_10_IRQHandler+0x18>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000a7d 	.word	0x20000a7d

08004830 <init_analytics>:
// (calculated from exercise baseline)
// ~80% of minimum optimal heart rate 0.8 * 0.64*(220-age)
static int age = 0;
static float heart_threshold = INT_MAX;

void init_analytics(int age) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  heart_threshold = (220-age)*0.5;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 800483e:	4618      	mov	r0, r3
 8004840:	f7fb fe88 	bl	8000554 <__aeabi_i2d>
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <init_analytics+0x40>)
 800484a:	f7fb feed 	bl	8000628 <__aeabi_dmul>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f7fc f9bf 	bl	8000bd8 <__aeabi_d2f>
 800485a:	4603      	mov	r3, r0
 800485c:	4a05      	ldr	r2, [pc, #20]	@ (8004874 <init_analytics+0x44>)
 800485e:	6013      	str	r3, [r2, #0]
  state = k_init_baseline;
 8004860:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <init_analytics+0x48>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	3fe00000 	.word	0x3fe00000
 8004874:	20000020 	.word	0x20000020
 8004878:	20000b80 	.word	0x20000b80
 800487c:	00000000 	.word	0x00000000

08004880 <heartRateHigh>:

// Heart Rate too High
uint8_t heartRateHigh(int bpm, int age) {
 8004880:	b5b0      	push	{r4, r5, r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
	int maxHR = 220 - age;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 8004890:	60fb      	str	r3, [r7, #12]
	if (maxHR*0.80 < bpm) return 1;
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7fb fe5e 	bl	8000554 <__aeabi_i2d>
 8004898:	a30d      	add	r3, pc, #52	@ (adr r3, 80048d0 <heartRateHigh+0x50>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fb fec3 	bl	8000628 <__aeabi_dmul>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4614      	mov	r4, r2
 80048a8:	461d      	mov	r5, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fb fe52 	bl	8000554 <__aeabi_i2d>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	f7fc f928 	bl	8000b0c <__aeabi_dcmplt>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <heartRateHigh+0x46>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <heartRateHigh+0x48>
	return 0;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bdb0      	pop	{r4, r5, r7, pc}
 80048d0:	9999999a 	.word	0x9999999a
 80048d4:	3fe99999 	.word	0x3fe99999

080048d8 <heartRateLow>:

// Heart Rate too Low
uint8_t heartRateLow(int bpm, int age) {
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	int maxHR = 220 - age;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 80048e8:	60fb      	str	r3, [r7, #12]
	if (maxHR*0.60 < bpm) return 1;
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7fb fe32 	bl	8000554 <__aeabi_i2d>
 80048f0:	a30d      	add	r3, pc, #52	@ (adr r3, 8004928 <heartRateLow+0x50>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fe97 	bl	8000628 <__aeabi_dmul>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4614      	mov	r4, r2
 8004900:	461d      	mov	r5, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fb fe26 	bl	8000554 <__aeabi_i2d>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	f7fc f8fc 	bl	8000b0c <__aeabi_dcmplt>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <heartRateLow+0x46>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <heartRateLow+0x48>
	return 0;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bdb0      	pop	{r4, r5, r7, pc}
 8004928:	33333333 	.word	0x33333333
 800492c:	3fe33333 	.word	0x3fe33333

08004930 <input_data>:


// Requires: speed in meters/s
void input_data(int bpm, float speed) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	ed87 0a00 	vstr	s0, [r7]
  switch (state) {
 800493c:	4b30      	ldr	r3, [pc, #192]	@ (8004a00 <input_data+0xd0>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	2b03      	cmp	r3, #3
 8004944:	d857      	bhi.n	80049f6 <input_data+0xc6>
 8004946:	a201      	add	r2, pc, #4	@ (adr r2, 800494c <input_data+0x1c>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	0800495d 	.word	0x0800495d
 8004950:	08004981 	.word	0x08004981
 8004954:	080049b7 	.word	0x080049b7
 8004958:	080049db 	.word	0x080049db
    case k_init_baseline:
      update_data(bpm, speed);
 800495c:	ed97 0a00 	vldr	s0, [r7]
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f893 	bl	8004a8c <update_data>
      if (data_index == TWO_MIN_NUM_DATAPOINTS) {
 8004966:	4b27      	ldr	r3, [pc, #156]	@ (8004a04 <input_data+0xd4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b12      	cmp	r3, #18
 800496c:	d140      	bne.n	80049f0 <input_data+0xc0>
        calculate_base_strain();
 800496e:	f000 f8b5 	bl	8004adc <calculate_base_strain>
        data_index = 0;
 8004972:	4b24      	ldr	r3, [pc, #144]	@ (8004a04 <input_data+0xd4>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
        state = k_post_init;
 8004978:	4b21      	ldr	r3, [pc, #132]	@ (8004a00 <input_data+0xd0>)
 800497a:	2202      	movs	r2, #2
 800497c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800497e:	e037      	b.n	80049f0 <input_data+0xc0>
    case k_post_init:
      // based only on speed now, maybe add HR threshold
      // based on standard baseline
      if (speed > SPEED_THRESHOLD || bpm > heart_threshold) {
 8004980:	edd7 7a00 	vldr	s15, [r7]
 8004984:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	dc0d      	bgt.n	80049ae <input_data+0x7e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800499c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a08 <input_data+0xd8>)
 800499e:	edd3 7a00 	vldr	s15, [r3]
 80049a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	dc00      	bgt.n	80049ae <input_data+0x7e>
        state = k_exercise_baseline;
      }
      break;
 80049ac:	e023      	b.n	80049f6 <input_data+0xc6>
        state = k_exercise_baseline;
 80049ae:	4b14      	ldr	r3, [pc, #80]	@ (8004a00 <input_data+0xd0>)
 80049b0:	2203      	movs	r2, #3
 80049b2:	701a      	strb	r2, [r3, #0]
      break;
 80049b4:	e01f      	b.n	80049f6 <input_data+0xc6>
    case k_exercise_baseline:
      update_data(bpm, speed);
 80049b6:	ed97 0a00 	vldr	s0, [r7]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f866 	bl	8004a8c <update_data>
      if (data_index == TWO_MIN_NUM_DATAPOINTS) {
 80049c0:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <input_data+0xd4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b12      	cmp	r3, #18
 80049c6:	d115      	bne.n	80049f4 <input_data+0xc4>
        calculate_exercise_strain();
 80049c8:	f000 f8bc 	bl	8004b44 <calculate_exercise_strain>
        data_index = 0;
 80049cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <input_data+0xd4>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
        state = k_exercise;
 80049d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <input_data+0xd0>)
 80049d4:	2204      	movs	r2, #4
 80049d6:	701a      	strb	r2, [r3, #0]
      }
      break;
 80049d8:	e00c      	b.n	80049f4 <input_data+0xc4>
    case k_exercise:
      current_strain = get_strain(bpm, speed);
 80049da:	ed97 0a00 	vldr	s0, [r7]
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f836 	bl	8004a50 <get_strain>
 80049e4:	eef0 7a40 	vmov.f32	s15, s0
 80049e8:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <input_data+0xdc>)
 80049ea:	edc3 7a00 	vstr	s15, [r3]
      break;
 80049ee:	e002      	b.n	80049f6 <input_data+0xc6>
      break;
 80049f0:	bf00      	nop
 80049f2:	e000      	b.n	80049f6 <input_data+0xc6>
      break;
 80049f4:	bf00      	nop
  }
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000b80 	.word	0x20000b80
 8004a04:	20000b78 	.word	0x20000b78
 8004a08:	20000020 	.word	0x20000020
 8004a0c:	20000b7c 	.word	0x20000b7c

08004a10 <get_strain_factor>:

float get_strain_factor() {
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  if (state != k_exercise) return -1;
 8004a14:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <get_strain_factor+0x34>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d002      	beq.n	8004a22 <get_strain_factor+0x12>
 8004a1c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8004a20:	e007      	b.n	8004a32 <get_strain_factor+0x22>
  return (exercise_base_strain) / current_strain;
 8004a22:	4b09      	ldr	r3, [pc, #36]	@ (8004a48 <get_strain_factor+0x38>)
 8004a24:	ed93 7a00 	vldr	s14, [r3]
 8004a28:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <get_strain_factor+0x3c>)
 8004a2a:	edd3 7a00 	vldr	s15, [r3]
 8004a2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8004a32:	eef0 7a66 	vmov.f32	s15, s13
 8004a36:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000b80 	.word	0x20000b80
 8004a48:	20000b88 	.word	0x20000b88
 8004a4c:	20000b7c 	.word	0x20000b7c

08004a50 <get_strain>:

inline
float get_strain(int bpm, float speed) {
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	ed87 0a00 	vstr	s0, [r7]
  return bpm / (speed * 60.0f);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a66:	edd7 7a00 	vldr	s15, [r7]
 8004a6a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8004a88 <get_strain+0x38>
 8004a6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a76:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	42700000 	.word	0x42700000

08004a8c <update_data>:

void update_data(int bpm, float speed) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	ed87 0a00 	vstr	s0, [r7]
  current_strain = get_strain(bpm, speed);
 8004a98:	ed97 0a00 	vldr	s0, [r7]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ffd7 	bl	8004a50 <get_strain>
 8004aa2:	eef0 7a40 	vmov.f32	s15, s0
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <update_data+0x44>)
 8004aa8:	edc3 7a00 	vstr	s15, [r3]
  data[data_index] = current_strain;
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <update_data+0x48>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a07      	ldr	r2, [pc, #28]	@ (8004ad0 <update_data+0x44>)
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	4908      	ldr	r1, [pc, #32]	@ (8004ad8 <update_data+0x4c>)
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	601a      	str	r2, [r3, #0]
  ++data_index;
 8004abc:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <update_data+0x48>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	4a04      	ldr	r2, [pc, #16]	@ (8004ad4 <update_data+0x48>)
 8004ac4:	6013      	str	r3, [r2, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000b7c 	.word	0x20000b7c
 8004ad4:	20000b78 	.word	0x20000b78
 8004ad8:	20000a88 	.word	0x20000a88

08004adc <calculate_base_strain>:

void calculate_base_strain(void) {
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
  standard_base_strain = 0;
 8004ae2:	4b15      	ldr	r3, [pc, #84]	@ (8004b38 <calculate_base_strain+0x5c>)
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	e010      	b.n	8004b12 <calculate_base_strain+0x36>
    standard_base_strain += data[i];
 8004af0:	4a12      	ldr	r2, [pc, #72]	@ (8004b3c <calculate_base_strain+0x60>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	ed93 7a00 	vldr	s14, [r3]
 8004afc:	4b0e      	ldr	r3, [pc, #56]	@ (8004b38 <calculate_base_strain+0x5c>)
 8004afe:	edd3 7a00 	vldr	s15, [r3]
 8004b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b06:	4b0c      	ldr	r3, [pc, #48]	@ (8004b38 <calculate_base_strain+0x5c>)
 8004b08:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b3b      	cmp	r3, #59	@ 0x3b
 8004b16:	ddeb      	ble.n	8004af0 <calculate_base_strain+0x14>
  }
  standard_base_strain /= DATA_BUFFER_LENGTH;
 8004b18:	4b07      	ldr	r3, [pc, #28]	@ (8004b38 <calculate_base_strain+0x5c>)
 8004b1a:	ed93 7a00 	vldr	s14, [r3]
 8004b1e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004b40 <calculate_base_strain+0x64>
 8004b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b26:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <calculate_base_strain+0x5c>)
 8004b28:	edc3 7a00 	vstr	s15, [r3]
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	20000b84 	.word	0x20000b84
 8004b3c:	20000a88 	.word	0x20000a88
 8004b40:	42700000 	.word	0x42700000

08004b44 <calculate_exercise_strain>:

void calculate_exercise_strain(void) {
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
  exercise_base_strain = 0;
 8004b4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <calculate_exercise_strain+0x5c>)
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	e010      	b.n	8004b7a <calculate_exercise_strain+0x36>
    exercise_base_strain += data[i];
 8004b58:	4a12      	ldr	r2, [pc, #72]	@ (8004ba4 <calculate_exercise_strain+0x60>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	ed93 7a00 	vldr	s14, [r3]
 8004b64:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba0 <calculate_exercise_strain+0x5c>)
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <calculate_exercise_strain+0x5c>)
 8004b70:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3301      	adds	r3, #1
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b3b      	cmp	r3, #59	@ 0x3b
 8004b7e:	ddeb      	ble.n	8004b58 <calculate_exercise_strain+0x14>
  }
  exercise_base_strain /= DATA_BUFFER_LENGTH;
 8004b80:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <calculate_exercise_strain+0x5c>)
 8004b82:	ed93 7a00 	vldr	s14, [r3]
 8004b86:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004ba8 <calculate_exercise_strain+0x64>
 8004b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <calculate_exercise_strain+0x5c>)
 8004b90:	edc3 7a00 	vstr	s15, [r3]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000b88 	.word	0x20000b88
 8004ba4:	20000a88 	.word	0x20000a88
 8004ba8:	42700000 	.word	0x42700000

08004bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return 1;
 8004bb0:	2301      	movs	r3, #1
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <_kill>:

int _kill(int pid, int sig)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004bc6:	f00c f815 	bl	8010bf4 <__errno>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2216      	movs	r2, #22
 8004bce:	601a      	str	r2, [r3, #0]
  return -1;
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <_exit>:

void _exit (int status)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004be4:	f04f 31ff 	mov.w	r1, #4294967295
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff ffe7 	bl	8004bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <_exit+0x12>

08004bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b086      	sub	sp, #24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e00a      	b.n	8004c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c04:	f3af 8000 	nop.w
 8004c08:	4601      	mov	r1, r0
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	60ba      	str	r2, [r7, #8]
 8004c10:	b2ca      	uxtb	r2, r1
 8004c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3301      	adds	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	dbf0      	blt.n	8004c04 <_read+0x12>
  }

  return len;
 8004c22:	687b      	ldr	r3, [r7, #4]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e009      	b.n	8004c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	60ba      	str	r2, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe ffde 	bl	8003c08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	dbf1      	blt.n	8004c3e <_write+0x12>
  }
  return len;
 8004c5a:	687b      	ldr	r3, [r7, #4]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_close>:

int _close(int file)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <_isatty>:

int _isatty(int file)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ca4:	2301      	movs	r3, #1
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cd4:	4a14      	ldr	r2, [pc, #80]	@ (8004d28 <_sbrk+0x5c>)
 8004cd6:	4b15      	ldr	r3, [pc, #84]	@ (8004d2c <_sbrk+0x60>)
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ce0:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <_sbrk+0x64>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	@ (8004d30 <_sbrk+0x64>)
 8004cea:	4a12      	ldr	r2, [pc, #72]	@ (8004d34 <_sbrk+0x68>)
 8004cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cee:	4b10      	ldr	r3, [pc, #64]	@ (8004d30 <_sbrk+0x64>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d207      	bcs.n	8004d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cfc:	f00b ff7a 	bl	8010bf4 <__errno>
 8004d00:	4603      	mov	r3, r0
 8004d02:	220c      	movs	r2, #12
 8004d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	e009      	b.n	8004d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d0c:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <_sbrk+0x64>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d12:	4b07      	ldr	r3, [pc, #28]	@ (8004d30 <_sbrk+0x64>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	4a05      	ldr	r2, [pc, #20]	@ (8004d30 <_sbrk+0x64>)
 8004d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200a0000 	.word	0x200a0000
 8004d2c:	00000400 	.word	0x00000400
 8004d30:	20000b8c 	.word	0x20000b8c
 8004d34:	20000d00 	.word	0x20000d00

08004d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004d3c:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <SystemInit+0x20>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d42:	4a05      	ldr	r2, [pc, #20]	@ (8004d58 <SystemInit+0x20>)
 8004d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8004d6e:	89fb      	ldrh	r3, [r7, #14]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	b21a      	sxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	b21b      	sxth	r3, r3
 8004d7e:	b29b      	uxth	r3, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	b21a      	sxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	b21a      	sxth	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 8004e52:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e5c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	e010      	b.n	8004ea2 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	330a      	adds	r3, #10
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	330a      	adds	r3, #10
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	2200      	movs	r2, #0
 8004e9a:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d9eb      	bls.n	8004e80 <UG_Init+0xf4>
   }

   gui = g;
 8004ea8:	4a04      	ldr	r2, [pc, #16]	@ (8004ebc <UG_Init+0x130>)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6013      	str	r3, [r2, #0]
   return 1;
 8004eae:	2301      	movs	r3, #1
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000b90 	.word	0x20000b90

08004ec0 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004ec8:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <UG_FontSelect+0x1c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20000b90 	.word	0x20000b90

08004ee0 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8004eea:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <UG_FillScreen+0x44>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	b21a      	sxth	r2, r3
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <UG_FillScreen+0x44>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	b219      	sxth	r1, r3
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	460b      	mov	r3, r1
 8004f14:	2100      	movs	r1, #0
 8004f16:	2000      	movs	r0, #0
 8004f18:	f000 f806 	bl	8004f28 <UG_FillFrame>
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000b90 	.word	0x20000b90

08004f28 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4623      	mov	r3, r4
 8004f38:	80fb      	strh	r3, [r7, #6]
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	80bb      	strh	r3, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	807b      	strh	r3, [r7, #2]
 8004f42:	4613      	mov	r3, r2
 8004f44:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8004f46:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	da05      	bge.n	8004f5e <UG_FillFrame+0x36>
     swap(x1,x2);
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	817b      	strh	r3, [r7, #10]
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	80fb      	strh	r3, [r7, #6]
 8004f5a:	897b      	ldrh	r3, [r7, #10]
 8004f5c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8004f5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	da05      	bge.n	8004f76 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8004f6a:	88bb      	ldrh	r3, [r7, #4]
 8004f6c:	813b      	strh	r3, [r7, #8]
 8004f6e:	883b      	ldrh	r3, [r7, #0]
 8004f70:	80bb      	strh	r3, [r7, #4]
 8004f72:	893b      	ldrh	r3, [r7, #8]
 8004f74:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 8004f76:	88bb      	ldrh	r3, [r7, #4]
 8004f78:	81bb      	strh	r3, [r7, #12]
 8004f7a:	e01e      	b.n	8004fba <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 8004f7c:	88fb      	ldrh	r3, [r7, #6]
 8004f7e:	81fb      	strh	r3, [r7, #14]
 8004f80:	e00f      	b.n	8004fa2 <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 8004f82:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <UG_FillFrame+0xa8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	8c3a      	ldrh	r2, [r7, #32]
 8004f8c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004f90:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004f94:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8004f96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	81fb      	strh	r3, [r7, #14]
 8004fa2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	dde9      	ble.n	8004f82 <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 8004fae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	81bb      	strh	r3, [r7, #12]
 8004fba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004fbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	ddda      	ble.n	8004f7c <UG_FillFrame+0x54>
      }
   }
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd90      	pop	{r4, r7, pc}
 8004fd0:	20000b90 	.word	0x20000b90

08004fd4 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004fd4:	b5b0      	push	{r4, r5, r7, lr}
 8004fd6:	b08a      	sub	sp, #40	@ 0x28
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	4604      	mov	r4, r0
 8004fdc:	4608      	mov	r0, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	80fb      	strh	r3, [r7, #6]
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	80bb      	strh	r3, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	807b      	strh	r3, [r7, #2]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8004ff2:	4b67      	ldr	r3, [pc, #412]	@ (8005190 <UG_DrawLine+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d013      	beq.n	800502a <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005002:	4b63      	ldr	r3, [pc, #396]	@ (8005190 <UG_DrawLine+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005008:	461d      	mov	r5, r3
 800500a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800500e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005012:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005016:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800501a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	4623      	mov	r3, r4
 8005020:	47a8      	blx	r5
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80ae 	beq.w	8005186 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	b29b      	uxth	r3, r3
 8005032:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8005034:	883a      	ldrh	r2, [r7, #0]
 8005036:	88bb      	ldrh	r3, [r7, #4]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	b29b      	uxth	r3, r3
 800503c:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800503e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	bfb8      	it	lt
 8005046:	425b      	neglt	r3, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800504c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfb8      	it	lt
 8005054:	425b      	neglt	r3, r3
 8005056:	b29b      	uxth	r3, r3
 8005058:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800505a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	dd01      	ble.n	8005066 <UG_DrawLine+0x92>
 8005062:	2301      	movs	r3, #1
 8005064:	e001      	b.n	800506a <UG_DrawLine+0x96>
 8005066:	f04f 33ff 	mov.w	r3, #4294967295
 800506a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 800506c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005070:	2b00      	cmp	r3, #0
 8005072:	dd01      	ble.n	8005078 <UG_DrawLine+0xa4>
 8005074:	2301      	movs	r3, #1
 8005076:	e001      	b.n	800507c <UG_DrawLine+0xa8>
 8005078:	f04f 33ff 	mov.w	r3, #4294967295
 800507c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800507e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005082:	105b      	asrs	r3, r3, #1
 8005084:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8005086:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800508a:	105b      	asrs	r3, r3, #1
 800508c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8005092:	88bb      	ldrh	r3, [r7, #4]
 8005094:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8005096:	4b3e      	ldr	r3, [pc, #248]	@ (8005190 <UG_DrawLine+0x1bc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80050a0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80050a4:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80050a8:	4798      	blx	r3

   if( dxabs >= dyabs )
 80050aa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80050ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	db33      	blt.n	800511e <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 80050b6:	2300      	movs	r3, #0
 80050b8:	83fb      	strh	r3, [r7, #30]
 80050ba:	e029      	b.n	8005110 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80050bc:	8b7a      	ldrh	r2, [r7, #26]
 80050be:	89fb      	ldrh	r3, [r7, #14]
 80050c0:	4413      	add	r3, r2
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80050c6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80050ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	db09      	blt.n	80050e6 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80050d2:	8b7a      	ldrh	r2, [r7, #26]
 80050d4:	8a3b      	ldrh	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	b29b      	uxth	r3, r3
 80050da:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80050dc:	8afa      	ldrh	r2, [r7, #22]
 80050de:	897b      	ldrh	r3, [r7, #10]
 80050e0:	4413      	add	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80050e6:	8b3a      	ldrh	r2, [r7, #24]
 80050e8:	89bb      	ldrh	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80050f0:	4b27      	ldr	r3, [pc, #156]	@ (8005190 <UG_DrawLine+0x1bc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80050fa:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80050fe:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005102:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005104:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005108:	b29b      	uxth	r3, r3
 800510a:	3301      	adds	r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	83fb      	strh	r3, [r7, #30]
 8005110:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005114:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005118:	429a      	cmp	r2, r3
 800511a:	dbcf      	blt.n	80050bc <UG_DrawLine+0xe8>
 800511c:	e034      	b.n	8005188 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800511e:	2300      	movs	r3, #0
 8005120:	83fb      	strh	r3, [r7, #30]
 8005122:	e029      	b.n	8005178 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8005124:	8bba      	ldrh	r2, [r7, #28]
 8005126:	8a3b      	ldrh	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800512e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005132:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005136:	429a      	cmp	r2, r3
 8005138:	db09      	blt.n	800514e <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800513a:	8bba      	ldrh	r2, [r7, #28]
 800513c:	89fb      	ldrh	r3, [r7, #14]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b29b      	uxth	r3, r3
 8005142:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8005144:	8b3a      	ldrh	r2, [r7, #24]
 8005146:	89bb      	ldrh	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800514e:	8afa      	ldrh	r2, [r7, #22]
 8005150:	897b      	ldrh	r3, [r7, #10]
 8005152:	4413      	add	r3, r2
 8005154:	b29b      	uxth	r3, r3
 8005156:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8005158:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <UG_DrawLine+0x1bc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005162:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005166:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800516a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 800516c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005170:	b29b      	uxth	r3, r3
 8005172:	3301      	adds	r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	83fb      	strh	r3, [r7, #30]
 8005178:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800517c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005180:	429a      	cmp	r2, r3
 8005182:	dbcf      	blt.n	8005124 <UG_DrawLine+0x150>
 8005184:	e000      	b.n	8005188 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005186:	bf00      	nop
      }
   }  
}
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bdb0      	pop	{r4, r5, r7, pc}
 800518e:	bf00      	nop
 8005190:	20000b90 	.word	0x20000b90

08005194 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b087      	sub	sp, #28
 8005198:	af02      	add	r7, sp, #8
 800519a:	4603      	mov	r3, r0
 800519c:	603a      	str	r2, [r7, #0]
 800519e:	80fb      	strh	r3, [r7, #6]
 80051a0:	460b      	mov	r3, r1
 80051a2:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80051a8:	88bb      	ldrh	r3, [r7, #4]
 80051aa:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80051ac:	4b44      	ldr	r3, [pc, #272]	@ (80052c0 <UG_PutString+0x12c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fae4 	bl	8005780 <_UG_FontSelect>
   while ( *str != 0 )
 80051b8:	e064      	b.n	8005284 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80051ba:	4b41      	ldr	r3, [pc, #260]	@ (80052c0 <UG_PutString+0x12c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 80051c6:	463b      	mov	r3, r7
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 f915 	bl	80053f8 <_UG_DecodeUTF8>
 80051ce:	4603      	mov	r3, r0
 80051d0:	817b      	strh	r3, [r7, #10]
 80051d2:	e004      	b.n	80051de <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	603a      	str	r2, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80051de:	897b      	ldrh	r3, [r7, #10]
 80051e0:	2b0a      	cmp	r3, #10
 80051e2:	d105      	bne.n	80051f0 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80051e4:	4b36      	ldr	r3, [pc, #216]	@ (80052c0 <UG_PutString+0x12c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	81fb      	strh	r3, [r7, #14]
         continue;
 80051ee:	e049      	b.n	8005284 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80051f0:	897b      	ldrh	r3, [r7, #10]
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f977 	bl	80054e8 <_UG_GetCharData>
 80051fa:	4603      	mov	r3, r0
 80051fc:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80051fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d03c      	beq.n	8005282 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 8005208:	4b2d      	ldr	r3, [pc, #180]	@ (80052c0 <UG_PutString+0x12c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005212:	4619      	mov	r1, r3
 8005214:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005218:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	4299      	cmp	r1, r3
 8005220:	dc11      	bgt.n	8005246 <UG_PutString+0xb2>
      {
         xp = x;
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8005226:	4b26      	ldr	r3, [pc, #152]	@ (80052c0 <UG_PutString+0x12c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800522e:	b21b      	sxth	r3, r3
 8005230:	4a23      	ldr	r2, [pc, #140]	@ (80052c0 <UG_PutString+0x12c>)
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 8005238:	4413      	add	r3, r2
 800523a:	b21b      	sxth	r3, r3
 800523c:	b29a      	uxth	r2, r3
 800523e:	89bb      	ldrh	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8005246:	4b1e      	ldr	r3, [pc, #120]	@ (80052c0 <UG_PutString+0x12c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 800524e:	4b1c      	ldr	r3, [pc, #112]	@ (80052c0 <UG_PutString+0x12c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8005256:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800525a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800525e:	8978      	ldrh	r0, [r7, #10]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	4623      	mov	r3, r4
 8005264:	f000 fb0e 	bl	8005884 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8005268:	4b15      	ldr	r3, [pc, #84]	@ (80052c0 <UG_PutString+0x12c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8005270:	b29a      	uxth	r2, r3
 8005272:	893b      	ldrh	r3, [r7, #8]
 8005274:	4413      	add	r3, r2
 8005276:	b29a      	uxth	r2, r3
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	4413      	add	r3, r2
 800527c:	b29b      	uxth	r3, r3
 800527e:	81fb      	strh	r3, [r7, #14]
 8005280:	e000      	b.n	8005284 <UG_PutString+0xf0>
      if(cw==-1) continue;
 8005282:	bf00      	nop
   while ( *str != 0 )
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d196      	bne.n	80051ba <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800528c:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <UG_PutString+0x12c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00c      	beq.n	80052b6 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800529c:	4b08      	ldr	r3, [pc, #32]	@ (80052c0 <UG_PutString+0x12c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a2:	461c      	mov	r4, r3
 80052a4:	f04f 33ff 	mov.w	r3, #4294967295
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	f04f 31ff 	mov.w	r1, #4294967295
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	47a0      	blx	r4
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd90      	pop	{r4, r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000b90 	.word	0x20000b90

080052c4 <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	4611      	mov	r1, r2
 80052d0:	461a      	mov	r2, r3
 80052d2:	4623      	mov	r3, r4
 80052d4:	80fb      	strh	r3, [r7, #6]
 80052d6:	4603      	mov	r3, r0
 80052d8:	80bb      	strh	r3, [r7, #4]
 80052da:	460b      	mov	r3, r1
 80052dc:	807b      	strh	r3, [r7, #2]
 80052de:	4613      	mov	r3, r2
 80052e0:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 80052e2:	4b15      	ldr	r3, [pc, #84]	@ (8005338 <UG_PutChar+0x74>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fa49 	bl	8005780 <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 80052ee:	883c      	ldrh	r4, [r7, #0]
 80052f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80052f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80052f8:	88f8      	ldrh	r0, [r7, #6]
 80052fa:	8b3b      	ldrh	r3, [r7, #24]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	4623      	mov	r3, r4
 8005300:	f000 fac0 	bl	8005884 <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8005304:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <UG_PutChar+0x74>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00c      	beq.n	800532e <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8005314:	4b08      	ldr	r3, [pc, #32]	@ (8005338 <UG_PutChar+0x74>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800531a:	461c      	mov	r4, r3
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	f04f 32ff 	mov.w	r2, #4294967295
 8005324:	f04f 31ff 	mov.w	r1, #4294967295
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	47a0      	blx	r4
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bd90      	pop	{r4, r7, pc}
 8005336:	bf00      	nop
 8005338:	20000b90 	.word	0x20000b90

0800533c <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8005346:	4b05      	ldr	r3, [pc, #20]	@ (800535c <UG_SetForecolor+0x20>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	88fa      	ldrh	r2, [r7, #6]
 800534c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	20000b90 	.word	0x20000b90

08005360 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800536a:	4b05      	ldr	r3, [pc, #20]	@ (8005380 <UG_SetBackcolor+0x20>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000b90 	.word	0x20000b90

08005384 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800538e:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <UG_FontSetHSpace+0x24>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	b252      	sxtb	r2, r2
 8005396:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000b90 	.word	0x20000b90

080053ac <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <UG_FontSetVSpace+0x24>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	b252      	sxtb	r2, r2
 80053be:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000b90 	.word	0x20000b90

080053d4 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <UG_FontSetTransparency+0x20>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	79fa      	ldrb	r2, [r7, #7]
 80053e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	20000b90 	.word	0x20000b90

080053f8 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

  char c=**str;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8005408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	db07      	blt.n	8005420 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
    return c;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	b29b      	uxth	r3, r3
 800541e:	e05c      	b.n	80054da <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8005420:	2300      	movs	r3, #0
 8005422:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8005424:	2300      	movs	r3, #0
 8005426:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8005428:	e04f      	b.n	80054ca <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800543c:	7bbb      	ldrb	r3, [r7, #14]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d130      	bne.n	80054a4 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2bdf      	cmp	r3, #223	@ 0xdf
 8005446:	d806      	bhi.n	8005456 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8005448:	2301      	movs	r3, #1
 800544a:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	73fb      	strb	r3, [r7, #15]
 8005454:	e023      	b.n	800549e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	2bef      	cmp	r3, #239	@ 0xef
 800545a:	d806      	bhi.n	800546a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 800545c:	2302      	movs	r3, #2
 800545e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	e019      	b.n	800549e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2bf7      	cmp	r3, #247	@ 0xf7
 800546e:	d806      	bhi.n	800547e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8005470:	2303      	movs	r3, #3
 8005472:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	73fb      	strb	r3, [r7, #15]
 800547c:	e00f      	b.n	800549e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2bfb      	cmp	r3, #251	@ 0xfb
 8005482:	d806      	bhi.n	8005492 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8005484:	2304      	movs	r3, #4
 8005486:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	73fb      	strb	r3, [r7, #15]
 8005490:	e005      	b.n	800549e <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8005492:	2305      	movs	r3, #5
 8005494:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	81bb      	strh	r3, [r7, #12]
 80054a2:	e012      	b.n	80054ca <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 80054a4:	89bb      	ldrh	r3, [r7, #12]
 80054a6:	019b      	lsls	r3, r3, #6
 80054a8:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	b21b      	sxth	r3, r3
 80054ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054b2:	b21a      	sxth	r2, r3
 80054b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	b21b      	sxth	r3, r3
 80054bc:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80054be:	7bbb      	ldrb	r3, [r7, #14]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	73bb      	strb	r3, [r7, #14]
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <_UG_DecodeUTF8+0xde>
  while(**str)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1aa      	bne.n	800542a <_UG_DecodeUTF8+0x32>
 80054d4:	e000      	b.n	80054d8 <_UG_DecodeUTF8+0xe0>
        break;
 80054d6:	bf00      	nop
    }
  }
  return encoding;
 80054d8:	89bb      	ldrh	r3, [r7, #12]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	6039      	str	r1, [r7, #0]
 80054f2:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8005500:	2300      	movs	r3, #0
 8005502:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8005504:	2300      	movs	r3, #0
 8005506:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8005508:	4b98      	ldr	r3, [pc, #608]	@ (800576c <_UG_GetCharData+0x284>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800550e:	4b98      	ldr	r3, [pc, #608]	@ (8005770 <_UG_GetCharData+0x288>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d10f      	bne.n	8005536 <_UG_GetCharData+0x4e>
 8005516:	4b97      	ldr	r3, [pc, #604]	@ (8005774 <_UG_GetCharData+0x28c>)
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	429a      	cmp	r2, r3
 800551e:	d10a      	bne.n	8005536 <_UG_GetCharData+0x4e>
    if(p){
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8005526:	4b94      	ldr	r3, [pc, #592]	@ (8005778 <_UG_GetCharData+0x290>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800552e:	4b93      	ldr	r3, [pc, #588]	@ (800577c <_UG_GetCharData+0x294>)
 8005530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005534:	e116      	b.n	8005764 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8005536:	4b8d      	ldr	r3, [pc, #564]	@ (800576c <_UG_GetCharData+0x284>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80cc 	beq.w	80056dc <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	2bfc      	cmp	r3, #252	@ 0xfc
 8005548:	f300 80c8 	bgt.w	80056dc <_UG_GetCharData+0x1f4>
 800554c:	2bd6      	cmp	r3, #214	@ 0xd6
 800554e:	da09      	bge.n	8005564 <_UG_GetCharData+0x7c>
 8005550:	2bc4      	cmp	r3, #196	@ 0xc4
 8005552:	d06c      	beq.n	800562e <_UG_GetCharData+0x146>
 8005554:	2bc4      	cmp	r3, #196	@ 0xc4
 8005556:	f300 80c1 	bgt.w	80056dc <_UG_GetCharData+0x1f4>
 800555a:	2bb0      	cmp	r3, #176	@ 0xb0
 800555c:	d06d      	beq.n	800563a <_UG_GetCharData+0x152>
 800555e:	2bb5      	cmp	r3, #181	@ 0xb5
 8005560:	d068      	beq.n	8005634 <_UG_GetCharData+0x14c>
 8005562:	e06e      	b.n	8005642 <_UG_GetCharData+0x15a>
 8005564:	3bd6      	subs	r3, #214	@ 0xd6
 8005566:	2b26      	cmp	r3, #38	@ 0x26
 8005568:	f200 80b8 	bhi.w	80056dc <_UG_GetCharData+0x1f4>
 800556c:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <_UG_GetCharData+0x8c>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	08005617 	.word	0x08005617
 8005578:	080056dd 	.word	0x080056dd
 800557c:	080056dd 	.word	0x080056dd
 8005580:	080056dd 	.word	0x080056dd
 8005584:	080056dd 	.word	0x080056dd
 8005588:	080056dd 	.word	0x080056dd
 800558c:	08005623 	.word	0x08005623
 8005590:	080056dd 	.word	0x080056dd
 8005594:	080056dd 	.word	0x080056dd
 8005598:	080056dd 	.word	0x080056dd
 800559c:	080056dd 	.word	0x080056dd
 80055a0:	080056dd 	.word	0x080056dd
 80055a4:	080056dd 	.word	0x080056dd
 80055a8:	080056dd 	.word	0x080056dd
 80055ac:	08005629 	.word	0x08005629
 80055b0:	080056dd 	.word	0x080056dd
 80055b4:	080056dd 	.word	0x080056dd
 80055b8:	080056dd 	.word	0x080056dd
 80055bc:	080056dd 	.word	0x080056dd
 80055c0:	080056dd 	.word	0x080056dd
 80055c4:	080056dd 	.word	0x080056dd
 80055c8:	080056dd 	.word	0x080056dd
 80055cc:	080056dd 	.word	0x080056dd
 80055d0:	080056dd 	.word	0x080056dd
 80055d4:	080056dd 	.word	0x080056dd
 80055d8:	080056dd 	.word	0x080056dd
 80055dc:	080056dd 	.word	0x080056dd
 80055e0:	080056dd 	.word	0x080056dd
 80055e4:	080056dd 	.word	0x080056dd
 80055e8:	080056dd 	.word	0x080056dd
 80055ec:	080056dd 	.word	0x080056dd
 80055f0:	080056dd 	.word	0x080056dd
 80055f4:	08005611 	.word	0x08005611
 80055f8:	080056dd 	.word	0x080056dd
 80055fc:	080056dd 	.word	0x080056dd
 8005600:	080056dd 	.word	0x080056dd
 8005604:	080056dd 	.word	0x080056dd
 8005608:	080056dd 	.word	0x080056dd
 800560c:	0800561d 	.word	0x0800561d
    {
       case 0xF6: encoding = 0x94; break; // ö
 8005610:	2394      	movs	r3, #148	@ 0x94
 8005612:	80fb      	strh	r3, [r7, #6]
 8005614:	e015      	b.n	8005642 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8005616:	2399      	movs	r3, #153	@ 0x99
 8005618:	80fb      	strh	r3, [r7, #6]
 800561a:	e012      	b.n	8005642 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 800561c:	2381      	movs	r3, #129	@ 0x81
 800561e:	80fb      	strh	r3, [r7, #6]
 8005620:	e00f      	b.n	8005642 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8005622:	239a      	movs	r3, #154	@ 0x9a
 8005624:	80fb      	strh	r3, [r7, #6]
 8005626:	e00c      	b.n	8005642 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8005628:	2384      	movs	r3, #132	@ 0x84
 800562a:	80fb      	strh	r3, [r7, #6]
 800562c:	e009      	b.n	8005642 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 800562e:	238e      	movs	r3, #142	@ 0x8e
 8005630:	80fb      	strh	r3, [r7, #6]
 8005632:	e006      	b.n	8005642 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8005634:	23e6      	movs	r3, #230	@ 0xe6
 8005636:	80fb      	strh	r3, [r7, #6]
 8005638:	e003      	b.n	8005642 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 800563a:	23f8      	movs	r3, #248	@ 0xf8
 800563c:	80fb      	strh	r3, [r7, #6]
 800563e:	bf00      	nop
 8005640:	e04c      	b.n	80056dc <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005642:	e04b      	b.n	80056dc <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8005644:	4b49      	ldr	r3, [pc, #292]	@ (800576c <_UG_GetCharData+0x284>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564a:	8a7a      	ldrh	r2, [r7, #18]
 800564c:	0052      	lsls	r2, r2, #1
 800564e:	4413      	add	r3, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff fb83 	bl	8004d5c <ptr_8to16>
 8005656:	4603      	mov	r3, r0
 8005658:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800565a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800565e:	2b00      	cmp	r3, #0
 8005660:	da06      	bge.n	8005670 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8005662:	89fb      	ldrh	r3, [r7, #14]
 8005664:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005668:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800566a:	2301      	movs	r3, #1
 800566c:	747b      	strb	r3, [r7, #17]
 800566e:	e032      	b.n	80056d6 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8005670:	7c7b      	ldrb	r3, [r7, #17]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d021      	beq.n	80056ba <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	8afb      	ldrh	r3, [r7, #22]
 800567a:	429a      	cmp	r2, r3
 800567c:	d30d      	bcc.n	800569a <_UG_GetCharData+0x1b2>
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	89fb      	ldrh	r3, [r7, #14]
 8005682:	429a      	cmp	r2, r3
 8005684:	d809      	bhi.n	800569a <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	8afb      	ldrh	r3, [r7, #22]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	b29a      	uxth	r2, r3
 800568e:	8abb      	ldrh	r3, [r7, #20]
 8005690:	4413      	add	r3, r2
 8005692:	82bb      	strh	r3, [r7, #20]
        found=1;
 8005694:	2301      	movs	r3, #1
 8005696:	743b      	strb	r3, [r7, #16]
        break;
 8005698:	e02a      	b.n	80056f0 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	8afb      	ldrh	r3, [r7, #22]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d323      	bcc.n	80056ea <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80056a2:	89fa      	ldrh	r2, [r7, #14]
 80056a4:	8afb      	ldrh	r3, [r7, #22]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	8abb      	ldrh	r3, [r7, #20]
 80056ac:	4413      	add	r3, r2
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3301      	adds	r3, #1
 80056b2:	82bb      	strh	r3, [r7, #20]
      range=0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	747b      	strb	r3, [r7, #17]
 80056b8:	e00d      	b.n	80056d6 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	89fb      	ldrh	r3, [r7, #14]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d102      	bne.n	80056c8 <_UG_GetCharData+0x1e0>
      {
        found=1;
 80056c2:	2301      	movs	r3, #1
 80056c4:	743b      	strb	r3, [r7, #16]
        break;
 80056c6:	e013      	b.n	80056f0 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	89fb      	ldrh	r3, [r7, #14]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d30e      	bcc.n	80056ee <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80056d0:	8abb      	ldrh	r3, [r7, #20]
 80056d2:	3301      	adds	r3, #1
 80056d4:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80056d6:	8a7b      	ldrh	r3, [r7, #18]
 80056d8:	3301      	adds	r3, #1
 80056da:	827b      	strh	r3, [r7, #18]
 80056dc:	4b23      	ldr	r3, [pc, #140]	@ (800576c <_UG_GetCharData+0x284>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80056e2:	8a7a      	ldrh	r2, [r7, #18]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d3ad      	bcc.n	8005644 <_UG_GetCharData+0x15c>
 80056e8:	e002      	b.n	80056f0 <_UG_GetCharData+0x208>
        break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <_UG_GetCharData+0x208>
        break;
 80056ee:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 80056f0:	7c3b      	ldrb	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d034      	beq.n	8005760 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 80056f6:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <_UG_GetCharData+0x284>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005770 <_UG_GetCharData+0x288>)
 80056fe:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8005700:	4a1c      	ldr	r2, [pc, #112]	@ (8005774 <_UG_GetCharData+0x28c>)
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8005706:	4b19      	ldr	r3, [pc, #100]	@ (800576c <_UG_GetCharData+0x284>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	8aba      	ldrh	r2, [r7, #20]
 800570e:	4917      	ldr	r1, [pc, #92]	@ (800576c <_UG_GetCharData+0x284>)
 8005710:	6809      	ldr	r1, [r1, #0]
 8005712:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 8005714:	fb01 f202 	mul.w	r2, r1, r2
 8005718:	4413      	add	r3, r2
 800571a:	4a17      	ldr	r2, [pc, #92]	@ (8005778 <_UG_GetCharData+0x290>)
 800571c:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800571e:	4b13      	ldr	r3, [pc, #76]	@ (800576c <_UG_GetCharData+0x284>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <_UG_GetCharData+0x284>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800572e:	8abb      	ldrh	r3, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b21a      	sxth	r2, r3
 8005736:	4b11      	ldr	r3, [pc, #68]	@ (800577c <_UG_GetCharData+0x294>)
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e006      	b.n	800574a <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 800573c:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <_UG_GetCharData+0x284>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005744:	b21a      	sxth	r2, r3
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <_UG_GetCharData+0x294>)
 8005748:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8005750:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <_UG_GetCharData+0x290>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8005758:	4b08      	ldr	r3, [pc, #32]	@ (800577c <_UG_GetCharData+0x294>)
 800575a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800575e:	e001      	b.n	8005764 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8005760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000b90 	.word	0x20000b90
 8005770:	20000b94 	.word	0x20000b94
 8005774:	20000b98 	.word	0x20000b98
 8005778:	20000b9c 	.word	0x20000b9c
 800577c:	20000ba0 	.word	0x20000ba0

08005780 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005788:	4b3d      	ldr	r3, [pc, #244]	@ (8005880 <_UG_FontSelect+0x100>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d070      	beq.n	8005876 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005794:	4b3a      	ldr	r3, [pc, #232]	@ (8005880 <_UG_FontSelect+0x100>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	781a      	ldrb	r2, [r3, #0]
 80057a0:	4b37      	ldr	r3, [pc, #220]	@ (8005880 <_UG_FontSelect+0x100>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da01      	bge.n	80057c0 <_UG_FontSelect+0x40>
 80057bc:	2201      	movs	r2, #1
 80057be:	e000      	b.n	80057c2 <_UG_FontSelect+0x42>
 80057c0:	2200      	movs	r2, #0
 80057c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005880 <_UG_FontSelect+0x100>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005880 <_UG_FontSelect+0x100>)
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	4a27      	ldr	r2, [pc, #156]	@ (8005880 <_UG_FontSelect+0x100>)
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80057ec:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <_UG_FontSelect+0x100>)
 80057ee:	681c      	ldr	r4, [r3, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fab3 	bl	8004d5c <ptr_8to16>
 80057f6:	4603      	mov	r3, r0
 80057f8:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3302      	adds	r3, #2
 80057fe:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8005800:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <_UG_FontSelect+0x100>)
 8005802:	681c      	ldr	r4, [r3, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff faa9 	bl	8004d5c <ptr_8to16>
 800580a:	4603      	mov	r3, r0
 800580c:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3302      	adds	r3, #2
 8005812:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005814:	4b1a      	ldr	r3, [pc, #104]	@ (8005880 <_UG_FontSelect+0x100>)
 8005816:	681c      	ldr	r4, [r3, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fa9f 	bl	8004d5c <ptr_8to16>
 800581e:	4603      	mov	r3, r0
 8005820:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3302      	adds	r3, #2
 8005826:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <_UG_FontSelect+0x100>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800583c:	4b10      	ldr	r3, [pc, #64]	@ (8005880 <_UG_FontSelect+0x100>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005842:	461a      	mov	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4413      	add	r3, r2
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e003      	b.n	8005854 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800584c:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <_UG_FontSelect+0x100>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2200      	movs	r2, #0
 8005852:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <_UG_FontSelect+0x100>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800585c:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <_UG_FontSelect+0x100>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	461a      	mov	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800586c:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <_UG_FontSelect+0x100>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	641a      	str	r2, [r3, #64]	@ 0x40
 8005874:	e000      	b.n	8005878 <_UG_FontSelect+0xf8>
    return;
 8005876:	bf00      	nop
}
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bd90      	pop	{r4, r7, pc}
 800587e:	bf00      	nop
 8005880:	20000b90 	.word	0x20000b90

08005884 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8005884:	b5b0      	push	{r4, r5, r7, lr}
 8005886:	b08c      	sub	sp, #48	@ 0x30
 8005888:	af00      	add	r7, sp, #0
 800588a:	4604      	mov	r4, r0
 800588c:	4608      	mov	r0, r1
 800588e:	4611      	mov	r1, r2
 8005890:	461a      	mov	r2, r3
 8005892:	4623      	mov	r3, r4
 8005894:	80fb      	strh	r3, [r7, #6]
 8005896:	4603      	mov	r3, r0
 8005898:	80bb      	strh	r3, [r7, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	807b      	strh	r3, [r7, #2]
 800589e:	4613      	mov	r3, r2
 80058a0:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80058a6:	2300      	movs	r3, #0
 80058a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80058aa:	2300      	movs	r3, #0
 80058ac:	847b      	strh	r3, [r7, #34]	@ 0x22
 80058ae:	2300      	movs	r3, #0
 80058b0:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80058b2:	4b8b      	ldr	r3, [pc, #556]	@ (8005ae0 <_UG_PutChar+0x25c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80058ba:	75fb      	strb	r3, [r7, #23]
 80058bc:	4b88      	ldr	r3, [pc, #544]	@ (8005ae0 <_UG_PutChar+0x25c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80058ce:	f107 0208 	add.w	r2, r7, #8
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	4611      	mov	r1, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fe06 	bl	80054e8 <_UG_GetCharData>
 80058dc:	4603      	mov	r3, r0
 80058de:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80058e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d102      	bne.n	80058f0 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295
 80058ee:	e224      	b.n	8005d3a <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 80058f0:	4b7b      	ldr	r3, [pc, #492]	@ (8005ae0 <_UG_PutChar+0x25c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80058f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 80058fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <_UG_PutChar+0x80>
     return 0;
 8005900:	2300      	movs	r3, #0
 8005902:	e21a      	b.n	8005d3a <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 8005904:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005906:	08db      	lsrs	r3, r3, #3
 8005908:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 800590a:	4b75      	ldr	r3, [pc, #468]	@ (8005ae0 <_UG_PutChar+0x25c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <_UG_PutChar+0x9e>
 800591c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800591e:	3301      	adds	r3, #1
 8005920:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8005922:	7dbb      	ldrb	r3, [r7, #22]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01c      	beq.n	8005962 <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005928:	4b6d      	ldr	r3, [pc, #436]	@ (8005ae0 <_UG_PutChar+0x25c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800592e:	461c      	mov	r4, r3
 8005930:	88ba      	ldrh	r2, [r7, #4]
 8005932:	8abb      	ldrh	r3, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29b      	uxth	r3, r3
 800593c:	b21a      	sxth	r2, r3
 800593e:	4b68      	ldr	r3, [pc, #416]	@ (8005ae0 <_UG_PutChar+0x25c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005946:	4619      	mov	r1, r3
 8005948:	887b      	ldrh	r3, [r7, #2]
 800594a:	440b      	add	r3, r1
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29b      	uxth	r3, r3
 8005952:	b21b      	sxth	r3, r3
 8005954:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005958:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800595c:	47a0      	blx	r4
 800595e:	4603      	mov	r3, r0
 8005960:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005962:	4b5f      	ldr	r3, [pc, #380]	@ (8005ae0 <_UG_PutChar+0x25c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 8171 	bne.w	8005c52 <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005970:	2300      	movs	r3, #0
 8005972:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005974:	e0eb      	b.n	8005b4e <_UG_PutChar+0x2ca>
     {
       c=0;
 8005976:	2300      	movs	r3, #0
 8005978:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800597a:	2300      	movs	r3, #0
 800597c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800597e:	e0de      	b.n	8005b3e <_UG_PutChar+0x2ba>
       {
         b = *data++;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	60ba      	str	r2, [r7, #8]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800598a:	2300      	movs	r3, #0
 800598c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800598e:	e0c9      	b.n	8005b24 <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8005990:	7f7b      	ldrb	r3, [r7, #29]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d033      	beq.n	8005a02 <_UG_PutChar+0x17e>
           {
             if(driver)
 800599a:	7dbb      	ldrb	r3, [r7, #22]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01f      	beq.n	80059e0 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80059a0:	8c3b      	ldrh	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <_UG_PutChar+0x138>
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d107      	bne.n	80059bc <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80059ac:	8c3a      	ldrh	r2, [r7, #32]
 80059ae:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4610      	mov	r0, r2
 80059b6:	4798      	blx	r3
                 bpixels=0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80059bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <_UG_PutChar+0x154>
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 80059c8:	88ba      	ldrh	r2, [r7, #4]
 80059ca:	8bfb      	ldrh	r3, [r7, #30]
 80059cc:	4413      	add	r3, r2
 80059ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059d4:	4413      	add	r3, r2
 80059d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80059d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059da:	3301      	adds	r3, #1
 80059dc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80059de:	e095      	b.n	8005b0c <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 80059e0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ae0 <_UG_PutChar+0x25c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	88b9      	ldrh	r1, [r7, #4]
 80059ea:	8bfa      	ldrh	r2, [r7, #30]
 80059ec:	440a      	add	r2, r1
 80059ee:	b292      	uxth	r2, r2
 80059f0:	b210      	sxth	r0, r2
 80059f2:	8879      	ldrh	r1, [r7, #2]
 80059f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80059f6:	440a      	add	r2, r1
 80059f8:	b292      	uxth	r2, r2
 80059fa:	b211      	sxth	r1, r2
 80059fc:	883a      	ldrh	r2, [r7, #0]
 80059fe:	4798      	blx	r3
 8005a00:	e084      	b.n	8005b0c <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8005a02:	7dbb      	ldrb	r3, [r7, #22]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d06d      	beq.n	8005ae4 <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8005a08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d064      	beq.n	8005ad8 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d15e      	bne.n	8005ad2 <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 8005a14:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005a16:	8839      	ldrh	r1, [r7, #0]
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4798      	blx	r3
                   fpixels=0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a22:	e059      	b.n	8005ad8 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005a24:	88ba      	ldrh	r2, [r7, #4]
 8005a26:	8abb      	ldrh	r3, [r7, #20]
 8005a28:	4413      	add	r3, r2
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8005a32:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005a34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d003      	beq.n	8005a44 <_UG_PutChar+0x1c0>
 8005a3c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005a3e:	89fb      	ldrh	r3, [r7, #14]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d224      	bcs.n	8005a8e <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005a44:	4b26      	ldr	r3, [pc, #152]	@ (8005ae0 <_UG_PutChar+0x25c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a4a:	461d      	mov	r5, r3
 8005a4c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005a50:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005a54:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005a56:	89fb      	ldrh	r3, [r7, #14]
 8005a58:	4413      	add	r3, r2
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	b21c      	sxth	r4, r3
 8005a62:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005a64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005a70:	4413      	add	r3, r2
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	b21b      	sxth	r3, r3
 8005a76:	4622      	mov	r2, r4
 8005a78:	47a8      	blx	r5
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005a7e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005a80:	8839      	ldrh	r1, [r7, #0]
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
                       fpixels=0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a8c:	e021      	b.n	8005ad2 <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005a8e:	4b14      	ldr	r3, [pc, #80]	@ (8005ae0 <_UG_PutChar+0x25c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a94:	461c      	mov	r4, r3
 8005a96:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005a9a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005a9e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005aa0:	89fb      	ldrh	r3, [r7, #14]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	b21a      	sxth	r2, r3
 8005aac:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005ab0:	47a0      	blx	r4
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005ab6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005ab8:	8839      	ldrh	r1, [r7, #0]
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
                       fpixels -= width;
 8005ac0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005ac2:	89fb      	ldrh	r3, [r7, #14]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 8005ac8:	88bb      	ldrh	r3, [r7, #4]
 8005aca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 8005acc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ace:	3301      	adds	r3, #1
 8005ad0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 8005ad2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1a5      	bne.n	8005a24 <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 8005ad8:	8c3b      	ldrh	r3, [r7, #32]
 8005ada:	3301      	adds	r3, #1
 8005adc:	843b      	strh	r3, [r7, #32]
 8005ade:	e015      	b.n	8005b0c <_UG_PutChar+0x288>
 8005ae0:	20000b90 	.word	0x20000b90
             }
             else if(!trans)                           // Not accelerated output
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d110      	bne.n	8005b0c <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 8005aea:	4b96      	ldr	r3, [pc, #600]	@ (8005d44 <_UG_PutChar+0x4c0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	88b9      	ldrh	r1, [r7, #4]
 8005af4:	8bfa      	ldrh	r2, [r7, #30]
 8005af6:	440a      	add	r2, r1
 8005af8:	b292      	uxth	r2, r2
 8005afa:	b210      	sxth	r0, r2
 8005afc:	8879      	ldrh	r1, [r7, #2]
 8005afe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b00:	440a      	add	r2, r1
 8005b02:	b292      	uxth	r2, r2
 8005b04:	b211      	sxth	r1, r2
 8005b06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005b0a:	4798      	blx	r3
             }
           }
           b >>= 1;
 8005b0c:	7f7b      	ldrb	r3, [r7, #29]
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	777b      	strb	r3, [r7, #29]
           c++;
 8005b12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005b1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b20:	3301      	adds	r3, #1
 8005b22:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005b24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	d806      	bhi.n	8005b38 <_UG_PutChar+0x2b4>
 8005b2a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005b2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	f6ff af2c 	blt.w	8005990 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 8005b38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005b3e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005b40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b42:	429a      	cmp	r2, r3
 8005b44:	f4ff af1c 	bcc.w	8005980 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005b48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b4e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d44 <_UG_PutChar+0x4c0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005b56:	461a      	mov	r2, r3
 8005b58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	f4ff af0b 	bcc.w	8005976 <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8005b60:	7dbb      	ldrb	r3, [r7, #22]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80e7 	beq.w	8005d36 <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 8005b68:	8c3b      	ldrh	r3, [r7, #32]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <_UG_PutChar+0x2fe>
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8005b74:	8c3a      	ldrh	r2, [r7, #32]
 8005b76:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	e0d9      	b.n	8005d36 <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 8005b82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80d6 	beq.w	8005d36 <_UG_PutChar+0x4b2>
       {
         if(!trans)
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d15c      	bne.n	8005c4a <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 8005b90:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b92:	8839      	ldrh	r1, [r7, #0]
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	4610      	mov	r0, r2
 8005b98:	4798      	blx	r3
 8005b9a:	e0cc      	b.n	8005d36 <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8005b9c:	88ba      	ldrh	r2, [r7, #4]
 8005b9e:	8abb      	ldrh	r3, [r7, #20]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8005baa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005bac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d003      	beq.n	8005bbc <_UG_PutChar+0x338>
 8005bb4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005bb6:	8a3b      	ldrh	r3, [r7, #16]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d224      	bcs.n	8005c06 <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005bbc:	4b61      	ldr	r3, [pc, #388]	@ (8005d44 <_UG_PutChar+0x4c0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc2:	461d      	mov	r5, r3
 8005bc4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005bc8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005bcc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005bce:	8a3b      	ldrh	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	b21c      	sxth	r4, r3
 8005bda:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005bdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005be0:	fb92 f3f3 	sdiv	r3, r2, r3
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005be8:	4413      	add	r3, r2
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	4622      	mov	r2, r4
 8005bf0:	47a8      	blx	r5
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005bf6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005bf8:	8839      	ldrh	r1, [r7, #0]
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4798      	blx	r3
               fpixels=0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005c04:	e021      	b.n	8005c4a <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005c06:	4b4f      	ldr	r3, [pc, #316]	@ (8005d44 <_UG_PutChar+0x4c0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c0c:	461c      	mov	r4, r3
 8005c0e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005c12:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005c16:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c18:	8a3b      	ldrh	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	b21a      	sxth	r2, r3
 8005c24:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005c28:	47a0      	blx	r4
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005c2e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005c30:	8839      	ldrh	r1, [r7, #0]
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
               fpixels -= width;
 8005c38:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005c3a:	8a3b      	ldrh	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 8005c40:	88bb      	ldrh	r3, [r7, #4]
 8005c42:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 8005c44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005c46:	3301      	adds	r3, #1
 8005c48:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 8005c4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1a5      	bne.n	8005b9c <_UG_PutChar+0x318>
 8005c50:	e071      	b.n	8005d36 <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8005c52:	4b3c      	ldr	r3, [pc, #240]	@ (8005d44 <_UG_PutChar+0x4c0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d16b      	bne.n	8005d36 <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005c5e:	2300      	movs	r3, #0
 8005c60:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c62:	e060      	b.n	8005d26 <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8005c64:	2300      	movs	r3, #0
 8005c66:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005c68:	e04a      	b.n	8005d00 <_UG_PutChar+0x47c>
       {
         b = *data++;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	60ba      	str	r2, [r7, #8]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005c74:	883b      	ldrh	r3, [r7, #0]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	7f7a      	ldrb	r2, [r7, #29]
 8005c7a:	fb03 f202 	mul.w	r2, r3, r2
 8005c7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	7f79      	ldrb	r1, [r7, #29]
 8005c86:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	121b      	asrs	r3, r3, #8
 8005c92:	b21b      	sxth	r3, r3
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8005c98:	883b      	ldrh	r3, [r7, #0]
 8005c9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c9e:	7f79      	ldrb	r1, [r7, #29]
 8005ca0:	fb03 f101 	mul.w	r1, r3, r1
 8005ca4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ca8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005cac:	7f78      	ldrb	r0, [r7, #29]
 8005cae:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8005cb2:	fb00 f303 	mul.w	r3, r0, r3
 8005cb6:	440b      	add	r3, r1
 8005cb8:	121b      	asrs	r3, r3, #8
 8005cba:	b21b      	sxth	r3, r3
 8005cbc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cc0:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	b21b      	sxth	r3, r3
 8005cc6:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005cc8:	7dbb      	ldrb	r3, [r7, #22]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8005cce:	8a7a      	ldrh	r2, [r7, #18]
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	4798      	blx	r3
 8005cd8:	e00f      	b.n	8005cfa <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8005cda:	4b1a      	ldr	r3, [pc, #104]	@ (8005d44 <_UG_PutChar+0x4c0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	88b9      	ldrh	r1, [r7, #4]
 8005ce4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005ce6:	440a      	add	r2, r1
 8005ce8:	b292      	uxth	r2, r2
 8005cea:	b210      	sxth	r0, r2
 8005cec:	8879      	ldrh	r1, [r7, #2]
 8005cee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005cf0:	440a      	add	r2, r1
 8005cf2:	b292      	uxth	r2, r2
 8005cf4:	b211      	sxth	r1, r2
 8005cf6:	8a7a      	ldrh	r2, [r7, #18]
 8005cf8:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8005cfa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005d00:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005d02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	dbaf      	blt.n	8005c6a <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d44 <_UG_PutChar+0x4c0>)
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8005d14:	4611      	mov	r1, r2
 8005d16:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005d1a:	1a8a      	subs	r2, r1, r2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005d20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d22:	3301      	adds	r3, #1
 8005d24:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d26:	4b07      	ldr	r3, [pc, #28]	@ (8005d44 <_UG_PutChar+0x4c0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005d2e:	461a      	mov	r2, r3
 8005d30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d396      	bcc.n	8005c64 <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 8005d36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3730      	adds	r7, #48	@ 0x30
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bdb0      	pop	{r4, r5, r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000b90 	.word	0x20000b90

08005d48 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	@ 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8005d50:	4b57      	ldr	r3, [pc, #348]	@ (8005eb0 <_UG_ProcessTouchData+0x168>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8005d58:	4b55      	ldr	r3, [pc, #340]	@ (8005eb0 <_UG_ProcessTouchData+0x168>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	891b      	ldrh	r3, [r3, #8]
 8005d5e:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8005d60:	4b53      	ldr	r3, [pc, #332]	@ (8005eb0 <_UG_ProcessTouchData+0x168>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005d6e:	2300      	movs	r3, #0
 8005d70:	83fb      	strh	r3, [r7, #30]
 8005d72:	e090      	b.n	8005e96 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	8bfb      	ldrh	r3, [r7, #30]
 8005d7a:	015b      	lsls	r3, r3, #5
 8005d7c:	4413      	add	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d179      	bne.n	8005e8a <_UG_ProcessTouchData+0x142>
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d074      	beq.n	8005e8a <_UG_ProcessTouchData+0x142>
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d06f      	beq.n	8005e8a <_UG_ProcessTouchData+0x142>
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d16a      	bne.n	8005e8a <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d047      	beq.n	8005e4a <_UG_ProcessTouchData+0x102>
 8005dba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d042      	beq.n	8005e4a <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005dc4:	7f7b      	ldrb	r3, [r7, #29]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d107      	bne.n	8005dde <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8005dce:	7f7b      	ldrb	r3, [r7, #29]
 8005dd0:	f043 0305 	orr.w	r3, r3, #5
 8005dd4:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8005dd6:	7f7b      	ldrb	r3, [r7, #29]
 8005dd8:	f023 0318 	bic.w	r3, r3, #24
 8005ddc:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005dde:	7f7b      	ldrb	r3, [r7, #29]
 8005de0:	f023 0320 	bic.w	r3, r3, #32
 8005de4:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005dec:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	db25      	blt.n	8005e40 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005dfa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	dc1e      	bgt.n	8005e40 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005e08:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	db17      	blt.n	8005e40 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005e16:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	dc10      	bgt.n	8005e40 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005e1e:	7f7b      	ldrb	r3, [r7, #29]
 8005e20:	f043 0320 	orr.w	r3, r3, #32
 8005e24:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005e26:	7f7b      	ldrb	r3, [r7, #29]
 8005e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8005e30:	7f7b      	ldrb	r3, [r7, #29]
 8005e32:	f023 0304 	bic.w	r3, r3, #4
 8005e36:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8005e38:	7f7b      	ldrb	r3, [r7, #29]
 8005e3a:	f043 0302 	orr.w	r3, r3, #2
 8005e3e:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8005e40:	7f7b      	ldrb	r3, [r7, #29]
 8005e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e46:	777b      	strb	r3, [r7, #29]
 8005e48:	e01f      	b.n	8005e8a <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005e4a:	7f7b      	ldrb	r3, [r7, #29]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01a      	beq.n	8005e8a <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8005e54:	7f7b      	ldrb	r3, [r7, #29]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d004      	beq.n	8005e68 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8005e5e:	7f7b      	ldrb	r3, [r7, #29]
 8005e60:	f043 0308 	orr.w	r3, r3, #8
 8005e64:	777b      	strb	r3, [r7, #29]
 8005e66:	e003      	b.n	8005e70 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8005e68:	7f7b      	ldrb	r3, [r7, #29]
 8005e6a:	f043 0310 	orr.w	r3, r3, #16
 8005e6e:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005e70:	7f7b      	ldrb	r3, [r7, #29]
 8005e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8005e7a:	7f7b      	ldrb	r3, [r7, #29]
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8005e82:	7f7b      	ldrb	r3, [r7, #29]
 8005e84:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 8005e88:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	7f7a      	ldrb	r2, [r7, #29]
 8005e8e:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8005e90:	8bfb      	ldrh	r3, [r7, #30]
 8005e92:	3301      	adds	r3, #1
 8005e94:	83fb      	strh	r3, [r7, #30]
 8005e96:	8bfa      	ldrh	r2, [r7, #30]
 8005e98:	8abb      	ldrh	r3, [r7, #20]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	f4ff af6a 	bcc.w	8005d74 <_UG_ProcessTouchData+0x2c>
   }
}
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
 8005ea4:	3724      	adds	r7, #36	@ 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	20000b90 	.word	0x20000b90

08005eb4 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	82fb      	strh	r3, [r7, #22]
 8005ec6:	e035      	b.n	8005f34 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	8afb      	ldrh	r3, [r7, #22]
 8005ece:	015b      	lsls	r3, r3, #5
 8005ed0:	4413      	add	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d121      	bne.n	8005f2e <_UG_UpdateObjects+0x7a>
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01c      	beq.n	8005f2e <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	6939      	ldr	r1, [r7, #16]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <_UG_UpdateObjects+0x7a>
 8005f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da09      	bge.n	8005f2e <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8005f1a:	7bbb      	ldrb	r3, [r7, #14]
 8005f1c:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	6939      	ldr	r1, [r7, #16]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8005f2e:	8afb      	ldrh	r3, [r7, #22]
 8005f30:	3301      	adds	r3, #1
 8005f32:	82fb      	strh	r3, [r7, #22]
 8005f34:	8afa      	ldrh	r2, [r7, #22]
 8005f36:	8abb      	ldrh	r3, [r7, #20]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d3c5      	bcc.n	8005ec8 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8005f50:	4b22      	ldr	r3, [pc, #136]	@ (8005fdc <_UG_HandleEvents+0x94>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8005f56:	4b21      	ldr	r3, [pc, #132]	@ (8005fdc <_UG_HandleEvents+0x94>)
 8005f58:	2202      	movs	r2, #2
 8005f5a:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	82fb      	strh	r3, [r7, #22]
 8005f66:	e02f      	b.n	8005fc8 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	8afb      	ldrh	r3, [r7, #22]
 8005f6e:	015b      	lsls	r3, r3, #5
 8005f70:	4413      	add	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11e      	bne.n	8005fc2 <_UG_HandleEvents+0x7a>
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d019      	beq.n	8005fc2 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	7e9b      	ldrb	r3, [r3, #26]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d015      	beq.n	8005fc2 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8005f96:	4a11      	ldr	r2, [pc, #68]	@ (8005fdc <_UG_HandleEvents+0x94>)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	7e1a      	ldrb	r2, [r3, #24]
 8005fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8005fdc <_UG_HandleEvents+0x94>)
 8005fa2:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	7e5a      	ldrb	r2, [r3, #25]
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <_UG_HandleEvents+0x94>)
 8005faa:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	7e9a      	ldrb	r2, [r3, #26]
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <_UG_HandleEvents+0x94>)
 8005fb2:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb8:	4808      	ldr	r0, [pc, #32]	@ (8005fdc <_UG_HandleEvents+0x94>)
 8005fba:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8005fc2:	8afb      	ldrh	r3, [r7, #22]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	82fb      	strh	r3, [r7, #22]
 8005fc8:	8afa      	ldrh	r2, [r7, #22]
 8005fca:	8abb      	ldrh	r3, [r7, #20]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d3cb      	bcc.n	8005f68 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000ba4 	.word	0x20000ba4

08005fe0 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b08f      	sub	sp, #60	@ 0x3c
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 812c 	beq.w	800624a <_UG_PutText+0x26a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 8127 	beq.w	800624a <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	89db      	ldrh	r3, [r3, #14]
 8006000:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	895b      	ldrh	r3, [r3, #10]
 8006006:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	3302      	adds	r3, #2
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8006012:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8006016:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006020:	429a      	cmp	r2, r3
 8006022:	f2c0 8114 	blt.w	800624e <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	891b      	ldrh	r3, [r3, #8]
 800602a:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	899b      	ldrh	r3, [r3, #12]
 8006030:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	7d1b      	ldrb	r3, [r3, #20]
 8006036:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8adb      	ldrh	r3, [r3, #22]
 800603c:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8b1b      	ldrh	r3, [r3, #24]
 8006042:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]
   char* c = str;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fb94 	bl	8005780 <_UG_FontSelect>

   rc=1;
 8006058:	2301      	movs	r3, #1
 800605a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006060:	4b80      	ldr	r3, [pc, #512]	@ (8006264 <_UG_PutText+0x284>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 800606c:	f107 0308 	add.w	r3, r7, #8
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff f9c1 	bl	80053f8 <_UG_DecodeUTF8>
 8006076:	4603      	mov	r3, r0
 8006078:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800607a:	e004      	b.n	8006086 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	60ba      	str	r2, [r7, #8]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8006086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 800608c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800608e:	2b0a      	cmp	r3, #10
 8006090:	d1e6      	bne.n	8006060 <_UG_PutText+0x80>
 8006092:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006094:	3301      	adds	r3, #1
 8006096:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006098:	e7e2      	b.n	8006060 <_UG_PutText+0x80>
     if(!chr) break;
 800609a:	bf00      	nop
   }

   yp = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80060a0:	7e7b      	ldrb	r3, [r7, #25]
 80060a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01f      	beq.n	80060ea <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 80060aa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80060ac:	8c3b      	ldrh	r3, [r7, #32]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3301      	adds	r3, #1
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 80060b8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80060ba:	8bfb      	ldrh	r3, [r7, #30]
 80060bc:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80060be:	fb11 f303 	smulbb	r3, r1, r3
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 80060ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80060cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b299      	uxth	r1, r3
 80060d2:	8abb      	ldrh	r3, [r7, #20]
 80060d4:	fb11 f303 	smulbb	r3, r1, r3
 80060d8:	b29b      	uxth	r3, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	b29b      	uxth	r3, r3
 80060de:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 80060e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f2c0 80b4 	blt.w	8006252 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80060ea:	7e7b      	ldrb	r3, [r7, #25]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <_UG_PutText+0x11c>
 80060f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80060f8:	105b      	asrs	r3, r3, #1
 80060fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 80060fc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80060fe:	8c3b      	ldrh	r3, [r7, #32]
 8006100:	4413      	add	r3, r2
 8006102:	b29b      	uxth	r3, r3
 8006104:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 8006106:	2300      	movs	r3, #0
 8006108:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	60bb      	str	r3, [r7, #8]
      wl = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006112:	4b54      	ldr	r3, [pc, #336]	@ (8006264 <_UG_PutText+0x284>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800611a:	2b00      	cmp	r3, #0
 800611c:	d107      	bne.n	800612e <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 800611e:	f107 0308 	add.w	r3, r7, #8
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff f968 	bl	80053f8 <_UG_DecodeUTF8>
 8006128:	4603      	mov	r3, r0
 800612a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800612c:	e004      	b.n	8006138 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	60ba      	str	r2, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8006138:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01b      	beq.n	8006176 <_UG_PutText+0x196>
 800613e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006140:	2b0a      	cmp	r3, #10
 8006142:	d018      	beq.n	8006176 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8006144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff f9cd 	bl	80054e8 <_UG_GetCharData>
 800614e:	4603      	mov	r3, r0
 8006150:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8006152:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d00a      	beq.n	8006172 <_UG_PutText+0x192>
         sl++;
 800615c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800615e:	3301      	adds	r3, #1
 8006160:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 8006162:	8a7a      	ldrh	r2, [r7, #18]
 8006164:	8afb      	ldrh	r3, [r7, #22]
 8006166:	4413      	add	r3, r2
 8006168:	b29a      	uxth	r2, r3
 800616a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800616c:	4413      	add	r3, r2
 800616e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006170:	e7cf      	b.n	8006112 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8006172:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006174:	e7cd      	b.n	8006112 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8006176:	8afb      	ldrh	r3, [r7, #22]
 8006178:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 800617e:	8b7a      	ldrh	r2, [r7, #26]
 8006180:	8bbb      	ldrh	r3, [r7, #28]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	b29b      	uxth	r3, r3
 8006186:	3301      	adds	r3, #1
 8006188:	b29b      	uxth	r3, r3
 800618a:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 800618c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800618e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	b29b      	uxth	r3, r3
 8006194:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 8006196:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	db5b      	blt.n	8006256 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 800619e:	7e7b      	ldrb	r3, [r7, #25]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <_UG_PutText+0x1ce>
 80061a8:	2300      	movs	r3, #0
 80061aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061ac:	e008      	b.n	80061c0 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80061ae:	7e7b      	ldrb	r3, [r7, #25]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <_UG_PutText+0x1e0>
 80061b8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80061bc:	105b      	asrs	r3, r3, #1
 80061be:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 80061c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80061c2:	8bbb      	ldrh	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80061ca:	4b26      	ldr	r3, [pc, #152]	@ (8006264 <_UG_PutText+0x284>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d107      	bne.n	80061e6 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff f90c 	bl	80053f8 <_UG_DecodeUTF8>
 80061e0:	4603      	mov	r3, r0
 80061e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80061e4:	e004      	b.n	80061f0 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	60fa      	str	r2, [r7, #12]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 80061f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d031      	beq.n	800625a <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 80061f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061f8:	2b0a      	cmp	r3, #10
 80061fa:	d01c      	beq.n	8006236 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8a1c      	ldrh	r4, [r3, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8a5b      	ldrh	r3, [r3, #18]
 8006204:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8006208:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 800620c:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4623      	mov	r3, r4
 8006212:	f7ff fb37 	bl	8005884 <_UG_PutChar>
 8006216:	4603      	mov	r3, r0
 8006218:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 800621a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d0d2      	beq.n	80061ca <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8006224:	8a7a      	ldrh	r2, [r7, #18]
 8006226:	8afb      	ldrh	r3, [r7, #22]
 8006228:	4413      	add	r3, r2
 800622a:	b29a      	uxth	r2, r3
 800622c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800622e:	4413      	add	r3, r2
 8006230:	b29b      	uxth	r3, r3
 8006232:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006234:	e7c9      	b.n	80061ca <_UG_PutText+0x1ea>
           break;
 8006236:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8006238:	8bfa      	ldrh	r2, [r7, #30]
 800623a:	8abb      	ldrh	r3, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	b29a      	uxth	r2, r3
 8006240:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006242:	4413      	add	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 8006248:	e75d      	b.n	8006106 <_UG_PutText+0x126>
     return;
 800624a:	bf00      	nop
 800624c:	e006      	b.n	800625c <_UG_PutText+0x27c>
     return;
 800624e:	bf00      	nop
 8006250:	e004      	b.n	800625c <_UG_PutText+0x27c>
        return;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <_UG_PutText+0x27c>
           return;
 800625a:	bf00      	nop
   }
}
 800625c:	3734      	adds	r7, #52	@ 0x34
 800625e:	46bd      	mov	sp, r7
 8006260:	bd90      	pop	{r4, r7, pc}
 8006262:	bf00      	nop
 8006264:	20000b90 	.word	0x20000b90

08006268 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8006268:	b5b0      	push	{r4, r5, r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af02      	add	r7, sp, #8
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	4611      	mov	r1, r2
 8006274:	461a      	mov	r2, r3
 8006276:	4623      	mov	r3, r4
 8006278:	80fb      	strh	r3, [r7, #6]
 800627a:	4603      	mov	r3, r0
 800627c:	80bb      	strh	r3, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	807b      	strh	r3, [r7, #2]
 8006282:	4613      	mov	r3, r2
 8006284:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8006286:	887b      	ldrh	r3, [r7, #2]
 8006288:	3b01      	subs	r3, #1
 800628a:	b29b      	uxth	r3, r3
 800628c:	b21c      	sxth	r4, r3
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	61ba      	str	r2, [r7, #24]
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800629a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800629e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	4622      	mov	r2, r4
 80062a8:	f7fe fe94 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80062ac:	88bb      	ldrh	r3, [r7, #4]
 80062ae:	3301      	adds	r3, #1
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	b219      	sxth	r1, r3
 80062b4:	883b      	ldrh	r3, [r7, #0]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	b21c      	sxth	r4, r3
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	1c9a      	adds	r2, r3, #2
 80062c0:	61ba      	str	r2, [r7, #24]
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062c8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	4623      	mov	r3, r4
 80062d0:	f7fe fe80 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	1c9a      	adds	r2, r3, #2
 80062d8:	61ba      	str	r2, [r7, #24]
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	f9b7 4000 	ldrsh.w	r4, [r7]
 80062e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80062e4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80062e8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	4623      	mov	r3, r4
 80062f0:	f7fe fe70 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80062f4:	883b      	ldrh	r3, [r7, #0]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	b21c      	sxth	r4, r3
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	1c9a      	adds	r2, r3, #2
 8006300:	61ba      	str	r2, [r7, #24]
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006308:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800630c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4623      	mov	r3, r4
 8006314:	f7fe fe5e 	bl	8004fd4 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	3301      	adds	r3, #1
 800631c:	b29b      	uxth	r3, r3
 800631e:	b218      	sxth	r0, r3
 8006320:	88bb      	ldrh	r3, [r7, #4]
 8006322:	3301      	adds	r3, #1
 8006324:	b29b      	uxth	r3, r3
 8006326:	b219      	sxth	r1, r3
 8006328:	887b      	ldrh	r3, [r7, #2]
 800632a:	3b02      	subs	r3, #2
 800632c:	b29b      	uxth	r3, r3
 800632e:	b21c      	sxth	r4, r3
 8006330:	88bb      	ldrh	r3, [r7, #4]
 8006332:	3301      	adds	r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	b21d      	sxth	r5, r3
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	1c9a      	adds	r2, r3, #2
 800633c:	61ba      	str	r2, [r7, #24]
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	462b      	mov	r3, r5
 8006344:	4622      	mov	r2, r4
 8006346:	f7fe fe45 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	3301      	adds	r3, #1
 800634e:	b29b      	uxth	r3, r3
 8006350:	b218      	sxth	r0, r3
 8006352:	88bb      	ldrh	r3, [r7, #4]
 8006354:	3302      	adds	r3, #2
 8006356:	b29b      	uxth	r3, r3
 8006358:	b219      	sxth	r1, r3
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	3301      	adds	r3, #1
 800635e:	b29b      	uxth	r3, r3
 8006360:	b21c      	sxth	r4, r3
 8006362:	883b      	ldrh	r3, [r7, #0]
 8006364:	3b02      	subs	r3, #2
 8006366:	b29b      	uxth	r3, r3
 8006368:	b21d      	sxth	r5, r3
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	1c9a      	adds	r2, r3, #2
 800636e:	61ba      	str	r2, [r7, #24]
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	462b      	mov	r3, r5
 8006376:	4622      	mov	r2, r4
 8006378:	f7fe fe2c 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	3301      	adds	r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	b218      	sxth	r0, r3
 8006384:	883b      	ldrh	r3, [r7, #0]
 8006386:	3b01      	subs	r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	b219      	sxth	r1, r3
 800638c:	887b      	ldrh	r3, [r7, #2]
 800638e:	3b01      	subs	r3, #1
 8006390:	b29b      	uxth	r3, r3
 8006392:	b21c      	sxth	r4, r3
 8006394:	883b      	ldrh	r3, [r7, #0]
 8006396:	3b01      	subs	r3, #1
 8006398:	b29b      	uxth	r3, r3
 800639a:	b21d      	sxth	r5, r3
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	61ba      	str	r2, [r7, #24]
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	462b      	mov	r3, r5
 80063a8:	4622      	mov	r2, r4
 80063aa:	f7fe fe13 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80063ae:	887b      	ldrh	r3, [r7, #2]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	b218      	sxth	r0, r3
 80063b6:	88bb      	ldrh	r3, [r7, #4]
 80063b8:	3301      	adds	r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	b219      	sxth	r1, r3
 80063be:	887b      	ldrh	r3, [r7, #2]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	b21c      	sxth	r4, r3
 80063c6:	883b      	ldrh	r3, [r7, #0]
 80063c8:	3b02      	subs	r3, #2
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	b21d      	sxth	r5, r3
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	1c9a      	adds	r2, r3, #2
 80063d2:	61ba      	str	r2, [r7, #24]
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	462b      	mov	r3, r5
 80063da:	4622      	mov	r2, r4
 80063dc:	f7fe fdfa 	bl	8004fd4 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	3302      	adds	r3, #2
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	b218      	sxth	r0, r3
 80063e8:	88bb      	ldrh	r3, [r7, #4]
 80063ea:	3302      	adds	r3, #2
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	b219      	sxth	r1, r3
 80063f0:	887b      	ldrh	r3, [r7, #2]
 80063f2:	3b03      	subs	r3, #3
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	b21c      	sxth	r4, r3
 80063f8:	88bb      	ldrh	r3, [r7, #4]
 80063fa:	3302      	adds	r3, #2
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	b21d      	sxth	r5, r3
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	61ba      	str	r2, [r7, #24]
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	462b      	mov	r3, r5
 800640c:	4622      	mov	r2, r4
 800640e:	f7fe fde1 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	3302      	adds	r3, #2
 8006416:	b29b      	uxth	r3, r3
 8006418:	b218      	sxth	r0, r3
 800641a:	88bb      	ldrh	r3, [r7, #4]
 800641c:	3303      	adds	r3, #3
 800641e:	b29b      	uxth	r3, r3
 8006420:	b219      	sxth	r1, r3
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	3302      	adds	r3, #2
 8006426:	b29b      	uxth	r3, r3
 8006428:	b21c      	sxth	r4, r3
 800642a:	883b      	ldrh	r3, [r7, #0]
 800642c:	3b03      	subs	r3, #3
 800642e:	b29b      	uxth	r3, r3
 8006430:	b21d      	sxth	r5, r3
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	1c9a      	adds	r2, r3, #2
 8006436:	61ba      	str	r2, [r7, #24]
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	462b      	mov	r3, r5
 800643e:	4622      	mov	r2, r4
 8006440:	f7fe fdc8 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8006444:	88fb      	ldrh	r3, [r7, #6]
 8006446:	3302      	adds	r3, #2
 8006448:	b29b      	uxth	r3, r3
 800644a:	b218      	sxth	r0, r3
 800644c:	883b      	ldrh	r3, [r7, #0]
 800644e:	3b02      	subs	r3, #2
 8006450:	b29b      	uxth	r3, r3
 8006452:	b219      	sxth	r1, r3
 8006454:	887b      	ldrh	r3, [r7, #2]
 8006456:	3b02      	subs	r3, #2
 8006458:	b29b      	uxth	r3, r3
 800645a:	b21c      	sxth	r4, r3
 800645c:	883b      	ldrh	r3, [r7, #0]
 800645e:	3b02      	subs	r3, #2
 8006460:	b29b      	uxth	r3, r3
 8006462:	b21d      	sxth	r5, r3
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	1c9a      	adds	r2, r3, #2
 8006468:	61ba      	str	r2, [r7, #24]
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	462b      	mov	r3, r5
 8006470:	4622      	mov	r2, r4
 8006472:	f7fe fdaf 	bl	8004fd4 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8006476:	887b      	ldrh	r3, [r7, #2]
 8006478:	3b02      	subs	r3, #2
 800647a:	b29b      	uxth	r3, r3
 800647c:	b218      	sxth	r0, r3
 800647e:	88bb      	ldrh	r3, [r7, #4]
 8006480:	3302      	adds	r3, #2
 8006482:	b29b      	uxth	r3, r3
 8006484:	b219      	sxth	r1, r3
 8006486:	887b      	ldrh	r3, [r7, #2]
 8006488:	3b02      	subs	r3, #2
 800648a:	b29b      	uxth	r3, r3
 800648c:	b21a      	sxth	r2, r3
 800648e:	883b      	ldrh	r3, [r7, #0]
 8006490:	3b03      	subs	r3, #3
 8006492:	b29b      	uxth	r3, r3
 8006494:	b21c      	sxth	r4, r3
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	4623      	mov	r3, r4
 800649e:	f7fe fd99 	bl	8004fd4 <UG_DrawLine>
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080064ac <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	6039      	str	r1, [r7, #0]
 80064b6:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d810      	bhi.n	80064e0 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80064be:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <UG_DriverRegister+0x40>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	330a      	adds	r3, #10
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4413      	add	r3, r2
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80064ce:	4b07      	ldr	r3, [pc, #28]	@ (80064ec <UG_DriverRegister+0x40>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	330a      	adds	r3, #10
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	2203      	movs	r2, #3
 80064dc:	721a      	strb	r2, [r3, #8]
 80064de:	e000      	b.n	80064e2 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80064e0:	bf00      	nop
}
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	20000b90 	.word	0x20000b90

080064f0 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80064f6:	4b5e      	ldr	r3, [pc, #376]	@ (8006670 <UG_Update+0x180>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <UG_Update+0x2c>
 8006506:	4b5a      	ldr	r3, [pc, #360]	@ (8006670 <UG_Update+0x180>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 800650e:	4b58      	ldr	r3, [pc, #352]	@ (8006670 <UG_Update+0x180>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0201 	bic.w	r2, r2, #1
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 800651c:	4b54      	ldr	r3, [pc, #336]	@ (8006670 <UG_Update+0x180>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	4b53      	ldr	r3, [pc, #332]	@ (8006670 <UG_Update+0x180>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	429a      	cmp	r2, r3
 800652a:	d071      	beq.n	8006610 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 800652c:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <UG_Update+0x180>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d06c      	beq.n	8006610 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8006536:	4b4e      	ldr	r3, [pc, #312]	@ (8006670 <UG_Update+0x180>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b4d      	ldr	r3, [pc, #308]	@ (8006670 <UG_Update+0x180>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6912      	ldr	r2, [r2, #16]
 8006540:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8006542:	4b4b      	ldr	r3, [pc, #300]	@ (8006670 <UG_Update+0x180>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b4a      	ldr	r3, [pc, #296]	@ (8006670 <UG_Update+0x180>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68d2      	ldr	r2, [r2, #12]
 800654c:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 800654e:	4b48      	ldr	r3, [pc, #288]	@ (8006670 <UG_Update+0x180>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d045      	beq.n	80065e4 <UG_Update+0xf4>
 8006558:	4b45      	ldr	r3, [pc, #276]	@ (8006670 <UG_Update+0x180>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	7d9b      	ldrb	r3, [r3, #22]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d03d      	beq.n	80065e4 <UG_Update+0xf4>
 8006568:	4b41      	ldr	r3, [pc, #260]	@ (8006670 <UG_Update+0x180>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	7a1b      	ldrb	r3, [r3, #8]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d035      	beq.n	80065e4 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006578:	4b3d      	ldr	r3, [pc, #244]	@ (8006670 <UG_Update+0x180>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8006582:	4b3b      	ldr	r3, [pc, #236]	@ (8006670 <UG_Update+0x180>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800658c:	429a      	cmp	r2, r3
 800658e:	d123      	bne.n	80065d8 <UG_Update+0xe8>
 8006590:	4b37      	ldr	r3, [pc, #220]	@ (8006670 <UG_Update+0x180>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800659a:	4b35      	ldr	r3, [pc, #212]	@ (8006670 <UG_Update+0x180>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d117      	bne.n	80065d8 <UG_Update+0xe8>
 80065a8:	4b31      	ldr	r3, [pc, #196]	@ (8006670 <UG_Update+0x180>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80065b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006670 <UG_Update+0x180>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d10b      	bne.n	80065d8 <UG_Update+0xe8>
 80065c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006670 <UG_Update+0x180>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80065ca:	4b29      	ldr	r3, [pc, #164]	@ (8006670 <UG_Update+0x180>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d005      	beq.n	80065e4 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80065d8:	4b25      	ldr	r3, [pc, #148]	@ (8006670 <UG_Update+0x180>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f848 	bl	8006674 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80065e4:	4b22      	ldr	r3, [pc, #136]	@ (8006670 <UG_Update+0x180>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	7a1a      	ldrb	r2, [r3, #8]
 80065ec:	4b20      	ldr	r3, [pc, #128]	@ (8006670 <UG_Update+0x180>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80065fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <UG_Update+0x180>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	7a1a      	ldrb	r2, [r3, #8]
 8006602:	4b1b      	ldr	r3, [pc, #108]	@ (8006670 <UG_Update+0x180>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8006610:	4b17      	ldr	r3, [pc, #92]	@ (8006670 <UG_Update+0x180>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d01b      	beq.n	8006652 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 800661a:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <UG_Update+0x180>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	7a1b      	ldrb	r3, [r3, #8]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8c8 	bl	80067c4 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	7a1b      	ldrb	r3, [r3, #8]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff fb81 	bl	8005d48 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff fc34 	bl	8005eb4 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fc7b 	bl	8005f48 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8006652:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <UG_Update+0x180>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <UG_Update+0x178>
     gui->device->flush();
 800665e:	4b04      	ldr	r3, [pc, #16]	@ (8006670 <UG_Update+0x180>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	4798      	blx	r3
   }
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000b90 	.word	0x20000b90

08006674 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8006674:	b590      	push	{r4, r7, lr}
 8006676:	b08f      	sub	sp, #60	@ 0x3c
 8006678:	af02      	add	r7, sp, #8
 800667a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 8098 	beq.w	80067b4 <_UG_WindowDrawTitle+0x140>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	7a1b      	ldrb	r3, [r3, #8]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8091 	beq.w	80067b4 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	89db      	ldrh	r3, [r3, #14]
 8006696:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8a1b      	ldrh	r3, [r3, #16]
 800669c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8a5b      	ldrh	r3, [r3, #18]
 80066a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8a9b      	ldrh	r3, [r3, #20]
 80066a8:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	7d9b      	ldrb	r3, [r3, #22]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00f      	beq.n	80066d6 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 80066b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80066b8:	3303      	adds	r3, #3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 80066be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80066c0:	3303      	adds	r3, #3
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 80066c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80066c8:	3b03      	subs	r3, #3
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 80066ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066d0:	3b03      	subs	r3, #3
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80066d6:	4b3a      	ldr	r3, [pc, #232]	@ (80067c0 <_UG_WindowDrawTitle+0x14c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d106      	bne.n	80066f0 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066e6:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80066ec:	83bb      	strh	r3, [r7, #28]
 80066ee:	e005      	b.n	80066fc <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f4:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066fa:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006702:	461a      	mov	r2, r3
 8006704:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006706:	4413      	add	r3, r2
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29b      	uxth	r3, r3
 800670e:	b21c      	sxth	r4, r3
 8006710:	8bfb      	ldrh	r3, [r7, #30]
 8006712:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006716:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800671a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	4623      	mov	r3, r4
 8006722:	f7fe fc01 	bl	8004f28 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8006732:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006734:	3303      	adds	r3, #3
 8006736:	b29b      	uxth	r3, r3
 8006738:	b21b      	sxth	r3, r3
 800673a:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 800673c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800673e:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8006740:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006742:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800674a:	461a      	mov	r2, r3
 800674c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800674e:	4413      	add	r3, r2
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29b      	uxth	r3, r3
 8006756:	b21b      	sxth	r3, r3
 8006758:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006760:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800676a:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8006772:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 8006774:	f107 030c 	add.w	r3, r7, #12
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff fc31 	bl	8005fe0 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006784:	461a      	mov	r2, r3
 8006786:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006788:	4413      	add	r3, r2
 800678a:	b29b      	uxth	r3, r3
 800678c:	b219      	sxth	r1, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006794:	461a      	mov	r2, r3
 8006796:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006798:	4413      	add	r3, r2
 800679a:	b29b      	uxth	r3, r3
 800679c:	b21b      	sxth	r3, r3
 800679e:	f649 5413 	movw	r4, #40211	@ 0x9d13
 80067a2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80067a6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80067aa:	9400      	str	r4, [sp, #0]
 80067ac:	f7fe fc12 	bl	8004fd4 <UG_DrawLine>
      return UG_RESULT_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e001      	b.n	80067b8 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3734      	adds	r7, #52	@ 0x34
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd90      	pop	{r4, r7, pc}
 80067c0:	20000b90 	.word	0x20000b90

080067c4 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80067c4:	b590      	push	{r4, r7, lr}
 80067c6:	b089      	sub	sp, #36	@ 0x24
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	89db      	ldrh	r3, [r3, #14]
 80067d0:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8a1b      	ldrh	r3, [r3, #16]
 80067d6:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	8a5b      	ldrh	r3, [r3, #18]
 80067dc:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8a9b      	ldrh	r3, [r3, #20]
 80067e2:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7a1b      	ldrb	r3, [r3, #8]
 80067e8:	f023 0320 	bic.w	r3, r3, #32
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7a1b      	ldrb	r3, [r3, #8]
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 8084 	beq.w	8006908 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	7d9b      	ldrb	r3, [r3, #22]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d021      	beq.n	8006850 <_UG_WindowUpdate+0x8c>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7a1b      	ldrb	r3, [r3, #8]
 8006810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11b      	bne.n	8006850 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8006818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800681c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006820:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006824:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006828:	4c43      	ldr	r4, [pc, #268]	@ (8006938 <_UG_WindowUpdate+0x174>)
 800682a:	9400      	str	r4, [sp, #0]
 800682c:	f7ff fd1c 	bl	8006268 <_UG_DrawObjectFrame>
         xs+=3;
 8006830:	8abb      	ldrh	r3, [r7, #20]
 8006832:	3303      	adds	r3, #3
 8006834:	b29b      	uxth	r3, r3
 8006836:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8006838:	8a7b      	ldrh	r3, [r7, #18]
 800683a:	3303      	adds	r3, #3
 800683c:	b29b      	uxth	r3, r3
 800683e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8006840:	8a3b      	ldrh	r3, [r7, #16]
 8006842:	3b03      	subs	r3, #3
 8006844:	b29b      	uxth	r3, r3
 8006846:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	3b03      	subs	r3, #3
 800684c:	b29b      	uxth	r3, r3
 800684e:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7d9b      	ldrb	r3, [r3, #22]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01a      	beq.n	8006892 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff ff09 	bl	8006674 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006868:	461a      	mov	r2, r3
 800686a:	8a7b      	ldrh	r3, [r7, #18]
 800686c:	4413      	add	r3, r2
 800686e:	b29b      	uxth	r3, r3
 8006870:	3301      	adds	r3, #1
 8006872:	b29b      	uxth	r3, r3
 8006874:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7a1b      	ldrb	r3, [r3, #8]
 800687a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7a1b      	ldrb	r3, [r3, #8]
 8006886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800688a:	b2da      	uxtb	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	721a      	strb	r2, [r3, #8]
            return;
 8006890:	e04e      	b.n	8006930 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	899b      	ldrh	r3, [r3, #12]
 8006896:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800689a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800689e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80068a2:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	4623      	mov	r3, r4
 80068aa:	f7fe fb3d 	bl	8004f28 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	82fb      	strh	r3, [r7, #22]
 80068b8:	e021      	b.n	80068fe <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	8afb      	ldrh	r3, [r7, #22]
 80068c0:	015b      	lsls	r3, r3, #5
 80068c2:	4413      	add	r3, r2
 80068c4:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d112      	bne.n	80068f8 <_UG_WindowUpdate+0x134>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <_UG_WindowUpdate+0x134>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d006      	beq.n	80068f8 <_UG_WindowUpdate+0x134>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80068f8:	8afb      	ldrh	r3, [r7, #22]
 80068fa:	3301      	adds	r3, #1
 80068fc:	82fb      	strh	r3, [r7, #22]
 80068fe:	8afa      	ldrh	r2, [r7, #22]
 8006900:	89bb      	ldrh	r3, [r7, #12]
 8006902:	429a      	cmp	r2, r3
 8006904:	d3d9      	bcc.n	80068ba <_UG_WindowUpdate+0xf6>
 8006906:	e013      	b.n	8006930 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8006920:	4b06      	ldr	r3, [pc, #24]	@ (800693c <_UG_WindowUpdate+0x178>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	4623      	mov	r3, r4
 800692c:	f7fe fafc 	bl	8004f28 <UG_FillFrame>
   }
}
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd90      	pop	{r4, r7, pc}
 8006936:	bf00      	nop
 8006938:	08018094 	.word	0x08018094
 800693c:	20000b90 	.word	0x20000b90

08006940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006978 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006944:	f7fe f9f8 	bl	8004d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006948:	480c      	ldr	r0, [pc, #48]	@ (800697c <LoopForever+0x6>)
  ldr r1, =_edata
 800694a:	490d      	ldr	r1, [pc, #52]	@ (8006980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800694c:	4a0d      	ldr	r2, [pc, #52]	@ (8006984 <LoopForever+0xe>)
  movs r3, #0
 800694e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006950:	e002      	b.n	8006958 <LoopCopyDataInit>

08006952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006956:	3304      	adds	r3, #4

08006958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800695a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800695c:	d3f9      	bcc.n	8006952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800695e:	4a0a      	ldr	r2, [pc, #40]	@ (8006988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006960:	4c0a      	ldr	r4, [pc, #40]	@ (800698c <LoopForever+0x16>)
  movs r3, #0
 8006962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006964:	e001      	b.n	800696a <LoopFillZerobss>

08006966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006968:	3204      	adds	r2, #4

0800696a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800696a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800696c:	d3fb      	bcc.n	8006966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800696e:	f00a f947 	bl	8010c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006972:	f7fb fe41 	bl	80025f8 <main>

08006976 <LoopForever>:

LoopForever:
    b LoopForever
 8006976:	e7fe      	b.n	8006976 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006978:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800697c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006980:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8006984:	08018458 	.word	0x08018458
  ldr r2, =_sbss
 8006988:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800698c:	20000cfc 	.word	0x20000cfc

08006990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006990:	e7fe      	b.n	8006990 <ADC1_IRQHandler>

08006992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800699c:	2003      	movs	r0, #3
 800699e:	f001 f9dd 	bl	8007d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069a2:	2000      	movs	r0, #0
 80069a4:	f000 f80e 	bl	80069c4 <HAL_InitTick>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	71fb      	strb	r3, [r7, #7]
 80069b2:	e001      	b.n	80069b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80069b4:	f7fd f940 	bl	8003c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80069b8:	79fb      	ldrb	r3, [r7, #7]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80069d0:	4b17      	ldr	r3, [pc, #92]	@ (8006a30 <HAL_InitTick+0x6c>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d023      	beq.n	8006a20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80069d8:	4b16      	ldr	r3, [pc, #88]	@ (8006a34 <HAL_InitTick+0x70>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b14      	ldr	r3, [pc, #80]	@ (8006a30 <HAL_InitTick+0x6c>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 f9e9 	bl	8007dc6 <HAL_SYSTICK_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10f      	bne.n	8006a1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b0f      	cmp	r3, #15
 80069fe:	d809      	bhi.n	8006a14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a00:	2200      	movs	r2, #0
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	f001 f9b3 	bl	8007d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a38 <HAL_InitTick+0x74>)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	e007      	b.n	8006a24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e004      	b.n	8006a24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
 8006a1e:	e001      	b.n	8006a24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2000002c 	.word	0x2000002c
 8006a34:	20000024 	.word	0x20000024
 8006a38:	20000028 	.word	0x20000028

08006a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a40:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <HAL_IncTick+0x20>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <HAL_IncTick+0x24>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4a04      	ldr	r2, [pc, #16]	@ (8006a60 <HAL_IncTick+0x24>)
 8006a4e:	6013      	str	r3, [r2, #0]
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	2000002c 	.word	0x2000002c
 8006a60:	20000bac 	.word	0x20000bac

08006a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return uwTick;
 8006a68:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <HAL_GetTick+0x14>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000bac 	.word	0x20000bac

08006a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a84:	f7ff ffee 	bl	8006a64 <HAL_GetTick>
 8006a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d005      	beq.n	8006aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006a96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac0 <HAL_Delay+0x44>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006aa2:	bf00      	nop
 8006aa4:	f7ff ffde 	bl	8006a64 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d8f7      	bhi.n	8006aa4 <HAL_Delay+0x28>
  {
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	2000002c 	.word	0x2000002c

08006ac4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	609a      	str	r2, [r3, #8]
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	609a      	str	r2, [r3, #8]
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3360      	adds	r3, #96	@ 0x60
 8006b3e:	461a      	mov	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	4b08      	ldr	r3, [pc, #32]	@ (8006b70 <LL_ADC_SetOffset+0x44>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006b64:	bf00      	nop
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	03fff000 	.word	0x03fff000

08006b74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3360      	adds	r3, #96	@ 0x60
 8006b82:	461a      	mov	r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3360      	adds	r3, #96	@ 0x60
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	615a      	str	r2, [r3, #20]
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3330      	adds	r3, #48	@ 0x30
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	0a1b      	lsrs	r3, r3, #8
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	f003 030c 	and.w	r3, r3, #12
 8006c18:	4413      	add	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	211f      	movs	r1, #31
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	401a      	ands	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	0e9b      	lsrs	r3, r3, #26
 8006c34:	f003 011f 	and.w	r1, r3, #31
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c42:	431a      	orrs	r2, r3
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006c48:	bf00      	nop
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3314      	adds	r3, #20
 8006c64:	461a      	mov	r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	0e5b      	lsrs	r3, r3, #25
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	4413      	add	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	0d1b      	lsrs	r3, r3, #20
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2107      	movs	r1, #7
 8006c82:	fa01 f303 	lsl.w	r3, r1, r3
 8006c86:	43db      	mvns	r3, r3
 8006c88:	401a      	ands	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	0d1b      	lsrs	r3, r3, #20
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f003 0318 	and.w	r3, r3, #24
 8006cce:	4908      	ldr	r1, [pc, #32]	@ (8006cf0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006cd0:	40d9      	lsrs	r1, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	400b      	ands	r3, r1
 8006cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	0007ffff 	.word	0x0007ffff

08006cf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006d04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6093      	str	r3, [r2, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d2c:	d101      	bne.n	8006d32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006d50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006d54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d7c:	d101      	bne.n	8006d82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <LL_ADC_IsEnabled+0x18>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <LL_ADC_IsEnabled+0x1a>
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d101      	bne.n	8006dce <LL_ADC_REG_IsConversionOngoing+0x18>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d101      	bne.n	8006df4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
	...

08006e04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e129      	b.n	8007072 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d109      	bne.n	8006e40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7fc ff27 	bl	8003c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff ff67 	bl	8006d18 <LL_ADC_IsDeepPowerDownEnabled>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff ff4d 	bl	8006cf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff ff82 	bl	8006d68 <LL_ADC_IsInternalRegulatorEnabled>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d115      	bne.n	8006e96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff ff66 	bl	8006d40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e74:	4b81      	ldr	r3, [pc, #516]	@ (800707c <HAL_ADC_Init+0x278>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	099b      	lsrs	r3, r3, #6
 8006e7a:	4a81      	ldr	r2, [pc, #516]	@ (8007080 <HAL_ADC_Init+0x27c>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	099b      	lsrs	r3, r3, #6
 8006e82:	3301      	adds	r3, #1
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006e88:	e002      	b.n	8006e90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f9      	bne.n	8006e8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff ff64 	bl	8006d68 <LL_ADC_IsInternalRegulatorEnabled>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eaa:	f043 0210 	orr.w	r2, r3, #16
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb6:	f043 0201 	orr.w	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff ff75 	bl	8006db6 <LL_ADC_REG_IsConversionOngoing>
 8006ecc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed2:	f003 0310 	and.w	r3, r3, #16
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f040 80c2 	bne.w	8007060 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f040 80be 	bne.w	8007060 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006eec:	f043 0202 	orr.w	r2, r3, #2
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ff49 	bl	8006d90 <LL_ADC_IsEnabled>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10b      	bne.n	8006f1c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f04:	485f      	ldr	r0, [pc, #380]	@ (8007084 <HAL_ADC_Init+0x280>)
 8006f06:	f7ff ff43 	bl	8006d90 <LL_ADC_IsEnabled>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	4619      	mov	r1, r3
 8006f16:	485c      	ldr	r0, [pc, #368]	@ (8007088 <HAL_ADC_Init+0x284>)
 8006f18:	f7ff fdd4 	bl	8006ac4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	7e5b      	ldrb	r3, [r3, #25]
 8006f20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006f26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006f2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006f32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d106      	bne.n	8006f58 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	045b      	lsls	r3, r3, #17
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	4b44      	ldr	r3, [pc, #272]	@ (800708c <HAL_ADC_Init+0x288>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	69b9      	ldr	r1, [r7, #24]
 8006f84:	430b      	orrs	r3, r1
 8006f86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff ff25 	bl	8006ddc <LL_ADC_INJ_IsConversionOngoing>
 8006f92:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d140      	bne.n	800701c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d13d      	bne.n	800701c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	7e1b      	ldrb	r3, [r3, #24]
 8006fa8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006faa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fb2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fc2:	f023 0306 	bic.w	r3, r3, #6
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	69b9      	ldr	r1, [r7, #24]
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d118      	bne.n	800700c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006fe4:	f023 0304 	bic.w	r3, r3, #4
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ff0:	4311      	orrs	r1, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006ff6:	4311      	orrs	r1, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	611a      	str	r2, [r3, #16]
 800700a:	e007      	b.n	800701c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d10c      	bne.n	800703e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702a:	f023 010f 	bic.w	r1, r3, #15
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	1e5a      	subs	r2, r3, #1
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	631a      	str	r2, [r3, #48]	@ 0x30
 800703c:	e007      	b.n	800704e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 020f 	bic.w	r2, r2, #15
 800704c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	f043 0201 	orr.w	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	659a      	str	r2, [r3, #88]	@ 0x58
 800705e:	e007      	b.n	8007070 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007064:	f043 0210 	orr.w	r2, r3, #16
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007070:	7ffb      	ldrb	r3, [r7, #31]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3720      	adds	r7, #32
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000024 	.word	0x20000024
 8007080:	053e2d63 	.word	0x053e2d63
 8007084:	50040000 	.word	0x50040000
 8007088:	50040300 	.word	0x50040300
 800708c:	fff0c007 	.word	0xfff0c007

08007090 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b0b6      	sub	sp, #216	@ 0xd8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_ADC_ConfigChannel+0x22>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e3d5      	b.n	800785e <HAL_ADC_ConfigChannel+0x7ce>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fe79 	bl	8006db6 <LL_ADC_REG_IsConversionOngoing>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f040 83ba 	bne.w	8007840 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b05      	cmp	r3, #5
 80070da:	d824      	bhi.n	8007126 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	3b02      	subs	r3, #2
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d81b      	bhi.n	800711e <HAL_ADC_ConfigChannel+0x8e>
 80070e6:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <HAL_ADC_ConfigChannel+0x5c>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	080070fd 	.word	0x080070fd
 80070f0:	08007105 	.word	0x08007105
 80070f4:	0800710d 	.word	0x0800710d
 80070f8:	08007115 	.word	0x08007115
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80070fc:	230c      	movs	r3, #12
 80070fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007102:	e010      	b.n	8007126 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8007104:	2312      	movs	r3, #18
 8007106:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800710a:	e00c      	b.n	8007126 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800710c:	2318      	movs	r3, #24
 800710e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007112:	e008      	b.n	8007126 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8007114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800711c:	e003      	b.n	8007126 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800711e:	2306      	movs	r3, #6
 8007120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007124:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8007134:	f7ff fd62 	bl	8006bfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff fe3a 	bl	8006db6 <LL_ADC_REG_IsConversionOngoing>
 8007142:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff fe46 	bl	8006ddc <LL_ADC_INJ_IsConversionOngoing>
 8007150:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 81bf 	bne.w	80074dc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800715e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007162:	2b00      	cmp	r3, #0
 8007164:	f040 81ba 	bne.w	80074dc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007170:	d10f      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	4619      	mov	r1, r3
 800717e:	f7ff fd69 	bl	8006c54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fd23 	bl	8006bd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8007190:	e00e      	b.n	80071b0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6819      	ldr	r1, [r3, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7ff fd58 	bl	8006c54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fd13 	bl	8006bd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695a      	ldr	r2, [r3, #20]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	08db      	lsrs	r3, r3, #3
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	fa02 f303 	lsl.w	r3, r2, r3
 80071c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d00a      	beq.n	80071e8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6919      	ldr	r1, [r3, #16]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071e2:	f7ff fca3 	bl	8006b2c <LL_ADC_SetOffset>
 80071e6:	e179      	b.n	80074dc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fcc0 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <HAL_ADC_ConfigChannel+0x184>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2100      	movs	r1, #0
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fcb5 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 800720a:	4603      	mov	r3, r0
 800720c:	0e9b      	lsrs	r3, r3, #26
 800720e:	f003 021f 	and.w	r2, r3, #31
 8007212:	e01e      	b.n	8007252 <HAL_ADC_ConfigChannel+0x1c2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2100      	movs	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fcaa 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 8007220:	4603      	mov	r3, r0
 8007222:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800722a:	fa93 f3a3 	rbit	r3, r3
 800722e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007236:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800723a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8007242:	2320      	movs	r3, #32
 8007244:	e004      	b.n	8007250 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8007246:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800724a:	fab3 f383 	clz	r3, r3
 800724e:	b2db      	uxtb	r3, r3
 8007250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <HAL_ADC_ConfigChannel+0x1da>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	0e9b      	lsrs	r3, r3, #26
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	e018      	b.n	800729c <HAL_ADC_ConfigChannel+0x20c>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007276:	fa93 f3a3 	rbit	r3, r3
 800727a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800727e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8007286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800728e:	2320      	movs	r3, #32
 8007290:	e004      	b.n	800729c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8007292:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007296:	fab3 f383 	clz	r3, r3
 800729a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800729c:	429a      	cmp	r2, r3
 800729e:	d106      	bne.n	80072ae <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2100      	movs	r1, #0
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff fc79 	bl	8006ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2101      	movs	r1, #1
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fc5d 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <HAL_ADC_ConfigChannel+0x24a>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2101      	movs	r1, #1
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff fc52 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 80072d0:	4603      	mov	r3, r0
 80072d2:	0e9b      	lsrs	r3, r3, #26
 80072d4:	f003 021f 	and.w	r2, r3, #31
 80072d8:	e01e      	b.n	8007318 <HAL_ADC_ConfigChannel+0x288>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2101      	movs	r1, #1
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff fc47 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072f0:	fa93 f3a3 	rbit	r3, r3
 80072f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80072f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8007300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8007308:	2320      	movs	r3, #32
 800730a:	e004      	b.n	8007316 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800730c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007310:	fab3 f383 	clz	r3, r3
 8007314:	b2db      	uxtb	r3, r3
 8007316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_ADC_ConfigChannel+0x2a0>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	0e9b      	lsrs	r3, r3, #26
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	e018      	b.n	8007362 <HAL_ADC_ConfigChannel+0x2d2>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007338:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800733c:	fa93 f3a3 	rbit	r3, r3
 8007340:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8007344:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800734c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8007354:	2320      	movs	r3, #32
 8007356:	e004      	b.n	8007362 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8007358:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800735c:	fab3 f383 	clz	r3, r3
 8007360:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007362:	429a      	cmp	r2, r3
 8007364:	d106      	bne.n	8007374 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2200      	movs	r2, #0
 800736c:	2101      	movs	r1, #1
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff fc16 	bl	8006ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2102      	movs	r1, #2
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff fbfa 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 8007380:	4603      	mov	r3, r0
 8007382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <HAL_ADC_ConfigChannel+0x310>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2102      	movs	r1, #2
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff fbef 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 8007396:	4603      	mov	r3, r0
 8007398:	0e9b      	lsrs	r3, r3, #26
 800739a:	f003 021f 	and.w	r2, r3, #31
 800739e:	e01e      	b.n	80073de <HAL_ADC_ConfigChannel+0x34e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2102      	movs	r1, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fbe4 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073b6:	fa93 f3a3 	rbit	r3, r3
 80073ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80073be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80073c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80073ce:	2320      	movs	r3, #32
 80073d0:	e004      	b.n	80073dc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80073d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073d6:	fab3 f383 	clz	r3, r3
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <HAL_ADC_ConfigChannel+0x366>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	0e9b      	lsrs	r3, r3, #26
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	e014      	b.n	8007420 <HAL_ADC_ConfigChannel+0x390>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073fe:	fa93 f3a3 	rbit	r3, r3
 8007402:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8007404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007406:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800740a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8007412:	2320      	movs	r3, #32
 8007414:	e004      	b.n	8007420 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8007416:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800741a:	fab3 f383 	clz	r3, r3
 800741e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007420:	429a      	cmp	r2, r3
 8007422:	d106      	bne.n	8007432 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2200      	movs	r2, #0
 800742a:	2102      	movs	r1, #2
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fbb7 	bl	8006ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2103      	movs	r1, #3
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff fb9b 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 800743e:	4603      	mov	r3, r0
 8007440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <HAL_ADC_ConfigChannel+0x3ce>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2103      	movs	r1, #3
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fb90 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 8007454:	4603      	mov	r3, r0
 8007456:	0e9b      	lsrs	r3, r3, #26
 8007458:	f003 021f 	and.w	r2, r3, #31
 800745c:	e017      	b.n	800748e <HAL_ADC_ConfigChannel+0x3fe>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2103      	movs	r1, #3
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff fb85 	bl	8006b74 <LL_ADC_GetOffsetChannel>
 800746a:	4603      	mov	r3, r0
 800746c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007470:	fa93 f3a3 	rbit	r3, r3
 8007474:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007478:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800747a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8007480:	2320      	movs	r3, #32
 8007482:	e003      	b.n	800748c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8007484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007486:	fab3 f383 	clz	r3, r3
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007496:	2b00      	cmp	r3, #0
 8007498:	d105      	bne.n	80074a6 <HAL_ADC_ConfigChannel+0x416>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	0e9b      	lsrs	r3, r3, #26
 80074a0:	f003 031f 	and.w	r3, r3, #31
 80074a4:	e011      	b.n	80074ca <HAL_ADC_ConfigChannel+0x43a>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ae:	fa93 f3a3 	rbit	r3, r3
 80074b2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80074b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80074b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80074be:	2320      	movs	r3, #32
 80074c0:	e003      	b.n	80074ca <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80074c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074c4:	fab3 f383 	clz	r3, r3
 80074c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d106      	bne.n	80074dc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2200      	movs	r2, #0
 80074d4:	2103      	movs	r1, #3
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7ff fb62 	bl	8006ba0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fc55 	bl	8006d90 <LL_ADC_IsEnabled>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 813f 	bne.w	800776c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6819      	ldr	r1, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7ff fbd6 	bl	8006cac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a8e      	ldr	r2, [pc, #568]	@ (8007740 <HAL_ADC_ConfigChannel+0x6b0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	f040 8130 	bne.w	800776c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <HAL_ADC_ConfigChannel+0x4a4>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	0e9b      	lsrs	r3, r3, #26
 8007522:	3301      	adds	r3, #1
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2b09      	cmp	r3, #9
 800752a:	bf94      	ite	ls
 800752c:	2301      	movls	r3, #1
 800752e:	2300      	movhi	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e019      	b.n	8007568 <HAL_ADC_ConfigChannel+0x4d8>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800753c:	fa93 f3a3 	rbit	r3, r3
 8007540:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8007542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007544:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8007546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800754c:	2320      	movs	r3, #32
 800754e:	e003      	b.n	8007558 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8007550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007552:	fab3 f383 	clz	r3, r3
 8007556:	b2db      	uxtb	r3, r3
 8007558:	3301      	adds	r3, #1
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	2b09      	cmp	r3, #9
 8007560:	bf94      	ite	ls
 8007562:	2301      	movls	r3, #1
 8007564:	2300      	movhi	r3, #0
 8007566:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007568:	2b00      	cmp	r3, #0
 800756a:	d079      	beq.n	8007660 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007574:	2b00      	cmp	r3, #0
 8007576:	d107      	bne.n	8007588 <HAL_ADC_ConfigChannel+0x4f8>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	0e9b      	lsrs	r3, r3, #26
 800757e:	3301      	adds	r3, #1
 8007580:	069b      	lsls	r3, r3, #26
 8007582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007586:	e015      	b.n	80075b4 <HAL_ADC_ConfigChannel+0x524>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800758e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007590:	fa93 f3a3 	rbit	r3, r3
 8007594:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8007596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007598:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800759a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80075a0:	2320      	movs	r3, #32
 80075a2:	e003      	b.n	80075ac <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80075a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075a6:	fab3 f383 	clz	r3, r3
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	3301      	adds	r3, #1
 80075ae:	069b      	lsls	r3, r3, #26
 80075b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d109      	bne.n	80075d4 <HAL_ADC_ConfigChannel+0x544>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	0e9b      	lsrs	r3, r3, #26
 80075c6:	3301      	adds	r3, #1
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	2101      	movs	r1, #1
 80075ce:	fa01 f303 	lsl.w	r3, r1, r3
 80075d2:	e017      	b.n	8007604 <HAL_ADC_ConfigChannel+0x574>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075dc:	fa93 f3a3 	rbit	r3, r3
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80075e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80075e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80075ec:	2320      	movs	r3, #32
 80075ee:	e003      	b.n	80075f8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80075f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075f2:	fab3 f383 	clz	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	3301      	adds	r3, #1
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	2101      	movs	r1, #1
 8007600:	fa01 f303 	lsl.w	r3, r1, r3
 8007604:	ea42 0103 	orr.w	r1, r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <HAL_ADC_ConfigChannel+0x59a>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	0e9b      	lsrs	r3, r3, #26
 800761a:	3301      	adds	r3, #1
 800761c:	f003 021f 	and.w	r2, r3, #31
 8007620:	4613      	mov	r3, r2
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	4413      	add	r3, r2
 8007626:	051b      	lsls	r3, r3, #20
 8007628:	e018      	b.n	800765c <HAL_ADC_ConfigChannel+0x5cc>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007632:	fa93 f3a3 	rbit	r3, r3
 8007636:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8007642:	2320      	movs	r3, #32
 8007644:	e003      	b.n	800764e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	fab3 f383 	clz	r3, r3
 800764c:	b2db      	uxtb	r3, r3
 800764e:	3301      	adds	r3, #1
 8007650:	f003 021f 	and.w	r2, r3, #31
 8007654:	4613      	mov	r3, r2
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	4413      	add	r3, r2
 800765a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800765c:	430b      	orrs	r3, r1
 800765e:	e080      	b.n	8007762 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007668:	2b00      	cmp	r3, #0
 800766a:	d107      	bne.n	800767c <HAL_ADC_ConfigChannel+0x5ec>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	0e9b      	lsrs	r3, r3, #26
 8007672:	3301      	adds	r3, #1
 8007674:	069b      	lsls	r3, r3, #26
 8007676:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800767a:	e015      	b.n	80076a8 <HAL_ADC_ConfigChannel+0x618>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	fa93 f3a3 	rbit	r3, r3
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800768e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8007694:	2320      	movs	r3, #32
 8007696:	e003      	b.n	80076a0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8007698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769a:	fab3 f383 	clz	r3, r3
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	3301      	adds	r3, #1
 80076a2:	069b      	lsls	r3, r3, #26
 80076a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <HAL_ADC_ConfigChannel+0x638>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	0e9b      	lsrs	r3, r3, #26
 80076ba:	3301      	adds	r3, #1
 80076bc:	f003 031f 	and.w	r3, r3, #31
 80076c0:	2101      	movs	r1, #1
 80076c2:	fa01 f303 	lsl.w	r3, r1, r3
 80076c6:	e017      	b.n	80076f8 <HAL_ADC_ConfigChannel+0x668>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	fa93 f3a3 	rbit	r3, r3
 80076d4:	61bb      	str	r3, [r7, #24]
  return result;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80076e0:	2320      	movs	r3, #32
 80076e2:	e003      	b.n	80076ec <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	fab3 f383 	clz	r3, r3
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	3301      	adds	r3, #1
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	2101      	movs	r1, #1
 80076f4:	fa01 f303 	lsl.w	r3, r1, r3
 80076f8:	ea42 0103 	orr.w	r1, r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10d      	bne.n	8007724 <HAL_ADC_ConfigChannel+0x694>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	0e9b      	lsrs	r3, r3, #26
 800770e:	3301      	adds	r3, #1
 8007710:	f003 021f 	and.w	r2, r3, #31
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	3b1e      	subs	r3, #30
 800771c:	051b      	lsls	r3, r3, #20
 800771e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007722:	e01d      	b.n	8007760 <HAL_ADC_ConfigChannel+0x6d0>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	fa93 f3a3 	rbit	r3, r3
 8007730:	60fb      	str	r3, [r7, #12]
  return result;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d103      	bne.n	8007744 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800773c:	2320      	movs	r3, #32
 800773e:	e005      	b.n	800774c <HAL_ADC_ConfigChannel+0x6bc>
 8007740:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	fab3 f383 	clz	r3, r3
 800774a:	b2db      	uxtb	r3, r3
 800774c:	3301      	adds	r3, #1
 800774e:	f003 021f 	and.w	r2, r3, #31
 8007752:	4613      	mov	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4413      	add	r3, r2
 8007758:	3b1e      	subs	r3, #30
 800775a:	051b      	lsls	r3, r3, #20
 800775c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007760:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007766:	4619      	mov	r1, r3
 8007768:	f7ff fa74 	bl	8006c54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	4b3d      	ldr	r3, [pc, #244]	@ (8007868 <HAL_ADC_ConfigChannel+0x7d8>)
 8007772:	4013      	ands	r3, r2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d06c      	beq.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007778:	483c      	ldr	r0, [pc, #240]	@ (800786c <HAL_ADC_ConfigChannel+0x7dc>)
 800777a:	f7ff f9c9 	bl	8006b10 <LL_ADC_GetCommonPathInternalCh>
 800777e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a3a      	ldr	r2, [pc, #232]	@ (8007870 <HAL_ADC_ConfigChannel+0x7e0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d127      	bne.n	80077dc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800778c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d121      	bne.n	80077dc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a35      	ldr	r2, [pc, #212]	@ (8007874 <HAL_ADC_ConfigChannel+0x7e4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d157      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077aa:	4619      	mov	r1, r3
 80077ac:	482f      	ldr	r0, [pc, #188]	@ (800786c <HAL_ADC_ConfigChannel+0x7dc>)
 80077ae:	f7ff f99c 	bl	8006aea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80077b2:	4b31      	ldr	r3, [pc, #196]	@ (8007878 <HAL_ADC_ConfigChannel+0x7e8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	4a30      	ldr	r2, [pc, #192]	@ (800787c <HAL_ADC_ConfigChannel+0x7ec>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	099b      	lsrs	r3, r3, #6
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	4613      	mov	r3, r2
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80077cc:	e002      	b.n	80077d4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f9      	bne.n	80077ce <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80077da:	e03a      	b.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a27      	ldr	r2, [pc, #156]	@ (8007880 <HAL_ADC_ConfigChannel+0x7f0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d113      	bne.n	800780e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80077e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007874 <HAL_ADC_ConfigChannel+0x7e4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d12a      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007800:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007804:	4619      	mov	r1, r3
 8007806:	4819      	ldr	r0, [pc, #100]	@ (800786c <HAL_ADC_ConfigChannel+0x7dc>)
 8007808:	f7ff f96f 	bl	8006aea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800780c:	e021      	b.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a1c      	ldr	r2, [pc, #112]	@ (8007884 <HAL_ADC_ConfigChannel+0x7f4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d11c      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800781c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d116      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a12      	ldr	r2, [pc, #72]	@ (8007874 <HAL_ADC_ConfigChannel+0x7e4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d111      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800782e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007832:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007836:	4619      	mov	r1, r3
 8007838:	480c      	ldr	r0, [pc, #48]	@ (800786c <HAL_ADC_ConfigChannel+0x7dc>)
 800783a:	f7ff f956 	bl	8006aea <LL_ADC_SetCommonPathInternalCh>
 800783e:	e008      	b.n	8007852 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007844:	f043 0220 	orr.w	r2, r3, #32
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800785a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800785e:	4618      	mov	r0, r3
 8007860:	37d8      	adds	r7, #216	@ 0xd8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	80080000 	.word	0x80080000
 800786c:	50040300 	.word	0x50040300
 8007870:	c7520000 	.word	0xc7520000
 8007874:	50040000 	.word	0x50040000
 8007878:	20000024 	.word	0x20000024
 800787c:	053e2d63 	.word	0x053e2d63
 8007880:	cb840000 	.word	0xcb840000
 8007884:	80000001 	.word	0x80000001

08007888 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007890:	4b05      	ldr	r3, [pc, #20]	@ (80078a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	4904      	ldr	r1, [pc, #16]	@ (80078a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4313      	orrs	r3, r2
 800789a:	600b      	str	r3, [r1, #0]
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	40010400 	.word	0x40010400

080078ac <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80078b4:	4b06      	ldr	r3, [pc, #24]	@ (80078d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	43db      	mvns	r3, r3
 80078bc:	4904      	ldr	r1, [pc, #16]	@ (80078d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80078be:	4013      	ands	r3, r2
 80078c0:	600b      	str	r3, [r1, #0]
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40010400 	.word	0x40010400

080078d4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80078dc:	4b05      	ldr	r3, [pc, #20]	@ (80078f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	4904      	ldr	r1, [pc, #16]	@ (80078f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	604b      	str	r3, [r1, #4]

}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40010400 	.word	0x40010400

080078f8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007900:	4b06      	ldr	r3, [pc, #24]	@ (800791c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	43db      	mvns	r3, r3
 8007908:	4904      	ldr	r1, [pc, #16]	@ (800791c <LL_EXTI_DisableEvent_0_31+0x24>)
 800790a:	4013      	ands	r3, r2
 800790c:	604b      	str	r3, [r1, #4]
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010400 	.word	0x40010400

08007920 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007928:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	4904      	ldr	r1, [pc, #16]	@ (8007940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4313      	orrs	r3, r2
 8007932:	608b      	str	r3, [r1, #8]

}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40010400 	.word	0x40010400

08007944 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800794c:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	43db      	mvns	r3, r3
 8007954:	4904      	ldr	r1, [pc, #16]	@ (8007968 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007956:	4013      	ands	r3, r2
 8007958:	608b      	str	r3, [r1, #8]

}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40010400 	.word	0x40010400

0800796c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007974:	4b05      	ldr	r3, [pc, #20]	@ (800798c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	4904      	ldr	r1, [pc, #16]	@ (800798c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4313      	orrs	r3, r2
 800797e:	60cb      	str	r3, [r1, #12]
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	40010400 	.word	0x40010400

08007990 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007998:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	43db      	mvns	r3, r3
 80079a0:	4904      	ldr	r1, [pc, #16]	@ (80079b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	60cb      	str	r3, [r1, #12]
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010400 	.word	0x40010400

080079b8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80079c0:	4a04      	ldr	r2, [pc, #16]	@ (80079d4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6153      	str	r3, [r2, #20]
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010400 	.word	0x40010400

080079d8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d102      	bne.n	80079f4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	77fb      	strb	r3, [r7, #31]
 80079f2:	e0d1      	b.n	8007b98 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a02:	d102      	bne.n	8007a0a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e0c6      	b.n	8007b98 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d115      	bne.n	8007a42 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a24:	4b5f      	ldr	r3, [pc, #380]	@ (8007ba4 <HAL_COMP_Init+0x1cc>)
 8007a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a28:	4a5e      	ldr	r2, [pc, #376]	@ (8007ba4 <HAL_COMP_Init+0x1cc>)
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8007a30:	4b5c      	ldr	r3, [pc, #368]	@ (8007ba4 <HAL_COMP_Init+0x1cc>)
 8007a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	60bb      	str	r3, [r7, #8]
 8007a3a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7fc f991 	bl	8003d64 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a4c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	4b4b      	ldr	r3, [pc, #300]	@ (8007ba8 <HAL_COMP_Init+0x1d0>)
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	6979      	ldr	r1, [r7, #20]
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a8e:	d106      	bne.n	8007a9e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007a90:	4b46      	ldr	r3, [pc, #280]	@ (8007bac <HAL_COMP_Init+0x1d4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a45      	ldr	r2, [pc, #276]	@ (8007bac <HAL_COMP_Init+0x1d4>)
 8007a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	e005      	b.n	8007aaa <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007a9e:	4b43      	ldr	r3, [pc, #268]	@ (8007bac <HAL_COMP_Init+0x1d4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a42      	ldr	r2, [pc, #264]	@ (8007bac <HAL_COMP_Init+0x1d4>)
 8007aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007aa8:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d016      	beq.n	8007ae6 <HAL_COMP_Init+0x10e>
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d113      	bne.n	8007ae6 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007abe:	4b3c      	ldr	r3, [pc, #240]	@ (8007bb0 <HAL_COMP_Init+0x1d8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	099b      	lsrs	r3, r3, #6
 8007ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8007bb4 <HAL_COMP_Init+0x1dc>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	099b      	lsrs	r3, r3, #6
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007ad8:	e002      	b.n	8007ae0 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f9      	bne.n	8007ada <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a33      	ldr	r2, [pc, #204]	@ (8007bb8 <HAL_COMP_Init+0x1e0>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d102      	bne.n	8007af6 <HAL_COMP_Init+0x11e>
 8007af0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007af4:	e001      	b.n	8007afa <HAL_COMP_Init+0x122>
 8007af6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007afa:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d037      	beq.n	8007b78 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007b14:	6938      	ldr	r0, [r7, #16]
 8007b16:	f7ff ff03 	bl	8007920 <LL_EXTI_EnableRisingTrig_0_31>
 8007b1a:	e002      	b.n	8007b22 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007b1c:	6938      	ldr	r0, [r7, #16]
 8007b1e:	f7ff ff11 	bl	8007944 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007b2e:	6938      	ldr	r0, [r7, #16]
 8007b30:	f7ff ff1c 	bl	800796c <LL_EXTI_EnableFallingTrig_0_31>
 8007b34:	e002      	b.n	8007b3c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007b36:	6938      	ldr	r0, [r7, #16]
 8007b38:	f7ff ff2a 	bl	8007990 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007b3c:	6938      	ldr	r0, [r7, #16]
 8007b3e:	f7ff ff3b 	bl	80079b8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007b4e:	6938      	ldr	r0, [r7, #16]
 8007b50:	f7ff fec0 	bl	80078d4 <LL_EXTI_EnableEvent_0_31>
 8007b54:	e002      	b.n	8007b5c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007b56:	6938      	ldr	r0, [r7, #16]
 8007b58:	f7ff fece 	bl	80078f8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007b68:	6938      	ldr	r0, [r7, #16]
 8007b6a:	f7ff fe8d 	bl	8007888 <LL_EXTI_EnableIT_0_31>
 8007b6e:	e009      	b.n	8007b84 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007b70:	6938      	ldr	r0, [r7, #16]
 8007b72:	f7ff fe9b 	bl	80078ac <LL_EXTI_DisableIT_0_31>
 8007b76:	e005      	b.n	8007b84 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007b78:	6938      	ldr	r0, [r7, #16]
 8007b7a:	f7ff febd 	bl	80078f8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007b7e:	6938      	ldr	r0, [r7, #16]
 8007b80:	f7ff fe94 	bl	80078ac <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8007b98:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40021000 	.word	0x40021000
 8007ba8:	ff207d03 	.word	0xff207d03
 8007bac:	40010204 	.word	0x40010204
 8007bb0:	20000024 	.word	0x20000024
 8007bb4:	053e2d63 	.word	0x053e2d63
 8007bb8:	40010200 	.word	0x40010200

08007bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c00 <__NVIC_SetPriorityGrouping+0x44>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bee:	4a04      	ldr	r2, [pc, #16]	@ (8007c00 <__NVIC_SetPriorityGrouping+0x44>)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	60d3      	str	r3, [r2, #12]
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	e000ed00 	.word	0xe000ed00

08007c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c08:	4b04      	ldr	r3, [pc, #16]	@ (8007c1c <__NVIC_GetPriorityGrouping+0x18>)
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	0a1b      	lsrs	r3, r3, #8
 8007c0e:	f003 0307 	and.w	r3, r3, #7
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	e000ed00 	.word	0xe000ed00

08007c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db0b      	blt.n	8007c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	f003 021f 	and.w	r2, r3, #31
 8007c38:	4907      	ldr	r1, [pc, #28]	@ (8007c58 <__NVIC_EnableIRQ+0x38>)
 8007c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c3e:	095b      	lsrs	r3, r3, #5
 8007c40:	2001      	movs	r0, #1
 8007c42:	fa00 f202 	lsl.w	r2, r0, r2
 8007c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	e000e100 	.word	0xe000e100

08007c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	6039      	str	r1, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	db0a      	blt.n	8007c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	490c      	ldr	r1, [pc, #48]	@ (8007ca8 <__NVIC_SetPriority+0x4c>)
 8007c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c7a:	0112      	lsls	r2, r2, #4
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	440b      	add	r3, r1
 8007c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c84:	e00a      	b.n	8007c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	4908      	ldr	r1, [pc, #32]	@ (8007cac <__NVIC_SetPriority+0x50>)
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	3b04      	subs	r3, #4
 8007c94:	0112      	lsls	r2, r2, #4
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	440b      	add	r3, r1
 8007c9a:	761a      	strb	r2, [r3, #24]
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	e000e100 	.word	0xe000e100
 8007cac:	e000ed00 	.word	0xe000ed00

08007cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b089      	sub	sp, #36	@ 0x24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f1c3 0307 	rsb	r3, r3, #7
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	bf28      	it	cs
 8007cce:	2304      	movcs	r3, #4
 8007cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	2b06      	cmp	r3, #6
 8007cd8:	d902      	bls.n	8007ce0 <NVIC_EncodePriority+0x30>
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	3b03      	subs	r3, #3
 8007cde:	e000      	b.n	8007ce2 <NVIC_EncodePriority+0x32>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43da      	mvns	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007d02:	43d9      	mvns	r1, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d08:	4313      	orrs	r3, r2
         );
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3724      	adds	r7, #36	@ 0x24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d28:	d301      	bcc.n	8007d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e00f      	b.n	8007d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d58 <SysTick_Config+0x40>)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d36:	210f      	movs	r1, #15
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	f7ff ff8e 	bl	8007c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d40:	4b05      	ldr	r3, [pc, #20]	@ (8007d58 <SysTick_Config+0x40>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d46:	4b04      	ldr	r3, [pc, #16]	@ (8007d58 <SysTick_Config+0x40>)
 8007d48:	2207      	movs	r2, #7
 8007d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	e000e010 	.word	0xe000e010

08007d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ff29 	bl	8007bbc <__NVIC_SetPriorityGrouping>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	4603      	mov	r3, r0
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007d80:	2300      	movs	r3, #0
 8007d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d84:	f7ff ff3e 	bl	8007c04 <__NVIC_GetPriorityGrouping>
 8007d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	6978      	ldr	r0, [r7, #20]
 8007d90:	f7ff ff8e 	bl	8007cb0 <NVIC_EncodePriority>
 8007d94:	4602      	mov	r2, r0
 8007d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff ff5d 	bl	8007c5c <__NVIC_SetPriority>
}
 8007da2:	bf00      	nop
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	4603      	mov	r3, r0
 8007db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ff31 	bl	8007c20 <__NVIC_EnableIRQ>
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7ff ffa2 	bl	8007d18 <SysTick_Config>
 8007dd4:	4603      	mov	r3, r0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d101      	bne.n	8007dfe <HAL_DMA_Start_IT+0x20>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e066      	b.n	8007ecc <HAL_DMA_Start_IT+0xee>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d155      	bne.n	8007ebe <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2202      	movs	r2, #2
 8007e16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0201 	bic.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f84c 	bl	8007ed4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 020e 	orr.w	r2, r2, #14
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e00f      	b.n	8007e76 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0204 	bic.w	r2, r2, #4
 8007e64:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 020a 	orr.w	r2, r2, #10
 8007e74:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e92:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eaa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e005      	b.n	8007eca <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007eea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007efc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f02:	f003 021c 	and.w	r2, r3, #28
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	2b10      	cmp	r3, #16
 8007f20:	d108      	bne.n	8007f34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f32:	e007      	b.n	8007f44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	60da      	str	r2, [r3, #12]
}
 8007f44:	bf00      	nop
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f5e:	e166      	b.n	800822e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	2101      	movs	r1, #1
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 8158 	beq.w	8008228 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d005      	beq.n	8007f90 <HAL_GPIO_Init+0x40>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d130      	bne.n	8007ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	091b      	lsrs	r3, r3, #4
 8007fdc:	f003 0201 	and.w	r2, r3, #1
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d017      	beq.n	800802e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	2203      	movs	r2, #3
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	43db      	mvns	r3, r3
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4013      	ands	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	fa02 f303 	lsl.w	r3, r2, r3
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d123      	bne.n	8008082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	08da      	lsrs	r2, r3, #3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3208      	adds	r2, #8
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	220f      	movs	r2, #15
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	43db      	mvns	r3, r3
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4013      	ands	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	691a      	ldr	r2, [r3, #16]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	fa02 f303 	lsl.w	r3, r2, r3
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	08da      	lsrs	r2, r3, #3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3208      	adds	r2, #8
 800807c:	6939      	ldr	r1, [r7, #16]
 800807e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	2203      	movs	r2, #3
 800808e:	fa02 f303 	lsl.w	r3, r2, r3
 8008092:	43db      	mvns	r3, r3
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4013      	ands	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f003 0203 	and.w	r2, r3, #3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 80b2 	beq.w	8008228 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080c4:	4b61      	ldr	r3, [pc, #388]	@ (800824c <HAL_GPIO_Init+0x2fc>)
 80080c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080c8:	4a60      	ldr	r2, [pc, #384]	@ (800824c <HAL_GPIO_Init+0x2fc>)
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80080d0:	4b5e      	ldr	r3, [pc, #376]	@ (800824c <HAL_GPIO_Init+0x2fc>)
 80080d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	60bb      	str	r3, [r7, #8]
 80080da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80080dc:	4a5c      	ldr	r2, [pc, #368]	@ (8008250 <HAL_GPIO_Init+0x300>)
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	089b      	lsrs	r3, r3, #2
 80080e2:	3302      	adds	r3, #2
 80080e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	220f      	movs	r2, #15
 80080f4:	fa02 f303 	lsl.w	r3, r2, r3
 80080f8:	43db      	mvns	r3, r3
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4013      	ands	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008106:	d02b      	beq.n	8008160 <HAL_GPIO_Init+0x210>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a52      	ldr	r2, [pc, #328]	@ (8008254 <HAL_GPIO_Init+0x304>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d025      	beq.n	800815c <HAL_GPIO_Init+0x20c>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a51      	ldr	r2, [pc, #324]	@ (8008258 <HAL_GPIO_Init+0x308>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d01f      	beq.n	8008158 <HAL_GPIO_Init+0x208>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a50      	ldr	r2, [pc, #320]	@ (800825c <HAL_GPIO_Init+0x30c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d019      	beq.n	8008154 <HAL_GPIO_Init+0x204>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a4f      	ldr	r2, [pc, #316]	@ (8008260 <HAL_GPIO_Init+0x310>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d013      	beq.n	8008150 <HAL_GPIO_Init+0x200>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a4e      	ldr	r2, [pc, #312]	@ (8008264 <HAL_GPIO_Init+0x314>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00d      	beq.n	800814c <HAL_GPIO_Init+0x1fc>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a4d      	ldr	r2, [pc, #308]	@ (8008268 <HAL_GPIO_Init+0x318>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d007      	beq.n	8008148 <HAL_GPIO_Init+0x1f8>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a4c      	ldr	r2, [pc, #304]	@ (800826c <HAL_GPIO_Init+0x31c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d101      	bne.n	8008144 <HAL_GPIO_Init+0x1f4>
 8008140:	2307      	movs	r3, #7
 8008142:	e00e      	b.n	8008162 <HAL_GPIO_Init+0x212>
 8008144:	2308      	movs	r3, #8
 8008146:	e00c      	b.n	8008162 <HAL_GPIO_Init+0x212>
 8008148:	2306      	movs	r3, #6
 800814a:	e00a      	b.n	8008162 <HAL_GPIO_Init+0x212>
 800814c:	2305      	movs	r3, #5
 800814e:	e008      	b.n	8008162 <HAL_GPIO_Init+0x212>
 8008150:	2304      	movs	r3, #4
 8008152:	e006      	b.n	8008162 <HAL_GPIO_Init+0x212>
 8008154:	2303      	movs	r3, #3
 8008156:	e004      	b.n	8008162 <HAL_GPIO_Init+0x212>
 8008158:	2302      	movs	r3, #2
 800815a:	e002      	b.n	8008162 <HAL_GPIO_Init+0x212>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <HAL_GPIO_Init+0x212>
 8008160:	2300      	movs	r3, #0
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	f002 0203 	and.w	r2, r2, #3
 8008168:	0092      	lsls	r2, r2, #2
 800816a:	4093      	lsls	r3, r2
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	4313      	orrs	r3, r2
 8008170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008172:	4937      	ldr	r1, [pc, #220]	@ (8008250 <HAL_GPIO_Init+0x300>)
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	089b      	lsrs	r3, r3, #2
 8008178:	3302      	adds	r3, #2
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008180:	4b3b      	ldr	r3, [pc, #236]	@ (8008270 <HAL_GPIO_Init+0x320>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	43db      	mvns	r3, r3
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4013      	ands	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80081a4:	4a32      	ldr	r2, [pc, #200]	@ (8008270 <HAL_GPIO_Init+0x320>)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80081aa:	4b31      	ldr	r3, [pc, #196]	@ (8008270 <HAL_GPIO_Init+0x320>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	43db      	mvns	r3, r3
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4013      	ands	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80081ce:	4a28      	ldr	r2, [pc, #160]	@ (8008270 <HAL_GPIO_Init+0x320>)
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80081d4:	4b26      	ldr	r3, [pc, #152]	@ (8008270 <HAL_GPIO_Init+0x320>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	43db      	mvns	r3, r3
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4013      	ands	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008270 <HAL_GPIO_Init+0x320>)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80081fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008270 <HAL_GPIO_Init+0x320>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	43db      	mvns	r3, r3
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4013      	ands	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008222:	4a13      	ldr	r2, [pc, #76]	@ (8008270 <HAL_GPIO_Init+0x320>)
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	3301      	adds	r3, #1
 800822c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f ae91 	bne.w	8007f60 <HAL_GPIO_Init+0x10>
  }
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	40021000 	.word	0x40021000
 8008250:	40010000 	.word	0x40010000
 8008254:	48000400 	.word	0x48000400
 8008258:	48000800 	.word	0x48000800
 800825c:	48000c00 	.word	0x48000c00
 8008260:	48001000 	.word	0x48001000
 8008264:	48001400 	.word	0x48001400
 8008268:	48001800 	.word	0x48001800
 800826c:	48001c00 	.word	0x48001c00
 8008270:	40010400 	.word	0x40010400

08008274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	887b      	ldrh	r3, [r7, #2]
 8008286:	4013      	ands	r3, r2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e001      	b.n	8008296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	807b      	strh	r3, [r7, #2]
 80082b0:	4613      	mov	r3, r2
 80082b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80082b4:	787b      	ldrb	r3, [r7, #1]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80082ba:	887a      	ldrh	r2, [r7, #2]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80082c0:	e002      	b.n	80082c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80082c2:	887a      	ldrh	r2, [r7, #2]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80082de:	4b08      	ldr	r3, [pc, #32]	@ (8008300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	4013      	ands	r3, r2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d006      	beq.n	80082f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80082ea:	4a05      	ldr	r2, [pc, #20]	@ (8008300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80082f0:	88fb      	ldrh	r3, [r7, #6]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f806 	bl	8008304 <HAL_GPIO_EXTI_Callback>
  }
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	40010400 	.word	0x40010400

08008304 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e08d      	b.n	8008448 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d106      	bne.n	8008346 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7fb fd63 	bl	8003e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2224      	movs	r2, #36	@ 0x24
 800834a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 0201 	bic.w	r2, r2, #1
 800835c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800836a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800837a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d107      	bne.n	8008394 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008390:	609a      	str	r2, [r3, #8]
 8008392:	e006      	b.n	80083a2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80083a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d108      	bne.n	80083bc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	e007      	b.n	80083cc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	6812      	ldr	r2, [r2, #0]
 80083d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80083da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083de:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69d9      	ldr	r1, [r3, #28]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1a      	ldr	r2, [r3, #32]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f042 0201 	orr.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af02      	add	r7, sp, #8
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	607a      	str	r2, [r7, #4]
 800845a:	461a      	mov	r2, r3
 800845c:	460b      	mov	r3, r1
 800845e:	817b      	strh	r3, [r7, #10]
 8008460:	4613      	mov	r3, r2
 8008462:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b20      	cmp	r3, #32
 800846e:	f040 80fd 	bne.w	800866c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008478:	2b01      	cmp	r3, #1
 800847a:	d101      	bne.n	8008480 <HAL_I2C_Master_Transmit+0x30>
 800847c:	2302      	movs	r3, #2
 800847e:	e0f6      	b.n	800866e <HAL_I2C_Master_Transmit+0x21e>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008488:	f7fe faec 	bl	8006a64 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	2319      	movs	r3, #25
 8008494:	2201      	movs	r2, #1
 8008496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fa0a 	bl	80088b4 <I2C_WaitOnFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e0e1      	b.n	800866e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2221      	movs	r2, #33	@ 0x21
 80084ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2210      	movs	r2, #16
 80084b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	893a      	ldrh	r2, [r7, #8]
 80084ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2bff      	cmp	r3, #255	@ 0xff
 80084da:	d906      	bls.n	80084ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	22ff      	movs	r2, #255	@ 0xff
 80084e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80084e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e007      	b.n	80084fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80084f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80084f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d024      	beq.n	800854c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008536:	b2db      	uxtb	r3, r3
 8008538:	3301      	adds	r3, #1
 800853a:	b2da      	uxtb	r2, r3
 800853c:	8979      	ldrh	r1, [r7, #10]
 800853e:	4b4e      	ldr	r3, [pc, #312]	@ (8008678 <HAL_I2C_Master_Transmit+0x228>)
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fbf1 	bl	8008d2c <I2C_TransferConfig>
 800854a:	e066      	b.n	800861a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008550:	b2da      	uxtb	r2, r3
 8008552:	8979      	ldrh	r1, [r7, #10]
 8008554:	4b48      	ldr	r3, [pc, #288]	@ (8008678 <HAL_I2C_Master_Transmit+0x228>)
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fbe6 	bl	8008d2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008560:	e05b      	b.n	800861a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	6a39      	ldr	r1, [r7, #32]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 f9f3 	bl	8008952 <I2C_WaitOnTXISFlagUntilTimeout>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e07b      	b.n	800866e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857a:	781a      	ldrb	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800859e:	3b01      	subs	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d034      	beq.n	800861a <HAL_I2C_Master_Transmit+0x1ca>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d130      	bne.n	800861a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	2200      	movs	r2, #0
 80085c0:	2180      	movs	r1, #128	@ 0x80
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f976 	bl	80088b4 <I2C_WaitOnFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e04d      	b.n	800866e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	2bff      	cmp	r3, #255	@ 0xff
 80085da:	d90e      	bls.n	80085fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	22ff      	movs	r2, #255	@ 0xff
 80085e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	8979      	ldrh	r1, [r7, #10]
 80085ea:	2300      	movs	r3, #0
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 fb9a 	bl	8008d2c <I2C_TransferConfig>
 80085f8:	e00f      	b.n	800861a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008608:	b2da      	uxtb	r2, r3
 800860a:	8979      	ldrh	r1, [r7, #10]
 800860c:	2300      	movs	r3, #0
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fb89 	bl	8008d2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d19e      	bne.n	8008562 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	6a39      	ldr	r1, [r7, #32]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 f9d9 	bl	80089e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e01a      	b.n	800866e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2220      	movs	r2, #32
 800863e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6859      	ldr	r1, [r3, #4]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	4b0c      	ldr	r3, [pc, #48]	@ (800867c <HAL_I2C_Master_Transmit+0x22c>)
 800864c:	400b      	ands	r3, r1
 800864e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	e000      	b.n	800866e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800866c:	2302      	movs	r3, #2
  }
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	80002000 	.word	0x80002000
 800867c:	fe00e800 	.word	0xfe00e800

08008680 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	607a      	str	r2, [r7, #4]
 800868a:	461a      	mov	r2, r3
 800868c:	460b      	mov	r3, r1
 800868e:	817b      	strh	r3, [r7, #10]
 8008690:	4613      	mov	r3, r2
 8008692:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b20      	cmp	r3, #32
 800869e:	f040 80db 	bne.w	8008858 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_I2C_Master_Receive+0x30>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e0d4      	b.n	800885a <HAL_I2C_Master_Receive+0x1da>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80086b8:	f7fe f9d4 	bl	8006a64 <HAL_GetTick>
 80086bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	2319      	movs	r3, #25
 80086c4:	2201      	movs	r2, #1
 80086c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 f8f2 	bl	80088b4 <I2C_WaitOnFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e0bf      	b.n	800885a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2222      	movs	r2, #34	@ 0x22
 80086de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2210      	movs	r2, #16
 80086e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	893a      	ldrh	r2, [r7, #8]
 80086fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008706:	b29b      	uxth	r3, r3
 8008708:	2bff      	cmp	r3, #255	@ 0xff
 800870a:	d90e      	bls.n	800872a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	22ff      	movs	r2, #255	@ 0xff
 8008710:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008716:	b2da      	uxtb	r2, r3
 8008718:	8979      	ldrh	r1, [r7, #10]
 800871a:	4b52      	ldr	r3, [pc, #328]	@ (8008864 <HAL_I2C_Master_Receive+0x1e4>)
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fb02 	bl	8008d2c <I2C_TransferConfig>
 8008728:	e06d      	b.n	8008806 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008738:	b2da      	uxtb	r2, r3
 800873a:	8979      	ldrh	r1, [r7, #10]
 800873c:	4b49      	ldr	r3, [pc, #292]	@ (8008864 <HAL_I2C_Master_Receive+0x1e4>)
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 faf1 	bl	8008d2c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800874a:	e05c      	b.n	8008806 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	6a39      	ldr	r1, [r7, #32]
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 f989 	bl	8008a68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e07c      	b.n	800885a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008788:	b29b      	uxth	r3, r3
 800878a:	3b01      	subs	r3, #1
 800878c:	b29a      	uxth	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008796:	b29b      	uxth	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d034      	beq.n	8008806 <HAL_I2C_Master_Receive+0x186>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d130      	bne.n	8008806 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	2200      	movs	r2, #0
 80087ac:	2180      	movs	r1, #128	@ 0x80
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f880 	bl	80088b4 <I2C_WaitOnFlagUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e04d      	b.n	800885a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	2bff      	cmp	r3, #255	@ 0xff
 80087c6:	d90e      	bls.n	80087e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	22ff      	movs	r2, #255	@ 0xff
 80087cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	8979      	ldrh	r1, [r7, #10]
 80087d6:	2300      	movs	r3, #0
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 faa4 	bl	8008d2c <I2C_TransferConfig>
 80087e4:	e00f      	b.n	8008806 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	8979      	ldrh	r1, [r7, #10]
 80087f8:	2300      	movs	r3, #0
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 fa93 	bl	8008d2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d19d      	bne.n	800874c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	6a39      	ldr	r1, [r7, #32]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f8e3 	bl	80089e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e01a      	b.n	800885a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2220      	movs	r2, #32
 800882a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6859      	ldr	r1, [r3, #4]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b0c      	ldr	r3, [pc, #48]	@ (8008868 <HAL_I2C_Master_Receive+0x1e8>)
 8008838:	400b      	ands	r3, r1
 800883a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2220      	movs	r2, #32
 8008840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	e000      	b.n	800885a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008858:	2302      	movs	r3, #2
  }
}
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	80002400 	.word	0x80002400
 8008868:	fe00e800 	.word	0xfe00e800

0800886c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b02      	cmp	r3, #2
 8008880:	d103      	bne.n	800888a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2200      	movs	r2, #0
 8008888:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	2b01      	cmp	r3, #1
 8008896:	d007      	beq.n	80088a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699a      	ldr	r2, [r3, #24]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0201 	orr.w	r2, r2, #1
 80088a6:	619a      	str	r2, [r3, #24]
  }
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	4613      	mov	r3, r2
 80088c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088c4:	e031      	b.n	800892a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d02d      	beq.n	800892a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ce:	f7fe f8c9 	bl	8006a64 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d302      	bcc.n	80088e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d122      	bne.n	800892a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4013      	ands	r3, r2
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	bf0c      	ite	eq
 80088f4:	2301      	moveq	r3, #1
 80088f6:	2300      	movne	r3, #0
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	461a      	mov	r2, r3
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d113      	bne.n	800892a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008906:	f043 0220 	orr.w	r2, r3, #32
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e00f      	b.n	800894a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4013      	ands	r3, r2
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	429a      	cmp	r2, r3
 8008938:	bf0c      	ite	eq
 800893a:	2301      	moveq	r3, #1
 800893c:	2300      	movne	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	429a      	cmp	r2, r3
 8008946:	d0be      	beq.n	80088c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800895e:	e033      	b.n	80089c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f901 	bl	8008b6c <I2C_IsErrorOccurred>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e031      	b.n	80089d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d025      	beq.n	80089c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800897c:	f7fe f872 	bl	8006a64 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	429a      	cmp	r2, r3
 800898a:	d302      	bcc.n	8008992 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d11a      	bne.n	80089c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b02      	cmp	r3, #2
 800899e:	d013      	beq.n	80089c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a4:	f043 0220 	orr.w	r2, r3, #32
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e007      	b.n	80089d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d1c4      	bne.n	8008960 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089ec:	e02f      	b.n	8008a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f8ba 	bl	8008b6c <I2C_IsErrorOccurred>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e02d      	b.n	8008a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a02:	f7fe f82f 	bl	8006a64 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d302      	bcc.n	8008a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d11a      	bne.n	8008a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	d013      	beq.n	8008a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a2a:	f043 0220 	orr.w	r2, r3, #32
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e007      	b.n	8008a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d1c8      	bne.n	80089ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a74:	e06b      	b.n	8008b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 f876 	bl	8008b6c <I2C_IsErrorOccurred>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e069      	b.n	8008b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	d138      	bne.n	8008b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d105      	bne.n	8008ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e055      	b.n	8008b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b10      	cmp	r3, #16
 8008abe:	d107      	bne.n	8008ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2210      	movs	r2, #16
 8008ac6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2204      	movs	r2, #4
 8008acc:	645a      	str	r2, [r3, #68]	@ 0x44
 8008ace:	e002      	b.n	8008ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2220      	movs	r2, #32
 8008adc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6859      	ldr	r1, [r3, #4]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8008b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008aea:	400b      	ands	r3, r1
 8008aec:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e029      	b.n	8008b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b0a:	f7fd ffab 	bl	8006a64 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d302      	bcc.n	8008b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d116      	bne.n	8008b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d00f      	beq.n	8008b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b32:	f043 0220 	orr.w	r2, r3, #32
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e007      	b.n	8008b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d18c      	bne.n	8008a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	fe00e800 	.word	0xfe00e800

08008b6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08a      	sub	sp, #40	@ 0x28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d068      	beq.n	8008c6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2210      	movs	r2, #16
 8008b9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ba0:	e049      	b.n	8008c36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba8:	d045      	beq.n	8008c36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008baa:	f7fd ff5b 	bl	8006a64 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d302      	bcc.n	8008bc0 <I2C_IsErrorOccurred+0x54>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d13a      	bne.n	8008c36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008be2:	d121      	bne.n	8008c28 <I2C_IsErrorOccurred+0xbc>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bea:	d01d      	beq.n	8008c28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008bec:	7cfb      	ldrb	r3, [r7, #19]
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	d01a      	beq.n	8008c28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008c02:	f7fd ff2f 	bl	8006a64 <HAL_GetTick>
 8008c06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c08:	e00e      	b.n	8008c28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008c0a:	f7fd ff2b 	bl	8006a64 <HAL_GetTick>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	2b19      	cmp	r3, #25
 8008c16:	d907      	bls.n	8008c28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	f043 0320 	orr.w	r3, r3, #32
 8008c1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008c26:	e006      	b.n	8008c36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f003 0320 	and.w	r3, r3, #32
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	d1e9      	bne.n	8008c0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	f003 0320 	and.w	r3, r3, #32
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d003      	beq.n	8008c4c <I2C_IsErrorOccurred+0xe0>
 8008c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d0aa      	beq.n	8008ba2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d103      	bne.n	8008c5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	f043 0304 	orr.w	r3, r3, #4
 8008c62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	f043 0301 	orr.w	r3, r3, #1
 8008c82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00b      	beq.n	8008cb6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	f043 0308 	orr.w	r3, r3, #8
 8008ca4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008cae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00b      	beq.n	8008cd8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	f043 0302 	orr.w	r3, r3, #2
 8008cc6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d01c      	beq.n	8008d1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff fdc3 	bl	800886c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6859      	ldr	r1, [r3, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8008d28 <I2C_IsErrorOccurred+0x1bc>)
 8008cf2:	400b      	ands	r3, r1
 8008cf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3728      	adds	r7, #40	@ 0x28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	fe00e800 	.word	0xfe00e800

08008d2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	607b      	str	r3, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	817b      	strh	r3, [r7, #10]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d3e:	897b      	ldrh	r3, [r7, #10]
 8008d40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d44:	7a7b      	ldrb	r3, [r7, #9]
 8008d46:	041b      	lsls	r3, r3, #16
 8008d48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	0d5b      	lsrs	r3, r3, #21
 8008d66:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008d6a:	4b08      	ldr	r3, [pc, #32]	@ (8008d8c <I2C_TransferConfig+0x60>)
 8008d6c:	430b      	orrs	r3, r1
 8008d6e:	43db      	mvns	r3, r3
 8008d70:	ea02 0103 	and.w	r1, r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	03ff63ff 	.word	0x03ff63ff

08008d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	d138      	bne.n	8008e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008db0:	2302      	movs	r3, #2
 8008db2:	e032      	b.n	8008e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2224      	movs	r2, #36	@ 0x24
 8008dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0201 	bic.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6819      	ldr	r1, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0201 	orr.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	e000      	b.n	8008e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e18:	2302      	movs	r3, #2
  }
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d139      	bne.n	8008eb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e033      	b.n	8008eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2224      	movs	r2, #36	@ 0x24
 8008e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0201 	bic.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008e78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	e000      	b.n	8008eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008eb0:	2302      	movs	r3, #2
  }
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
	...

08008ec0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ec4:	4b05      	ldr	r3, [pc, #20]	@ (8008edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a04      	ldr	r2, [pc, #16]	@ (8008edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ece:	6013      	str	r3, [r2, #0]
}
 8008ed0:	bf00      	nop
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	40007000 	.word	0x40007000

08008ee0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ef0:	d102      	bne.n	8008ef8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ef6:	e00b      	b.n	8008f10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008ef8:	4b08      	ldr	r3, [pc, #32]	@ (8008f1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8008efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f06:	d102      	bne.n	8008f0e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f0c:	e000      	b.n	8008f10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8008f0e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	40007000 	.word	0x40007000

08008f20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d141      	bne.n	8008fb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f3a:	d131      	bne.n	8008fa0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f3c:	4b47      	ldr	r3, [pc, #284]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f42:	4a46      	ldr	r2, [pc, #280]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f4c:	4b43      	ldr	r3, [pc, #268]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f54:	4a41      	ldr	r2, [pc, #260]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f5c:	4b40      	ldr	r3, [pc, #256]	@ (8009060 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2232      	movs	r2, #50	@ 0x32
 8008f62:	fb02 f303 	mul.w	r3, r2, r3
 8008f66:	4a3f      	ldr	r2, [pc, #252]	@ (8009064 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f68:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6c:	0c9b      	lsrs	r3, r3, #18
 8008f6e:	3301      	adds	r3, #1
 8008f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f72:	e002      	b.n	8008f7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f7a:	4b38      	ldr	r3, [pc, #224]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f86:	d102      	bne.n	8008f8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1f2      	bne.n	8008f74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f8e:	4b33      	ldr	r3, [pc, #204]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f9a:	d158      	bne.n	800904e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e057      	b.n	8009050 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008fb0:	e04d      	b.n	800904e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb8:	d141      	bne.n	800903e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008fba:	4b28      	ldr	r3, [pc, #160]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc6:	d131      	bne.n	800902c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fc8:	4b24      	ldr	r3, [pc, #144]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fce:	4a23      	ldr	r2, [pc, #140]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fd8:	4b20      	ldr	r3, [pc, #128]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8009060 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2232      	movs	r2, #50	@ 0x32
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
 8008ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8009064 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff8:	0c9b      	lsrs	r3, r3, #18
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ffe:	e002      	b.n	8009006 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3b01      	subs	r3, #1
 8009004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009006:	4b15      	ldr	r3, [pc, #84]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800900e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009012:	d102      	bne.n	800901a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f2      	bne.n	8009000 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800901a:	4b10      	ldr	r3, [pc, #64]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009026:	d112      	bne.n	800904e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e011      	b.n	8009050 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800902c:	4b0b      	ldr	r3, [pc, #44]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800902e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009032:	4a0a      	ldr	r2, [pc, #40]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800903c:	e007      	b.n	800904e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800903e:	4b07      	ldr	r3, [pc, #28]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009046:	4a05      	ldr	r2, [pc, #20]	@ (800905c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009048:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800904c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	40007000 	.word	0x40007000
 8009060:	20000024 	.word	0x20000024
 8009064:	431bde83 	.word	0x431bde83

08009068 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800906c:	4b05      	ldr	r3, [pc, #20]	@ (8009084 <HAL_PWREx_EnableVddIO2+0x1c>)
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	4a04      	ldr	r2, [pc, #16]	@ (8009084 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009076:	6053      	str	r3, [r2, #4]
}
 8009078:	bf00      	nop
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40007000 	.word	0x40007000

08009088 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d102      	bne.n	800909c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	f000 bc08 	b.w	80098ac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800909c:	4b96      	ldr	r3, [pc, #600]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 030c 	and.w	r3, r3, #12
 80090a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090a6:	4b94      	ldr	r3, [pc, #592]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f003 0303 	and.w	r3, r3, #3
 80090ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0310 	and.w	r3, r3, #16
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 80e4 	beq.w	8009286 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d007      	beq.n	80090d4 <HAL_RCC_OscConfig+0x4c>
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2b0c      	cmp	r3, #12
 80090c8:	f040 808b 	bne.w	80091e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	f040 8087 	bne.w	80091e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80090d4:	4b88      	ldr	r3, [pc, #544]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <HAL_RCC_OscConfig+0x64>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e3df      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a1a      	ldr	r2, [r3, #32]
 80090f0:	4b81      	ldr	r3, [pc, #516]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <HAL_RCC_OscConfig+0x7e>
 80090fc:	4b7e      	ldr	r3, [pc, #504]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009104:	e005      	b.n	8009112 <HAL_RCC_OscConfig+0x8a>
 8009106:	4b7c      	ldr	r3, [pc, #496]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800910c:	091b      	lsrs	r3, r3, #4
 800910e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009112:	4293      	cmp	r3, r2
 8009114:	d223      	bcs.n	800915e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fdcc 	bl	8009cb8 <RCC_SetFlashLatencyFromMSIRange>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e3c0      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800912a:	4b73      	ldr	r3, [pc, #460]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a72      	ldr	r2, [pc, #456]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009130:	f043 0308 	orr.w	r3, r3, #8
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	4b70      	ldr	r3, [pc, #448]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	496d      	ldr	r1, [pc, #436]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009144:	4313      	orrs	r3, r2
 8009146:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009148:	4b6b      	ldr	r3, [pc, #428]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	021b      	lsls	r3, r3, #8
 8009156:	4968      	ldr	r1, [pc, #416]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009158:	4313      	orrs	r3, r2
 800915a:	604b      	str	r3, [r1, #4]
 800915c:	e025      	b.n	80091aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800915e:	4b66      	ldr	r3, [pc, #408]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a65      	ldr	r2, [pc, #404]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009164:	f043 0308 	orr.w	r3, r3, #8
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	4b63      	ldr	r3, [pc, #396]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	4960      	ldr	r1, [pc, #384]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009178:	4313      	orrs	r3, r2
 800917a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800917c:	4b5e      	ldr	r3, [pc, #376]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	495b      	ldr	r1, [pc, #364]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800918c:	4313      	orrs	r3, r2
 800918e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 fd8c 	bl	8009cb8 <RCC_SetFlashLatencyFromMSIRange>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e380      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80091aa:	f000 fcc1 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 80091ae:	4602      	mov	r2, r0
 80091b0:	4b51      	ldr	r3, [pc, #324]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	091b      	lsrs	r3, r3, #4
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	4950      	ldr	r1, [pc, #320]	@ (80092fc <HAL_RCC_OscConfig+0x274>)
 80091bc:	5ccb      	ldrb	r3, [r1, r3]
 80091be:	f003 031f 	and.w	r3, r3, #31
 80091c2:	fa22 f303 	lsr.w	r3, r2, r3
 80091c6:	4a4e      	ldr	r2, [pc, #312]	@ (8009300 <HAL_RCC_OscConfig+0x278>)
 80091c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80091ca:	4b4e      	ldr	r3, [pc, #312]	@ (8009304 <HAL_RCC_OscConfig+0x27c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fd fbf8 	bl	80069c4 <HAL_InitTick>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d052      	beq.n	8009284 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	e364      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d032      	beq.n	8009250 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80091ea:	4b43      	ldr	r3, [pc, #268]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a42      	ldr	r2, [pc, #264]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80091f0:	f043 0301 	orr.w	r3, r3, #1
 80091f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80091f6:	f7fd fc35 	bl	8006a64 <HAL_GetTick>
 80091fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80091fc:	e008      	b.n	8009210 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80091fe:	f7fd fc31 	bl	8006a64 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	2b02      	cmp	r3, #2
 800920a:	d901      	bls.n	8009210 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e34d      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009210:	4b39      	ldr	r3, [pc, #228]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0f0      	beq.n	80091fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800921c:	4b36      	ldr	r3, [pc, #216]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a35      	ldr	r2, [pc, #212]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009222:	f043 0308 	orr.w	r3, r3, #8
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	4b33      	ldr	r3, [pc, #204]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	4930      	ldr	r1, [pc, #192]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009236:	4313      	orrs	r3, r2
 8009238:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800923a:	4b2f      	ldr	r3, [pc, #188]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	492b      	ldr	r1, [pc, #172]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 800924a:	4313      	orrs	r3, r2
 800924c:	604b      	str	r3, [r1, #4]
 800924e:	e01a      	b.n	8009286 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009250:	4b29      	ldr	r3, [pc, #164]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a28      	ldr	r2, [pc, #160]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009256:	f023 0301 	bic.w	r3, r3, #1
 800925a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800925c:	f7fd fc02 	bl	8006a64 <HAL_GetTick>
 8009260:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009262:	e008      	b.n	8009276 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009264:	f7fd fbfe 	bl	8006a64 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	2b02      	cmp	r3, #2
 8009270:	d901      	bls.n	8009276 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e31a      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009276:	4b20      	ldr	r3, [pc, #128]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f0      	bne.n	8009264 <HAL_RCC_OscConfig+0x1dc>
 8009282:	e000      	b.n	8009286 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009284:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d073      	beq.n	800937a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b08      	cmp	r3, #8
 8009296:	d005      	beq.n	80092a4 <HAL_RCC_OscConfig+0x21c>
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b0c      	cmp	r3, #12
 800929c:	d10e      	bne.n	80092bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d10b      	bne.n	80092bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a4:	4b14      	ldr	r3, [pc, #80]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d063      	beq.n	8009378 <HAL_RCC_OscConfig+0x2f0>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d15f      	bne.n	8009378 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e2f7      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092c4:	d106      	bne.n	80092d4 <HAL_RCC_OscConfig+0x24c>
 80092c6:	4b0c      	ldr	r3, [pc, #48]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a0b      	ldr	r2, [pc, #44]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80092cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	e025      	b.n	8009320 <HAL_RCC_OscConfig+0x298>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092dc:	d114      	bne.n	8009308 <HAL_RCC_OscConfig+0x280>
 80092de:	4b06      	ldr	r3, [pc, #24]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a05      	ldr	r2, [pc, #20]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80092e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	4b03      	ldr	r3, [pc, #12]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a02      	ldr	r2, [pc, #8]	@ (80092f8 <HAL_RCC_OscConfig+0x270>)
 80092f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	e013      	b.n	8009320 <HAL_RCC_OscConfig+0x298>
 80092f8:	40021000 	.word	0x40021000
 80092fc:	0801804c 	.word	0x0801804c
 8009300:	20000024 	.word	0x20000024
 8009304:	20000028 	.word	0x20000028
 8009308:	4ba0      	ldr	r3, [pc, #640]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a9f      	ldr	r2, [pc, #636]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800930e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	4b9d      	ldr	r3, [pc, #628]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a9c      	ldr	r2, [pc, #624]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800931a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800931e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d013      	beq.n	8009350 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009328:	f7fd fb9c 	bl	8006a64 <HAL_GetTick>
 800932c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009330:	f7fd fb98 	bl	8006a64 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b64      	cmp	r3, #100	@ 0x64
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e2b4      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009342:	4b92      	ldr	r3, [pc, #584]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0f0      	beq.n	8009330 <HAL_RCC_OscConfig+0x2a8>
 800934e:	e014      	b.n	800937a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009350:	f7fd fb88 	bl	8006a64 <HAL_GetTick>
 8009354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009356:	e008      	b.n	800936a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009358:	f7fd fb84 	bl	8006a64 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b64      	cmp	r3, #100	@ 0x64
 8009364:	d901      	bls.n	800936a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e2a0      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800936a:	4b88      	ldr	r3, [pc, #544]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f0      	bne.n	8009358 <HAL_RCC_OscConfig+0x2d0>
 8009376:	e000      	b.n	800937a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d060      	beq.n	8009448 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b04      	cmp	r3, #4
 800938a:	d005      	beq.n	8009398 <HAL_RCC_OscConfig+0x310>
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	2b0c      	cmp	r3, #12
 8009390:	d119      	bne.n	80093c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d116      	bne.n	80093c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009398:	4b7c      	ldr	r3, [pc, #496]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <HAL_RCC_OscConfig+0x328>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e27d      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093b0:	4b76      	ldr	r3, [pc, #472]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	061b      	lsls	r3, r3, #24
 80093be:	4973      	ldr	r1, [pc, #460]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093c4:	e040      	b.n	8009448 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d023      	beq.n	8009416 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093ce:	4b6f      	ldr	r3, [pc, #444]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a6e      	ldr	r2, [pc, #440]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80093d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093da:	f7fd fb43 	bl	8006a64 <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093e0:	e008      	b.n	80093f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093e2:	f7fd fb3f 	bl	8006a64 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d901      	bls.n	80093f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e25b      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093f4:	4b65      	ldr	r3, [pc, #404]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0f0      	beq.n	80093e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009400:	4b62      	ldr	r3, [pc, #392]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	061b      	lsls	r3, r3, #24
 800940e:	495f      	ldr	r1, [pc, #380]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009410:	4313      	orrs	r3, r2
 8009412:	604b      	str	r3, [r1, #4]
 8009414:	e018      	b.n	8009448 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009416:	4b5d      	ldr	r3, [pc, #372]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a5c      	ldr	r2, [pc, #368]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800941c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009422:	f7fd fb1f 	bl	8006a64 <HAL_GetTick>
 8009426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009428:	e008      	b.n	800943c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800942a:	f7fd fb1b 	bl	8006a64 <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d901      	bls.n	800943c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e237      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800943c:	4b53      	ldr	r3, [pc, #332]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1f0      	bne.n	800942a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d03c      	beq.n	80094ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01c      	beq.n	8009496 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800945c:	4b4b      	ldr	r3, [pc, #300]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800945e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009462:	4a4a      	ldr	r2, [pc, #296]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009464:	f043 0301 	orr.w	r3, r3, #1
 8009468:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800946c:	f7fd fafa 	bl	8006a64 <HAL_GetTick>
 8009470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009472:	e008      	b.n	8009486 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009474:	f7fd faf6 	bl	8006a64 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d901      	bls.n	8009486 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e212      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009486:	4b41      	ldr	r3, [pc, #260]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0ef      	beq.n	8009474 <HAL_RCC_OscConfig+0x3ec>
 8009494:	e01b      	b.n	80094ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009496:	4b3d      	ldr	r3, [pc, #244]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800949c:	4a3b      	ldr	r2, [pc, #236]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800949e:	f023 0301 	bic.w	r3, r3, #1
 80094a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094a6:	f7fd fadd 	bl	8006a64 <HAL_GetTick>
 80094aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094ac:	e008      	b.n	80094c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094ae:	f7fd fad9 	bl	8006a64 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d901      	bls.n	80094c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e1f5      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094c0:	4b32      	ldr	r3, [pc, #200]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80094c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094c6:	f003 0302 	and.w	r3, r3, #2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1ef      	bne.n	80094ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0304 	and.w	r3, r3, #4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80a6 	beq.w	8009628 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094dc:	2300      	movs	r3, #0
 80094de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80094e0:	4b2a      	ldr	r3, [pc, #168]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80094e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10d      	bne.n	8009508 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094ec:	4b27      	ldr	r3, [pc, #156]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80094ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f0:	4a26      	ldr	r2, [pc, #152]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80094f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80094f8:	4b24      	ldr	r3, [pc, #144]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 80094fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009500:	60bb      	str	r3, [r7, #8]
 8009502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009504:	2301      	movs	r3, #1
 8009506:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009508:	4b21      	ldr	r3, [pc, #132]	@ (8009590 <HAL_RCC_OscConfig+0x508>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d118      	bne.n	8009546 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009514:	4b1e      	ldr	r3, [pc, #120]	@ (8009590 <HAL_RCC_OscConfig+0x508>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <HAL_RCC_OscConfig+0x508>)
 800951a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800951e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009520:	f7fd faa0 	bl	8006a64 <HAL_GetTick>
 8009524:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009526:	e008      	b.n	800953a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009528:	f7fd fa9c 	bl	8006a64 <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	2b02      	cmp	r3, #2
 8009534:	d901      	bls.n	800953a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e1b8      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800953a:	4b15      	ldr	r3, [pc, #84]	@ (8009590 <HAL_RCC_OscConfig+0x508>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0f0      	beq.n	8009528 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d108      	bne.n	8009560 <HAL_RCC_OscConfig+0x4d8>
 800954e:	4b0f      	ldr	r3, [pc, #60]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009554:	4a0d      	ldr	r2, [pc, #52]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800955e:	e029      	b.n	80095b4 <HAL_RCC_OscConfig+0x52c>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	2b05      	cmp	r3, #5
 8009566:	d115      	bne.n	8009594 <HAL_RCC_OscConfig+0x50c>
 8009568:	4b08      	ldr	r3, [pc, #32]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800956a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956e:	4a07      	ldr	r2, [pc, #28]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009570:	f043 0304 	orr.w	r3, r3, #4
 8009574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009578:	4b04      	ldr	r3, [pc, #16]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 800957a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800957e:	4a03      	ldr	r2, [pc, #12]	@ (800958c <HAL_RCC_OscConfig+0x504>)
 8009580:	f043 0301 	orr.w	r3, r3, #1
 8009584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009588:	e014      	b.n	80095b4 <HAL_RCC_OscConfig+0x52c>
 800958a:	bf00      	nop
 800958c:	40021000 	.word	0x40021000
 8009590:	40007000 	.word	0x40007000
 8009594:	4b9d      	ldr	r3, [pc, #628]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959a:	4a9c      	ldr	r2, [pc, #624]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 800959c:	f023 0301 	bic.w	r3, r3, #1
 80095a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80095a4:	4b99      	ldr	r3, [pc, #612]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80095a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095aa:	4a98      	ldr	r2, [pc, #608]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80095ac:	f023 0304 	bic.w	r3, r3, #4
 80095b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d016      	beq.n	80095ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095bc:	f7fd fa52 	bl	8006a64 <HAL_GetTick>
 80095c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095c2:	e00a      	b.n	80095da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095c4:	f7fd fa4e 	bl	8006a64 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d901      	bls.n	80095da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e168      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095da:	4b8c      	ldr	r3, [pc, #560]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80095dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0ed      	beq.n	80095c4 <HAL_RCC_OscConfig+0x53c>
 80095e8:	e015      	b.n	8009616 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ea:	f7fd fa3b 	bl	8006a64 <HAL_GetTick>
 80095ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80095f0:	e00a      	b.n	8009608 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095f2:	f7fd fa37 	bl	8006a64 <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009600:	4293      	cmp	r3, r2
 8009602:	d901      	bls.n	8009608 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e151      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009608:	4b80      	ldr	r3, [pc, #512]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 800960a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1ed      	bne.n	80095f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009616:	7ffb      	ldrb	r3, [r7, #31]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d105      	bne.n	8009628 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800961c:	4b7b      	ldr	r3, [pc, #492]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 800961e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009620:	4a7a      	ldr	r2, [pc, #488]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009626:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d03c      	beq.n	80096ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	d01c      	beq.n	8009676 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800963c:	4b73      	ldr	r3, [pc, #460]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 800963e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009642:	4a72      	ldr	r2, [pc, #456]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800964c:	f7fd fa0a 	bl	8006a64 <HAL_GetTick>
 8009650:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009652:	e008      	b.n	8009666 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009654:	f7fd fa06 	bl	8006a64 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d901      	bls.n	8009666 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e122      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009666:	4b69      	ldr	r3, [pc, #420]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009668:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0ef      	beq.n	8009654 <HAL_RCC_OscConfig+0x5cc>
 8009674:	e01b      	b.n	80096ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009676:	4b65      	ldr	r3, [pc, #404]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009678:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800967c:	4a63      	ldr	r2, [pc, #396]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 800967e:	f023 0301 	bic.w	r3, r3, #1
 8009682:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009686:	f7fd f9ed 	bl	8006a64 <HAL_GetTick>
 800968a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800968c:	e008      	b.n	80096a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800968e:	f7fd f9e9 	bl	8006a64 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	d901      	bls.n	80096a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e105      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096a0:	4b5a      	ldr	r3, [pc, #360]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80096a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1ef      	bne.n	800968e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80f9 	beq.w	80098aa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	2b02      	cmp	r3, #2
 80096be:	f040 80cf 	bne.w	8009860 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80096c2:	4b52      	ldr	r3, [pc, #328]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f003 0203 	and.w	r2, r3, #3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d12c      	bne.n	8009730 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e0:	3b01      	subs	r3, #1
 80096e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d123      	bne.n	8009730 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d11b      	bne.n	8009730 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009702:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009704:	429a      	cmp	r2, r3
 8009706:	d113      	bne.n	8009730 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009712:	085b      	lsrs	r3, r3, #1
 8009714:	3b01      	subs	r3, #1
 8009716:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009718:	429a      	cmp	r2, r3
 800971a:	d109      	bne.n	8009730 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009726:	085b      	lsrs	r3, r3, #1
 8009728:	3b01      	subs	r3, #1
 800972a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800972c:	429a      	cmp	r2, r3
 800972e:	d071      	beq.n	8009814 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2b0c      	cmp	r3, #12
 8009734:	d068      	beq.n	8009808 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009736:	4b35      	ldr	r3, [pc, #212]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009742:	4b32      	ldr	r3, [pc, #200]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e0ac      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009752:	4b2e      	ldr	r3, [pc, #184]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a2d      	ldr	r2, [pc, #180]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009758:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800975c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800975e:	f7fd f981 	bl	8006a64 <HAL_GetTick>
 8009762:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009764:	e008      	b.n	8009778 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009766:	f7fd f97d 	bl	8006a64 <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	2b02      	cmp	r3, #2
 8009772:	d901      	bls.n	8009778 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e099      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009778:	4b24      	ldr	r3, [pc, #144]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1f0      	bne.n	8009766 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009784:	4b21      	ldr	r3, [pc, #132]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	4b21      	ldr	r3, [pc, #132]	@ (8009810 <HAL_RCC_OscConfig+0x788>)
 800978a:	4013      	ands	r3, r2
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009794:	3a01      	subs	r2, #1
 8009796:	0112      	lsls	r2, r2, #4
 8009798:	4311      	orrs	r1, r2
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800979e:	0212      	lsls	r2, r2, #8
 80097a0:	4311      	orrs	r1, r2
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80097a6:	0852      	lsrs	r2, r2, #1
 80097a8:	3a01      	subs	r2, #1
 80097aa:	0552      	lsls	r2, r2, #21
 80097ac:	4311      	orrs	r1, r2
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80097b2:	0852      	lsrs	r2, r2, #1
 80097b4:	3a01      	subs	r2, #1
 80097b6:	0652      	lsls	r2, r2, #25
 80097b8:	4311      	orrs	r1, r2
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80097be:	06d2      	lsls	r2, r2, #27
 80097c0:	430a      	orrs	r2, r1
 80097c2:	4912      	ldr	r1, [pc, #72]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80097c8:	4b10      	ldr	r3, [pc, #64]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a0f      	ldr	r2, [pc, #60]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80097ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80097d4:	4b0d      	ldr	r3, [pc, #52]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4a0c      	ldr	r2, [pc, #48]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80097da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80097e0:	f7fd f940 	bl	8006a64 <HAL_GetTick>
 80097e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097e6:	e008      	b.n	80097fa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097e8:	f7fd f93c 	bl	8006a64 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d901      	bls.n	80097fa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e058      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097fa:	4b04      	ldr	r3, [pc, #16]	@ (800980c <HAL_RCC_OscConfig+0x784>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0f0      	beq.n	80097e8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009806:	e050      	b.n	80098aa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e04f      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
 800980c:	40021000 	.word	0x40021000
 8009810:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009814:	4b27      	ldr	r3, [pc, #156]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d144      	bne.n	80098aa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009820:	4b24      	ldr	r3, [pc, #144]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a23      	ldr	r2, [pc, #140]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 8009826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800982a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800982c:	4b21      	ldr	r3, [pc, #132]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	4a20      	ldr	r2, [pc, #128]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 8009832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009836:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009838:	f7fd f914 	bl	8006a64 <HAL_GetTick>
 800983c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009840:	f7fd f910 	bl	8006a64 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b02      	cmp	r3, #2
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e02c      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009852:	4b18      	ldr	r3, [pc, #96]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0f0      	beq.n	8009840 <HAL_RCC_OscConfig+0x7b8>
 800985e:	e024      	b.n	80098aa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b0c      	cmp	r3, #12
 8009864:	d01f      	beq.n	80098a6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009866:	4b13      	ldr	r3, [pc, #76]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a12      	ldr	r2, [pc, #72]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 800986c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009872:	f7fd f8f7 	bl	8006a64 <HAL_GetTick>
 8009876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009878:	e008      	b.n	800988c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800987a:	f7fd f8f3 	bl	8006a64 <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	2b02      	cmp	r3, #2
 8009886:	d901      	bls.n	800988c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e00f      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800988c:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1f0      	bne.n	800987a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009898:	4b06      	ldr	r3, [pc, #24]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	4905      	ldr	r1, [pc, #20]	@ (80098b4 <HAL_RCC_OscConfig+0x82c>)
 800989e:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <HAL_RCC_OscConfig+0x830>)
 80098a0:	4013      	ands	r3, r2
 80098a2:	60cb      	str	r3, [r1, #12]
 80098a4:	e001      	b.n	80098aa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e000      	b.n	80098ac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	40021000 	.word	0x40021000
 80098b8:	feeefffc 	.word	0xfeeefffc

080098bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e11d      	b.n	8009b10 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098d4:	4b90      	ldr	r3, [pc, #576]	@ (8009b18 <HAL_RCC_ClockConfig+0x25c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 030f 	and.w	r3, r3, #15
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d910      	bls.n	8009904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098e2:	4b8d      	ldr	r3, [pc, #564]	@ (8009b18 <HAL_RCC_ClockConfig+0x25c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f023 020f 	bic.w	r2, r3, #15
 80098ea:	498b      	ldr	r1, [pc, #556]	@ (8009b18 <HAL_RCC_ClockConfig+0x25c>)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098f2:	4b89      	ldr	r3, [pc, #548]	@ (8009b18 <HAL_RCC_ClockConfig+0x25c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d001      	beq.n	8009904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e105      	b.n	8009b10 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0302 	and.w	r3, r3, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d010      	beq.n	8009932 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689a      	ldr	r2, [r3, #8]
 8009914:	4b81      	ldr	r3, [pc, #516]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800991c:	429a      	cmp	r2, r3
 800991e:	d908      	bls.n	8009932 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009920:	4b7e      	ldr	r3, [pc, #504]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	497b      	ldr	r1, [pc, #492]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 800992e:	4313      	orrs	r3, r2
 8009930:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d079      	beq.n	8009a32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	2b03      	cmp	r3, #3
 8009944:	d11e      	bne.n	8009984 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009946:	4b75      	ldr	r3, [pc, #468]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e0dc      	b.n	8009b10 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009956:	f000 fa09 	bl	8009d6c <RCC_GetSysClockFreqFromPLLSource>
 800995a:	4603      	mov	r3, r0
 800995c:	4a70      	ldr	r2, [pc, #448]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d946      	bls.n	80099f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009962:	4b6e      	ldr	r3, [pc, #440]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d140      	bne.n	80099f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800996e:	4b6b      	ldr	r3, [pc, #428]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009976:	4a69      	ldr	r2, [pc, #420]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800997e:	2380      	movs	r3, #128	@ 0x80
 8009980:	617b      	str	r3, [r7, #20]
 8009982:	e035      	b.n	80099f0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d107      	bne.n	800999c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800998c:	4b63      	ldr	r3, [pc, #396]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d115      	bne.n	80099c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e0b9      	b.n	8009b10 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d107      	bne.n	80099b4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80099a4:	4b5d      	ldr	r3, [pc, #372]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d109      	bne.n	80099c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e0ad      	b.n	8009b10 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099b4:	4b59      	ldr	r3, [pc, #356]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e0a5      	b.n	8009b10 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80099c4:	f000 f8b4 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 80099c8:	4603      	mov	r3, r0
 80099ca:	4a55      	ldr	r2, [pc, #340]	@ (8009b20 <HAL_RCC_ClockConfig+0x264>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d90f      	bls.n	80099f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80099d0:	4b52      	ldr	r3, [pc, #328]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d109      	bne.n	80099f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80099dc:	4b4f      	ldr	r3, [pc, #316]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099e4:	4a4d      	ldr	r2, [pc, #308]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80099e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80099ec:	2380      	movs	r3, #128	@ 0x80
 80099ee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099f0:	4b4a      	ldr	r3, [pc, #296]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f023 0203 	bic.w	r2, r3, #3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	4947      	ldr	r1, [pc, #284]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a02:	f7fd f82f 	bl	8006a64 <HAL_GetTick>
 8009a06:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a08:	e00a      	b.n	8009a20 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a0a:	f7fd f82b 	bl	8006a64 <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d901      	bls.n	8009a20 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e077      	b.n	8009b10 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a20:	4b3e      	ldr	r3, [pc, #248]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f003 020c 	and.w	r2, r3, #12
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d1eb      	bne.n	8009a0a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b80      	cmp	r3, #128	@ 0x80
 8009a36:	d105      	bne.n	8009a44 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009a38:	4b38      	ldr	r3, [pc, #224]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	4a37      	ldr	r2, [pc, #220]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a42:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d010      	beq.n	8009a72 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	4b31      	ldr	r3, [pc, #196]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d208      	bcs.n	8009a72 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a60:	4b2e      	ldr	r3, [pc, #184]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	492b      	ldr	r1, [pc, #172]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a72:	4b29      	ldr	r3, [pc, #164]	@ (8009b18 <HAL_RCC_ClockConfig+0x25c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 030f 	and.w	r3, r3, #15
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d210      	bcs.n	8009aa2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a80:	4b25      	ldr	r3, [pc, #148]	@ (8009b18 <HAL_RCC_ClockConfig+0x25c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f023 020f 	bic.w	r2, r3, #15
 8009a88:	4923      	ldr	r1, [pc, #140]	@ (8009b18 <HAL_RCC_ClockConfig+0x25c>)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a90:	4b21      	ldr	r3, [pc, #132]	@ (8009b18 <HAL_RCC_ClockConfig+0x25c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d001      	beq.n	8009aa2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e036      	b.n	8009b10 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0304 	and.w	r3, r3, #4
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d008      	beq.n	8009ac0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009aae:	4b1b      	ldr	r3, [pc, #108]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	4918      	ldr	r1, [pc, #96]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009abc:	4313      	orrs	r3, r2
 8009abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0308 	and.w	r3, r3, #8
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d009      	beq.n	8009ae0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009acc:	4b13      	ldr	r3, [pc, #76]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	4910      	ldr	r1, [pc, #64]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009ae0:	f000 f826 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b1c <HAL_RCC_ClockConfig+0x260>)
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	091b      	lsrs	r3, r3, #4
 8009aec:	f003 030f 	and.w	r3, r3, #15
 8009af0:	490c      	ldr	r1, [pc, #48]	@ (8009b24 <HAL_RCC_ClockConfig+0x268>)
 8009af2:	5ccb      	ldrb	r3, [r1, r3]
 8009af4:	f003 031f 	and.w	r3, r3, #31
 8009af8:	fa22 f303 	lsr.w	r3, r2, r3
 8009afc:	4a0a      	ldr	r2, [pc, #40]	@ (8009b28 <HAL_RCC_ClockConfig+0x26c>)
 8009afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009b00:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <HAL_RCC_ClockConfig+0x270>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fc ff5d 	bl	80069c4 <HAL_InitTick>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40022000 	.word	0x40022000
 8009b1c:	40021000 	.word	0x40021000
 8009b20:	04c4b400 	.word	0x04c4b400
 8009b24:	0801804c 	.word	0x0801804c
 8009b28:	20000024 	.word	0x20000024
 8009b2c:	20000028 	.word	0x20000028

08009b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b089      	sub	sp, #36	@ 0x24
 8009b34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	61fb      	str	r3, [r7, #28]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f003 030c 	and.w	r3, r3, #12
 8009b46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b48:	4b3b      	ldr	r3, [pc, #236]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f003 0303 	and.w	r3, r3, #3
 8009b50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d005      	beq.n	8009b64 <HAL_RCC_GetSysClockFreq+0x34>
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2b0c      	cmp	r3, #12
 8009b5c:	d121      	bne.n	8009ba2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d11e      	bne.n	8009ba2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009b64:	4b34      	ldr	r3, [pc, #208]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d107      	bne.n	8009b80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009b70:	4b31      	ldr	r3, [pc, #196]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	f003 030f 	and.w	r3, r3, #15
 8009b7c:	61fb      	str	r3, [r7, #28]
 8009b7e:	e005      	b.n	8009b8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009b80:	4b2d      	ldr	r3, [pc, #180]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	091b      	lsrs	r3, r3, #4
 8009b86:	f003 030f 	and.w	r3, r3, #15
 8009b8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8009c3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10d      	bne.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009ba0:	e00a      	b.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d102      	bne.n	8009bae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009ba8:	4b25      	ldr	r3, [pc, #148]	@ (8009c40 <HAL_RCC_GetSysClockFreq+0x110>)
 8009baa:	61bb      	str	r3, [r7, #24]
 8009bac:	e004      	b.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	2b08      	cmp	r3, #8
 8009bb2:	d101      	bne.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009bb4:	4b23      	ldr	r3, [pc, #140]	@ (8009c44 <HAL_RCC_GetSysClockFreq+0x114>)
 8009bb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b0c      	cmp	r3, #12
 8009bbc:	d134      	bne.n	8009c28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d003      	beq.n	8009bd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d003      	beq.n	8009bdc <HAL_RCC_GetSysClockFreq+0xac>
 8009bd4:	e005      	b.n	8009be2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8009c40 <HAL_RCC_GetSysClockFreq+0x110>)
 8009bd8:	617b      	str	r3, [r7, #20]
      break;
 8009bda:	e005      	b.n	8009be8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009bdc:	4b19      	ldr	r3, [pc, #100]	@ (8009c44 <HAL_RCC_GetSysClockFreq+0x114>)
 8009bde:	617b      	str	r3, [r7, #20]
      break;
 8009be0:	e002      	b.n	8009be8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	617b      	str	r3, [r7, #20]
      break;
 8009be6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009be8:	4b13      	ldr	r3, [pc, #76]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	091b      	lsrs	r3, r3, #4
 8009bee:	f003 030f 	and.w	r3, r3, #15
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009bf6:	4b10      	ldr	r3, [pc, #64]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	0a1b      	lsrs	r3, r3, #8
 8009bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	fb03 f202 	mul.w	r2, r3, r2
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	0e5b      	lsrs	r3, r3, #25
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	3301      	adds	r3, #1
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009c28:	69bb      	ldr	r3, [r7, #24]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3724      	adds	r7, #36	@ 0x24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	40021000 	.word	0x40021000
 8009c3c:	08018064 	.word	0x08018064
 8009c40:	00f42400 	.word	0x00f42400
 8009c44:	007a1200 	.word	0x007a1200

08009c48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c4c:	4b03      	ldr	r3, [pc, #12]	@ (8009c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20000024 	.word	0x20000024

08009c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009c64:	f7ff fff0 	bl	8009c48 <HAL_RCC_GetHCLKFreq>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	4b06      	ldr	r3, [pc, #24]	@ (8009c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	0a1b      	lsrs	r3, r3, #8
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	4904      	ldr	r1, [pc, #16]	@ (8009c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c76:	5ccb      	ldrb	r3, [r1, r3]
 8009c78:	f003 031f 	and.w	r3, r3, #31
 8009c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	40021000 	.word	0x40021000
 8009c88:	0801805c 	.word	0x0801805c

08009c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009c90:	f7ff ffda 	bl	8009c48 <HAL_RCC_GetHCLKFreq>
 8009c94:	4602      	mov	r2, r0
 8009c96:	4b06      	ldr	r3, [pc, #24]	@ (8009cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	0adb      	lsrs	r3, r3, #11
 8009c9c:	f003 0307 	and.w	r3, r3, #7
 8009ca0:	4904      	ldr	r1, [pc, #16]	@ (8009cb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009ca2:	5ccb      	ldrb	r3, [r1, r3]
 8009ca4:	f003 031f 	and.w	r3, r3, #31
 8009ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	40021000 	.word	0x40021000
 8009cb4:	0801805c 	.word	0x0801805c

08009cb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009cc4:	4b27      	ldr	r3, [pc, #156]	@ (8009d64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d003      	beq.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009cd0:	f7ff f906 	bl	8008ee0 <HAL_PWREx_GetVoltageRange>
 8009cd4:	6178      	str	r0, [r7, #20]
 8009cd6:	e014      	b.n	8009d02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009cd8:	4b22      	ldr	r3, [pc, #136]	@ (8009d64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cdc:	4a21      	ldr	r2, [pc, #132]	@ (8009d64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009cf0:	f7ff f8f6 	bl	8008ee0 <HAL_PWREx_GetVoltageRange>
 8009cf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8009d64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d08:	d10b      	bne.n	8009d22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b80      	cmp	r3, #128	@ 0x80
 8009d0e:	d913      	bls.n	8009d38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2ba0      	cmp	r3, #160	@ 0xa0
 8009d14:	d902      	bls.n	8009d1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009d16:	2302      	movs	r3, #2
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	e00d      	b.n	8009d38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	613b      	str	r3, [r7, #16]
 8009d20:	e00a      	b.n	8009d38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d26:	d902      	bls.n	8009d2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009d28:	2302      	movs	r3, #2
 8009d2a:	613b      	str	r3, [r7, #16]
 8009d2c:	e004      	b.n	8009d38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b70      	cmp	r3, #112	@ 0x70
 8009d32:	d101      	bne.n	8009d38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009d34:	2301      	movs	r3, #1
 8009d36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009d38:	4b0b      	ldr	r3, [pc, #44]	@ (8009d68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f023 020f 	bic.w	r2, r3, #15
 8009d40:	4909      	ldr	r1, [pc, #36]	@ (8009d68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009d48:	4b07      	ldr	r3, [pc, #28]	@ (8009d68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 030f 	and.w	r3, r3, #15
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d001      	beq.n	8009d5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e000      	b.n	8009d5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	40021000 	.word	0x40021000
 8009d68:	40022000 	.word	0x40022000

08009d6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d72:	4b2d      	ldr	r3, [pc, #180]	@ (8009e28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d00b      	beq.n	8009d9a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d825      	bhi.n	8009dd4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d008      	beq.n	8009da0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d11f      	bne.n	8009dd4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009d94:	4b25      	ldr	r3, [pc, #148]	@ (8009e2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009d96:	613b      	str	r3, [r7, #16]
    break;
 8009d98:	e01f      	b.n	8009dda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009d9a:	4b25      	ldr	r3, [pc, #148]	@ (8009e30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009d9c:	613b      	str	r3, [r7, #16]
    break;
 8009d9e:	e01c      	b.n	8009dda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009da0:	4b21      	ldr	r3, [pc, #132]	@ (8009e28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d107      	bne.n	8009dbc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009dac:	4b1e      	ldr	r3, [pc, #120]	@ (8009e28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	617b      	str	r3, [r7, #20]
 8009dba:	e005      	b.n	8009dc8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009e28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	091b      	lsrs	r3, r3, #4
 8009dc2:	f003 030f 	and.w	r3, r3, #15
 8009dc6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8009e34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dd0:	613b      	str	r3, [r7, #16]
    break;
 8009dd2:	e002      	b.n	8009dda <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	613b      	str	r3, [r7, #16]
    break;
 8009dd8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009dda:	4b13      	ldr	r3, [pc, #76]	@ (8009e28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	091b      	lsrs	r3, r3, #4
 8009de0:	f003 030f 	and.w	r3, r3, #15
 8009de4:	3301      	adds	r3, #1
 8009de6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009de8:	4b0f      	ldr	r3, [pc, #60]	@ (8009e28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	0a1b      	lsrs	r3, r3, #8
 8009dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	fb03 f202 	mul.w	r2, r3, r2
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e00:	4b09      	ldr	r3, [pc, #36]	@ (8009e28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	0e5b      	lsrs	r3, r3, #25
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009e1a:	683b      	ldr	r3, [r7, #0]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	40021000 	.word	0x40021000
 8009e2c:	00f42400 	.word	0x00f42400
 8009e30:	007a1200 	.word	0x007a1200
 8009e34:	08018064 	.word	0x08018064

08009e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e40:	2300      	movs	r3, #0
 8009e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e44:	2300      	movs	r3, #0
 8009e46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d040      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e58:	2b80      	cmp	r3, #128	@ 0x80
 8009e5a:	d02a      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e5c:	2b80      	cmp	r3, #128	@ 0x80
 8009e5e:	d825      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009e60:	2b60      	cmp	r3, #96	@ 0x60
 8009e62:	d026      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e64:	2b60      	cmp	r3, #96	@ 0x60
 8009e66:	d821      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009e68:	2b40      	cmp	r3, #64	@ 0x40
 8009e6a:	d006      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009e6c:	2b40      	cmp	r3, #64	@ 0x40
 8009e6e:	d81d      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d009      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	d010      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009e78:	e018      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009e7a:	4b89      	ldr	r3, [pc, #548]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	4a88      	ldr	r2, [pc, #544]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e84:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e86:	e015      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f001 fa34 	bl	800b2fc <RCCEx_PLLSAI1_Config>
 8009e94:	4603      	mov	r3, r0
 8009e96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e98:	e00c      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3320      	adds	r3, #32
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 fb1f 	bl	800b4e4 <RCCEx_PLLSAI2_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009eaa:	e003      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	74fb      	strb	r3, [r7, #19]
      break;
 8009eb0:	e000      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eb4:	7cfb      	ldrb	r3, [r7, #19]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009eba:	4b79      	ldr	r3, [pc, #484]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ec0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec8:	4975      	ldr	r1, [pc, #468]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8009ed0:	e001      	b.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed2:	7cfb      	ldrb	r3, [r7, #19]
 8009ed4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d047      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eea:	d030      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ef0:	d82a      	bhi.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ef6:	d02a      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009efc:	d824      	bhi.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f02:	d008      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f08:	d81e      	bhi.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f12:	d010      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009f14:	e018      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009f16:	4b62      	ldr	r3, [pc, #392]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	4a61      	ldr	r2, [pc, #388]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f20:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f22:	e015      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	2100      	movs	r1, #0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 f9e6 	bl	800b2fc <RCCEx_PLLSAI1_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f34:	e00c      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3320      	adds	r3, #32
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 fad1 	bl	800b4e4 <RCCEx_PLLSAI2_Config>
 8009f42:	4603      	mov	r3, r0
 8009f44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f46:	e003      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	74fb      	strb	r3, [r7, #19]
      break;
 8009f4c:	e000      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f50:	7cfb      	ldrb	r3, [r7, #19]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10b      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009f56:	4b52      	ldr	r3, [pc, #328]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f64:	494e      	ldr	r1, [pc, #312]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8009f6c:	e001      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6e:	7cfb      	ldrb	r3, [r7, #19]
 8009f70:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 809f 	beq.w	800a0be <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f80:	2300      	movs	r3, #0
 8009f82:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009f84:	4b46      	ldr	r3, [pc, #280]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009f90:	2301      	movs	r3, #1
 8009f92:	e000      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009f94:	2300      	movs	r3, #0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00d      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f9a:	4b41      	ldr	r3, [pc, #260]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f9e:	4a40      	ldr	r2, [pc, #256]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fa6:	4b3e      	ldr	r3, [pc, #248]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fae:	60bb      	str	r3, [r7, #8]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fb6:	4b3b      	ldr	r3, [pc, #236]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a3a      	ldr	r2, [pc, #232]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fc2:	f7fc fd4f 	bl	8006a64 <HAL_GetTick>
 8009fc6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009fc8:	e009      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fca:	f7fc fd4b 	bl	8006a64 <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d902      	bls.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	74fb      	strb	r3, [r7, #19]
        break;
 8009fdc:	e005      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009fde:	4b31      	ldr	r3, [pc, #196]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0ef      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009fea:	7cfb      	ldrb	r3, [r7, #19]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d15b      	bne.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009ff0:	4b2b      	ldr	r3, [pc, #172]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ffa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d01f      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d019      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a00e:	4b24      	ldr	r3, [pc, #144]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a018:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a01a:	4b21      	ldr	r3, [pc, #132]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a020:	4a1f      	ldr	r2, [pc, #124]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a026:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a02a:	4b1d      	ldr	r3, [pc, #116]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a030:	4a1b      	ldr	r2, [pc, #108]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a036:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a03a:	4a19      	ldr	r2, [pc, #100]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d016      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a04c:	f7fc fd0a 	bl	8006a64 <HAL_GetTick>
 800a050:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a052:	e00b      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a054:	f7fc fd06 	bl	8006a64 <HAL_GetTick>
 800a058:	4602      	mov	r2, r0
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a062:	4293      	cmp	r3, r2
 800a064:	d902      	bls.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	74fb      	strb	r3, [r7, #19]
            break;
 800a06a:	e006      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a06c:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0ec      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a07a:	7cfb      	ldrb	r3, [r7, #19]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10c      	bne.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a080:	4b07      	ldr	r3, [pc, #28]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a086:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a090:	4903      	ldr	r1, [pc, #12]	@ (800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a092:	4313      	orrs	r3, r2
 800a094:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a098:	e008      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a09a:	7cfb      	ldrb	r3, [r7, #19]
 800a09c:	74bb      	strb	r3, [r7, #18]
 800a09e:	e005      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x274>
 800a0a0:	40021000 	.word	0x40021000
 800a0a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a8:	7cfb      	ldrb	r3, [r7, #19]
 800a0aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a0ac:	7c7b      	ldrb	r3, [r7, #17]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d105      	bne.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0b2:	4ba0      	ldr	r3, [pc, #640]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0b6:	4a9f      	ldr	r2, [pc, #636]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00a      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a0ca:	4b9a      	ldr	r3, [pc, #616]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0d0:	f023 0203 	bic.w	r2, r3, #3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d8:	4996      	ldr	r1, [pc, #600]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00a      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a0ec:	4b91      	ldr	r3, [pc, #580]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0f2:	f023 020c 	bic.w	r2, r3, #12
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0fa:	498e      	ldr	r1, [pc, #568]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a10e:	4b89      	ldr	r3, [pc, #548]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a114:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a11c:	4985      	ldr	r1, [pc, #532]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0308 	and.w	r3, r3, #8
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00a      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a130:	4b80      	ldr	r3, [pc, #512]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a136:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a13e:	497d      	ldr	r1, [pc, #500]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a140:	4313      	orrs	r3, r2
 800a142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0310 	and.w	r3, r3, #16
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a152:	4b78      	ldr	r3, [pc, #480]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a160:	4974      	ldr	r1, [pc, #464]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a162:	4313      	orrs	r3, r2
 800a164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0320 	and.w	r3, r3, #32
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00a      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a174:	4b6f      	ldr	r3, [pc, #444]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a17a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a182:	496c      	ldr	r1, [pc, #432]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a184:	4313      	orrs	r3, r2
 800a186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a196:	4b67      	ldr	r3, [pc, #412]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a19c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1a4:	4963      	ldr	r1, [pc, #396]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a1b8:	4b5e      	ldr	r3, [pc, #376]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1c6:	495b      	ldr	r1, [pc, #364]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a1da:	4b56      	ldr	r3, [pc, #344]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1e8:	4952      	ldr	r1, [pc, #328]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a1fc:	4b4d      	ldr	r3, [pc, #308]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a202:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a20a:	494a      	ldr	r1, [pc, #296]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a21e:	4b45      	ldr	r3, [pc, #276]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a224:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a22c:	4941      	ldr	r1, [pc, #260]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a240:	4b3c      	ldr	r3, [pc, #240]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a246:	f023 0203 	bic.w	r2, r3, #3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a24e:	4939      	ldr	r1, [pc, #228]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a250:	4313      	orrs	r3, r2
 800a252:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d028      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a262:	4b34      	ldr	r3, [pc, #208]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a268:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a270:	4930      	ldr	r1, [pc, #192]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a272:	4313      	orrs	r3, r2
 800a274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a27c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a280:	d106      	bne.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a282:	4b2c      	ldr	r3, [pc, #176]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	4a2b      	ldr	r2, [pc, #172]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a28c:	60d3      	str	r3, [r2, #12]
 800a28e:	e011      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a298:	d10c      	bne.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3304      	adds	r3, #4
 800a29e:	2101      	movs	r1, #1
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f001 f82b 	bl	800b2fc <RCCEx_PLLSAI1_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a2aa:	7cfb      	ldrb	r3, [r7, #19]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800a2b0:	7cfb      	ldrb	r3, [r7, #19]
 800a2b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d04d      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2c8:	d108      	bne.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800a2ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2d0:	4a18      	ldr	r2, [pc, #96]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800a2da:	e012      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a2dc:	4b15      	ldr	r3, [pc, #84]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2e2:	4a14      	ldr	r2, [pc, #80]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2e8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800a2ec:	4b11      	ldr	r3, [pc, #68]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2fa:	490e      	ldr	r1, [pc, #56]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a306:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a30a:	d106      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a30c:	4b09      	ldr	r3, [pc, #36]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	4a08      	ldr	r2, [pc, #32]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a316:	60d3      	str	r3, [r2, #12]
 800a318:	e020      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a31e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a322:	d109      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a324:	4b03      	ldr	r3, [pc, #12]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	4a02      	ldr	r2, [pc, #8]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a32a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a32e:	60d3      	str	r3, [r2, #12]
 800a330:	e014      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a332:	bf00      	nop
 800a334:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a33c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a340:	d10c      	bne.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3304      	adds	r3, #4
 800a346:	2101      	movs	r1, #1
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 ffd7 	bl	800b2fc <RCCEx_PLLSAI1_Config>
 800a34e:	4603      	mov	r3, r0
 800a350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a352:	7cfb      	ldrb	r3, [r7, #19]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800a358:	7cfb      	ldrb	r3, [r7, #19]
 800a35a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d028      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a368:	4b4a      	ldr	r3, [pc, #296]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a36e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a376:	4947      	ldr	r1, [pc, #284]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a386:	d106      	bne.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a388:	4b42      	ldr	r3, [pc, #264]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	4a41      	ldr	r2, [pc, #260]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a38e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a392:	60d3      	str	r3, [r2, #12]
 800a394:	e011      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a39a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a39e:	d10c      	bne.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 ffa8 	bl	800b2fc <RCCEx_PLLSAI1_Config>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3b0:	7cfb      	ldrb	r3, [r7, #19]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800a3b6:	7cfb      	ldrb	r3, [r7, #19]
 800a3b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01e      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3c6:	4b33      	ldr	r3, [pc, #204]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3cc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d6:	492f      	ldr	r1, [pc, #188]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3e8:	d10c      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 ff83 	bl	800b2fc <RCCEx_PLLSAI1_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3fa:	7cfb      	ldrb	r3, [r7, #19]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800a400:	7cfb      	ldrb	r3, [r7, #19]
 800a402:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a410:	4b20      	ldr	r3, [pc, #128]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a412:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a416:	f023 0204 	bic.w	r2, r3, #4
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a420:	491c      	ldr	r1, [pc, #112]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a422:	4313      	orrs	r3, r2
 800a424:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00b      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a434:	4b17      	ldr	r3, [pc, #92]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a436:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a43a:	f023 0218 	bic.w	r2, r3, #24
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a444:	4913      	ldr	r1, [pc, #76]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a446:	4313      	orrs	r3, r2
 800a448:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d017      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a458:	4b0e      	ldr	r3, [pc, #56]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a45a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a45e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a468:	490a      	ldr	r1, [pc, #40]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a47a:	d105      	bne.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a47c:	4b05      	ldr	r3, [pc, #20]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	4a04      	ldr	r2, [pc, #16]	@ (800a494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a486:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a488:	7cbb      	ldrb	r3, [r7, #18]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	40021000 	.word	0x40021000

0800a498 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4aa:	d13e      	bne.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a4ac:	4bb6      	ldr	r3, [pc, #728]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4b6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4be:	d028      	beq.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4c6:	f200 86f4 	bhi.w	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4d0:	d005      	beq.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d8:	d00e      	beq.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800a4da:	f000 beea 	b.w	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a4de:	4baa      	ldr	r3, [pc, #680]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	f040 86e4 	bne.w	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800a4ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4f2:	61fb      	str	r3, [r7, #28]
      break;
 800a4f4:	f000 bedf 	b.w	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a4f8:	4ba3      	ldr	r3, [pc, #652]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a4fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4fe:	f003 0302 	and.w	r3, r3, #2
 800a502:	2b02      	cmp	r3, #2
 800a504:	f040 86d9 	bne.w	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800a508:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a50c:	61fb      	str	r3, [r7, #28]
      break;
 800a50e:	f000 bed4 	b.w	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a512:	4b9d      	ldr	r3, [pc, #628]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a51a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a51e:	f040 86ce 	bne.w	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800a522:	4b9a      	ldr	r3, [pc, #616]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800a524:	61fb      	str	r3, [r7, #28]
      break;
 800a526:	f000 beca 	b.w	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a52a:	4b97      	ldr	r3, [pc, #604]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	2b03      	cmp	r3, #3
 800a538:	d036      	beq.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d840      	bhi.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d003      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d020      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800a54c:	e039      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a54e:	4b8e      	ldr	r3, [pc, #568]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b02      	cmp	r3, #2
 800a558:	d116      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a55a:	4b8b      	ldr	r3, [pc, #556]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a566:	4b88      	ldr	r3, [pc, #544]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	091b      	lsrs	r3, r3, #4
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	e005      	b.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a572:	4b85      	ldr	r3, [pc, #532]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a578:	0a1b      	lsrs	r3, r3, #8
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	4a84      	ldr	r2, [pc, #528]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a584:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a586:	e01f      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	61bb      	str	r3, [r7, #24]
      break;
 800a58c:	e01c      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a58e:	4b7e      	ldr	r3, [pc, #504]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a59a:	d102      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a59c:	4b7d      	ldr	r3, [pc, #500]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a59e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a5a0:	e012      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	61bb      	str	r3, [r7, #24]
      break;
 800a5a6:	e00f      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5a8:	4b77      	ldr	r3, [pc, #476]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5b4:	d102      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a5b6:	4b78      	ldr	r3, [pc, #480]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a5b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a5ba:	e005      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	61bb      	str	r3, [r7, #24]
      break;
 800a5c0:	e002      	b.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61bb      	str	r3, [r7, #24]
      break;
 800a5c6:	bf00      	nop
    }

    switch(PeriphClk)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5ce:	f000 8606 	beq.w	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5d8:	f200 8673 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5e2:	f000 8469 	beq.w	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5ec:	f200 8669 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5f6:	f000 8531 	beq.w	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a600:	f200 865f 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a60a:	f000 8187 	beq.w	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a614:	f200 8655 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a61e:	f000 80cd 	beq.w	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a628:	f200 864b 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a632:	f000 8430 	beq.w	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a63c:	f200 8641 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a646:	f000 83e4 	beq.w	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a650:	f200 8637 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a65a:	f000 80af 	beq.w	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a664:	f200 862d 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a66e:	f000 809d 	beq.w	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a678:	f200 8623 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a682:	f000 808b 	beq.w	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a68c:	f200 8619 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a696:	f000 8554 	beq.w	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6a0:	f200 860f 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6aa:	f000 8500 	beq.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6b4:	f200 8605 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6be:	f000 84a1 	beq.w	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6c8:	f200 85fb 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b80      	cmp	r3, #128	@ 0x80
 800a6d0:	f000 846c 	beq.w	800afac <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b80      	cmp	r3, #128	@ 0x80
 800a6d8:	f200 85f3 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	d84c      	bhi.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 85ec 	beq.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	2b1f      	cmp	r3, #31
 800a6f0:	f200 85e7 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fa:	bf00      	nop
 800a6fc:	0800ab11 	.word	0x0800ab11
 800a700:	0800ab7f 	.word	0x0800ab7f
 800a704:	0800b2c3 	.word	0x0800b2c3
 800a708:	0800ac13 	.word	0x0800ac13
 800a70c:	0800b2c3 	.word	0x0800b2c3
 800a710:	0800b2c3 	.word	0x0800b2c3
 800a714:	0800b2c3 	.word	0x0800b2c3
 800a718:	0800ac8b 	.word	0x0800ac8b
 800a71c:	0800b2c3 	.word	0x0800b2c3
 800a720:	0800b2c3 	.word	0x0800b2c3
 800a724:	0800b2c3 	.word	0x0800b2c3
 800a728:	0800b2c3 	.word	0x0800b2c3
 800a72c:	0800b2c3 	.word	0x0800b2c3
 800a730:	0800b2c3 	.word	0x0800b2c3
 800a734:	0800b2c3 	.word	0x0800b2c3
 800a738:	0800ad0f 	.word	0x0800ad0f
 800a73c:	0800b2c3 	.word	0x0800b2c3
 800a740:	0800b2c3 	.word	0x0800b2c3
 800a744:	0800b2c3 	.word	0x0800b2c3
 800a748:	0800b2c3 	.word	0x0800b2c3
 800a74c:	0800b2c3 	.word	0x0800b2c3
 800a750:	0800b2c3 	.word	0x0800b2c3
 800a754:	0800b2c3 	.word	0x0800b2c3
 800a758:	0800b2c3 	.word	0x0800b2c3
 800a75c:	0800b2c3 	.word	0x0800b2c3
 800a760:	0800b2c3 	.word	0x0800b2c3
 800a764:	0800b2c3 	.word	0x0800b2c3
 800a768:	0800b2c3 	.word	0x0800b2c3
 800a76c:	0800b2c3 	.word	0x0800b2c3
 800a770:	0800b2c3 	.word	0x0800b2c3
 800a774:	0800b2c3 	.word	0x0800b2c3
 800a778:	0800ad91 	.word	0x0800ad91
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b40      	cmp	r3, #64	@ 0x40
 800a780:	f000 83e8 	beq.w	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a784:	f000 bd9d 	b.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a788:	40021000 	.word	0x40021000
 800a78c:	0003d090 	.word	0x0003d090
 800a790:	08018064 	.word	0x08018064
 800a794:	00f42400 	.word	0x00f42400
 800a798:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a79c:	69b9      	ldr	r1, [r7, #24]
 800a79e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a7a2:	f000 ff93 	bl	800b6cc <RCCEx_GetSAIxPeriphCLKFreq>
 800a7a6:	61f8      	str	r0, [r7, #28]
      break;
 800a7a8:	f000 bd8e 	b.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a7ac:	69b9      	ldr	r1, [r7, #24]
 800a7ae:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a7b2:	f000 ff8b 	bl	800b6cc <RCCEx_GetSAIxPeriphCLKFreq>
 800a7b6:	61f8      	str	r0, [r7, #28]
      break;
 800a7b8:	f000 bd86 	b.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a7bc:	4b9a      	ldr	r3, [pc, #616]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a7be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7c2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a7ce:	d015      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a7d6:	f200 8092 	bhi.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7e0:	d029      	beq.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7e8:	f200 8089 	bhi.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d07b      	beq.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7f8:	d04a      	beq.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800a7fa:	e080      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a7fc:	4b8a      	ldr	r3, [pc, #552]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b02      	cmp	r3, #2
 800a806:	d17d      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a808:	4b87      	ldr	r3, [pc, #540]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0308 	and.w	r3, r3, #8
 800a810:	2b00      	cmp	r3, #0
 800a812:	d005      	beq.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800a814:	4b84      	ldr	r3, [pc, #528]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	091b      	lsrs	r3, r3, #4
 800a81a:	f003 030f 	and.w	r3, r3, #15
 800a81e:	e005      	b.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800a820:	4b81      	ldr	r3, [pc, #516]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a826:	0a1b      	lsrs	r3, r3, #8
 800a828:	f003 030f 	and.w	r3, r3, #15
 800a82c:	4a7f      	ldr	r2, [pc, #508]	@ (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a832:	61fb      	str	r3, [r7, #28]
          break;
 800a834:	e066      	b.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a836:	4b7c      	ldr	r3, [pc, #496]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a83e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a842:	d162      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a844:	4b78      	ldr	r3, [pc, #480]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a84c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a850:	d15b      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a852:	4b75      	ldr	r3, [pc, #468]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	0a1b      	lsrs	r3, r3, #8
 800a858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a85c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	fb03 f202 	mul.w	r2, r3, r2
 800a866:	4b70      	ldr	r3, [pc, #448]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	091b      	lsrs	r3, r3, #4
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	3301      	adds	r3, #1
 800a872:	fbb2 f3f3 	udiv	r3, r2, r3
 800a876:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a878:	4b6b      	ldr	r3, [pc, #428]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	0d5b      	lsrs	r3, r3, #21
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	3301      	adds	r3, #1
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	fbb2 f3f3 	udiv	r3, r2, r3
 800a88c:	61fb      	str	r3, [r7, #28]
          break;
 800a88e:	e03c      	b.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a890:	4b65      	ldr	r3, [pc, #404]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a89c:	d138      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a89e:	4b62      	ldr	r3, [pc, #392]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8aa:	d131      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a8ac:	4b5e      	ldr	r3, [pc, #376]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	0a1b      	lsrs	r3, r3, #8
 800a8b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8b6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	fb03 f202 	mul.w	r2, r3, r2
 800a8c0:	4b59      	ldr	r3, [pc, #356]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	091b      	lsrs	r3, r3, #4
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a8d2:	4b55      	ldr	r3, [pc, #340]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	0d5b      	lsrs	r3, r3, #21
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	3301      	adds	r3, #1
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e6:	61fb      	str	r3, [r7, #28]
          break;
 800a8e8:	e012      	b.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a8ea:	4b4f      	ldr	r3, [pc, #316]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d10e      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800a8f8:	4b4d      	ldr	r3, [pc, #308]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a8fa:	61fb      	str	r3, [r7, #28]
          break;
 800a8fc:	e00b      	b.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800a8fe:	bf00      	nop
 800a900:	f000 bce2 	b.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a904:	bf00      	nop
 800a906:	f000 bcdf 	b.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a90a:	bf00      	nop
 800a90c:	f000 bcdc 	b.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a910:	bf00      	nop
 800a912:	f000 bcd9 	b.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a916:	bf00      	nop
        break;
 800a918:	f000 bcd6 	b.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800a91c:	4b42      	ldr	r3, [pc, #264]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a91e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a92a:	d13d      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a92c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a934:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a938:	f040 84c5 	bne.w	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800a93c:	4b3a      	ldr	r3, [pc, #232]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a948:	f040 84bd 	bne.w	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a94c:	4b36      	ldr	r3, [pc, #216]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	0a1b      	lsrs	r3, r3, #8
 800a952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a956:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	fb03 f202 	mul.w	r2, r3, r2
 800a960:	4b31      	ldr	r3, [pc, #196]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	091b      	lsrs	r3, r3, #4
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	3301      	adds	r3, #1
 800a96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a970:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a972:	4b2d      	ldr	r3, [pc, #180]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	0edb      	lsrs	r3, r3, #27
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a984:	4b28      	ldr	r3, [pc, #160]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800a990:	2311      	movs	r3, #17
 800a992:	617b      	str	r3, [r7, #20]
 800a994:	e001      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800a996:	2307      	movs	r3, #7
 800a998:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a2:	61fb      	str	r3, [r7, #28]
      break;
 800a9a4:	f000 bc8f 	b.w	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a9a8:	4b1f      	ldr	r3, [pc, #124]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9ae:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a9ba:	d016      	beq.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a9c2:	f200 809b 	bhi.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9cc:	d032      	beq.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9d4:	f200 8092 	bhi.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 8084 	beq.w	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9e6:	d052      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800a9e8:	e088      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a9ea:	4b0f      	ldr	r3, [pc, #60]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	f040 8084 	bne.w	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0308 	and.w	r3, r3, #8
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aa04:	4b08      	ldr	r3, [pc, #32]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	091b      	lsrs	r3, r3, #4
 800aa0a:	f003 030f 	and.w	r3, r3, #15
 800aa0e:	e005      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800aa10:	4b05      	ldr	r3, [pc, #20]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa16:	0a1b      	lsrs	r3, r3, #8
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	4a03      	ldr	r2, [pc, #12]	@ (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa22:	61fb      	str	r3, [r7, #28]
          break;
 800aa24:	e06c      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800aa26:	bf00      	nop
 800aa28:	40021000 	.word	0x40021000
 800aa2c:	08018064 	.word	0x08018064
 800aa30:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800aa34:	4ba5      	ldr	r3, [pc, #660]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa40:	d160      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800aa42:	4ba2      	ldr	r3, [pc, #648]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa4e:	d159      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800aa50:	4b9e      	ldr	r3, [pc, #632]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	0a1b      	lsrs	r3, r3, #8
 800aa56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa5a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	fb03 f202 	mul.w	r2, r3, r2
 800aa64:	4b99      	ldr	r3, [pc, #612]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	091b      	lsrs	r3, r3, #4
 800aa6a:	f003 030f 	and.w	r3, r3, #15
 800aa6e:	3301      	adds	r3, #1
 800aa70:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa74:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800aa76:	4b95      	ldr	r3, [pc, #596]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	0d5b      	lsrs	r3, r3, #21
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	3301      	adds	r3, #1
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	69ba      	ldr	r2, [r7, #24]
 800aa86:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8a:	61fb      	str	r3, [r7, #28]
          break;
 800aa8c:	e03a      	b.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800aa8e:	4b8f      	ldr	r3, [pc, #572]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa9a:	d135      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800aa9c:	4b8b      	ldr	r3, [pc, #556]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aaa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aaa8:	d12e      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800aaaa:	4b88      	ldr	r3, [pc, #544]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	0a1b      	lsrs	r3, r3, #8
 800aab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aab4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	fb03 f202 	mul.w	r2, r3, r2
 800aabe:	4b83      	ldr	r3, [pc, #524]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	091b      	lsrs	r3, r3, #4
 800aac4:	f003 030f 	and.w	r3, r3, #15
 800aac8:	3301      	adds	r3, #1
 800aaca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aace:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800aad0:	4b7e      	ldr	r3, [pc, #504]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	0d5b      	lsrs	r3, r3, #21
 800aad6:	f003 0303 	and.w	r3, r3, #3
 800aada:	3301      	adds	r3, #1
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae4:	61fb      	str	r3, [r7, #28]
          break;
 800aae6:	e00f      	b.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800aae8:	4b78      	ldr	r3, [pc, #480]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aaea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d10a      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800aaf6:	4b76      	ldr	r3, [pc, #472]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800aaf8:	61fb      	str	r3, [r7, #28]
          break;
 800aafa:	e007      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800aafc:	bf00      	nop
 800aafe:	e3e2      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ab00:	bf00      	nop
 800ab02:	e3e0      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ab04:	bf00      	nop
 800ab06:	e3de      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ab08:	bf00      	nop
 800ab0a:	e3dc      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ab0c:	bf00      	nop
      break;
 800ab0e:	e3da      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ab10:	4b6e      	ldr	r3, [pc, #440]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab16:	f003 0303 	and.w	r3, r3, #3
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d827      	bhi.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ab22:	a201      	add	r2, pc, #4	@ (adr r2, 800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab28:	0800ab39 	.word	0x0800ab39
 800ab2c:	0800ab41 	.word	0x0800ab41
 800ab30:	0800ab49 	.word	0x0800ab49
 800ab34:	0800ab5d 	.word	0x0800ab5d
          frequency = HAL_RCC_GetPCLK2Freq();
 800ab38:	f7ff f8a8 	bl	8009c8c <HAL_RCC_GetPCLK2Freq>
 800ab3c:	61f8      	str	r0, [r7, #28]
          break;
 800ab3e:	e01d      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800ab40:	f7fe fff6 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800ab44:	61f8      	str	r0, [r7, #28]
          break;
 800ab46:	e019      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab48:	4b60      	ldr	r3, [pc, #384]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab54:	d10f      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800ab56:	4b5f      	ldr	r3, [pc, #380]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab58:	61fb      	str	r3, [r7, #28]
          break;
 800ab5a:	e00c      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ab5c:	4b5b      	ldr	r3, [pc, #364]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab62:	f003 0302 	and.w	r3, r3, #2
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d107      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800ab6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab6e:	61fb      	str	r3, [r7, #28]
          break;
 800ab70:	e003      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800ab72:	bf00      	nop
 800ab74:	e3a8      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab76:	bf00      	nop
 800ab78:	e3a6      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab7a:	bf00      	nop
        break;
 800ab7c:	e3a4      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ab7e:	4b53      	ldr	r3, [pc, #332]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab84:	f003 030c 	and.w	r3, r3, #12
 800ab88:	60fb      	str	r3, [r7, #12]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b0c      	cmp	r3, #12
 800ab8e:	d83a      	bhi.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ab90:	a201      	add	r2, pc, #4	@ (adr r2, 800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800abcd 	.word	0x0800abcd
 800ab9c:	0800ac07 	.word	0x0800ac07
 800aba0:	0800ac07 	.word	0x0800ac07
 800aba4:	0800ac07 	.word	0x0800ac07
 800aba8:	0800abd5 	.word	0x0800abd5
 800abac:	0800ac07 	.word	0x0800ac07
 800abb0:	0800ac07 	.word	0x0800ac07
 800abb4:	0800ac07 	.word	0x0800ac07
 800abb8:	0800abdd 	.word	0x0800abdd
 800abbc:	0800ac07 	.word	0x0800ac07
 800abc0:	0800ac07 	.word	0x0800ac07
 800abc4:	0800ac07 	.word	0x0800ac07
 800abc8:	0800abf1 	.word	0x0800abf1
          frequency = HAL_RCC_GetPCLK1Freq();
 800abcc:	f7ff f848 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800abd0:	61f8      	str	r0, [r7, #28]
          break;
 800abd2:	e01d      	b.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800abd4:	f7fe ffac 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800abd8:	61f8      	str	r0, [r7, #28]
          break;
 800abda:	e019      	b.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abdc:	4b3b      	ldr	r3, [pc, #236]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abe8:	d10f      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800abea:	4b3a      	ldr	r3, [pc, #232]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800abec:	61fb      	str	r3, [r7, #28]
          break;
 800abee:	e00c      	b.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800abf0:	4b36      	ldr	r3, [pc, #216]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abf6:	f003 0302 	and.w	r3, r3, #2
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d107      	bne.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800abfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac02:	61fb      	str	r3, [r7, #28]
          break;
 800ac04:	e003      	b.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800ac06:	bf00      	nop
 800ac08:	e35e      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac0a:	bf00      	nop
 800ac0c:	e35c      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac0e:	bf00      	nop
        break;
 800ac10:	e35a      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ac12:	4b2e      	ldr	r3, [pc, #184]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac1c:	60fb      	str	r3, [r7, #12]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b30      	cmp	r3, #48	@ 0x30
 800ac22:	d021      	beq.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b30      	cmp	r3, #48	@ 0x30
 800ac28:	d829      	bhi.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b20      	cmp	r3, #32
 800ac2e:	d011      	beq.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d823      	bhi.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d004      	beq.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800ac42:	e01c      	b.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac44:	f7ff f80c 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800ac48:	61f8      	str	r0, [r7, #28]
          break;
 800ac4a:	e01d      	b.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac4c:	f7fe ff70 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800ac50:	61f8      	str	r0, [r7, #28]
          break;
 800ac52:	e019      	b.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac54:	4b1d      	ldr	r3, [pc, #116]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac60:	d10f      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800ac62:	4b1c      	ldr	r3, [pc, #112]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac64:	61fb      	str	r3, [r7, #28]
          break;
 800ac66:	e00c      	b.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac68:	4b18      	ldr	r3, [pc, #96]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac6e:	f003 0302 	and.w	r3, r3, #2
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d107      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800ac76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac7a:	61fb      	str	r3, [r7, #28]
          break;
 800ac7c:	e003      	b.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800ac7e:	bf00      	nop
 800ac80:	e322      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac82:	bf00      	nop
 800ac84:	e320      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac86:	bf00      	nop
        break;
 800ac88:	e31e      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ac8a:	4b10      	ldr	r3, [pc, #64]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac90:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac9a:	d027      	beq.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2bc0      	cmp	r3, #192	@ 0xc0
 800aca0:	d82f      	bhi.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b80      	cmp	r3, #128	@ 0x80
 800aca6:	d017      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b80      	cmp	r3, #128	@ 0x80
 800acac:	d829      	bhi.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d003      	beq.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b40      	cmp	r3, #64	@ 0x40
 800acb8:	d004      	beq.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800acba:	e022      	b.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800acbc:	f7fe ffd0 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800acc0:	61f8      	str	r0, [r7, #28]
          break;
 800acc2:	e023      	b.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800acc4:	f7fe ff34 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800acc8:	61f8      	str	r0, [r7, #28]
          break;
 800acca:	e01f      	b.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800accc:	40021000 	.word	0x40021000
 800acd0:	02dc6c00 	.word	0x02dc6c00
 800acd4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acd8:	4b9b      	ldr	r3, [pc, #620]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ace0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ace4:	d10f      	bne.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800ace6:	4b99      	ldr	r3, [pc, #612]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ace8:	61fb      	str	r3, [r7, #28]
          break;
 800acea:	e00c      	b.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800acec:	4b96      	ldr	r3, [pc, #600]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800acee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acf2:	f003 0302 	and.w	r3, r3, #2
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d107      	bne.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800acfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acfe:	61fb      	str	r3, [r7, #28]
          break;
 800ad00:	e003      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800ad02:	bf00      	nop
 800ad04:	e2e0      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad06:	bf00      	nop
 800ad08:	e2de      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad0a:	bf00      	nop
        break;
 800ad0c:	e2dc      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ad0e:	4b8e      	ldr	r3, [pc, #568]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad20:	d025      	beq.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad28:	d82c      	bhi.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad30:	d013      	beq.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad38:	d824      	bhi.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad46:	d004      	beq.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800ad48:	e01c      	b.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad4a:	f7fe ff89 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800ad4e:	61f8      	str	r0, [r7, #28]
          break;
 800ad50:	e01d      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad52:	f7fe feed 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800ad56:	61f8      	str	r0, [r7, #28]
          break;
 800ad58:	e019      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad5a:	4b7b      	ldr	r3, [pc, #492]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad66:	d10f      	bne.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800ad68:	4b78      	ldr	r3, [pc, #480]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ad6a:	61fb      	str	r3, [r7, #28]
          break;
 800ad6c:	e00c      	b.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad6e:	4b76      	ldr	r3, [pc, #472]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d107      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800ad7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad80:	61fb      	str	r3, [r7, #28]
          break;
 800ad82:	e003      	b.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800ad84:	bf00      	nop
 800ad86:	e29f      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad88:	bf00      	nop
 800ad8a:	e29d      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad8c:	bf00      	nop
        break;
 800ad8e:	e29b      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ad90:	4b6d      	ldr	r3, [pc, #436]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad96:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ada2:	d025      	beq.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800adaa:	d82c      	bhi.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adb2:	d013      	beq.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adba:	d824      	bhi.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d004      	beq.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adc8:	d004      	beq.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800adca:	e01c      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800adcc:	f7fe ff48 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800add0:	61f8      	str	r0, [r7, #28]
          break;
 800add2:	e01d      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800add4:	f7fe feac 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800add8:	61f8      	str	r0, [r7, #28]
          break;
 800adda:	e019      	b.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800addc:	4b5a      	ldr	r3, [pc, #360]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ade4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ade8:	d10f      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800adea:	4b58      	ldr	r3, [pc, #352]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800adec:	61fb      	str	r3, [r7, #28]
          break;
 800adee:	e00c      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800adf0:	4b55      	ldr	r3, [pc, #340]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800adf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adf6:	f003 0302 	and.w	r3, r3, #2
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d107      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800adfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae02:	61fb      	str	r3, [r7, #28]
          break;
 800ae04:	e003      	b.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800ae06:	bf00      	nop
 800ae08:	e25e      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae0a:	bf00      	nop
 800ae0c:	e25c      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae0e:	bf00      	nop
        break;
 800ae10:	e25a      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae12:	4b4d      	ldr	r3, [pc, #308]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae24:	d007      	beq.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae2c:	d12f      	bne.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae2e:	f7fe fe7f 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800ae32:	61f8      	str	r0, [r7, #28]
          break;
 800ae34:	e02e      	b.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800ae36:	4b44      	ldr	r3, [pc, #272]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae42:	d126      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800ae44:	4b40      	ldr	r3, [pc, #256]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d020      	beq.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ae50:	4b3d      	ldr	r3, [pc, #244]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	0a1b      	lsrs	r3, r3, #8
 800ae56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae5a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	fb03 f202 	mul.w	r2, r3, r2
 800ae64:	4b38      	ldr	r3, [pc, #224]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	091b      	lsrs	r3, r3, #4
 800ae6a:	f003 030f 	and.w	r3, r3, #15
 800ae6e:	3301      	adds	r3, #1
 800ae70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae74:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800ae76:	4b34      	ldr	r3, [pc, #208]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	0e5b      	lsrs	r3, r3, #25
 800ae7c:	f003 0303 	and.w	r3, r3, #3
 800ae80:	3301      	adds	r3, #1
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	69ba      	ldr	r2, [r7, #24]
 800ae86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae8a:	61fb      	str	r3, [r7, #28]
          break;
 800ae8c:	e001      	b.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800ae8e:	bf00      	nop
 800ae90:	e21a      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae92:	bf00      	nop
        break;
 800ae94:	e218      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ae96:	4b2c      	ldr	r3, [pc, #176]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ae9c:	f003 0304 	and.w	r3, r3, #4
 800aea0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d103      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800aea8:	f7fe fef0 	bl	8009c8c <HAL_RCC_GetPCLK2Freq>
 800aeac:	61f8      	str	r0, [r7, #28]
        break;
 800aeae:	e20b      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800aeb0:	f7fe fe3e 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800aeb4:	61f8      	str	r0, [r7, #28]
        break;
 800aeb6:	e207      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800aeb8:	4b23      	ldr	r3, [pc, #140]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aeba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aebe:	f003 0318 	and.w	r3, r3, #24
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b10      	cmp	r3, #16
 800aec8:	d010      	beq.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b10      	cmp	r3, #16
 800aece:	d834      	bhi.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b08      	cmp	r3, #8
 800aeda:	d024      	beq.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800aedc:	e02d      	b.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800aede:	69b9      	ldr	r1, [r7, #24]
 800aee0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800aee4:	f000 fbf2 	bl	800b6cc <RCCEx_GetSAIxPeriphCLKFreq>
 800aee8:	61f8      	str	r0, [r7, #28]
          break;
 800aeea:	e02b      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800aeec:	4b16      	ldr	r3, [pc, #88]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d122      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800aef8:	4b13      	ldr	r3, [pc, #76]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0308 	and.w	r3, r3, #8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d005      	beq.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800af04:	4b10      	ldr	r3, [pc, #64]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	091b      	lsrs	r3, r3, #4
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	e005      	b.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800af10:	4b0d      	ldr	r3, [pc, #52]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af16:	0a1b      	lsrs	r3, r3, #8
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	4a0c      	ldr	r2, [pc, #48]	@ (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800af1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af22:	61fb      	str	r3, [r7, #28]
          break;
 800af24:	e00b      	b.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af26:	4b08      	ldr	r3, [pc, #32]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af32:	d106      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800af34:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800af36:	61fb      	str	r3, [r7, #28]
          break;
 800af38:	e003      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800af3a:	bf00      	nop
 800af3c:	e1c4      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af3e:	bf00      	nop
 800af40:	e1c2      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af42:	bf00      	nop
        break;
 800af44:	e1c0      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800af46:	bf00      	nop
 800af48:	40021000 	.word	0x40021000
 800af4c:	00f42400 	.word	0x00f42400
 800af50:	08018064 	.word	0x08018064
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800af54:	4b96      	ldr	r3, [pc, #600]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800af56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af66:	d013      	beq.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af6e:	d819      	bhi.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d004      	beq.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af7c:	d004      	beq.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800af7e:	e011      	b.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800af80:	f7fe fe6e 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800af84:	61f8      	str	r0, [r7, #28]
          break;
 800af86:	e010      	b.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800af88:	f7fe fdd2 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800af8c:	61f8      	str	r0, [r7, #28]
          break;
 800af8e:	e00c      	b.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af90:	4b87      	ldr	r3, [pc, #540]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af9c:	d104      	bne.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800af9e:	4b85      	ldr	r3, [pc, #532]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800afa0:	61fb      	str	r3, [r7, #28]
          break;
 800afa2:	e001      	b.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800afa4:	bf00      	nop
 800afa6:	e18f      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800afa8:	bf00      	nop
        break;
 800afaa:	e18d      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800afac:	4b80      	ldr	r3, [pc, #512]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800afae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afb2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afbe:	d013      	beq.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afc6:	d819      	bhi.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afd4:	d004      	beq.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800afd6:	e011      	b.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800afd8:	f7fe fe42 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800afdc:	61f8      	str	r0, [r7, #28]
          break;
 800afde:	e010      	b.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800afe0:	f7fe fda6 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800afe4:	61f8      	str	r0, [r7, #28]
          break;
 800afe6:	e00c      	b.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afe8:	4b71      	ldr	r3, [pc, #452]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aff4:	d104      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800aff6:	4b6f      	ldr	r3, [pc, #444]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800aff8:	61fb      	str	r3, [r7, #28]
          break;
 800affa:	e001      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800affc:	bf00      	nop
 800affe:	e163      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b000:	bf00      	nop
        break;
 800b002:	e161      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b004:	4b6a      	ldr	r3, [pc, #424]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b00a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b00e:	60fb      	str	r3, [r7, #12]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b016:	d013      	beq.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b01e:	d819      	bhi.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d004      	beq.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b02c:	d004      	beq.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800b02e:	e011      	b.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b030:	f7fe fe16 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800b034:	61f8      	str	r0, [r7, #28]
          break;
 800b036:	e010      	b.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800b038:	f7fe fd7a 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800b03c:	61f8      	str	r0, [r7, #28]
          break;
 800b03e:	e00c      	b.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b040:	4b5b      	ldr	r3, [pc, #364]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b04c:	d104      	bne.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800b04e:	4b59      	ldr	r3, [pc, #356]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b050:	61fb      	str	r3, [r7, #28]
          break;
 800b052:	e001      	b.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800b054:	bf00      	nop
 800b056:	e137      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b058:	bf00      	nop
        break;
 800b05a:	e135      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b05c:	4b54      	ldr	r3, [pc, #336]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b05e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b062:	f003 0303 	and.w	r3, r3, #3
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d011      	beq.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b02      	cmp	r3, #2
 800b072:	d818      	bhi.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d004      	beq.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800b080:	e011      	b.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b082:	f7fe fded 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800b086:	61f8      	str	r0, [r7, #28]
          break;
 800b088:	e010      	b.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800b08a:	f7fe fd51 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800b08e:	61f8      	str	r0, [r7, #28]
          break;
 800b090:	e00c      	b.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b092:	4b47      	ldr	r3, [pc, #284]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b09a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b09e:	d104      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800b0a0:	4b44      	ldr	r3, [pc, #272]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b0a2:	61fb      	str	r3, [r7, #28]
          break;
 800b0a4:	e001      	b.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800b0a6:	bf00      	nop
 800b0a8:	e10e      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b0aa:	bf00      	nop
        break;
 800b0ac:	e10c      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b0ae:	4b40      	ldr	r3, [pc, #256]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b0c0:	d02c      	beq.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b0c8:	d833      	bhi.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b0d0:	d01a      	beq.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b0d8:	d82b      	bhi.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d004      	beq.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0e6:	d004      	beq.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800b0e8:	e023      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0ea:	f7fe fdb9 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800b0ee:	61f8      	str	r0, [r7, #28]
          break;
 800b0f0:	e026      	b.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b0f2:	4b2f      	ldr	r3, [pc, #188]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b0f8:	f003 0302 	and.w	r3, r3, #2
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d11a      	bne.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800b100:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b104:	61fb      	str	r3, [r7, #28]
          break;
 800b106:	e016      	b.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b108:	4b29      	ldr	r3, [pc, #164]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b114:	d111      	bne.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800b116:	4b27      	ldr	r3, [pc, #156]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b118:	61fb      	str	r3, [r7, #28]
          break;
 800b11a:	e00e      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b11c:	4b24      	ldr	r3, [pc, #144]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b02      	cmp	r3, #2
 800b128:	d109      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800b12a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b12e:	61fb      	str	r3, [r7, #28]
          break;
 800b130:	e005      	b.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800b132:	bf00      	nop
 800b134:	e0c8      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b136:	bf00      	nop
 800b138:	e0c6      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b13a:	bf00      	nop
 800b13c:	e0c4      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b13e:	bf00      	nop
        break;
 800b140:	e0c2      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b142:	4b1b      	ldr	r3, [pc, #108]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b148:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b154:	d030      	beq.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b15c:	d837      	bhi.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b164:	d01a      	beq.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b16c:	d82f      	bhi.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d004      	beq.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b17a:	d004      	beq.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800b17c:	e027      	b.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b17e:	f7fe fd6f 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800b182:	61f8      	str	r0, [r7, #28]
          break;
 800b184:	e02a      	b.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b186:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b18c:	f003 0302 	and.w	r3, r3, #2
 800b190:	2b02      	cmp	r3, #2
 800b192:	d11e      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800b194:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b198:	61fb      	str	r3, [r7, #28]
          break;
 800b19a:	e01a      	b.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b19c:	4b04      	ldr	r3, [pc, #16]	@ (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1a8:	d115      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800b1aa:	4b02      	ldr	r3, [pc, #8]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b1ac:	61fb      	str	r3, [r7, #28]
          break;
 800b1ae:	e012      	b.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b1b0:	40021000 	.word	0x40021000
 800b1b4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b1b8:	4b46      	ldr	r3, [pc, #280]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1be:	f003 0302 	and.w	r3, r3, #2
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d109      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800b1c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1ca:	61fb      	str	r3, [r7, #28]
          break;
 800b1cc:	e005      	b.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800b1ce:	bf00      	nop
 800b1d0:	e07a      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b1d2:	bf00      	nop
 800b1d4:	e078      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b1d6:	bf00      	nop
 800b1d8:	e076      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b1da:	bf00      	nop
        break;
 800b1dc:	e074      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b1de:	4b3d      	ldr	r3, [pc, #244]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1f0:	d02c      	beq.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1f8:	d855      	bhi.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d004      	beq.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b206:	d004      	beq.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800b208:	e04d      	b.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800b20a:	f7fe fc91 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800b20e:	61f8      	str	r0, [r7, #28]
          break;
 800b210:	e04e      	b.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b212:	4b30      	ldr	r3, [pc, #192]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d145      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b21e:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 0308 	and.w	r3, r3, #8
 800b226:	2b00      	cmp	r3, #0
 800b228:	d005      	beq.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800b22a:	4b2a      	ldr	r3, [pc, #168]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	091b      	lsrs	r3, r3, #4
 800b230:	f003 030f 	and.w	r3, r3, #15
 800b234:	e005      	b.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800b236:	4b27      	ldr	r3, [pc, #156]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b23c:	0a1b      	lsrs	r3, r3, #8
 800b23e:	f003 030f 	and.w	r3, r3, #15
 800b242:	4a25      	ldr	r2, [pc, #148]	@ (800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800b244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b248:	61fb      	str	r3, [r7, #28]
          break;
 800b24a:	e02e      	b.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b24c:	4b21      	ldr	r3, [pc, #132]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b258:	d129      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b25a:	4b1e      	ldr	r3, [pc, #120]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b266:	d122      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b268:	4b1a      	ldr	r3, [pc, #104]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	0a1b      	lsrs	r3, r3, #8
 800b26e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b272:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	fb03 f202 	mul.w	r2, r3, r2
 800b27c:	4b15      	ldr	r3, [pc, #84]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	091b      	lsrs	r3, r3, #4
 800b282:	f003 030f 	and.w	r3, r3, #15
 800b286:	3301      	adds	r3, #1
 800b288:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b28e:	4b11      	ldr	r3, [pc, #68]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	0d5b      	lsrs	r3, r3, #21
 800b294:	f003 0303 	and.w	r3, r3, #3
 800b298:	3301      	adds	r3, #1
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a2:	61fb      	str	r3, [r7, #28]
          break;
 800b2a4:	e003      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800b2a6:	bf00      	nop
 800b2a8:	e00e      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b2aa:	bf00      	nop
 800b2ac:	e00c      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b2ae:	bf00      	nop
        break;
 800b2b0:	e00a      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2b2:	bf00      	nop
 800b2b4:	e008      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2b6:	bf00      	nop
 800b2b8:	e006      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2ba:	bf00      	nop
 800b2bc:	e004      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2be:	bf00      	nop
 800b2c0:	e002      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2c2:	bf00      	nop
 800b2c4:	e000      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b2c6:	bf00      	nop
    }
  }

  return(frequency);
 800b2c8:	69fb      	ldr	r3, [r7, #28]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3720      	adds	r7, #32
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	40021000 	.word	0x40021000
 800b2d8:	08018064 	.word	0x08018064

0800b2dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800b2e0:	4b05      	ldr	r3, [pc, #20]	@ (800b2f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a04      	ldr	r2, [pc, #16]	@ (800b2f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b2e6:	f043 0304 	orr.w	r3, r3, #4
 800b2ea:	6013      	str	r3, [r2, #0]
}
 800b2ec:	bf00      	nop
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	40021000 	.word	0x40021000

0800b2fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b30a:	4b72      	ldr	r3, [pc, #456]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00e      	beq.n	800b334 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b316:	4b6f      	ldr	r3, [pc, #444]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f003 0203 	and.w	r2, r3, #3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	429a      	cmp	r2, r3
 800b324:	d103      	bne.n	800b32e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
       ||
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d142      	bne.n	800b3b4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	73fb      	strb	r3, [r7, #15]
 800b332:	e03f      	b.n	800b3b4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b03      	cmp	r3, #3
 800b33a:	d018      	beq.n	800b36e <RCCEx_PLLSAI1_Config+0x72>
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d825      	bhi.n	800b38c <RCCEx_PLLSAI1_Config+0x90>
 800b340:	2b01      	cmp	r3, #1
 800b342:	d002      	beq.n	800b34a <RCCEx_PLLSAI1_Config+0x4e>
 800b344:	2b02      	cmp	r3, #2
 800b346:	d009      	beq.n	800b35c <RCCEx_PLLSAI1_Config+0x60>
 800b348:	e020      	b.n	800b38c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b34a:	4b62      	ldr	r3, [pc, #392]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 0302 	and.w	r3, r3, #2
 800b352:	2b00      	cmp	r3, #0
 800b354:	d11d      	bne.n	800b392 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b35a:	e01a      	b.n	800b392 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b35c:	4b5d      	ldr	r3, [pc, #372]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b364:	2b00      	cmp	r3, #0
 800b366:	d116      	bne.n	800b396 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b36c:	e013      	b.n	800b396 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b36e:	4b59      	ldr	r3, [pc, #356]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10f      	bne.n	800b39a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b37a:	4b56      	ldr	r3, [pc, #344]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d109      	bne.n	800b39a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b38a:	e006      	b.n	800b39a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
      break;
 800b390:	e004      	b.n	800b39c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b392:	bf00      	nop
 800b394:	e002      	b.n	800b39c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b396:	bf00      	nop
 800b398:	e000      	b.n	800b39c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b39a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d108      	bne.n	800b3b4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b3a2:	4b4c      	ldr	r3, [pc, #304]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	f023 0203 	bic.w	r2, r3, #3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4949      	ldr	r1, [pc, #292]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 8086 	bne.w	800b4c8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b3bc:	4b45      	ldr	r3, [pc, #276]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a44      	ldr	r2, [pc, #272]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3c8:	f7fb fb4c 	bl	8006a64 <HAL_GetTick>
 800b3cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b3ce:	e009      	b.n	800b3e4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b3d0:	f7fb fb48 	bl	8006a64 <HAL_GetTick>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d902      	bls.n	800b3e4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	73fb      	strb	r3, [r7, #15]
        break;
 800b3e2:	e005      	b.n	800b3f0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b3e4:	4b3b      	ldr	r3, [pc, #236]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1ef      	bne.n	800b3d0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d168      	bne.n	800b4c8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d113      	bne.n	800b424 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b3fc:	4b35      	ldr	r3, [pc, #212]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3fe:	691a      	ldr	r2, [r3, #16]
 800b400:	4b35      	ldr	r3, [pc, #212]	@ (800b4d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b402:	4013      	ands	r3, r2
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	6892      	ldr	r2, [r2, #8]
 800b408:	0211      	lsls	r1, r2, #8
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	68d2      	ldr	r2, [r2, #12]
 800b40e:	06d2      	lsls	r2, r2, #27
 800b410:	4311      	orrs	r1, r2
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	6852      	ldr	r2, [r2, #4]
 800b416:	3a01      	subs	r2, #1
 800b418:	0112      	lsls	r2, r2, #4
 800b41a:	430a      	orrs	r2, r1
 800b41c:	492d      	ldr	r1, [pc, #180]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	610b      	str	r3, [r1, #16]
 800b422:	e02d      	b.n	800b480 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d115      	bne.n	800b456 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b42a:	4b2a      	ldr	r3, [pc, #168]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b42c:	691a      	ldr	r2, [r3, #16]
 800b42e:	4b2b      	ldr	r3, [pc, #172]	@ (800b4dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800b430:	4013      	ands	r3, r2
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	6892      	ldr	r2, [r2, #8]
 800b436:	0211      	lsls	r1, r2, #8
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	6912      	ldr	r2, [r2, #16]
 800b43c:	0852      	lsrs	r2, r2, #1
 800b43e:	3a01      	subs	r2, #1
 800b440:	0552      	lsls	r2, r2, #21
 800b442:	4311      	orrs	r1, r2
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	6852      	ldr	r2, [r2, #4]
 800b448:	3a01      	subs	r2, #1
 800b44a:	0112      	lsls	r2, r2, #4
 800b44c:	430a      	orrs	r2, r1
 800b44e:	4921      	ldr	r1, [pc, #132]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b450:	4313      	orrs	r3, r2
 800b452:	610b      	str	r3, [r1, #16]
 800b454:	e014      	b.n	800b480 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b456:	4b1f      	ldr	r3, [pc, #124]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b458:	691a      	ldr	r2, [r3, #16]
 800b45a:	4b21      	ldr	r3, [pc, #132]	@ (800b4e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b45c:	4013      	ands	r3, r2
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	6892      	ldr	r2, [r2, #8]
 800b462:	0211      	lsls	r1, r2, #8
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	6952      	ldr	r2, [r2, #20]
 800b468:	0852      	lsrs	r2, r2, #1
 800b46a:	3a01      	subs	r2, #1
 800b46c:	0652      	lsls	r2, r2, #25
 800b46e:	4311      	orrs	r1, r2
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6852      	ldr	r2, [r2, #4]
 800b474:	3a01      	subs	r2, #1
 800b476:	0112      	lsls	r2, r2, #4
 800b478:	430a      	orrs	r2, r1
 800b47a:	4916      	ldr	r1, [pc, #88]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b480:	4b14      	ldr	r3, [pc, #80]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a13      	ldr	r2, [pc, #76]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b486:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b48a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b48c:	f7fb faea 	bl	8006a64 <HAL_GetTick>
 800b490:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b492:	e009      	b.n	800b4a8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b494:	f7fb fae6 	bl	8006a64 <HAL_GetTick>
 800b498:	4602      	mov	r2, r0
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d902      	bls.n	800b4a8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	73fb      	strb	r3, [r7, #15]
          break;
 800b4a6:	e005      	b.n	800b4b4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d0ef      	beq.n	800b494 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d106      	bne.n	800b4c8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b4ba:	4b06      	ldr	r3, [pc, #24]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4bc:	691a      	ldr	r2, [r3, #16]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	4904      	ldr	r1, [pc, #16]	@ (800b4d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	40021000 	.word	0x40021000
 800b4d8:	07ff800f 	.word	0x07ff800f
 800b4dc:	ff9f800f 	.word	0xff9f800f
 800b4e0:	f9ff800f 	.word	0xf9ff800f

0800b4e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4f2:	4b72      	ldr	r3, [pc, #456]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00e      	beq.n	800b51c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b4fe:	4b6f      	ldr	r3, [pc, #444]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	f003 0203 	and.w	r2, r3, #3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d103      	bne.n	800b516 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
       ||
 800b512:	2b00      	cmp	r3, #0
 800b514:	d142      	bne.n	800b59c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	73fb      	strb	r3, [r7, #15]
 800b51a:	e03f      	b.n	800b59c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b03      	cmp	r3, #3
 800b522:	d018      	beq.n	800b556 <RCCEx_PLLSAI2_Config+0x72>
 800b524:	2b03      	cmp	r3, #3
 800b526:	d825      	bhi.n	800b574 <RCCEx_PLLSAI2_Config+0x90>
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d002      	beq.n	800b532 <RCCEx_PLLSAI2_Config+0x4e>
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d009      	beq.n	800b544 <RCCEx_PLLSAI2_Config+0x60>
 800b530:	e020      	b.n	800b574 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b532:	4b62      	ldr	r3, [pc, #392]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 0302 	and.w	r3, r3, #2
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d11d      	bne.n	800b57a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b542:	e01a      	b.n	800b57a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b544:	4b5d      	ldr	r3, [pc, #372]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d116      	bne.n	800b57e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b554:	e013      	b.n	800b57e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b556:	4b59      	ldr	r3, [pc, #356]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10f      	bne.n	800b582 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b562:	4b56      	ldr	r3, [pc, #344]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d109      	bne.n	800b582 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b572:	e006      	b.n	800b582 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
      break;
 800b578:	e004      	b.n	800b584 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b57a:	bf00      	nop
 800b57c:	e002      	b.n	800b584 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b57e:	bf00      	nop
 800b580:	e000      	b.n	800b584 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b582:	bf00      	nop
    }

    if(status == HAL_OK)
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d108      	bne.n	800b59c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b58a:	4b4c      	ldr	r3, [pc, #304]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f023 0203 	bic.w	r2, r3, #3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4949      	ldr	r1, [pc, #292]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b598:	4313      	orrs	r3, r2
 800b59a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f040 8086 	bne.w	800b6b0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b5a4:	4b45      	ldr	r3, [pc, #276]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a44      	ldr	r2, [pc, #272]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5b0:	f7fb fa58 	bl	8006a64 <HAL_GetTick>
 800b5b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b5b6:	e009      	b.n	800b5cc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b5b8:	f7fb fa54 	bl	8006a64 <HAL_GetTick>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d902      	bls.n	800b5cc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	73fb      	strb	r3, [r7, #15]
        break;
 800b5ca:	e005      	b.n	800b5d8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b5cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1ef      	bne.n	800b5b8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d168      	bne.n	800b6b0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d113      	bne.n	800b60c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b5e4:	4b35      	ldr	r3, [pc, #212]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5e6:	695a      	ldr	r2, [r3, #20]
 800b5e8:	4b35      	ldr	r3, [pc, #212]	@ (800b6c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	6892      	ldr	r2, [r2, #8]
 800b5f0:	0211      	lsls	r1, r2, #8
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	68d2      	ldr	r2, [r2, #12]
 800b5f6:	06d2      	lsls	r2, r2, #27
 800b5f8:	4311      	orrs	r1, r2
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	6852      	ldr	r2, [r2, #4]
 800b5fe:	3a01      	subs	r2, #1
 800b600:	0112      	lsls	r2, r2, #4
 800b602:	430a      	orrs	r2, r1
 800b604:	492d      	ldr	r1, [pc, #180]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b606:	4313      	orrs	r3, r2
 800b608:	614b      	str	r3, [r1, #20]
 800b60a:	e02d      	b.n	800b668 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d115      	bne.n	800b63e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b612:	4b2a      	ldr	r3, [pc, #168]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b614:	695a      	ldr	r2, [r3, #20]
 800b616:	4b2b      	ldr	r3, [pc, #172]	@ (800b6c4 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b618:	4013      	ands	r3, r2
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	6892      	ldr	r2, [r2, #8]
 800b61e:	0211      	lsls	r1, r2, #8
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	6912      	ldr	r2, [r2, #16]
 800b624:	0852      	lsrs	r2, r2, #1
 800b626:	3a01      	subs	r2, #1
 800b628:	0552      	lsls	r2, r2, #21
 800b62a:	4311      	orrs	r1, r2
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	6852      	ldr	r2, [r2, #4]
 800b630:	3a01      	subs	r2, #1
 800b632:	0112      	lsls	r2, r2, #4
 800b634:	430a      	orrs	r2, r1
 800b636:	4921      	ldr	r1, [pc, #132]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b638:	4313      	orrs	r3, r2
 800b63a:	614b      	str	r3, [r1, #20]
 800b63c:	e014      	b.n	800b668 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b63e:	4b1f      	ldr	r3, [pc, #124]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b640:	695a      	ldr	r2, [r3, #20]
 800b642:	4b21      	ldr	r3, [pc, #132]	@ (800b6c8 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b644:	4013      	ands	r3, r2
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	6892      	ldr	r2, [r2, #8]
 800b64a:	0211      	lsls	r1, r2, #8
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	6952      	ldr	r2, [r2, #20]
 800b650:	0852      	lsrs	r2, r2, #1
 800b652:	3a01      	subs	r2, #1
 800b654:	0652      	lsls	r2, r2, #25
 800b656:	4311      	orrs	r1, r2
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	6852      	ldr	r2, [r2, #4]
 800b65c:	3a01      	subs	r2, #1
 800b65e:	0112      	lsls	r2, r2, #4
 800b660:	430a      	orrs	r2, r1
 800b662:	4916      	ldr	r1, [pc, #88]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b664:	4313      	orrs	r3, r2
 800b666:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b668:	4b14      	ldr	r3, [pc, #80]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a13      	ldr	r2, [pc, #76]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b66e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b672:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b674:	f7fb f9f6 	bl	8006a64 <HAL_GetTick>
 800b678:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b67a:	e009      	b.n	800b690 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b67c:	f7fb f9f2 	bl	8006a64 <HAL_GetTick>
 800b680:	4602      	mov	r2, r0
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	2b02      	cmp	r3, #2
 800b688:	d902      	bls.n	800b690 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	73fb      	strb	r3, [r7, #15]
          break;
 800b68e:	e005      	b.n	800b69c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b690:	4b0a      	ldr	r3, [pc, #40]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0ef      	beq.n	800b67c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d106      	bne.n	800b6b0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b6a2:	4b06      	ldr	r3, [pc, #24]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6a4:	695a      	ldr	r2, [r3, #20]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	4904      	ldr	r1, [pc, #16]	@ (800b6bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	40021000 	.word	0x40021000
 800b6c0:	07ff800f 	.word	0x07ff800f
 800b6c4:	ff9f800f 	.word	0xff9f800f
 800b6c8:	f9ff800f 	.word	0xf9ff800f

0800b6cc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b089      	sub	sp, #36	@ 0x24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6e8:	d10b      	bne.n	800b702 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b6ea:	4b7e      	ldr	r3, [pc, #504]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b6ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b6f0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b6f4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	2b60      	cmp	r3, #96	@ 0x60
 800b6fa:	d112      	bne.n	800b722 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b6fc:	4b7a      	ldr	r3, [pc, #488]	@ (800b8e8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b6fe:	61fb      	str	r3, [r7, #28]
 800b700:	e00f      	b.n	800b722 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b708:	d10b      	bne.n	800b722 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b70a:	4b76      	ldr	r3, [pc, #472]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b70c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b710:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b714:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b71c:	d101      	bne.n	800b722 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b71e:	4b72      	ldr	r3, [pc, #456]	@ (800b8e8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b720:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	2b00      	cmp	r3, #0
 800b726:	f040 80d6 	bne.w	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	2b40      	cmp	r3, #64	@ 0x40
 800b732:	d003      	beq.n	800b73c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b73a:	d13b      	bne.n	800b7b4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b73c:	4b69      	ldr	r3, [pc, #420]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b748:	f040 80c4 	bne.w	800b8d4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800b74c:	4b65      	ldr	r3, [pc, #404]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 80bd 	beq.w	800b8d4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b75a:	4b62      	ldr	r3, [pc, #392]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	091b      	lsrs	r3, r3, #4
 800b760:	f003 030f 	and.w	r3, r3, #15
 800b764:	3301      	adds	r3, #1
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	fbb2 f3f3 	udiv	r3, r2, r3
 800b76c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b76e:	4b5d      	ldr	r3, [pc, #372]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	0a1b      	lsrs	r3, r3, #8
 800b774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b778:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b77a:	4b5a      	ldr	r3, [pc, #360]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	0edb      	lsrs	r3, r3, #27
 800b780:	f003 031f 	and.w	r3, r3, #31
 800b784:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b78c:	4b55      	ldr	r3, [pc, #340]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800b798:	2311      	movs	r3, #17
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	e001      	b.n	800b7a2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800b79e:	2307      	movs	r3, #7
 800b7a0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	fb03 f202 	mul.w	r2, r3, r2
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b7b2:	e08f      	b.n	800b8d4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d13a      	bne.n	800b830 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800b7ba:	4b4a      	ldr	r3, [pc, #296]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7c6:	f040 8086 	bne.w	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b7ca:	4b46      	ldr	r3, [pc, #280]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d07f      	beq.n	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b7d6:	4b43      	ldr	r3, [pc, #268]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	091b      	lsrs	r3, r3, #4
 800b7dc:	f003 030f 	and.w	r3, r3, #15
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b7ea:	4b3e      	ldr	r3, [pc, #248]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	0a1b      	lsrs	r3, r3, #8
 800b7f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800b7f6:	4b3b      	ldr	r3, [pc, #236]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	0edb      	lsrs	r3, r3, #27
 800b7fc:	f003 031f 	and.w	r3, r3, #31
 800b800:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10a      	bne.n	800b81e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800b808:	4b36      	ldr	r3, [pc, #216]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800b814:	2311      	movs	r3, #17
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	e001      	b.n	800b81e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800b81a:	2307      	movs	r3, #7
 800b81c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	fb03 f202 	mul.w	r2, r3, r2
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82c:	61fb      	str	r3, [r7, #28]
 800b82e:	e052      	b.n	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	2b80      	cmp	r3, #128	@ 0x80
 800b834:	d003      	beq.n	800b83e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b83c:	d109      	bne.n	800b852 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b83e:	4b29      	ldr	r3, [pc, #164]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b84a:	d144      	bne.n	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800b84c:	4b27      	ldr	r3, [pc, #156]	@ (800b8ec <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800b84e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b850:	e041      	b.n	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b20      	cmp	r3, #32
 800b856:	d003      	beq.n	800b860 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b85e:	d13a      	bne.n	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800b860:	4b20      	ldr	r3, [pc, #128]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b86c:	d133      	bne.n	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b86e:	4b1d      	ldr	r3, [pc, #116]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b876:	2b00      	cmp	r3, #0
 800b878:	d02d      	beq.n	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800b87a:	4b1a      	ldr	r3, [pc, #104]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	091b      	lsrs	r3, r3, #4
 800b880:	f003 030f 	and.w	r3, r3, #15
 800b884:	3301      	adds	r3, #1
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b88e:	4b15      	ldr	r3, [pc, #84]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	0a1b      	lsrs	r3, r3, #8
 800b894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b898:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800b89a:	4b12      	ldr	r3, [pc, #72]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	0edb      	lsrs	r3, r3, #27
 800b8a0:	f003 031f 	and.w	r3, r3, #31
 800b8a4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800b8ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b8e4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800b8b8:	2311      	movs	r3, #17
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	e001      	b.n	800b8c2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800b8be:	2307      	movs	r3, #7
 800b8c0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	fb03 f202 	mul.w	r2, r3, r2
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d0:	61fb      	str	r3, [r7, #28]
 800b8d2:	e000      	b.n	800b8d6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b8d4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800b8d6:	69fb      	ldr	r3, [r7, #28]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3724      	adds	r7, #36	@ 0x24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	40021000 	.word	0x40021000
 800b8e8:	001fff68 	.word	0x001fff68
 800b8ec:	00f42400 	.word	0x00f42400

0800b8f0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b02      	cmp	r3, #2
 800b902:	d904      	bls.n	800b90e <HAL_SAI_InitProtocol+0x1e>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	3b03      	subs	r3, #3
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d812      	bhi.n	800b932 <HAL_SAI_InitProtocol+0x42>
 800b90c:	e008      	b.n	800b920 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	68b9      	ldr	r1, [r7, #8]
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 f9fb 	bl	800bd10 <SAI_InitI2S>
 800b91a:	4603      	mov	r3, r0
 800b91c:	75fb      	strb	r3, [r7, #23]
      break;
 800b91e:	e00b      	b.n	800b938 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	68b9      	ldr	r1, [r7, #8]
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 faa4 	bl	800be74 <SAI_InitPCM>
 800b92c:	4603      	mov	r3, r0
 800b92e:	75fb      	strb	r3, [r7, #23]
      break;
 800b930:	e002      	b.n	800b938 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	75fb      	strb	r3, [r7, #23]
      break;
 800b936:	bf00      	nop
  }

  if (status == HAL_OK)
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d104      	bne.n	800b948 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 f808 	bl	800b954 <HAL_SAI_Init>
 800b944:	4603      	mov	r3, r0
 800b946:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b948:	7dfb      	ldrb	r3, [r7, #23]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
	...

0800b954 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08a      	sub	sp, #40	@ 0x28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e1c7      	b.n	800bcf6 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d10e      	bne.n	800b98e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a81      	ldr	r2, [pc, #516]	@ (800bb7c <HAL_SAI_Init+0x228>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d107      	bne.n	800b98a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d103      	bne.n	800b98a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e1b3      	b.n	800bcf6 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d106      	bne.n	800b9a8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7f8 fe30 	bl	8004608 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fae5 	bl	800bf78 <SAI_Disable>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e19e      	b.n	800bcf6 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d00c      	beq.n	800b9e2 <HAL_SAI_Init+0x8e>
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d80d      	bhi.n	800b9e8 <HAL_SAI_Init+0x94>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <HAL_SAI_Init+0x82>
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d003      	beq.n	800b9dc <HAL_SAI_Init+0x88>
 800b9d4:	e008      	b.n	800b9e8 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b9da:	e008      	b.n	800b9ee <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b9dc:	2310      	movs	r3, #16
 800b9de:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b9e0:	e005      	b.n	800b9ee <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b9e2:	2320      	movs	r3, #32
 800b9e4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b9e6:	e002      	b.n	800b9ee <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b9ec:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d81d      	bhi.n	800ba32 <HAL_SAI_Init+0xde>
 800b9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9fc <HAL_SAI_Init+0xa8>)
 800b9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fc:	0800ba0d 	.word	0x0800ba0d
 800ba00:	0800ba13 	.word	0x0800ba13
 800ba04:	0800ba1b 	.word	0x0800ba1b
 800ba08:	0800ba23 	.word	0x0800ba23
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	61fb      	str	r3, [r7, #28]
      break;
 800ba10:	e012      	b.n	800ba38 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ba12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba16:	61fb      	str	r3, [r7, #28]
      break;
 800ba18:	e00e      	b.n	800ba38 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ba1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba1e:	61fb      	str	r3, [r7, #28]
      break;
 800ba20:	e00a      	b.n	800ba38 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ba22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba26:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	f043 0301 	orr.w	r3, r3, #1
 800ba2e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ba30:	e002      	b.n	800ba38 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	61fb      	str	r3, [r7, #28]
      break;
 800ba36:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a4f      	ldr	r2, [pc, #316]	@ (800bb7c <HAL_SAI_Init+0x228>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d004      	beq.n	800ba4c <HAL_SAI_Init+0xf8>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a4e      	ldr	r2, [pc, #312]	@ (800bb80 <HAL_SAI_Init+0x22c>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d103      	bne.n	800ba54 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800ba4c:	4a4d      	ldr	r2, [pc, #308]	@ (800bb84 <HAL_SAI_Init+0x230>)
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	e002      	b.n	800ba5a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ba54:	4a4c      	ldr	r2, [pc, #304]	@ (800bb88 <HAL_SAI_Init+0x234>)
 800ba56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba58:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d073      	beq.n	800bb4a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a45      	ldr	r2, [pc, #276]	@ (800bb7c <HAL_SAI_Init+0x228>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d004      	beq.n	800ba76 <HAL_SAI_Init+0x122>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a43      	ldr	r2, [pc, #268]	@ (800bb80 <HAL_SAI_Init+0x22c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d105      	bne.n	800ba82 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ba76:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ba7a:	f7fe fd0d 	bl	800a498 <HAL_RCCEx_GetPeriphCLKFreq>
 800ba7e:	61b8      	str	r0, [r7, #24]
 800ba80:	e004      	b.n	800ba8c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ba82:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ba86:	f7fe fd07 	bl	800a498 <HAL_RCCEx_GetPeriphCLKFreq>
 800ba8a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	695b      	ldr	r3, [r3, #20]
 800ba90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ba94:	d120      	bne.n	800bad8 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba9a:	2b04      	cmp	r3, #4
 800ba9c:	d102      	bne.n	800baa4 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800ba9e:	2340      	movs	r3, #64	@ 0x40
 800baa0:	613b      	str	r3, [r7, #16]
 800baa2:	e00a      	b.n	800baba <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa8:	2b08      	cmp	r3, #8
 800baaa:	d103      	bne.n	800bab4 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800baac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bab0:	613b      	str	r3, [r7, #16]
 800bab2:	e002      	b.n	800baba <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bab8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800baba:	69ba      	ldr	r2, [r7, #24]
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	4619      	mov	r1, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	fb02 f303 	mul.w	r3, r2, r3
 800bad0:	fbb1 f3f3 	udiv	r3, r1, r3
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	e017      	b.n	800bb08 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800badc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bae0:	d101      	bne.n	800bae6 <HAL_SAI_Init+0x192>
 800bae2:	2302      	movs	r3, #2
 800bae4:	e000      	b.n	800bae8 <HAL_SAI_Init+0x194>
 800bae6:	2301      	movs	r3, #1
 800bae8:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800baea:	69ba      	ldr	r2, [r7, #24]
 800baec:	4613      	mov	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4413      	add	r3, r2
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	4619      	mov	r1, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	fb02 f303 	mul.w	r3, r2, r3
 800bb00:	021b      	lsls	r3, r3, #8
 800bb02:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb06:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	4a20      	ldr	r2, [pc, #128]	@ (800bb8c <HAL_SAI_Init+0x238>)
 800bb0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb10:	08da      	lsrs	r2, r3, #3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800bb16:	6979      	ldr	r1, [r7, #20]
 800bb18:	4b1c      	ldr	r3, [pc, #112]	@ (800bb8c <HAL_SAI_Init+0x238>)
 800bb1a:	fba3 2301 	umull	r2, r3, r3, r1
 800bb1e:	08da      	lsrs	r2, r3, #3
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	1aca      	subs	r2, r1, r3
 800bb2a:	2a08      	cmp	r2, #8
 800bb2c:	d904      	bls.n	800bb38 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb3c:	2b04      	cmp	r3, #4
 800bb3e:	d104      	bne.n	800bb4a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a1b      	ldr	r3, [r3, #32]
 800bb44:	085a      	lsrs	r2, r3, #1
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <HAL_SAI_Init+0x206>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d109      	bne.n	800bb6e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d101      	bne.n	800bb66 <HAL_SAI_Init+0x212>
 800bb62:	2300      	movs	r3, #0
 800bb64:	e001      	b.n	800bb6a <HAL_SAI_Init+0x216>
 800bb66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb6a:	623b      	str	r3, [r7, #32]
 800bb6c:	e012      	b.n	800bb94 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d10c      	bne.n	800bb90 <HAL_SAI_Init+0x23c>
 800bb76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb7a:	e00a      	b.n	800bb92 <HAL_SAI_Init+0x23e>
 800bb7c:	40015404 	.word	0x40015404
 800bb80:	40015424 	.word	0x40015424
 800bb84:	40015400 	.word	0x40015400
 800bb88:	40015800 	.word	0x40015800
 800bb8c:	cccccccd 	.word	0xcccccccd
 800bb90:	2300      	movs	r3, #0
 800bb92:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6819      	ldr	r1, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	4b58      	ldr	r3, [pc, #352]	@ (800bd00 <HAL_SAI_Init+0x3ac>)
 800bba0:	400b      	ands	r3, r1
 800bba2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6819      	ldr	r1, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bbb8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbbe:	431a      	orrs	r2, r3
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800bbcc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bbd8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	051b      	lsls	r3, r3, #20
 800bbe0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bbe6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	430a      	orrs	r2, r1
 800bbee:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	6812      	ldr	r2, [r2, #0]
 800bbfa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800bbfe:	f023 030f 	bic.w	r3, r3, #15
 800bc02:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6859      	ldr	r1, [r3, #4]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	699a      	ldr	r2, [r3, #24]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc12:	431a      	orrs	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc18:	431a      	orrs	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	6899      	ldr	r1, [r3, #8]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	4b35      	ldr	r3, [pc, #212]	@ (800bd04 <HAL_SAI_Init+0x3b0>)
 800bc2e:	400b      	ands	r3, r1
 800bc30:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6899      	ldr	r1, [r3, #8]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc3c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bc42:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800bc48:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800bc4e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc54:	3b01      	subs	r3, #1
 800bc56:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bc58:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68d9      	ldr	r1, [r3, #12]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800bc70:	400b      	ands	r3, r1
 800bc72:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68d9      	ldr	r1, [r3, #12]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc82:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc88:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bc8a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc90:	3b01      	subs	r3, #1
 800bc92:	021b      	lsls	r3, r3, #8
 800bc94:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a19      	ldr	r2, [pc, #100]	@ (800bd08 <HAL_SAI_Init+0x3b4>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d119      	bne.n	800bcdc <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bca8:	4b18      	ldr	r3, [pc, #96]	@ (800bd0c <HAL_SAI_Init+0x3b8>)
 800bcaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcac:	4a17      	ldr	r2, [pc, #92]	@ (800bd0c <HAL_SAI_Init+0x3b8>)
 800bcae:	f023 0301 	bic.w	r3, r3, #1
 800bcb2:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d10e      	bne.n	800bcdc <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bcca:	4910      	ldr	r1, [pc, #64]	@ (800bd0c <HAL_SAI_Init+0x3b8>)
 800bccc:	4313      	orrs	r3, r2
 800bcce:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800bcd0:	4b0e      	ldr	r3, [pc, #56]	@ (800bd0c <HAL_SAI_Init+0x3b8>)
 800bcd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcd4:	4a0d      	ldr	r2, [pc, #52]	@ (800bd0c <HAL_SAI_Init+0x3b8>)
 800bcd6:	f043 0301 	orr.w	r3, r3, #1
 800bcda:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3728      	adds	r7, #40	@ 0x28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	f805c010 	.word	0xf805c010
 800bd04:	fff88000 	.word	0xfff88000
 800bd08:	40015404 	.word	0x40015404
 800bd0c:	40015400 	.word	0x40015400

0800bd10 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <SAI_InitI2S+0x2e>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d103      	bne.n	800bd46 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bd44:	e002      	b.n	800bd4c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800bd52:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd5a:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e077      	b.n	800be66 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d107      	bne.n	800bd8c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bd88:	661a      	str	r2, [r3, #96]	@ 0x60
 800bd8a:	e006      	b.n	800bd9a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800bd92:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	d84f      	bhi.n	800be40 <SAI_InitI2S+0x130>
 800bda0:	a201      	add	r2, pc, #4	@ (adr r2, 800bda8 <SAI_InitI2S+0x98>)
 800bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda6:	bf00      	nop
 800bda8:	0800bdb9 	.word	0x0800bdb9
 800bdac:	0800bddb 	.word	0x0800bddb
 800bdb0:	0800bdfd 	.word	0x0800bdfd
 800bdb4:	0800be1f 	.word	0x0800be1f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2280      	movs	r2, #128	@ 0x80
 800bdbc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	085b      	lsrs	r3, r3, #1
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	085b      	lsrs	r3, r3, #1
 800bdcc:	011a      	lsls	r2, r3, #4
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2240      	movs	r2, #64	@ 0x40
 800bdd6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bdd8:	e035      	b.n	800be46 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2280      	movs	r2, #128	@ 0x80
 800bdde:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	085b      	lsrs	r3, r3, #1
 800bde4:	019a      	lsls	r2, r3, #6
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	085b      	lsrs	r3, r3, #1
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2280      	movs	r2, #128	@ 0x80
 800bdf8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bdfa:	e024      	b.n	800be46 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	22c0      	movs	r2, #192	@ 0xc0
 800be00:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	085b      	lsrs	r3, r3, #1
 800be06:	019a      	lsls	r2, r3, #6
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	085b      	lsrs	r3, r3, #1
 800be10:	015a      	lsls	r2, r3, #5
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2280      	movs	r2, #128	@ 0x80
 800be1a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800be1c:	e013      	b.n	800be46 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	22e0      	movs	r2, #224	@ 0xe0
 800be22:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	085b      	lsrs	r3, r3, #1
 800be28:	019a      	lsls	r2, r3, #6
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	085b      	lsrs	r3, r3, #1
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2280      	movs	r2, #128	@ 0x80
 800be3c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800be3e:	e002      	b.n	800be46 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	75fb      	strb	r3, [r7, #23]
      break;
 800be44:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d10b      	bne.n	800be64 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d102      	bne.n	800be58 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2210      	movs	r2, #16
 800be56:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d102      	bne.n	800be64 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2208      	movs	r2, #8
 800be62:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 800be64:	7dfb      	ldrb	r3, [r7, #23]
}
 800be66:	4618      	mov	r0, r3
 800be68:	371c      	adds	r7, #28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop

0800be74 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d003      	beq.n	800bea2 <SAI_InitPCM+0x2e>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d103      	bne.n	800beaa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2201      	movs	r2, #1
 800bea6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bea8:	e002      	b.n	800beb0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800bebc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bec4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bed8:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2b04      	cmp	r3, #4
 800bede:	d103      	bne.n	800bee8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2201      	movs	r2, #1
 800bee4:	655a      	str	r2, [r3, #84]	@ 0x54
 800bee6:	e002      	b.n	800beee <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	220d      	movs	r2, #13
 800beec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d837      	bhi.n	800bf64 <SAI_InitPCM+0xf0>
 800bef4:	a201      	add	r2, pc, #4	@ (adr r2, 800befc <SAI_InitPCM+0x88>)
 800bef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befa:	bf00      	nop
 800befc:	0800bf0d 	.word	0x0800bf0d
 800bf00:	0800bf23 	.word	0x0800bf23
 800bf04:	0800bf39 	.word	0x0800bf39
 800bf08:	0800bf4f 	.word	0x0800bf4f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2280      	movs	r2, #128	@ 0x80
 800bf10:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	011a      	lsls	r2, r3, #4
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2240      	movs	r2, #64	@ 0x40
 800bf1e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bf20:	e023      	b.n	800bf6a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2280      	movs	r2, #128	@ 0x80
 800bf26:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2280      	movs	r2, #128	@ 0x80
 800bf34:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bf36:	e018      	b.n	800bf6a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	22c0      	movs	r2, #192	@ 0xc0
 800bf3c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	015a      	lsls	r2, r3, #5
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2280      	movs	r2, #128	@ 0x80
 800bf4a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bf4c:	e00d      	b.n	800bf6a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	22e0      	movs	r2, #224	@ 0xe0
 800bf52:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	015a      	lsls	r2, r3, #5
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2280      	movs	r2, #128	@ 0x80
 800bf60:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bf62:	e002      	b.n	800bf6a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	75fb      	strb	r3, [r7, #23]
      break;
 800bf68:	bf00      	nop
  }

  return status;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	371c      	adds	r7, #28
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800bf80:	4b18      	ldr	r3, [pc, #96]	@ (800bfe4 <SAI_Disable+0x6c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a18      	ldr	r2, [pc, #96]	@ (800bfe8 <SAI_Disable+0x70>)
 800bf86:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8a:	0b1b      	lsrs	r3, r3, #12
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bfa2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10a      	bne.n	800bfc0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	72fb      	strb	r3, [r7, #11]
      break;
 800bfbe:	e009      	b.n	800bfd4 <SAI_Disable+0x5c>
    }
    count--;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e7      	bne.n	800bfa4 <SAI_Disable+0x2c>

  return status;
 800bfd4:	7afb      	ldrb	r3, [r7, #11]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	20000024 	.word	0x20000024
 800bfe8:	95cbec1b 	.word	0x95cbec1b

0800bfec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e095      	b.n	800c12a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c002:	2b00      	cmp	r3, #0
 800c004:	d108      	bne.n	800c018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c00e:	d009      	beq.n	800c024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	61da      	str	r2, [r3, #28]
 800c016:	e005      	b.n	800c024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7f8 f886 	bl	8004150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2202      	movs	r2, #2
 800c048:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c05a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c064:	d902      	bls.n	800c06c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c066:	2300      	movs	r3, #0
 800c068:	60fb      	str	r3, [r7, #12]
 800c06a:	e002      	b.n	800c072 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c06c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c070:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c07a:	d007      	beq.n	800c08c <HAL_SPI_Init+0xa0>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c084:	d002      	beq.n	800c08c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c09c:	431a      	orrs	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	f003 0302 	and.w	r3, r3, #2
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	431a      	orrs	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	69db      	ldr	r3, [r3, #28]
 800c0c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c0c4:	431a      	orrs	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a1b      	ldr	r3, [r3, #32]
 800c0ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0ce:	ea42 0103 	orr.w	r1, r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	0c1b      	lsrs	r3, r3, #16
 800c0e8:	f003 0204 	and.w	r2, r3, #4
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0f0:	f003 0310 	and.w	r3, r3, #16
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0fa:	f003 0308 	and.w	r3, r3, #8
 800c0fe:	431a      	orrs	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c108:	ea42 0103 	orr.w	r1, r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b088      	sub	sp, #32
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	603b      	str	r3, [r7, #0]
 800c13e:	4613      	mov	r3, r2
 800c140:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d101      	bne.n	800c154 <HAL_SPI_Transmit+0x22>
 800c150:	2302      	movs	r3, #2
 800c152:	e15f      	b.n	800c414 <HAL_SPI_Transmit+0x2e2>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c15c:	f7fa fc82 	bl	8006a64 <HAL_GetTick>
 800c160:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c162:	88fb      	ldrh	r3, [r7, #6]
 800c164:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d002      	beq.n	800c178 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c172:	2302      	movs	r3, #2
 800c174:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c176:	e148      	b.n	800c40a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <HAL_SPI_Transmit+0x52>
 800c17e:	88fb      	ldrh	r3, [r7, #6]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c188:	e13f      	b.n	800c40a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2203      	movs	r2, #3
 800c18e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	68ba      	ldr	r2, [r7, #8]
 800c19c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	88fa      	ldrh	r2, [r7, #6]
 800c1a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	88fa      	ldrh	r2, [r7, #6]
 800c1a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1d4:	d10f      	bne.n	800c1f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c1e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c1f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c200:	2b40      	cmp	r3, #64	@ 0x40
 800c202:	d007      	beq.n	800c214 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c21c:	d94f      	bls.n	800c2be <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <HAL_SPI_Transmit+0xfa>
 800c226:	8afb      	ldrh	r3, [r7, #22]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d142      	bne.n	800c2b2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c230:	881a      	ldrh	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c23c:	1c9a      	adds	r2, r3, #2
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c246:	b29b      	uxth	r3, r3
 800c248:	3b01      	subs	r3, #1
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c250:	e02f      	b.n	800c2b2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f003 0302 	and.w	r3, r3, #2
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d112      	bne.n	800c286 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c264:	881a      	ldrh	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c270:	1c9a      	adds	r2, r3, #2
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	3b01      	subs	r3, #1
 800c27e:	b29a      	uxth	r2, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c284:	e015      	b.n	800c2b2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c286:	f7fa fbed 	bl	8006a64 <HAL_GetTick>
 800c28a:	4602      	mov	r2, r0
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	429a      	cmp	r2, r3
 800c294:	d803      	bhi.n	800c29e <HAL_SPI_Transmit+0x16c>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29c:	d102      	bne.n	800c2a4 <HAL_SPI_Transmit+0x172>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c2b0:	e0ab      	b.n	800c40a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1ca      	bne.n	800c252 <HAL_SPI_Transmit+0x120>
 800c2bc:	e080      	b.n	800c3c0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d002      	beq.n	800c2cc <HAL_SPI_Transmit+0x19a>
 800c2c6:	8afb      	ldrh	r3, [r7, #22]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d174      	bne.n	800c3b6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d912      	bls.n	800c2fc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2da:	881a      	ldrh	r2, [r3, #0]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e6:	1c9a      	adds	r2, r3, #2
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	3b02      	subs	r3, #2
 800c2f4:	b29a      	uxth	r2, r3
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c2fa:	e05c      	b.n	800c3b6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	330c      	adds	r3, #12
 800c306:	7812      	ldrb	r2, [r2, #0]
 800c308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c30e:	1c5a      	adds	r2, r3, #1
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c318:	b29b      	uxth	r3, r3
 800c31a:	3b01      	subs	r3, #1
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c322:	e048      	b.n	800c3b6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f003 0302 	and.w	r3, r3, #2
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d12b      	bne.n	800c38a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c336:	b29b      	uxth	r3, r3
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d912      	bls.n	800c362 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c340:	881a      	ldrh	r2, [r3, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c34c:	1c9a      	adds	r2, r3, #2
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c356:	b29b      	uxth	r3, r3
 800c358:	3b02      	subs	r3, #2
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c360:	e029      	b.n	800c3b6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	330c      	adds	r3, #12
 800c36c:	7812      	ldrb	r2, [r2, #0]
 800c36e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c37e:	b29b      	uxth	r3, r3
 800c380:	3b01      	subs	r3, #1
 800c382:	b29a      	uxth	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c388:	e015      	b.n	800c3b6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c38a:	f7fa fb6b 	bl	8006a64 <HAL_GetTick>
 800c38e:	4602      	mov	r2, r0
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	429a      	cmp	r2, r3
 800c398:	d803      	bhi.n	800c3a2 <HAL_SPI_Transmit+0x270>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a0:	d102      	bne.n	800c3a8 <HAL_SPI_Transmit+0x276>
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d106      	bne.n	800c3b6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c3b4:	e029      	b.n	800c40a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1b1      	bne.n	800c324 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c3c0:	69ba      	ldr	r2, [r7, #24]
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f001 fa0d 	bl	800d7e4 <SPI_EndRxTxTransaction>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2220      	movs	r2, #32
 800c3d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10a      	bne.n	800c3f4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3de:	2300      	movs	r3, #0
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	613b      	str	r3, [r7, #16]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	613b      	str	r3, [r7, #16]
 800c3f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	77fb      	strb	r3, [r7, #31]
 800c400:	e003      	b.n	800c40a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c412:	7ffb      	ldrb	r3, [r7, #31]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3720      	adds	r7, #32
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af02      	add	r7, sp, #8
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	4613      	mov	r3, r2
 800c42a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d002      	beq.n	800c442 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800c43c:	2302      	movs	r3, #2
 800c43e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c440:	e11a      	b.n	800c678 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c44a:	d112      	bne.n	800c472 <HAL_SPI_Receive+0x56>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10e      	bne.n	800c472 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2204      	movs	r2, #4
 800c458:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c45c:	88fa      	ldrh	r2, [r7, #6]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	4613      	mov	r3, r2
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 f90e 	bl	800c68a <HAL_SPI_TransmitReceive>
 800c46e:	4603      	mov	r3, r0
 800c470:	e107      	b.n	800c682 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d101      	bne.n	800c480 <HAL_SPI_Receive+0x64>
 800c47c:	2302      	movs	r3, #2
 800c47e:	e100      	b.n	800c682 <HAL_SPI_Receive+0x266>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c488:	f7fa faec 	bl	8006a64 <HAL_GetTick>
 800c48c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <HAL_SPI_Receive+0x7e>
 800c494:	88fb      	ldrh	r3, [r7, #6]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c49e:	e0eb      	b.n	800c678 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2204      	movs	r2, #4
 800c4a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	88fa      	ldrh	r2, [r7, #6]
 800c4b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	88fa      	ldrh	r2, [r7, #6]
 800c4c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c4ea:	d908      	bls.n	800c4fe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685a      	ldr	r2, [r3, #4]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c4fa:	605a      	str	r2, [r3, #4]
 800c4fc:	e007      	b.n	800c50e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c50c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c516:	d10f      	bne.n	800c538 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c526:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c536:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c542:	2b40      	cmp	r3, #64	@ 0x40
 800c544:	d007      	beq.n	800c556 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c554:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c55e:	d86f      	bhi.n	800c640 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c560:	e034      	b.n	800c5cc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f003 0301 	and.w	r3, r3, #1
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d117      	bne.n	800c5a0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f103 020c 	add.w	r2, r3, #12
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c57c:	7812      	ldrb	r2, [r2, #0]
 800c57e:	b2d2      	uxtb	r2, r2
 800c580:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c592:	b29b      	uxth	r3, r3
 800c594:	3b01      	subs	r3, #1
 800c596:	b29a      	uxth	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c59e:	e015      	b.n	800c5cc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5a0:	f7fa fa60 	bl	8006a64 <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d803      	bhi.n	800c5b8 <HAL_SPI_Receive+0x19c>
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b6:	d102      	bne.n	800c5be <HAL_SPI_Receive+0x1a2>
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d106      	bne.n	800c5cc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800c5be:	2303      	movs	r3, #3
 800c5c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c5ca:	e055      	b.n	800c678 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1c4      	bne.n	800c562 <HAL_SPI_Receive+0x146>
 800c5d8:	e038      	b.n	800c64c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d115      	bne.n	800c614 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f2:	b292      	uxth	r2, r2
 800c5f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fa:	1c9a      	adds	r2, r3, #2
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c606:	b29b      	uxth	r3, r3
 800c608:	3b01      	subs	r3, #1
 800c60a:	b29a      	uxth	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c612:	e015      	b.n	800c640 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c614:	f7fa fa26 	bl	8006a64 <HAL_GetTick>
 800c618:	4602      	mov	r2, r0
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d803      	bhi.n	800c62c <HAL_SPI_Receive+0x210>
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62a:	d102      	bne.n	800c632 <HAL_SPI_Receive+0x216>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d106      	bne.n	800c640 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2201      	movs	r2, #1
 800c63a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c63e:	e01b      	b.n	800c678 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c646:	b29b      	uxth	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1c6      	bne.n	800c5da <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f001 f86f 	bl	800d734 <SPI_EndRxTransaction>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2220      	movs	r2, #32
 800c660:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	75fb      	strb	r3, [r7, #23]
 800c66e:	e003      	b.n	800c678 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c680:	7dfb      	ldrb	r3, [r7, #23]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3718      	adds	r7, #24
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b08a      	sub	sp, #40	@ 0x28
 800c68e:	af00      	add	r7, sp, #0
 800c690:	60f8      	str	r0, [r7, #12]
 800c692:	60b9      	str	r1, [r7, #8]
 800c694:	607a      	str	r2, [r7, #4]
 800c696:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c698:	2301      	movs	r3, #1
 800c69a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d101      	bne.n	800c6b0 <HAL_SPI_TransmitReceive+0x26>
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	e20a      	b.n	800cac6 <HAL_SPI_TransmitReceive+0x43c>
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c6b8:	f7fa f9d4 	bl	8006a64 <HAL_GetTick>
 800c6bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c6c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c6cc:	887b      	ldrh	r3, [r7, #2]
 800c6ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c6d0:	887b      	ldrh	r3, [r7, #2]
 800c6d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c6d4:	7efb      	ldrb	r3, [r7, #27]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d00e      	beq.n	800c6f8 <HAL_SPI_TransmitReceive+0x6e>
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c6e0:	d106      	bne.n	800c6f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d102      	bne.n	800c6f0 <HAL_SPI_TransmitReceive+0x66>
 800c6ea:	7efb      	ldrb	r3, [r7, #27]
 800c6ec:	2b04      	cmp	r3, #4
 800c6ee:	d003      	beq.n	800c6f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c6f6:	e1e0      	b.n	800caba <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d005      	beq.n	800c70a <HAL_SPI_TransmitReceive+0x80>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <HAL_SPI_TransmitReceive+0x80>
 800c704:	887b      	ldrh	r3, [r7, #2]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d103      	bne.n	800c712 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c710:	e1d3      	b.n	800caba <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b04      	cmp	r3, #4
 800c71c:	d003      	beq.n	800c726 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2205      	movs	r2, #5
 800c722:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	887a      	ldrh	r2, [r7, #2]
 800c736:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	887a      	ldrh	r2, [r7, #2]
 800c73e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	887a      	ldrh	r2, [r7, #2]
 800c74c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	887a      	ldrh	r2, [r7, #2]
 800c752:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c768:	d802      	bhi.n	800c770 <HAL_SPI_TransmitReceive+0xe6>
 800c76a:	8a3b      	ldrh	r3, [r7, #16]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d908      	bls.n	800c782 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685a      	ldr	r2, [r3, #4]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c77e:	605a      	str	r2, [r3, #4]
 800c780:	e007      	b.n	800c792 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	685a      	ldr	r2, [r3, #4]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c790:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c79c:	2b40      	cmp	r3, #64	@ 0x40
 800c79e:	d007      	beq.n	800c7b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c7ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c7b8:	f240 8081 	bls.w	800c8be <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d002      	beq.n	800c7ca <HAL_SPI_TransmitReceive+0x140>
 800c7c4:	8a7b      	ldrh	r3, [r7, #18]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d16d      	bne.n	800c8a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ce:	881a      	ldrh	r2, [r3, #0]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7da:	1c9a      	adds	r2, r3, #2
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7ee:	e05a      	b.n	800c8a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f003 0302 	and.w	r3, r3, #2
 800c7fa:	2b02      	cmp	r3, #2
 800c7fc:	d11b      	bne.n	800c836 <HAL_SPI_TransmitReceive+0x1ac>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c802:	b29b      	uxth	r3, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d016      	beq.n	800c836 <HAL_SPI_TransmitReceive+0x1ac>
 800c808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d113      	bne.n	800c836 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c812:	881a      	ldrh	r2, [r3, #0]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c81e:	1c9a      	adds	r2, r3, #2
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c828:	b29b      	uxth	r3, r3
 800c82a:	3b01      	subs	r3, #1
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c832:	2300      	movs	r3, #0
 800c834:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b01      	cmp	r3, #1
 800c842:	d11c      	bne.n	800c87e <HAL_SPI_TransmitReceive+0x1f4>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d016      	beq.n	800c87e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68da      	ldr	r2, [r3, #12]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c85a:	b292      	uxth	r2, r2
 800c85c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c862:	1c9a      	adds	r2, r3, #2
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c86e:	b29b      	uxth	r3, r3
 800c870:	3b01      	subs	r3, #1
 800c872:	b29a      	uxth	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c87a:	2301      	movs	r3, #1
 800c87c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c87e:	f7fa f8f1 	bl	8006a64 <HAL_GetTick>
 800c882:	4602      	mov	r2, r0
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d80b      	bhi.n	800c8a6 <HAL_SPI_TransmitReceive+0x21c>
 800c88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c894:	d007      	beq.n	800c8a6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800c8a4:	e109      	b.n	800caba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d19f      	bne.n	800c7f0 <HAL_SPI_TransmitReceive+0x166>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d199      	bne.n	800c7f0 <HAL_SPI_TransmitReceive+0x166>
 800c8bc:	e0e3      	b.n	800ca86 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d003      	beq.n	800c8ce <HAL_SPI_TransmitReceive+0x244>
 800c8c6:	8a7b      	ldrh	r3, [r7, #18]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	f040 80cf 	bne.w	800ca6c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d912      	bls.n	800c8fe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8dc:	881a      	ldrh	r2, [r3, #0]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8e8:	1c9a      	adds	r2, r3, #2
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	3b02      	subs	r3, #2
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c8fc:	e0b6      	b.n	800ca6c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	330c      	adds	r3, #12
 800c908:	7812      	ldrb	r2, [r2, #0]
 800c90a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c910:	1c5a      	adds	r2, r3, #1
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	b29a      	uxth	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c924:	e0a2      	b.n	800ca6c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f003 0302 	and.w	r3, r3, #2
 800c930:	2b02      	cmp	r3, #2
 800c932:	d134      	bne.n	800c99e <HAL_SPI_TransmitReceive+0x314>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c938:	b29b      	uxth	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d02f      	beq.n	800c99e <HAL_SPI_TransmitReceive+0x314>
 800c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c940:	2b01      	cmp	r3, #1
 800c942:	d12c      	bne.n	800c99e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c948:	b29b      	uxth	r3, r3
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d912      	bls.n	800c974 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c952:	881a      	ldrh	r2, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c95e:	1c9a      	adds	r2, r3, #2
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c968:	b29b      	uxth	r3, r3
 800c96a:	3b02      	subs	r3, #2
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c972:	e012      	b.n	800c99a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	330c      	adds	r3, #12
 800c97e:	7812      	ldrb	r2, [r2, #0]
 800c980:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c986:	1c5a      	adds	r2, r3, #1
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c990:	b29b      	uxth	r3, r3
 800c992:	3b01      	subs	r3, #1
 800c994:	b29a      	uxth	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c99a:	2300      	movs	r3, #0
 800c99c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d148      	bne.n	800ca3e <HAL_SPI_TransmitReceive+0x3b4>
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d042      	beq.n	800ca3e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d923      	bls.n	800ca0c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68da      	ldr	r2, [r3, #12]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ce:	b292      	uxth	r2, r2
 800c9d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d6:	1c9a      	adds	r2, r3, #2
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	3b02      	subs	r3, #2
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d81f      	bhi.n	800ca3a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ca08:	605a      	str	r2, [r3, #4]
 800ca0a:	e016      	b.n	800ca3a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f103 020c 	add.w	r2, r3, #12
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca18:	7812      	ldrb	r2, [r2, #0]
 800ca1a:	b2d2      	uxtb	r2, r2
 800ca1c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca22:	1c5a      	adds	r2, r3, #1
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	3b01      	subs	r3, #1
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ca3e:	f7fa f811 	bl	8006a64 <HAL_GetTick>
 800ca42:	4602      	mov	r2, r0
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d803      	bhi.n	800ca56 <HAL_SPI_TransmitReceive+0x3cc>
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca54:	d102      	bne.n	800ca5c <HAL_SPI_TransmitReceive+0x3d2>
 800ca56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d107      	bne.n	800ca6c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800ca6a:	e026      	b.n	800caba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f47f af57 	bne.w	800c926 <HAL_SPI_TransmitReceive+0x29c>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f47f af50 	bne.w	800c926 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f000 feaa 	bl	800d7e4 <SPI_EndRxTxTransaction>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d005      	beq.n	800caa2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2220      	movs	r2, #32
 800caa0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d003      	beq.n	800cab2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800caaa:	2301      	movs	r3, #1
 800caac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cab0:	e003      	b.n	800caba <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cac2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3728      	adds	r7, #40	@ 0x28
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
	...

0800cad0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	4613      	mov	r3, r2
 800cadc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d101      	bne.n	800caf0 <HAL_SPI_Transmit_DMA+0x20>
 800caec:	2302      	movs	r3, #2
 800caee:	e0d4      	b.n	800cc9a <HAL_SPI_Transmit_DMA+0x1ca>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d002      	beq.n	800cb0a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800cb04:	2302      	movs	r3, #2
 800cb06:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cb08:	e0c2      	b.n	800cc90 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d002      	beq.n	800cb16 <HAL_SPI_Transmit_DMA+0x46>
 800cb10:	88fb      	ldrh	r3, [r7, #6]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cb1a:	e0b9      	b.n	800cc90 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2203      	movs	r2, #3
 800cb20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	88fa      	ldrh	r2, [r7, #6]
 800cb34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	88fa      	ldrh	r2, [r7, #6]
 800cb3a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb66:	d10f      	bne.n	800cb88 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cb86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb8c:	4a45      	ldr	r2, [pc, #276]	@ (800cca4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800cb8e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb94:	4a44      	ldr	r2, [pc, #272]	@ (800cca8 <HAL_SPI_Transmit_DMA+0x1d8>)
 800cb96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb9c:	4a43      	ldr	r2, [pc, #268]	@ (800ccac <HAL_SPI_Transmit_DMA+0x1dc>)
 800cb9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cba4:	2200      	movs	r2, #0
 800cba6:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cbb6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cbc0:	d82d      	bhi.n	800cc1e <HAL_SPI_Transmit_DMA+0x14e>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbcc:	d127      	bne.n	800cc1e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10f      	bne.n	800cbfc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cbea:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	085b      	lsrs	r3, r3, #1
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cbfa:	e010      	b.n	800cc1e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc0a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	085b      	lsrs	r3, r3, #1
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	3301      	adds	r3, #1
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc26:	4619      	mov	r1, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	330c      	adds	r3, #12
 800cc2e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc34:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc36:	f7fb f8d2 	bl	8007dde <HAL_DMA_Start_IT>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d008      	beq.n	800cc52 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc44:	f043 0210 	orr.w	r2, r3, #16
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cc50:	e01e      	b.n	800cc90 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc5c:	2b40      	cmp	r3, #64	@ 0x40
 800cc5e:	d007      	beq.n	800cc70 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc6e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f042 0220 	orr.w	r2, r2, #32
 800cc7e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f042 0202 	orr.w	r2, r2, #2
 800cc8e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	0800d463 	.word	0x0800d463
 800cca8:	0800d285 	.word	0x0800d285
 800ccac:	0800d4b7 	.word	0x0800d4b7

0800ccb0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d002      	beq.n	800ccd4 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ccd2:	e0fe      	b.n	800ced2 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d110      	bne.n	800ccfe <HAL_SPI_Receive_DMA+0x4e>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cce4:	d10b      	bne.n	800ccfe <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2204      	movs	r2, #4
 800ccea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ccee:	88fb      	ldrh	r3, [r7, #6]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f000 f8fb 	bl	800cef0 <HAL_SPI_TransmitReceive_DMA>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	e0ee      	b.n	800cedc <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d101      	bne.n	800cd0c <HAL_SPI_Receive_DMA+0x5c>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	e0e7      	b.n	800cedc <HAL_SPI_Receive_DMA+0x22c>
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <HAL_SPI_Receive_DMA+0x70>
 800cd1a:	88fb      	ldrh	r3, [r7, #6]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d102      	bne.n	800cd26 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800cd20:	2301      	movs	r3, #1
 800cd22:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd24:	e0d5      	b.n	800ced2 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2204      	movs	r2, #4
 800cd2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	88fa      	ldrh	r2, [r7, #6]
 800cd3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	88fa      	ldrh	r2, [r7, #6]
 800cd46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd6a:	d10f      	bne.n	800cd8c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cd8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685a      	ldr	r2, [r3, #4]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cd9a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cda4:	d908      	bls.n	800cdb8 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cdb4:	605a      	str	r2, [r3, #4]
 800cdb6:	e042      	b.n	800ce3e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cdc6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdd2:	d134      	bne.n	800ce3e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	685a      	ldr	r2, [r3, #4]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cde2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d111      	bne.n	800ce18 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	685a      	ldr	r2, [r3, #4]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce02:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	085b      	lsrs	r3, r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800ce16:	e012      	b.n	800ce3e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ce26:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	085b      	lsrs	r3, r3, #1
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	3301      	adds	r3, #1
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce42:	4a28      	ldr	r2, [pc, #160]	@ (800cee4 <HAL_SPI_Receive_DMA+0x234>)
 800ce44:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce4a:	4a27      	ldr	r2, [pc, #156]	@ (800cee8 <HAL_SPI_Receive_DMA+0x238>)
 800ce4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce52:	4a26      	ldr	r2, [pc, #152]	@ (800ceec <HAL_SPI_Receive_DMA+0x23c>)
 800ce54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	330c      	adds	r3, #12
 800ce68:	4619      	mov	r1, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ce76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ce78:	f7fa ffb1 	bl	8007dde <HAL_DMA_Start_IT>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d008      	beq.n	800ce94 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce86:	f043 0210 	orr.w	r2, r3, #16
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	75fb      	strb	r3, [r7, #23]

    goto error;
 800ce92:	e01e      	b.n	800ced2 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce9e:	2b40      	cmp	r3, #64	@ 0x40
 800cea0:	d007      	beq.n	800ceb2 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ceb0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f042 0220 	orr.w	r2, r2, #32
 800cec0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f042 0201 	orr.w	r2, r2, #1
 800ced0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	0800d47f 	.word	0x0800d47f
 800cee8:	0800d32b 	.word	0x0800d32b
 800ceec:	0800d4b7 	.word	0x0800d4b7

0800cef0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
 800cefc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d101      	bne.n	800cf10 <HAL_SPI_TransmitReceive_DMA+0x20>
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e164      	b.n	800d1da <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cf1e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800cf26:	7dbb      	ldrb	r3, [r7, #22]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d00d      	beq.n	800cf48 <HAL_SPI_TransmitReceive_DMA+0x58>
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cf32:	d106      	bne.n	800cf42 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d102      	bne.n	800cf42 <HAL_SPI_TransmitReceive_DMA+0x52>
 800cf3c:	7dbb      	ldrb	r3, [r7, #22]
 800cf3e:	2b04      	cmp	r3, #4
 800cf40:	d002      	beq.n	800cf48 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800cf42:	2302      	movs	r3, #2
 800cf44:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cf46:	e143      	b.n	800d1d0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d005      	beq.n	800cf5a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800cf54:	887b      	ldrh	r3, [r7, #2]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d102      	bne.n	800cf60 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cf5e:	e137      	b.n	800d1d0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	2b04      	cmp	r3, #4
 800cf6a:	d003      	beq.n	800cf74 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2205      	movs	r2, #5
 800cf70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2200      	movs	r2, #0
 800cf78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	68ba      	ldr	r2, [r7, #8]
 800cf7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	887a      	ldrh	r2, [r7, #2]
 800cf84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	887a      	ldrh	r2, [r7, #2]
 800cf8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	887a      	ldrh	r2, [r7, #2]
 800cf96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	887a      	ldrh	r2, [r7, #2]
 800cf9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800cfbc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cfc6:	d908      	bls.n	800cfda <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cfd6:	605a      	str	r2, [r3, #4]
 800cfd8:	e06f      	b.n	800d0ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	685a      	ldr	r2, [r3, #4]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cfe8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfee:	699b      	ldr	r3, [r3, #24]
 800cff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cff4:	d126      	bne.n	800d044 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800cffa:	f003 0301 	and.w	r3, r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10f      	bne.n	800d022 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	685a      	ldr	r2, [r3, #4]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d010:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d016:	b29b      	uxth	r3, r3
 800d018:	085b      	lsrs	r3, r3, #1
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d020:	e010      	b.n	800d044 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d030:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d036:	b29b      	uxth	r3, r3
 800d038:	085b      	lsrs	r3, r3, #1
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	3301      	adds	r3, #1
 800d03e:	b29a      	uxth	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d04e:	d134      	bne.n	800d0ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d05e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d066:	b29b      	uxth	r3, r3
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d111      	bne.n	800d094 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	685a      	ldr	r2, [r3, #4]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d07e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d086:	b29b      	uxth	r3, r3
 800d088:	085b      	lsrs	r3, r3, #1
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d092:	e012      	b.n	800d0ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685a      	ldr	r2, [r3, #4]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d0a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	085b      	lsrs	r3, r3, #1
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	2b04      	cmp	r3, #4
 800d0c4:	d108      	bne.n	800d0d8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ca:	4a46      	ldr	r2, [pc, #280]	@ (800d1e4 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800d0cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0d2:	4a45      	ldr	r2, [pc, #276]	@ (800d1e8 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800d0d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d0d6:	e007      	b.n	800d0e8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0dc:	4a43      	ldr	r2, [pc, #268]	@ (800d1ec <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800d0de:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0e4:	4a42      	ldr	r2, [pc, #264]	@ (800d1f0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800d0e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ec:	4a41      	ldr	r2, [pc, #260]	@ (800d1f4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800d0ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	330c      	adds	r3, #12
 800d102:	4619      	mov	r1, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d108:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d110:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d112:	f7fa fe64 	bl	8007dde <HAL_DMA_Start_IT>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d008      	beq.n	800d12e <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d120:	f043 0210 	orr.w	r2, r3, #16
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d12c:	e050      	b.n	800d1d0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	685a      	ldr	r2, [r3, #4]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f042 0201 	orr.w	r2, r2, #1
 800d13c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d142:	2200      	movs	r2, #0
 800d144:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d14a:	2200      	movs	r2, #0
 800d14c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d152:	2200      	movs	r2, #0
 800d154:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d15a:	2200      	movs	r2, #0
 800d15c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d166:	4619      	mov	r1, r3
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	330c      	adds	r3, #12
 800d16e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d174:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d176:	f7fa fe32 	bl	8007dde <HAL_DMA_Start_IT>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d008      	beq.n	800d192 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d184:	f043 0210 	orr.w	r2, r3, #16
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d190:	e01e      	b.n	800d1d0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d19c:	2b40      	cmp	r3, #64	@ 0x40
 800d19e:	d007      	beq.n	800d1b0 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1ae:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f042 0220 	orr.w	r2, r2, #32
 800d1be:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f042 0202 	orr.w	r2, r2, #2
 800d1ce:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800d1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3718      	adds	r7, #24
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	0800d47f 	.word	0x0800d47f
 800d1e8:	0800d32b 	.word	0x0800d32b
 800d1ec:	0800d49b 	.word	0x0800d49b
 800d1f0:	0800d3d3 	.word	0x0800d3d3
 800d1f4:	0800d4b7 	.word	0x0800d4b7

0800d1f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d278:	bf00      	nop
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d290:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d292:	f7f9 fbe7 	bl	8006a64 <HAL_GetTick>
 800d296:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 0320 	and.w	r3, r3, #32
 800d2a2:	2b20      	cmp	r3, #32
 800d2a4:	d03b      	beq.n	800d31e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f022 0220 	bic.w	r2, r2, #32
 800d2b4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f022 0202 	bic.w	r2, r2, #2
 800d2c4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d2c6:	693a      	ldr	r2, [r7, #16]
 800d2c8:	2164      	movs	r1, #100	@ 0x64
 800d2ca:	6978      	ldr	r0, [r7, #20]
 800d2cc:	f000 fa8a 	bl	800d7e4 <SPI_EndRxTxTransaction>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d005      	beq.n	800d2e2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2da:	f043 0220 	orr.w	r2, r3, #32
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10a      	bne.n	800d300 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60fb      	str	r3, [r7, #12]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	60fb      	str	r3, [r7, #12]
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	60fb      	str	r3, [r7, #12]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2200      	movs	r2, #0
 800d304:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d316:	6978      	ldr	r0, [r7, #20]
 800d318:	f7ff ffaa 	bl	800d270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d31c:	e002      	b.n	800d324 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d31e:	6978      	ldr	r0, [r7, #20]
 800d320:	f7ff ff6a 	bl	800d1f8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b084      	sub	sp, #16
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d336:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d338:	f7f9 fb94 	bl	8006a64 <HAL_GetTick>
 800d33c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f003 0320 	and.w	r3, r3, #32
 800d348:	2b20      	cmp	r3, #32
 800d34a:	d03c      	beq.n	800d3c6 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f022 0220 	bic.w	r2, r2, #32
 800d35a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10d      	bne.n	800d380 <SPI_DMAReceiveCplt+0x56>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d36c:	d108      	bne.n	800d380 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f022 0203 	bic.w	r2, r2, #3
 800d37c:	605a      	str	r2, [r3, #4]
 800d37e:	e007      	b.n	800d390 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f022 0201 	bic.w	r2, r2, #1
 800d38e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	2164      	movs	r1, #100	@ 0x64
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f000 f9cd 	bl	800d734 <SPI_EndRxTransaction>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2220      	movs	r2, #32
 800d3a4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f7ff ff56 	bl	800d270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d3c4:	e002      	b.n	800d3cc <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f7ff ff20 	bl	800d20c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3de:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3e0:	f7f9 fb40 	bl	8006a64 <HAL_GetTick>
 800d3e4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 0320 	and.w	r3, r3, #32
 800d3f0:	2b20      	cmp	r3, #32
 800d3f2:	d030      	beq.n	800d456 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f022 0220 	bic.w	r2, r2, #32
 800d402:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d404:	68ba      	ldr	r2, [r7, #8]
 800d406:	2164      	movs	r1, #100	@ 0x64
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f000 f9eb 	bl	800d7e4 <SPI_EndRxTxTransaction>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d005      	beq.n	800d420 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d418:	f043 0220 	orr.w	r2, r3, #32
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f022 0203 	bic.w	r2, r2, #3
 800d42e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2200      	movs	r2, #0
 800d43a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d003      	beq.n	800d456 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7ff ff0e 	bl	800d270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d454:	e002      	b.n	800d45c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f7ff fee2 	bl	800d220 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff fedf 	bl	800d234 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d48a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7ff fedb 	bl	800d248 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d492:	bf00      	nop
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f7ff fed7 	bl	800d25c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d4ae:	bf00      	nop
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b084      	sub	sp, #16
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	685a      	ldr	r2, [r3, #4]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f022 0203 	bic.w	r2, r2, #3
 800d4d2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4d8:	f043 0210 	orr.w	r2, r3, #16
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f7ff fec1 	bl	800d270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d4ee:	bf00      	nop
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
	...

0800d4f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b088      	sub	sp, #32
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	603b      	str	r3, [r7, #0]
 800d504:	4613      	mov	r3, r2
 800d506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d508:	f7f9 faac 	bl	8006a64 <HAL_GetTick>
 800d50c:	4602      	mov	r2, r0
 800d50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d510:	1a9b      	subs	r3, r3, r2
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	4413      	add	r3, r2
 800d516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d518:	f7f9 faa4 	bl	8006a64 <HAL_GetTick>
 800d51c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d51e:	4b39      	ldr	r3, [pc, #228]	@ (800d604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	015b      	lsls	r3, r3, #5
 800d524:	0d1b      	lsrs	r3, r3, #20
 800d526:	69fa      	ldr	r2, [r7, #28]
 800d528:	fb02 f303 	mul.w	r3, r2, r3
 800d52c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d52e:	e054      	b.n	800d5da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d536:	d050      	beq.n	800d5da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d538:	f7f9 fa94 	bl	8006a64 <HAL_GetTick>
 800d53c:	4602      	mov	r2, r0
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	69fa      	ldr	r2, [r7, #28]
 800d544:	429a      	cmp	r2, r3
 800d546:	d902      	bls.n	800d54e <SPI_WaitFlagStateUntilTimeout+0x56>
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d13d      	bne.n	800d5ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d55c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d566:	d111      	bne.n	800d58c <SPI_WaitFlagStateUntilTimeout+0x94>
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d570:	d004      	beq.n	800d57c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d57a:	d107      	bne.n	800d58c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d58a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d594:	d10f      	bne.n	800d5b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d5a4:	601a      	str	r2, [r3, #0]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d5b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	e017      	b.n	800d5fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	689a      	ldr	r2, [r3, #8]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	bf0c      	ite	eq
 800d5ea:	2301      	moveq	r3, #1
 800d5ec:	2300      	movne	r3, #0
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	79fb      	ldrb	r3, [r7, #7]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d19b      	bne.n	800d530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3720      	adds	r7, #32
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20000024 	.word	0x20000024

0800d608 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b08a      	sub	sp, #40	@ 0x28
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
 800d614:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d61a:	f7f9 fa23 	bl	8006a64 <HAL_GetTick>
 800d61e:	4602      	mov	r2, r0
 800d620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d622:	1a9b      	subs	r3, r3, r2
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	4413      	add	r3, r2
 800d628:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d62a:	f7f9 fa1b 	bl	8006a64 <HAL_GetTick>
 800d62e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	330c      	adds	r3, #12
 800d636:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d638:	4b3d      	ldr	r3, [pc, #244]	@ (800d730 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	4613      	mov	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	4413      	add	r3, r2
 800d642:	00da      	lsls	r2, r3, #3
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	0d1b      	lsrs	r3, r3, #20
 800d648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d64a:	fb02 f303 	mul.w	r3, r2, r3
 800d64e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d650:	e060      	b.n	800d714 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d658:	d107      	bne.n	800d66a <SPI_WaitFifoStateUntilTimeout+0x62>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d104      	bne.n	800d66a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	b2db      	uxtb	r3, r3
 800d666:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d668:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d670:	d050      	beq.n	800d714 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d672:	f7f9 f9f7 	bl	8006a64 <HAL_GetTick>
 800d676:	4602      	mov	r2, r0
 800d678:	6a3b      	ldr	r3, [r7, #32]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d67e:	429a      	cmp	r2, r3
 800d680:	d902      	bls.n	800d688 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d684:	2b00      	cmp	r3, #0
 800d686:	d13d      	bne.n	800d704 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	685a      	ldr	r2, [r3, #4]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6a0:	d111      	bne.n	800d6c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	689b      	ldr	r3, [r3, #8]
 800d6a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6aa:	d004      	beq.n	800d6b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6b4:	d107      	bne.n	800d6c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d6c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6ce:	d10f      	bne.n	800d6f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d6ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d700:	2303      	movs	r3, #3
 800d702:	e010      	b.n	800d726 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d70a:	2300      	movs	r3, #0
 800d70c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	3b01      	subs	r3, #1
 800d712:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	689a      	ldr	r2, [r3, #8]
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	4013      	ands	r3, r2
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	429a      	cmp	r2, r3
 800d722:	d196      	bne.n	800d652 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d724:	2300      	movs	r3, #0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3728      	adds	r7, #40	@ 0x28
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	20000024 	.word	0x20000024

0800d734 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af02      	add	r7, sp, #8
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d748:	d111      	bne.n	800d76e <SPI_EndRxTransaction+0x3a>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d752:	d004      	beq.n	800d75e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d75c:	d107      	bne.n	800d76e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d76c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	9300      	str	r3, [sp, #0]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	2200      	movs	r2, #0
 800d776:	2180      	movs	r1, #128	@ 0x80
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f7ff febd 	bl	800d4f8 <SPI_WaitFlagStateUntilTimeout>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d007      	beq.n	800d794 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d788:	f043 0220 	orr.w	r2, r3, #32
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d790:	2303      	movs	r3, #3
 800d792:	e023      	b.n	800d7dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d79c:	d11d      	bne.n	800d7da <SPI_EndRxTransaction+0xa6>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7a6:	d004      	beq.n	800d7b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7b0:	d113      	bne.n	800d7da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f7ff ff22 	bl	800d608 <SPI_WaitFifoStateUntilTimeout>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d007      	beq.n	800d7da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7ce:	f043 0220 	orr.w	r2, r3, #32
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	e000      	b.n	800d7dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af02      	add	r7, sp, #8
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	9300      	str	r3, [sp, #0]
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f7ff ff03 	bl	800d608 <SPI_WaitFifoStateUntilTimeout>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d007      	beq.n	800d818 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d80c:	f043 0220 	orr.w	r2, r3, #32
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d814:	2303      	movs	r3, #3
 800d816:	e027      	b.n	800d868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	2200      	movs	r2, #0
 800d820:	2180      	movs	r1, #128	@ 0x80
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f7ff fe68 	bl	800d4f8 <SPI_WaitFlagStateUntilTimeout>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d007      	beq.n	800d83e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d832:	f043 0220 	orr.w	r2, r3, #32
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d83a:	2303      	movs	r3, #3
 800d83c:	e014      	b.n	800d868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	2200      	movs	r2, #0
 800d846:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f7ff fedc 	bl	800d608 <SPI_WaitFifoStateUntilTimeout>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d007      	beq.n	800d866 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d85a:	f043 0220 	orr.w	r2, r3, #32
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e000      	b.n	800d868 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e049      	b.n	800d916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7f6 fd8e 	bl	80043b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	f000 fde6 	bl	800e480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
	...

0800d920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b01      	cmp	r3, #1
 800d932:	d001      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d934:	2301      	movs	r3, #1
 800d936:	e04f      	b.n	800d9d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2202      	movs	r2, #2
 800d93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68da      	ldr	r2, [r3, #12]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f042 0201 	orr.w	r2, r2, #1
 800d94e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a23      	ldr	r2, [pc, #140]	@ (800d9e4 <HAL_TIM_Base_Start_IT+0xc4>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d01d      	beq.n	800d996 <HAL_TIM_Base_Start_IT+0x76>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d962:	d018      	beq.n	800d996 <HAL_TIM_Base_Start_IT+0x76>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a1f      	ldr	r2, [pc, #124]	@ (800d9e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d013      	beq.n	800d996 <HAL_TIM_Base_Start_IT+0x76>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a1e      	ldr	r2, [pc, #120]	@ (800d9ec <HAL_TIM_Base_Start_IT+0xcc>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d00e      	beq.n	800d996 <HAL_TIM_Base_Start_IT+0x76>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a1c      	ldr	r2, [pc, #112]	@ (800d9f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d009      	beq.n	800d996 <HAL_TIM_Base_Start_IT+0x76>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a1b      	ldr	r2, [pc, #108]	@ (800d9f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d004      	beq.n	800d996 <HAL_TIM_Base_Start_IT+0x76>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a19      	ldr	r2, [pc, #100]	@ (800d9f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d115      	bne.n	800d9c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	689a      	ldr	r2, [r3, #8]
 800d99c:	4b17      	ldr	r3, [pc, #92]	@ (800d9fc <HAL_TIM_Base_Start_IT+0xdc>)
 800d99e:	4013      	ands	r3, r2
 800d9a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2b06      	cmp	r3, #6
 800d9a6:	d015      	beq.n	800d9d4 <HAL_TIM_Base_Start_IT+0xb4>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9ae:	d011      	beq.n	800d9d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f042 0201 	orr.w	r2, r2, #1
 800d9be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9c0:	e008      	b.n	800d9d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f042 0201 	orr.w	r2, r2, #1
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	e000      	b.n	800d9d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d9d6:	2300      	movs	r3, #0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	40012c00 	.word	0x40012c00
 800d9e8:	40000400 	.word	0x40000400
 800d9ec:	40000800 	.word	0x40000800
 800d9f0:	40000c00 	.word	0x40000c00
 800d9f4:	40013400 	.word	0x40013400
 800d9f8:	40014000 	.word	0x40014000
 800d9fc:	00010007 	.word	0x00010007

0800da00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d101      	bne.n	800da12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800da0e:	2301      	movs	r3, #1
 800da10:	e049      	b.n	800daa6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d106      	bne.n	800da2c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 f841 	bl	800daae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2202      	movs	r2, #2
 800da30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	3304      	adds	r3, #4
 800da3c:	4619      	mov	r1, r3
 800da3e:	4610      	mov	r0, r2
 800da40:	f000 fd1e 	bl	800e480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2201      	movs	r2, #1
 800da48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800daa4:	2300      	movs	r3, #0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800dab6:	bf00      	nop
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr

0800dac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b082      	sub	sp, #8
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d101      	bne.n	800dad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dad0:	2301      	movs	r3, #1
 800dad2:	e049      	b.n	800db68 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d106      	bne.n	800daee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7f6 fbc3 	bl	8004274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2202      	movs	r2, #2
 800daf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	3304      	adds	r3, #4
 800dafe:	4619      	mov	r1, r3
 800db00:	4610      	mov	r0, r2
 800db02:	f000 fcbd 	bl	800e480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2201      	movs	r2, #1
 800db0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2201      	movs	r2, #1
 800db32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2201      	movs	r2, #1
 800db42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2201      	movs	r2, #1
 800db62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d109      	bne.n	800db94 <HAL_TIM_PWM_Start+0x24>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b01      	cmp	r3, #1
 800db8a:	bf14      	ite	ne
 800db8c:	2301      	movne	r3, #1
 800db8e:	2300      	moveq	r3, #0
 800db90:	b2db      	uxtb	r3, r3
 800db92:	e03c      	b.n	800dc0e <HAL_TIM_PWM_Start+0x9e>
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	2b04      	cmp	r3, #4
 800db98:	d109      	bne.n	800dbae <HAL_TIM_PWM_Start+0x3e>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	bf14      	ite	ne
 800dba6:	2301      	movne	r3, #1
 800dba8:	2300      	moveq	r3, #0
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	e02f      	b.n	800dc0e <HAL_TIM_PWM_Start+0x9e>
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b08      	cmp	r3, #8
 800dbb2:	d109      	bne.n	800dbc8 <HAL_TIM_PWM_Start+0x58>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	bf14      	ite	ne
 800dbc0:	2301      	movne	r3, #1
 800dbc2:	2300      	moveq	r3, #0
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	e022      	b.n	800dc0e <HAL_TIM_PWM_Start+0x9e>
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2b0c      	cmp	r3, #12
 800dbcc:	d109      	bne.n	800dbe2 <HAL_TIM_PWM_Start+0x72>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	bf14      	ite	ne
 800dbda:	2301      	movne	r3, #1
 800dbdc:	2300      	moveq	r3, #0
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	e015      	b.n	800dc0e <HAL_TIM_PWM_Start+0x9e>
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b10      	cmp	r3, #16
 800dbe6:	d109      	bne.n	800dbfc <HAL_TIM_PWM_Start+0x8c>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	bf14      	ite	ne
 800dbf4:	2301      	movne	r3, #1
 800dbf6:	2300      	moveq	r3, #0
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	e008      	b.n	800dc0e <HAL_TIM_PWM_Start+0x9e>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	bf14      	ite	ne
 800dc08:	2301      	movne	r3, #1
 800dc0a:	2300      	moveq	r3, #0
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d001      	beq.n	800dc16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	e09c      	b.n	800dd50 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d104      	bne.n	800dc26 <HAL_TIM_PWM_Start+0xb6>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2202      	movs	r2, #2
 800dc20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dc24:	e023      	b.n	800dc6e <HAL_TIM_PWM_Start+0xfe>
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	2b04      	cmp	r3, #4
 800dc2a:	d104      	bne.n	800dc36 <HAL_TIM_PWM_Start+0xc6>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2202      	movs	r2, #2
 800dc30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dc34:	e01b      	b.n	800dc6e <HAL_TIM_PWM_Start+0xfe>
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	2b08      	cmp	r3, #8
 800dc3a:	d104      	bne.n	800dc46 <HAL_TIM_PWM_Start+0xd6>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dc44:	e013      	b.n	800dc6e <HAL_TIM_PWM_Start+0xfe>
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	2b0c      	cmp	r3, #12
 800dc4a:	d104      	bne.n	800dc56 <HAL_TIM_PWM_Start+0xe6>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dc54:	e00b      	b.n	800dc6e <HAL_TIM_PWM_Start+0xfe>
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	2b10      	cmp	r3, #16
 800dc5a:	d104      	bne.n	800dc66 <HAL_TIM_PWM_Start+0xf6>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2202      	movs	r2, #2
 800dc60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dc64:	e003      	b.n	800dc6e <HAL_TIM_PWM_Start+0xfe>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2202      	movs	r2, #2
 800dc6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2201      	movs	r2, #1
 800dc74:	6839      	ldr	r1, [r7, #0]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f001 f80c 	bl	800ec94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a35      	ldr	r2, [pc, #212]	@ (800dd58 <HAL_TIM_PWM_Start+0x1e8>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d013      	beq.n	800dcae <HAL_TIM_PWM_Start+0x13e>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a34      	ldr	r2, [pc, #208]	@ (800dd5c <HAL_TIM_PWM_Start+0x1ec>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d00e      	beq.n	800dcae <HAL_TIM_PWM_Start+0x13e>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a32      	ldr	r2, [pc, #200]	@ (800dd60 <HAL_TIM_PWM_Start+0x1f0>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d009      	beq.n	800dcae <HAL_TIM_PWM_Start+0x13e>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a31      	ldr	r2, [pc, #196]	@ (800dd64 <HAL_TIM_PWM_Start+0x1f4>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d004      	beq.n	800dcae <HAL_TIM_PWM_Start+0x13e>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a2f      	ldr	r2, [pc, #188]	@ (800dd68 <HAL_TIM_PWM_Start+0x1f8>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d101      	bne.n	800dcb2 <HAL_TIM_PWM_Start+0x142>
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e000      	b.n	800dcb4 <HAL_TIM_PWM_Start+0x144>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d007      	beq.n	800dcc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dcc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a22      	ldr	r2, [pc, #136]	@ (800dd58 <HAL_TIM_PWM_Start+0x1e8>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d01d      	beq.n	800dd0e <HAL_TIM_PWM_Start+0x19e>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcda:	d018      	beq.n	800dd0e <HAL_TIM_PWM_Start+0x19e>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a22      	ldr	r2, [pc, #136]	@ (800dd6c <HAL_TIM_PWM_Start+0x1fc>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d013      	beq.n	800dd0e <HAL_TIM_PWM_Start+0x19e>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a21      	ldr	r2, [pc, #132]	@ (800dd70 <HAL_TIM_PWM_Start+0x200>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d00e      	beq.n	800dd0e <HAL_TIM_PWM_Start+0x19e>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a1f      	ldr	r2, [pc, #124]	@ (800dd74 <HAL_TIM_PWM_Start+0x204>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d009      	beq.n	800dd0e <HAL_TIM_PWM_Start+0x19e>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a17      	ldr	r2, [pc, #92]	@ (800dd5c <HAL_TIM_PWM_Start+0x1ec>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d004      	beq.n	800dd0e <HAL_TIM_PWM_Start+0x19e>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a15      	ldr	r2, [pc, #84]	@ (800dd60 <HAL_TIM_PWM_Start+0x1f0>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d115      	bne.n	800dd3a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	689a      	ldr	r2, [r3, #8]
 800dd14:	4b18      	ldr	r3, [pc, #96]	@ (800dd78 <HAL_TIM_PWM_Start+0x208>)
 800dd16:	4013      	ands	r3, r2
 800dd18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2b06      	cmp	r3, #6
 800dd1e:	d015      	beq.n	800dd4c <HAL_TIM_PWM_Start+0x1dc>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd26:	d011      	beq.n	800dd4c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f042 0201 	orr.w	r2, r2, #1
 800dd36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd38:	e008      	b.n	800dd4c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f042 0201 	orr.w	r2, r2, #1
 800dd48:	601a      	str	r2, [r3, #0]
 800dd4a:	e000      	b.n	800dd4e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	40012c00 	.word	0x40012c00
 800dd5c:	40013400 	.word	0x40013400
 800dd60:	40014000 	.word	0x40014000
 800dd64:	40014400 	.word	0x40014400
 800dd68:	40014800 	.word	0x40014800
 800dd6c:	40000400 	.word	0x40000400
 800dd70:	40000800 	.word	0x40000800
 800dd74:	40000c00 	.word	0x40000c00
 800dd78:	00010007 	.word	0x00010007

0800dd7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d020      	beq.n	800dde0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f003 0302 	and.w	r3, r3, #2
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d01b      	beq.n	800dde0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f06f 0202 	mvn.w	r2, #2
 800ddb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	f003 0303 	and.w	r3, r3, #3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d003      	beq.n	800ddce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 fb3b 	bl	800e442 <HAL_TIM_IC_CaptureCallback>
 800ddcc:	e005      	b.n	800ddda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 fb2d 	bl	800e42e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fb3e 	bl	800e456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	f003 0304 	and.w	r3, r3, #4
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d020      	beq.n	800de2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d01b      	beq.n	800de2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f06f 0204 	mvn.w	r2, #4
 800ddfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2202      	movs	r2, #2
 800de02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d003      	beq.n	800de1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f000 fb15 	bl	800e442 <HAL_TIM_IC_CaptureCallback>
 800de18:	e005      	b.n	800de26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 fb07 	bl	800e42e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fb18 	bl	800e456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	f003 0308 	and.w	r3, r3, #8
 800de32:	2b00      	cmp	r3, #0
 800de34:	d020      	beq.n	800de78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f003 0308 	and.w	r3, r3, #8
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d01b      	beq.n	800de78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f06f 0208 	mvn.w	r2, #8
 800de48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2204      	movs	r2, #4
 800de4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	69db      	ldr	r3, [r3, #28]
 800de56:	f003 0303 	and.w	r3, r3, #3
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d003      	beq.n	800de66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 faef 	bl	800e442 <HAL_TIM_IC_CaptureCallback>
 800de64:	e005      	b.n	800de72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fae1 	bl	800e42e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 faf2 	bl	800e456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	f003 0310 	and.w	r3, r3, #16
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d020      	beq.n	800dec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f003 0310 	and.w	r3, r3, #16
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d01b      	beq.n	800dec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f06f 0210 	mvn.w	r2, #16
 800de94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2208      	movs	r2, #8
 800de9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	69db      	ldr	r3, [r3, #28]
 800dea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d003      	beq.n	800deb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fac9 	bl	800e442 <HAL_TIM_IC_CaptureCallback>
 800deb0:	e005      	b.n	800debe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fabb 	bl	800e42e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 facc 	bl	800e456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	f003 0301 	and.w	r3, r3, #1
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00c      	beq.n	800dee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f003 0301 	and.w	r3, r3, #1
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d007      	beq.n	800dee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f06f 0201 	mvn.w	r2, #1
 800dee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7f5 fe7a 	bl	8003bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00c      	beq.n	800df0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800def8:	2b00      	cmp	r3, #0
 800defa:	d007      	beq.n	800df0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800df04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f001 f8c0 	bl	800f08c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00c      	beq.n	800df30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d007      	beq.n	800df30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800df28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f001 f8b8 	bl	800f0a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00c      	beq.n	800df54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df40:	2b00      	cmp	r3, #0
 800df42:	d007      	beq.n	800df54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800df4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fa8b 	bl	800e46a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	f003 0320 	and.w	r3, r3, #32
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00c      	beq.n	800df78 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f003 0320 	and.w	r3, r3, #32
 800df64:	2b00      	cmp	r3, #0
 800df66:	d007      	beq.n	800df78 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f06f 0220 	mvn.w	r2, #32
 800df70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f001 f880 	bl	800f078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df78:	bf00      	nop
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b086      	sub	sp, #24
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df96:	2b01      	cmp	r3, #1
 800df98:	d101      	bne.n	800df9e <HAL_TIM_OC_ConfigChannel+0x1e>
 800df9a:	2302      	movs	r3, #2
 800df9c:	e066      	b.n	800e06c <HAL_TIM_OC_ConfigChannel+0xec>
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b14      	cmp	r3, #20
 800dfaa:	d857      	bhi.n	800e05c <HAL_TIM_OC_ConfigChannel+0xdc>
 800dfac:	a201      	add	r2, pc, #4	@ (adr r2, 800dfb4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800dfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb2:	bf00      	nop
 800dfb4:	0800e009 	.word	0x0800e009
 800dfb8:	0800e05d 	.word	0x0800e05d
 800dfbc:	0800e05d 	.word	0x0800e05d
 800dfc0:	0800e05d 	.word	0x0800e05d
 800dfc4:	0800e017 	.word	0x0800e017
 800dfc8:	0800e05d 	.word	0x0800e05d
 800dfcc:	0800e05d 	.word	0x0800e05d
 800dfd0:	0800e05d 	.word	0x0800e05d
 800dfd4:	0800e025 	.word	0x0800e025
 800dfd8:	0800e05d 	.word	0x0800e05d
 800dfdc:	0800e05d 	.word	0x0800e05d
 800dfe0:	0800e05d 	.word	0x0800e05d
 800dfe4:	0800e033 	.word	0x0800e033
 800dfe8:	0800e05d 	.word	0x0800e05d
 800dfec:	0800e05d 	.word	0x0800e05d
 800dff0:	0800e05d 	.word	0x0800e05d
 800dff4:	0800e041 	.word	0x0800e041
 800dff8:	0800e05d 	.word	0x0800e05d
 800dffc:	0800e05d 	.word	0x0800e05d
 800e000:	0800e05d 	.word	0x0800e05d
 800e004:	0800e04f 	.word	0x0800e04f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	68b9      	ldr	r1, [r7, #8]
 800e00e:	4618      	mov	r0, r3
 800e010:	f000 fad0 	bl	800e5b4 <TIM_OC1_SetConfig>
      break;
 800e014:	e025      	b.n	800e062 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	68b9      	ldr	r1, [r7, #8]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f000 fb59 	bl	800e6d4 <TIM_OC2_SetConfig>
      break;
 800e022:	e01e      	b.n	800e062 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	68b9      	ldr	r1, [r7, #8]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 fbdc 	bl	800e7e8 <TIM_OC3_SetConfig>
      break;
 800e030:	e017      	b.n	800e062 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	68b9      	ldr	r1, [r7, #8]
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 fc5d 	bl	800e8f8 <TIM_OC4_SetConfig>
      break;
 800e03e:	e010      	b.n	800e062 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	4618      	mov	r0, r3
 800e048:	f000 fcc0 	bl	800e9cc <TIM_OC5_SetConfig>
      break;
 800e04c:	e009      	b.n	800e062 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68b9      	ldr	r1, [r7, #8]
 800e054:	4618      	mov	r0, r3
 800e056:	f000 fd1d 	bl	800ea94 <TIM_OC6_SetConfig>
      break;
 800e05a:	e002      	b.n	800e062 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	75fb      	strb	r3, [r7, #23]
      break;
 800e060:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3718      	adds	r7, #24
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e080:	2300      	movs	r3, #0
 800e082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d101      	bne.n	800e092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e08e:	2302      	movs	r3, #2
 800e090:	e0ff      	b.n	800e292 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2201      	movs	r2, #1
 800e096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b14      	cmp	r3, #20
 800e09e:	f200 80f0 	bhi.w	800e282 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e0a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a8:	0800e0fd 	.word	0x0800e0fd
 800e0ac:	0800e283 	.word	0x0800e283
 800e0b0:	0800e283 	.word	0x0800e283
 800e0b4:	0800e283 	.word	0x0800e283
 800e0b8:	0800e13d 	.word	0x0800e13d
 800e0bc:	0800e283 	.word	0x0800e283
 800e0c0:	0800e283 	.word	0x0800e283
 800e0c4:	0800e283 	.word	0x0800e283
 800e0c8:	0800e17f 	.word	0x0800e17f
 800e0cc:	0800e283 	.word	0x0800e283
 800e0d0:	0800e283 	.word	0x0800e283
 800e0d4:	0800e283 	.word	0x0800e283
 800e0d8:	0800e1bf 	.word	0x0800e1bf
 800e0dc:	0800e283 	.word	0x0800e283
 800e0e0:	0800e283 	.word	0x0800e283
 800e0e4:	0800e283 	.word	0x0800e283
 800e0e8:	0800e201 	.word	0x0800e201
 800e0ec:	0800e283 	.word	0x0800e283
 800e0f0:	0800e283 	.word	0x0800e283
 800e0f4:	0800e283 	.word	0x0800e283
 800e0f8:	0800e241 	.word	0x0800e241
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	68b9      	ldr	r1, [r7, #8]
 800e102:	4618      	mov	r0, r3
 800e104:	f000 fa56 	bl	800e5b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	699a      	ldr	r2, [r3, #24]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f042 0208 	orr.w	r2, r2, #8
 800e116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	699a      	ldr	r2, [r3, #24]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f022 0204 	bic.w	r2, r2, #4
 800e126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	6999      	ldr	r1, [r3, #24]
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	691a      	ldr	r2, [r3, #16]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	430a      	orrs	r2, r1
 800e138:	619a      	str	r2, [r3, #24]
      break;
 800e13a:	e0a5      	b.n	800e288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68b9      	ldr	r1, [r7, #8]
 800e142:	4618      	mov	r0, r3
 800e144:	f000 fac6 	bl	800e6d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	699a      	ldr	r2, [r3, #24]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	699a      	ldr	r2, [r3, #24]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6999      	ldr	r1, [r3, #24]
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	021a      	lsls	r2, r3, #8
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	430a      	orrs	r2, r1
 800e17a:	619a      	str	r2, [r3, #24]
      break;
 800e17c:	e084      	b.n	800e288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	68b9      	ldr	r1, [r7, #8]
 800e184:	4618      	mov	r0, r3
 800e186:	f000 fb2f 	bl	800e7e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	69da      	ldr	r2, [r3, #28]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f042 0208 	orr.w	r2, r2, #8
 800e198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	69da      	ldr	r2, [r3, #28]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f022 0204 	bic.w	r2, r2, #4
 800e1a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	69d9      	ldr	r1, [r3, #28]
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	691a      	ldr	r2, [r3, #16]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	430a      	orrs	r2, r1
 800e1ba:	61da      	str	r2, [r3, #28]
      break;
 800e1bc:	e064      	b.n	800e288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	68b9      	ldr	r1, [r7, #8]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f000 fb97 	bl	800e8f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	69da      	ldr	r2, [r3, #28]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e1d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	69da      	ldr	r2, [r3, #28]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	69d9      	ldr	r1, [r3, #28]
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	691b      	ldr	r3, [r3, #16]
 800e1f4:	021a      	lsls	r2, r3, #8
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	430a      	orrs	r2, r1
 800e1fc:	61da      	str	r2, [r3, #28]
      break;
 800e1fe:	e043      	b.n	800e288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68b9      	ldr	r1, [r7, #8]
 800e206:	4618      	mov	r0, r3
 800e208:	f000 fbe0 	bl	800e9cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f042 0208 	orr.w	r2, r2, #8
 800e21a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f022 0204 	bic.w	r2, r2, #4
 800e22a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	691a      	ldr	r2, [r3, #16]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	430a      	orrs	r2, r1
 800e23c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e23e:	e023      	b.n	800e288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	68b9      	ldr	r1, [r7, #8]
 800e246:	4618      	mov	r0, r3
 800e248:	f000 fc24 	bl	800ea94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e25a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e26a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	021a      	lsls	r2, r3, #8
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	430a      	orrs	r2, r1
 800e27e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e280:	e002      	b.n	800e288 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	75fb      	strb	r3, [r7, #23]
      break;
 800e286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e290:	7dfb      	ldrb	r3, [r7, #23]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop

0800e29c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d101      	bne.n	800e2b8 <HAL_TIM_ConfigClockSource+0x1c>
 800e2b4:	2302      	movs	r3, #2
 800e2b6:	e0b6      	b.n	800e426 <HAL_TIM_ConfigClockSource+0x18a>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2202      	movs	r2, #2
 800e2c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e2d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e2da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e2e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2f4:	d03e      	beq.n	800e374 <HAL_TIM_ConfigClockSource+0xd8>
 800e2f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2fa:	f200 8087 	bhi.w	800e40c <HAL_TIM_ConfigClockSource+0x170>
 800e2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e302:	f000 8086 	beq.w	800e412 <HAL_TIM_ConfigClockSource+0x176>
 800e306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e30a:	d87f      	bhi.n	800e40c <HAL_TIM_ConfigClockSource+0x170>
 800e30c:	2b70      	cmp	r3, #112	@ 0x70
 800e30e:	d01a      	beq.n	800e346 <HAL_TIM_ConfigClockSource+0xaa>
 800e310:	2b70      	cmp	r3, #112	@ 0x70
 800e312:	d87b      	bhi.n	800e40c <HAL_TIM_ConfigClockSource+0x170>
 800e314:	2b60      	cmp	r3, #96	@ 0x60
 800e316:	d050      	beq.n	800e3ba <HAL_TIM_ConfigClockSource+0x11e>
 800e318:	2b60      	cmp	r3, #96	@ 0x60
 800e31a:	d877      	bhi.n	800e40c <HAL_TIM_ConfigClockSource+0x170>
 800e31c:	2b50      	cmp	r3, #80	@ 0x50
 800e31e:	d03c      	beq.n	800e39a <HAL_TIM_ConfigClockSource+0xfe>
 800e320:	2b50      	cmp	r3, #80	@ 0x50
 800e322:	d873      	bhi.n	800e40c <HAL_TIM_ConfigClockSource+0x170>
 800e324:	2b40      	cmp	r3, #64	@ 0x40
 800e326:	d058      	beq.n	800e3da <HAL_TIM_ConfigClockSource+0x13e>
 800e328:	2b40      	cmp	r3, #64	@ 0x40
 800e32a:	d86f      	bhi.n	800e40c <HAL_TIM_ConfigClockSource+0x170>
 800e32c:	2b30      	cmp	r3, #48	@ 0x30
 800e32e:	d064      	beq.n	800e3fa <HAL_TIM_ConfigClockSource+0x15e>
 800e330:	2b30      	cmp	r3, #48	@ 0x30
 800e332:	d86b      	bhi.n	800e40c <HAL_TIM_ConfigClockSource+0x170>
 800e334:	2b20      	cmp	r3, #32
 800e336:	d060      	beq.n	800e3fa <HAL_TIM_ConfigClockSource+0x15e>
 800e338:	2b20      	cmp	r3, #32
 800e33a:	d867      	bhi.n	800e40c <HAL_TIM_ConfigClockSource+0x170>
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d05c      	beq.n	800e3fa <HAL_TIM_ConfigClockSource+0x15e>
 800e340:	2b10      	cmp	r3, #16
 800e342:	d05a      	beq.n	800e3fa <HAL_TIM_ConfigClockSource+0x15e>
 800e344:	e062      	b.n	800e40c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e356:	f000 fc7d 	bl	800ec54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	609a      	str	r2, [r3, #8]
      break;
 800e372:	e04f      	b.n	800e414 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e384:	f000 fc66 	bl	800ec54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	689a      	ldr	r2, [r3, #8]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e396:	609a      	str	r2, [r3, #8]
      break;
 800e398:	e03c      	b.n	800e414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	f000 fbda 	bl	800eb60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2150      	movs	r1, #80	@ 0x50
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 fc33 	bl	800ec1e <TIM_ITRx_SetConfig>
      break;
 800e3b8:	e02c      	b.n	800e414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	f000 fbf9 	bl	800ebbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2160      	movs	r1, #96	@ 0x60
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 fc23 	bl	800ec1e <TIM_ITRx_SetConfig>
      break;
 800e3d8:	e01c      	b.n	800e414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	f000 fbba 	bl	800eb60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2140      	movs	r1, #64	@ 0x40
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f000 fc13 	bl	800ec1e <TIM_ITRx_SetConfig>
      break;
 800e3f8:	e00c      	b.n	800e414 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4619      	mov	r1, r3
 800e404:	4610      	mov	r0, r2
 800e406:	f000 fc0a 	bl	800ec1e <TIM_ITRx_SetConfig>
      break;
 800e40a:	e003      	b.n	800e414 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e40c:	2301      	movs	r3, #1
 800e40e:	73fb      	strb	r3, [r7, #15]
      break;
 800e410:	e000      	b.n	800e414 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2201      	movs	r2, #1
 800e418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e424:	7bfb      	ldrb	r3, [r7, #15]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e42e:	b480      	push	{r7}
 800e430:	b083      	sub	sp, #12
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e436:	bf00      	nop
 800e438:	370c      	adds	r7, #12
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr

0800e442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e442:	b480      	push	{r7}
 800e444:	b083      	sub	sp, #12
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e44a:	bf00      	nop
 800e44c:	370c      	adds	r7, #12
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e456:	b480      	push	{r7}
 800e458:	b083      	sub	sp, #12
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e45e:	bf00      	nop
 800e460:	370c      	adds	r7, #12
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr

0800e46a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e46a:	b480      	push	{r7}
 800e46c:	b083      	sub	sp, #12
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e472:	bf00      	nop
 800e474:	370c      	adds	r7, #12
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
	...

0800e480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a40      	ldr	r2, [pc, #256]	@ (800e594 <TIM_Base_SetConfig+0x114>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d013      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e49e:	d00f      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a3d      	ldr	r2, [pc, #244]	@ (800e598 <TIM_Base_SetConfig+0x118>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d00b      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a3c      	ldr	r2, [pc, #240]	@ (800e59c <TIM_Base_SetConfig+0x11c>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d007      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a3b      	ldr	r2, [pc, #236]	@ (800e5a0 <TIM_Base_SetConfig+0x120>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d003      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a3a      	ldr	r2, [pc, #232]	@ (800e5a4 <TIM_Base_SetConfig+0x124>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d108      	bne.n	800e4d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a2f      	ldr	r2, [pc, #188]	@ (800e594 <TIM_Base_SetConfig+0x114>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d01f      	beq.n	800e51a <TIM_Base_SetConfig+0x9a>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e0:	d01b      	beq.n	800e51a <TIM_Base_SetConfig+0x9a>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a2c      	ldr	r2, [pc, #176]	@ (800e598 <TIM_Base_SetConfig+0x118>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d017      	beq.n	800e51a <TIM_Base_SetConfig+0x9a>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a2b      	ldr	r2, [pc, #172]	@ (800e59c <TIM_Base_SetConfig+0x11c>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d013      	beq.n	800e51a <TIM_Base_SetConfig+0x9a>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a2a      	ldr	r2, [pc, #168]	@ (800e5a0 <TIM_Base_SetConfig+0x120>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d00f      	beq.n	800e51a <TIM_Base_SetConfig+0x9a>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a29      	ldr	r2, [pc, #164]	@ (800e5a4 <TIM_Base_SetConfig+0x124>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d00b      	beq.n	800e51a <TIM_Base_SetConfig+0x9a>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a28      	ldr	r2, [pc, #160]	@ (800e5a8 <TIM_Base_SetConfig+0x128>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d007      	beq.n	800e51a <TIM_Base_SetConfig+0x9a>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4a27      	ldr	r2, [pc, #156]	@ (800e5ac <TIM_Base_SetConfig+0x12c>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d003      	beq.n	800e51a <TIM_Base_SetConfig+0x9a>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4a26      	ldr	r2, [pc, #152]	@ (800e5b0 <TIM_Base_SetConfig+0x130>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d108      	bne.n	800e52c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	68fa      	ldr	r2, [r7, #12]
 800e528:	4313      	orrs	r3, r2
 800e52a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	4313      	orrs	r3, r2
 800e538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	689a      	ldr	r2, [r3, #8]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4a10      	ldr	r2, [pc, #64]	@ (800e594 <TIM_Base_SetConfig+0x114>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d00f      	beq.n	800e578 <TIM_Base_SetConfig+0xf8>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a12      	ldr	r2, [pc, #72]	@ (800e5a4 <TIM_Base_SetConfig+0x124>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d00b      	beq.n	800e578 <TIM_Base_SetConfig+0xf8>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a11      	ldr	r2, [pc, #68]	@ (800e5a8 <TIM_Base_SetConfig+0x128>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d007      	beq.n	800e578 <TIM_Base_SetConfig+0xf8>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a10      	ldr	r2, [pc, #64]	@ (800e5ac <TIM_Base_SetConfig+0x12c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d003      	beq.n	800e578 <TIM_Base_SetConfig+0xf8>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4a0f      	ldr	r2, [pc, #60]	@ (800e5b0 <TIM_Base_SetConfig+0x130>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d103      	bne.n	800e580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	691a      	ldr	r2, [r3, #16]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	615a      	str	r2, [r3, #20]
}
 800e586:	bf00      	nop
 800e588:	3714      	adds	r7, #20
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop
 800e594:	40012c00 	.word	0x40012c00
 800e598:	40000400 	.word	0x40000400
 800e59c:	40000800 	.word	0x40000800
 800e5a0:	40000c00 	.word	0x40000c00
 800e5a4:	40013400 	.word	0x40013400
 800e5a8:	40014000 	.word	0x40014000
 800e5ac:	40014400 	.word	0x40014400
 800e5b0:	40014800 	.word	0x40014800

0800e5b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b087      	sub	sp, #28
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a1b      	ldr	r3, [r3, #32]
 800e5c8:	f023 0201 	bic.w	r2, r3, #1
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e5e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f023 0303 	bic.w	r3, r3, #3
 800e5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	f023 0302 	bic.w	r3, r3, #2
 800e600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	689b      	ldr	r3, [r3, #8]
 800e606:	697a      	ldr	r2, [r7, #20]
 800e608:	4313      	orrs	r3, r2
 800e60a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4a2c      	ldr	r2, [pc, #176]	@ (800e6c0 <TIM_OC1_SetConfig+0x10c>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d00f      	beq.n	800e634 <TIM_OC1_SetConfig+0x80>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a2b      	ldr	r2, [pc, #172]	@ (800e6c4 <TIM_OC1_SetConfig+0x110>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d00b      	beq.n	800e634 <TIM_OC1_SetConfig+0x80>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4a2a      	ldr	r2, [pc, #168]	@ (800e6c8 <TIM_OC1_SetConfig+0x114>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d007      	beq.n	800e634 <TIM_OC1_SetConfig+0x80>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a29      	ldr	r2, [pc, #164]	@ (800e6cc <TIM_OC1_SetConfig+0x118>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d003      	beq.n	800e634 <TIM_OC1_SetConfig+0x80>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a28      	ldr	r2, [pc, #160]	@ (800e6d0 <TIM_OC1_SetConfig+0x11c>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d10c      	bne.n	800e64e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	f023 0308 	bic.w	r3, r3, #8
 800e63a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	697a      	ldr	r2, [r7, #20]
 800e642:	4313      	orrs	r3, r2
 800e644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f023 0304 	bic.w	r3, r3, #4
 800e64c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a1b      	ldr	r2, [pc, #108]	@ (800e6c0 <TIM_OC1_SetConfig+0x10c>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d00f      	beq.n	800e676 <TIM_OC1_SetConfig+0xc2>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a1a      	ldr	r2, [pc, #104]	@ (800e6c4 <TIM_OC1_SetConfig+0x110>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d00b      	beq.n	800e676 <TIM_OC1_SetConfig+0xc2>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a19      	ldr	r2, [pc, #100]	@ (800e6c8 <TIM_OC1_SetConfig+0x114>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d007      	beq.n	800e676 <TIM_OC1_SetConfig+0xc2>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4a18      	ldr	r2, [pc, #96]	@ (800e6cc <TIM_OC1_SetConfig+0x118>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d003      	beq.n	800e676 <TIM_OC1_SetConfig+0xc2>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a17      	ldr	r2, [pc, #92]	@ (800e6d0 <TIM_OC1_SetConfig+0x11c>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d111      	bne.n	800e69a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e67c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	695b      	ldr	r3, [r3, #20]
 800e68a:	693a      	ldr	r2, [r7, #16]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	693a      	ldr	r2, [r7, #16]
 800e696:	4313      	orrs	r3, r2
 800e698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	693a      	ldr	r2, [r7, #16]
 800e69e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	685a      	ldr	r2, [r3, #4]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	697a      	ldr	r2, [r7, #20]
 800e6b2:	621a      	str	r2, [r3, #32]
}
 800e6b4:	bf00      	nop
 800e6b6:	371c      	adds	r7, #28
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	40012c00 	.word	0x40012c00
 800e6c4:	40013400 	.word	0x40013400
 800e6c8:	40014000 	.word	0x40014000
 800e6cc:	40014400 	.word	0x40014400
 800e6d0:	40014800 	.word	0x40014800

0800e6d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a1b      	ldr	r3, [r3, #32]
 800e6e8:	f023 0210 	bic.w	r2, r3, #16
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	699b      	ldr	r3, [r3, #24]
 800e6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	021b      	lsls	r3, r3, #8
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	4313      	orrs	r3, r2
 800e71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f023 0320 	bic.w	r3, r3, #32
 800e722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	011b      	lsls	r3, r3, #4
 800e72a:	697a      	ldr	r2, [r7, #20]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a28      	ldr	r2, [pc, #160]	@ (800e7d4 <TIM_OC2_SetConfig+0x100>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d003      	beq.n	800e740 <TIM_OC2_SetConfig+0x6c>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a27      	ldr	r2, [pc, #156]	@ (800e7d8 <TIM_OC2_SetConfig+0x104>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d10d      	bne.n	800e75c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	011b      	lsls	r3, r3, #4
 800e74e:	697a      	ldr	r2, [r7, #20]
 800e750:	4313      	orrs	r3, r2
 800e752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e75a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4a1d      	ldr	r2, [pc, #116]	@ (800e7d4 <TIM_OC2_SetConfig+0x100>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d00f      	beq.n	800e784 <TIM_OC2_SetConfig+0xb0>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4a1c      	ldr	r2, [pc, #112]	@ (800e7d8 <TIM_OC2_SetConfig+0x104>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d00b      	beq.n	800e784 <TIM_OC2_SetConfig+0xb0>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a1b      	ldr	r2, [pc, #108]	@ (800e7dc <TIM_OC2_SetConfig+0x108>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d007      	beq.n	800e784 <TIM_OC2_SetConfig+0xb0>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a1a      	ldr	r2, [pc, #104]	@ (800e7e0 <TIM_OC2_SetConfig+0x10c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d003      	beq.n	800e784 <TIM_OC2_SetConfig+0xb0>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a19      	ldr	r2, [pc, #100]	@ (800e7e4 <TIM_OC2_SetConfig+0x110>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d113      	bne.n	800e7ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e78a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	695b      	ldr	r3, [r3, #20]
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	693a      	ldr	r2, [r7, #16]
 800e79c:	4313      	orrs	r3, r2
 800e79e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	699b      	ldr	r3, [r3, #24]
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	693a      	ldr	r2, [r7, #16]
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	693a      	ldr	r2, [r7, #16]
 800e7b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	68fa      	ldr	r2, [r7, #12]
 800e7b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	685a      	ldr	r2, [r3, #4]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	697a      	ldr	r2, [r7, #20]
 800e7c4:	621a      	str	r2, [r3, #32]
}
 800e7c6:	bf00      	nop
 800e7c8:	371c      	adds	r7, #28
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	40012c00 	.word	0x40012c00
 800e7d8:	40013400 	.word	0x40013400
 800e7dc:	40014000 	.word	0x40014000
 800e7e0:	40014400 	.word	0x40014400
 800e7e4:	40014800 	.word	0x40014800

0800e7e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6a1b      	ldr	r3, [r3, #32]
 800e7f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6a1b      	ldr	r3, [r3, #32]
 800e7fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e81a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f023 0303 	bic.w	r3, r3, #3
 800e822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	021b      	lsls	r3, r3, #8
 800e83c:	697a      	ldr	r2, [r7, #20]
 800e83e:	4313      	orrs	r3, r2
 800e840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4a27      	ldr	r2, [pc, #156]	@ (800e8e4 <TIM_OC3_SetConfig+0xfc>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d003      	beq.n	800e852 <TIM_OC3_SetConfig+0x6a>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a26      	ldr	r2, [pc, #152]	@ (800e8e8 <TIM_OC3_SetConfig+0x100>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d10d      	bne.n	800e86e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	021b      	lsls	r3, r3, #8
 800e860:	697a      	ldr	r2, [r7, #20]
 800e862:	4313      	orrs	r3, r2
 800e864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e86c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4a1c      	ldr	r2, [pc, #112]	@ (800e8e4 <TIM_OC3_SetConfig+0xfc>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d00f      	beq.n	800e896 <TIM_OC3_SetConfig+0xae>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4a1b      	ldr	r2, [pc, #108]	@ (800e8e8 <TIM_OC3_SetConfig+0x100>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d00b      	beq.n	800e896 <TIM_OC3_SetConfig+0xae>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	4a1a      	ldr	r2, [pc, #104]	@ (800e8ec <TIM_OC3_SetConfig+0x104>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d007      	beq.n	800e896 <TIM_OC3_SetConfig+0xae>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4a19      	ldr	r2, [pc, #100]	@ (800e8f0 <TIM_OC3_SetConfig+0x108>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d003      	beq.n	800e896 <TIM_OC3_SetConfig+0xae>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4a18      	ldr	r2, [pc, #96]	@ (800e8f4 <TIM_OC3_SetConfig+0x10c>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d113      	bne.n	800e8be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e89c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e8a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	695b      	ldr	r3, [r3, #20]
 800e8aa:	011b      	lsls	r3, r3, #4
 800e8ac:	693a      	ldr	r2, [r7, #16]
 800e8ae:	4313      	orrs	r3, r2
 800e8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	699b      	ldr	r3, [r3, #24]
 800e8b6:	011b      	lsls	r3, r3, #4
 800e8b8:	693a      	ldr	r2, [r7, #16]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	685a      	ldr	r2, [r3, #4]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	697a      	ldr	r2, [r7, #20]
 800e8d6:	621a      	str	r2, [r3, #32]
}
 800e8d8:	bf00      	nop
 800e8da:	371c      	adds	r7, #28
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	40012c00 	.word	0x40012c00
 800e8e8:	40013400 	.word	0x40013400
 800e8ec:	40014000 	.word	0x40014000
 800e8f0:	40014400 	.word	0x40014400
 800e8f4:	40014800 	.word	0x40014800

0800e8f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b087      	sub	sp, #28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a1b      	ldr	r3, [r3, #32]
 800e90c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	69db      	ldr	r3, [r3, #28]
 800e91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e92a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	021b      	lsls	r3, r3, #8
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	4313      	orrs	r3, r2
 800e93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	031b      	lsls	r3, r3, #12
 800e94e:	693a      	ldr	r2, [r7, #16]
 800e950:	4313      	orrs	r3, r2
 800e952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4a18      	ldr	r2, [pc, #96]	@ (800e9b8 <TIM_OC4_SetConfig+0xc0>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d00f      	beq.n	800e97c <TIM_OC4_SetConfig+0x84>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a17      	ldr	r2, [pc, #92]	@ (800e9bc <TIM_OC4_SetConfig+0xc4>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d00b      	beq.n	800e97c <TIM_OC4_SetConfig+0x84>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a16      	ldr	r2, [pc, #88]	@ (800e9c0 <TIM_OC4_SetConfig+0xc8>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d007      	beq.n	800e97c <TIM_OC4_SetConfig+0x84>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4a15      	ldr	r2, [pc, #84]	@ (800e9c4 <TIM_OC4_SetConfig+0xcc>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d003      	beq.n	800e97c <TIM_OC4_SetConfig+0x84>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4a14      	ldr	r2, [pc, #80]	@ (800e9c8 <TIM_OC4_SetConfig+0xd0>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d109      	bne.n	800e990 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	019b      	lsls	r3, r3, #6
 800e98a:	697a      	ldr	r2, [r7, #20]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	693a      	ldr	r2, [r7, #16]
 800e9a8:	621a      	str	r2, [r3, #32]
}
 800e9aa:	bf00      	nop
 800e9ac:	371c      	adds	r7, #28
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop
 800e9b8:	40012c00 	.word	0x40012c00
 800e9bc:	40013400 	.word	0x40013400
 800e9c0:	40014000 	.word	0x40014000
 800e9c4:	40014400 	.word	0x40014400
 800e9c8:	40014800 	.word	0x40014800

0800e9cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b087      	sub	sp, #28
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a1b      	ldr	r3, [r3, #32]
 800e9da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a1b      	ldr	r3, [r3, #32]
 800e9e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ea10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	041b      	lsls	r3, r3, #16
 800ea18:	693a      	ldr	r2, [r7, #16]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4a17      	ldr	r2, [pc, #92]	@ (800ea80 <TIM_OC5_SetConfig+0xb4>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d00f      	beq.n	800ea46 <TIM_OC5_SetConfig+0x7a>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	4a16      	ldr	r2, [pc, #88]	@ (800ea84 <TIM_OC5_SetConfig+0xb8>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d00b      	beq.n	800ea46 <TIM_OC5_SetConfig+0x7a>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4a15      	ldr	r2, [pc, #84]	@ (800ea88 <TIM_OC5_SetConfig+0xbc>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d007      	beq.n	800ea46 <TIM_OC5_SetConfig+0x7a>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4a14      	ldr	r2, [pc, #80]	@ (800ea8c <TIM_OC5_SetConfig+0xc0>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d003      	beq.n	800ea46 <TIM_OC5_SetConfig+0x7a>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a13      	ldr	r2, [pc, #76]	@ (800ea90 <TIM_OC5_SetConfig+0xc4>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d109      	bne.n	800ea5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	695b      	ldr	r3, [r3, #20]
 800ea52:	021b      	lsls	r3, r3, #8
 800ea54:	697a      	ldr	r2, [r7, #20]
 800ea56:	4313      	orrs	r3, r2
 800ea58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	697a      	ldr	r2, [r7, #20]
 800ea5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	685a      	ldr	r2, [r3, #4]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	693a      	ldr	r2, [r7, #16]
 800ea72:	621a      	str	r2, [r3, #32]
}
 800ea74:	bf00      	nop
 800ea76:	371c      	adds	r7, #28
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	40012c00 	.word	0x40012c00
 800ea84:	40013400 	.word	0x40013400
 800ea88:	40014000 	.word	0x40014000
 800ea8c:	40014400 	.word	0x40014400
 800ea90:	40014800 	.word	0x40014800

0800ea94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a1b      	ldr	r3, [r3, #32]
 800eaa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a1b      	ldr	r3, [r3, #32]
 800eaa8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	021b      	lsls	r3, r3, #8
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	4313      	orrs	r3, r2
 800ead2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	051b      	lsls	r3, r3, #20
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	4313      	orrs	r3, r2
 800eae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	4a18      	ldr	r2, [pc, #96]	@ (800eb4c <TIM_OC6_SetConfig+0xb8>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d00f      	beq.n	800eb10 <TIM_OC6_SetConfig+0x7c>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	4a17      	ldr	r2, [pc, #92]	@ (800eb50 <TIM_OC6_SetConfig+0xbc>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d00b      	beq.n	800eb10 <TIM_OC6_SetConfig+0x7c>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4a16      	ldr	r2, [pc, #88]	@ (800eb54 <TIM_OC6_SetConfig+0xc0>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d007      	beq.n	800eb10 <TIM_OC6_SetConfig+0x7c>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4a15      	ldr	r2, [pc, #84]	@ (800eb58 <TIM_OC6_SetConfig+0xc4>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d003      	beq.n	800eb10 <TIM_OC6_SetConfig+0x7c>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4a14      	ldr	r2, [pc, #80]	@ (800eb5c <TIM_OC6_SetConfig+0xc8>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d109      	bne.n	800eb24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eb16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	695b      	ldr	r3, [r3, #20]
 800eb1c:	029b      	lsls	r3, r3, #10
 800eb1e:	697a      	ldr	r2, [r7, #20]
 800eb20:	4313      	orrs	r3, r2
 800eb22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	697a      	ldr	r2, [r7, #20]
 800eb28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	68fa      	ldr	r2, [r7, #12]
 800eb2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	685a      	ldr	r2, [r3, #4]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	693a      	ldr	r2, [r7, #16]
 800eb3c:	621a      	str	r2, [r3, #32]
}
 800eb3e:	bf00      	nop
 800eb40:	371c      	adds	r7, #28
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	40012c00 	.word	0x40012c00
 800eb50:	40013400 	.word	0x40013400
 800eb54:	40014000 	.word	0x40014000
 800eb58:	40014400 	.word	0x40014400
 800eb5c:	40014800 	.word	0x40014800

0800eb60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b087      	sub	sp, #28
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	6a1b      	ldr	r3, [r3, #32]
 800eb70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6a1b      	ldr	r3, [r3, #32]
 800eb76:	f023 0201 	bic.w	r2, r3, #1
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800eb8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	011b      	lsls	r3, r3, #4
 800eb90:	693a      	ldr	r2, [r7, #16]
 800eb92:	4313      	orrs	r3, r2
 800eb94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	f023 030a 	bic.w	r3, r3, #10
 800eb9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eb9e:	697a      	ldr	r2, [r7, #20]
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	4313      	orrs	r3, r2
 800eba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	693a      	ldr	r2, [r7, #16]
 800ebaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	697a      	ldr	r2, [r7, #20]
 800ebb0:	621a      	str	r2, [r3, #32]
}
 800ebb2:	bf00      	nop
 800ebb4:	371c      	adds	r7, #28
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr

0800ebbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ebbe:	b480      	push	{r7}
 800ebc0:	b087      	sub	sp, #28
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	60f8      	str	r0, [r7, #12]
 800ebc6:	60b9      	str	r1, [r7, #8]
 800ebc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6a1b      	ldr	r3, [r3, #32]
 800ebd4:	f023 0210 	bic.w	r2, r3, #16
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	699b      	ldr	r3, [r3, #24]
 800ebe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ebe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	031b      	lsls	r3, r3, #12
 800ebee:	693a      	ldr	r2, [r7, #16]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ebfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	011b      	lsls	r3, r3, #4
 800ec00:	697a      	ldr	r2, [r7, #20]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	693a      	ldr	r2, [r7, #16]
 800ec0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	697a      	ldr	r2, [r7, #20]
 800ec10:	621a      	str	r2, [r3, #32]
}
 800ec12:	bf00      	nop
 800ec14:	371c      	adds	r7, #28
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr

0800ec1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ec1e:	b480      	push	{r7}
 800ec20:	b085      	sub	sp, #20
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec36:	683a      	ldr	r2, [r7, #0]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	f043 0307 	orr.w	r3, r3, #7
 800ec40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	609a      	str	r2, [r3, #8]
}
 800ec48:	bf00      	nop
 800ec4a:	3714      	adds	r7, #20
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr

0800ec54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b087      	sub	sp, #28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ec6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	021a      	lsls	r2, r3, #8
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	431a      	orrs	r2, r3
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	697a      	ldr	r2, [r7, #20]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	697a      	ldr	r2, [r7, #20]
 800ec86:	609a      	str	r2, [r3, #8]
}
 800ec88:	bf00      	nop
 800ec8a:	371c      	adds	r7, #28
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b087      	sub	sp, #28
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	f003 031f 	and.w	r3, r3, #31
 800eca6:	2201      	movs	r2, #1
 800eca8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6a1a      	ldr	r2, [r3, #32]
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	43db      	mvns	r3, r3
 800ecb6:	401a      	ands	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6a1a      	ldr	r2, [r3, #32]
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f003 031f 	and.w	r3, r3, #31
 800ecc6:	6879      	ldr	r1, [r7, #4]
 800ecc8:	fa01 f303 	lsl.w	r3, r1, r3
 800eccc:	431a      	orrs	r2, r3
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	621a      	str	r2, [r3, #32]
}
 800ecd2:	bf00      	nop
 800ecd4:	371c      	adds	r7, #28
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr
	...

0800ece0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d101      	bne.n	800ecf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ecf4:	2302      	movs	r3, #2
 800ecf6:	e068      	b.n	800edca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2202      	movs	r2, #2
 800ed04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a2e      	ldr	r2, [pc, #184]	@ (800edd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d004      	beq.n	800ed2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4a2d      	ldr	r2, [pc, #180]	@ (800eddc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d108      	bne.n	800ed3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ed32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a1e      	ldr	r2, [pc, #120]	@ (800edd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d01d      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed6a:	d018      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a1b      	ldr	r2, [pc, #108]	@ (800ede0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d013      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a1a      	ldr	r2, [pc, #104]	@ (800ede4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d00e      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a18      	ldr	r2, [pc, #96]	@ (800ede8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d009      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a13      	ldr	r2, [pc, #76]	@ (800eddc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d004      	beq.n	800ed9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a14      	ldr	r2, [pc, #80]	@ (800edec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d10c      	bne.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eda4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4313      	orrs	r3, r2
 800edae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800edc8:	2300      	movs	r3, #0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3714      	adds	r7, #20
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	40012c00 	.word	0x40012c00
 800eddc:	40013400 	.word	0x40013400
 800ede0:	40000400 	.word	0x40000400
 800ede4:	40000800 	.word	0x40000800
 800ede8:	40000c00 	.word	0x40000c00
 800edec:	40014000 	.word	0x40014000

0800edf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800edfa:	2300      	movs	r3, #0
 800edfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d101      	bne.n	800ee0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ee08:	2302      	movs	r3, #2
 800ee0a:	e065      	b.n	800eed8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	695b      	ldr	r3, [r3, #20]
 800ee64:	4313      	orrs	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee72:	4313      	orrs	r3, r2
 800ee74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	041b      	lsls	r3, r3, #16
 800ee82:	4313      	orrs	r3, r2
 800ee84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a16      	ldr	r2, [pc, #88]	@ (800eee4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d004      	beq.n	800ee9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a14      	ldr	r2, [pc, #80]	@ (800eee8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d115      	bne.n	800eec6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea4:	051b      	lsls	r3, r3, #20
 800eea6:	4313      	orrs	r3, r2
 800eea8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	69db      	ldr	r3, [r3, #28]
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	4313      	orrs	r3, r2
 800eec4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eed6:	2300      	movs	r3, #0
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3714      	adds	r7, #20
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	40012c00 	.word	0x40012c00
 800eee8:	40013400 	.word	0x40013400

0800eeec <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800eeec:	b480      	push	{r7}
 800eeee:	b08b      	sub	sp, #44	@ 0x2c
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eef8:	2300      	movs	r3, #0
 800eefa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d101      	bne.n	800ef0c <HAL_TIMEx_ConfigBreakInput+0x20>
 800ef08:	2302      	movs	r3, #2
 800ef0a:	e0af      	b.n	800f06c <HAL_TIMEx_ConfigBreakInput+0x180>
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	2b07      	cmp	r3, #7
 800ef1c:	d83a      	bhi.n	800ef94 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800ef1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef24 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800ef20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef24:	0800ef45 	.word	0x0800ef45
 800ef28:	0800ef59 	.word	0x0800ef59
 800ef2c:	0800ef95 	.word	0x0800ef95
 800ef30:	0800ef6d 	.word	0x0800ef6d
 800ef34:	0800ef95 	.word	0x0800ef95
 800ef38:	0800ef95 	.word	0x0800ef95
 800ef3c:	0800ef95 	.word	0x0800ef95
 800ef40:	0800ef81 	.word	0x0800ef81
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800ef44:	2301      	movs	r3, #1
 800ef46:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800ef4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef50:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800ef52:	2309      	movs	r3, #9
 800ef54:	613b      	str	r3, [r7, #16]
      break;
 800ef56:	e026      	b.n	800efa6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800ef58:	2302      	movs	r3, #2
 800ef5a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800ef60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef64:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800ef66:	230a      	movs	r3, #10
 800ef68:	613b      	str	r3, [r7, #16]
      break;
 800ef6a:	e01c      	b.n	800efa6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800ef6c:	2304      	movs	r3, #4
 800ef6e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800ef70:	2302      	movs	r3, #2
 800ef72:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800ef74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ef78:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800ef7a:	230b      	movs	r3, #11
 800ef7c:	613b      	str	r3, [r7, #16]
      break;
 800ef7e:	e012      	b.n	800efa6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800ef80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef84:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800ef86:	2308      	movs	r3, #8
 800ef88:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	613b      	str	r3, [r7, #16]
      break;
 800ef92:	e008      	b.n	800efa6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800ef94:	2300      	movs	r3, #0
 800ef96:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800efa0:	2300      	movs	r3, #0
 800efa2:	613b      	str	r3, [r7, #16]
      break;
 800efa4:	bf00      	nop
    }
  }

  switch (BreakInput)
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d003      	beq.n	800efb4 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	2b02      	cmp	r3, #2
 800efb0:	d029      	beq.n	800f006 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800efb2:	e051      	b.n	800f058 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efba:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	43db      	mvns	r3, r3
 800efc0:	6a3a      	ldr	r2, [r7, #32]
 800efc2:	4013      	ands	r3, r2
 800efc4:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	409a      	lsls	r2, r3
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	4013      	ands	r3, r2
 800efd2:	6a3a      	ldr	r2, [r7, #32]
 800efd4:	4313      	orrs	r3, r2
 800efd6:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b08      	cmp	r3, #8
 800efde:	d00d      	beq.n	800effc <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	43db      	mvns	r3, r3
 800efe4:	6a3a      	ldr	r2, [r7, #32]
 800efe6:	4013      	ands	r3, r2
 800efe8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	689a      	ldr	r2, [r3, #8]
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	409a      	lsls	r2, r3
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	4013      	ands	r3, r2
 800eff6:	6a3a      	ldr	r2, [r7, #32]
 800eff8:	4313      	orrs	r3, r2
 800effa:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6a3a      	ldr	r2, [r7, #32]
 800f002:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800f004:	e02c      	b.n	800f060 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f00c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	43db      	mvns	r3, r3
 800f012:	6a3a      	ldr	r2, [r7, #32]
 800f014:	4013      	ands	r3, r2
 800f016:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	685a      	ldr	r2, [r3, #4]
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	409a      	lsls	r2, r3
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	4013      	ands	r3, r2
 800f024:	6a3a      	ldr	r2, [r7, #32]
 800f026:	4313      	orrs	r3, r2
 800f028:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b08      	cmp	r3, #8
 800f030:	d00d      	beq.n	800f04e <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	43db      	mvns	r3, r3
 800f036:	6a3a      	ldr	r2, [r7, #32]
 800f038:	4013      	ands	r3, r2
 800f03a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	689a      	ldr	r2, [r3, #8]
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	409a      	lsls	r2, r3
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	4013      	ands	r3, r2
 800f048:	6a3a      	ldr	r2, [r7, #32]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	6a3a      	ldr	r2, [r7, #32]
 800f054:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800f056:	e003      	b.n	800f060 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f05e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	372c      	adds	r7, #44	@ 0x2c
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f080:	bf00      	nop
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f094:	bf00      	nop
 800f096:	370c      	adds	r7, #12
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f0a8:	bf00      	nop
 800f0aa:	370c      	adds	r7, #12
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e042      	b.n	800f14c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d106      	bne.n	800f0de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7f4 ff4f 	bl	8003f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2224      	movs	r2, #36	@ 0x24
 800f0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f022 0201 	bic.w	r2, r2, #1
 800f0f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d002      	beq.n	800f104 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 fbb2 	bl	800f868 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f000 f8b3 	bl	800f270 <UART_SetConfig>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d101      	bne.n	800f114 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f110:	2301      	movs	r3, #1
 800f112:	e01b      	b.n	800f14c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f042 0201 	orr.w	r2, r2, #1
 800f142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 fc31 	bl	800f9ac <UART_CheckIdleState>
 800f14a:	4603      	mov	r3, r0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b08a      	sub	sp, #40	@ 0x28
 800f158:	af02      	add	r7, sp, #8
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	603b      	str	r3, [r7, #0]
 800f160:	4613      	mov	r3, r2
 800f162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f16a:	2b20      	cmp	r3, #32
 800f16c:	d17b      	bne.n	800f266 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d002      	beq.n	800f17a <HAL_UART_Transmit+0x26>
 800f174:	88fb      	ldrh	r3, [r7, #6]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d101      	bne.n	800f17e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e074      	b.n	800f268 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2221      	movs	r2, #33	@ 0x21
 800f18a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f18e:	f7f7 fc69 	bl	8006a64 <HAL_GetTick>
 800f192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	88fa      	ldrh	r2, [r7, #6]
 800f198:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	88fa      	ldrh	r2, [r7, #6]
 800f1a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1ac:	d108      	bne.n	800f1c0 <HAL_UART_Transmit+0x6c>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d104      	bne.n	800f1c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	61bb      	str	r3, [r7, #24]
 800f1be:	e003      	b.n	800f1c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f1c8:	e030      	b.n	800f22c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	9300      	str	r3, [sp, #0]
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	2180      	movs	r1, #128	@ 0x80
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f000 fc93 	bl	800fb00 <UART_WaitOnFlagUntilTimeout>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d005      	beq.n	800f1ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2220      	movs	r2, #32
 800f1e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f1e8:	2303      	movs	r3, #3
 800f1ea:	e03d      	b.n	800f268 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d10b      	bne.n	800f20a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	881a      	ldrh	r2, [r3, #0]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f1fe:	b292      	uxth	r2, r2
 800f200:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	3302      	adds	r3, #2
 800f206:	61bb      	str	r3, [r7, #24]
 800f208:	e007      	b.n	800f21a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	781a      	ldrb	r2, [r3, #0]
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	3301      	adds	r3, #1
 800f218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f220:	b29b      	uxth	r3, r3
 800f222:	3b01      	subs	r3, #1
 800f224:	b29a      	uxth	r2, r3
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f232:	b29b      	uxth	r3, r3
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1c8      	bne.n	800f1ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	2200      	movs	r2, #0
 800f240:	2140      	movs	r1, #64	@ 0x40
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f000 fc5c 	bl	800fb00 <UART_WaitOnFlagUntilTimeout>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d005      	beq.n	800f25a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2220      	movs	r2, #32
 800f252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f256:	2303      	movs	r3, #3
 800f258:	e006      	b.n	800f268 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2220      	movs	r2, #32
 800f25e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f262:	2300      	movs	r3, #0
 800f264:	e000      	b.n	800f268 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f266:	2302      	movs	r3, #2
  }
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3720      	adds	r7, #32
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f274:	b08c      	sub	sp, #48	@ 0x30
 800f276:	af00      	add	r7, sp, #0
 800f278:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f27a:	2300      	movs	r3, #0
 800f27c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	689a      	ldr	r2, [r3, #8]
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	431a      	orrs	r2, r3
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	695b      	ldr	r3, [r3, #20]
 800f28e:	431a      	orrs	r2, r3
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	69db      	ldr	r3, [r3, #28]
 800f294:	4313      	orrs	r3, r2
 800f296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	4baa      	ldr	r3, [pc, #680]	@ (800f548 <UART_SetConfig+0x2d8>)
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	697a      	ldr	r2, [r7, #20]
 800f2a4:	6812      	ldr	r2, [r2, #0]
 800f2a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f2a8:	430b      	orrs	r3, r1
 800f2aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	68da      	ldr	r2, [r3, #12]
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	430a      	orrs	r2, r1
 800f2c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	699b      	ldr	r3, [r3, #24]
 800f2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a9f      	ldr	r2, [pc, #636]	@ (800f54c <UART_SetConfig+0x2dc>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d004      	beq.n	800f2dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	6a1b      	ldr	r3, [r3, #32]
 800f2d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f2e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f2ea:	697a      	ldr	r2, [r7, #20]
 800f2ec:	6812      	ldr	r2, [r2, #0]
 800f2ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f2f0:	430b      	orrs	r3, r1
 800f2f2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fa:	f023 010f 	bic.w	r1, r3, #15
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	430a      	orrs	r2, r1
 800f308:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4a90      	ldr	r2, [pc, #576]	@ (800f550 <UART_SetConfig+0x2e0>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d125      	bne.n	800f360 <UART_SetConfig+0xf0>
 800f314:	4b8f      	ldr	r3, [pc, #572]	@ (800f554 <UART_SetConfig+0x2e4>)
 800f316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f31a:	f003 0303 	and.w	r3, r3, #3
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d81a      	bhi.n	800f358 <UART_SetConfig+0xe8>
 800f322:	a201      	add	r2, pc, #4	@ (adr r2, 800f328 <UART_SetConfig+0xb8>)
 800f324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f328:	0800f339 	.word	0x0800f339
 800f32c:	0800f349 	.word	0x0800f349
 800f330:	0800f341 	.word	0x0800f341
 800f334:	0800f351 	.word	0x0800f351
 800f338:	2301      	movs	r3, #1
 800f33a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f33e:	e116      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f340:	2302      	movs	r3, #2
 800f342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f346:	e112      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f348:	2304      	movs	r3, #4
 800f34a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f34e:	e10e      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f350:	2308      	movs	r3, #8
 800f352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f356:	e10a      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f358:	2310      	movs	r3, #16
 800f35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f35e:	e106      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4a7c      	ldr	r2, [pc, #496]	@ (800f558 <UART_SetConfig+0x2e8>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d138      	bne.n	800f3dc <UART_SetConfig+0x16c>
 800f36a:	4b7a      	ldr	r3, [pc, #488]	@ (800f554 <UART_SetConfig+0x2e4>)
 800f36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f370:	f003 030c 	and.w	r3, r3, #12
 800f374:	2b0c      	cmp	r3, #12
 800f376:	d82d      	bhi.n	800f3d4 <UART_SetConfig+0x164>
 800f378:	a201      	add	r2, pc, #4	@ (adr r2, 800f380 <UART_SetConfig+0x110>)
 800f37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37e:	bf00      	nop
 800f380:	0800f3b5 	.word	0x0800f3b5
 800f384:	0800f3d5 	.word	0x0800f3d5
 800f388:	0800f3d5 	.word	0x0800f3d5
 800f38c:	0800f3d5 	.word	0x0800f3d5
 800f390:	0800f3c5 	.word	0x0800f3c5
 800f394:	0800f3d5 	.word	0x0800f3d5
 800f398:	0800f3d5 	.word	0x0800f3d5
 800f39c:	0800f3d5 	.word	0x0800f3d5
 800f3a0:	0800f3bd 	.word	0x0800f3bd
 800f3a4:	0800f3d5 	.word	0x0800f3d5
 800f3a8:	0800f3d5 	.word	0x0800f3d5
 800f3ac:	0800f3d5 	.word	0x0800f3d5
 800f3b0:	0800f3cd 	.word	0x0800f3cd
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f3ba:	e0d8      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f3bc:	2302      	movs	r3, #2
 800f3be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f3c2:	e0d4      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f3c4:	2304      	movs	r3, #4
 800f3c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f3ca:	e0d0      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f3cc:	2308      	movs	r3, #8
 800f3ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f3d2:	e0cc      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f3d4:	2310      	movs	r3, #16
 800f3d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f3da:	e0c8      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4a5e      	ldr	r2, [pc, #376]	@ (800f55c <UART_SetConfig+0x2ec>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d125      	bne.n	800f432 <UART_SetConfig+0x1c2>
 800f3e6:	4b5b      	ldr	r3, [pc, #364]	@ (800f554 <UART_SetConfig+0x2e4>)
 800f3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f3f0:	2b30      	cmp	r3, #48	@ 0x30
 800f3f2:	d016      	beq.n	800f422 <UART_SetConfig+0x1b2>
 800f3f4:	2b30      	cmp	r3, #48	@ 0x30
 800f3f6:	d818      	bhi.n	800f42a <UART_SetConfig+0x1ba>
 800f3f8:	2b20      	cmp	r3, #32
 800f3fa:	d00a      	beq.n	800f412 <UART_SetConfig+0x1a2>
 800f3fc:	2b20      	cmp	r3, #32
 800f3fe:	d814      	bhi.n	800f42a <UART_SetConfig+0x1ba>
 800f400:	2b00      	cmp	r3, #0
 800f402:	d002      	beq.n	800f40a <UART_SetConfig+0x19a>
 800f404:	2b10      	cmp	r3, #16
 800f406:	d008      	beq.n	800f41a <UART_SetConfig+0x1aa>
 800f408:	e00f      	b.n	800f42a <UART_SetConfig+0x1ba>
 800f40a:	2300      	movs	r3, #0
 800f40c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f410:	e0ad      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f412:	2302      	movs	r3, #2
 800f414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f418:	e0a9      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f41a:	2304      	movs	r3, #4
 800f41c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f420:	e0a5      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f422:	2308      	movs	r3, #8
 800f424:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f428:	e0a1      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f42a:	2310      	movs	r3, #16
 800f42c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f430:	e09d      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a4a      	ldr	r2, [pc, #296]	@ (800f560 <UART_SetConfig+0x2f0>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d125      	bne.n	800f488 <UART_SetConfig+0x218>
 800f43c:	4b45      	ldr	r3, [pc, #276]	@ (800f554 <UART_SetConfig+0x2e4>)
 800f43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f442:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f446:	2bc0      	cmp	r3, #192	@ 0xc0
 800f448:	d016      	beq.n	800f478 <UART_SetConfig+0x208>
 800f44a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f44c:	d818      	bhi.n	800f480 <UART_SetConfig+0x210>
 800f44e:	2b80      	cmp	r3, #128	@ 0x80
 800f450:	d00a      	beq.n	800f468 <UART_SetConfig+0x1f8>
 800f452:	2b80      	cmp	r3, #128	@ 0x80
 800f454:	d814      	bhi.n	800f480 <UART_SetConfig+0x210>
 800f456:	2b00      	cmp	r3, #0
 800f458:	d002      	beq.n	800f460 <UART_SetConfig+0x1f0>
 800f45a:	2b40      	cmp	r3, #64	@ 0x40
 800f45c:	d008      	beq.n	800f470 <UART_SetConfig+0x200>
 800f45e:	e00f      	b.n	800f480 <UART_SetConfig+0x210>
 800f460:	2300      	movs	r3, #0
 800f462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f466:	e082      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f468:	2302      	movs	r3, #2
 800f46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f46e:	e07e      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f470:	2304      	movs	r3, #4
 800f472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f476:	e07a      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f478:	2308      	movs	r3, #8
 800f47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f47e:	e076      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f480:	2310      	movs	r3, #16
 800f482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f486:	e072      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4a35      	ldr	r2, [pc, #212]	@ (800f564 <UART_SetConfig+0x2f4>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d12a      	bne.n	800f4e8 <UART_SetConfig+0x278>
 800f492:	4b30      	ldr	r3, [pc, #192]	@ (800f554 <UART_SetConfig+0x2e4>)
 800f494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f498:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f49c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4a0:	d01a      	beq.n	800f4d8 <UART_SetConfig+0x268>
 800f4a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4a6:	d81b      	bhi.n	800f4e0 <UART_SetConfig+0x270>
 800f4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4ac:	d00c      	beq.n	800f4c8 <UART_SetConfig+0x258>
 800f4ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4b2:	d815      	bhi.n	800f4e0 <UART_SetConfig+0x270>
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d003      	beq.n	800f4c0 <UART_SetConfig+0x250>
 800f4b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4bc:	d008      	beq.n	800f4d0 <UART_SetConfig+0x260>
 800f4be:	e00f      	b.n	800f4e0 <UART_SetConfig+0x270>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4c6:	e052      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f4c8:	2302      	movs	r3, #2
 800f4ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4ce:	e04e      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f4d0:	2304      	movs	r3, #4
 800f4d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4d6:	e04a      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f4d8:	2308      	movs	r3, #8
 800f4da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4de:	e046      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f4e0:	2310      	movs	r3, #16
 800f4e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4e6:	e042      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a17      	ldr	r2, [pc, #92]	@ (800f54c <UART_SetConfig+0x2dc>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d13a      	bne.n	800f568 <UART_SetConfig+0x2f8>
 800f4f2:	4b18      	ldr	r3, [pc, #96]	@ (800f554 <UART_SetConfig+0x2e4>)
 800f4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f4fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f500:	d01a      	beq.n	800f538 <UART_SetConfig+0x2c8>
 800f502:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f506:	d81b      	bhi.n	800f540 <UART_SetConfig+0x2d0>
 800f508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f50c:	d00c      	beq.n	800f528 <UART_SetConfig+0x2b8>
 800f50e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f512:	d815      	bhi.n	800f540 <UART_SetConfig+0x2d0>
 800f514:	2b00      	cmp	r3, #0
 800f516:	d003      	beq.n	800f520 <UART_SetConfig+0x2b0>
 800f518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f51c:	d008      	beq.n	800f530 <UART_SetConfig+0x2c0>
 800f51e:	e00f      	b.n	800f540 <UART_SetConfig+0x2d0>
 800f520:	2300      	movs	r3, #0
 800f522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f526:	e022      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f528:	2302      	movs	r3, #2
 800f52a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f52e:	e01e      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f530:	2304      	movs	r3, #4
 800f532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f536:	e01a      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f538:	2308      	movs	r3, #8
 800f53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f53e:	e016      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f540:	2310      	movs	r3, #16
 800f542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f546:	e012      	b.n	800f56e <UART_SetConfig+0x2fe>
 800f548:	cfff69f3 	.word	0xcfff69f3
 800f54c:	40008000 	.word	0x40008000
 800f550:	40013800 	.word	0x40013800
 800f554:	40021000 	.word	0x40021000
 800f558:	40004400 	.word	0x40004400
 800f55c:	40004800 	.word	0x40004800
 800f560:	40004c00 	.word	0x40004c00
 800f564:	40005000 	.word	0x40005000
 800f568:	2310      	movs	r3, #16
 800f56a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4aae      	ldr	r2, [pc, #696]	@ (800f82c <UART_SetConfig+0x5bc>)
 800f574:	4293      	cmp	r3, r2
 800f576:	f040 8097 	bne.w	800f6a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f57a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f57e:	2b08      	cmp	r3, #8
 800f580:	d823      	bhi.n	800f5ca <UART_SetConfig+0x35a>
 800f582:	a201      	add	r2, pc, #4	@ (adr r2, 800f588 <UART_SetConfig+0x318>)
 800f584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f588:	0800f5ad 	.word	0x0800f5ad
 800f58c:	0800f5cb 	.word	0x0800f5cb
 800f590:	0800f5b5 	.word	0x0800f5b5
 800f594:	0800f5cb 	.word	0x0800f5cb
 800f598:	0800f5bb 	.word	0x0800f5bb
 800f59c:	0800f5cb 	.word	0x0800f5cb
 800f5a0:	0800f5cb 	.word	0x0800f5cb
 800f5a4:	0800f5cb 	.word	0x0800f5cb
 800f5a8:	0800f5c3 	.word	0x0800f5c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5ac:	f7fa fb58 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800f5b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f5b2:	e010      	b.n	800f5d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f5b4:	4b9e      	ldr	r3, [pc, #632]	@ (800f830 <UART_SetConfig+0x5c0>)
 800f5b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f5b8:	e00d      	b.n	800f5d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5ba:	f7fa fab9 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800f5be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f5c0:	e009      	b.n	800f5d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f5c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f5c8:	e005      	b.n	800f5d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f5d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 8130 	beq.w	800f83e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5e2:	4a94      	ldr	r2, [pc, #592]	@ (800f834 <UART_SetConfig+0x5c4>)
 800f5e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	685a      	ldr	r2, [r3, #4]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	4413      	add	r3, r2
 800f5fc:	69ba      	ldr	r2, [r7, #24]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d305      	bcc.n	800f60e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f608:	69ba      	ldr	r2, [r7, #24]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d903      	bls.n	800f616 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f60e:	2301      	movs	r3, #1
 800f610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f614:	e113      	b.n	800f83e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f618:	2200      	movs	r2, #0
 800f61a:	60bb      	str	r3, [r7, #8]
 800f61c:	60fa      	str	r2, [r7, #12]
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f622:	4a84      	ldr	r2, [pc, #528]	@ (800f834 <UART_SetConfig+0x5c4>)
 800f624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f628:	b29b      	uxth	r3, r3
 800f62a:	2200      	movs	r2, #0
 800f62c:	603b      	str	r3, [r7, #0]
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f634:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f638:	f7f1 fb1e 	bl	8000c78 <__aeabi_uldivmod>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	4610      	mov	r0, r2
 800f642:	4619      	mov	r1, r3
 800f644:	f04f 0200 	mov.w	r2, #0
 800f648:	f04f 0300 	mov.w	r3, #0
 800f64c:	020b      	lsls	r3, r1, #8
 800f64e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f652:	0202      	lsls	r2, r0, #8
 800f654:	6979      	ldr	r1, [r7, #20]
 800f656:	6849      	ldr	r1, [r1, #4]
 800f658:	0849      	lsrs	r1, r1, #1
 800f65a:	2000      	movs	r0, #0
 800f65c:	460c      	mov	r4, r1
 800f65e:	4605      	mov	r5, r0
 800f660:	eb12 0804 	adds.w	r8, r2, r4
 800f664:	eb43 0905 	adc.w	r9, r3, r5
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	469a      	mov	sl, r3
 800f670:	4693      	mov	fp, r2
 800f672:	4652      	mov	r2, sl
 800f674:	465b      	mov	r3, fp
 800f676:	4640      	mov	r0, r8
 800f678:	4649      	mov	r1, r9
 800f67a:	f7f1 fafd 	bl	8000c78 <__aeabi_uldivmod>
 800f67e:	4602      	mov	r2, r0
 800f680:	460b      	mov	r3, r1
 800f682:	4613      	mov	r3, r2
 800f684:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f68c:	d308      	bcc.n	800f6a0 <UART_SetConfig+0x430>
 800f68e:	6a3b      	ldr	r3, [r7, #32]
 800f690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f694:	d204      	bcs.n	800f6a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	6a3a      	ldr	r2, [r7, #32]
 800f69c:	60da      	str	r2, [r3, #12]
 800f69e:	e0ce      	b.n	800f83e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f6a6:	e0ca      	b.n	800f83e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	69db      	ldr	r3, [r3, #28]
 800f6ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f6b0:	d166      	bne.n	800f780 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f6b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f6b6:	2b08      	cmp	r3, #8
 800f6b8:	d827      	bhi.n	800f70a <UART_SetConfig+0x49a>
 800f6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f6c0 <UART_SetConfig+0x450>)
 800f6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c0:	0800f6e5 	.word	0x0800f6e5
 800f6c4:	0800f6ed 	.word	0x0800f6ed
 800f6c8:	0800f6f5 	.word	0x0800f6f5
 800f6cc:	0800f70b 	.word	0x0800f70b
 800f6d0:	0800f6fb 	.word	0x0800f6fb
 800f6d4:	0800f70b 	.word	0x0800f70b
 800f6d8:	0800f70b 	.word	0x0800f70b
 800f6dc:	0800f70b 	.word	0x0800f70b
 800f6e0:	0800f703 	.word	0x0800f703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6e4:	f7fa fabc 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800f6e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f6ea:	e014      	b.n	800f716 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f6ec:	f7fa face 	bl	8009c8c <HAL_RCC_GetPCLK2Freq>
 800f6f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f6f2:	e010      	b.n	800f716 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f6f4:	4b4e      	ldr	r3, [pc, #312]	@ (800f830 <UART_SetConfig+0x5c0>)
 800f6f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f6f8:	e00d      	b.n	800f716 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f6fa:	f7fa fa19 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800f6fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f700:	e009      	b.n	800f716 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f708:	e005      	b.n	800f716 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f70a:	2300      	movs	r3, #0
 800f70c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f70e:	2301      	movs	r3, #1
 800f710:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f000 8090 	beq.w	800f83e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f722:	4a44      	ldr	r2, [pc, #272]	@ (800f834 <UART_SetConfig+0x5c4>)
 800f724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f728:	461a      	mov	r2, r3
 800f72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f72c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f730:	005a      	lsls	r2, r3, #1
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	085b      	lsrs	r3, r3, #1
 800f738:	441a      	add	r2, r3
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f742:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f744:	6a3b      	ldr	r3, [r7, #32]
 800f746:	2b0f      	cmp	r3, #15
 800f748:	d916      	bls.n	800f778 <UART_SetConfig+0x508>
 800f74a:	6a3b      	ldr	r3, [r7, #32]
 800f74c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f750:	d212      	bcs.n	800f778 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f752:	6a3b      	ldr	r3, [r7, #32]
 800f754:	b29b      	uxth	r3, r3
 800f756:	f023 030f 	bic.w	r3, r3, #15
 800f75a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f75c:	6a3b      	ldr	r3, [r7, #32]
 800f75e:	085b      	lsrs	r3, r3, #1
 800f760:	b29b      	uxth	r3, r3
 800f762:	f003 0307 	and.w	r3, r3, #7
 800f766:	b29a      	uxth	r2, r3
 800f768:	8bfb      	ldrh	r3, [r7, #30]
 800f76a:	4313      	orrs	r3, r2
 800f76c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	8bfa      	ldrh	r2, [r7, #30]
 800f774:	60da      	str	r2, [r3, #12]
 800f776:	e062      	b.n	800f83e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f778:	2301      	movs	r3, #1
 800f77a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f77e:	e05e      	b.n	800f83e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f780:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f784:	2b08      	cmp	r3, #8
 800f786:	d828      	bhi.n	800f7da <UART_SetConfig+0x56a>
 800f788:	a201      	add	r2, pc, #4	@ (adr r2, 800f790 <UART_SetConfig+0x520>)
 800f78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78e:	bf00      	nop
 800f790:	0800f7b5 	.word	0x0800f7b5
 800f794:	0800f7bd 	.word	0x0800f7bd
 800f798:	0800f7c5 	.word	0x0800f7c5
 800f79c:	0800f7db 	.word	0x0800f7db
 800f7a0:	0800f7cb 	.word	0x0800f7cb
 800f7a4:	0800f7db 	.word	0x0800f7db
 800f7a8:	0800f7db 	.word	0x0800f7db
 800f7ac:	0800f7db 	.word	0x0800f7db
 800f7b0:	0800f7d3 	.word	0x0800f7d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7b4:	f7fa fa54 	bl	8009c60 <HAL_RCC_GetPCLK1Freq>
 800f7b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f7ba:	e014      	b.n	800f7e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f7bc:	f7fa fa66 	bl	8009c8c <HAL_RCC_GetPCLK2Freq>
 800f7c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f7c2:	e010      	b.n	800f7e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f7c4:	4b1a      	ldr	r3, [pc, #104]	@ (800f830 <UART_SetConfig+0x5c0>)
 800f7c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f7c8:	e00d      	b.n	800f7e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f7ca:	f7fa f9b1 	bl	8009b30 <HAL_RCC_GetSysClockFreq>
 800f7ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f7d0:	e009      	b.n	800f7e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f7d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f7d8:	e005      	b.n	800f7e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f7e4:	bf00      	nop
    }

    if (pclk != 0U)
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d028      	beq.n	800f83e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7f0:	4a10      	ldr	r2, [pc, #64]	@ (800f834 <UART_SetConfig+0x5c4>)
 800f7f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	085b      	lsrs	r3, r3, #1
 800f804:	441a      	add	r2, r3
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f80e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f810:	6a3b      	ldr	r3, [r7, #32]
 800f812:	2b0f      	cmp	r3, #15
 800f814:	d910      	bls.n	800f838 <UART_SetConfig+0x5c8>
 800f816:	6a3b      	ldr	r3, [r7, #32]
 800f818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f81c:	d20c      	bcs.n	800f838 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f81e:	6a3b      	ldr	r3, [r7, #32]
 800f820:	b29a      	uxth	r2, r3
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	60da      	str	r2, [r3, #12]
 800f828:	e009      	b.n	800f83e <UART_SetConfig+0x5ce>
 800f82a:	bf00      	nop
 800f82c:	40008000 	.word	0x40008000
 800f830:	00f42400 	.word	0x00f42400
 800f834:	080180ac 	.word	0x080180ac
      }
      else
      {
        ret = HAL_ERROR;
 800f838:	2301      	movs	r3, #1
 800f83a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	2201      	movs	r2, #1
 800f842:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	2201      	movs	r2, #1
 800f84a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	2200      	movs	r2, #0
 800f852:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	2200      	movs	r2, #0
 800f858:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f85a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3730      	adds	r7, #48	@ 0x30
 800f862:	46bd      	mov	sp, r7
 800f864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f874:	f003 0308 	and.w	r3, r3, #8
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00a      	beq.n	800f892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	430a      	orrs	r2, r1
 800f890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f896:	f003 0301 	and.w	r3, r3, #1
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d00a      	beq.n	800f8b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	430a      	orrs	r2, r1
 800f8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8b8:	f003 0302 	and.w	r3, r3, #2
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00a      	beq.n	800f8d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	430a      	orrs	r2, r1
 800f8d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8da:	f003 0304 	and.w	r3, r3, #4
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00a      	beq.n	800f8f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	430a      	orrs	r2, r1
 800f8f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8fc:	f003 0310 	and.w	r3, r3, #16
 800f900:	2b00      	cmp	r3, #0
 800f902:	d00a      	beq.n	800f91a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	689b      	ldr	r3, [r3, #8]
 800f90a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	430a      	orrs	r2, r1
 800f918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f91e:	f003 0320 	and.w	r3, r3, #32
 800f922:	2b00      	cmp	r3, #0
 800f924:	d00a      	beq.n	800f93c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	430a      	orrs	r2, r1
 800f93a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f944:	2b00      	cmp	r3, #0
 800f946:	d01a      	beq.n	800f97e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	430a      	orrs	r2, r1
 800f95c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f966:	d10a      	bne.n	800f97e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	430a      	orrs	r2, r1
 800f97c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00a      	beq.n	800f9a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	430a      	orrs	r2, r1
 800f99e:	605a      	str	r2, [r3, #4]
  }
}
 800f9a0:	bf00      	nop
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr

0800f9ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b098      	sub	sp, #96	@ 0x60
 800f9b0:	af02      	add	r7, sp, #8
 800f9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f9bc:	f7f7 f852 	bl	8006a64 <HAL_GetTick>
 800f9c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f003 0308 	and.w	r3, r3, #8
 800f9cc:	2b08      	cmp	r3, #8
 800f9ce:	d12f      	bne.n	800fa30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 f88e 	bl	800fb00 <UART_WaitOnFlagUntilTimeout>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d022      	beq.n	800fa30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f2:	e853 3f00 	ldrex	r3, [r3]
 800f9f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	461a      	mov	r2, r3
 800fa06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa08:	647b      	str	r3, [r7, #68]	@ 0x44
 800fa0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fa0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa10:	e841 2300 	strex	r3, r2, [r1]
 800fa14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fa16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e6      	bne.n	800f9ea <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2220      	movs	r2, #32
 800fa20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa2c:	2303      	movs	r3, #3
 800fa2e:	e063      	b.n	800faf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	f003 0304 	and.w	r3, r3, #4
 800fa3a:	2b04      	cmp	r3, #4
 800fa3c:	d149      	bne.n	800fad2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa46:	2200      	movs	r2, #0
 800fa48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 f857 	bl	800fb00 <UART_WaitOnFlagUntilTimeout>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d03c      	beq.n	800fad2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa60:	e853 3f00 	ldrex	r3, [r3]
 800fa64:	623b      	str	r3, [r7, #32]
   return(result);
 800fa66:	6a3b      	ldr	r3, [r7, #32]
 800fa68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa76:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa7e:	e841 2300 	strex	r3, r2, [r1]
 800fa82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fa84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1e6      	bne.n	800fa58 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	3308      	adds	r3, #8
 800fa90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	e853 3f00 	ldrex	r3, [r3]
 800fa98:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f023 0301 	bic.w	r3, r3, #1
 800faa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	3308      	adds	r3, #8
 800faa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800faaa:	61fa      	str	r2, [r7, #28]
 800faac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faae:	69b9      	ldr	r1, [r7, #24]
 800fab0:	69fa      	ldr	r2, [r7, #28]
 800fab2:	e841 2300 	strex	r3, r2, [r1]
 800fab6:	617b      	str	r3, [r7, #20]
   return(result);
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d1e5      	bne.n	800fa8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2220      	movs	r2, #32
 800fac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2200      	movs	r2, #0
 800faca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800face:	2303      	movs	r3, #3
 800fad0:	e012      	b.n	800faf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2220      	movs	r2, #32
 800fad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2220      	movs	r2, #32
 800fade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3758      	adds	r7, #88	@ 0x58
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	603b      	str	r3, [r7, #0]
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb10:	e049      	b.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb18:	d045      	beq.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb1a:	f7f6 ffa3 	bl	8006a64 <HAL_GetTick>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	69ba      	ldr	r2, [r7, #24]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d302      	bcc.n	800fb30 <UART_WaitOnFlagUntilTimeout+0x30>
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fb30:	2303      	movs	r3, #3
 800fb32:	e048      	b.n	800fbc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f003 0304 	and.w	r3, r3, #4
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d031      	beq.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	69db      	ldr	r3, [r3, #28]
 800fb48:	f003 0308 	and.w	r3, r3, #8
 800fb4c:	2b08      	cmp	r3, #8
 800fb4e:	d110      	bne.n	800fb72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2208      	movs	r2, #8
 800fb56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f000 f838 	bl	800fbce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2208      	movs	r2, #8
 800fb62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e029      	b.n	800fbc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	69db      	ldr	r3, [r3, #28]
 800fb78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fb7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb80:	d111      	bne.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fb8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb8c:	68f8      	ldr	r0, [r7, #12]
 800fb8e:	f000 f81e 	bl	800fbce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2220      	movs	r2, #32
 800fb96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e00f      	b.n	800fbc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	69da      	ldr	r2, [r3, #28]
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	4013      	ands	r3, r2
 800fbb0:	68ba      	ldr	r2, [r7, #8]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	bf0c      	ite	eq
 800fbb6:	2301      	moveq	r3, #1
 800fbb8:	2300      	movne	r3, #0
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	79fb      	ldrb	r3, [r7, #7]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d0a6      	beq.n	800fb12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3710      	adds	r7, #16
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fbce:	b480      	push	{r7}
 800fbd0:	b095      	sub	sp, #84	@ 0x54
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbde:	e853 3f00 	ldrex	r3, [r3]
 800fbe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fbea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbf4:	643b      	str	r3, [r7, #64]	@ 0x40
 800fbf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fbfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fbfc:	e841 2300 	strex	r3, r2, [r1]
 800fc00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1e6      	bne.n	800fbd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	3308      	adds	r3, #8
 800fc0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc10:	6a3b      	ldr	r3, [r7, #32]
 800fc12:	e853 3f00 	ldrex	r3, [r3]
 800fc16:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc1e:	f023 0301 	bic.w	r3, r3, #1
 800fc22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	3308      	adds	r3, #8
 800fc2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc34:	e841 2300 	strex	r3, r2, [r1]
 800fc38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d1e3      	bne.n	800fc08 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d118      	bne.n	800fc7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	e853 3f00 	ldrex	r3, [r3]
 800fc54:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	f023 0310 	bic.w	r3, r3, #16
 800fc5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	461a      	mov	r2, r3
 800fc64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc66:	61bb      	str	r3, [r7, #24]
 800fc68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc6a:	6979      	ldr	r1, [r7, #20]
 800fc6c:	69ba      	ldr	r2, [r7, #24]
 800fc6e:	e841 2300 	strex	r3, r2, [r1]
 800fc72:	613b      	str	r3, [r7, #16]
   return(result);
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1e6      	bne.n	800fc48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2220      	movs	r2, #32
 800fc7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fc8e:	bf00      	nop
 800fc90:	3754      	adds	r7, #84	@ 0x54
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr

0800fc9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fc9a:	b480      	push	{r7}
 800fc9c:	b085      	sub	sp, #20
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d101      	bne.n	800fcb0 <HAL_UARTEx_DisableFifoMode+0x16>
 800fcac:	2302      	movs	r3, #2
 800fcae:	e027      	b.n	800fd00 <HAL_UARTEx_DisableFifoMode+0x66>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2224      	movs	r2, #36	@ 0x24
 800fcbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f022 0201 	bic.w	r2, r2, #1
 800fcd6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fcde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2220      	movs	r2, #32
 800fcf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3714      	adds	r7, #20
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr

0800fd0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d101      	bne.n	800fd24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd20:	2302      	movs	r3, #2
 800fd22:	e02d      	b.n	800fd80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2201      	movs	r2, #1
 800fd28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2224      	movs	r2, #36	@ 0x24
 800fd30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f022 0201 	bic.w	r2, r2, #1
 800fd4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	430a      	orrs	r2, r1
 800fd5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f84f 	bl	800fe04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2220      	movs	r2, #32
 800fd72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d101      	bne.n	800fda0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fd9c:	2302      	movs	r3, #2
 800fd9e:	e02d      	b.n	800fdfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2201      	movs	r2, #1
 800fda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2224      	movs	r2, #36	@ 0x24
 800fdac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f022 0201 	bic.w	r2, r2, #1
 800fdc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	683a      	ldr	r2, [r7, #0]
 800fdd8:	430a      	orrs	r2, r1
 800fdda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 f811 	bl	800fe04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68fa      	ldr	r2, [r7, #12]
 800fde8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2220      	movs	r2, #32
 800fdee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d108      	bne.n	800fe26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2201      	movs	r2, #1
 800fe18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2201      	movs	r2, #1
 800fe20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fe24:	e031      	b.n	800fe8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fe26:	2308      	movs	r3, #8
 800fe28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fe2a:	2308      	movs	r3, #8
 800fe2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	689b      	ldr	r3, [r3, #8]
 800fe34:	0e5b      	lsrs	r3, r3, #25
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	f003 0307 	and.w	r3, r3, #7
 800fe3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	0f5b      	lsrs	r3, r3, #29
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f003 0307 	and.w	r3, r3, #7
 800fe4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fe4e:	7bbb      	ldrb	r3, [r7, #14]
 800fe50:	7b3a      	ldrb	r2, [r7, #12]
 800fe52:	4911      	ldr	r1, [pc, #68]	@ (800fe98 <UARTEx_SetNbDataToProcess+0x94>)
 800fe54:	5c8a      	ldrb	r2, [r1, r2]
 800fe56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fe5a:	7b3a      	ldrb	r2, [r7, #12]
 800fe5c:	490f      	ldr	r1, [pc, #60]	@ (800fe9c <UARTEx_SetNbDataToProcess+0x98>)
 800fe5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fe60:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
 800fe6e:	7b7a      	ldrb	r2, [r7, #13]
 800fe70:	4909      	ldr	r1, [pc, #36]	@ (800fe98 <UARTEx_SetNbDataToProcess+0x94>)
 800fe72:	5c8a      	ldrb	r2, [r1, r2]
 800fe74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fe78:	7b7a      	ldrb	r2, [r7, #13]
 800fe7a:	4908      	ldr	r1, [pc, #32]	@ (800fe9c <UARTEx_SetNbDataToProcess+0x98>)
 800fe7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fe8a:	bf00      	nop
 800fe8c:	3714      	adds	r7, #20
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop
 800fe98:	080180c4 	.word	0x080180c4
 800fe9c:	080180cc 	.word	0x080180cc

0800fea0 <malloc>:
 800fea0:	4b02      	ldr	r3, [pc, #8]	@ (800feac <malloc+0xc>)
 800fea2:	4601      	mov	r1, r0
 800fea4:	6818      	ldr	r0, [r3, #0]
 800fea6:	f000 b825 	b.w	800fef4 <_malloc_r>
 800feaa:	bf00      	nop
 800feac:	2000003c 	.word	0x2000003c

0800feb0 <sbrk_aligned>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	4e0f      	ldr	r6, [pc, #60]	@ (800fef0 <sbrk_aligned+0x40>)
 800feb4:	460c      	mov	r4, r1
 800feb6:	6831      	ldr	r1, [r6, #0]
 800feb8:	4605      	mov	r5, r0
 800feba:	b911      	cbnz	r1, 800fec2 <sbrk_aligned+0x12>
 800febc:	f000 fe78 	bl	8010bb0 <_sbrk_r>
 800fec0:	6030      	str	r0, [r6, #0]
 800fec2:	4621      	mov	r1, r4
 800fec4:	4628      	mov	r0, r5
 800fec6:	f000 fe73 	bl	8010bb0 <_sbrk_r>
 800feca:	1c43      	adds	r3, r0, #1
 800fecc:	d103      	bne.n	800fed6 <sbrk_aligned+0x26>
 800fece:	f04f 34ff 	mov.w	r4, #4294967295
 800fed2:	4620      	mov	r0, r4
 800fed4:	bd70      	pop	{r4, r5, r6, pc}
 800fed6:	1cc4      	adds	r4, r0, #3
 800fed8:	f024 0403 	bic.w	r4, r4, #3
 800fedc:	42a0      	cmp	r0, r4
 800fede:	d0f8      	beq.n	800fed2 <sbrk_aligned+0x22>
 800fee0:	1a21      	subs	r1, r4, r0
 800fee2:	4628      	mov	r0, r5
 800fee4:	f000 fe64 	bl	8010bb0 <_sbrk_r>
 800fee8:	3001      	adds	r0, #1
 800feea:	d1f2      	bne.n	800fed2 <sbrk_aligned+0x22>
 800feec:	e7ef      	b.n	800fece <sbrk_aligned+0x1e>
 800feee:	bf00      	nop
 800fef0:	20000bb0 	.word	0x20000bb0

0800fef4 <_malloc_r>:
 800fef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef8:	1ccd      	adds	r5, r1, #3
 800fefa:	f025 0503 	bic.w	r5, r5, #3
 800fefe:	3508      	adds	r5, #8
 800ff00:	2d0c      	cmp	r5, #12
 800ff02:	bf38      	it	cc
 800ff04:	250c      	movcc	r5, #12
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	4606      	mov	r6, r0
 800ff0a:	db01      	blt.n	800ff10 <_malloc_r+0x1c>
 800ff0c:	42a9      	cmp	r1, r5
 800ff0e:	d904      	bls.n	800ff1a <_malloc_r+0x26>
 800ff10:	230c      	movs	r3, #12
 800ff12:	6033      	str	r3, [r6, #0]
 800ff14:	2000      	movs	r0, #0
 800ff16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fff0 <_malloc_r+0xfc>
 800ff1e:	f000 f869 	bl	800fff4 <__malloc_lock>
 800ff22:	f8d8 3000 	ldr.w	r3, [r8]
 800ff26:	461c      	mov	r4, r3
 800ff28:	bb44      	cbnz	r4, 800ff7c <_malloc_r+0x88>
 800ff2a:	4629      	mov	r1, r5
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	f7ff ffbf 	bl	800feb0 <sbrk_aligned>
 800ff32:	1c43      	adds	r3, r0, #1
 800ff34:	4604      	mov	r4, r0
 800ff36:	d158      	bne.n	800ffea <_malloc_r+0xf6>
 800ff38:	f8d8 4000 	ldr.w	r4, [r8]
 800ff3c:	4627      	mov	r7, r4
 800ff3e:	2f00      	cmp	r7, #0
 800ff40:	d143      	bne.n	800ffca <_malloc_r+0xd6>
 800ff42:	2c00      	cmp	r4, #0
 800ff44:	d04b      	beq.n	800ffde <_malloc_r+0xea>
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	4639      	mov	r1, r7
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	eb04 0903 	add.w	r9, r4, r3
 800ff50:	f000 fe2e 	bl	8010bb0 <_sbrk_r>
 800ff54:	4581      	cmp	r9, r0
 800ff56:	d142      	bne.n	800ffde <_malloc_r+0xea>
 800ff58:	6821      	ldr	r1, [r4, #0]
 800ff5a:	1a6d      	subs	r5, r5, r1
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	4630      	mov	r0, r6
 800ff60:	f7ff ffa6 	bl	800feb0 <sbrk_aligned>
 800ff64:	3001      	adds	r0, #1
 800ff66:	d03a      	beq.n	800ffde <_malloc_r+0xea>
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	442b      	add	r3, r5
 800ff6c:	6023      	str	r3, [r4, #0]
 800ff6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff72:	685a      	ldr	r2, [r3, #4]
 800ff74:	bb62      	cbnz	r2, 800ffd0 <_malloc_r+0xdc>
 800ff76:	f8c8 7000 	str.w	r7, [r8]
 800ff7a:	e00f      	b.n	800ff9c <_malloc_r+0xa8>
 800ff7c:	6822      	ldr	r2, [r4, #0]
 800ff7e:	1b52      	subs	r2, r2, r5
 800ff80:	d420      	bmi.n	800ffc4 <_malloc_r+0xd0>
 800ff82:	2a0b      	cmp	r2, #11
 800ff84:	d917      	bls.n	800ffb6 <_malloc_r+0xc2>
 800ff86:	1961      	adds	r1, r4, r5
 800ff88:	42a3      	cmp	r3, r4
 800ff8a:	6025      	str	r5, [r4, #0]
 800ff8c:	bf18      	it	ne
 800ff8e:	6059      	strne	r1, [r3, #4]
 800ff90:	6863      	ldr	r3, [r4, #4]
 800ff92:	bf08      	it	eq
 800ff94:	f8c8 1000 	streq.w	r1, [r8]
 800ff98:	5162      	str	r2, [r4, r5]
 800ff9a:	604b      	str	r3, [r1, #4]
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f000 f82f 	bl	8010000 <__malloc_unlock>
 800ffa2:	f104 000b 	add.w	r0, r4, #11
 800ffa6:	1d23      	adds	r3, r4, #4
 800ffa8:	f020 0007 	bic.w	r0, r0, #7
 800ffac:	1ac2      	subs	r2, r0, r3
 800ffae:	bf1c      	itt	ne
 800ffb0:	1a1b      	subne	r3, r3, r0
 800ffb2:	50a3      	strne	r3, [r4, r2]
 800ffb4:	e7af      	b.n	800ff16 <_malloc_r+0x22>
 800ffb6:	6862      	ldr	r2, [r4, #4]
 800ffb8:	42a3      	cmp	r3, r4
 800ffba:	bf0c      	ite	eq
 800ffbc:	f8c8 2000 	streq.w	r2, [r8]
 800ffc0:	605a      	strne	r2, [r3, #4]
 800ffc2:	e7eb      	b.n	800ff9c <_malloc_r+0xa8>
 800ffc4:	4623      	mov	r3, r4
 800ffc6:	6864      	ldr	r4, [r4, #4]
 800ffc8:	e7ae      	b.n	800ff28 <_malloc_r+0x34>
 800ffca:	463c      	mov	r4, r7
 800ffcc:	687f      	ldr	r7, [r7, #4]
 800ffce:	e7b6      	b.n	800ff3e <_malloc_r+0x4a>
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	42a3      	cmp	r3, r4
 800ffd6:	d1fb      	bne.n	800ffd0 <_malloc_r+0xdc>
 800ffd8:	2300      	movs	r3, #0
 800ffda:	6053      	str	r3, [r2, #4]
 800ffdc:	e7de      	b.n	800ff9c <_malloc_r+0xa8>
 800ffde:	230c      	movs	r3, #12
 800ffe0:	6033      	str	r3, [r6, #0]
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	f000 f80c 	bl	8010000 <__malloc_unlock>
 800ffe8:	e794      	b.n	800ff14 <_malloc_r+0x20>
 800ffea:	6005      	str	r5, [r0, #0]
 800ffec:	e7d6      	b.n	800ff9c <_malloc_r+0xa8>
 800ffee:	bf00      	nop
 800fff0:	20000bb4 	.word	0x20000bb4

0800fff4 <__malloc_lock>:
 800fff4:	4801      	ldr	r0, [pc, #4]	@ (800fffc <__malloc_lock+0x8>)
 800fff6:	f000 be28 	b.w	8010c4a <__retarget_lock_acquire_recursive>
 800fffa:	bf00      	nop
 800fffc:	20000cf8 	.word	0x20000cf8

08010000 <__malloc_unlock>:
 8010000:	4801      	ldr	r0, [pc, #4]	@ (8010008 <__malloc_unlock+0x8>)
 8010002:	f000 be23 	b.w	8010c4c <__retarget_lock_release_recursive>
 8010006:	bf00      	nop
 8010008:	20000cf8 	.word	0x20000cf8

0801000c <__cvt>:
 801000c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010010:	ec57 6b10 	vmov	r6, r7, d0
 8010014:	2f00      	cmp	r7, #0
 8010016:	460c      	mov	r4, r1
 8010018:	4619      	mov	r1, r3
 801001a:	463b      	mov	r3, r7
 801001c:	bfbb      	ittet	lt
 801001e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010022:	461f      	movlt	r7, r3
 8010024:	2300      	movge	r3, #0
 8010026:	232d      	movlt	r3, #45	@ 0x2d
 8010028:	700b      	strb	r3, [r1, #0]
 801002a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801002c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010030:	4691      	mov	r9, r2
 8010032:	f023 0820 	bic.w	r8, r3, #32
 8010036:	bfbc      	itt	lt
 8010038:	4632      	movlt	r2, r6
 801003a:	4616      	movlt	r6, r2
 801003c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010040:	d005      	beq.n	801004e <__cvt+0x42>
 8010042:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010046:	d100      	bne.n	801004a <__cvt+0x3e>
 8010048:	3401      	adds	r4, #1
 801004a:	2102      	movs	r1, #2
 801004c:	e000      	b.n	8010050 <__cvt+0x44>
 801004e:	2103      	movs	r1, #3
 8010050:	ab03      	add	r3, sp, #12
 8010052:	9301      	str	r3, [sp, #4]
 8010054:	ab02      	add	r3, sp, #8
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	ec47 6b10 	vmov	d0, r6, r7
 801005c:	4653      	mov	r3, sl
 801005e:	4622      	mov	r2, r4
 8010060:	f000 fe8e 	bl	8010d80 <_dtoa_r>
 8010064:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010068:	4605      	mov	r5, r0
 801006a:	d119      	bne.n	80100a0 <__cvt+0x94>
 801006c:	f019 0f01 	tst.w	r9, #1
 8010070:	d00e      	beq.n	8010090 <__cvt+0x84>
 8010072:	eb00 0904 	add.w	r9, r0, r4
 8010076:	2200      	movs	r2, #0
 8010078:	2300      	movs	r3, #0
 801007a:	4630      	mov	r0, r6
 801007c:	4639      	mov	r1, r7
 801007e:	f7f0 fd3b 	bl	8000af8 <__aeabi_dcmpeq>
 8010082:	b108      	cbz	r0, 8010088 <__cvt+0x7c>
 8010084:	f8cd 900c 	str.w	r9, [sp, #12]
 8010088:	2230      	movs	r2, #48	@ 0x30
 801008a:	9b03      	ldr	r3, [sp, #12]
 801008c:	454b      	cmp	r3, r9
 801008e:	d31e      	bcc.n	80100ce <__cvt+0xc2>
 8010090:	9b03      	ldr	r3, [sp, #12]
 8010092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010094:	1b5b      	subs	r3, r3, r5
 8010096:	4628      	mov	r0, r5
 8010098:	6013      	str	r3, [r2, #0]
 801009a:	b004      	add	sp, #16
 801009c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80100a4:	eb00 0904 	add.w	r9, r0, r4
 80100a8:	d1e5      	bne.n	8010076 <__cvt+0x6a>
 80100aa:	7803      	ldrb	r3, [r0, #0]
 80100ac:	2b30      	cmp	r3, #48	@ 0x30
 80100ae:	d10a      	bne.n	80100c6 <__cvt+0xba>
 80100b0:	2200      	movs	r2, #0
 80100b2:	2300      	movs	r3, #0
 80100b4:	4630      	mov	r0, r6
 80100b6:	4639      	mov	r1, r7
 80100b8:	f7f0 fd1e 	bl	8000af8 <__aeabi_dcmpeq>
 80100bc:	b918      	cbnz	r0, 80100c6 <__cvt+0xba>
 80100be:	f1c4 0401 	rsb	r4, r4, #1
 80100c2:	f8ca 4000 	str.w	r4, [sl]
 80100c6:	f8da 3000 	ldr.w	r3, [sl]
 80100ca:	4499      	add	r9, r3
 80100cc:	e7d3      	b.n	8010076 <__cvt+0x6a>
 80100ce:	1c59      	adds	r1, r3, #1
 80100d0:	9103      	str	r1, [sp, #12]
 80100d2:	701a      	strb	r2, [r3, #0]
 80100d4:	e7d9      	b.n	801008a <__cvt+0x7e>

080100d6 <__exponent>:
 80100d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100d8:	2900      	cmp	r1, #0
 80100da:	bfba      	itte	lt
 80100dc:	4249      	neglt	r1, r1
 80100de:	232d      	movlt	r3, #45	@ 0x2d
 80100e0:	232b      	movge	r3, #43	@ 0x2b
 80100e2:	2909      	cmp	r1, #9
 80100e4:	7002      	strb	r2, [r0, #0]
 80100e6:	7043      	strb	r3, [r0, #1]
 80100e8:	dd29      	ble.n	801013e <__exponent+0x68>
 80100ea:	f10d 0307 	add.w	r3, sp, #7
 80100ee:	461d      	mov	r5, r3
 80100f0:	270a      	movs	r7, #10
 80100f2:	461a      	mov	r2, r3
 80100f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80100f8:	fb07 1416 	mls	r4, r7, r6, r1
 80100fc:	3430      	adds	r4, #48	@ 0x30
 80100fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010102:	460c      	mov	r4, r1
 8010104:	2c63      	cmp	r4, #99	@ 0x63
 8010106:	f103 33ff 	add.w	r3, r3, #4294967295
 801010a:	4631      	mov	r1, r6
 801010c:	dcf1      	bgt.n	80100f2 <__exponent+0x1c>
 801010e:	3130      	adds	r1, #48	@ 0x30
 8010110:	1e94      	subs	r4, r2, #2
 8010112:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010116:	1c41      	adds	r1, r0, #1
 8010118:	4623      	mov	r3, r4
 801011a:	42ab      	cmp	r3, r5
 801011c:	d30a      	bcc.n	8010134 <__exponent+0x5e>
 801011e:	f10d 0309 	add.w	r3, sp, #9
 8010122:	1a9b      	subs	r3, r3, r2
 8010124:	42ac      	cmp	r4, r5
 8010126:	bf88      	it	hi
 8010128:	2300      	movhi	r3, #0
 801012a:	3302      	adds	r3, #2
 801012c:	4403      	add	r3, r0
 801012e:	1a18      	subs	r0, r3, r0
 8010130:	b003      	add	sp, #12
 8010132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010134:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010138:	f801 6f01 	strb.w	r6, [r1, #1]!
 801013c:	e7ed      	b.n	801011a <__exponent+0x44>
 801013e:	2330      	movs	r3, #48	@ 0x30
 8010140:	3130      	adds	r1, #48	@ 0x30
 8010142:	7083      	strb	r3, [r0, #2]
 8010144:	70c1      	strb	r1, [r0, #3]
 8010146:	1d03      	adds	r3, r0, #4
 8010148:	e7f1      	b.n	801012e <__exponent+0x58>
	...

0801014c <_printf_float>:
 801014c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010150:	b08d      	sub	sp, #52	@ 0x34
 8010152:	460c      	mov	r4, r1
 8010154:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010158:	4616      	mov	r6, r2
 801015a:	461f      	mov	r7, r3
 801015c:	4605      	mov	r5, r0
 801015e:	f000 fcef 	bl	8010b40 <_localeconv_r>
 8010162:	6803      	ldr	r3, [r0, #0]
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	4618      	mov	r0, r3
 8010168:	f7f0 f89a 	bl	80002a0 <strlen>
 801016c:	2300      	movs	r3, #0
 801016e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010170:	f8d8 3000 	ldr.w	r3, [r8]
 8010174:	9005      	str	r0, [sp, #20]
 8010176:	3307      	adds	r3, #7
 8010178:	f023 0307 	bic.w	r3, r3, #7
 801017c:	f103 0208 	add.w	r2, r3, #8
 8010180:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010184:	f8d4 b000 	ldr.w	fp, [r4]
 8010188:	f8c8 2000 	str.w	r2, [r8]
 801018c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010190:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010194:	9307      	str	r3, [sp, #28]
 8010196:	f8cd 8018 	str.w	r8, [sp, #24]
 801019a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801019e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101a2:	4b9c      	ldr	r3, [pc, #624]	@ (8010414 <_printf_float+0x2c8>)
 80101a4:	f04f 32ff 	mov.w	r2, #4294967295
 80101a8:	f7f0 fcd8 	bl	8000b5c <__aeabi_dcmpun>
 80101ac:	bb70      	cbnz	r0, 801020c <_printf_float+0xc0>
 80101ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101b2:	4b98      	ldr	r3, [pc, #608]	@ (8010414 <_printf_float+0x2c8>)
 80101b4:	f04f 32ff 	mov.w	r2, #4294967295
 80101b8:	f7f0 fcb2 	bl	8000b20 <__aeabi_dcmple>
 80101bc:	bb30      	cbnz	r0, 801020c <_printf_float+0xc0>
 80101be:	2200      	movs	r2, #0
 80101c0:	2300      	movs	r3, #0
 80101c2:	4640      	mov	r0, r8
 80101c4:	4649      	mov	r1, r9
 80101c6:	f7f0 fca1 	bl	8000b0c <__aeabi_dcmplt>
 80101ca:	b110      	cbz	r0, 80101d2 <_printf_float+0x86>
 80101cc:	232d      	movs	r3, #45	@ 0x2d
 80101ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101d2:	4a91      	ldr	r2, [pc, #580]	@ (8010418 <_printf_float+0x2cc>)
 80101d4:	4b91      	ldr	r3, [pc, #580]	@ (801041c <_printf_float+0x2d0>)
 80101d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80101da:	bf94      	ite	ls
 80101dc:	4690      	movls	r8, r2
 80101de:	4698      	movhi	r8, r3
 80101e0:	2303      	movs	r3, #3
 80101e2:	6123      	str	r3, [r4, #16]
 80101e4:	f02b 0304 	bic.w	r3, fp, #4
 80101e8:	6023      	str	r3, [r4, #0]
 80101ea:	f04f 0900 	mov.w	r9, #0
 80101ee:	9700      	str	r7, [sp, #0]
 80101f0:	4633      	mov	r3, r6
 80101f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80101f4:	4621      	mov	r1, r4
 80101f6:	4628      	mov	r0, r5
 80101f8:	f000 f9d2 	bl	80105a0 <_printf_common>
 80101fc:	3001      	adds	r0, #1
 80101fe:	f040 808d 	bne.w	801031c <_printf_float+0x1d0>
 8010202:	f04f 30ff 	mov.w	r0, #4294967295
 8010206:	b00d      	add	sp, #52	@ 0x34
 8010208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801020c:	4642      	mov	r2, r8
 801020e:	464b      	mov	r3, r9
 8010210:	4640      	mov	r0, r8
 8010212:	4649      	mov	r1, r9
 8010214:	f7f0 fca2 	bl	8000b5c <__aeabi_dcmpun>
 8010218:	b140      	cbz	r0, 801022c <_printf_float+0xe0>
 801021a:	464b      	mov	r3, r9
 801021c:	2b00      	cmp	r3, #0
 801021e:	bfbc      	itt	lt
 8010220:	232d      	movlt	r3, #45	@ 0x2d
 8010222:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010226:	4a7e      	ldr	r2, [pc, #504]	@ (8010420 <_printf_float+0x2d4>)
 8010228:	4b7e      	ldr	r3, [pc, #504]	@ (8010424 <_printf_float+0x2d8>)
 801022a:	e7d4      	b.n	80101d6 <_printf_float+0x8a>
 801022c:	6863      	ldr	r3, [r4, #4]
 801022e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010232:	9206      	str	r2, [sp, #24]
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	d13b      	bne.n	80102b0 <_printf_float+0x164>
 8010238:	2306      	movs	r3, #6
 801023a:	6063      	str	r3, [r4, #4]
 801023c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010240:	2300      	movs	r3, #0
 8010242:	6022      	str	r2, [r4, #0]
 8010244:	9303      	str	r3, [sp, #12]
 8010246:	ab0a      	add	r3, sp, #40	@ 0x28
 8010248:	e9cd a301 	strd	sl, r3, [sp, #4]
 801024c:	ab09      	add	r3, sp, #36	@ 0x24
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	6861      	ldr	r1, [r4, #4]
 8010252:	ec49 8b10 	vmov	d0, r8, r9
 8010256:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801025a:	4628      	mov	r0, r5
 801025c:	f7ff fed6 	bl	801000c <__cvt>
 8010260:	9b06      	ldr	r3, [sp, #24]
 8010262:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010264:	2b47      	cmp	r3, #71	@ 0x47
 8010266:	4680      	mov	r8, r0
 8010268:	d129      	bne.n	80102be <_printf_float+0x172>
 801026a:	1cc8      	adds	r0, r1, #3
 801026c:	db02      	blt.n	8010274 <_printf_float+0x128>
 801026e:	6863      	ldr	r3, [r4, #4]
 8010270:	4299      	cmp	r1, r3
 8010272:	dd41      	ble.n	80102f8 <_printf_float+0x1ac>
 8010274:	f1aa 0a02 	sub.w	sl, sl, #2
 8010278:	fa5f fa8a 	uxtb.w	sl, sl
 801027c:	3901      	subs	r1, #1
 801027e:	4652      	mov	r2, sl
 8010280:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010284:	9109      	str	r1, [sp, #36]	@ 0x24
 8010286:	f7ff ff26 	bl	80100d6 <__exponent>
 801028a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801028c:	1813      	adds	r3, r2, r0
 801028e:	2a01      	cmp	r2, #1
 8010290:	4681      	mov	r9, r0
 8010292:	6123      	str	r3, [r4, #16]
 8010294:	dc02      	bgt.n	801029c <_printf_float+0x150>
 8010296:	6822      	ldr	r2, [r4, #0]
 8010298:	07d2      	lsls	r2, r2, #31
 801029a:	d501      	bpl.n	80102a0 <_printf_float+0x154>
 801029c:	3301      	adds	r3, #1
 801029e:	6123      	str	r3, [r4, #16]
 80102a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d0a2      	beq.n	80101ee <_printf_float+0xa2>
 80102a8:	232d      	movs	r3, #45	@ 0x2d
 80102aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102ae:	e79e      	b.n	80101ee <_printf_float+0xa2>
 80102b0:	9a06      	ldr	r2, [sp, #24]
 80102b2:	2a47      	cmp	r2, #71	@ 0x47
 80102b4:	d1c2      	bne.n	801023c <_printf_float+0xf0>
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d1c0      	bne.n	801023c <_printf_float+0xf0>
 80102ba:	2301      	movs	r3, #1
 80102bc:	e7bd      	b.n	801023a <_printf_float+0xee>
 80102be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80102c2:	d9db      	bls.n	801027c <_printf_float+0x130>
 80102c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80102c8:	d118      	bne.n	80102fc <_printf_float+0x1b0>
 80102ca:	2900      	cmp	r1, #0
 80102cc:	6863      	ldr	r3, [r4, #4]
 80102ce:	dd0b      	ble.n	80102e8 <_printf_float+0x19c>
 80102d0:	6121      	str	r1, [r4, #16]
 80102d2:	b913      	cbnz	r3, 80102da <_printf_float+0x18e>
 80102d4:	6822      	ldr	r2, [r4, #0]
 80102d6:	07d0      	lsls	r0, r2, #31
 80102d8:	d502      	bpl.n	80102e0 <_printf_float+0x194>
 80102da:	3301      	adds	r3, #1
 80102dc:	440b      	add	r3, r1
 80102de:	6123      	str	r3, [r4, #16]
 80102e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80102e2:	f04f 0900 	mov.w	r9, #0
 80102e6:	e7db      	b.n	80102a0 <_printf_float+0x154>
 80102e8:	b913      	cbnz	r3, 80102f0 <_printf_float+0x1a4>
 80102ea:	6822      	ldr	r2, [r4, #0]
 80102ec:	07d2      	lsls	r2, r2, #31
 80102ee:	d501      	bpl.n	80102f4 <_printf_float+0x1a8>
 80102f0:	3302      	adds	r3, #2
 80102f2:	e7f4      	b.n	80102de <_printf_float+0x192>
 80102f4:	2301      	movs	r3, #1
 80102f6:	e7f2      	b.n	80102de <_printf_float+0x192>
 80102f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80102fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102fe:	4299      	cmp	r1, r3
 8010300:	db05      	blt.n	801030e <_printf_float+0x1c2>
 8010302:	6823      	ldr	r3, [r4, #0]
 8010304:	6121      	str	r1, [r4, #16]
 8010306:	07d8      	lsls	r0, r3, #31
 8010308:	d5ea      	bpl.n	80102e0 <_printf_float+0x194>
 801030a:	1c4b      	adds	r3, r1, #1
 801030c:	e7e7      	b.n	80102de <_printf_float+0x192>
 801030e:	2900      	cmp	r1, #0
 8010310:	bfd4      	ite	le
 8010312:	f1c1 0202 	rsble	r2, r1, #2
 8010316:	2201      	movgt	r2, #1
 8010318:	4413      	add	r3, r2
 801031a:	e7e0      	b.n	80102de <_printf_float+0x192>
 801031c:	6823      	ldr	r3, [r4, #0]
 801031e:	055a      	lsls	r2, r3, #21
 8010320:	d407      	bmi.n	8010332 <_printf_float+0x1e6>
 8010322:	6923      	ldr	r3, [r4, #16]
 8010324:	4642      	mov	r2, r8
 8010326:	4631      	mov	r1, r6
 8010328:	4628      	mov	r0, r5
 801032a:	47b8      	blx	r7
 801032c:	3001      	adds	r0, #1
 801032e:	d12b      	bne.n	8010388 <_printf_float+0x23c>
 8010330:	e767      	b.n	8010202 <_printf_float+0xb6>
 8010332:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010336:	f240 80dd 	bls.w	80104f4 <_printf_float+0x3a8>
 801033a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801033e:	2200      	movs	r2, #0
 8010340:	2300      	movs	r3, #0
 8010342:	f7f0 fbd9 	bl	8000af8 <__aeabi_dcmpeq>
 8010346:	2800      	cmp	r0, #0
 8010348:	d033      	beq.n	80103b2 <_printf_float+0x266>
 801034a:	4a37      	ldr	r2, [pc, #220]	@ (8010428 <_printf_float+0x2dc>)
 801034c:	2301      	movs	r3, #1
 801034e:	4631      	mov	r1, r6
 8010350:	4628      	mov	r0, r5
 8010352:	47b8      	blx	r7
 8010354:	3001      	adds	r0, #1
 8010356:	f43f af54 	beq.w	8010202 <_printf_float+0xb6>
 801035a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801035e:	4543      	cmp	r3, r8
 8010360:	db02      	blt.n	8010368 <_printf_float+0x21c>
 8010362:	6823      	ldr	r3, [r4, #0]
 8010364:	07d8      	lsls	r0, r3, #31
 8010366:	d50f      	bpl.n	8010388 <_printf_float+0x23c>
 8010368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801036c:	4631      	mov	r1, r6
 801036e:	4628      	mov	r0, r5
 8010370:	47b8      	blx	r7
 8010372:	3001      	adds	r0, #1
 8010374:	f43f af45 	beq.w	8010202 <_printf_float+0xb6>
 8010378:	f04f 0900 	mov.w	r9, #0
 801037c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010380:	f104 0a1a 	add.w	sl, r4, #26
 8010384:	45c8      	cmp	r8, r9
 8010386:	dc09      	bgt.n	801039c <_printf_float+0x250>
 8010388:	6823      	ldr	r3, [r4, #0]
 801038a:	079b      	lsls	r3, r3, #30
 801038c:	f100 8103 	bmi.w	8010596 <_printf_float+0x44a>
 8010390:	68e0      	ldr	r0, [r4, #12]
 8010392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010394:	4298      	cmp	r0, r3
 8010396:	bfb8      	it	lt
 8010398:	4618      	movlt	r0, r3
 801039a:	e734      	b.n	8010206 <_printf_float+0xba>
 801039c:	2301      	movs	r3, #1
 801039e:	4652      	mov	r2, sl
 80103a0:	4631      	mov	r1, r6
 80103a2:	4628      	mov	r0, r5
 80103a4:	47b8      	blx	r7
 80103a6:	3001      	adds	r0, #1
 80103a8:	f43f af2b 	beq.w	8010202 <_printf_float+0xb6>
 80103ac:	f109 0901 	add.w	r9, r9, #1
 80103b0:	e7e8      	b.n	8010384 <_printf_float+0x238>
 80103b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	dc39      	bgt.n	801042c <_printf_float+0x2e0>
 80103b8:	4a1b      	ldr	r2, [pc, #108]	@ (8010428 <_printf_float+0x2dc>)
 80103ba:	2301      	movs	r3, #1
 80103bc:	4631      	mov	r1, r6
 80103be:	4628      	mov	r0, r5
 80103c0:	47b8      	blx	r7
 80103c2:	3001      	adds	r0, #1
 80103c4:	f43f af1d 	beq.w	8010202 <_printf_float+0xb6>
 80103c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80103cc:	ea59 0303 	orrs.w	r3, r9, r3
 80103d0:	d102      	bne.n	80103d8 <_printf_float+0x28c>
 80103d2:	6823      	ldr	r3, [r4, #0]
 80103d4:	07d9      	lsls	r1, r3, #31
 80103d6:	d5d7      	bpl.n	8010388 <_printf_float+0x23c>
 80103d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103dc:	4631      	mov	r1, r6
 80103de:	4628      	mov	r0, r5
 80103e0:	47b8      	blx	r7
 80103e2:	3001      	adds	r0, #1
 80103e4:	f43f af0d 	beq.w	8010202 <_printf_float+0xb6>
 80103e8:	f04f 0a00 	mov.w	sl, #0
 80103ec:	f104 0b1a 	add.w	fp, r4, #26
 80103f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103f2:	425b      	negs	r3, r3
 80103f4:	4553      	cmp	r3, sl
 80103f6:	dc01      	bgt.n	80103fc <_printf_float+0x2b0>
 80103f8:	464b      	mov	r3, r9
 80103fa:	e793      	b.n	8010324 <_printf_float+0x1d8>
 80103fc:	2301      	movs	r3, #1
 80103fe:	465a      	mov	r2, fp
 8010400:	4631      	mov	r1, r6
 8010402:	4628      	mov	r0, r5
 8010404:	47b8      	blx	r7
 8010406:	3001      	adds	r0, #1
 8010408:	f43f aefb 	beq.w	8010202 <_printf_float+0xb6>
 801040c:	f10a 0a01 	add.w	sl, sl, #1
 8010410:	e7ee      	b.n	80103f0 <_printf_float+0x2a4>
 8010412:	bf00      	nop
 8010414:	7fefffff 	.word	0x7fefffff
 8010418:	080180d4 	.word	0x080180d4
 801041c:	080180d8 	.word	0x080180d8
 8010420:	080180dc 	.word	0x080180dc
 8010424:	080180e0 	.word	0x080180e0
 8010428:	080180e4 	.word	0x080180e4
 801042c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801042e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010432:	4553      	cmp	r3, sl
 8010434:	bfa8      	it	ge
 8010436:	4653      	movge	r3, sl
 8010438:	2b00      	cmp	r3, #0
 801043a:	4699      	mov	r9, r3
 801043c:	dc36      	bgt.n	80104ac <_printf_float+0x360>
 801043e:	f04f 0b00 	mov.w	fp, #0
 8010442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010446:	f104 021a 	add.w	r2, r4, #26
 801044a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801044c:	9306      	str	r3, [sp, #24]
 801044e:	eba3 0309 	sub.w	r3, r3, r9
 8010452:	455b      	cmp	r3, fp
 8010454:	dc31      	bgt.n	80104ba <_printf_float+0x36e>
 8010456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010458:	459a      	cmp	sl, r3
 801045a:	dc3a      	bgt.n	80104d2 <_printf_float+0x386>
 801045c:	6823      	ldr	r3, [r4, #0]
 801045e:	07da      	lsls	r2, r3, #31
 8010460:	d437      	bmi.n	80104d2 <_printf_float+0x386>
 8010462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010464:	ebaa 0903 	sub.w	r9, sl, r3
 8010468:	9b06      	ldr	r3, [sp, #24]
 801046a:	ebaa 0303 	sub.w	r3, sl, r3
 801046e:	4599      	cmp	r9, r3
 8010470:	bfa8      	it	ge
 8010472:	4699      	movge	r9, r3
 8010474:	f1b9 0f00 	cmp.w	r9, #0
 8010478:	dc33      	bgt.n	80104e2 <_printf_float+0x396>
 801047a:	f04f 0800 	mov.w	r8, #0
 801047e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010482:	f104 0b1a 	add.w	fp, r4, #26
 8010486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010488:	ebaa 0303 	sub.w	r3, sl, r3
 801048c:	eba3 0309 	sub.w	r3, r3, r9
 8010490:	4543      	cmp	r3, r8
 8010492:	f77f af79 	ble.w	8010388 <_printf_float+0x23c>
 8010496:	2301      	movs	r3, #1
 8010498:	465a      	mov	r2, fp
 801049a:	4631      	mov	r1, r6
 801049c:	4628      	mov	r0, r5
 801049e:	47b8      	blx	r7
 80104a0:	3001      	adds	r0, #1
 80104a2:	f43f aeae 	beq.w	8010202 <_printf_float+0xb6>
 80104a6:	f108 0801 	add.w	r8, r8, #1
 80104aa:	e7ec      	b.n	8010486 <_printf_float+0x33a>
 80104ac:	4642      	mov	r2, r8
 80104ae:	4631      	mov	r1, r6
 80104b0:	4628      	mov	r0, r5
 80104b2:	47b8      	blx	r7
 80104b4:	3001      	adds	r0, #1
 80104b6:	d1c2      	bne.n	801043e <_printf_float+0x2f2>
 80104b8:	e6a3      	b.n	8010202 <_printf_float+0xb6>
 80104ba:	2301      	movs	r3, #1
 80104bc:	4631      	mov	r1, r6
 80104be:	4628      	mov	r0, r5
 80104c0:	9206      	str	r2, [sp, #24]
 80104c2:	47b8      	blx	r7
 80104c4:	3001      	adds	r0, #1
 80104c6:	f43f ae9c 	beq.w	8010202 <_printf_float+0xb6>
 80104ca:	9a06      	ldr	r2, [sp, #24]
 80104cc:	f10b 0b01 	add.w	fp, fp, #1
 80104d0:	e7bb      	b.n	801044a <_printf_float+0x2fe>
 80104d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104d6:	4631      	mov	r1, r6
 80104d8:	4628      	mov	r0, r5
 80104da:	47b8      	blx	r7
 80104dc:	3001      	adds	r0, #1
 80104de:	d1c0      	bne.n	8010462 <_printf_float+0x316>
 80104e0:	e68f      	b.n	8010202 <_printf_float+0xb6>
 80104e2:	9a06      	ldr	r2, [sp, #24]
 80104e4:	464b      	mov	r3, r9
 80104e6:	4442      	add	r2, r8
 80104e8:	4631      	mov	r1, r6
 80104ea:	4628      	mov	r0, r5
 80104ec:	47b8      	blx	r7
 80104ee:	3001      	adds	r0, #1
 80104f0:	d1c3      	bne.n	801047a <_printf_float+0x32e>
 80104f2:	e686      	b.n	8010202 <_printf_float+0xb6>
 80104f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80104f8:	f1ba 0f01 	cmp.w	sl, #1
 80104fc:	dc01      	bgt.n	8010502 <_printf_float+0x3b6>
 80104fe:	07db      	lsls	r3, r3, #31
 8010500:	d536      	bpl.n	8010570 <_printf_float+0x424>
 8010502:	2301      	movs	r3, #1
 8010504:	4642      	mov	r2, r8
 8010506:	4631      	mov	r1, r6
 8010508:	4628      	mov	r0, r5
 801050a:	47b8      	blx	r7
 801050c:	3001      	adds	r0, #1
 801050e:	f43f ae78 	beq.w	8010202 <_printf_float+0xb6>
 8010512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010516:	4631      	mov	r1, r6
 8010518:	4628      	mov	r0, r5
 801051a:	47b8      	blx	r7
 801051c:	3001      	adds	r0, #1
 801051e:	f43f ae70 	beq.w	8010202 <_printf_float+0xb6>
 8010522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010526:	2200      	movs	r2, #0
 8010528:	2300      	movs	r3, #0
 801052a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801052e:	f7f0 fae3 	bl	8000af8 <__aeabi_dcmpeq>
 8010532:	b9c0      	cbnz	r0, 8010566 <_printf_float+0x41a>
 8010534:	4653      	mov	r3, sl
 8010536:	f108 0201 	add.w	r2, r8, #1
 801053a:	4631      	mov	r1, r6
 801053c:	4628      	mov	r0, r5
 801053e:	47b8      	blx	r7
 8010540:	3001      	adds	r0, #1
 8010542:	d10c      	bne.n	801055e <_printf_float+0x412>
 8010544:	e65d      	b.n	8010202 <_printf_float+0xb6>
 8010546:	2301      	movs	r3, #1
 8010548:	465a      	mov	r2, fp
 801054a:	4631      	mov	r1, r6
 801054c:	4628      	mov	r0, r5
 801054e:	47b8      	blx	r7
 8010550:	3001      	adds	r0, #1
 8010552:	f43f ae56 	beq.w	8010202 <_printf_float+0xb6>
 8010556:	f108 0801 	add.w	r8, r8, #1
 801055a:	45d0      	cmp	r8, sl
 801055c:	dbf3      	blt.n	8010546 <_printf_float+0x3fa>
 801055e:	464b      	mov	r3, r9
 8010560:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010564:	e6df      	b.n	8010326 <_printf_float+0x1da>
 8010566:	f04f 0800 	mov.w	r8, #0
 801056a:	f104 0b1a 	add.w	fp, r4, #26
 801056e:	e7f4      	b.n	801055a <_printf_float+0x40e>
 8010570:	2301      	movs	r3, #1
 8010572:	4642      	mov	r2, r8
 8010574:	e7e1      	b.n	801053a <_printf_float+0x3ee>
 8010576:	2301      	movs	r3, #1
 8010578:	464a      	mov	r2, r9
 801057a:	4631      	mov	r1, r6
 801057c:	4628      	mov	r0, r5
 801057e:	47b8      	blx	r7
 8010580:	3001      	adds	r0, #1
 8010582:	f43f ae3e 	beq.w	8010202 <_printf_float+0xb6>
 8010586:	f108 0801 	add.w	r8, r8, #1
 801058a:	68e3      	ldr	r3, [r4, #12]
 801058c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801058e:	1a5b      	subs	r3, r3, r1
 8010590:	4543      	cmp	r3, r8
 8010592:	dcf0      	bgt.n	8010576 <_printf_float+0x42a>
 8010594:	e6fc      	b.n	8010390 <_printf_float+0x244>
 8010596:	f04f 0800 	mov.w	r8, #0
 801059a:	f104 0919 	add.w	r9, r4, #25
 801059e:	e7f4      	b.n	801058a <_printf_float+0x43e>

080105a0 <_printf_common>:
 80105a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105a4:	4616      	mov	r6, r2
 80105a6:	4698      	mov	r8, r3
 80105a8:	688a      	ldr	r2, [r1, #8]
 80105aa:	690b      	ldr	r3, [r1, #16]
 80105ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80105b0:	4293      	cmp	r3, r2
 80105b2:	bfb8      	it	lt
 80105b4:	4613      	movlt	r3, r2
 80105b6:	6033      	str	r3, [r6, #0]
 80105b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80105bc:	4607      	mov	r7, r0
 80105be:	460c      	mov	r4, r1
 80105c0:	b10a      	cbz	r2, 80105c6 <_printf_common+0x26>
 80105c2:	3301      	adds	r3, #1
 80105c4:	6033      	str	r3, [r6, #0]
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	0699      	lsls	r1, r3, #26
 80105ca:	bf42      	ittt	mi
 80105cc:	6833      	ldrmi	r3, [r6, #0]
 80105ce:	3302      	addmi	r3, #2
 80105d0:	6033      	strmi	r3, [r6, #0]
 80105d2:	6825      	ldr	r5, [r4, #0]
 80105d4:	f015 0506 	ands.w	r5, r5, #6
 80105d8:	d106      	bne.n	80105e8 <_printf_common+0x48>
 80105da:	f104 0a19 	add.w	sl, r4, #25
 80105de:	68e3      	ldr	r3, [r4, #12]
 80105e0:	6832      	ldr	r2, [r6, #0]
 80105e2:	1a9b      	subs	r3, r3, r2
 80105e4:	42ab      	cmp	r3, r5
 80105e6:	dc26      	bgt.n	8010636 <_printf_common+0x96>
 80105e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80105ec:	6822      	ldr	r2, [r4, #0]
 80105ee:	3b00      	subs	r3, #0
 80105f0:	bf18      	it	ne
 80105f2:	2301      	movne	r3, #1
 80105f4:	0692      	lsls	r2, r2, #26
 80105f6:	d42b      	bmi.n	8010650 <_printf_common+0xb0>
 80105f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80105fc:	4641      	mov	r1, r8
 80105fe:	4638      	mov	r0, r7
 8010600:	47c8      	blx	r9
 8010602:	3001      	adds	r0, #1
 8010604:	d01e      	beq.n	8010644 <_printf_common+0xa4>
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	6922      	ldr	r2, [r4, #16]
 801060a:	f003 0306 	and.w	r3, r3, #6
 801060e:	2b04      	cmp	r3, #4
 8010610:	bf02      	ittt	eq
 8010612:	68e5      	ldreq	r5, [r4, #12]
 8010614:	6833      	ldreq	r3, [r6, #0]
 8010616:	1aed      	subeq	r5, r5, r3
 8010618:	68a3      	ldr	r3, [r4, #8]
 801061a:	bf0c      	ite	eq
 801061c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010620:	2500      	movne	r5, #0
 8010622:	4293      	cmp	r3, r2
 8010624:	bfc4      	itt	gt
 8010626:	1a9b      	subgt	r3, r3, r2
 8010628:	18ed      	addgt	r5, r5, r3
 801062a:	2600      	movs	r6, #0
 801062c:	341a      	adds	r4, #26
 801062e:	42b5      	cmp	r5, r6
 8010630:	d11a      	bne.n	8010668 <_printf_common+0xc8>
 8010632:	2000      	movs	r0, #0
 8010634:	e008      	b.n	8010648 <_printf_common+0xa8>
 8010636:	2301      	movs	r3, #1
 8010638:	4652      	mov	r2, sl
 801063a:	4641      	mov	r1, r8
 801063c:	4638      	mov	r0, r7
 801063e:	47c8      	blx	r9
 8010640:	3001      	adds	r0, #1
 8010642:	d103      	bne.n	801064c <_printf_common+0xac>
 8010644:	f04f 30ff 	mov.w	r0, #4294967295
 8010648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801064c:	3501      	adds	r5, #1
 801064e:	e7c6      	b.n	80105de <_printf_common+0x3e>
 8010650:	18e1      	adds	r1, r4, r3
 8010652:	1c5a      	adds	r2, r3, #1
 8010654:	2030      	movs	r0, #48	@ 0x30
 8010656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801065a:	4422      	add	r2, r4
 801065c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010664:	3302      	adds	r3, #2
 8010666:	e7c7      	b.n	80105f8 <_printf_common+0x58>
 8010668:	2301      	movs	r3, #1
 801066a:	4622      	mov	r2, r4
 801066c:	4641      	mov	r1, r8
 801066e:	4638      	mov	r0, r7
 8010670:	47c8      	blx	r9
 8010672:	3001      	adds	r0, #1
 8010674:	d0e6      	beq.n	8010644 <_printf_common+0xa4>
 8010676:	3601      	adds	r6, #1
 8010678:	e7d9      	b.n	801062e <_printf_common+0x8e>
	...

0801067c <_printf_i>:
 801067c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010680:	7e0f      	ldrb	r7, [r1, #24]
 8010682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010684:	2f78      	cmp	r7, #120	@ 0x78
 8010686:	4691      	mov	r9, r2
 8010688:	4680      	mov	r8, r0
 801068a:	460c      	mov	r4, r1
 801068c:	469a      	mov	sl, r3
 801068e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010692:	d807      	bhi.n	80106a4 <_printf_i+0x28>
 8010694:	2f62      	cmp	r7, #98	@ 0x62
 8010696:	d80a      	bhi.n	80106ae <_printf_i+0x32>
 8010698:	2f00      	cmp	r7, #0
 801069a:	f000 80d2 	beq.w	8010842 <_printf_i+0x1c6>
 801069e:	2f58      	cmp	r7, #88	@ 0x58
 80106a0:	f000 80b9 	beq.w	8010816 <_printf_i+0x19a>
 80106a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80106ac:	e03a      	b.n	8010724 <_printf_i+0xa8>
 80106ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80106b2:	2b15      	cmp	r3, #21
 80106b4:	d8f6      	bhi.n	80106a4 <_printf_i+0x28>
 80106b6:	a101      	add	r1, pc, #4	@ (adr r1, 80106bc <_printf_i+0x40>)
 80106b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80106bc:	08010715 	.word	0x08010715
 80106c0:	08010729 	.word	0x08010729
 80106c4:	080106a5 	.word	0x080106a5
 80106c8:	080106a5 	.word	0x080106a5
 80106cc:	080106a5 	.word	0x080106a5
 80106d0:	080106a5 	.word	0x080106a5
 80106d4:	08010729 	.word	0x08010729
 80106d8:	080106a5 	.word	0x080106a5
 80106dc:	080106a5 	.word	0x080106a5
 80106e0:	080106a5 	.word	0x080106a5
 80106e4:	080106a5 	.word	0x080106a5
 80106e8:	08010829 	.word	0x08010829
 80106ec:	08010753 	.word	0x08010753
 80106f0:	080107e3 	.word	0x080107e3
 80106f4:	080106a5 	.word	0x080106a5
 80106f8:	080106a5 	.word	0x080106a5
 80106fc:	0801084b 	.word	0x0801084b
 8010700:	080106a5 	.word	0x080106a5
 8010704:	08010753 	.word	0x08010753
 8010708:	080106a5 	.word	0x080106a5
 801070c:	080106a5 	.word	0x080106a5
 8010710:	080107eb 	.word	0x080107eb
 8010714:	6833      	ldr	r3, [r6, #0]
 8010716:	1d1a      	adds	r2, r3, #4
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	6032      	str	r2, [r6, #0]
 801071c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010724:	2301      	movs	r3, #1
 8010726:	e09d      	b.n	8010864 <_printf_i+0x1e8>
 8010728:	6833      	ldr	r3, [r6, #0]
 801072a:	6820      	ldr	r0, [r4, #0]
 801072c:	1d19      	adds	r1, r3, #4
 801072e:	6031      	str	r1, [r6, #0]
 8010730:	0606      	lsls	r6, r0, #24
 8010732:	d501      	bpl.n	8010738 <_printf_i+0xbc>
 8010734:	681d      	ldr	r5, [r3, #0]
 8010736:	e003      	b.n	8010740 <_printf_i+0xc4>
 8010738:	0645      	lsls	r5, r0, #25
 801073a:	d5fb      	bpl.n	8010734 <_printf_i+0xb8>
 801073c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010740:	2d00      	cmp	r5, #0
 8010742:	da03      	bge.n	801074c <_printf_i+0xd0>
 8010744:	232d      	movs	r3, #45	@ 0x2d
 8010746:	426d      	negs	r5, r5
 8010748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801074c:	4859      	ldr	r0, [pc, #356]	@ (80108b4 <_printf_i+0x238>)
 801074e:	230a      	movs	r3, #10
 8010750:	e011      	b.n	8010776 <_printf_i+0xfa>
 8010752:	6821      	ldr	r1, [r4, #0]
 8010754:	6833      	ldr	r3, [r6, #0]
 8010756:	0608      	lsls	r0, r1, #24
 8010758:	f853 5b04 	ldr.w	r5, [r3], #4
 801075c:	d402      	bmi.n	8010764 <_printf_i+0xe8>
 801075e:	0649      	lsls	r1, r1, #25
 8010760:	bf48      	it	mi
 8010762:	b2ad      	uxthmi	r5, r5
 8010764:	2f6f      	cmp	r7, #111	@ 0x6f
 8010766:	4853      	ldr	r0, [pc, #332]	@ (80108b4 <_printf_i+0x238>)
 8010768:	6033      	str	r3, [r6, #0]
 801076a:	bf14      	ite	ne
 801076c:	230a      	movne	r3, #10
 801076e:	2308      	moveq	r3, #8
 8010770:	2100      	movs	r1, #0
 8010772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010776:	6866      	ldr	r6, [r4, #4]
 8010778:	60a6      	str	r6, [r4, #8]
 801077a:	2e00      	cmp	r6, #0
 801077c:	bfa2      	ittt	ge
 801077e:	6821      	ldrge	r1, [r4, #0]
 8010780:	f021 0104 	bicge.w	r1, r1, #4
 8010784:	6021      	strge	r1, [r4, #0]
 8010786:	b90d      	cbnz	r5, 801078c <_printf_i+0x110>
 8010788:	2e00      	cmp	r6, #0
 801078a:	d04b      	beq.n	8010824 <_printf_i+0x1a8>
 801078c:	4616      	mov	r6, r2
 801078e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010792:	fb03 5711 	mls	r7, r3, r1, r5
 8010796:	5dc7      	ldrb	r7, [r0, r7]
 8010798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801079c:	462f      	mov	r7, r5
 801079e:	42bb      	cmp	r3, r7
 80107a0:	460d      	mov	r5, r1
 80107a2:	d9f4      	bls.n	801078e <_printf_i+0x112>
 80107a4:	2b08      	cmp	r3, #8
 80107a6:	d10b      	bne.n	80107c0 <_printf_i+0x144>
 80107a8:	6823      	ldr	r3, [r4, #0]
 80107aa:	07df      	lsls	r7, r3, #31
 80107ac:	d508      	bpl.n	80107c0 <_printf_i+0x144>
 80107ae:	6923      	ldr	r3, [r4, #16]
 80107b0:	6861      	ldr	r1, [r4, #4]
 80107b2:	4299      	cmp	r1, r3
 80107b4:	bfde      	ittt	le
 80107b6:	2330      	movle	r3, #48	@ 0x30
 80107b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80107bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80107c0:	1b92      	subs	r2, r2, r6
 80107c2:	6122      	str	r2, [r4, #16]
 80107c4:	f8cd a000 	str.w	sl, [sp]
 80107c8:	464b      	mov	r3, r9
 80107ca:	aa03      	add	r2, sp, #12
 80107cc:	4621      	mov	r1, r4
 80107ce:	4640      	mov	r0, r8
 80107d0:	f7ff fee6 	bl	80105a0 <_printf_common>
 80107d4:	3001      	adds	r0, #1
 80107d6:	d14a      	bne.n	801086e <_printf_i+0x1f2>
 80107d8:	f04f 30ff 	mov.w	r0, #4294967295
 80107dc:	b004      	add	sp, #16
 80107de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	f043 0320 	orr.w	r3, r3, #32
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	4833      	ldr	r0, [pc, #204]	@ (80108b8 <_printf_i+0x23c>)
 80107ec:	2778      	movs	r7, #120	@ 0x78
 80107ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	6831      	ldr	r1, [r6, #0]
 80107f6:	061f      	lsls	r7, r3, #24
 80107f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80107fc:	d402      	bmi.n	8010804 <_printf_i+0x188>
 80107fe:	065f      	lsls	r7, r3, #25
 8010800:	bf48      	it	mi
 8010802:	b2ad      	uxthmi	r5, r5
 8010804:	6031      	str	r1, [r6, #0]
 8010806:	07d9      	lsls	r1, r3, #31
 8010808:	bf44      	itt	mi
 801080a:	f043 0320 	orrmi.w	r3, r3, #32
 801080e:	6023      	strmi	r3, [r4, #0]
 8010810:	b11d      	cbz	r5, 801081a <_printf_i+0x19e>
 8010812:	2310      	movs	r3, #16
 8010814:	e7ac      	b.n	8010770 <_printf_i+0xf4>
 8010816:	4827      	ldr	r0, [pc, #156]	@ (80108b4 <_printf_i+0x238>)
 8010818:	e7e9      	b.n	80107ee <_printf_i+0x172>
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	f023 0320 	bic.w	r3, r3, #32
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	e7f6      	b.n	8010812 <_printf_i+0x196>
 8010824:	4616      	mov	r6, r2
 8010826:	e7bd      	b.n	80107a4 <_printf_i+0x128>
 8010828:	6833      	ldr	r3, [r6, #0]
 801082a:	6825      	ldr	r5, [r4, #0]
 801082c:	6961      	ldr	r1, [r4, #20]
 801082e:	1d18      	adds	r0, r3, #4
 8010830:	6030      	str	r0, [r6, #0]
 8010832:	062e      	lsls	r6, r5, #24
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	d501      	bpl.n	801083c <_printf_i+0x1c0>
 8010838:	6019      	str	r1, [r3, #0]
 801083a:	e002      	b.n	8010842 <_printf_i+0x1c6>
 801083c:	0668      	lsls	r0, r5, #25
 801083e:	d5fb      	bpl.n	8010838 <_printf_i+0x1bc>
 8010840:	8019      	strh	r1, [r3, #0]
 8010842:	2300      	movs	r3, #0
 8010844:	6123      	str	r3, [r4, #16]
 8010846:	4616      	mov	r6, r2
 8010848:	e7bc      	b.n	80107c4 <_printf_i+0x148>
 801084a:	6833      	ldr	r3, [r6, #0]
 801084c:	1d1a      	adds	r2, r3, #4
 801084e:	6032      	str	r2, [r6, #0]
 8010850:	681e      	ldr	r6, [r3, #0]
 8010852:	6862      	ldr	r2, [r4, #4]
 8010854:	2100      	movs	r1, #0
 8010856:	4630      	mov	r0, r6
 8010858:	f7ef fcd2 	bl	8000200 <memchr>
 801085c:	b108      	cbz	r0, 8010862 <_printf_i+0x1e6>
 801085e:	1b80      	subs	r0, r0, r6
 8010860:	6060      	str	r0, [r4, #4]
 8010862:	6863      	ldr	r3, [r4, #4]
 8010864:	6123      	str	r3, [r4, #16]
 8010866:	2300      	movs	r3, #0
 8010868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801086c:	e7aa      	b.n	80107c4 <_printf_i+0x148>
 801086e:	6923      	ldr	r3, [r4, #16]
 8010870:	4632      	mov	r2, r6
 8010872:	4649      	mov	r1, r9
 8010874:	4640      	mov	r0, r8
 8010876:	47d0      	blx	sl
 8010878:	3001      	adds	r0, #1
 801087a:	d0ad      	beq.n	80107d8 <_printf_i+0x15c>
 801087c:	6823      	ldr	r3, [r4, #0]
 801087e:	079b      	lsls	r3, r3, #30
 8010880:	d413      	bmi.n	80108aa <_printf_i+0x22e>
 8010882:	68e0      	ldr	r0, [r4, #12]
 8010884:	9b03      	ldr	r3, [sp, #12]
 8010886:	4298      	cmp	r0, r3
 8010888:	bfb8      	it	lt
 801088a:	4618      	movlt	r0, r3
 801088c:	e7a6      	b.n	80107dc <_printf_i+0x160>
 801088e:	2301      	movs	r3, #1
 8010890:	4632      	mov	r2, r6
 8010892:	4649      	mov	r1, r9
 8010894:	4640      	mov	r0, r8
 8010896:	47d0      	blx	sl
 8010898:	3001      	adds	r0, #1
 801089a:	d09d      	beq.n	80107d8 <_printf_i+0x15c>
 801089c:	3501      	adds	r5, #1
 801089e:	68e3      	ldr	r3, [r4, #12]
 80108a0:	9903      	ldr	r1, [sp, #12]
 80108a2:	1a5b      	subs	r3, r3, r1
 80108a4:	42ab      	cmp	r3, r5
 80108a6:	dcf2      	bgt.n	801088e <_printf_i+0x212>
 80108a8:	e7eb      	b.n	8010882 <_printf_i+0x206>
 80108aa:	2500      	movs	r5, #0
 80108ac:	f104 0619 	add.w	r6, r4, #25
 80108b0:	e7f5      	b.n	801089e <_printf_i+0x222>
 80108b2:	bf00      	nop
 80108b4:	080180e6 	.word	0x080180e6
 80108b8:	080180f7 	.word	0x080180f7

080108bc <std>:
 80108bc:	2300      	movs	r3, #0
 80108be:	b510      	push	{r4, lr}
 80108c0:	4604      	mov	r4, r0
 80108c2:	e9c0 3300 	strd	r3, r3, [r0]
 80108c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108ca:	6083      	str	r3, [r0, #8]
 80108cc:	8181      	strh	r1, [r0, #12]
 80108ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80108d0:	81c2      	strh	r2, [r0, #14]
 80108d2:	6183      	str	r3, [r0, #24]
 80108d4:	4619      	mov	r1, r3
 80108d6:	2208      	movs	r2, #8
 80108d8:	305c      	adds	r0, #92	@ 0x5c
 80108da:	f000 f928 	bl	8010b2e <memset>
 80108de:	4b0d      	ldr	r3, [pc, #52]	@ (8010914 <std+0x58>)
 80108e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80108e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010918 <std+0x5c>)
 80108e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80108e6:	4b0d      	ldr	r3, [pc, #52]	@ (801091c <std+0x60>)
 80108e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80108ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010920 <std+0x64>)
 80108ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80108ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010924 <std+0x68>)
 80108f0:	6224      	str	r4, [r4, #32]
 80108f2:	429c      	cmp	r4, r3
 80108f4:	d006      	beq.n	8010904 <std+0x48>
 80108f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80108fa:	4294      	cmp	r4, r2
 80108fc:	d002      	beq.n	8010904 <std+0x48>
 80108fe:	33d0      	adds	r3, #208	@ 0xd0
 8010900:	429c      	cmp	r4, r3
 8010902:	d105      	bne.n	8010910 <std+0x54>
 8010904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801090c:	f000 b99c 	b.w	8010c48 <__retarget_lock_init_recursive>
 8010910:	bd10      	pop	{r4, pc}
 8010912:	bf00      	nop
 8010914:	08010aa9 	.word	0x08010aa9
 8010918:	08010acb 	.word	0x08010acb
 801091c:	08010b03 	.word	0x08010b03
 8010920:	08010b27 	.word	0x08010b27
 8010924:	20000bb8 	.word	0x20000bb8

08010928 <stdio_exit_handler>:
 8010928:	4a02      	ldr	r2, [pc, #8]	@ (8010934 <stdio_exit_handler+0xc>)
 801092a:	4903      	ldr	r1, [pc, #12]	@ (8010938 <stdio_exit_handler+0x10>)
 801092c:	4803      	ldr	r0, [pc, #12]	@ (801093c <stdio_exit_handler+0x14>)
 801092e:	f000 b869 	b.w	8010a04 <_fwalk_sglue>
 8010932:	bf00      	nop
 8010934:	20000030 	.word	0x20000030
 8010938:	080126dd 	.word	0x080126dd
 801093c:	20000040 	.word	0x20000040

08010940 <cleanup_stdio>:
 8010940:	6841      	ldr	r1, [r0, #4]
 8010942:	4b0c      	ldr	r3, [pc, #48]	@ (8010974 <cleanup_stdio+0x34>)
 8010944:	4299      	cmp	r1, r3
 8010946:	b510      	push	{r4, lr}
 8010948:	4604      	mov	r4, r0
 801094a:	d001      	beq.n	8010950 <cleanup_stdio+0x10>
 801094c:	f001 fec6 	bl	80126dc <_fflush_r>
 8010950:	68a1      	ldr	r1, [r4, #8]
 8010952:	4b09      	ldr	r3, [pc, #36]	@ (8010978 <cleanup_stdio+0x38>)
 8010954:	4299      	cmp	r1, r3
 8010956:	d002      	beq.n	801095e <cleanup_stdio+0x1e>
 8010958:	4620      	mov	r0, r4
 801095a:	f001 febf 	bl	80126dc <_fflush_r>
 801095e:	68e1      	ldr	r1, [r4, #12]
 8010960:	4b06      	ldr	r3, [pc, #24]	@ (801097c <cleanup_stdio+0x3c>)
 8010962:	4299      	cmp	r1, r3
 8010964:	d004      	beq.n	8010970 <cleanup_stdio+0x30>
 8010966:	4620      	mov	r0, r4
 8010968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801096c:	f001 beb6 	b.w	80126dc <_fflush_r>
 8010970:	bd10      	pop	{r4, pc}
 8010972:	bf00      	nop
 8010974:	20000bb8 	.word	0x20000bb8
 8010978:	20000c20 	.word	0x20000c20
 801097c:	20000c88 	.word	0x20000c88

08010980 <global_stdio_init.part.0>:
 8010980:	b510      	push	{r4, lr}
 8010982:	4b0b      	ldr	r3, [pc, #44]	@ (80109b0 <global_stdio_init.part.0+0x30>)
 8010984:	4c0b      	ldr	r4, [pc, #44]	@ (80109b4 <global_stdio_init.part.0+0x34>)
 8010986:	4a0c      	ldr	r2, [pc, #48]	@ (80109b8 <global_stdio_init.part.0+0x38>)
 8010988:	601a      	str	r2, [r3, #0]
 801098a:	4620      	mov	r0, r4
 801098c:	2200      	movs	r2, #0
 801098e:	2104      	movs	r1, #4
 8010990:	f7ff ff94 	bl	80108bc <std>
 8010994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010998:	2201      	movs	r2, #1
 801099a:	2109      	movs	r1, #9
 801099c:	f7ff ff8e 	bl	80108bc <std>
 80109a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80109a4:	2202      	movs	r2, #2
 80109a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109aa:	2112      	movs	r1, #18
 80109ac:	f7ff bf86 	b.w	80108bc <std>
 80109b0:	20000cf0 	.word	0x20000cf0
 80109b4:	20000bb8 	.word	0x20000bb8
 80109b8:	08010929 	.word	0x08010929

080109bc <__sfp_lock_acquire>:
 80109bc:	4801      	ldr	r0, [pc, #4]	@ (80109c4 <__sfp_lock_acquire+0x8>)
 80109be:	f000 b944 	b.w	8010c4a <__retarget_lock_acquire_recursive>
 80109c2:	bf00      	nop
 80109c4:	20000cf9 	.word	0x20000cf9

080109c8 <__sfp_lock_release>:
 80109c8:	4801      	ldr	r0, [pc, #4]	@ (80109d0 <__sfp_lock_release+0x8>)
 80109ca:	f000 b93f 	b.w	8010c4c <__retarget_lock_release_recursive>
 80109ce:	bf00      	nop
 80109d0:	20000cf9 	.word	0x20000cf9

080109d4 <__sinit>:
 80109d4:	b510      	push	{r4, lr}
 80109d6:	4604      	mov	r4, r0
 80109d8:	f7ff fff0 	bl	80109bc <__sfp_lock_acquire>
 80109dc:	6a23      	ldr	r3, [r4, #32]
 80109de:	b11b      	cbz	r3, 80109e8 <__sinit+0x14>
 80109e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109e4:	f7ff bff0 	b.w	80109c8 <__sfp_lock_release>
 80109e8:	4b04      	ldr	r3, [pc, #16]	@ (80109fc <__sinit+0x28>)
 80109ea:	6223      	str	r3, [r4, #32]
 80109ec:	4b04      	ldr	r3, [pc, #16]	@ (8010a00 <__sinit+0x2c>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d1f5      	bne.n	80109e0 <__sinit+0xc>
 80109f4:	f7ff ffc4 	bl	8010980 <global_stdio_init.part.0>
 80109f8:	e7f2      	b.n	80109e0 <__sinit+0xc>
 80109fa:	bf00      	nop
 80109fc:	08010941 	.word	0x08010941
 8010a00:	20000cf0 	.word	0x20000cf0

08010a04 <_fwalk_sglue>:
 8010a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a08:	4607      	mov	r7, r0
 8010a0a:	4688      	mov	r8, r1
 8010a0c:	4614      	mov	r4, r2
 8010a0e:	2600      	movs	r6, #0
 8010a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a14:	f1b9 0901 	subs.w	r9, r9, #1
 8010a18:	d505      	bpl.n	8010a26 <_fwalk_sglue+0x22>
 8010a1a:	6824      	ldr	r4, [r4, #0]
 8010a1c:	2c00      	cmp	r4, #0
 8010a1e:	d1f7      	bne.n	8010a10 <_fwalk_sglue+0xc>
 8010a20:	4630      	mov	r0, r6
 8010a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a26:	89ab      	ldrh	r3, [r5, #12]
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d907      	bls.n	8010a3c <_fwalk_sglue+0x38>
 8010a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a30:	3301      	adds	r3, #1
 8010a32:	d003      	beq.n	8010a3c <_fwalk_sglue+0x38>
 8010a34:	4629      	mov	r1, r5
 8010a36:	4638      	mov	r0, r7
 8010a38:	47c0      	blx	r8
 8010a3a:	4306      	orrs	r6, r0
 8010a3c:	3568      	adds	r5, #104	@ 0x68
 8010a3e:	e7e9      	b.n	8010a14 <_fwalk_sglue+0x10>

08010a40 <sniprintf>:
 8010a40:	b40c      	push	{r2, r3}
 8010a42:	b530      	push	{r4, r5, lr}
 8010a44:	4b17      	ldr	r3, [pc, #92]	@ (8010aa4 <sniprintf+0x64>)
 8010a46:	1e0c      	subs	r4, r1, #0
 8010a48:	681d      	ldr	r5, [r3, #0]
 8010a4a:	b09d      	sub	sp, #116	@ 0x74
 8010a4c:	da08      	bge.n	8010a60 <sniprintf+0x20>
 8010a4e:	238b      	movs	r3, #139	@ 0x8b
 8010a50:	602b      	str	r3, [r5, #0]
 8010a52:	f04f 30ff 	mov.w	r0, #4294967295
 8010a56:	b01d      	add	sp, #116	@ 0x74
 8010a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a5c:	b002      	add	sp, #8
 8010a5e:	4770      	bx	lr
 8010a60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010a64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a68:	bf14      	ite	ne
 8010a6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010a6e:	4623      	moveq	r3, r4
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	9307      	str	r3, [sp, #28]
 8010a74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010a78:	9002      	str	r0, [sp, #8]
 8010a7a:	9006      	str	r0, [sp, #24]
 8010a7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010a82:	ab21      	add	r3, sp, #132	@ 0x84
 8010a84:	a902      	add	r1, sp, #8
 8010a86:	4628      	mov	r0, r5
 8010a88:	9301      	str	r3, [sp, #4]
 8010a8a:	f001 fb65 	bl	8012158 <_svfiprintf_r>
 8010a8e:	1c43      	adds	r3, r0, #1
 8010a90:	bfbc      	itt	lt
 8010a92:	238b      	movlt	r3, #139	@ 0x8b
 8010a94:	602b      	strlt	r3, [r5, #0]
 8010a96:	2c00      	cmp	r4, #0
 8010a98:	d0dd      	beq.n	8010a56 <sniprintf+0x16>
 8010a9a:	9b02      	ldr	r3, [sp, #8]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]
 8010aa0:	e7d9      	b.n	8010a56 <sniprintf+0x16>
 8010aa2:	bf00      	nop
 8010aa4:	2000003c 	.word	0x2000003c

08010aa8 <__sread>:
 8010aa8:	b510      	push	{r4, lr}
 8010aaa:	460c      	mov	r4, r1
 8010aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ab0:	f000 f86c 	bl	8010b8c <_read_r>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	bfab      	itete	ge
 8010ab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010aba:	89a3      	ldrhlt	r3, [r4, #12]
 8010abc:	181b      	addge	r3, r3, r0
 8010abe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ac2:	bfac      	ite	ge
 8010ac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010ac6:	81a3      	strhlt	r3, [r4, #12]
 8010ac8:	bd10      	pop	{r4, pc}

08010aca <__swrite>:
 8010aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ace:	461f      	mov	r7, r3
 8010ad0:	898b      	ldrh	r3, [r1, #12]
 8010ad2:	05db      	lsls	r3, r3, #23
 8010ad4:	4605      	mov	r5, r0
 8010ad6:	460c      	mov	r4, r1
 8010ad8:	4616      	mov	r6, r2
 8010ada:	d505      	bpl.n	8010ae8 <__swrite+0x1e>
 8010adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ae0:	2302      	movs	r3, #2
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f000 f840 	bl	8010b68 <_lseek_r>
 8010ae8:	89a3      	ldrh	r3, [r4, #12]
 8010aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010aee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010af2:	81a3      	strh	r3, [r4, #12]
 8010af4:	4632      	mov	r2, r6
 8010af6:	463b      	mov	r3, r7
 8010af8:	4628      	mov	r0, r5
 8010afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010afe:	f000 b867 	b.w	8010bd0 <_write_r>

08010b02 <__sseek>:
 8010b02:	b510      	push	{r4, lr}
 8010b04:	460c      	mov	r4, r1
 8010b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b0a:	f000 f82d 	bl	8010b68 <_lseek_r>
 8010b0e:	1c43      	adds	r3, r0, #1
 8010b10:	89a3      	ldrh	r3, [r4, #12]
 8010b12:	bf15      	itete	ne
 8010b14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010b16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010b1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010b1e:	81a3      	strheq	r3, [r4, #12]
 8010b20:	bf18      	it	ne
 8010b22:	81a3      	strhne	r3, [r4, #12]
 8010b24:	bd10      	pop	{r4, pc}

08010b26 <__sclose>:
 8010b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b2a:	f000 b80d 	b.w	8010b48 <_close_r>

08010b2e <memset>:
 8010b2e:	4402      	add	r2, r0
 8010b30:	4603      	mov	r3, r0
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d100      	bne.n	8010b38 <memset+0xa>
 8010b36:	4770      	bx	lr
 8010b38:	f803 1b01 	strb.w	r1, [r3], #1
 8010b3c:	e7f9      	b.n	8010b32 <memset+0x4>
	...

08010b40 <_localeconv_r>:
 8010b40:	4800      	ldr	r0, [pc, #0]	@ (8010b44 <_localeconv_r+0x4>)
 8010b42:	4770      	bx	lr
 8010b44:	2000017c 	.word	0x2000017c

08010b48 <_close_r>:
 8010b48:	b538      	push	{r3, r4, r5, lr}
 8010b4a:	4d06      	ldr	r5, [pc, #24]	@ (8010b64 <_close_r+0x1c>)
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	4604      	mov	r4, r0
 8010b50:	4608      	mov	r0, r1
 8010b52:	602b      	str	r3, [r5, #0]
 8010b54:	f7f4 f886 	bl	8004c64 <_close>
 8010b58:	1c43      	adds	r3, r0, #1
 8010b5a:	d102      	bne.n	8010b62 <_close_r+0x1a>
 8010b5c:	682b      	ldr	r3, [r5, #0]
 8010b5e:	b103      	cbz	r3, 8010b62 <_close_r+0x1a>
 8010b60:	6023      	str	r3, [r4, #0]
 8010b62:	bd38      	pop	{r3, r4, r5, pc}
 8010b64:	20000cf4 	.word	0x20000cf4

08010b68 <_lseek_r>:
 8010b68:	b538      	push	{r3, r4, r5, lr}
 8010b6a:	4d07      	ldr	r5, [pc, #28]	@ (8010b88 <_lseek_r+0x20>)
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	4608      	mov	r0, r1
 8010b70:	4611      	mov	r1, r2
 8010b72:	2200      	movs	r2, #0
 8010b74:	602a      	str	r2, [r5, #0]
 8010b76:	461a      	mov	r2, r3
 8010b78:	f7f4 f89b 	bl	8004cb2 <_lseek>
 8010b7c:	1c43      	adds	r3, r0, #1
 8010b7e:	d102      	bne.n	8010b86 <_lseek_r+0x1e>
 8010b80:	682b      	ldr	r3, [r5, #0]
 8010b82:	b103      	cbz	r3, 8010b86 <_lseek_r+0x1e>
 8010b84:	6023      	str	r3, [r4, #0]
 8010b86:	bd38      	pop	{r3, r4, r5, pc}
 8010b88:	20000cf4 	.word	0x20000cf4

08010b8c <_read_r>:
 8010b8c:	b538      	push	{r3, r4, r5, lr}
 8010b8e:	4d07      	ldr	r5, [pc, #28]	@ (8010bac <_read_r+0x20>)
 8010b90:	4604      	mov	r4, r0
 8010b92:	4608      	mov	r0, r1
 8010b94:	4611      	mov	r1, r2
 8010b96:	2200      	movs	r2, #0
 8010b98:	602a      	str	r2, [r5, #0]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	f7f4 f829 	bl	8004bf2 <_read>
 8010ba0:	1c43      	adds	r3, r0, #1
 8010ba2:	d102      	bne.n	8010baa <_read_r+0x1e>
 8010ba4:	682b      	ldr	r3, [r5, #0]
 8010ba6:	b103      	cbz	r3, 8010baa <_read_r+0x1e>
 8010ba8:	6023      	str	r3, [r4, #0]
 8010baa:	bd38      	pop	{r3, r4, r5, pc}
 8010bac:	20000cf4 	.word	0x20000cf4

08010bb0 <_sbrk_r>:
 8010bb0:	b538      	push	{r3, r4, r5, lr}
 8010bb2:	4d06      	ldr	r5, [pc, #24]	@ (8010bcc <_sbrk_r+0x1c>)
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	4608      	mov	r0, r1
 8010bba:	602b      	str	r3, [r5, #0]
 8010bbc:	f7f4 f886 	bl	8004ccc <_sbrk>
 8010bc0:	1c43      	adds	r3, r0, #1
 8010bc2:	d102      	bne.n	8010bca <_sbrk_r+0x1a>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	b103      	cbz	r3, 8010bca <_sbrk_r+0x1a>
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	bd38      	pop	{r3, r4, r5, pc}
 8010bcc:	20000cf4 	.word	0x20000cf4

08010bd0 <_write_r>:
 8010bd0:	b538      	push	{r3, r4, r5, lr}
 8010bd2:	4d07      	ldr	r5, [pc, #28]	@ (8010bf0 <_write_r+0x20>)
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	4608      	mov	r0, r1
 8010bd8:	4611      	mov	r1, r2
 8010bda:	2200      	movs	r2, #0
 8010bdc:	602a      	str	r2, [r5, #0]
 8010bde:	461a      	mov	r2, r3
 8010be0:	f7f4 f824 	bl	8004c2c <_write>
 8010be4:	1c43      	adds	r3, r0, #1
 8010be6:	d102      	bne.n	8010bee <_write_r+0x1e>
 8010be8:	682b      	ldr	r3, [r5, #0]
 8010bea:	b103      	cbz	r3, 8010bee <_write_r+0x1e>
 8010bec:	6023      	str	r3, [r4, #0]
 8010bee:	bd38      	pop	{r3, r4, r5, pc}
 8010bf0:	20000cf4 	.word	0x20000cf4

08010bf4 <__errno>:
 8010bf4:	4b01      	ldr	r3, [pc, #4]	@ (8010bfc <__errno+0x8>)
 8010bf6:	6818      	ldr	r0, [r3, #0]
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	2000003c 	.word	0x2000003c

08010c00 <__libc_init_array>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	4d0d      	ldr	r5, [pc, #52]	@ (8010c38 <__libc_init_array+0x38>)
 8010c04:	4c0d      	ldr	r4, [pc, #52]	@ (8010c3c <__libc_init_array+0x3c>)
 8010c06:	1b64      	subs	r4, r4, r5
 8010c08:	10a4      	asrs	r4, r4, #2
 8010c0a:	2600      	movs	r6, #0
 8010c0c:	42a6      	cmp	r6, r4
 8010c0e:	d109      	bne.n	8010c24 <__libc_init_array+0x24>
 8010c10:	4d0b      	ldr	r5, [pc, #44]	@ (8010c40 <__libc_init_array+0x40>)
 8010c12:	4c0c      	ldr	r4, [pc, #48]	@ (8010c44 <__libc_init_array+0x44>)
 8010c14:	f001 ffa2 	bl	8012b5c <_init>
 8010c18:	1b64      	subs	r4, r4, r5
 8010c1a:	10a4      	asrs	r4, r4, #2
 8010c1c:	2600      	movs	r6, #0
 8010c1e:	42a6      	cmp	r6, r4
 8010c20:	d105      	bne.n	8010c2e <__libc_init_array+0x2e>
 8010c22:	bd70      	pop	{r4, r5, r6, pc}
 8010c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c28:	4798      	blx	r3
 8010c2a:	3601      	adds	r6, #1
 8010c2c:	e7ee      	b.n	8010c0c <__libc_init_array+0xc>
 8010c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c32:	4798      	blx	r3
 8010c34:	3601      	adds	r6, #1
 8010c36:	e7f2      	b.n	8010c1e <__libc_init_array+0x1e>
 8010c38:	08018450 	.word	0x08018450
 8010c3c:	08018450 	.word	0x08018450
 8010c40:	08018450 	.word	0x08018450
 8010c44:	08018454 	.word	0x08018454

08010c48 <__retarget_lock_init_recursive>:
 8010c48:	4770      	bx	lr

08010c4a <__retarget_lock_acquire_recursive>:
 8010c4a:	4770      	bx	lr

08010c4c <__retarget_lock_release_recursive>:
 8010c4c:	4770      	bx	lr

08010c4e <memcpy>:
 8010c4e:	440a      	add	r2, r1
 8010c50:	4291      	cmp	r1, r2
 8010c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c56:	d100      	bne.n	8010c5a <memcpy+0xc>
 8010c58:	4770      	bx	lr
 8010c5a:	b510      	push	{r4, lr}
 8010c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c64:	4291      	cmp	r1, r2
 8010c66:	d1f9      	bne.n	8010c5c <memcpy+0xe>
 8010c68:	bd10      	pop	{r4, pc}

08010c6a <quorem>:
 8010c6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6e:	6903      	ldr	r3, [r0, #16]
 8010c70:	690c      	ldr	r4, [r1, #16]
 8010c72:	42a3      	cmp	r3, r4
 8010c74:	4607      	mov	r7, r0
 8010c76:	db7e      	blt.n	8010d76 <quorem+0x10c>
 8010c78:	3c01      	subs	r4, #1
 8010c7a:	f101 0814 	add.w	r8, r1, #20
 8010c7e:	00a3      	lsls	r3, r4, #2
 8010c80:	f100 0514 	add.w	r5, r0, #20
 8010c84:	9300      	str	r3, [sp, #0]
 8010c86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c8a:	9301      	str	r3, [sp, #4]
 8010c8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010c90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c94:	3301      	adds	r3, #1
 8010c96:	429a      	cmp	r2, r3
 8010c98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010c9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ca0:	d32e      	bcc.n	8010d00 <quorem+0x96>
 8010ca2:	f04f 0a00 	mov.w	sl, #0
 8010ca6:	46c4      	mov	ip, r8
 8010ca8:	46ae      	mov	lr, r5
 8010caa:	46d3      	mov	fp, sl
 8010cac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010cb0:	b298      	uxth	r0, r3
 8010cb2:	fb06 a000 	mla	r0, r6, r0, sl
 8010cb6:	0c02      	lsrs	r2, r0, #16
 8010cb8:	0c1b      	lsrs	r3, r3, #16
 8010cba:	fb06 2303 	mla	r3, r6, r3, r2
 8010cbe:	f8de 2000 	ldr.w	r2, [lr]
 8010cc2:	b280      	uxth	r0, r0
 8010cc4:	b292      	uxth	r2, r2
 8010cc6:	1a12      	subs	r2, r2, r0
 8010cc8:	445a      	add	r2, fp
 8010cca:	f8de 0000 	ldr.w	r0, [lr]
 8010cce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010cd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010cdc:	b292      	uxth	r2, r2
 8010cde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010ce2:	45e1      	cmp	r9, ip
 8010ce4:	f84e 2b04 	str.w	r2, [lr], #4
 8010ce8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010cec:	d2de      	bcs.n	8010cac <quorem+0x42>
 8010cee:	9b00      	ldr	r3, [sp, #0]
 8010cf0:	58eb      	ldr	r3, [r5, r3]
 8010cf2:	b92b      	cbnz	r3, 8010d00 <quorem+0x96>
 8010cf4:	9b01      	ldr	r3, [sp, #4]
 8010cf6:	3b04      	subs	r3, #4
 8010cf8:	429d      	cmp	r5, r3
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	d32f      	bcc.n	8010d5e <quorem+0xf4>
 8010cfe:	613c      	str	r4, [r7, #16]
 8010d00:	4638      	mov	r0, r7
 8010d02:	f001 f8c5 	bl	8011e90 <__mcmp>
 8010d06:	2800      	cmp	r0, #0
 8010d08:	db25      	blt.n	8010d56 <quorem+0xec>
 8010d0a:	4629      	mov	r1, r5
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d12:	f8d1 c000 	ldr.w	ip, [r1]
 8010d16:	fa1f fe82 	uxth.w	lr, r2
 8010d1a:	fa1f f38c 	uxth.w	r3, ip
 8010d1e:	eba3 030e 	sub.w	r3, r3, lr
 8010d22:	4403      	add	r3, r0
 8010d24:	0c12      	lsrs	r2, r2, #16
 8010d26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010d2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d34:	45c1      	cmp	r9, r8
 8010d36:	f841 3b04 	str.w	r3, [r1], #4
 8010d3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d3e:	d2e6      	bcs.n	8010d0e <quorem+0xa4>
 8010d40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d48:	b922      	cbnz	r2, 8010d54 <quorem+0xea>
 8010d4a:	3b04      	subs	r3, #4
 8010d4c:	429d      	cmp	r5, r3
 8010d4e:	461a      	mov	r2, r3
 8010d50:	d30b      	bcc.n	8010d6a <quorem+0x100>
 8010d52:	613c      	str	r4, [r7, #16]
 8010d54:	3601      	adds	r6, #1
 8010d56:	4630      	mov	r0, r6
 8010d58:	b003      	add	sp, #12
 8010d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d5e:	6812      	ldr	r2, [r2, #0]
 8010d60:	3b04      	subs	r3, #4
 8010d62:	2a00      	cmp	r2, #0
 8010d64:	d1cb      	bne.n	8010cfe <quorem+0x94>
 8010d66:	3c01      	subs	r4, #1
 8010d68:	e7c6      	b.n	8010cf8 <quorem+0x8e>
 8010d6a:	6812      	ldr	r2, [r2, #0]
 8010d6c:	3b04      	subs	r3, #4
 8010d6e:	2a00      	cmp	r2, #0
 8010d70:	d1ef      	bne.n	8010d52 <quorem+0xe8>
 8010d72:	3c01      	subs	r4, #1
 8010d74:	e7ea      	b.n	8010d4c <quorem+0xe2>
 8010d76:	2000      	movs	r0, #0
 8010d78:	e7ee      	b.n	8010d58 <quorem+0xee>
 8010d7a:	0000      	movs	r0, r0
 8010d7c:	0000      	movs	r0, r0
	...

08010d80 <_dtoa_r>:
 8010d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d84:	69c7      	ldr	r7, [r0, #28]
 8010d86:	b099      	sub	sp, #100	@ 0x64
 8010d88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010d8c:	ec55 4b10 	vmov	r4, r5, d0
 8010d90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010d92:	9109      	str	r1, [sp, #36]	@ 0x24
 8010d94:	4683      	mov	fp, r0
 8010d96:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d9a:	b97f      	cbnz	r7, 8010dbc <_dtoa_r+0x3c>
 8010d9c:	2010      	movs	r0, #16
 8010d9e:	f7ff f87f 	bl	800fea0 <malloc>
 8010da2:	4602      	mov	r2, r0
 8010da4:	f8cb 001c 	str.w	r0, [fp, #28]
 8010da8:	b920      	cbnz	r0, 8010db4 <_dtoa_r+0x34>
 8010daa:	4ba7      	ldr	r3, [pc, #668]	@ (8011048 <_dtoa_r+0x2c8>)
 8010dac:	21ef      	movs	r1, #239	@ 0xef
 8010dae:	48a7      	ldr	r0, [pc, #668]	@ (801104c <_dtoa_r+0x2cc>)
 8010db0:	f001 fd6a 	bl	8012888 <__assert_func>
 8010db4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010db8:	6007      	str	r7, [r0, #0]
 8010dba:	60c7      	str	r7, [r0, #12]
 8010dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010dc0:	6819      	ldr	r1, [r3, #0]
 8010dc2:	b159      	cbz	r1, 8010ddc <_dtoa_r+0x5c>
 8010dc4:	685a      	ldr	r2, [r3, #4]
 8010dc6:	604a      	str	r2, [r1, #4]
 8010dc8:	2301      	movs	r3, #1
 8010dca:	4093      	lsls	r3, r2
 8010dcc:	608b      	str	r3, [r1, #8]
 8010dce:	4658      	mov	r0, fp
 8010dd0:	f000 fe24 	bl	8011a1c <_Bfree>
 8010dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	601a      	str	r2, [r3, #0]
 8010ddc:	1e2b      	subs	r3, r5, #0
 8010dde:	bfb9      	ittee	lt
 8010de0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010de4:	9303      	strlt	r3, [sp, #12]
 8010de6:	2300      	movge	r3, #0
 8010de8:	6033      	strge	r3, [r6, #0]
 8010dea:	9f03      	ldr	r7, [sp, #12]
 8010dec:	4b98      	ldr	r3, [pc, #608]	@ (8011050 <_dtoa_r+0x2d0>)
 8010dee:	bfbc      	itt	lt
 8010df0:	2201      	movlt	r2, #1
 8010df2:	6032      	strlt	r2, [r6, #0]
 8010df4:	43bb      	bics	r3, r7
 8010df6:	d112      	bne.n	8010e1e <_dtoa_r+0x9e>
 8010df8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010dfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010dfe:	6013      	str	r3, [r2, #0]
 8010e00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e04:	4323      	orrs	r3, r4
 8010e06:	f000 854d 	beq.w	80118a4 <_dtoa_r+0xb24>
 8010e0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011064 <_dtoa_r+0x2e4>
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f000 854f 	beq.w	80118b4 <_dtoa_r+0xb34>
 8010e16:	f10a 0303 	add.w	r3, sl, #3
 8010e1a:	f000 bd49 	b.w	80118b0 <_dtoa_r+0xb30>
 8010e1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e22:	2200      	movs	r2, #0
 8010e24:	ec51 0b17 	vmov	r0, r1, d7
 8010e28:	2300      	movs	r3, #0
 8010e2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010e2e:	f7ef fe63 	bl	8000af8 <__aeabi_dcmpeq>
 8010e32:	4680      	mov	r8, r0
 8010e34:	b158      	cbz	r0, 8010e4e <_dtoa_r+0xce>
 8010e36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010e38:	2301      	movs	r3, #1
 8010e3a:	6013      	str	r3, [r2, #0]
 8010e3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e3e:	b113      	cbz	r3, 8010e46 <_dtoa_r+0xc6>
 8010e40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010e42:	4b84      	ldr	r3, [pc, #528]	@ (8011054 <_dtoa_r+0x2d4>)
 8010e44:	6013      	str	r3, [r2, #0]
 8010e46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011068 <_dtoa_r+0x2e8>
 8010e4a:	f000 bd33 	b.w	80118b4 <_dtoa_r+0xb34>
 8010e4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010e52:	aa16      	add	r2, sp, #88	@ 0x58
 8010e54:	a917      	add	r1, sp, #92	@ 0x5c
 8010e56:	4658      	mov	r0, fp
 8010e58:	f001 f8ca 	bl	8011ff0 <__d2b>
 8010e5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010e60:	4681      	mov	r9, r0
 8010e62:	2e00      	cmp	r6, #0
 8010e64:	d077      	beq.n	8010f56 <_dtoa_r+0x1d6>
 8010e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010e78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010e7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010e80:	4619      	mov	r1, r3
 8010e82:	2200      	movs	r2, #0
 8010e84:	4b74      	ldr	r3, [pc, #464]	@ (8011058 <_dtoa_r+0x2d8>)
 8010e86:	f7ef fa17 	bl	80002b8 <__aeabi_dsub>
 8010e8a:	a369      	add	r3, pc, #420	@ (adr r3, 8011030 <_dtoa_r+0x2b0>)
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	f7ef fbca 	bl	8000628 <__aeabi_dmul>
 8010e94:	a368      	add	r3, pc, #416	@ (adr r3, 8011038 <_dtoa_r+0x2b8>)
 8010e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9a:	f7ef fa0f 	bl	80002bc <__adddf3>
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	460d      	mov	r5, r1
 8010ea4:	f7ef fb56 	bl	8000554 <__aeabi_i2d>
 8010ea8:	a365      	add	r3, pc, #404	@ (adr r3, 8011040 <_dtoa_r+0x2c0>)
 8010eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eae:	f7ef fbbb 	bl	8000628 <__aeabi_dmul>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	4629      	mov	r1, r5
 8010eba:	f7ef f9ff 	bl	80002bc <__adddf3>
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	460d      	mov	r5, r1
 8010ec2:	f7ef fe61 	bl	8000b88 <__aeabi_d2iz>
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	4607      	mov	r7, r0
 8010eca:	2300      	movs	r3, #0
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7ef fe1c 	bl	8000b0c <__aeabi_dcmplt>
 8010ed4:	b140      	cbz	r0, 8010ee8 <_dtoa_r+0x168>
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	f7ef fb3c 	bl	8000554 <__aeabi_i2d>
 8010edc:	4622      	mov	r2, r4
 8010ede:	462b      	mov	r3, r5
 8010ee0:	f7ef fe0a 	bl	8000af8 <__aeabi_dcmpeq>
 8010ee4:	b900      	cbnz	r0, 8010ee8 <_dtoa_r+0x168>
 8010ee6:	3f01      	subs	r7, #1
 8010ee8:	2f16      	cmp	r7, #22
 8010eea:	d851      	bhi.n	8010f90 <_dtoa_r+0x210>
 8010eec:	4b5b      	ldr	r3, [pc, #364]	@ (801105c <_dtoa_r+0x2dc>)
 8010eee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010efa:	f7ef fe07 	bl	8000b0c <__aeabi_dcmplt>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d048      	beq.n	8010f94 <_dtoa_r+0x214>
 8010f02:	3f01      	subs	r7, #1
 8010f04:	2300      	movs	r3, #0
 8010f06:	9312      	str	r3, [sp, #72]	@ 0x48
 8010f08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010f0a:	1b9b      	subs	r3, r3, r6
 8010f0c:	1e5a      	subs	r2, r3, #1
 8010f0e:	bf44      	itt	mi
 8010f10:	f1c3 0801 	rsbmi	r8, r3, #1
 8010f14:	2300      	movmi	r3, #0
 8010f16:	9208      	str	r2, [sp, #32]
 8010f18:	bf54      	ite	pl
 8010f1a:	f04f 0800 	movpl.w	r8, #0
 8010f1e:	9308      	strmi	r3, [sp, #32]
 8010f20:	2f00      	cmp	r7, #0
 8010f22:	db39      	blt.n	8010f98 <_dtoa_r+0x218>
 8010f24:	9b08      	ldr	r3, [sp, #32]
 8010f26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010f28:	443b      	add	r3, r7
 8010f2a:	9308      	str	r3, [sp, #32]
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f32:	2b09      	cmp	r3, #9
 8010f34:	d864      	bhi.n	8011000 <_dtoa_r+0x280>
 8010f36:	2b05      	cmp	r3, #5
 8010f38:	bfc4      	itt	gt
 8010f3a:	3b04      	subgt	r3, #4
 8010f3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f40:	f1a3 0302 	sub.w	r3, r3, #2
 8010f44:	bfcc      	ite	gt
 8010f46:	2400      	movgt	r4, #0
 8010f48:	2401      	movle	r4, #1
 8010f4a:	2b03      	cmp	r3, #3
 8010f4c:	d863      	bhi.n	8011016 <_dtoa_r+0x296>
 8010f4e:	e8df f003 	tbb	[pc, r3]
 8010f52:	372a      	.short	0x372a
 8010f54:	5535      	.short	0x5535
 8010f56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010f5a:	441e      	add	r6, r3
 8010f5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010f60:	2b20      	cmp	r3, #32
 8010f62:	bfc1      	itttt	gt
 8010f64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010f68:	409f      	lslgt	r7, r3
 8010f6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010f6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010f72:	bfd6      	itet	le
 8010f74:	f1c3 0320 	rsble	r3, r3, #32
 8010f78:	ea47 0003 	orrgt.w	r0, r7, r3
 8010f7c:	fa04 f003 	lslle.w	r0, r4, r3
 8010f80:	f7ef fad8 	bl	8000534 <__aeabi_ui2d>
 8010f84:	2201      	movs	r2, #1
 8010f86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010f8a:	3e01      	subs	r6, #1
 8010f8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8010f8e:	e777      	b.n	8010e80 <_dtoa_r+0x100>
 8010f90:	2301      	movs	r3, #1
 8010f92:	e7b8      	b.n	8010f06 <_dtoa_r+0x186>
 8010f94:	9012      	str	r0, [sp, #72]	@ 0x48
 8010f96:	e7b7      	b.n	8010f08 <_dtoa_r+0x188>
 8010f98:	427b      	negs	r3, r7
 8010f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	eba8 0807 	sub.w	r8, r8, r7
 8010fa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010fa4:	e7c4      	b.n	8010f30 <_dtoa_r+0x1b0>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	dc35      	bgt.n	801101c <_dtoa_r+0x29c>
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	9307      	str	r3, [sp, #28]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8010fba:	e00b      	b.n	8010fd4 <_dtoa_r+0x254>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e7f3      	b.n	8010fa8 <_dtoa_r+0x228>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fc6:	18fb      	adds	r3, r7, r3
 8010fc8:	9300      	str	r3, [sp, #0]
 8010fca:	3301      	adds	r3, #1
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	9307      	str	r3, [sp, #28]
 8010fd0:	bfb8      	it	lt
 8010fd2:	2301      	movlt	r3, #1
 8010fd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010fd8:	2100      	movs	r1, #0
 8010fda:	2204      	movs	r2, #4
 8010fdc:	f102 0514 	add.w	r5, r2, #20
 8010fe0:	429d      	cmp	r5, r3
 8010fe2:	d91f      	bls.n	8011024 <_dtoa_r+0x2a4>
 8010fe4:	6041      	str	r1, [r0, #4]
 8010fe6:	4658      	mov	r0, fp
 8010fe8:	f000 fcd8 	bl	801199c <_Balloc>
 8010fec:	4682      	mov	sl, r0
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d13c      	bne.n	801106c <_dtoa_r+0x2ec>
 8010ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8011060 <_dtoa_r+0x2e0>)
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	f240 11af 	movw	r1, #431	@ 0x1af
 8010ffa:	e6d8      	b.n	8010dae <_dtoa_r+0x2e>
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	e7e0      	b.n	8010fc2 <_dtoa_r+0x242>
 8011000:	2401      	movs	r4, #1
 8011002:	2300      	movs	r3, #0
 8011004:	9309      	str	r3, [sp, #36]	@ 0x24
 8011006:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011008:	f04f 33ff 	mov.w	r3, #4294967295
 801100c:	9300      	str	r3, [sp, #0]
 801100e:	9307      	str	r3, [sp, #28]
 8011010:	2200      	movs	r2, #0
 8011012:	2312      	movs	r3, #18
 8011014:	e7d0      	b.n	8010fb8 <_dtoa_r+0x238>
 8011016:	2301      	movs	r3, #1
 8011018:	930b      	str	r3, [sp, #44]	@ 0x2c
 801101a:	e7f5      	b.n	8011008 <_dtoa_r+0x288>
 801101c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	9307      	str	r3, [sp, #28]
 8011022:	e7d7      	b.n	8010fd4 <_dtoa_r+0x254>
 8011024:	3101      	adds	r1, #1
 8011026:	0052      	lsls	r2, r2, #1
 8011028:	e7d8      	b.n	8010fdc <_dtoa_r+0x25c>
 801102a:	bf00      	nop
 801102c:	f3af 8000 	nop.w
 8011030:	636f4361 	.word	0x636f4361
 8011034:	3fd287a7 	.word	0x3fd287a7
 8011038:	8b60c8b3 	.word	0x8b60c8b3
 801103c:	3fc68a28 	.word	0x3fc68a28
 8011040:	509f79fb 	.word	0x509f79fb
 8011044:	3fd34413 	.word	0x3fd34413
 8011048:	08018115 	.word	0x08018115
 801104c:	0801812c 	.word	0x0801812c
 8011050:	7ff00000 	.word	0x7ff00000
 8011054:	080180e5 	.word	0x080180e5
 8011058:	3ff80000 	.word	0x3ff80000
 801105c:	08018228 	.word	0x08018228
 8011060:	08018184 	.word	0x08018184
 8011064:	08018111 	.word	0x08018111
 8011068:	080180e4 	.word	0x080180e4
 801106c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011070:	6018      	str	r0, [r3, #0]
 8011072:	9b07      	ldr	r3, [sp, #28]
 8011074:	2b0e      	cmp	r3, #14
 8011076:	f200 80a4 	bhi.w	80111c2 <_dtoa_r+0x442>
 801107a:	2c00      	cmp	r4, #0
 801107c:	f000 80a1 	beq.w	80111c2 <_dtoa_r+0x442>
 8011080:	2f00      	cmp	r7, #0
 8011082:	dd33      	ble.n	80110ec <_dtoa_r+0x36c>
 8011084:	4bad      	ldr	r3, [pc, #692]	@ (801133c <_dtoa_r+0x5bc>)
 8011086:	f007 020f 	and.w	r2, r7, #15
 801108a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801108e:	ed93 7b00 	vldr	d7, [r3]
 8011092:	05f8      	lsls	r0, r7, #23
 8011094:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011098:	ea4f 1427 	mov.w	r4, r7, asr #4
 801109c:	d516      	bpl.n	80110cc <_dtoa_r+0x34c>
 801109e:	4ba8      	ldr	r3, [pc, #672]	@ (8011340 <_dtoa_r+0x5c0>)
 80110a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80110a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80110a8:	f7ef fbe8 	bl	800087c <__aeabi_ddiv>
 80110ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110b0:	f004 040f 	and.w	r4, r4, #15
 80110b4:	2603      	movs	r6, #3
 80110b6:	4da2      	ldr	r5, [pc, #648]	@ (8011340 <_dtoa_r+0x5c0>)
 80110b8:	b954      	cbnz	r4, 80110d0 <_dtoa_r+0x350>
 80110ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110c2:	f7ef fbdb 	bl	800087c <__aeabi_ddiv>
 80110c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110ca:	e028      	b.n	801111e <_dtoa_r+0x39e>
 80110cc:	2602      	movs	r6, #2
 80110ce:	e7f2      	b.n	80110b6 <_dtoa_r+0x336>
 80110d0:	07e1      	lsls	r1, r4, #31
 80110d2:	d508      	bpl.n	80110e6 <_dtoa_r+0x366>
 80110d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110dc:	f7ef faa4 	bl	8000628 <__aeabi_dmul>
 80110e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110e4:	3601      	adds	r6, #1
 80110e6:	1064      	asrs	r4, r4, #1
 80110e8:	3508      	adds	r5, #8
 80110ea:	e7e5      	b.n	80110b8 <_dtoa_r+0x338>
 80110ec:	f000 80d2 	beq.w	8011294 <_dtoa_r+0x514>
 80110f0:	427c      	negs	r4, r7
 80110f2:	4b92      	ldr	r3, [pc, #584]	@ (801133c <_dtoa_r+0x5bc>)
 80110f4:	4d92      	ldr	r5, [pc, #584]	@ (8011340 <_dtoa_r+0x5c0>)
 80110f6:	f004 020f 	and.w	r2, r4, #15
 80110fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011106:	f7ef fa8f 	bl	8000628 <__aeabi_dmul>
 801110a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801110e:	1124      	asrs	r4, r4, #4
 8011110:	2300      	movs	r3, #0
 8011112:	2602      	movs	r6, #2
 8011114:	2c00      	cmp	r4, #0
 8011116:	f040 80b2 	bne.w	801127e <_dtoa_r+0x4fe>
 801111a:	2b00      	cmp	r3, #0
 801111c:	d1d3      	bne.n	80110c6 <_dtoa_r+0x346>
 801111e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011120:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011124:	2b00      	cmp	r3, #0
 8011126:	f000 80b7 	beq.w	8011298 <_dtoa_r+0x518>
 801112a:	4b86      	ldr	r3, [pc, #536]	@ (8011344 <_dtoa_r+0x5c4>)
 801112c:	2200      	movs	r2, #0
 801112e:	4620      	mov	r0, r4
 8011130:	4629      	mov	r1, r5
 8011132:	f7ef fceb 	bl	8000b0c <__aeabi_dcmplt>
 8011136:	2800      	cmp	r0, #0
 8011138:	f000 80ae 	beq.w	8011298 <_dtoa_r+0x518>
 801113c:	9b07      	ldr	r3, [sp, #28]
 801113e:	2b00      	cmp	r3, #0
 8011140:	f000 80aa 	beq.w	8011298 <_dtoa_r+0x518>
 8011144:	9b00      	ldr	r3, [sp, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	dd37      	ble.n	80111ba <_dtoa_r+0x43a>
 801114a:	1e7b      	subs	r3, r7, #1
 801114c:	9304      	str	r3, [sp, #16]
 801114e:	4620      	mov	r0, r4
 8011150:	4b7d      	ldr	r3, [pc, #500]	@ (8011348 <_dtoa_r+0x5c8>)
 8011152:	2200      	movs	r2, #0
 8011154:	4629      	mov	r1, r5
 8011156:	f7ef fa67 	bl	8000628 <__aeabi_dmul>
 801115a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801115e:	9c00      	ldr	r4, [sp, #0]
 8011160:	3601      	adds	r6, #1
 8011162:	4630      	mov	r0, r6
 8011164:	f7ef f9f6 	bl	8000554 <__aeabi_i2d>
 8011168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801116c:	f7ef fa5c 	bl	8000628 <__aeabi_dmul>
 8011170:	4b76      	ldr	r3, [pc, #472]	@ (801134c <_dtoa_r+0x5cc>)
 8011172:	2200      	movs	r2, #0
 8011174:	f7ef f8a2 	bl	80002bc <__adddf3>
 8011178:	4605      	mov	r5, r0
 801117a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801117e:	2c00      	cmp	r4, #0
 8011180:	f040 808d 	bne.w	801129e <_dtoa_r+0x51e>
 8011184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011188:	4b71      	ldr	r3, [pc, #452]	@ (8011350 <_dtoa_r+0x5d0>)
 801118a:	2200      	movs	r2, #0
 801118c:	f7ef f894 	bl	80002b8 <__aeabi_dsub>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011198:	462a      	mov	r2, r5
 801119a:	4633      	mov	r3, r6
 801119c:	f7ef fcd4 	bl	8000b48 <__aeabi_dcmpgt>
 80111a0:	2800      	cmp	r0, #0
 80111a2:	f040 828b 	bne.w	80116bc <_dtoa_r+0x93c>
 80111a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111aa:	462a      	mov	r2, r5
 80111ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80111b0:	f7ef fcac 	bl	8000b0c <__aeabi_dcmplt>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	f040 8128 	bne.w	801140a <_dtoa_r+0x68a>
 80111ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80111be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80111c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	f2c0 815a 	blt.w	801147e <_dtoa_r+0x6fe>
 80111ca:	2f0e      	cmp	r7, #14
 80111cc:	f300 8157 	bgt.w	801147e <_dtoa_r+0x6fe>
 80111d0:	4b5a      	ldr	r3, [pc, #360]	@ (801133c <_dtoa_r+0x5bc>)
 80111d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80111d6:	ed93 7b00 	vldr	d7, [r3]
 80111da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111dc:	2b00      	cmp	r3, #0
 80111de:	ed8d 7b00 	vstr	d7, [sp]
 80111e2:	da03      	bge.n	80111ec <_dtoa_r+0x46c>
 80111e4:	9b07      	ldr	r3, [sp, #28]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f340 8101 	ble.w	80113ee <_dtoa_r+0x66e>
 80111ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80111f0:	4656      	mov	r6, sl
 80111f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111f6:	4620      	mov	r0, r4
 80111f8:	4629      	mov	r1, r5
 80111fa:	f7ef fb3f 	bl	800087c <__aeabi_ddiv>
 80111fe:	f7ef fcc3 	bl	8000b88 <__aeabi_d2iz>
 8011202:	4680      	mov	r8, r0
 8011204:	f7ef f9a6 	bl	8000554 <__aeabi_i2d>
 8011208:	e9dd 2300 	ldrd	r2, r3, [sp]
 801120c:	f7ef fa0c 	bl	8000628 <__aeabi_dmul>
 8011210:	4602      	mov	r2, r0
 8011212:	460b      	mov	r3, r1
 8011214:	4620      	mov	r0, r4
 8011216:	4629      	mov	r1, r5
 8011218:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801121c:	f7ef f84c 	bl	80002b8 <__aeabi_dsub>
 8011220:	f806 4b01 	strb.w	r4, [r6], #1
 8011224:	9d07      	ldr	r5, [sp, #28]
 8011226:	eba6 040a 	sub.w	r4, r6, sl
 801122a:	42a5      	cmp	r5, r4
 801122c:	4602      	mov	r2, r0
 801122e:	460b      	mov	r3, r1
 8011230:	f040 8117 	bne.w	8011462 <_dtoa_r+0x6e2>
 8011234:	f7ef f842 	bl	80002bc <__adddf3>
 8011238:	e9dd 2300 	ldrd	r2, r3, [sp]
 801123c:	4604      	mov	r4, r0
 801123e:	460d      	mov	r5, r1
 8011240:	f7ef fc82 	bl	8000b48 <__aeabi_dcmpgt>
 8011244:	2800      	cmp	r0, #0
 8011246:	f040 80f9 	bne.w	801143c <_dtoa_r+0x6bc>
 801124a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801124e:	4620      	mov	r0, r4
 8011250:	4629      	mov	r1, r5
 8011252:	f7ef fc51 	bl	8000af8 <__aeabi_dcmpeq>
 8011256:	b118      	cbz	r0, 8011260 <_dtoa_r+0x4e0>
 8011258:	f018 0f01 	tst.w	r8, #1
 801125c:	f040 80ee 	bne.w	801143c <_dtoa_r+0x6bc>
 8011260:	4649      	mov	r1, r9
 8011262:	4658      	mov	r0, fp
 8011264:	f000 fbda 	bl	8011a1c <_Bfree>
 8011268:	2300      	movs	r3, #0
 801126a:	7033      	strb	r3, [r6, #0]
 801126c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801126e:	3701      	adds	r7, #1
 8011270:	601f      	str	r7, [r3, #0]
 8011272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011274:	2b00      	cmp	r3, #0
 8011276:	f000 831d 	beq.w	80118b4 <_dtoa_r+0xb34>
 801127a:	601e      	str	r6, [r3, #0]
 801127c:	e31a      	b.n	80118b4 <_dtoa_r+0xb34>
 801127e:	07e2      	lsls	r2, r4, #31
 8011280:	d505      	bpl.n	801128e <_dtoa_r+0x50e>
 8011282:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011286:	f7ef f9cf 	bl	8000628 <__aeabi_dmul>
 801128a:	3601      	adds	r6, #1
 801128c:	2301      	movs	r3, #1
 801128e:	1064      	asrs	r4, r4, #1
 8011290:	3508      	adds	r5, #8
 8011292:	e73f      	b.n	8011114 <_dtoa_r+0x394>
 8011294:	2602      	movs	r6, #2
 8011296:	e742      	b.n	801111e <_dtoa_r+0x39e>
 8011298:	9c07      	ldr	r4, [sp, #28]
 801129a:	9704      	str	r7, [sp, #16]
 801129c:	e761      	b.n	8011162 <_dtoa_r+0x3e2>
 801129e:	4b27      	ldr	r3, [pc, #156]	@ (801133c <_dtoa_r+0x5bc>)
 80112a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80112a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80112aa:	4454      	add	r4, sl
 80112ac:	2900      	cmp	r1, #0
 80112ae:	d053      	beq.n	8011358 <_dtoa_r+0x5d8>
 80112b0:	4928      	ldr	r1, [pc, #160]	@ (8011354 <_dtoa_r+0x5d4>)
 80112b2:	2000      	movs	r0, #0
 80112b4:	f7ef fae2 	bl	800087c <__aeabi_ddiv>
 80112b8:	4633      	mov	r3, r6
 80112ba:	462a      	mov	r2, r5
 80112bc:	f7ee fffc 	bl	80002b8 <__aeabi_dsub>
 80112c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80112c4:	4656      	mov	r6, sl
 80112c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ca:	f7ef fc5d 	bl	8000b88 <__aeabi_d2iz>
 80112ce:	4605      	mov	r5, r0
 80112d0:	f7ef f940 	bl	8000554 <__aeabi_i2d>
 80112d4:	4602      	mov	r2, r0
 80112d6:	460b      	mov	r3, r1
 80112d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112dc:	f7ee ffec 	bl	80002b8 <__aeabi_dsub>
 80112e0:	3530      	adds	r5, #48	@ 0x30
 80112e2:	4602      	mov	r2, r0
 80112e4:	460b      	mov	r3, r1
 80112e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112ea:	f806 5b01 	strb.w	r5, [r6], #1
 80112ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80112f2:	f7ef fc0b 	bl	8000b0c <__aeabi_dcmplt>
 80112f6:	2800      	cmp	r0, #0
 80112f8:	d171      	bne.n	80113de <_dtoa_r+0x65e>
 80112fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112fe:	4911      	ldr	r1, [pc, #68]	@ (8011344 <_dtoa_r+0x5c4>)
 8011300:	2000      	movs	r0, #0
 8011302:	f7ee ffd9 	bl	80002b8 <__aeabi_dsub>
 8011306:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801130a:	f7ef fbff 	bl	8000b0c <__aeabi_dcmplt>
 801130e:	2800      	cmp	r0, #0
 8011310:	f040 8095 	bne.w	801143e <_dtoa_r+0x6be>
 8011314:	42a6      	cmp	r6, r4
 8011316:	f43f af50 	beq.w	80111ba <_dtoa_r+0x43a>
 801131a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801131e:	4b0a      	ldr	r3, [pc, #40]	@ (8011348 <_dtoa_r+0x5c8>)
 8011320:	2200      	movs	r2, #0
 8011322:	f7ef f981 	bl	8000628 <__aeabi_dmul>
 8011326:	4b08      	ldr	r3, [pc, #32]	@ (8011348 <_dtoa_r+0x5c8>)
 8011328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801132c:	2200      	movs	r2, #0
 801132e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011332:	f7ef f979 	bl	8000628 <__aeabi_dmul>
 8011336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801133a:	e7c4      	b.n	80112c6 <_dtoa_r+0x546>
 801133c:	08018228 	.word	0x08018228
 8011340:	08018200 	.word	0x08018200
 8011344:	3ff00000 	.word	0x3ff00000
 8011348:	40240000 	.word	0x40240000
 801134c:	401c0000 	.word	0x401c0000
 8011350:	40140000 	.word	0x40140000
 8011354:	3fe00000 	.word	0x3fe00000
 8011358:	4631      	mov	r1, r6
 801135a:	4628      	mov	r0, r5
 801135c:	f7ef f964 	bl	8000628 <__aeabi_dmul>
 8011360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011364:	9415      	str	r4, [sp, #84]	@ 0x54
 8011366:	4656      	mov	r6, sl
 8011368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801136c:	f7ef fc0c 	bl	8000b88 <__aeabi_d2iz>
 8011370:	4605      	mov	r5, r0
 8011372:	f7ef f8ef 	bl	8000554 <__aeabi_i2d>
 8011376:	4602      	mov	r2, r0
 8011378:	460b      	mov	r3, r1
 801137a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801137e:	f7ee ff9b 	bl	80002b8 <__aeabi_dsub>
 8011382:	3530      	adds	r5, #48	@ 0x30
 8011384:	f806 5b01 	strb.w	r5, [r6], #1
 8011388:	4602      	mov	r2, r0
 801138a:	460b      	mov	r3, r1
 801138c:	42a6      	cmp	r6, r4
 801138e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011392:	f04f 0200 	mov.w	r2, #0
 8011396:	d124      	bne.n	80113e2 <_dtoa_r+0x662>
 8011398:	4bac      	ldr	r3, [pc, #688]	@ (801164c <_dtoa_r+0x8cc>)
 801139a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801139e:	f7ee ff8d 	bl	80002bc <__adddf3>
 80113a2:	4602      	mov	r2, r0
 80113a4:	460b      	mov	r3, r1
 80113a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113aa:	f7ef fbcd 	bl	8000b48 <__aeabi_dcmpgt>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d145      	bne.n	801143e <_dtoa_r+0x6be>
 80113b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113b6:	49a5      	ldr	r1, [pc, #660]	@ (801164c <_dtoa_r+0x8cc>)
 80113b8:	2000      	movs	r0, #0
 80113ba:	f7ee ff7d 	bl	80002b8 <__aeabi_dsub>
 80113be:	4602      	mov	r2, r0
 80113c0:	460b      	mov	r3, r1
 80113c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113c6:	f7ef fba1 	bl	8000b0c <__aeabi_dcmplt>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	f43f aef5 	beq.w	80111ba <_dtoa_r+0x43a>
 80113d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80113d2:	1e73      	subs	r3, r6, #1
 80113d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80113d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80113da:	2b30      	cmp	r3, #48	@ 0x30
 80113dc:	d0f8      	beq.n	80113d0 <_dtoa_r+0x650>
 80113de:	9f04      	ldr	r7, [sp, #16]
 80113e0:	e73e      	b.n	8011260 <_dtoa_r+0x4e0>
 80113e2:	4b9b      	ldr	r3, [pc, #620]	@ (8011650 <_dtoa_r+0x8d0>)
 80113e4:	f7ef f920 	bl	8000628 <__aeabi_dmul>
 80113e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113ec:	e7bc      	b.n	8011368 <_dtoa_r+0x5e8>
 80113ee:	d10c      	bne.n	801140a <_dtoa_r+0x68a>
 80113f0:	4b98      	ldr	r3, [pc, #608]	@ (8011654 <_dtoa_r+0x8d4>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113f8:	f7ef f916 	bl	8000628 <__aeabi_dmul>
 80113fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011400:	f7ef fb98 	bl	8000b34 <__aeabi_dcmpge>
 8011404:	2800      	cmp	r0, #0
 8011406:	f000 8157 	beq.w	80116b8 <_dtoa_r+0x938>
 801140a:	2400      	movs	r4, #0
 801140c:	4625      	mov	r5, r4
 801140e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011410:	43db      	mvns	r3, r3
 8011412:	9304      	str	r3, [sp, #16]
 8011414:	4656      	mov	r6, sl
 8011416:	2700      	movs	r7, #0
 8011418:	4621      	mov	r1, r4
 801141a:	4658      	mov	r0, fp
 801141c:	f000 fafe 	bl	8011a1c <_Bfree>
 8011420:	2d00      	cmp	r5, #0
 8011422:	d0dc      	beq.n	80113de <_dtoa_r+0x65e>
 8011424:	b12f      	cbz	r7, 8011432 <_dtoa_r+0x6b2>
 8011426:	42af      	cmp	r7, r5
 8011428:	d003      	beq.n	8011432 <_dtoa_r+0x6b2>
 801142a:	4639      	mov	r1, r7
 801142c:	4658      	mov	r0, fp
 801142e:	f000 faf5 	bl	8011a1c <_Bfree>
 8011432:	4629      	mov	r1, r5
 8011434:	4658      	mov	r0, fp
 8011436:	f000 faf1 	bl	8011a1c <_Bfree>
 801143a:	e7d0      	b.n	80113de <_dtoa_r+0x65e>
 801143c:	9704      	str	r7, [sp, #16]
 801143e:	4633      	mov	r3, r6
 8011440:	461e      	mov	r6, r3
 8011442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011446:	2a39      	cmp	r2, #57	@ 0x39
 8011448:	d107      	bne.n	801145a <_dtoa_r+0x6da>
 801144a:	459a      	cmp	sl, r3
 801144c:	d1f8      	bne.n	8011440 <_dtoa_r+0x6c0>
 801144e:	9a04      	ldr	r2, [sp, #16]
 8011450:	3201      	adds	r2, #1
 8011452:	9204      	str	r2, [sp, #16]
 8011454:	2230      	movs	r2, #48	@ 0x30
 8011456:	f88a 2000 	strb.w	r2, [sl]
 801145a:	781a      	ldrb	r2, [r3, #0]
 801145c:	3201      	adds	r2, #1
 801145e:	701a      	strb	r2, [r3, #0]
 8011460:	e7bd      	b.n	80113de <_dtoa_r+0x65e>
 8011462:	4b7b      	ldr	r3, [pc, #492]	@ (8011650 <_dtoa_r+0x8d0>)
 8011464:	2200      	movs	r2, #0
 8011466:	f7ef f8df 	bl	8000628 <__aeabi_dmul>
 801146a:	2200      	movs	r2, #0
 801146c:	2300      	movs	r3, #0
 801146e:	4604      	mov	r4, r0
 8011470:	460d      	mov	r5, r1
 8011472:	f7ef fb41 	bl	8000af8 <__aeabi_dcmpeq>
 8011476:	2800      	cmp	r0, #0
 8011478:	f43f aebb 	beq.w	80111f2 <_dtoa_r+0x472>
 801147c:	e6f0      	b.n	8011260 <_dtoa_r+0x4e0>
 801147e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011480:	2a00      	cmp	r2, #0
 8011482:	f000 80db 	beq.w	801163c <_dtoa_r+0x8bc>
 8011486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011488:	2a01      	cmp	r2, #1
 801148a:	f300 80bf 	bgt.w	801160c <_dtoa_r+0x88c>
 801148e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011490:	2a00      	cmp	r2, #0
 8011492:	f000 80b7 	beq.w	8011604 <_dtoa_r+0x884>
 8011496:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801149a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801149c:	4646      	mov	r6, r8
 801149e:	9a08      	ldr	r2, [sp, #32]
 80114a0:	2101      	movs	r1, #1
 80114a2:	441a      	add	r2, r3
 80114a4:	4658      	mov	r0, fp
 80114a6:	4498      	add	r8, r3
 80114a8:	9208      	str	r2, [sp, #32]
 80114aa:	f000 fb6b 	bl	8011b84 <__i2b>
 80114ae:	4605      	mov	r5, r0
 80114b0:	b15e      	cbz	r6, 80114ca <_dtoa_r+0x74a>
 80114b2:	9b08      	ldr	r3, [sp, #32]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	dd08      	ble.n	80114ca <_dtoa_r+0x74a>
 80114b8:	42b3      	cmp	r3, r6
 80114ba:	9a08      	ldr	r2, [sp, #32]
 80114bc:	bfa8      	it	ge
 80114be:	4633      	movge	r3, r6
 80114c0:	eba8 0803 	sub.w	r8, r8, r3
 80114c4:	1af6      	subs	r6, r6, r3
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	9308      	str	r3, [sp, #32]
 80114ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114cc:	b1f3      	cbz	r3, 801150c <_dtoa_r+0x78c>
 80114ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 80b7 	beq.w	8011644 <_dtoa_r+0x8c4>
 80114d6:	b18c      	cbz	r4, 80114fc <_dtoa_r+0x77c>
 80114d8:	4629      	mov	r1, r5
 80114da:	4622      	mov	r2, r4
 80114dc:	4658      	mov	r0, fp
 80114de:	f000 fc11 	bl	8011d04 <__pow5mult>
 80114e2:	464a      	mov	r2, r9
 80114e4:	4601      	mov	r1, r0
 80114e6:	4605      	mov	r5, r0
 80114e8:	4658      	mov	r0, fp
 80114ea:	f000 fb61 	bl	8011bb0 <__multiply>
 80114ee:	4649      	mov	r1, r9
 80114f0:	9004      	str	r0, [sp, #16]
 80114f2:	4658      	mov	r0, fp
 80114f4:	f000 fa92 	bl	8011a1c <_Bfree>
 80114f8:	9b04      	ldr	r3, [sp, #16]
 80114fa:	4699      	mov	r9, r3
 80114fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114fe:	1b1a      	subs	r2, r3, r4
 8011500:	d004      	beq.n	801150c <_dtoa_r+0x78c>
 8011502:	4649      	mov	r1, r9
 8011504:	4658      	mov	r0, fp
 8011506:	f000 fbfd 	bl	8011d04 <__pow5mult>
 801150a:	4681      	mov	r9, r0
 801150c:	2101      	movs	r1, #1
 801150e:	4658      	mov	r0, fp
 8011510:	f000 fb38 	bl	8011b84 <__i2b>
 8011514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011516:	4604      	mov	r4, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	f000 81cf 	beq.w	80118bc <_dtoa_r+0xb3c>
 801151e:	461a      	mov	r2, r3
 8011520:	4601      	mov	r1, r0
 8011522:	4658      	mov	r0, fp
 8011524:	f000 fbee 	bl	8011d04 <__pow5mult>
 8011528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801152a:	2b01      	cmp	r3, #1
 801152c:	4604      	mov	r4, r0
 801152e:	f300 8095 	bgt.w	801165c <_dtoa_r+0x8dc>
 8011532:	9b02      	ldr	r3, [sp, #8]
 8011534:	2b00      	cmp	r3, #0
 8011536:	f040 8087 	bne.w	8011648 <_dtoa_r+0x8c8>
 801153a:	9b03      	ldr	r3, [sp, #12]
 801153c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011540:	2b00      	cmp	r3, #0
 8011542:	f040 8089 	bne.w	8011658 <_dtoa_r+0x8d8>
 8011546:	9b03      	ldr	r3, [sp, #12]
 8011548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801154c:	0d1b      	lsrs	r3, r3, #20
 801154e:	051b      	lsls	r3, r3, #20
 8011550:	b12b      	cbz	r3, 801155e <_dtoa_r+0x7de>
 8011552:	9b08      	ldr	r3, [sp, #32]
 8011554:	3301      	adds	r3, #1
 8011556:	9308      	str	r3, [sp, #32]
 8011558:	f108 0801 	add.w	r8, r8, #1
 801155c:	2301      	movs	r3, #1
 801155e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011562:	2b00      	cmp	r3, #0
 8011564:	f000 81b0 	beq.w	80118c8 <_dtoa_r+0xb48>
 8011568:	6923      	ldr	r3, [r4, #16]
 801156a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801156e:	6918      	ldr	r0, [r3, #16]
 8011570:	f000 fabc 	bl	8011aec <__hi0bits>
 8011574:	f1c0 0020 	rsb	r0, r0, #32
 8011578:	9b08      	ldr	r3, [sp, #32]
 801157a:	4418      	add	r0, r3
 801157c:	f010 001f 	ands.w	r0, r0, #31
 8011580:	d077      	beq.n	8011672 <_dtoa_r+0x8f2>
 8011582:	f1c0 0320 	rsb	r3, r0, #32
 8011586:	2b04      	cmp	r3, #4
 8011588:	dd6b      	ble.n	8011662 <_dtoa_r+0x8e2>
 801158a:	9b08      	ldr	r3, [sp, #32]
 801158c:	f1c0 001c 	rsb	r0, r0, #28
 8011590:	4403      	add	r3, r0
 8011592:	4480      	add	r8, r0
 8011594:	4406      	add	r6, r0
 8011596:	9308      	str	r3, [sp, #32]
 8011598:	f1b8 0f00 	cmp.w	r8, #0
 801159c:	dd05      	ble.n	80115aa <_dtoa_r+0x82a>
 801159e:	4649      	mov	r1, r9
 80115a0:	4642      	mov	r2, r8
 80115a2:	4658      	mov	r0, fp
 80115a4:	f000 fc08 	bl	8011db8 <__lshift>
 80115a8:	4681      	mov	r9, r0
 80115aa:	9b08      	ldr	r3, [sp, #32]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	dd05      	ble.n	80115bc <_dtoa_r+0x83c>
 80115b0:	4621      	mov	r1, r4
 80115b2:	461a      	mov	r2, r3
 80115b4:	4658      	mov	r0, fp
 80115b6:	f000 fbff 	bl	8011db8 <__lshift>
 80115ba:	4604      	mov	r4, r0
 80115bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d059      	beq.n	8011676 <_dtoa_r+0x8f6>
 80115c2:	4621      	mov	r1, r4
 80115c4:	4648      	mov	r0, r9
 80115c6:	f000 fc63 	bl	8011e90 <__mcmp>
 80115ca:	2800      	cmp	r0, #0
 80115cc:	da53      	bge.n	8011676 <_dtoa_r+0x8f6>
 80115ce:	1e7b      	subs	r3, r7, #1
 80115d0:	9304      	str	r3, [sp, #16]
 80115d2:	4649      	mov	r1, r9
 80115d4:	2300      	movs	r3, #0
 80115d6:	220a      	movs	r2, #10
 80115d8:	4658      	mov	r0, fp
 80115da:	f000 fa41 	bl	8011a60 <__multadd>
 80115de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115e0:	4681      	mov	r9, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f000 8172 	beq.w	80118cc <_dtoa_r+0xb4c>
 80115e8:	2300      	movs	r3, #0
 80115ea:	4629      	mov	r1, r5
 80115ec:	220a      	movs	r2, #10
 80115ee:	4658      	mov	r0, fp
 80115f0:	f000 fa36 	bl	8011a60 <__multadd>
 80115f4:	9b00      	ldr	r3, [sp, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	4605      	mov	r5, r0
 80115fa:	dc67      	bgt.n	80116cc <_dtoa_r+0x94c>
 80115fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115fe:	2b02      	cmp	r3, #2
 8011600:	dc41      	bgt.n	8011686 <_dtoa_r+0x906>
 8011602:	e063      	b.n	80116cc <_dtoa_r+0x94c>
 8011604:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011606:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801160a:	e746      	b.n	801149a <_dtoa_r+0x71a>
 801160c:	9b07      	ldr	r3, [sp, #28]
 801160e:	1e5c      	subs	r4, r3, #1
 8011610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011612:	42a3      	cmp	r3, r4
 8011614:	bfbf      	itttt	lt
 8011616:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011618:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801161a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801161c:	1ae3      	sublt	r3, r4, r3
 801161e:	bfb4      	ite	lt
 8011620:	18d2      	addlt	r2, r2, r3
 8011622:	1b1c      	subge	r4, r3, r4
 8011624:	9b07      	ldr	r3, [sp, #28]
 8011626:	bfbc      	itt	lt
 8011628:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801162a:	2400      	movlt	r4, #0
 801162c:	2b00      	cmp	r3, #0
 801162e:	bfb5      	itete	lt
 8011630:	eba8 0603 	sublt.w	r6, r8, r3
 8011634:	9b07      	ldrge	r3, [sp, #28]
 8011636:	2300      	movlt	r3, #0
 8011638:	4646      	movge	r6, r8
 801163a:	e730      	b.n	801149e <_dtoa_r+0x71e>
 801163c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801163e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011640:	4646      	mov	r6, r8
 8011642:	e735      	b.n	80114b0 <_dtoa_r+0x730>
 8011644:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011646:	e75c      	b.n	8011502 <_dtoa_r+0x782>
 8011648:	2300      	movs	r3, #0
 801164a:	e788      	b.n	801155e <_dtoa_r+0x7de>
 801164c:	3fe00000 	.word	0x3fe00000
 8011650:	40240000 	.word	0x40240000
 8011654:	40140000 	.word	0x40140000
 8011658:	9b02      	ldr	r3, [sp, #8]
 801165a:	e780      	b.n	801155e <_dtoa_r+0x7de>
 801165c:	2300      	movs	r3, #0
 801165e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011660:	e782      	b.n	8011568 <_dtoa_r+0x7e8>
 8011662:	d099      	beq.n	8011598 <_dtoa_r+0x818>
 8011664:	9a08      	ldr	r2, [sp, #32]
 8011666:	331c      	adds	r3, #28
 8011668:	441a      	add	r2, r3
 801166a:	4498      	add	r8, r3
 801166c:	441e      	add	r6, r3
 801166e:	9208      	str	r2, [sp, #32]
 8011670:	e792      	b.n	8011598 <_dtoa_r+0x818>
 8011672:	4603      	mov	r3, r0
 8011674:	e7f6      	b.n	8011664 <_dtoa_r+0x8e4>
 8011676:	9b07      	ldr	r3, [sp, #28]
 8011678:	9704      	str	r7, [sp, #16]
 801167a:	2b00      	cmp	r3, #0
 801167c:	dc20      	bgt.n	80116c0 <_dtoa_r+0x940>
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011682:	2b02      	cmp	r3, #2
 8011684:	dd1e      	ble.n	80116c4 <_dtoa_r+0x944>
 8011686:	9b00      	ldr	r3, [sp, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	f47f aec0 	bne.w	801140e <_dtoa_r+0x68e>
 801168e:	4621      	mov	r1, r4
 8011690:	2205      	movs	r2, #5
 8011692:	4658      	mov	r0, fp
 8011694:	f000 f9e4 	bl	8011a60 <__multadd>
 8011698:	4601      	mov	r1, r0
 801169a:	4604      	mov	r4, r0
 801169c:	4648      	mov	r0, r9
 801169e:	f000 fbf7 	bl	8011e90 <__mcmp>
 80116a2:	2800      	cmp	r0, #0
 80116a4:	f77f aeb3 	ble.w	801140e <_dtoa_r+0x68e>
 80116a8:	4656      	mov	r6, sl
 80116aa:	2331      	movs	r3, #49	@ 0x31
 80116ac:	f806 3b01 	strb.w	r3, [r6], #1
 80116b0:	9b04      	ldr	r3, [sp, #16]
 80116b2:	3301      	adds	r3, #1
 80116b4:	9304      	str	r3, [sp, #16]
 80116b6:	e6ae      	b.n	8011416 <_dtoa_r+0x696>
 80116b8:	9c07      	ldr	r4, [sp, #28]
 80116ba:	9704      	str	r7, [sp, #16]
 80116bc:	4625      	mov	r5, r4
 80116be:	e7f3      	b.n	80116a8 <_dtoa_r+0x928>
 80116c0:	9b07      	ldr	r3, [sp, #28]
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f000 8104 	beq.w	80118d4 <_dtoa_r+0xb54>
 80116cc:	2e00      	cmp	r6, #0
 80116ce:	dd05      	ble.n	80116dc <_dtoa_r+0x95c>
 80116d0:	4629      	mov	r1, r5
 80116d2:	4632      	mov	r2, r6
 80116d4:	4658      	mov	r0, fp
 80116d6:	f000 fb6f 	bl	8011db8 <__lshift>
 80116da:	4605      	mov	r5, r0
 80116dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d05a      	beq.n	8011798 <_dtoa_r+0xa18>
 80116e2:	6869      	ldr	r1, [r5, #4]
 80116e4:	4658      	mov	r0, fp
 80116e6:	f000 f959 	bl	801199c <_Balloc>
 80116ea:	4606      	mov	r6, r0
 80116ec:	b928      	cbnz	r0, 80116fa <_dtoa_r+0x97a>
 80116ee:	4b84      	ldr	r3, [pc, #528]	@ (8011900 <_dtoa_r+0xb80>)
 80116f0:	4602      	mov	r2, r0
 80116f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80116f6:	f7ff bb5a 	b.w	8010dae <_dtoa_r+0x2e>
 80116fa:	692a      	ldr	r2, [r5, #16]
 80116fc:	3202      	adds	r2, #2
 80116fe:	0092      	lsls	r2, r2, #2
 8011700:	f105 010c 	add.w	r1, r5, #12
 8011704:	300c      	adds	r0, #12
 8011706:	f7ff faa2 	bl	8010c4e <memcpy>
 801170a:	2201      	movs	r2, #1
 801170c:	4631      	mov	r1, r6
 801170e:	4658      	mov	r0, fp
 8011710:	f000 fb52 	bl	8011db8 <__lshift>
 8011714:	f10a 0301 	add.w	r3, sl, #1
 8011718:	9307      	str	r3, [sp, #28]
 801171a:	9b00      	ldr	r3, [sp, #0]
 801171c:	4453      	add	r3, sl
 801171e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011720:	9b02      	ldr	r3, [sp, #8]
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	462f      	mov	r7, r5
 8011728:	930a      	str	r3, [sp, #40]	@ 0x28
 801172a:	4605      	mov	r5, r0
 801172c:	9b07      	ldr	r3, [sp, #28]
 801172e:	4621      	mov	r1, r4
 8011730:	3b01      	subs	r3, #1
 8011732:	4648      	mov	r0, r9
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	f7ff fa98 	bl	8010c6a <quorem>
 801173a:	4639      	mov	r1, r7
 801173c:	9002      	str	r0, [sp, #8]
 801173e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011742:	4648      	mov	r0, r9
 8011744:	f000 fba4 	bl	8011e90 <__mcmp>
 8011748:	462a      	mov	r2, r5
 801174a:	9008      	str	r0, [sp, #32]
 801174c:	4621      	mov	r1, r4
 801174e:	4658      	mov	r0, fp
 8011750:	f000 fbba 	bl	8011ec8 <__mdiff>
 8011754:	68c2      	ldr	r2, [r0, #12]
 8011756:	4606      	mov	r6, r0
 8011758:	bb02      	cbnz	r2, 801179c <_dtoa_r+0xa1c>
 801175a:	4601      	mov	r1, r0
 801175c:	4648      	mov	r0, r9
 801175e:	f000 fb97 	bl	8011e90 <__mcmp>
 8011762:	4602      	mov	r2, r0
 8011764:	4631      	mov	r1, r6
 8011766:	4658      	mov	r0, fp
 8011768:	920e      	str	r2, [sp, #56]	@ 0x38
 801176a:	f000 f957 	bl	8011a1c <_Bfree>
 801176e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011770:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011772:	9e07      	ldr	r6, [sp, #28]
 8011774:	ea43 0102 	orr.w	r1, r3, r2
 8011778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801177a:	4319      	orrs	r1, r3
 801177c:	d110      	bne.n	80117a0 <_dtoa_r+0xa20>
 801177e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011782:	d029      	beq.n	80117d8 <_dtoa_r+0xa58>
 8011784:	9b08      	ldr	r3, [sp, #32]
 8011786:	2b00      	cmp	r3, #0
 8011788:	dd02      	ble.n	8011790 <_dtoa_r+0xa10>
 801178a:	9b02      	ldr	r3, [sp, #8]
 801178c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011790:	9b00      	ldr	r3, [sp, #0]
 8011792:	f883 8000 	strb.w	r8, [r3]
 8011796:	e63f      	b.n	8011418 <_dtoa_r+0x698>
 8011798:	4628      	mov	r0, r5
 801179a:	e7bb      	b.n	8011714 <_dtoa_r+0x994>
 801179c:	2201      	movs	r2, #1
 801179e:	e7e1      	b.n	8011764 <_dtoa_r+0x9e4>
 80117a0:	9b08      	ldr	r3, [sp, #32]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	db04      	blt.n	80117b0 <_dtoa_r+0xa30>
 80117a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80117a8:	430b      	orrs	r3, r1
 80117aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80117ac:	430b      	orrs	r3, r1
 80117ae:	d120      	bne.n	80117f2 <_dtoa_r+0xa72>
 80117b0:	2a00      	cmp	r2, #0
 80117b2:	dded      	ble.n	8011790 <_dtoa_r+0xa10>
 80117b4:	4649      	mov	r1, r9
 80117b6:	2201      	movs	r2, #1
 80117b8:	4658      	mov	r0, fp
 80117ba:	f000 fafd 	bl	8011db8 <__lshift>
 80117be:	4621      	mov	r1, r4
 80117c0:	4681      	mov	r9, r0
 80117c2:	f000 fb65 	bl	8011e90 <__mcmp>
 80117c6:	2800      	cmp	r0, #0
 80117c8:	dc03      	bgt.n	80117d2 <_dtoa_r+0xa52>
 80117ca:	d1e1      	bne.n	8011790 <_dtoa_r+0xa10>
 80117cc:	f018 0f01 	tst.w	r8, #1
 80117d0:	d0de      	beq.n	8011790 <_dtoa_r+0xa10>
 80117d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80117d6:	d1d8      	bne.n	801178a <_dtoa_r+0xa0a>
 80117d8:	9a00      	ldr	r2, [sp, #0]
 80117da:	2339      	movs	r3, #57	@ 0x39
 80117dc:	7013      	strb	r3, [r2, #0]
 80117de:	4633      	mov	r3, r6
 80117e0:	461e      	mov	r6, r3
 80117e2:	3b01      	subs	r3, #1
 80117e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80117e8:	2a39      	cmp	r2, #57	@ 0x39
 80117ea:	d052      	beq.n	8011892 <_dtoa_r+0xb12>
 80117ec:	3201      	adds	r2, #1
 80117ee:	701a      	strb	r2, [r3, #0]
 80117f0:	e612      	b.n	8011418 <_dtoa_r+0x698>
 80117f2:	2a00      	cmp	r2, #0
 80117f4:	dd07      	ble.n	8011806 <_dtoa_r+0xa86>
 80117f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80117fa:	d0ed      	beq.n	80117d8 <_dtoa_r+0xa58>
 80117fc:	9a00      	ldr	r2, [sp, #0]
 80117fe:	f108 0301 	add.w	r3, r8, #1
 8011802:	7013      	strb	r3, [r2, #0]
 8011804:	e608      	b.n	8011418 <_dtoa_r+0x698>
 8011806:	9b07      	ldr	r3, [sp, #28]
 8011808:	9a07      	ldr	r2, [sp, #28]
 801180a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801180e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011810:	4293      	cmp	r3, r2
 8011812:	d028      	beq.n	8011866 <_dtoa_r+0xae6>
 8011814:	4649      	mov	r1, r9
 8011816:	2300      	movs	r3, #0
 8011818:	220a      	movs	r2, #10
 801181a:	4658      	mov	r0, fp
 801181c:	f000 f920 	bl	8011a60 <__multadd>
 8011820:	42af      	cmp	r7, r5
 8011822:	4681      	mov	r9, r0
 8011824:	f04f 0300 	mov.w	r3, #0
 8011828:	f04f 020a 	mov.w	r2, #10
 801182c:	4639      	mov	r1, r7
 801182e:	4658      	mov	r0, fp
 8011830:	d107      	bne.n	8011842 <_dtoa_r+0xac2>
 8011832:	f000 f915 	bl	8011a60 <__multadd>
 8011836:	4607      	mov	r7, r0
 8011838:	4605      	mov	r5, r0
 801183a:	9b07      	ldr	r3, [sp, #28]
 801183c:	3301      	adds	r3, #1
 801183e:	9307      	str	r3, [sp, #28]
 8011840:	e774      	b.n	801172c <_dtoa_r+0x9ac>
 8011842:	f000 f90d 	bl	8011a60 <__multadd>
 8011846:	4629      	mov	r1, r5
 8011848:	4607      	mov	r7, r0
 801184a:	2300      	movs	r3, #0
 801184c:	220a      	movs	r2, #10
 801184e:	4658      	mov	r0, fp
 8011850:	f000 f906 	bl	8011a60 <__multadd>
 8011854:	4605      	mov	r5, r0
 8011856:	e7f0      	b.n	801183a <_dtoa_r+0xaba>
 8011858:	9b00      	ldr	r3, [sp, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	bfcc      	ite	gt
 801185e:	461e      	movgt	r6, r3
 8011860:	2601      	movle	r6, #1
 8011862:	4456      	add	r6, sl
 8011864:	2700      	movs	r7, #0
 8011866:	4649      	mov	r1, r9
 8011868:	2201      	movs	r2, #1
 801186a:	4658      	mov	r0, fp
 801186c:	f000 faa4 	bl	8011db8 <__lshift>
 8011870:	4621      	mov	r1, r4
 8011872:	4681      	mov	r9, r0
 8011874:	f000 fb0c 	bl	8011e90 <__mcmp>
 8011878:	2800      	cmp	r0, #0
 801187a:	dcb0      	bgt.n	80117de <_dtoa_r+0xa5e>
 801187c:	d102      	bne.n	8011884 <_dtoa_r+0xb04>
 801187e:	f018 0f01 	tst.w	r8, #1
 8011882:	d1ac      	bne.n	80117de <_dtoa_r+0xa5e>
 8011884:	4633      	mov	r3, r6
 8011886:	461e      	mov	r6, r3
 8011888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801188c:	2a30      	cmp	r2, #48	@ 0x30
 801188e:	d0fa      	beq.n	8011886 <_dtoa_r+0xb06>
 8011890:	e5c2      	b.n	8011418 <_dtoa_r+0x698>
 8011892:	459a      	cmp	sl, r3
 8011894:	d1a4      	bne.n	80117e0 <_dtoa_r+0xa60>
 8011896:	9b04      	ldr	r3, [sp, #16]
 8011898:	3301      	adds	r3, #1
 801189a:	9304      	str	r3, [sp, #16]
 801189c:	2331      	movs	r3, #49	@ 0x31
 801189e:	f88a 3000 	strb.w	r3, [sl]
 80118a2:	e5b9      	b.n	8011418 <_dtoa_r+0x698>
 80118a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011904 <_dtoa_r+0xb84>
 80118aa:	b11b      	cbz	r3, 80118b4 <_dtoa_r+0xb34>
 80118ac:	f10a 0308 	add.w	r3, sl, #8
 80118b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80118b2:	6013      	str	r3, [r2, #0]
 80118b4:	4650      	mov	r0, sl
 80118b6:	b019      	add	sp, #100	@ 0x64
 80118b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118be:	2b01      	cmp	r3, #1
 80118c0:	f77f ae37 	ble.w	8011532 <_dtoa_r+0x7b2>
 80118c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80118c8:	2001      	movs	r0, #1
 80118ca:	e655      	b.n	8011578 <_dtoa_r+0x7f8>
 80118cc:	9b00      	ldr	r3, [sp, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f77f aed6 	ble.w	8011680 <_dtoa_r+0x900>
 80118d4:	4656      	mov	r6, sl
 80118d6:	4621      	mov	r1, r4
 80118d8:	4648      	mov	r0, r9
 80118da:	f7ff f9c6 	bl	8010c6a <quorem>
 80118de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80118e2:	f806 8b01 	strb.w	r8, [r6], #1
 80118e6:	9b00      	ldr	r3, [sp, #0]
 80118e8:	eba6 020a 	sub.w	r2, r6, sl
 80118ec:	4293      	cmp	r3, r2
 80118ee:	ddb3      	ble.n	8011858 <_dtoa_r+0xad8>
 80118f0:	4649      	mov	r1, r9
 80118f2:	2300      	movs	r3, #0
 80118f4:	220a      	movs	r2, #10
 80118f6:	4658      	mov	r0, fp
 80118f8:	f000 f8b2 	bl	8011a60 <__multadd>
 80118fc:	4681      	mov	r9, r0
 80118fe:	e7ea      	b.n	80118d6 <_dtoa_r+0xb56>
 8011900:	08018184 	.word	0x08018184
 8011904:	08018108 	.word	0x08018108

08011908 <_free_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4605      	mov	r5, r0
 801190c:	2900      	cmp	r1, #0
 801190e:	d041      	beq.n	8011994 <_free_r+0x8c>
 8011910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011914:	1f0c      	subs	r4, r1, #4
 8011916:	2b00      	cmp	r3, #0
 8011918:	bfb8      	it	lt
 801191a:	18e4      	addlt	r4, r4, r3
 801191c:	f7fe fb6a 	bl	800fff4 <__malloc_lock>
 8011920:	4a1d      	ldr	r2, [pc, #116]	@ (8011998 <_free_r+0x90>)
 8011922:	6813      	ldr	r3, [r2, #0]
 8011924:	b933      	cbnz	r3, 8011934 <_free_r+0x2c>
 8011926:	6063      	str	r3, [r4, #4]
 8011928:	6014      	str	r4, [r2, #0]
 801192a:	4628      	mov	r0, r5
 801192c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011930:	f7fe bb66 	b.w	8010000 <__malloc_unlock>
 8011934:	42a3      	cmp	r3, r4
 8011936:	d908      	bls.n	801194a <_free_r+0x42>
 8011938:	6820      	ldr	r0, [r4, #0]
 801193a:	1821      	adds	r1, r4, r0
 801193c:	428b      	cmp	r3, r1
 801193e:	bf01      	itttt	eq
 8011940:	6819      	ldreq	r1, [r3, #0]
 8011942:	685b      	ldreq	r3, [r3, #4]
 8011944:	1809      	addeq	r1, r1, r0
 8011946:	6021      	streq	r1, [r4, #0]
 8011948:	e7ed      	b.n	8011926 <_free_r+0x1e>
 801194a:	461a      	mov	r2, r3
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	b10b      	cbz	r3, 8011954 <_free_r+0x4c>
 8011950:	42a3      	cmp	r3, r4
 8011952:	d9fa      	bls.n	801194a <_free_r+0x42>
 8011954:	6811      	ldr	r1, [r2, #0]
 8011956:	1850      	adds	r0, r2, r1
 8011958:	42a0      	cmp	r0, r4
 801195a:	d10b      	bne.n	8011974 <_free_r+0x6c>
 801195c:	6820      	ldr	r0, [r4, #0]
 801195e:	4401      	add	r1, r0
 8011960:	1850      	adds	r0, r2, r1
 8011962:	4283      	cmp	r3, r0
 8011964:	6011      	str	r1, [r2, #0]
 8011966:	d1e0      	bne.n	801192a <_free_r+0x22>
 8011968:	6818      	ldr	r0, [r3, #0]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	6053      	str	r3, [r2, #4]
 801196e:	4408      	add	r0, r1
 8011970:	6010      	str	r0, [r2, #0]
 8011972:	e7da      	b.n	801192a <_free_r+0x22>
 8011974:	d902      	bls.n	801197c <_free_r+0x74>
 8011976:	230c      	movs	r3, #12
 8011978:	602b      	str	r3, [r5, #0]
 801197a:	e7d6      	b.n	801192a <_free_r+0x22>
 801197c:	6820      	ldr	r0, [r4, #0]
 801197e:	1821      	adds	r1, r4, r0
 8011980:	428b      	cmp	r3, r1
 8011982:	bf04      	itt	eq
 8011984:	6819      	ldreq	r1, [r3, #0]
 8011986:	685b      	ldreq	r3, [r3, #4]
 8011988:	6063      	str	r3, [r4, #4]
 801198a:	bf04      	itt	eq
 801198c:	1809      	addeq	r1, r1, r0
 801198e:	6021      	streq	r1, [r4, #0]
 8011990:	6054      	str	r4, [r2, #4]
 8011992:	e7ca      	b.n	801192a <_free_r+0x22>
 8011994:	bd38      	pop	{r3, r4, r5, pc}
 8011996:	bf00      	nop
 8011998:	20000bb4 	.word	0x20000bb4

0801199c <_Balloc>:
 801199c:	b570      	push	{r4, r5, r6, lr}
 801199e:	69c6      	ldr	r6, [r0, #28]
 80119a0:	4604      	mov	r4, r0
 80119a2:	460d      	mov	r5, r1
 80119a4:	b976      	cbnz	r6, 80119c4 <_Balloc+0x28>
 80119a6:	2010      	movs	r0, #16
 80119a8:	f7fe fa7a 	bl	800fea0 <malloc>
 80119ac:	4602      	mov	r2, r0
 80119ae:	61e0      	str	r0, [r4, #28]
 80119b0:	b920      	cbnz	r0, 80119bc <_Balloc+0x20>
 80119b2:	4b18      	ldr	r3, [pc, #96]	@ (8011a14 <_Balloc+0x78>)
 80119b4:	4818      	ldr	r0, [pc, #96]	@ (8011a18 <_Balloc+0x7c>)
 80119b6:	216b      	movs	r1, #107	@ 0x6b
 80119b8:	f000 ff66 	bl	8012888 <__assert_func>
 80119bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119c0:	6006      	str	r6, [r0, #0]
 80119c2:	60c6      	str	r6, [r0, #12]
 80119c4:	69e6      	ldr	r6, [r4, #28]
 80119c6:	68f3      	ldr	r3, [r6, #12]
 80119c8:	b183      	cbz	r3, 80119ec <_Balloc+0x50>
 80119ca:	69e3      	ldr	r3, [r4, #28]
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80119d2:	b9b8      	cbnz	r0, 8011a04 <_Balloc+0x68>
 80119d4:	2101      	movs	r1, #1
 80119d6:	fa01 f605 	lsl.w	r6, r1, r5
 80119da:	1d72      	adds	r2, r6, #5
 80119dc:	0092      	lsls	r2, r2, #2
 80119de:	4620      	mov	r0, r4
 80119e0:	f000 ff70 	bl	80128c4 <_calloc_r>
 80119e4:	b160      	cbz	r0, 8011a00 <_Balloc+0x64>
 80119e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80119ea:	e00e      	b.n	8011a0a <_Balloc+0x6e>
 80119ec:	2221      	movs	r2, #33	@ 0x21
 80119ee:	2104      	movs	r1, #4
 80119f0:	4620      	mov	r0, r4
 80119f2:	f000 ff67 	bl	80128c4 <_calloc_r>
 80119f6:	69e3      	ldr	r3, [r4, #28]
 80119f8:	60f0      	str	r0, [r6, #12]
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d1e4      	bne.n	80119ca <_Balloc+0x2e>
 8011a00:	2000      	movs	r0, #0
 8011a02:	bd70      	pop	{r4, r5, r6, pc}
 8011a04:	6802      	ldr	r2, [r0, #0]
 8011a06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a10:	e7f7      	b.n	8011a02 <_Balloc+0x66>
 8011a12:	bf00      	nop
 8011a14:	08018115 	.word	0x08018115
 8011a18:	08018195 	.word	0x08018195

08011a1c <_Bfree>:
 8011a1c:	b570      	push	{r4, r5, r6, lr}
 8011a1e:	69c6      	ldr	r6, [r0, #28]
 8011a20:	4605      	mov	r5, r0
 8011a22:	460c      	mov	r4, r1
 8011a24:	b976      	cbnz	r6, 8011a44 <_Bfree+0x28>
 8011a26:	2010      	movs	r0, #16
 8011a28:	f7fe fa3a 	bl	800fea0 <malloc>
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	61e8      	str	r0, [r5, #28]
 8011a30:	b920      	cbnz	r0, 8011a3c <_Bfree+0x20>
 8011a32:	4b09      	ldr	r3, [pc, #36]	@ (8011a58 <_Bfree+0x3c>)
 8011a34:	4809      	ldr	r0, [pc, #36]	@ (8011a5c <_Bfree+0x40>)
 8011a36:	218f      	movs	r1, #143	@ 0x8f
 8011a38:	f000 ff26 	bl	8012888 <__assert_func>
 8011a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a40:	6006      	str	r6, [r0, #0]
 8011a42:	60c6      	str	r6, [r0, #12]
 8011a44:	b13c      	cbz	r4, 8011a56 <_Bfree+0x3a>
 8011a46:	69eb      	ldr	r3, [r5, #28]
 8011a48:	6862      	ldr	r2, [r4, #4]
 8011a4a:	68db      	ldr	r3, [r3, #12]
 8011a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a50:	6021      	str	r1, [r4, #0]
 8011a52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011a56:	bd70      	pop	{r4, r5, r6, pc}
 8011a58:	08018115 	.word	0x08018115
 8011a5c:	08018195 	.word	0x08018195

08011a60 <__multadd>:
 8011a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a64:	690d      	ldr	r5, [r1, #16]
 8011a66:	4607      	mov	r7, r0
 8011a68:	460c      	mov	r4, r1
 8011a6a:	461e      	mov	r6, r3
 8011a6c:	f101 0c14 	add.w	ip, r1, #20
 8011a70:	2000      	movs	r0, #0
 8011a72:	f8dc 3000 	ldr.w	r3, [ip]
 8011a76:	b299      	uxth	r1, r3
 8011a78:	fb02 6101 	mla	r1, r2, r1, r6
 8011a7c:	0c1e      	lsrs	r6, r3, #16
 8011a7e:	0c0b      	lsrs	r3, r1, #16
 8011a80:	fb02 3306 	mla	r3, r2, r6, r3
 8011a84:	b289      	uxth	r1, r1
 8011a86:	3001      	adds	r0, #1
 8011a88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011a8c:	4285      	cmp	r5, r0
 8011a8e:	f84c 1b04 	str.w	r1, [ip], #4
 8011a92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011a96:	dcec      	bgt.n	8011a72 <__multadd+0x12>
 8011a98:	b30e      	cbz	r6, 8011ade <__multadd+0x7e>
 8011a9a:	68a3      	ldr	r3, [r4, #8]
 8011a9c:	42ab      	cmp	r3, r5
 8011a9e:	dc19      	bgt.n	8011ad4 <__multadd+0x74>
 8011aa0:	6861      	ldr	r1, [r4, #4]
 8011aa2:	4638      	mov	r0, r7
 8011aa4:	3101      	adds	r1, #1
 8011aa6:	f7ff ff79 	bl	801199c <_Balloc>
 8011aaa:	4680      	mov	r8, r0
 8011aac:	b928      	cbnz	r0, 8011aba <__multadd+0x5a>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8011ae4 <__multadd+0x84>)
 8011ab2:	480d      	ldr	r0, [pc, #52]	@ (8011ae8 <__multadd+0x88>)
 8011ab4:	21ba      	movs	r1, #186	@ 0xba
 8011ab6:	f000 fee7 	bl	8012888 <__assert_func>
 8011aba:	6922      	ldr	r2, [r4, #16]
 8011abc:	3202      	adds	r2, #2
 8011abe:	f104 010c 	add.w	r1, r4, #12
 8011ac2:	0092      	lsls	r2, r2, #2
 8011ac4:	300c      	adds	r0, #12
 8011ac6:	f7ff f8c2 	bl	8010c4e <memcpy>
 8011aca:	4621      	mov	r1, r4
 8011acc:	4638      	mov	r0, r7
 8011ace:	f7ff ffa5 	bl	8011a1c <_Bfree>
 8011ad2:	4644      	mov	r4, r8
 8011ad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ad8:	3501      	adds	r5, #1
 8011ada:	615e      	str	r6, [r3, #20]
 8011adc:	6125      	str	r5, [r4, #16]
 8011ade:	4620      	mov	r0, r4
 8011ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae4:	08018184 	.word	0x08018184
 8011ae8:	08018195 	.word	0x08018195

08011aec <__hi0bits>:
 8011aec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011af0:	4603      	mov	r3, r0
 8011af2:	bf36      	itet	cc
 8011af4:	0403      	lslcc	r3, r0, #16
 8011af6:	2000      	movcs	r0, #0
 8011af8:	2010      	movcc	r0, #16
 8011afa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011afe:	bf3c      	itt	cc
 8011b00:	021b      	lslcc	r3, r3, #8
 8011b02:	3008      	addcc	r0, #8
 8011b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011b08:	bf3c      	itt	cc
 8011b0a:	011b      	lslcc	r3, r3, #4
 8011b0c:	3004      	addcc	r0, #4
 8011b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b12:	bf3c      	itt	cc
 8011b14:	009b      	lslcc	r3, r3, #2
 8011b16:	3002      	addcc	r0, #2
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	db05      	blt.n	8011b28 <__hi0bits+0x3c>
 8011b1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011b20:	f100 0001 	add.w	r0, r0, #1
 8011b24:	bf08      	it	eq
 8011b26:	2020      	moveq	r0, #32
 8011b28:	4770      	bx	lr

08011b2a <__lo0bits>:
 8011b2a:	6803      	ldr	r3, [r0, #0]
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	f013 0007 	ands.w	r0, r3, #7
 8011b32:	d00b      	beq.n	8011b4c <__lo0bits+0x22>
 8011b34:	07d9      	lsls	r1, r3, #31
 8011b36:	d421      	bmi.n	8011b7c <__lo0bits+0x52>
 8011b38:	0798      	lsls	r0, r3, #30
 8011b3a:	bf49      	itett	mi
 8011b3c:	085b      	lsrmi	r3, r3, #1
 8011b3e:	089b      	lsrpl	r3, r3, #2
 8011b40:	2001      	movmi	r0, #1
 8011b42:	6013      	strmi	r3, [r2, #0]
 8011b44:	bf5c      	itt	pl
 8011b46:	6013      	strpl	r3, [r2, #0]
 8011b48:	2002      	movpl	r0, #2
 8011b4a:	4770      	bx	lr
 8011b4c:	b299      	uxth	r1, r3
 8011b4e:	b909      	cbnz	r1, 8011b54 <__lo0bits+0x2a>
 8011b50:	0c1b      	lsrs	r3, r3, #16
 8011b52:	2010      	movs	r0, #16
 8011b54:	b2d9      	uxtb	r1, r3
 8011b56:	b909      	cbnz	r1, 8011b5c <__lo0bits+0x32>
 8011b58:	3008      	adds	r0, #8
 8011b5a:	0a1b      	lsrs	r3, r3, #8
 8011b5c:	0719      	lsls	r1, r3, #28
 8011b5e:	bf04      	itt	eq
 8011b60:	091b      	lsreq	r3, r3, #4
 8011b62:	3004      	addeq	r0, #4
 8011b64:	0799      	lsls	r1, r3, #30
 8011b66:	bf04      	itt	eq
 8011b68:	089b      	lsreq	r3, r3, #2
 8011b6a:	3002      	addeq	r0, #2
 8011b6c:	07d9      	lsls	r1, r3, #31
 8011b6e:	d403      	bmi.n	8011b78 <__lo0bits+0x4e>
 8011b70:	085b      	lsrs	r3, r3, #1
 8011b72:	f100 0001 	add.w	r0, r0, #1
 8011b76:	d003      	beq.n	8011b80 <__lo0bits+0x56>
 8011b78:	6013      	str	r3, [r2, #0]
 8011b7a:	4770      	bx	lr
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	4770      	bx	lr
 8011b80:	2020      	movs	r0, #32
 8011b82:	4770      	bx	lr

08011b84 <__i2b>:
 8011b84:	b510      	push	{r4, lr}
 8011b86:	460c      	mov	r4, r1
 8011b88:	2101      	movs	r1, #1
 8011b8a:	f7ff ff07 	bl	801199c <_Balloc>
 8011b8e:	4602      	mov	r2, r0
 8011b90:	b928      	cbnz	r0, 8011b9e <__i2b+0x1a>
 8011b92:	4b05      	ldr	r3, [pc, #20]	@ (8011ba8 <__i2b+0x24>)
 8011b94:	4805      	ldr	r0, [pc, #20]	@ (8011bac <__i2b+0x28>)
 8011b96:	f240 1145 	movw	r1, #325	@ 0x145
 8011b9a:	f000 fe75 	bl	8012888 <__assert_func>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	6144      	str	r4, [r0, #20]
 8011ba2:	6103      	str	r3, [r0, #16]
 8011ba4:	bd10      	pop	{r4, pc}
 8011ba6:	bf00      	nop
 8011ba8:	08018184 	.word	0x08018184
 8011bac:	08018195 	.word	0x08018195

08011bb0 <__multiply>:
 8011bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	4614      	mov	r4, r2
 8011bb6:	690a      	ldr	r2, [r1, #16]
 8011bb8:	6923      	ldr	r3, [r4, #16]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	bfa8      	it	ge
 8011bbe:	4623      	movge	r3, r4
 8011bc0:	460f      	mov	r7, r1
 8011bc2:	bfa4      	itt	ge
 8011bc4:	460c      	movge	r4, r1
 8011bc6:	461f      	movge	r7, r3
 8011bc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011bcc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011bd0:	68a3      	ldr	r3, [r4, #8]
 8011bd2:	6861      	ldr	r1, [r4, #4]
 8011bd4:	eb0a 0609 	add.w	r6, sl, r9
 8011bd8:	42b3      	cmp	r3, r6
 8011bda:	b085      	sub	sp, #20
 8011bdc:	bfb8      	it	lt
 8011bde:	3101      	addlt	r1, #1
 8011be0:	f7ff fedc 	bl	801199c <_Balloc>
 8011be4:	b930      	cbnz	r0, 8011bf4 <__multiply+0x44>
 8011be6:	4602      	mov	r2, r0
 8011be8:	4b44      	ldr	r3, [pc, #272]	@ (8011cfc <__multiply+0x14c>)
 8011bea:	4845      	ldr	r0, [pc, #276]	@ (8011d00 <__multiply+0x150>)
 8011bec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011bf0:	f000 fe4a 	bl	8012888 <__assert_func>
 8011bf4:	f100 0514 	add.w	r5, r0, #20
 8011bf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011bfc:	462b      	mov	r3, r5
 8011bfe:	2200      	movs	r2, #0
 8011c00:	4543      	cmp	r3, r8
 8011c02:	d321      	bcc.n	8011c48 <__multiply+0x98>
 8011c04:	f107 0114 	add.w	r1, r7, #20
 8011c08:	f104 0214 	add.w	r2, r4, #20
 8011c0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011c10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011c14:	9302      	str	r3, [sp, #8]
 8011c16:	1b13      	subs	r3, r2, r4
 8011c18:	3b15      	subs	r3, #21
 8011c1a:	f023 0303 	bic.w	r3, r3, #3
 8011c1e:	3304      	adds	r3, #4
 8011c20:	f104 0715 	add.w	r7, r4, #21
 8011c24:	42ba      	cmp	r2, r7
 8011c26:	bf38      	it	cc
 8011c28:	2304      	movcc	r3, #4
 8011c2a:	9301      	str	r3, [sp, #4]
 8011c2c:	9b02      	ldr	r3, [sp, #8]
 8011c2e:	9103      	str	r1, [sp, #12]
 8011c30:	428b      	cmp	r3, r1
 8011c32:	d80c      	bhi.n	8011c4e <__multiply+0x9e>
 8011c34:	2e00      	cmp	r6, #0
 8011c36:	dd03      	ble.n	8011c40 <__multiply+0x90>
 8011c38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d05b      	beq.n	8011cf8 <__multiply+0x148>
 8011c40:	6106      	str	r6, [r0, #16]
 8011c42:	b005      	add	sp, #20
 8011c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c48:	f843 2b04 	str.w	r2, [r3], #4
 8011c4c:	e7d8      	b.n	8011c00 <__multiply+0x50>
 8011c4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011c52:	f1ba 0f00 	cmp.w	sl, #0
 8011c56:	d024      	beq.n	8011ca2 <__multiply+0xf2>
 8011c58:	f104 0e14 	add.w	lr, r4, #20
 8011c5c:	46a9      	mov	r9, r5
 8011c5e:	f04f 0c00 	mov.w	ip, #0
 8011c62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011c66:	f8d9 3000 	ldr.w	r3, [r9]
 8011c6a:	fa1f fb87 	uxth.w	fp, r7
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	fb0a 330b 	mla	r3, sl, fp, r3
 8011c74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011c78:	f8d9 7000 	ldr.w	r7, [r9]
 8011c7c:	4463      	add	r3, ip
 8011c7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011c82:	fb0a c70b 	mla	r7, sl, fp, ip
 8011c86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011c90:	4572      	cmp	r2, lr
 8011c92:	f849 3b04 	str.w	r3, [r9], #4
 8011c96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011c9a:	d8e2      	bhi.n	8011c62 <__multiply+0xb2>
 8011c9c:	9b01      	ldr	r3, [sp, #4]
 8011c9e:	f845 c003 	str.w	ip, [r5, r3]
 8011ca2:	9b03      	ldr	r3, [sp, #12]
 8011ca4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011ca8:	3104      	adds	r1, #4
 8011caa:	f1b9 0f00 	cmp.w	r9, #0
 8011cae:	d021      	beq.n	8011cf4 <__multiply+0x144>
 8011cb0:	682b      	ldr	r3, [r5, #0]
 8011cb2:	f104 0c14 	add.w	ip, r4, #20
 8011cb6:	46ae      	mov	lr, r5
 8011cb8:	f04f 0a00 	mov.w	sl, #0
 8011cbc:	f8bc b000 	ldrh.w	fp, [ip]
 8011cc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011cc4:	fb09 770b 	mla	r7, r9, fp, r7
 8011cc8:	4457      	add	r7, sl
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011cd0:	f84e 3b04 	str.w	r3, [lr], #4
 8011cd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011cd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011cdc:	f8be 3000 	ldrh.w	r3, [lr]
 8011ce0:	fb09 330a 	mla	r3, r9, sl, r3
 8011ce4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011ce8:	4562      	cmp	r2, ip
 8011cea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011cee:	d8e5      	bhi.n	8011cbc <__multiply+0x10c>
 8011cf0:	9f01      	ldr	r7, [sp, #4]
 8011cf2:	51eb      	str	r3, [r5, r7]
 8011cf4:	3504      	adds	r5, #4
 8011cf6:	e799      	b.n	8011c2c <__multiply+0x7c>
 8011cf8:	3e01      	subs	r6, #1
 8011cfa:	e79b      	b.n	8011c34 <__multiply+0x84>
 8011cfc:	08018184 	.word	0x08018184
 8011d00:	08018195 	.word	0x08018195

08011d04 <__pow5mult>:
 8011d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d08:	4615      	mov	r5, r2
 8011d0a:	f012 0203 	ands.w	r2, r2, #3
 8011d0e:	4607      	mov	r7, r0
 8011d10:	460e      	mov	r6, r1
 8011d12:	d007      	beq.n	8011d24 <__pow5mult+0x20>
 8011d14:	4c25      	ldr	r4, [pc, #148]	@ (8011dac <__pow5mult+0xa8>)
 8011d16:	3a01      	subs	r2, #1
 8011d18:	2300      	movs	r3, #0
 8011d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d1e:	f7ff fe9f 	bl	8011a60 <__multadd>
 8011d22:	4606      	mov	r6, r0
 8011d24:	10ad      	asrs	r5, r5, #2
 8011d26:	d03d      	beq.n	8011da4 <__pow5mult+0xa0>
 8011d28:	69fc      	ldr	r4, [r7, #28]
 8011d2a:	b97c      	cbnz	r4, 8011d4c <__pow5mult+0x48>
 8011d2c:	2010      	movs	r0, #16
 8011d2e:	f7fe f8b7 	bl	800fea0 <malloc>
 8011d32:	4602      	mov	r2, r0
 8011d34:	61f8      	str	r0, [r7, #28]
 8011d36:	b928      	cbnz	r0, 8011d44 <__pow5mult+0x40>
 8011d38:	4b1d      	ldr	r3, [pc, #116]	@ (8011db0 <__pow5mult+0xac>)
 8011d3a:	481e      	ldr	r0, [pc, #120]	@ (8011db4 <__pow5mult+0xb0>)
 8011d3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011d40:	f000 fda2 	bl	8012888 <__assert_func>
 8011d44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d48:	6004      	str	r4, [r0, #0]
 8011d4a:	60c4      	str	r4, [r0, #12]
 8011d4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011d50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d54:	b94c      	cbnz	r4, 8011d6a <__pow5mult+0x66>
 8011d56:	f240 2171 	movw	r1, #625	@ 0x271
 8011d5a:	4638      	mov	r0, r7
 8011d5c:	f7ff ff12 	bl	8011b84 <__i2b>
 8011d60:	2300      	movs	r3, #0
 8011d62:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d66:	4604      	mov	r4, r0
 8011d68:	6003      	str	r3, [r0, #0]
 8011d6a:	f04f 0900 	mov.w	r9, #0
 8011d6e:	07eb      	lsls	r3, r5, #31
 8011d70:	d50a      	bpl.n	8011d88 <__pow5mult+0x84>
 8011d72:	4631      	mov	r1, r6
 8011d74:	4622      	mov	r2, r4
 8011d76:	4638      	mov	r0, r7
 8011d78:	f7ff ff1a 	bl	8011bb0 <__multiply>
 8011d7c:	4631      	mov	r1, r6
 8011d7e:	4680      	mov	r8, r0
 8011d80:	4638      	mov	r0, r7
 8011d82:	f7ff fe4b 	bl	8011a1c <_Bfree>
 8011d86:	4646      	mov	r6, r8
 8011d88:	106d      	asrs	r5, r5, #1
 8011d8a:	d00b      	beq.n	8011da4 <__pow5mult+0xa0>
 8011d8c:	6820      	ldr	r0, [r4, #0]
 8011d8e:	b938      	cbnz	r0, 8011da0 <__pow5mult+0x9c>
 8011d90:	4622      	mov	r2, r4
 8011d92:	4621      	mov	r1, r4
 8011d94:	4638      	mov	r0, r7
 8011d96:	f7ff ff0b 	bl	8011bb0 <__multiply>
 8011d9a:	6020      	str	r0, [r4, #0]
 8011d9c:	f8c0 9000 	str.w	r9, [r0]
 8011da0:	4604      	mov	r4, r0
 8011da2:	e7e4      	b.n	8011d6e <__pow5mult+0x6a>
 8011da4:	4630      	mov	r0, r6
 8011da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011daa:	bf00      	nop
 8011dac:	080181f0 	.word	0x080181f0
 8011db0:	08018115 	.word	0x08018115
 8011db4:	08018195 	.word	0x08018195

08011db8 <__lshift>:
 8011db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dbc:	460c      	mov	r4, r1
 8011dbe:	6849      	ldr	r1, [r1, #4]
 8011dc0:	6923      	ldr	r3, [r4, #16]
 8011dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011dc6:	68a3      	ldr	r3, [r4, #8]
 8011dc8:	4607      	mov	r7, r0
 8011dca:	4691      	mov	r9, r2
 8011dcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011dd0:	f108 0601 	add.w	r6, r8, #1
 8011dd4:	42b3      	cmp	r3, r6
 8011dd6:	db0b      	blt.n	8011df0 <__lshift+0x38>
 8011dd8:	4638      	mov	r0, r7
 8011dda:	f7ff fddf 	bl	801199c <_Balloc>
 8011dde:	4605      	mov	r5, r0
 8011de0:	b948      	cbnz	r0, 8011df6 <__lshift+0x3e>
 8011de2:	4602      	mov	r2, r0
 8011de4:	4b28      	ldr	r3, [pc, #160]	@ (8011e88 <__lshift+0xd0>)
 8011de6:	4829      	ldr	r0, [pc, #164]	@ (8011e8c <__lshift+0xd4>)
 8011de8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011dec:	f000 fd4c 	bl	8012888 <__assert_func>
 8011df0:	3101      	adds	r1, #1
 8011df2:	005b      	lsls	r3, r3, #1
 8011df4:	e7ee      	b.n	8011dd4 <__lshift+0x1c>
 8011df6:	2300      	movs	r3, #0
 8011df8:	f100 0114 	add.w	r1, r0, #20
 8011dfc:	f100 0210 	add.w	r2, r0, #16
 8011e00:	4618      	mov	r0, r3
 8011e02:	4553      	cmp	r3, sl
 8011e04:	db33      	blt.n	8011e6e <__lshift+0xb6>
 8011e06:	6920      	ldr	r0, [r4, #16]
 8011e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e0c:	f104 0314 	add.w	r3, r4, #20
 8011e10:	f019 091f 	ands.w	r9, r9, #31
 8011e14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011e1c:	d02b      	beq.n	8011e76 <__lshift+0xbe>
 8011e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8011e22:	468a      	mov	sl, r1
 8011e24:	2200      	movs	r2, #0
 8011e26:	6818      	ldr	r0, [r3, #0]
 8011e28:	fa00 f009 	lsl.w	r0, r0, r9
 8011e2c:	4310      	orrs	r0, r2
 8011e2e:	f84a 0b04 	str.w	r0, [sl], #4
 8011e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e36:	459c      	cmp	ip, r3
 8011e38:	fa22 f20e 	lsr.w	r2, r2, lr
 8011e3c:	d8f3      	bhi.n	8011e26 <__lshift+0x6e>
 8011e3e:	ebac 0304 	sub.w	r3, ip, r4
 8011e42:	3b15      	subs	r3, #21
 8011e44:	f023 0303 	bic.w	r3, r3, #3
 8011e48:	3304      	adds	r3, #4
 8011e4a:	f104 0015 	add.w	r0, r4, #21
 8011e4e:	4584      	cmp	ip, r0
 8011e50:	bf38      	it	cc
 8011e52:	2304      	movcc	r3, #4
 8011e54:	50ca      	str	r2, [r1, r3]
 8011e56:	b10a      	cbz	r2, 8011e5c <__lshift+0xa4>
 8011e58:	f108 0602 	add.w	r6, r8, #2
 8011e5c:	3e01      	subs	r6, #1
 8011e5e:	4638      	mov	r0, r7
 8011e60:	612e      	str	r6, [r5, #16]
 8011e62:	4621      	mov	r1, r4
 8011e64:	f7ff fdda 	bl	8011a1c <_Bfree>
 8011e68:	4628      	mov	r0, r5
 8011e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e72:	3301      	adds	r3, #1
 8011e74:	e7c5      	b.n	8011e02 <__lshift+0x4a>
 8011e76:	3904      	subs	r1, #4
 8011e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011e80:	459c      	cmp	ip, r3
 8011e82:	d8f9      	bhi.n	8011e78 <__lshift+0xc0>
 8011e84:	e7ea      	b.n	8011e5c <__lshift+0xa4>
 8011e86:	bf00      	nop
 8011e88:	08018184 	.word	0x08018184
 8011e8c:	08018195 	.word	0x08018195

08011e90 <__mcmp>:
 8011e90:	690a      	ldr	r2, [r1, #16]
 8011e92:	4603      	mov	r3, r0
 8011e94:	6900      	ldr	r0, [r0, #16]
 8011e96:	1a80      	subs	r0, r0, r2
 8011e98:	b530      	push	{r4, r5, lr}
 8011e9a:	d10e      	bne.n	8011eba <__mcmp+0x2a>
 8011e9c:	3314      	adds	r3, #20
 8011e9e:	3114      	adds	r1, #20
 8011ea0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011ea4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011ea8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011eac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011eb0:	4295      	cmp	r5, r2
 8011eb2:	d003      	beq.n	8011ebc <__mcmp+0x2c>
 8011eb4:	d205      	bcs.n	8011ec2 <__mcmp+0x32>
 8011eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eba:	bd30      	pop	{r4, r5, pc}
 8011ebc:	42a3      	cmp	r3, r4
 8011ebe:	d3f3      	bcc.n	8011ea8 <__mcmp+0x18>
 8011ec0:	e7fb      	b.n	8011eba <__mcmp+0x2a>
 8011ec2:	2001      	movs	r0, #1
 8011ec4:	e7f9      	b.n	8011eba <__mcmp+0x2a>
	...

08011ec8 <__mdiff>:
 8011ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ecc:	4689      	mov	r9, r1
 8011ece:	4606      	mov	r6, r0
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	4648      	mov	r0, r9
 8011ed4:	4614      	mov	r4, r2
 8011ed6:	f7ff ffdb 	bl	8011e90 <__mcmp>
 8011eda:	1e05      	subs	r5, r0, #0
 8011edc:	d112      	bne.n	8011f04 <__mdiff+0x3c>
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f7ff fd5b 	bl	801199c <_Balloc>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	b928      	cbnz	r0, 8011ef6 <__mdiff+0x2e>
 8011eea:	4b3f      	ldr	r3, [pc, #252]	@ (8011fe8 <__mdiff+0x120>)
 8011eec:	f240 2137 	movw	r1, #567	@ 0x237
 8011ef0:	483e      	ldr	r0, [pc, #248]	@ (8011fec <__mdiff+0x124>)
 8011ef2:	f000 fcc9 	bl	8012888 <__assert_func>
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011efc:	4610      	mov	r0, r2
 8011efe:	b003      	add	sp, #12
 8011f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f04:	bfbc      	itt	lt
 8011f06:	464b      	movlt	r3, r9
 8011f08:	46a1      	movlt	r9, r4
 8011f0a:	4630      	mov	r0, r6
 8011f0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011f10:	bfba      	itte	lt
 8011f12:	461c      	movlt	r4, r3
 8011f14:	2501      	movlt	r5, #1
 8011f16:	2500      	movge	r5, #0
 8011f18:	f7ff fd40 	bl	801199c <_Balloc>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	b918      	cbnz	r0, 8011f28 <__mdiff+0x60>
 8011f20:	4b31      	ldr	r3, [pc, #196]	@ (8011fe8 <__mdiff+0x120>)
 8011f22:	f240 2145 	movw	r1, #581	@ 0x245
 8011f26:	e7e3      	b.n	8011ef0 <__mdiff+0x28>
 8011f28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011f2c:	6926      	ldr	r6, [r4, #16]
 8011f2e:	60c5      	str	r5, [r0, #12]
 8011f30:	f109 0310 	add.w	r3, r9, #16
 8011f34:	f109 0514 	add.w	r5, r9, #20
 8011f38:	f104 0e14 	add.w	lr, r4, #20
 8011f3c:	f100 0b14 	add.w	fp, r0, #20
 8011f40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011f44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011f48:	9301      	str	r3, [sp, #4]
 8011f4a:	46d9      	mov	r9, fp
 8011f4c:	f04f 0c00 	mov.w	ip, #0
 8011f50:	9b01      	ldr	r3, [sp, #4]
 8011f52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011f56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011f5a:	9301      	str	r3, [sp, #4]
 8011f5c:	fa1f f38a 	uxth.w	r3, sl
 8011f60:	4619      	mov	r1, r3
 8011f62:	b283      	uxth	r3, r0
 8011f64:	1acb      	subs	r3, r1, r3
 8011f66:	0c00      	lsrs	r0, r0, #16
 8011f68:	4463      	add	r3, ip
 8011f6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011f6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011f78:	4576      	cmp	r6, lr
 8011f7a:	f849 3b04 	str.w	r3, [r9], #4
 8011f7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011f82:	d8e5      	bhi.n	8011f50 <__mdiff+0x88>
 8011f84:	1b33      	subs	r3, r6, r4
 8011f86:	3b15      	subs	r3, #21
 8011f88:	f023 0303 	bic.w	r3, r3, #3
 8011f8c:	3415      	adds	r4, #21
 8011f8e:	3304      	adds	r3, #4
 8011f90:	42a6      	cmp	r6, r4
 8011f92:	bf38      	it	cc
 8011f94:	2304      	movcc	r3, #4
 8011f96:	441d      	add	r5, r3
 8011f98:	445b      	add	r3, fp
 8011f9a:	461e      	mov	r6, r3
 8011f9c:	462c      	mov	r4, r5
 8011f9e:	4544      	cmp	r4, r8
 8011fa0:	d30e      	bcc.n	8011fc0 <__mdiff+0xf8>
 8011fa2:	f108 0103 	add.w	r1, r8, #3
 8011fa6:	1b49      	subs	r1, r1, r5
 8011fa8:	f021 0103 	bic.w	r1, r1, #3
 8011fac:	3d03      	subs	r5, #3
 8011fae:	45a8      	cmp	r8, r5
 8011fb0:	bf38      	it	cc
 8011fb2:	2100      	movcc	r1, #0
 8011fb4:	440b      	add	r3, r1
 8011fb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011fba:	b191      	cbz	r1, 8011fe2 <__mdiff+0x11a>
 8011fbc:	6117      	str	r7, [r2, #16]
 8011fbe:	e79d      	b.n	8011efc <__mdiff+0x34>
 8011fc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8011fc4:	46e6      	mov	lr, ip
 8011fc6:	0c08      	lsrs	r0, r1, #16
 8011fc8:	fa1c fc81 	uxtah	ip, ip, r1
 8011fcc:	4471      	add	r1, lr
 8011fce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011fd2:	b289      	uxth	r1, r1
 8011fd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011fd8:	f846 1b04 	str.w	r1, [r6], #4
 8011fdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011fe0:	e7dd      	b.n	8011f9e <__mdiff+0xd6>
 8011fe2:	3f01      	subs	r7, #1
 8011fe4:	e7e7      	b.n	8011fb6 <__mdiff+0xee>
 8011fe6:	bf00      	nop
 8011fe8:	08018184 	.word	0x08018184
 8011fec:	08018195 	.word	0x08018195

08011ff0 <__d2b>:
 8011ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ff4:	460f      	mov	r7, r1
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	ec59 8b10 	vmov	r8, r9, d0
 8011ffc:	4616      	mov	r6, r2
 8011ffe:	f7ff fccd 	bl	801199c <_Balloc>
 8012002:	4604      	mov	r4, r0
 8012004:	b930      	cbnz	r0, 8012014 <__d2b+0x24>
 8012006:	4602      	mov	r2, r0
 8012008:	4b23      	ldr	r3, [pc, #140]	@ (8012098 <__d2b+0xa8>)
 801200a:	4824      	ldr	r0, [pc, #144]	@ (801209c <__d2b+0xac>)
 801200c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012010:	f000 fc3a 	bl	8012888 <__assert_func>
 8012014:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012018:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801201c:	b10d      	cbz	r5, 8012022 <__d2b+0x32>
 801201e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012022:	9301      	str	r3, [sp, #4]
 8012024:	f1b8 0300 	subs.w	r3, r8, #0
 8012028:	d023      	beq.n	8012072 <__d2b+0x82>
 801202a:	4668      	mov	r0, sp
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	f7ff fd7c 	bl	8011b2a <__lo0bits>
 8012032:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012036:	b1d0      	cbz	r0, 801206e <__d2b+0x7e>
 8012038:	f1c0 0320 	rsb	r3, r0, #32
 801203c:	fa02 f303 	lsl.w	r3, r2, r3
 8012040:	430b      	orrs	r3, r1
 8012042:	40c2      	lsrs	r2, r0
 8012044:	6163      	str	r3, [r4, #20]
 8012046:	9201      	str	r2, [sp, #4]
 8012048:	9b01      	ldr	r3, [sp, #4]
 801204a:	61a3      	str	r3, [r4, #24]
 801204c:	2b00      	cmp	r3, #0
 801204e:	bf0c      	ite	eq
 8012050:	2201      	moveq	r2, #1
 8012052:	2202      	movne	r2, #2
 8012054:	6122      	str	r2, [r4, #16]
 8012056:	b1a5      	cbz	r5, 8012082 <__d2b+0x92>
 8012058:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801205c:	4405      	add	r5, r0
 801205e:	603d      	str	r5, [r7, #0]
 8012060:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012064:	6030      	str	r0, [r6, #0]
 8012066:	4620      	mov	r0, r4
 8012068:	b003      	add	sp, #12
 801206a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801206e:	6161      	str	r1, [r4, #20]
 8012070:	e7ea      	b.n	8012048 <__d2b+0x58>
 8012072:	a801      	add	r0, sp, #4
 8012074:	f7ff fd59 	bl	8011b2a <__lo0bits>
 8012078:	9b01      	ldr	r3, [sp, #4]
 801207a:	6163      	str	r3, [r4, #20]
 801207c:	3020      	adds	r0, #32
 801207e:	2201      	movs	r2, #1
 8012080:	e7e8      	b.n	8012054 <__d2b+0x64>
 8012082:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012086:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801208a:	6038      	str	r0, [r7, #0]
 801208c:	6918      	ldr	r0, [r3, #16]
 801208e:	f7ff fd2d 	bl	8011aec <__hi0bits>
 8012092:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012096:	e7e5      	b.n	8012064 <__d2b+0x74>
 8012098:	08018184 	.word	0x08018184
 801209c:	08018195 	.word	0x08018195

080120a0 <__ssputs_r>:
 80120a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120a4:	688e      	ldr	r6, [r1, #8]
 80120a6:	461f      	mov	r7, r3
 80120a8:	42be      	cmp	r6, r7
 80120aa:	680b      	ldr	r3, [r1, #0]
 80120ac:	4682      	mov	sl, r0
 80120ae:	460c      	mov	r4, r1
 80120b0:	4690      	mov	r8, r2
 80120b2:	d82d      	bhi.n	8012110 <__ssputs_r+0x70>
 80120b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80120b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80120bc:	d026      	beq.n	801210c <__ssputs_r+0x6c>
 80120be:	6965      	ldr	r5, [r4, #20]
 80120c0:	6909      	ldr	r1, [r1, #16]
 80120c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120c6:	eba3 0901 	sub.w	r9, r3, r1
 80120ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120ce:	1c7b      	adds	r3, r7, #1
 80120d0:	444b      	add	r3, r9
 80120d2:	106d      	asrs	r5, r5, #1
 80120d4:	429d      	cmp	r5, r3
 80120d6:	bf38      	it	cc
 80120d8:	461d      	movcc	r5, r3
 80120da:	0553      	lsls	r3, r2, #21
 80120dc:	d527      	bpl.n	801212e <__ssputs_r+0x8e>
 80120de:	4629      	mov	r1, r5
 80120e0:	f7fd ff08 	bl	800fef4 <_malloc_r>
 80120e4:	4606      	mov	r6, r0
 80120e6:	b360      	cbz	r0, 8012142 <__ssputs_r+0xa2>
 80120e8:	6921      	ldr	r1, [r4, #16]
 80120ea:	464a      	mov	r2, r9
 80120ec:	f7fe fdaf 	bl	8010c4e <memcpy>
 80120f0:	89a3      	ldrh	r3, [r4, #12]
 80120f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80120f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120fa:	81a3      	strh	r3, [r4, #12]
 80120fc:	6126      	str	r6, [r4, #16]
 80120fe:	6165      	str	r5, [r4, #20]
 8012100:	444e      	add	r6, r9
 8012102:	eba5 0509 	sub.w	r5, r5, r9
 8012106:	6026      	str	r6, [r4, #0]
 8012108:	60a5      	str	r5, [r4, #8]
 801210a:	463e      	mov	r6, r7
 801210c:	42be      	cmp	r6, r7
 801210e:	d900      	bls.n	8012112 <__ssputs_r+0x72>
 8012110:	463e      	mov	r6, r7
 8012112:	6820      	ldr	r0, [r4, #0]
 8012114:	4632      	mov	r2, r6
 8012116:	4641      	mov	r1, r8
 8012118:	f000 fb9c 	bl	8012854 <memmove>
 801211c:	68a3      	ldr	r3, [r4, #8]
 801211e:	1b9b      	subs	r3, r3, r6
 8012120:	60a3      	str	r3, [r4, #8]
 8012122:	6823      	ldr	r3, [r4, #0]
 8012124:	4433      	add	r3, r6
 8012126:	6023      	str	r3, [r4, #0]
 8012128:	2000      	movs	r0, #0
 801212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801212e:	462a      	mov	r2, r5
 8012130:	f000 fbee 	bl	8012910 <_realloc_r>
 8012134:	4606      	mov	r6, r0
 8012136:	2800      	cmp	r0, #0
 8012138:	d1e0      	bne.n	80120fc <__ssputs_r+0x5c>
 801213a:	6921      	ldr	r1, [r4, #16]
 801213c:	4650      	mov	r0, sl
 801213e:	f7ff fbe3 	bl	8011908 <_free_r>
 8012142:	230c      	movs	r3, #12
 8012144:	f8ca 3000 	str.w	r3, [sl]
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801214e:	81a3      	strh	r3, [r4, #12]
 8012150:	f04f 30ff 	mov.w	r0, #4294967295
 8012154:	e7e9      	b.n	801212a <__ssputs_r+0x8a>
	...

08012158 <_svfiprintf_r>:
 8012158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801215c:	4698      	mov	r8, r3
 801215e:	898b      	ldrh	r3, [r1, #12]
 8012160:	061b      	lsls	r3, r3, #24
 8012162:	b09d      	sub	sp, #116	@ 0x74
 8012164:	4607      	mov	r7, r0
 8012166:	460d      	mov	r5, r1
 8012168:	4614      	mov	r4, r2
 801216a:	d510      	bpl.n	801218e <_svfiprintf_r+0x36>
 801216c:	690b      	ldr	r3, [r1, #16]
 801216e:	b973      	cbnz	r3, 801218e <_svfiprintf_r+0x36>
 8012170:	2140      	movs	r1, #64	@ 0x40
 8012172:	f7fd febf 	bl	800fef4 <_malloc_r>
 8012176:	6028      	str	r0, [r5, #0]
 8012178:	6128      	str	r0, [r5, #16]
 801217a:	b930      	cbnz	r0, 801218a <_svfiprintf_r+0x32>
 801217c:	230c      	movs	r3, #12
 801217e:	603b      	str	r3, [r7, #0]
 8012180:	f04f 30ff 	mov.w	r0, #4294967295
 8012184:	b01d      	add	sp, #116	@ 0x74
 8012186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801218a:	2340      	movs	r3, #64	@ 0x40
 801218c:	616b      	str	r3, [r5, #20]
 801218e:	2300      	movs	r3, #0
 8012190:	9309      	str	r3, [sp, #36]	@ 0x24
 8012192:	2320      	movs	r3, #32
 8012194:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012198:	f8cd 800c 	str.w	r8, [sp, #12]
 801219c:	2330      	movs	r3, #48	@ 0x30
 801219e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801233c <_svfiprintf_r+0x1e4>
 80121a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80121a6:	f04f 0901 	mov.w	r9, #1
 80121aa:	4623      	mov	r3, r4
 80121ac:	469a      	mov	sl, r3
 80121ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121b2:	b10a      	cbz	r2, 80121b8 <_svfiprintf_r+0x60>
 80121b4:	2a25      	cmp	r2, #37	@ 0x25
 80121b6:	d1f9      	bne.n	80121ac <_svfiprintf_r+0x54>
 80121b8:	ebba 0b04 	subs.w	fp, sl, r4
 80121bc:	d00b      	beq.n	80121d6 <_svfiprintf_r+0x7e>
 80121be:	465b      	mov	r3, fp
 80121c0:	4622      	mov	r2, r4
 80121c2:	4629      	mov	r1, r5
 80121c4:	4638      	mov	r0, r7
 80121c6:	f7ff ff6b 	bl	80120a0 <__ssputs_r>
 80121ca:	3001      	adds	r0, #1
 80121cc:	f000 80a7 	beq.w	801231e <_svfiprintf_r+0x1c6>
 80121d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121d2:	445a      	add	r2, fp
 80121d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80121d6:	f89a 3000 	ldrb.w	r3, [sl]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	f000 809f 	beq.w	801231e <_svfiprintf_r+0x1c6>
 80121e0:	2300      	movs	r3, #0
 80121e2:	f04f 32ff 	mov.w	r2, #4294967295
 80121e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121ea:	f10a 0a01 	add.w	sl, sl, #1
 80121ee:	9304      	str	r3, [sp, #16]
 80121f0:	9307      	str	r3, [sp, #28]
 80121f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80121f8:	4654      	mov	r4, sl
 80121fa:	2205      	movs	r2, #5
 80121fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012200:	484e      	ldr	r0, [pc, #312]	@ (801233c <_svfiprintf_r+0x1e4>)
 8012202:	f7ed fffd 	bl	8000200 <memchr>
 8012206:	9a04      	ldr	r2, [sp, #16]
 8012208:	b9d8      	cbnz	r0, 8012242 <_svfiprintf_r+0xea>
 801220a:	06d0      	lsls	r0, r2, #27
 801220c:	bf44      	itt	mi
 801220e:	2320      	movmi	r3, #32
 8012210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012214:	0711      	lsls	r1, r2, #28
 8012216:	bf44      	itt	mi
 8012218:	232b      	movmi	r3, #43	@ 0x2b
 801221a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801221e:	f89a 3000 	ldrb.w	r3, [sl]
 8012222:	2b2a      	cmp	r3, #42	@ 0x2a
 8012224:	d015      	beq.n	8012252 <_svfiprintf_r+0xfa>
 8012226:	9a07      	ldr	r2, [sp, #28]
 8012228:	4654      	mov	r4, sl
 801222a:	2000      	movs	r0, #0
 801222c:	f04f 0c0a 	mov.w	ip, #10
 8012230:	4621      	mov	r1, r4
 8012232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012236:	3b30      	subs	r3, #48	@ 0x30
 8012238:	2b09      	cmp	r3, #9
 801223a:	d94b      	bls.n	80122d4 <_svfiprintf_r+0x17c>
 801223c:	b1b0      	cbz	r0, 801226c <_svfiprintf_r+0x114>
 801223e:	9207      	str	r2, [sp, #28]
 8012240:	e014      	b.n	801226c <_svfiprintf_r+0x114>
 8012242:	eba0 0308 	sub.w	r3, r0, r8
 8012246:	fa09 f303 	lsl.w	r3, r9, r3
 801224a:	4313      	orrs	r3, r2
 801224c:	9304      	str	r3, [sp, #16]
 801224e:	46a2      	mov	sl, r4
 8012250:	e7d2      	b.n	80121f8 <_svfiprintf_r+0xa0>
 8012252:	9b03      	ldr	r3, [sp, #12]
 8012254:	1d19      	adds	r1, r3, #4
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	9103      	str	r1, [sp, #12]
 801225a:	2b00      	cmp	r3, #0
 801225c:	bfbb      	ittet	lt
 801225e:	425b      	neglt	r3, r3
 8012260:	f042 0202 	orrlt.w	r2, r2, #2
 8012264:	9307      	strge	r3, [sp, #28]
 8012266:	9307      	strlt	r3, [sp, #28]
 8012268:	bfb8      	it	lt
 801226a:	9204      	strlt	r2, [sp, #16]
 801226c:	7823      	ldrb	r3, [r4, #0]
 801226e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012270:	d10a      	bne.n	8012288 <_svfiprintf_r+0x130>
 8012272:	7863      	ldrb	r3, [r4, #1]
 8012274:	2b2a      	cmp	r3, #42	@ 0x2a
 8012276:	d132      	bne.n	80122de <_svfiprintf_r+0x186>
 8012278:	9b03      	ldr	r3, [sp, #12]
 801227a:	1d1a      	adds	r2, r3, #4
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	9203      	str	r2, [sp, #12]
 8012280:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012284:	3402      	adds	r4, #2
 8012286:	9305      	str	r3, [sp, #20]
 8012288:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801234c <_svfiprintf_r+0x1f4>
 801228c:	7821      	ldrb	r1, [r4, #0]
 801228e:	2203      	movs	r2, #3
 8012290:	4650      	mov	r0, sl
 8012292:	f7ed ffb5 	bl	8000200 <memchr>
 8012296:	b138      	cbz	r0, 80122a8 <_svfiprintf_r+0x150>
 8012298:	9b04      	ldr	r3, [sp, #16]
 801229a:	eba0 000a 	sub.w	r0, r0, sl
 801229e:	2240      	movs	r2, #64	@ 0x40
 80122a0:	4082      	lsls	r2, r0
 80122a2:	4313      	orrs	r3, r2
 80122a4:	3401      	adds	r4, #1
 80122a6:	9304      	str	r3, [sp, #16]
 80122a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122ac:	4824      	ldr	r0, [pc, #144]	@ (8012340 <_svfiprintf_r+0x1e8>)
 80122ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80122b2:	2206      	movs	r2, #6
 80122b4:	f7ed ffa4 	bl	8000200 <memchr>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d036      	beq.n	801232a <_svfiprintf_r+0x1d2>
 80122bc:	4b21      	ldr	r3, [pc, #132]	@ (8012344 <_svfiprintf_r+0x1ec>)
 80122be:	bb1b      	cbnz	r3, 8012308 <_svfiprintf_r+0x1b0>
 80122c0:	9b03      	ldr	r3, [sp, #12]
 80122c2:	3307      	adds	r3, #7
 80122c4:	f023 0307 	bic.w	r3, r3, #7
 80122c8:	3308      	adds	r3, #8
 80122ca:	9303      	str	r3, [sp, #12]
 80122cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122ce:	4433      	add	r3, r6
 80122d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80122d2:	e76a      	b.n	80121aa <_svfiprintf_r+0x52>
 80122d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80122d8:	460c      	mov	r4, r1
 80122da:	2001      	movs	r0, #1
 80122dc:	e7a8      	b.n	8012230 <_svfiprintf_r+0xd8>
 80122de:	2300      	movs	r3, #0
 80122e0:	3401      	adds	r4, #1
 80122e2:	9305      	str	r3, [sp, #20]
 80122e4:	4619      	mov	r1, r3
 80122e6:	f04f 0c0a 	mov.w	ip, #10
 80122ea:	4620      	mov	r0, r4
 80122ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122f0:	3a30      	subs	r2, #48	@ 0x30
 80122f2:	2a09      	cmp	r2, #9
 80122f4:	d903      	bls.n	80122fe <_svfiprintf_r+0x1a6>
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d0c6      	beq.n	8012288 <_svfiprintf_r+0x130>
 80122fa:	9105      	str	r1, [sp, #20]
 80122fc:	e7c4      	b.n	8012288 <_svfiprintf_r+0x130>
 80122fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012302:	4604      	mov	r4, r0
 8012304:	2301      	movs	r3, #1
 8012306:	e7f0      	b.n	80122ea <_svfiprintf_r+0x192>
 8012308:	ab03      	add	r3, sp, #12
 801230a:	9300      	str	r3, [sp, #0]
 801230c:	462a      	mov	r2, r5
 801230e:	4b0e      	ldr	r3, [pc, #56]	@ (8012348 <_svfiprintf_r+0x1f0>)
 8012310:	a904      	add	r1, sp, #16
 8012312:	4638      	mov	r0, r7
 8012314:	f7fd ff1a 	bl	801014c <_printf_float>
 8012318:	1c42      	adds	r2, r0, #1
 801231a:	4606      	mov	r6, r0
 801231c:	d1d6      	bne.n	80122cc <_svfiprintf_r+0x174>
 801231e:	89ab      	ldrh	r3, [r5, #12]
 8012320:	065b      	lsls	r3, r3, #25
 8012322:	f53f af2d 	bmi.w	8012180 <_svfiprintf_r+0x28>
 8012326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012328:	e72c      	b.n	8012184 <_svfiprintf_r+0x2c>
 801232a:	ab03      	add	r3, sp, #12
 801232c:	9300      	str	r3, [sp, #0]
 801232e:	462a      	mov	r2, r5
 8012330:	4b05      	ldr	r3, [pc, #20]	@ (8012348 <_svfiprintf_r+0x1f0>)
 8012332:	a904      	add	r1, sp, #16
 8012334:	4638      	mov	r0, r7
 8012336:	f7fe f9a1 	bl	801067c <_printf_i>
 801233a:	e7ed      	b.n	8012318 <_svfiprintf_r+0x1c0>
 801233c:	080182f0 	.word	0x080182f0
 8012340:	080182fa 	.word	0x080182fa
 8012344:	0801014d 	.word	0x0801014d
 8012348:	080120a1 	.word	0x080120a1
 801234c:	080182f6 	.word	0x080182f6

08012350 <__sfputc_r>:
 8012350:	6893      	ldr	r3, [r2, #8]
 8012352:	3b01      	subs	r3, #1
 8012354:	2b00      	cmp	r3, #0
 8012356:	b410      	push	{r4}
 8012358:	6093      	str	r3, [r2, #8]
 801235a:	da08      	bge.n	801236e <__sfputc_r+0x1e>
 801235c:	6994      	ldr	r4, [r2, #24]
 801235e:	42a3      	cmp	r3, r4
 8012360:	db01      	blt.n	8012366 <__sfputc_r+0x16>
 8012362:	290a      	cmp	r1, #10
 8012364:	d103      	bne.n	801236e <__sfputc_r+0x1e>
 8012366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801236a:	f000 b9df 	b.w	801272c <__swbuf_r>
 801236e:	6813      	ldr	r3, [r2, #0]
 8012370:	1c58      	adds	r0, r3, #1
 8012372:	6010      	str	r0, [r2, #0]
 8012374:	7019      	strb	r1, [r3, #0]
 8012376:	4608      	mov	r0, r1
 8012378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801237c:	4770      	bx	lr

0801237e <__sfputs_r>:
 801237e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012380:	4606      	mov	r6, r0
 8012382:	460f      	mov	r7, r1
 8012384:	4614      	mov	r4, r2
 8012386:	18d5      	adds	r5, r2, r3
 8012388:	42ac      	cmp	r4, r5
 801238a:	d101      	bne.n	8012390 <__sfputs_r+0x12>
 801238c:	2000      	movs	r0, #0
 801238e:	e007      	b.n	80123a0 <__sfputs_r+0x22>
 8012390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012394:	463a      	mov	r2, r7
 8012396:	4630      	mov	r0, r6
 8012398:	f7ff ffda 	bl	8012350 <__sfputc_r>
 801239c:	1c43      	adds	r3, r0, #1
 801239e:	d1f3      	bne.n	8012388 <__sfputs_r+0xa>
 80123a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080123a4 <_vfiprintf_r>:
 80123a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a8:	460d      	mov	r5, r1
 80123aa:	b09d      	sub	sp, #116	@ 0x74
 80123ac:	4614      	mov	r4, r2
 80123ae:	4698      	mov	r8, r3
 80123b0:	4606      	mov	r6, r0
 80123b2:	b118      	cbz	r0, 80123bc <_vfiprintf_r+0x18>
 80123b4:	6a03      	ldr	r3, [r0, #32]
 80123b6:	b90b      	cbnz	r3, 80123bc <_vfiprintf_r+0x18>
 80123b8:	f7fe fb0c 	bl	80109d4 <__sinit>
 80123bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80123be:	07d9      	lsls	r1, r3, #31
 80123c0:	d405      	bmi.n	80123ce <_vfiprintf_r+0x2a>
 80123c2:	89ab      	ldrh	r3, [r5, #12]
 80123c4:	059a      	lsls	r2, r3, #22
 80123c6:	d402      	bmi.n	80123ce <_vfiprintf_r+0x2a>
 80123c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123ca:	f7fe fc3e 	bl	8010c4a <__retarget_lock_acquire_recursive>
 80123ce:	89ab      	ldrh	r3, [r5, #12]
 80123d0:	071b      	lsls	r3, r3, #28
 80123d2:	d501      	bpl.n	80123d8 <_vfiprintf_r+0x34>
 80123d4:	692b      	ldr	r3, [r5, #16]
 80123d6:	b99b      	cbnz	r3, 8012400 <_vfiprintf_r+0x5c>
 80123d8:	4629      	mov	r1, r5
 80123da:	4630      	mov	r0, r6
 80123dc:	f000 f9e4 	bl	80127a8 <__swsetup_r>
 80123e0:	b170      	cbz	r0, 8012400 <_vfiprintf_r+0x5c>
 80123e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80123e4:	07dc      	lsls	r4, r3, #31
 80123e6:	d504      	bpl.n	80123f2 <_vfiprintf_r+0x4e>
 80123e8:	f04f 30ff 	mov.w	r0, #4294967295
 80123ec:	b01d      	add	sp, #116	@ 0x74
 80123ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f2:	89ab      	ldrh	r3, [r5, #12]
 80123f4:	0598      	lsls	r0, r3, #22
 80123f6:	d4f7      	bmi.n	80123e8 <_vfiprintf_r+0x44>
 80123f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123fa:	f7fe fc27 	bl	8010c4c <__retarget_lock_release_recursive>
 80123fe:	e7f3      	b.n	80123e8 <_vfiprintf_r+0x44>
 8012400:	2300      	movs	r3, #0
 8012402:	9309      	str	r3, [sp, #36]	@ 0x24
 8012404:	2320      	movs	r3, #32
 8012406:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801240a:	f8cd 800c 	str.w	r8, [sp, #12]
 801240e:	2330      	movs	r3, #48	@ 0x30
 8012410:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80125c0 <_vfiprintf_r+0x21c>
 8012414:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012418:	f04f 0901 	mov.w	r9, #1
 801241c:	4623      	mov	r3, r4
 801241e:	469a      	mov	sl, r3
 8012420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012424:	b10a      	cbz	r2, 801242a <_vfiprintf_r+0x86>
 8012426:	2a25      	cmp	r2, #37	@ 0x25
 8012428:	d1f9      	bne.n	801241e <_vfiprintf_r+0x7a>
 801242a:	ebba 0b04 	subs.w	fp, sl, r4
 801242e:	d00b      	beq.n	8012448 <_vfiprintf_r+0xa4>
 8012430:	465b      	mov	r3, fp
 8012432:	4622      	mov	r2, r4
 8012434:	4629      	mov	r1, r5
 8012436:	4630      	mov	r0, r6
 8012438:	f7ff ffa1 	bl	801237e <__sfputs_r>
 801243c:	3001      	adds	r0, #1
 801243e:	f000 80a7 	beq.w	8012590 <_vfiprintf_r+0x1ec>
 8012442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012444:	445a      	add	r2, fp
 8012446:	9209      	str	r2, [sp, #36]	@ 0x24
 8012448:	f89a 3000 	ldrb.w	r3, [sl]
 801244c:	2b00      	cmp	r3, #0
 801244e:	f000 809f 	beq.w	8012590 <_vfiprintf_r+0x1ec>
 8012452:	2300      	movs	r3, #0
 8012454:	f04f 32ff 	mov.w	r2, #4294967295
 8012458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801245c:	f10a 0a01 	add.w	sl, sl, #1
 8012460:	9304      	str	r3, [sp, #16]
 8012462:	9307      	str	r3, [sp, #28]
 8012464:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012468:	931a      	str	r3, [sp, #104]	@ 0x68
 801246a:	4654      	mov	r4, sl
 801246c:	2205      	movs	r2, #5
 801246e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012472:	4853      	ldr	r0, [pc, #332]	@ (80125c0 <_vfiprintf_r+0x21c>)
 8012474:	f7ed fec4 	bl	8000200 <memchr>
 8012478:	9a04      	ldr	r2, [sp, #16]
 801247a:	b9d8      	cbnz	r0, 80124b4 <_vfiprintf_r+0x110>
 801247c:	06d1      	lsls	r1, r2, #27
 801247e:	bf44      	itt	mi
 8012480:	2320      	movmi	r3, #32
 8012482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012486:	0713      	lsls	r3, r2, #28
 8012488:	bf44      	itt	mi
 801248a:	232b      	movmi	r3, #43	@ 0x2b
 801248c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012490:	f89a 3000 	ldrb.w	r3, [sl]
 8012494:	2b2a      	cmp	r3, #42	@ 0x2a
 8012496:	d015      	beq.n	80124c4 <_vfiprintf_r+0x120>
 8012498:	9a07      	ldr	r2, [sp, #28]
 801249a:	4654      	mov	r4, sl
 801249c:	2000      	movs	r0, #0
 801249e:	f04f 0c0a 	mov.w	ip, #10
 80124a2:	4621      	mov	r1, r4
 80124a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124a8:	3b30      	subs	r3, #48	@ 0x30
 80124aa:	2b09      	cmp	r3, #9
 80124ac:	d94b      	bls.n	8012546 <_vfiprintf_r+0x1a2>
 80124ae:	b1b0      	cbz	r0, 80124de <_vfiprintf_r+0x13a>
 80124b0:	9207      	str	r2, [sp, #28]
 80124b2:	e014      	b.n	80124de <_vfiprintf_r+0x13a>
 80124b4:	eba0 0308 	sub.w	r3, r0, r8
 80124b8:	fa09 f303 	lsl.w	r3, r9, r3
 80124bc:	4313      	orrs	r3, r2
 80124be:	9304      	str	r3, [sp, #16]
 80124c0:	46a2      	mov	sl, r4
 80124c2:	e7d2      	b.n	801246a <_vfiprintf_r+0xc6>
 80124c4:	9b03      	ldr	r3, [sp, #12]
 80124c6:	1d19      	adds	r1, r3, #4
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	9103      	str	r1, [sp, #12]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	bfbb      	ittet	lt
 80124d0:	425b      	neglt	r3, r3
 80124d2:	f042 0202 	orrlt.w	r2, r2, #2
 80124d6:	9307      	strge	r3, [sp, #28]
 80124d8:	9307      	strlt	r3, [sp, #28]
 80124da:	bfb8      	it	lt
 80124dc:	9204      	strlt	r2, [sp, #16]
 80124de:	7823      	ldrb	r3, [r4, #0]
 80124e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80124e2:	d10a      	bne.n	80124fa <_vfiprintf_r+0x156>
 80124e4:	7863      	ldrb	r3, [r4, #1]
 80124e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80124e8:	d132      	bne.n	8012550 <_vfiprintf_r+0x1ac>
 80124ea:	9b03      	ldr	r3, [sp, #12]
 80124ec:	1d1a      	adds	r2, r3, #4
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	9203      	str	r2, [sp, #12]
 80124f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80124f6:	3402      	adds	r4, #2
 80124f8:	9305      	str	r3, [sp, #20]
 80124fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80125d0 <_vfiprintf_r+0x22c>
 80124fe:	7821      	ldrb	r1, [r4, #0]
 8012500:	2203      	movs	r2, #3
 8012502:	4650      	mov	r0, sl
 8012504:	f7ed fe7c 	bl	8000200 <memchr>
 8012508:	b138      	cbz	r0, 801251a <_vfiprintf_r+0x176>
 801250a:	9b04      	ldr	r3, [sp, #16]
 801250c:	eba0 000a 	sub.w	r0, r0, sl
 8012510:	2240      	movs	r2, #64	@ 0x40
 8012512:	4082      	lsls	r2, r0
 8012514:	4313      	orrs	r3, r2
 8012516:	3401      	adds	r4, #1
 8012518:	9304      	str	r3, [sp, #16]
 801251a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801251e:	4829      	ldr	r0, [pc, #164]	@ (80125c4 <_vfiprintf_r+0x220>)
 8012520:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012524:	2206      	movs	r2, #6
 8012526:	f7ed fe6b 	bl	8000200 <memchr>
 801252a:	2800      	cmp	r0, #0
 801252c:	d03f      	beq.n	80125ae <_vfiprintf_r+0x20a>
 801252e:	4b26      	ldr	r3, [pc, #152]	@ (80125c8 <_vfiprintf_r+0x224>)
 8012530:	bb1b      	cbnz	r3, 801257a <_vfiprintf_r+0x1d6>
 8012532:	9b03      	ldr	r3, [sp, #12]
 8012534:	3307      	adds	r3, #7
 8012536:	f023 0307 	bic.w	r3, r3, #7
 801253a:	3308      	adds	r3, #8
 801253c:	9303      	str	r3, [sp, #12]
 801253e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012540:	443b      	add	r3, r7
 8012542:	9309      	str	r3, [sp, #36]	@ 0x24
 8012544:	e76a      	b.n	801241c <_vfiprintf_r+0x78>
 8012546:	fb0c 3202 	mla	r2, ip, r2, r3
 801254a:	460c      	mov	r4, r1
 801254c:	2001      	movs	r0, #1
 801254e:	e7a8      	b.n	80124a2 <_vfiprintf_r+0xfe>
 8012550:	2300      	movs	r3, #0
 8012552:	3401      	adds	r4, #1
 8012554:	9305      	str	r3, [sp, #20]
 8012556:	4619      	mov	r1, r3
 8012558:	f04f 0c0a 	mov.w	ip, #10
 801255c:	4620      	mov	r0, r4
 801255e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012562:	3a30      	subs	r2, #48	@ 0x30
 8012564:	2a09      	cmp	r2, #9
 8012566:	d903      	bls.n	8012570 <_vfiprintf_r+0x1cc>
 8012568:	2b00      	cmp	r3, #0
 801256a:	d0c6      	beq.n	80124fa <_vfiprintf_r+0x156>
 801256c:	9105      	str	r1, [sp, #20]
 801256e:	e7c4      	b.n	80124fa <_vfiprintf_r+0x156>
 8012570:	fb0c 2101 	mla	r1, ip, r1, r2
 8012574:	4604      	mov	r4, r0
 8012576:	2301      	movs	r3, #1
 8012578:	e7f0      	b.n	801255c <_vfiprintf_r+0x1b8>
 801257a:	ab03      	add	r3, sp, #12
 801257c:	9300      	str	r3, [sp, #0]
 801257e:	462a      	mov	r2, r5
 8012580:	4b12      	ldr	r3, [pc, #72]	@ (80125cc <_vfiprintf_r+0x228>)
 8012582:	a904      	add	r1, sp, #16
 8012584:	4630      	mov	r0, r6
 8012586:	f7fd fde1 	bl	801014c <_printf_float>
 801258a:	4607      	mov	r7, r0
 801258c:	1c78      	adds	r0, r7, #1
 801258e:	d1d6      	bne.n	801253e <_vfiprintf_r+0x19a>
 8012590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012592:	07d9      	lsls	r1, r3, #31
 8012594:	d405      	bmi.n	80125a2 <_vfiprintf_r+0x1fe>
 8012596:	89ab      	ldrh	r3, [r5, #12]
 8012598:	059a      	lsls	r2, r3, #22
 801259a:	d402      	bmi.n	80125a2 <_vfiprintf_r+0x1fe>
 801259c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801259e:	f7fe fb55 	bl	8010c4c <__retarget_lock_release_recursive>
 80125a2:	89ab      	ldrh	r3, [r5, #12]
 80125a4:	065b      	lsls	r3, r3, #25
 80125a6:	f53f af1f 	bmi.w	80123e8 <_vfiprintf_r+0x44>
 80125aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125ac:	e71e      	b.n	80123ec <_vfiprintf_r+0x48>
 80125ae:	ab03      	add	r3, sp, #12
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	462a      	mov	r2, r5
 80125b4:	4b05      	ldr	r3, [pc, #20]	@ (80125cc <_vfiprintf_r+0x228>)
 80125b6:	a904      	add	r1, sp, #16
 80125b8:	4630      	mov	r0, r6
 80125ba:	f7fe f85f 	bl	801067c <_printf_i>
 80125be:	e7e4      	b.n	801258a <_vfiprintf_r+0x1e6>
 80125c0:	080182f0 	.word	0x080182f0
 80125c4:	080182fa 	.word	0x080182fa
 80125c8:	0801014d 	.word	0x0801014d
 80125cc:	0801237f 	.word	0x0801237f
 80125d0:	080182f6 	.word	0x080182f6

080125d4 <__sflush_r>:
 80125d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80125d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125dc:	0716      	lsls	r6, r2, #28
 80125de:	4605      	mov	r5, r0
 80125e0:	460c      	mov	r4, r1
 80125e2:	d454      	bmi.n	801268e <__sflush_r+0xba>
 80125e4:	684b      	ldr	r3, [r1, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	dc02      	bgt.n	80125f0 <__sflush_r+0x1c>
 80125ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	dd48      	ble.n	8012682 <__sflush_r+0xae>
 80125f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80125f2:	2e00      	cmp	r6, #0
 80125f4:	d045      	beq.n	8012682 <__sflush_r+0xae>
 80125f6:	2300      	movs	r3, #0
 80125f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80125fc:	682f      	ldr	r7, [r5, #0]
 80125fe:	6a21      	ldr	r1, [r4, #32]
 8012600:	602b      	str	r3, [r5, #0]
 8012602:	d030      	beq.n	8012666 <__sflush_r+0x92>
 8012604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012606:	89a3      	ldrh	r3, [r4, #12]
 8012608:	0759      	lsls	r1, r3, #29
 801260a:	d505      	bpl.n	8012618 <__sflush_r+0x44>
 801260c:	6863      	ldr	r3, [r4, #4]
 801260e:	1ad2      	subs	r2, r2, r3
 8012610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012612:	b10b      	cbz	r3, 8012618 <__sflush_r+0x44>
 8012614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012616:	1ad2      	subs	r2, r2, r3
 8012618:	2300      	movs	r3, #0
 801261a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801261c:	6a21      	ldr	r1, [r4, #32]
 801261e:	4628      	mov	r0, r5
 8012620:	47b0      	blx	r6
 8012622:	1c43      	adds	r3, r0, #1
 8012624:	89a3      	ldrh	r3, [r4, #12]
 8012626:	d106      	bne.n	8012636 <__sflush_r+0x62>
 8012628:	6829      	ldr	r1, [r5, #0]
 801262a:	291d      	cmp	r1, #29
 801262c:	d82b      	bhi.n	8012686 <__sflush_r+0xb2>
 801262e:	4a2a      	ldr	r2, [pc, #168]	@ (80126d8 <__sflush_r+0x104>)
 8012630:	410a      	asrs	r2, r1
 8012632:	07d6      	lsls	r6, r2, #31
 8012634:	d427      	bmi.n	8012686 <__sflush_r+0xb2>
 8012636:	2200      	movs	r2, #0
 8012638:	6062      	str	r2, [r4, #4]
 801263a:	04d9      	lsls	r1, r3, #19
 801263c:	6922      	ldr	r2, [r4, #16]
 801263e:	6022      	str	r2, [r4, #0]
 8012640:	d504      	bpl.n	801264c <__sflush_r+0x78>
 8012642:	1c42      	adds	r2, r0, #1
 8012644:	d101      	bne.n	801264a <__sflush_r+0x76>
 8012646:	682b      	ldr	r3, [r5, #0]
 8012648:	b903      	cbnz	r3, 801264c <__sflush_r+0x78>
 801264a:	6560      	str	r0, [r4, #84]	@ 0x54
 801264c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801264e:	602f      	str	r7, [r5, #0]
 8012650:	b1b9      	cbz	r1, 8012682 <__sflush_r+0xae>
 8012652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012656:	4299      	cmp	r1, r3
 8012658:	d002      	beq.n	8012660 <__sflush_r+0x8c>
 801265a:	4628      	mov	r0, r5
 801265c:	f7ff f954 	bl	8011908 <_free_r>
 8012660:	2300      	movs	r3, #0
 8012662:	6363      	str	r3, [r4, #52]	@ 0x34
 8012664:	e00d      	b.n	8012682 <__sflush_r+0xae>
 8012666:	2301      	movs	r3, #1
 8012668:	4628      	mov	r0, r5
 801266a:	47b0      	blx	r6
 801266c:	4602      	mov	r2, r0
 801266e:	1c50      	adds	r0, r2, #1
 8012670:	d1c9      	bne.n	8012606 <__sflush_r+0x32>
 8012672:	682b      	ldr	r3, [r5, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d0c6      	beq.n	8012606 <__sflush_r+0x32>
 8012678:	2b1d      	cmp	r3, #29
 801267a:	d001      	beq.n	8012680 <__sflush_r+0xac>
 801267c:	2b16      	cmp	r3, #22
 801267e:	d11e      	bne.n	80126be <__sflush_r+0xea>
 8012680:	602f      	str	r7, [r5, #0]
 8012682:	2000      	movs	r0, #0
 8012684:	e022      	b.n	80126cc <__sflush_r+0xf8>
 8012686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801268a:	b21b      	sxth	r3, r3
 801268c:	e01b      	b.n	80126c6 <__sflush_r+0xf2>
 801268e:	690f      	ldr	r7, [r1, #16]
 8012690:	2f00      	cmp	r7, #0
 8012692:	d0f6      	beq.n	8012682 <__sflush_r+0xae>
 8012694:	0793      	lsls	r3, r2, #30
 8012696:	680e      	ldr	r6, [r1, #0]
 8012698:	bf08      	it	eq
 801269a:	694b      	ldreq	r3, [r1, #20]
 801269c:	600f      	str	r7, [r1, #0]
 801269e:	bf18      	it	ne
 80126a0:	2300      	movne	r3, #0
 80126a2:	eba6 0807 	sub.w	r8, r6, r7
 80126a6:	608b      	str	r3, [r1, #8]
 80126a8:	f1b8 0f00 	cmp.w	r8, #0
 80126ac:	dde9      	ble.n	8012682 <__sflush_r+0xae>
 80126ae:	6a21      	ldr	r1, [r4, #32]
 80126b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80126b2:	4643      	mov	r3, r8
 80126b4:	463a      	mov	r2, r7
 80126b6:	4628      	mov	r0, r5
 80126b8:	47b0      	blx	r6
 80126ba:	2800      	cmp	r0, #0
 80126bc:	dc08      	bgt.n	80126d0 <__sflush_r+0xfc>
 80126be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126c6:	81a3      	strh	r3, [r4, #12]
 80126c8:	f04f 30ff 	mov.w	r0, #4294967295
 80126cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d0:	4407      	add	r7, r0
 80126d2:	eba8 0800 	sub.w	r8, r8, r0
 80126d6:	e7e7      	b.n	80126a8 <__sflush_r+0xd4>
 80126d8:	dfbffffe 	.word	0xdfbffffe

080126dc <_fflush_r>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	690b      	ldr	r3, [r1, #16]
 80126e0:	4605      	mov	r5, r0
 80126e2:	460c      	mov	r4, r1
 80126e4:	b913      	cbnz	r3, 80126ec <_fflush_r+0x10>
 80126e6:	2500      	movs	r5, #0
 80126e8:	4628      	mov	r0, r5
 80126ea:	bd38      	pop	{r3, r4, r5, pc}
 80126ec:	b118      	cbz	r0, 80126f6 <_fflush_r+0x1a>
 80126ee:	6a03      	ldr	r3, [r0, #32]
 80126f0:	b90b      	cbnz	r3, 80126f6 <_fflush_r+0x1a>
 80126f2:	f7fe f96f 	bl	80109d4 <__sinit>
 80126f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d0f3      	beq.n	80126e6 <_fflush_r+0xa>
 80126fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012700:	07d0      	lsls	r0, r2, #31
 8012702:	d404      	bmi.n	801270e <_fflush_r+0x32>
 8012704:	0599      	lsls	r1, r3, #22
 8012706:	d402      	bmi.n	801270e <_fflush_r+0x32>
 8012708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801270a:	f7fe fa9e 	bl	8010c4a <__retarget_lock_acquire_recursive>
 801270e:	4628      	mov	r0, r5
 8012710:	4621      	mov	r1, r4
 8012712:	f7ff ff5f 	bl	80125d4 <__sflush_r>
 8012716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012718:	07da      	lsls	r2, r3, #31
 801271a:	4605      	mov	r5, r0
 801271c:	d4e4      	bmi.n	80126e8 <_fflush_r+0xc>
 801271e:	89a3      	ldrh	r3, [r4, #12]
 8012720:	059b      	lsls	r3, r3, #22
 8012722:	d4e1      	bmi.n	80126e8 <_fflush_r+0xc>
 8012724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012726:	f7fe fa91 	bl	8010c4c <__retarget_lock_release_recursive>
 801272a:	e7dd      	b.n	80126e8 <_fflush_r+0xc>

0801272c <__swbuf_r>:
 801272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801272e:	460e      	mov	r6, r1
 8012730:	4614      	mov	r4, r2
 8012732:	4605      	mov	r5, r0
 8012734:	b118      	cbz	r0, 801273e <__swbuf_r+0x12>
 8012736:	6a03      	ldr	r3, [r0, #32]
 8012738:	b90b      	cbnz	r3, 801273e <__swbuf_r+0x12>
 801273a:	f7fe f94b 	bl	80109d4 <__sinit>
 801273e:	69a3      	ldr	r3, [r4, #24]
 8012740:	60a3      	str	r3, [r4, #8]
 8012742:	89a3      	ldrh	r3, [r4, #12]
 8012744:	071a      	lsls	r2, r3, #28
 8012746:	d501      	bpl.n	801274c <__swbuf_r+0x20>
 8012748:	6923      	ldr	r3, [r4, #16]
 801274a:	b943      	cbnz	r3, 801275e <__swbuf_r+0x32>
 801274c:	4621      	mov	r1, r4
 801274e:	4628      	mov	r0, r5
 8012750:	f000 f82a 	bl	80127a8 <__swsetup_r>
 8012754:	b118      	cbz	r0, 801275e <__swbuf_r+0x32>
 8012756:	f04f 37ff 	mov.w	r7, #4294967295
 801275a:	4638      	mov	r0, r7
 801275c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801275e:	6823      	ldr	r3, [r4, #0]
 8012760:	6922      	ldr	r2, [r4, #16]
 8012762:	1a98      	subs	r0, r3, r2
 8012764:	6963      	ldr	r3, [r4, #20]
 8012766:	b2f6      	uxtb	r6, r6
 8012768:	4283      	cmp	r3, r0
 801276a:	4637      	mov	r7, r6
 801276c:	dc05      	bgt.n	801277a <__swbuf_r+0x4e>
 801276e:	4621      	mov	r1, r4
 8012770:	4628      	mov	r0, r5
 8012772:	f7ff ffb3 	bl	80126dc <_fflush_r>
 8012776:	2800      	cmp	r0, #0
 8012778:	d1ed      	bne.n	8012756 <__swbuf_r+0x2a>
 801277a:	68a3      	ldr	r3, [r4, #8]
 801277c:	3b01      	subs	r3, #1
 801277e:	60a3      	str	r3, [r4, #8]
 8012780:	6823      	ldr	r3, [r4, #0]
 8012782:	1c5a      	adds	r2, r3, #1
 8012784:	6022      	str	r2, [r4, #0]
 8012786:	701e      	strb	r6, [r3, #0]
 8012788:	6962      	ldr	r2, [r4, #20]
 801278a:	1c43      	adds	r3, r0, #1
 801278c:	429a      	cmp	r2, r3
 801278e:	d004      	beq.n	801279a <__swbuf_r+0x6e>
 8012790:	89a3      	ldrh	r3, [r4, #12]
 8012792:	07db      	lsls	r3, r3, #31
 8012794:	d5e1      	bpl.n	801275a <__swbuf_r+0x2e>
 8012796:	2e0a      	cmp	r6, #10
 8012798:	d1df      	bne.n	801275a <__swbuf_r+0x2e>
 801279a:	4621      	mov	r1, r4
 801279c:	4628      	mov	r0, r5
 801279e:	f7ff ff9d 	bl	80126dc <_fflush_r>
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d0d9      	beq.n	801275a <__swbuf_r+0x2e>
 80127a6:	e7d6      	b.n	8012756 <__swbuf_r+0x2a>

080127a8 <__swsetup_r>:
 80127a8:	b538      	push	{r3, r4, r5, lr}
 80127aa:	4b29      	ldr	r3, [pc, #164]	@ (8012850 <__swsetup_r+0xa8>)
 80127ac:	4605      	mov	r5, r0
 80127ae:	6818      	ldr	r0, [r3, #0]
 80127b0:	460c      	mov	r4, r1
 80127b2:	b118      	cbz	r0, 80127bc <__swsetup_r+0x14>
 80127b4:	6a03      	ldr	r3, [r0, #32]
 80127b6:	b90b      	cbnz	r3, 80127bc <__swsetup_r+0x14>
 80127b8:	f7fe f90c 	bl	80109d4 <__sinit>
 80127bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127c0:	0719      	lsls	r1, r3, #28
 80127c2:	d422      	bmi.n	801280a <__swsetup_r+0x62>
 80127c4:	06da      	lsls	r2, r3, #27
 80127c6:	d407      	bmi.n	80127d8 <__swsetup_r+0x30>
 80127c8:	2209      	movs	r2, #9
 80127ca:	602a      	str	r2, [r5, #0]
 80127cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127d0:	81a3      	strh	r3, [r4, #12]
 80127d2:	f04f 30ff 	mov.w	r0, #4294967295
 80127d6:	e033      	b.n	8012840 <__swsetup_r+0x98>
 80127d8:	0758      	lsls	r0, r3, #29
 80127da:	d512      	bpl.n	8012802 <__swsetup_r+0x5a>
 80127dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127de:	b141      	cbz	r1, 80127f2 <__swsetup_r+0x4a>
 80127e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127e4:	4299      	cmp	r1, r3
 80127e6:	d002      	beq.n	80127ee <__swsetup_r+0x46>
 80127e8:	4628      	mov	r0, r5
 80127ea:	f7ff f88d 	bl	8011908 <_free_r>
 80127ee:	2300      	movs	r3, #0
 80127f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80127f2:	89a3      	ldrh	r3, [r4, #12]
 80127f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80127f8:	81a3      	strh	r3, [r4, #12]
 80127fa:	2300      	movs	r3, #0
 80127fc:	6063      	str	r3, [r4, #4]
 80127fe:	6923      	ldr	r3, [r4, #16]
 8012800:	6023      	str	r3, [r4, #0]
 8012802:	89a3      	ldrh	r3, [r4, #12]
 8012804:	f043 0308 	orr.w	r3, r3, #8
 8012808:	81a3      	strh	r3, [r4, #12]
 801280a:	6923      	ldr	r3, [r4, #16]
 801280c:	b94b      	cbnz	r3, 8012822 <__swsetup_r+0x7a>
 801280e:	89a3      	ldrh	r3, [r4, #12]
 8012810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012818:	d003      	beq.n	8012822 <__swsetup_r+0x7a>
 801281a:	4621      	mov	r1, r4
 801281c:	4628      	mov	r0, r5
 801281e:	f000 f8eb 	bl	80129f8 <__smakebuf_r>
 8012822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012826:	f013 0201 	ands.w	r2, r3, #1
 801282a:	d00a      	beq.n	8012842 <__swsetup_r+0x9a>
 801282c:	2200      	movs	r2, #0
 801282e:	60a2      	str	r2, [r4, #8]
 8012830:	6962      	ldr	r2, [r4, #20]
 8012832:	4252      	negs	r2, r2
 8012834:	61a2      	str	r2, [r4, #24]
 8012836:	6922      	ldr	r2, [r4, #16]
 8012838:	b942      	cbnz	r2, 801284c <__swsetup_r+0xa4>
 801283a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801283e:	d1c5      	bne.n	80127cc <__swsetup_r+0x24>
 8012840:	bd38      	pop	{r3, r4, r5, pc}
 8012842:	0799      	lsls	r1, r3, #30
 8012844:	bf58      	it	pl
 8012846:	6962      	ldrpl	r2, [r4, #20]
 8012848:	60a2      	str	r2, [r4, #8]
 801284a:	e7f4      	b.n	8012836 <__swsetup_r+0x8e>
 801284c:	2000      	movs	r0, #0
 801284e:	e7f7      	b.n	8012840 <__swsetup_r+0x98>
 8012850:	2000003c 	.word	0x2000003c

08012854 <memmove>:
 8012854:	4288      	cmp	r0, r1
 8012856:	b510      	push	{r4, lr}
 8012858:	eb01 0402 	add.w	r4, r1, r2
 801285c:	d902      	bls.n	8012864 <memmove+0x10>
 801285e:	4284      	cmp	r4, r0
 8012860:	4623      	mov	r3, r4
 8012862:	d807      	bhi.n	8012874 <memmove+0x20>
 8012864:	1e43      	subs	r3, r0, #1
 8012866:	42a1      	cmp	r1, r4
 8012868:	d008      	beq.n	801287c <memmove+0x28>
 801286a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801286e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012872:	e7f8      	b.n	8012866 <memmove+0x12>
 8012874:	4402      	add	r2, r0
 8012876:	4601      	mov	r1, r0
 8012878:	428a      	cmp	r2, r1
 801287a:	d100      	bne.n	801287e <memmove+0x2a>
 801287c:	bd10      	pop	{r4, pc}
 801287e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012886:	e7f7      	b.n	8012878 <memmove+0x24>

08012888 <__assert_func>:
 8012888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801288a:	4614      	mov	r4, r2
 801288c:	461a      	mov	r2, r3
 801288e:	4b09      	ldr	r3, [pc, #36]	@ (80128b4 <__assert_func+0x2c>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4605      	mov	r5, r0
 8012894:	68d8      	ldr	r0, [r3, #12]
 8012896:	b954      	cbnz	r4, 80128ae <__assert_func+0x26>
 8012898:	4b07      	ldr	r3, [pc, #28]	@ (80128b8 <__assert_func+0x30>)
 801289a:	461c      	mov	r4, r3
 801289c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128a0:	9100      	str	r1, [sp, #0]
 80128a2:	462b      	mov	r3, r5
 80128a4:	4905      	ldr	r1, [pc, #20]	@ (80128bc <__assert_func+0x34>)
 80128a6:	f000 f86f 	bl	8012988 <fiprintf>
 80128aa:	f000 f903 	bl	8012ab4 <abort>
 80128ae:	4b04      	ldr	r3, [pc, #16]	@ (80128c0 <__assert_func+0x38>)
 80128b0:	e7f4      	b.n	801289c <__assert_func+0x14>
 80128b2:	bf00      	nop
 80128b4:	2000003c 	.word	0x2000003c
 80128b8:	08018346 	.word	0x08018346
 80128bc:	08018318 	.word	0x08018318
 80128c0:	0801830b 	.word	0x0801830b

080128c4 <_calloc_r>:
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	fba1 5402 	umull	r5, r4, r1, r2
 80128ca:	b93c      	cbnz	r4, 80128dc <_calloc_r+0x18>
 80128cc:	4629      	mov	r1, r5
 80128ce:	f7fd fb11 	bl	800fef4 <_malloc_r>
 80128d2:	4606      	mov	r6, r0
 80128d4:	b928      	cbnz	r0, 80128e2 <_calloc_r+0x1e>
 80128d6:	2600      	movs	r6, #0
 80128d8:	4630      	mov	r0, r6
 80128da:	bd70      	pop	{r4, r5, r6, pc}
 80128dc:	220c      	movs	r2, #12
 80128de:	6002      	str	r2, [r0, #0]
 80128e0:	e7f9      	b.n	80128d6 <_calloc_r+0x12>
 80128e2:	462a      	mov	r2, r5
 80128e4:	4621      	mov	r1, r4
 80128e6:	f7fe f922 	bl	8010b2e <memset>
 80128ea:	e7f5      	b.n	80128d8 <_calloc_r+0x14>

080128ec <__ascii_mbtowc>:
 80128ec:	b082      	sub	sp, #8
 80128ee:	b901      	cbnz	r1, 80128f2 <__ascii_mbtowc+0x6>
 80128f0:	a901      	add	r1, sp, #4
 80128f2:	b142      	cbz	r2, 8012906 <__ascii_mbtowc+0x1a>
 80128f4:	b14b      	cbz	r3, 801290a <__ascii_mbtowc+0x1e>
 80128f6:	7813      	ldrb	r3, [r2, #0]
 80128f8:	600b      	str	r3, [r1, #0]
 80128fa:	7812      	ldrb	r2, [r2, #0]
 80128fc:	1e10      	subs	r0, r2, #0
 80128fe:	bf18      	it	ne
 8012900:	2001      	movne	r0, #1
 8012902:	b002      	add	sp, #8
 8012904:	4770      	bx	lr
 8012906:	4610      	mov	r0, r2
 8012908:	e7fb      	b.n	8012902 <__ascii_mbtowc+0x16>
 801290a:	f06f 0001 	mvn.w	r0, #1
 801290e:	e7f8      	b.n	8012902 <__ascii_mbtowc+0x16>

08012910 <_realloc_r>:
 8012910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012914:	4680      	mov	r8, r0
 8012916:	4615      	mov	r5, r2
 8012918:	460c      	mov	r4, r1
 801291a:	b921      	cbnz	r1, 8012926 <_realloc_r+0x16>
 801291c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012920:	4611      	mov	r1, r2
 8012922:	f7fd bae7 	b.w	800fef4 <_malloc_r>
 8012926:	b92a      	cbnz	r2, 8012934 <_realloc_r+0x24>
 8012928:	f7fe ffee 	bl	8011908 <_free_r>
 801292c:	2400      	movs	r4, #0
 801292e:	4620      	mov	r0, r4
 8012930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012934:	f000 f8c5 	bl	8012ac2 <_malloc_usable_size_r>
 8012938:	4285      	cmp	r5, r0
 801293a:	4606      	mov	r6, r0
 801293c:	d802      	bhi.n	8012944 <_realloc_r+0x34>
 801293e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012942:	d8f4      	bhi.n	801292e <_realloc_r+0x1e>
 8012944:	4629      	mov	r1, r5
 8012946:	4640      	mov	r0, r8
 8012948:	f7fd fad4 	bl	800fef4 <_malloc_r>
 801294c:	4607      	mov	r7, r0
 801294e:	2800      	cmp	r0, #0
 8012950:	d0ec      	beq.n	801292c <_realloc_r+0x1c>
 8012952:	42b5      	cmp	r5, r6
 8012954:	462a      	mov	r2, r5
 8012956:	4621      	mov	r1, r4
 8012958:	bf28      	it	cs
 801295a:	4632      	movcs	r2, r6
 801295c:	f7fe f977 	bl	8010c4e <memcpy>
 8012960:	4621      	mov	r1, r4
 8012962:	4640      	mov	r0, r8
 8012964:	f7fe ffd0 	bl	8011908 <_free_r>
 8012968:	463c      	mov	r4, r7
 801296a:	e7e0      	b.n	801292e <_realloc_r+0x1e>

0801296c <__ascii_wctomb>:
 801296c:	4603      	mov	r3, r0
 801296e:	4608      	mov	r0, r1
 8012970:	b141      	cbz	r1, 8012984 <__ascii_wctomb+0x18>
 8012972:	2aff      	cmp	r2, #255	@ 0xff
 8012974:	d904      	bls.n	8012980 <__ascii_wctomb+0x14>
 8012976:	228a      	movs	r2, #138	@ 0x8a
 8012978:	601a      	str	r2, [r3, #0]
 801297a:	f04f 30ff 	mov.w	r0, #4294967295
 801297e:	4770      	bx	lr
 8012980:	700a      	strb	r2, [r1, #0]
 8012982:	2001      	movs	r0, #1
 8012984:	4770      	bx	lr
	...

08012988 <fiprintf>:
 8012988:	b40e      	push	{r1, r2, r3}
 801298a:	b503      	push	{r0, r1, lr}
 801298c:	4601      	mov	r1, r0
 801298e:	ab03      	add	r3, sp, #12
 8012990:	4805      	ldr	r0, [pc, #20]	@ (80129a8 <fiprintf+0x20>)
 8012992:	f853 2b04 	ldr.w	r2, [r3], #4
 8012996:	6800      	ldr	r0, [r0, #0]
 8012998:	9301      	str	r3, [sp, #4]
 801299a:	f7ff fd03 	bl	80123a4 <_vfiprintf_r>
 801299e:	b002      	add	sp, #8
 80129a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80129a4:	b003      	add	sp, #12
 80129a6:	4770      	bx	lr
 80129a8:	2000003c 	.word	0x2000003c

080129ac <__swhatbuf_r>:
 80129ac:	b570      	push	{r4, r5, r6, lr}
 80129ae:	460c      	mov	r4, r1
 80129b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129b4:	2900      	cmp	r1, #0
 80129b6:	b096      	sub	sp, #88	@ 0x58
 80129b8:	4615      	mov	r5, r2
 80129ba:	461e      	mov	r6, r3
 80129bc:	da0d      	bge.n	80129da <__swhatbuf_r+0x2e>
 80129be:	89a3      	ldrh	r3, [r4, #12]
 80129c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80129c4:	f04f 0100 	mov.w	r1, #0
 80129c8:	bf14      	ite	ne
 80129ca:	2340      	movne	r3, #64	@ 0x40
 80129cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80129d0:	2000      	movs	r0, #0
 80129d2:	6031      	str	r1, [r6, #0]
 80129d4:	602b      	str	r3, [r5, #0]
 80129d6:	b016      	add	sp, #88	@ 0x58
 80129d8:	bd70      	pop	{r4, r5, r6, pc}
 80129da:	466a      	mov	r2, sp
 80129dc:	f000 f848 	bl	8012a70 <_fstat_r>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	dbec      	blt.n	80129be <__swhatbuf_r+0x12>
 80129e4:	9901      	ldr	r1, [sp, #4]
 80129e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80129ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80129ee:	4259      	negs	r1, r3
 80129f0:	4159      	adcs	r1, r3
 80129f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80129f6:	e7eb      	b.n	80129d0 <__swhatbuf_r+0x24>

080129f8 <__smakebuf_r>:
 80129f8:	898b      	ldrh	r3, [r1, #12]
 80129fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129fc:	079d      	lsls	r5, r3, #30
 80129fe:	4606      	mov	r6, r0
 8012a00:	460c      	mov	r4, r1
 8012a02:	d507      	bpl.n	8012a14 <__smakebuf_r+0x1c>
 8012a04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a08:	6023      	str	r3, [r4, #0]
 8012a0a:	6123      	str	r3, [r4, #16]
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	6163      	str	r3, [r4, #20]
 8012a10:	b003      	add	sp, #12
 8012a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a14:	ab01      	add	r3, sp, #4
 8012a16:	466a      	mov	r2, sp
 8012a18:	f7ff ffc8 	bl	80129ac <__swhatbuf_r>
 8012a1c:	9f00      	ldr	r7, [sp, #0]
 8012a1e:	4605      	mov	r5, r0
 8012a20:	4639      	mov	r1, r7
 8012a22:	4630      	mov	r0, r6
 8012a24:	f7fd fa66 	bl	800fef4 <_malloc_r>
 8012a28:	b948      	cbnz	r0, 8012a3e <__smakebuf_r+0x46>
 8012a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a2e:	059a      	lsls	r2, r3, #22
 8012a30:	d4ee      	bmi.n	8012a10 <__smakebuf_r+0x18>
 8012a32:	f023 0303 	bic.w	r3, r3, #3
 8012a36:	f043 0302 	orr.w	r3, r3, #2
 8012a3a:	81a3      	strh	r3, [r4, #12]
 8012a3c:	e7e2      	b.n	8012a04 <__smakebuf_r+0xc>
 8012a3e:	89a3      	ldrh	r3, [r4, #12]
 8012a40:	6020      	str	r0, [r4, #0]
 8012a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a46:	81a3      	strh	r3, [r4, #12]
 8012a48:	9b01      	ldr	r3, [sp, #4]
 8012a4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012a4e:	b15b      	cbz	r3, 8012a68 <__smakebuf_r+0x70>
 8012a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a54:	4630      	mov	r0, r6
 8012a56:	f000 f81d 	bl	8012a94 <_isatty_r>
 8012a5a:	b128      	cbz	r0, 8012a68 <__smakebuf_r+0x70>
 8012a5c:	89a3      	ldrh	r3, [r4, #12]
 8012a5e:	f023 0303 	bic.w	r3, r3, #3
 8012a62:	f043 0301 	orr.w	r3, r3, #1
 8012a66:	81a3      	strh	r3, [r4, #12]
 8012a68:	89a3      	ldrh	r3, [r4, #12]
 8012a6a:	431d      	orrs	r5, r3
 8012a6c:	81a5      	strh	r5, [r4, #12]
 8012a6e:	e7cf      	b.n	8012a10 <__smakebuf_r+0x18>

08012a70 <_fstat_r>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	4d07      	ldr	r5, [pc, #28]	@ (8012a90 <_fstat_r+0x20>)
 8012a74:	2300      	movs	r3, #0
 8012a76:	4604      	mov	r4, r0
 8012a78:	4608      	mov	r0, r1
 8012a7a:	4611      	mov	r1, r2
 8012a7c:	602b      	str	r3, [r5, #0]
 8012a7e:	f7f2 f8fd 	bl	8004c7c <_fstat>
 8012a82:	1c43      	adds	r3, r0, #1
 8012a84:	d102      	bne.n	8012a8c <_fstat_r+0x1c>
 8012a86:	682b      	ldr	r3, [r5, #0]
 8012a88:	b103      	cbz	r3, 8012a8c <_fstat_r+0x1c>
 8012a8a:	6023      	str	r3, [r4, #0]
 8012a8c:	bd38      	pop	{r3, r4, r5, pc}
 8012a8e:	bf00      	nop
 8012a90:	20000cf4 	.word	0x20000cf4

08012a94 <_isatty_r>:
 8012a94:	b538      	push	{r3, r4, r5, lr}
 8012a96:	4d06      	ldr	r5, [pc, #24]	@ (8012ab0 <_isatty_r+0x1c>)
 8012a98:	2300      	movs	r3, #0
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	4608      	mov	r0, r1
 8012a9e:	602b      	str	r3, [r5, #0]
 8012aa0:	f7f2 f8fc 	bl	8004c9c <_isatty>
 8012aa4:	1c43      	adds	r3, r0, #1
 8012aa6:	d102      	bne.n	8012aae <_isatty_r+0x1a>
 8012aa8:	682b      	ldr	r3, [r5, #0]
 8012aaa:	b103      	cbz	r3, 8012aae <_isatty_r+0x1a>
 8012aac:	6023      	str	r3, [r4, #0]
 8012aae:	bd38      	pop	{r3, r4, r5, pc}
 8012ab0:	20000cf4 	.word	0x20000cf4

08012ab4 <abort>:
 8012ab4:	b508      	push	{r3, lr}
 8012ab6:	2006      	movs	r0, #6
 8012ab8:	f000 f834 	bl	8012b24 <raise>
 8012abc:	2001      	movs	r0, #1
 8012abe:	f7f2 f88d 	bl	8004bdc <_exit>

08012ac2 <_malloc_usable_size_r>:
 8012ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ac6:	1f18      	subs	r0, r3, #4
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	bfbc      	itt	lt
 8012acc:	580b      	ldrlt	r3, [r1, r0]
 8012ace:	18c0      	addlt	r0, r0, r3
 8012ad0:	4770      	bx	lr

08012ad2 <_raise_r>:
 8012ad2:	291f      	cmp	r1, #31
 8012ad4:	b538      	push	{r3, r4, r5, lr}
 8012ad6:	4605      	mov	r5, r0
 8012ad8:	460c      	mov	r4, r1
 8012ada:	d904      	bls.n	8012ae6 <_raise_r+0x14>
 8012adc:	2316      	movs	r3, #22
 8012ade:	6003      	str	r3, [r0, #0]
 8012ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ae4:	bd38      	pop	{r3, r4, r5, pc}
 8012ae6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012ae8:	b112      	cbz	r2, 8012af0 <_raise_r+0x1e>
 8012aea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012aee:	b94b      	cbnz	r3, 8012b04 <_raise_r+0x32>
 8012af0:	4628      	mov	r0, r5
 8012af2:	f000 f831 	bl	8012b58 <_getpid_r>
 8012af6:	4622      	mov	r2, r4
 8012af8:	4601      	mov	r1, r0
 8012afa:	4628      	mov	r0, r5
 8012afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b00:	f000 b818 	b.w	8012b34 <_kill_r>
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d00a      	beq.n	8012b1e <_raise_r+0x4c>
 8012b08:	1c59      	adds	r1, r3, #1
 8012b0a:	d103      	bne.n	8012b14 <_raise_r+0x42>
 8012b0c:	2316      	movs	r3, #22
 8012b0e:	6003      	str	r3, [r0, #0]
 8012b10:	2001      	movs	r0, #1
 8012b12:	e7e7      	b.n	8012ae4 <_raise_r+0x12>
 8012b14:	2100      	movs	r1, #0
 8012b16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	4798      	blx	r3
 8012b1e:	2000      	movs	r0, #0
 8012b20:	e7e0      	b.n	8012ae4 <_raise_r+0x12>
	...

08012b24 <raise>:
 8012b24:	4b02      	ldr	r3, [pc, #8]	@ (8012b30 <raise+0xc>)
 8012b26:	4601      	mov	r1, r0
 8012b28:	6818      	ldr	r0, [r3, #0]
 8012b2a:	f7ff bfd2 	b.w	8012ad2 <_raise_r>
 8012b2e:	bf00      	nop
 8012b30:	2000003c 	.word	0x2000003c

08012b34 <_kill_r>:
 8012b34:	b538      	push	{r3, r4, r5, lr}
 8012b36:	4d07      	ldr	r5, [pc, #28]	@ (8012b54 <_kill_r+0x20>)
 8012b38:	2300      	movs	r3, #0
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	4608      	mov	r0, r1
 8012b3e:	4611      	mov	r1, r2
 8012b40:	602b      	str	r3, [r5, #0]
 8012b42:	f7f2 f83b 	bl	8004bbc <_kill>
 8012b46:	1c43      	adds	r3, r0, #1
 8012b48:	d102      	bne.n	8012b50 <_kill_r+0x1c>
 8012b4a:	682b      	ldr	r3, [r5, #0]
 8012b4c:	b103      	cbz	r3, 8012b50 <_kill_r+0x1c>
 8012b4e:	6023      	str	r3, [r4, #0]
 8012b50:	bd38      	pop	{r3, r4, r5, pc}
 8012b52:	bf00      	nop
 8012b54:	20000cf4 	.word	0x20000cf4

08012b58 <_getpid_r>:
 8012b58:	f7f2 b828 	b.w	8004bac <_getpid>

08012b5c <_init>:
 8012b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5e:	bf00      	nop
 8012b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b62:	bc08      	pop	{r3}
 8012b64:	469e      	mov	lr, r3
 8012b66:	4770      	bx	lr

08012b68 <_fini>:
 8012b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b6a:	bf00      	nop
 8012b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b6e:	bc08      	pop	{r3}
 8012b70:	469e      	mov	lr, r3
 8012b72:	4770      	bx	lr


DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b68  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058d4  08012d28  08012d28  00022d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080185fc  080185fc  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080185fc  080185fc  000285fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018604  08018604  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018604  08018604  00028604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018608  08018608  00028608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801860c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  20000200  0801880c  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  0801880c  00030c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025e7a  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047a9  00000000  00000000  000560ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002200  00000000  00000000  0005a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a8e  00000000  00000000  0005ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030486  00000000  00000000  0005e526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028a62  00000000  00000000  0008e9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00129c58  00000000  00000000  000b740e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a408  00000000  00000000  001e1068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001eb470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000200 	.word	0x20000200
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012d10 	.word	0x08012d10

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000204 	.word	0x20000204
 80001fc:	08012d10 	.word	0x08012d10

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <initTempHumSensor+0x1c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000021c 	.word	0x2000021c

08000ef4 <req_measurements>:

// send command to sensor
void req_measurements() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000efa:	f640 532c 	movw	r3, #3372	; 0xd2c
 8000efe:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <req_measurements+0x28>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	1d3a      	adds	r2, r7, #4
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	2188      	movs	r1, #136	; 0x88
 8000f10:	f007 fb3c 	bl	800858c <HAL_I2C_Master_Transmit>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000021c 	.word	0x2000021c

08000f20 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[6];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 6, 1000);
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <read_raw_measurements+0x58>)
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	463a      	mov	r2, r7
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2306      	movs	r3, #6
 8000f34:	2189      	movs	r1, #137	; 0x89
 8000f36:	f007 fc41 	bl	80087bc <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000f3a:	783b      	ldrb	r3, [r7, #0]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	813b      	strh	r3, [r7, #8]
	data.hum = buf[3] << 8 | buf[4];
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	793b      	ldrb	r3, [r7, #4]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	817b      	strh	r3, [r7, #10]
	return data;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	2300      	movs	r3, #0
 8000f64:	89ba      	ldrh	r2, [r7, #12]
 8000f66:	f362 030f 	bfi	r3, r2, #0, #16
 8000f6a:	89fa      	ldrh	r2, [r7, #14]
 8000f6c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000021c 	.word	0x2000021c

08000f7c <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 8000f82:	f7ff ffb7 	bl	8000ef4 <req_measurements>
	raw_data = read_raw_measurements();
 8000f86:	f7ff ffcb 	bl	8000f20 <read_raw_measurements>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 8000f8e:	8abb      	ldrh	r3, [r7, #20]
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 8000f92:	8afb      	ldrh	r3, [r7, #22]
 8000f94:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001004 <get_temp_hum+0x88>
 8000fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001008 <get_temp_hum+0x8c>
 8000fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800100c <get_temp_hum+0x90>
 8000fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001004 <get_temp_hum+0x88>
 8000fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001010 <get_temp_hum+0x94>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd6:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	ee07 2a10 	vmov	s14, r2
 8000ff2:	ee07 3a90 	vmov	s15, r3
}
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	477fff00 	.word	0x477fff00
 8001008:	439d8000 	.word	0x439d8000
 800100c:	42340000 	.word	0x42340000
 8001010:	42c80000 	.word	0x42c80000

08001014 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 8001014:	b084      	sub	sp, #16
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
 800101a:	f107 0c08 	add.w	ip, r7, #8
 800101e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <JOYSTICK_INIT+0x2c>)
 8001024:	4618      	mov	r0, r3
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2254      	movs	r2, #84	; 0x54
 800102c:	4619      	mov	r1, r3
 800102e:	f00f fe30 	bl	8010c92 <memcpy>
	}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800103a:	b004      	add	sp, #16
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000224 	.word	0x20000224

08001044 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	811a      	strh	r2, [r3, #8]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 800106c:	f107 0214 	add.w	r2, r7, #20
 8001070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <readRegister+0x78>)
 800107c:	f007 fa86 	bl	800858c <HAL_I2C_Master_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <readRegister+0x7c>)
 8001086:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 8001088:	f107 0208 	add.w	r2, r7, #8
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <readRegister+0x78>)
 8001098:	f007 fb90 	bl	80087bc <HAL_I2C_Master_Receive>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <readRegister+0x7c>)
 80010a2:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <readRegister+0x7c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <readRegister+0x6e>
    }
    return buf0[0];
 80010b0:	7a3b      	ldrb	r3, [r7, #8]
  }
 80010b2:	4618      	mov	r0, r3
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000224 	.word	0x20000224
 80010c0:	20000220 	.word	0x20000220

080010c4 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 80010ca:	2003      	movs	r0, #3
 80010cc:	f7ff ffba 	bl	8001044 <readRegister>
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 80010d4:	2004      	movs	r0, #4
 80010d6:	f7ff ffb5 	bl	8001044 <readRegister>
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	021a      	lsls	r2, r3, #8
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	119b      	asrs	r3, r3, #6
 80010e8:	b29b      	uxth	r3, r3
  }
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 80010f8:	2005      	movs	r0, #5
 80010fa:	f7ff ffa3 	bl	8001044 <readRegister>
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 8001102:	2006      	movs	r0, #6
 8001104:	f7ff ff9e 	bl	8001044 <readRegister>
 8001108:	4603      	mov	r3, r0
 800110a:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	021a      	lsls	r2, r3, #8
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	4313      	orrs	r3, r2
 8001114:	119b      	asrs	r3, r3, #6
 8001116:	b29b      	uxth	r3, r3
  }
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 8001126:	f7ff ffcd 	bl	80010c4 <getHorizontal>
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 800112e:	f7ff ffe0 	bl	80010f2 <getVertical>
 8001132:	4603      	mov	r3, r0
 8001134:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	2bfa      	cmp	r3, #250	; 0xfa
 800113a:	d906      	bls.n	800114a <threshold+0x2a>
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001142:	4293      	cmp	r3, r2
 8001144:	d801      	bhi.n	800114a <threshold+0x2a>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <threshold+0x2c>
 800114a:	2300      	movs	r3, #0
 800114c:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	2bf9      	cmp	r3, #249	; 0xf9
 8001152:	d804      	bhi.n	800115e <threshold+0x3e>
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <threshold+0x3e>
		  return 1;
 800115a:	2301      	movs	r3, #1
 800115c:	e00a      	b.n	8001174 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001164:	4293      	cmp	r3, r2
 8001166:	d904      	bls.n	8001172 <threshold+0x52>
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <threshold+0x52>
		  return 2;
 800116e:	2302      	movs	r3, #2
 8001170:	e000      	b.n	8001174 <threshold+0x54>
	  }
	  return 0;
 8001172:	2300      	movs	r3, #0
  }
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
    int val = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 8001186:	2120      	movs	r1, #32
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f007 f910 	bl	80083b0 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <RowChecker+0x1e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e000      	b.n	800119c <RowChecker+0x20>
 800119a:	2301      	movs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a4:	f007 f904 	bl	80083b0 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <RowChecker+0x36>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	e000      	b.n	80011b4 <RowChecker+0x38>
 80011b2:	2302      	movs	r3, #2
 80011b4:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f007 f8f8 	bl	80083b0 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <RowChecker+0x4e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	e000      	b.n	80011cc <RowChecker+0x50>
 80011ca:	2303      	movs	r3, #3
 80011cc:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <RowChecker+0x74>)
 80011d4:	f007 f8ec 	bl	80083b0 <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <RowChecker+0x66>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	e000      	b.n	80011e4 <RowChecker+0x68>
 80011e2:	2304      	movs	r3, #4
 80011e4:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 80011e6:	687b      	ldr	r3, [r7, #4]
  }
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	48000c00 	.word	0x48000c00

080011f4 <keypad_init>:
//		}
//		return 0;
//	}


void keypad_init(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <keypad_init+0x38>)
 8001200:	f007 f8ee 	bl	80083e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <keypad_init+0x3c>)
 800120c:	f007 f8e8 	bl	80083e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <keypad_init+0x38>)
 8001218:	f007 f8e2 	bl	80083e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <keypad_init+0x3c>)
 8001224:	f007 f8dc 	bl	80083e0 <HAL_GPIO_WritePin>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	48001000 	.word	0x48001000
 8001230:	48001400 	.word	0x48001400

08001234 <KeyPadReturn>:


	//Processes the row (val) and col values to get the number associated with that row and col
	//weightSel is used to determine if Weight (1) or Age (0) is being input
  uint8_t KeyPadReturn(int row, int col, int weightSel) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af02      	add	r7, sp, #8
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
	// 1-based indexing, row 0 is nothing
	// col 4 are letters
    if (row == 0 || col == 4) {
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <KeyPadReturn+0x18>
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d101      	bne.n	8001250 <KeyPadReturn+0x1c>
      return 0;
 800124c:	2300      	movs	r3, #0
 800124e:	e0be      	b.n	80013ce <KeyPadReturn+0x19a>
    }
    HAL_Delay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f005 fcb1 	bl	8006bb8 <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 8001256:	bf00      	nop
 8001258:	f7ff ff90 	bl	800117c <RowChecker>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4293      	cmp	r3, r2
 8001262:	d0f9      	beq.n	8001258 <KeyPadReturn+0x24>
    }
    HAL_Delay(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f005 fca7 	bl	8006bb8 <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3b01      	subs	r3, #1
 8001272:	4959      	ldr	r1, [pc, #356]	; (80013d8 <KeyPadReturn+0x1a4>)
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	440a      	add	r2, r1
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	74fb      	strb	r3, [r7, #19]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	2b23      	cmp	r3, #35	; 0x23
 8001282:	d13c      	bne.n	80012fe <KeyPadReturn+0xca>
    	// Go to main display
      if (weightCounter == 0) {
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <KeyPadReturn+0x1a8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <KeyPadReturn+0x5c>
        // If there is no value for weight, just return
        return 0;
 800128c:	2300      	movs	r3, #0
 800128e:	e09e      	b.n	80013ce <KeyPadReturn+0x19a>
      for (uint8_t i = 0; i < weightCounter; i++) {
        // print the values here
        //printf("%x ", ASCII_Weight[i]);
      }
      printf("\n");*/
      if(weightSel){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <KeyPadReturn+0x70>
          	ASCII_Weight[weightCounter] = '\0';
 8001296:	4b51      	ldr	r3, [pc, #324]	; (80013dc <KeyPadReturn+0x1a8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <KeyPadReturn+0x1ac>)
 800129e:	2100      	movs	r1, #0
 80012a0:	5499      	strb	r1, [r3, r2]
 80012a2:	e027      	b.n	80012f4 <KeyPadReturn+0xc0>
      }
      else{
    	  ASCII_Age[weightCounter] = '\0';
 80012a4:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <KeyPadReturn+0x1a8>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <KeyPadReturn+0x1b0>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	5499      	strb	r1, [r3, r2]
    	  age = 0;
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <KeyPadReturn+0x1b4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
//    	  for (size_t i = weightCounter - 1; i <= 0; i++) {
//    		  age += ASCII_Age[i] * ;
//    	  }
    	  int i = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
    	  while (ASCII_Age[i] != '\0') {
 80012ba:	e015      	b.n	80012e8 <KeyPadReturn+0xb4>
    		  age *= 10;
 80012bc:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <KeyPadReturn+0x1b4>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <KeyPadReturn+0x1b4>)
 80012cc:	701a      	strb	r2, [r3, #0]
    		  age += ASCII_Age[i++] - 48;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	617a      	str	r2, [r7, #20]
 80012d4:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <KeyPadReturn+0x1b0>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	3b30      	subs	r3, #48	; 0x30
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <KeyPadReturn+0x1b4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <KeyPadReturn+0x1b4>)
 80012e6:	701a      	strb	r2, [r3, #0]
    	  while (ASCII_Age[i] != '\0') {
 80012e8:	4a3e      	ldr	r2, [pc, #248]	; (80013e4 <KeyPadReturn+0x1b0>)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e3      	bne.n	80012bc <KeyPadReturn+0x88>
    	  }
      }
      weightCounter = 0;
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <KeyPadReturn+0x1a8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      //LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
      return 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e067      	b.n	80013ce <KeyPadReturn+0x19a>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 80012fe:	7cfb      	ldrb	r3, [r7, #19]
 8001300:	2b2a      	cmp	r3, #42	; 0x2a
 8001302:	d006      	beq.n	8001312 <KeyPadReturn+0xde>
 8001304:	4b35      	ldr	r3, [pc, #212]	; (80013dc <KeyPadReturn+0x1a8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	2305      	movs	r3, #5
 800130c:	3b02      	subs	r3, #2
 800130e:	429a      	cmp	r2, r3
 8001310:	d118      	bne.n	8001344 <KeyPadReturn+0x110>
    	// Wipe screen
    	if(weightSel){
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <KeyPadReturn+0xf6>
    		LCD_Fill(105, 5, 170, 5+28, C_BLACK);
 8001318:	2300      	movs	r3, #0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2321      	movs	r3, #33	; 0x21
 800131e:	22aa      	movs	r2, #170	; 0xaa
 8001320:	2105      	movs	r1, #5
 8001322:	2069      	movs	r0, #105	; 0x69
 8001324:	f000 fb2e 	bl	8001984 <LCD_Fill>
 8001328:	e007      	b.n	800133a <KeyPadReturn+0x106>
    	}
    	else{
    		LCD_Fill(80, 5, 170, 5+28, C_BLACK);
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2321      	movs	r3, #33	; 0x21
 8001330:	22aa      	movs	r2, #170	; 0xaa
 8001332:	2105      	movs	r1, #5
 8001334:	2050      	movs	r0, #80	; 0x50
 8001336:	f000 fb25 	bl	8001984 <LCD_Fill>
    	}
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <KeyPadReturn+0x1a8>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
      return 0;
 8001340:	2300      	movs	r3, #0
 8001342:	e044      	b.n	80013ce <KeyPadReturn+0x19a>
    }
    //printf("ASCII value: %x\n", ASCII_Value);


    if(weightSel){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d01d      	beq.n	8001386 <KeyPadReturn+0x152>
    	ASCII_Weight[weightCounter] = ASCII_Value;
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <KeyPadReturn+0x1a8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <KeyPadReturn+0x1ac>)
 8001352:	7cfb      	ldrb	r3, [r7, #19]
 8001354:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(105 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <KeyPadReturn+0x1a8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	b29b      	uxth	r3, r3
 8001366:	3369      	adds	r3, #105	; 0x69
 8001368:	b298      	uxth	r0, r3
 800136a:	7cfa      	ldrb	r2, [r7, #19]
 800136c:	2300      	movs	r3, #0
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <KeyPadReturn+0x1b8>)
 8001378:	2105      	movs	r1, #5
 800137a:	f000 fbc9 	bl	8001b10 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f004 f8c2 	bl	8005508 <UG_FontSetTransparency>
 8001384:	e01c      	b.n	80013c0 <KeyPadReturn+0x18c>
    }
    else{
    	ASCII_Age[weightCounter] = ASCII_Value;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <KeyPadReturn+0x1a8>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <KeyPadReturn+0x1b0>)
 800138e:	7cfb      	ldrb	r3, [r7, #19]
 8001390:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(80 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <KeyPadReturn+0x1a8>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	3350      	adds	r3, #80	; 0x50
 80013a4:	b298      	uxth	r0, r3
 80013a6:	7cfa      	ldrb	r2, [r7, #19]
 80013a8:	2300      	movs	r3, #0
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <KeyPadReturn+0x1b8>)
 80013b4:	2105      	movs	r1, #5
 80013b6:	f000 fbab 	bl	8001b10 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f004 f8a4 	bl	8005508 <UG_FontSetTransparency>

    }

    weightCounter++;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <KeyPadReturn+0x1a8>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <KeyPadReturn+0x1a8>)
 80013ca:	701a      	strb	r2, [r3, #0]
    return 0;
 80013cc:	2300      	movs	r3, #0
  }
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000286 	.word	0x20000286
 80013e0:	20000278 	.word	0x20000278
 80013e4:	20000280 	.word	0x20000280
 80013e8:	20000285 	.word	0x20000285
 80013ec:	08012dc4 	.word	0x08012dc4

080013f0 <running>:



  void running(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af02      	add	r7, sp, #8
	  uint8_t finished = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
	  //Gathers Weight data
	  LCD_PutStr(5, 5, "Weight: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 80013fe:	2300      	movs	r3, #0
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4b79      	ldr	r3, [pc, #484]	; (80015f0 <running+0x200>)
 800140a:	4a7a      	ldr	r2, [pc, #488]	; (80015f4 <running+0x204>)
 800140c:	2105      	movs	r1, #5
 800140e:	2005      	movs	r0, #5
 8001410:	f000 fb9b 	bl	8001b4a <LCD_PutStr>
  while (!finished) {
 8001414:	e060      	b.n	80014d8 <running+0xe8>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141c:	4876      	ldr	r0, [pc, #472]	; (80015f8 <running+0x208>)
 800141e:	f006 ffdf 	bl	80083e0 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001422:	f7ff feab 	bl	800117c <RowChecker>
 8001426:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4, 1);
 8001428:	2201      	movs	r2, #1
 800142a:	2104      	movs	r1, #4
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f7ff ff01 	bl	8001234 <KeyPadReturn>
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143c:	486e      	ldr	r0, [pc, #440]	; (80015f8 <running+0x208>)
 800143e:	f006 ffcf 	bl	80083e0 <HAL_GPIO_WritePin>
      if (finished) break;
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d14b      	bne.n	80014e0 <running+0xf0>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144e:	486b      	ldr	r0, [pc, #428]	; (80015fc <running+0x20c>)
 8001450:	f006 ffc6 	bl	80083e0 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001454:	f7ff fe92 	bl	800117c <RowChecker>
 8001458:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3, 1);
 800145a:	2201      	movs	r2, #1
 800145c:	2103      	movs	r1, #3
 800145e:	6838      	ldr	r0, [r7, #0]
 8001460:	f7ff fee8 	bl	8001234 <KeyPadReturn>
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146e:	4863      	ldr	r0, [pc, #396]	; (80015fc <running+0x20c>)
 8001470:	f006 ffb6 	bl	80083e0 <HAL_GPIO_WritePin>
      if (finished) break;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d134      	bne.n	80014e4 <running+0xf4>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001480:	485e      	ldr	r0, [pc, #376]	; (80015fc <running+0x20c>)
 8001482:	f006 ffad 	bl	80083e0 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001486:	f7ff fe79 	bl	800117c <RowChecker>
 800148a:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2, 1);
 800148c:	2201      	movs	r2, #1
 800148e:	2102      	movs	r1, #2
 8001490:	6838      	ldr	r0, [r7, #0]
 8001492:	f7ff fecf 	bl	8001234 <KeyPadReturn>
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a0:	4856      	ldr	r0, [pc, #344]	; (80015fc <running+0x20c>)
 80014a2:	f006 ff9d 	bl	80083e0 <HAL_GPIO_WritePin>
      if (finished) break;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11d      	bne.n	80014e8 <running+0xf8>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b2:	4851      	ldr	r0, [pc, #324]	; (80015f8 <running+0x208>)
 80014b4:	f006 ff94 	bl	80083e0 <HAL_GPIO_WritePin>
      val = RowChecker();
 80014b8:	f7ff fe60 	bl	800117c <RowChecker>
 80014bc:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	2101      	movs	r1, #1
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f7ff feb6 	bl	8001234 <KeyPadReturn>
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d2:	4849      	ldr	r0, [pc, #292]	; (80015f8 <running+0x208>)
 80014d4:	f006 ff84 	bl	80083e0 <HAL_GPIO_WritePin>
  while (!finished) {
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d09b      	beq.n	8001416 <running+0x26>
 80014de:	e004      	b.n	80014ea <running+0xfa>
      if (finished) break;
 80014e0:	bf00      	nop
 80014e2:	e002      	b.n	80014ea <running+0xfa>
      if (finished) break;
 80014e4:	bf00      	nop
 80014e6:	e000      	b.n	80014ea <running+0xfa>
      if (finished) break;
 80014e8:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  	  finished = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
  	  LCD_Fill(5, 5, 170, 5+28, C_BLACK);
 80014ee:	2300      	movs	r3, #0
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2321      	movs	r3, #33	; 0x21
 80014f4:	22aa      	movs	r2, #170	; 0xaa
 80014f6:	2105      	movs	r1, #5
 80014f8:	2005      	movs	r0, #5
 80014fa:	f000 fa43 	bl	8001984 <LCD_Fill>
  	  //Gathers Age data
  	  LCD_PutStr(5, 5, "Age: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 80014fe:	2300      	movs	r3, #0
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <running+0x200>)
 800150a:	4a3d      	ldr	r2, [pc, #244]	; (8001600 <running+0x210>)
 800150c:	2105      	movs	r1, #5
 800150e:	2005      	movs	r0, #5
 8001510:	f000 fb1b 	bl	8001b4a <LCD_PutStr>
  	while (!finished) {
 8001514:	e060      	b.n	80015d8 <running+0x1e8>
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151c:	4836      	ldr	r0, [pc, #216]	; (80015f8 <running+0x208>)
 800151e:	f006 ff5f 	bl	80083e0 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001522:	f7ff fe2b 	bl	800117c <RowChecker>
 8001526:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 4, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2104      	movs	r1, #4
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7ff fe81 	bl	8001234 <KeyPadReturn>
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	482e      	ldr	r0, [pc, #184]	; (80015f8 <running+0x208>)
 800153e:	f006 ff4f 	bl	80083e0 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d14b      	bne.n	80015e0 <running+0x1f0>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154e:	482b      	ldr	r0, [pc, #172]	; (80015fc <running+0x20c>)
 8001550:	f006 ff46 	bl	80083e0 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001554:	f7ff fe12 	bl	800117c <RowChecker>
 8001558:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 3, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2103      	movs	r1, #3
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f7ff fe68 	bl	8001234 <KeyPadReturn>
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800156e:	4823      	ldr	r0, [pc, #140]	; (80015fc <running+0x20c>)
 8001570:	f006 ff36 	bl	80083e0 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d134      	bne.n	80015e4 <running+0x1f4>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <running+0x20c>)
 8001582:	f006 ff2d 	bl	80083e0 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001586:	f7ff fdf9 	bl	800117c <RowChecker>
 800158a:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 2, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2102      	movs	r1, #2
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f7ff fe4f 	bl	8001234 <KeyPadReturn>
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a0:	4816      	ldr	r0, [pc, #88]	; (80015fc <running+0x20c>)
 80015a2:	f006 ff1d 	bl	80083e0 <HAL_GPIO_WritePin>
  	      if (finished) return;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d11d      	bne.n	80015e8 <running+0x1f8>

  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <running+0x208>)
 80015b4:	f006 ff14 	bl	80083e0 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80015b8:	f7ff fde0 	bl	800117c <RowChecker>
 80015bc:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 1, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2101      	movs	r1, #1
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f7ff fe36 	bl	8001234 <KeyPadReturn>
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <running+0x208>)
 80015d4:	f006 ff04 	bl	80083e0 <HAL_GPIO_WritePin>
  	while (!finished) {
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d09b      	beq.n	8001516 <running+0x126>
 80015de:	e004      	b.n	80015ea <running+0x1fa>
  	      if (finished) return;
 80015e0:	bf00      	nop
 80015e2:	e002      	b.n	80015ea <running+0x1fa>
  	      if (finished) return;
 80015e4:	bf00      	nop
 80015e6:	e000      	b.n	80015ea <running+0x1fa>
  	      if (finished) return;
 80015e8:	bf00      	nop
  	}

  }
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08012dc4 	.word	0x08012dc4
 80015f4:	08012d28 	.word	0x08012d28
 80015f8:	48001400 	.word	0x48001400
 80015fc:	48001000 	.word	0x48001000
 8001600:	08012d34 	.word	0x08012d34

08001604 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <setSPI_Size+0x74>)
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001618:	429a      	cmp	r2, r3
 800161a:	d027      	beq.n	800166c <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <setSPI_Size+0x78>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <setSPI_Size+0x78>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162a:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <setSPI_Size+0x74>)
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10c      	bne.n	8001654 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <setSPI_Size+0x78>)
 800163c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001640:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <setSPI_Size+0x78>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <setSPI_Size+0x78>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001650:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 8001652:	e00b      	b.n	800166c <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <setSPI_Size+0x78>)
 8001656:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800165a:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <setSPI_Size+0x78>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <setSPI_Size+0x78>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20000010 	.word	0x20000010
 800167c:	20000840 	.word	0x20000840

08001680 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ffb9 	bl	8001604 <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001698:	4815      	ldr	r0, [pc, #84]	; (80016f0 <LCD_WriteCommand+0x70>)
 800169a:	f006 fea1 	bl	80083e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <LCD_WriteCommand+0x70>)
 80016a6:	f006 fe9b 	bl	80083e0 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ae:	2201      	movs	r2, #1
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4810      	ldr	r0, [pc, #64]	; (80016f4 <LCD_WriteCommand+0x74>)
 80016b4:	f00a fddb 	bl	800c26e <HAL_SPI_Transmit>
	  if (argc) {
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00e      	beq.n	80016dc <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80016be:	2201      	movs	r2, #1
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <LCD_WriteCommand+0x70>)
 80016c6:	f006 fe8b 	bl	80083e0 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <LCD_WriteCommand+0x74>)
 80016d8:	f00a fdc9 	bl	800c26e <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e2:	4803      	ldr	r0, [pc, #12]	; (80016f0 <LCD_WriteCommand+0x70>)
 80016e4:	f006 fe7c 	bl	80083e0 <HAL_GPIO_WritePin>
	}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	48001000 	.word	0x48001000
 80016f4:	20000840 	.word	0x20000840

080016f8 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	4814      	ldr	r0, [pc, #80]	; (800175c <LCD_WriteData+0x64>)
 800170a:	f006 fe69 	bl	80083e0 <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001714:	4811      	ldr	r0, [pc, #68]	; (800175c <LCD_WriteData+0x64>)
 8001716:	f006 fe63 	bl	80083e0 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800171a:	e011      	b.n	8001740 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001722:	4293      	cmp	r3, r2
 8001724:	bf28      	it	cs
 8001726:	4613      	movcs	r3, r2
 8001728:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800172a:	89fa      	ldrh	r2, [r7, #14]
 800172c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <LCD_WriteData+0x68>)
 8001734:	f00a fd9b 	bl	800c26e <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ea      	bne.n	800171c <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <LCD_WriteData+0x64>)
 800174e:	f006 fe47 	bl	80083e0 <HAL_GPIO_WritePin>
#endif
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	48001000 	.word	0x48001000
 8001760:	20000840 	.word	0x20000840

08001764 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b08b      	sub	sp, #44	; 0x2c
 8001768:	af00      	add	r7, sp, #0
 800176a:	4604      	mov	r4, r0
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4623      	mov	r3, r4
 8001774:	80fb      	strh	r3, [r7, #6]
 8001776:	4603      	mov	r3, r0
 8001778:	80bb      	strh	r3, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	807b      	strh	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	84bb      	strh	r3, [r7, #36]	; 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	847b      	strh	r3, [r7, #34]	; 0x22
 800178e:	883b      	ldrh	r3, [r7, #0]
 8001790:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001792:	232a      	movs	r3, #42	; 0x2a
 8001794:	763b      	strb	r3, [r7, #24]
 8001796:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800179a:	121b      	asrs	r3, r3, #8
 800179c:	b21b      	sxth	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	767b      	strb	r3, [r7, #25]
 80017a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	76bb      	strb	r3, [r7, #26]
 80017a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80017ac:	121b      	asrs	r3, r3, #8
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	76fb      	strb	r3, [r7, #27]
 80017b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017ba:	f107 0318 	add.w	r3, r7, #24
 80017be:	2104      	movs	r1, #4
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5d 	bl	8001680 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80017c6:	232b      	movs	r3, #43	; 0x2b
 80017c8:	743b      	strb	r3, [r7, #16]
 80017ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017ce:	121b      	asrs	r3, r3, #8
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	747b      	strb	r3, [r7, #17]
 80017d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	74bb      	strb	r3, [r7, #18]
 80017dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017e0:	121b      	asrs	r3, r3, #8
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	74fb      	strb	r3, [r7, #19]
 80017e8:	8c3b      	ldrh	r3, [r7, #32]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	2104      	movs	r1, #4
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff43 	bl	8001680 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80017fa:	232c      	movs	r3, #44	; 0x2c
 80017fc:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff3b 	bl	8001680 <LCD_WriteCommand>
  }
}
 800180a:	bf00      	nop
 800180c:	372c      	adds	r7, #44	; 0x2c
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
	...

08001814 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
 800181e:	460b      	mov	r3, r1
 8001820:	80bb      	strh	r3, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db39      	blt.n	80018a2 <LCD_DrawPixel+0x8e>
 800182e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001832:	2bef      	cmp	r3, #239	; 0xef
 8001834:	dc35      	bgt.n	80018a2 <LCD_DrawPixel+0x8e>
 8001836:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db31      	blt.n	80018a2 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800183e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001842:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001846:	da2c      	bge.n	80018a2 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	733b      	strb	r3, [r7, #12]
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8001858:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800185c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001860:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001864:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001868:	f7ff ff7c 	bl	8001764 <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <LCD_DrawPixel+0x98>)
 8001874:	f006 fdb4 	bl	80083e0 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187e:	480b      	ldr	r0, [pc, #44]	; (80018ac <LCD_DrawPixel+0x98>)
 8001880:	f006 fdae 	bl	80083e0 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001884:	f107 010c 	add.w	r1, r7, #12
 8001888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188c:	2202      	movs	r2, #2
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <LCD_DrawPixel+0x9c>)
 8001890:	f00a fced 	bl	800c26e <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800189a:	4804      	ldr	r0, [pc, #16]	; (80018ac <LCD_DrawPixel+0x98>)
 800189c:	f006 fda0 	bl	80083e0 <HAL_GPIO_WritePin>
 80018a0:	e000      	b.n	80018a4 <LCD_DrawPixel+0x90>
    return;
 80018a2:	bf00      	nop
#endif
}
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	48001000 	.word	0x48001000
 80018b0:	20000840 	.word	0x20000840

080018b4 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b094      	sub	sp, #80	; 0x50
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80018c0:	2300      	movs	r3, #0
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018c4:	e009      	b.n	80018da <LCD_FillPixels+0x26>
      fill[t]=color;
 80018c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	3350      	adds	r3, #80	; 0x50
 80018cc:	443b      	add	r3, r7
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80018d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d6:	3301      	adds	r3, #1
 80018d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b20      	cmp	r3, #32
 80018de:	bf28      	it	cs
 80018e0:	2320      	movcs	r3, #32
 80018e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d3ee      	bcc.n	80018c6 <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 80018e8:	e00e      	b.n	8001908 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	bf28      	it	cs
 80018f0:	2320      	movcs	r3, #32
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fefc 	bl	80016f8 <LCD_WriteData>
      pixels-=sz;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ed      	bne.n	80018ea <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	3750      	adds	r7, #80	; 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4604      	mov	r4, r0
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	80fb      	strh	r3, [r7, #6]
 800192a:	4603      	mov	r3, r0
 800192c:	80bb      	strh	r3, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	807b      	strh	r3, [r7, #2]
 8001932:	4613      	mov	r3, r2
 8001934:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800193e:	d104      	bne.n	800194a <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fe5f 	bl	8001604 <setSPI_Size>
#endif
    return NULL;
 8001946:	2300      	movs	r3, #0
 8001948:	e013      	b.n	8001972 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800194a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800194e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001952:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001956:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800195a:	f7ff ff03 	bl	8001764 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff fe50 	bl	8001604 <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196a:	4804      	ldr	r0, [pc, #16]	; (800197c <LCD_FillArea+0x64>)
 800196c:	f006 fd38 	bl	80083e0 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <LCD_FillArea+0x68>)
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	bf00      	nop
 800197c:	48001000 	.word	0x48001000
 8001980:	080018b5 	.word	0x080018b5

08001984 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	4604      	mov	r4, r0
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4623      	mov	r3, r4
 8001994:	80fb      	strh	r3, [r7, #6]
 8001996:	4603      	mov	r3, r0
 8001998:	80bb      	strh	r3, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	807b      	strh	r3, [r7, #2]
 800199e:	4613      	mov	r3, r2
 80019a0:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	4619      	mov	r1, r3
 80019ac:	883a      	ldrh	r2, [r7, #0]
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80019ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019ca:	f7ff fecb 	bl	8001764 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff fe18 	bl	8001604 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 80019d4:	8c3b      	ldrh	r3, [r7, #32]
 80019d6:	4619      	mov	r1, r3
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff ff6b 	bl	80018b4 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff fe10 	bl	8001604 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd90      	pop	{r4, r7, pc}

080019ee <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80019ee:	b590      	push	{r4, r7, lr}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	603a      	str	r2, [r7, #0]
 80019f8:	80fb      	strh	r3, [r7, #6]
 80019fa:	460b      	mov	r3, r1
 80019fc:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	889b      	ldrh	r3, [r3, #4]
 8001a02:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	88db      	ldrh	r3, [r3, #6]
 8001a08:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2bef      	cmp	r3, #239	; 0xef
 8001a0e:	d837      	bhi.n	8001a80 <LCD_DrawImage+0x92>
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001a16:	d233      	bcs.n	8001a80 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2bf0      	cmp	r3, #240	; 0xf0
 8001a20:	dc30      	bgt.n	8001a84 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001a22:	88ba      	ldrh	r2, [r7, #4]
 8001a24:	89bb      	ldrh	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001a2c:	dc2c      	bgt.n	8001a88 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	7a1b      	ldrb	r3, [r3, #8]
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d12a      	bne.n	8001a8c <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001a36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a3a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	4413      	add	r3, r2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b21c      	sxth	r4, r3
 8001a4c:	88ba      	ldrh	r2, [r7, #4]
 8001a4e:	89bb      	ldrh	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	f7ff fe82 	bl	8001764 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fdcf 	bl	8001604 <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	89ba      	ldrh	r2, [r7, #12]
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff fe40 	bl	80016f8 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fdc3 	bl	8001604 <setSPI_Size>
 8001a7e:	e006      	b.n	8001a8e <LCD_DrawImage+0xa0>
    return;
 8001a80:	bf00      	nop
 8001a82:	e004      	b.n	8001a8e <LCD_DrawImage+0xa0>
    return;
 8001a84:	bf00      	nop
 8001a86:	e002      	b.n	8001a8e <LCD_DrawImage+0xa0>
    return;
 8001a88:	bf00      	nop
 8001a8a:	e000      	b.n	8001a8e <LCD_DrawImage+0xa0>
    return;
 8001a8c:	bf00      	nop
#endif
  }
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}

08001a94 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	80fb      	strh	r3, [r7, #6]
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80bb      	strh	r3, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d10a      	bne.n	8001ad0 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001aba:	88ba      	ldrh	r2, [r7, #4]
 8001abc:	883b      	ldrh	r3, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d918      	bls.n	8001af4 <LCD_DrawLine+0x60>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	81bb      	strh	r3, [r7, #12]
 8001ac6:	883b      	ldrh	r3, [r7, #0]
 8001ac8:	80bb      	strh	r3, [r7, #4]
 8001aca:	89bb      	ldrh	r3, [r7, #12]
 8001acc:	803b      	strh	r3, [r7, #0]
 8001ace:	e011      	b.n	8001af4 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001ad0:	88ba      	ldrh	r2, [r7, #4]
 8001ad2:	883b      	ldrh	r3, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d10a      	bne.n	8001aee <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d909      	bls.n	8001af4 <LCD_DrawLine+0x60>
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	81fb      	strh	r3, [r7, #14]
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	80fb      	strh	r3, [r7, #6]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	807b      	strh	r3, [r7, #2]
 8001aec:	e002      	b.n	8001af4 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af2:	e009      	b.n	8001b08 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001af4:	883c      	ldrh	r4, [r7, #0]
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	88b9      	ldrh	r1, [r7, #4]
 8001afa:	88f8      	ldrh	r0, [r7, #6]
 8001afc:	8c3b      	ldrh	r3, [r7, #32]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4623      	mov	r3, r4
 8001b02:	f7ff ff3f 	bl	8001984 <LCD_Fill>
  return UG_RESULT_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}

08001b10 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	4603      	mov	r3, r0
 8001b1a:	81fb      	strh	r3, [r7, #14]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	81bb      	strh	r3, [r7, #12]
 8001b20:	4613      	mov	r3, r2
 8001b22:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f003 fa65 	bl	8004ff4 <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	b298      	uxth	r0, r3
 8001b2e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001b32:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b36:	8c3c      	ldrh	r4, [r7, #32]
 8001b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	f003 fc5b 	bl	80053f8 <UG_PutChar>
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd90      	pop	{r4, r7, pc}

08001b4a <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	4603      	mov	r3, r0
 8001b56:	81fb      	strh	r3, [r7, #14]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f003 fa49 	bl	8004ff4 <UG_FontSelect>
  UG_SetForecolor(color);
 8001b62:	8b3b      	ldrh	r3, [r7, #24]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fc83 	bl	8005470 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001b6a:	8bbb      	ldrh	r3, [r7, #28]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fc91 	bl	8005494 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b76:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fba3 	bl	80052c8 <UG_PutString>
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <LCD_setPower+0x14>
 8001b9a:	2329      	movs	r3, #41	; 0x29
 8001b9c:	e000      	b.n	8001ba0 <LCD_setPower+0x16>
 8001b9e:	2328      	movs	r3, #40	; 0x28
 8001ba0:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd69 	bl	8001680 <LCD_WriteCommand>
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <LCD_Update>:

static void LCD_Update(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff fd22 	bl	8001604 <setSPI_Size>
  #endif
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd0:	4829      	ldr	r0, [pc, #164]	; (8001c78 <LCD_init+0xb4>)
 8001bd2:	f006 fc05 	bl	80083e0 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	4827      	ldr	r0, [pc, #156]	; (8001c78 <LCD_init+0xb4>)
 8001bdc:	f006 fc00 	bl	80083e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f004 ffe9 	bl	8006bb8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	4823      	ldr	r0, [pc, #140]	; (8001c78 <LCD_init+0xb4>)
 8001bec:	f006 fbf8 	bl	80083e0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001bf0:	20c8      	movs	r0, #200	; 0xc8
 8001bf2:	f004 ffe1 	bl	8006bb8 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001bf6:	4921      	ldr	r1, [pc, #132]	; (8001c7c <LCD_init+0xb8>)
 8001bf8:	4821      	ldr	r0, [pc, #132]	; (8001c80 <LCD_init+0xbc>)
 8001bfa:	f003 f961 	bl	8004ec0 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001bfe:	4921      	ldr	r1, [pc, #132]	; (8001c84 <LCD_init+0xc0>)
 8001c00:	2000      	movs	r0, #0
 8001c02:	f004 fcef 	bl	80065e4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001c06:	4920      	ldr	r1, [pc, #128]	; (8001c88 <LCD_init+0xc4>)
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f004 fceb 	bl	80065e4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001c0e:	491f      	ldr	r1, [pc, #124]	; (8001c8c <LCD_init+0xc8>)
 8001c10:	2002      	movs	r0, #2
 8001c12:	f004 fce7 	bl	80065e4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001c16:	491e      	ldr	r1, [pc, #120]	; (8001c90 <LCD_init+0xcc>)
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f004 fce3 	bl	80065e4 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f003 fc4a 	bl	80054b8 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f003 fc5b 	bl	80054e0 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	80fb      	strh	r3, [r7, #6]
 8001c2e:	e013      	b.n	8001c58 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <LCD_init+0xd0>)
 8001c36:	441a      	add	r2, r3
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	4916      	ldr	r1, [pc, #88]	; (8001c94 <LCD_init+0xd0>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f7ff fd1d 	bl	8001680 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <LCD_init+0xd0>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3302      	adds	r3, #2
 8001c56:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2b4b      	cmp	r3, #75	; 0x4b
 8001c5c:	d9e8      	bls.n	8001c30 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f003 f9d8 	bl	8005014 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff ff90 	bl	8001b8a <LCD_setPower>
  UG_Update();
 8001c6a:	f004 fcdd 	bl	8006628 <UG_Update>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	48001000 	.word	0x48001000
 8001c7c:	20000014 	.word	0x20000014
 8001c80:	20000288 	.word	0x20000288
 8001c84:	08001a95 	.word	0x08001a95
 8001c88:	08001985 	.word	0x08001985
 8001c8c:	08001919 	.word	0x08001919
 8001c90:	080019ef 	.word	0x080019ef
 8001c94:	080181b4 	.word	0x080181b4

08001c98 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6858      	ldr	r0, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8adb      	ldrh	r3, [r3, #22]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f006 fb8f 	bl	80083e0 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	1cf9      	adds	r1, r7, #3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f00a face 	bl	800c26e <HAL_SPI_Transmit>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f107 010f 	add.w	r1, r7, #15
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f00a fc38 	bl	800c558 <HAL_SPI_Receive>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6858      	ldr	r0, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	8adb      	ldrh	r3, [r3, #22]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f006 fb72 	bl	80083e0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
 8001d12:	4613      	mov	r3, r2
 8001d14:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d1c:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001d1e:	78bb      	ldrb	r3, [r7, #2]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6858      	ldr	r0, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	8adb      	ldrh	r3, [r3, #22]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f006 fb50 	bl	80083e0 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f107 010a 	add.w	r1, r7, #10
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f00a fa8e 	bl	800c26e <HAL_SPI_Transmit>
 8001d52:	4603      	mov	r3, r0
 8001d54:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6858      	ldr	r0, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	8adb      	ldrh	r3, [r3, #22]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4619      	mov	r1, r3
 8001d62:	f006 fb3d 	bl	80083e0 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b088      	sub	sp, #32
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6858      	ldr	r0, [r3, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8adb      	ldrh	r3, [r3, #22]
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	f006 fb24 	bl	80083e0 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f107 0117 	add.w	r1, r7, #23
 8001da4:	2201      	movs	r2, #1
 8001da6:	f00a fa62 	bl	800c26e <HAL_SPI_Transmit>
 8001daa:	4603      	mov	r3, r0
 8001dac:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d108      	bne.n	8001dc6 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	79fa      	ldrb	r2, [r7, #7]
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00a ff24 	bl	800cc0c <HAL_SPI_Transmit_DMA>
 8001dc4:	e012      	b.n	8001dec <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	f00a fa4b 	bl	800c26e <HAL_SPI_Transmit>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6858      	ldr	r0, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8adb      	ldrh	r3, [r3, #22]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4619      	mov	r1, r3
 8001de8:	f006 fafa 	bl	80083e0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b088      	sub	sp, #32
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	460b      	mov	r3, r1
 8001e02:	71fb      	strb	r3, [r7, #7]
 8001e04:	4613      	mov	r3, r2
 8001e06:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6858      	ldr	r0, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8adb      	ldrh	r3, [r3, #22]
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	f006 fae2 	bl	80083e0 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f107 0117 	add.w	r1, r7, #23
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f00a fa20 	bl	800c26e <HAL_SPI_Transmit>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8001e32:	79bb      	ldrb	r3, [r7, #6]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10a      	bne.n	8001e4e <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	79fa      	ldrb	r2, [r7, #7]
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00a ffd2 	bl	800cdec <HAL_SPI_Receive_DMA>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001e4c:	e012      	b.n	8001e74 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	f00a fb7c 	bl	800c558 <HAL_SPI_Receive>
 8001e60:	4603      	mov	r3, r0
 8001e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6858      	ldr	r0, [r3, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8adb      	ldrh	r3, [r3, #22]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f006 fab6 	bl	80083e0 <HAL_GPIO_WritePin>
}
 8001e74:	bf00      	nop
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	2101      	movs	r1, #1
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff36 	bl	8001d06 <write_register>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	2b2c      	cmp	r3, #44	; 0x2c
 8001eb4:	d801      	bhi.n	8001eba <set_OCP+0x16>
    imax = 45;
 8001eb6:	232d      	movs	r3, #45	; 0x2d
 8001eb8:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	2bf0      	cmp	r3, #240	; 0xf0
 8001ebe:	d901      	bls.n	8001ec4 <set_OCP+0x20>
    imax = 240;
 8001ec0:	23f0      	movs	r3, #240	; 0xf0
 8001ec2:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	2b81      	cmp	r3, #129	; 0x81
 8001ec8:	d809      	bhi.n	8001ede <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	3b2d      	subs	r3, #45	; 0x2d
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <set_OCP+0x68>)
 8001ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed4:	1052      	asrs	r2, r2, #1
 8001ed6:	17db      	asrs	r3, r3, #31
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e008      	b.n	8001ef0 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	331e      	adds	r3, #30
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <set_OCP+0x68>)
 8001ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee8:	1092      	asrs	r2, r2, #2
 8001eea:	17db      	asrs	r3, r3, #31
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	f043 0320 	orr.w	r3, r3, #32
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	210b      	movs	r1, #11
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff02 	bl	8001d06 <write_register>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	66666667 	.word	0x66666667

08001f10 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001f18:	211d      	movs	r1, #29
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff febc 	bl	8001c98 <read_register>
 8001f20:	4603      	mov	r3, r0
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2200      	movs	r2, #0
 8001f2a:	461c      	mov	r4, r3
 8001f2c:	4615      	mov	r5, r2
 8001f2e:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001f32:	211e      	movs	r1, #30
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff feaf 	bl	8001c98 <read_register>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001f40:	2304      	movs	r3, #4
 8001f42:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b0a      	cmp	r3, #10
 8001f48:	d908      	bls.n	8001f5c <set_low_data_rate_optimization+0x4c>
 8001f4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f4e:	1fd1      	subs	r1, r2, #7
 8001f50:	430b      	orrs	r3, r1
 8001f52:	d103      	bne.n	8001f5c <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001f54:	7ffb      	ldrb	r3, [r7, #31]
 8001f56:	f043 0308 	orr.w	r3, r3, #8
 8001f5a:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001f5c:	7ffb      	ldrb	r3, [r7, #31]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2126      	movs	r1, #38	; 0x26
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fecf 	bl	8001d06 <write_register>
}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}

08001f70 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff7e 	bl	8001e7c <set_mode>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7d5b      	ldrb	r3, [r3, #21]
 8001f94:	461a      	mov	r2, r3
 8001f96:	210f      	movs	r1, #15
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff feb4 	bl	8001d06 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8001f9e:	22f0      	movs	r2, #240	; 0xf0
 8001fa0:	2112      	movs	r1, #18
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff feaf 	bl	8001d06 <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8001fa8:	2105      	movs	r1, #5
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff66 	bl	8001e7c <set_mode>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff5a 	bl	8001e7c <set_mode>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001fd8:	211d      	movs	r1, #29
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fe5c 	bl	8001c98 <read_register>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	211d      	movs	r1, #29
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fe87 	bl	8001d06 <write_register>
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10e      	bne.n	8002032 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	d901      	bls.n	800201e <lora_set_tx_power+0x1e>
      level = 15;
 800201a:	230f      	movs	r3, #15
 800201c:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	2109      	movs	r1, #9
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fe6b 	bl	8001d06 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8002030:	e02e      	b.n	8002090 <lora_set_tx_power+0x90>
    if (level > 20) {
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	2b14      	cmp	r3, #20
 8002036:	d901      	bls.n	800203c <lora_set_tx_power+0x3c>
      level = 20;
 8002038:	2314      	movs	r3, #20
 800203a:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d801      	bhi.n	8002046 <lora_set_tx_power+0x46>
      level = 2;
 8002042:	2302      	movs	r3, #2
 8002044:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	2b11      	cmp	r3, #17
 800204a:	d90c      	bls.n	8002066 <lora_set_tx_power+0x66>
      level -= 3;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	3b03      	subs	r3, #3
 8002050:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8002052:	2287      	movs	r2, #135	; 0x87
 8002054:	214d      	movs	r1, #77	; 0x4d
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fe55 	bl	8001d06 <write_register>
      set_OCP(lora, 140);
 800205c:	218c      	movs	r1, #140	; 0x8c
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff20 	bl	8001ea4 <set_OCP>
 8002064:	e008      	b.n	8002078 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8002066:	2284      	movs	r2, #132	; 0x84
 8002068:	214d      	movs	r1, #77	; 0x4d
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fe4b 	bl	8001d06 <write_register>
      set_OCP(lora, 97);
 8002070:	2161      	movs	r1, #97	; 0x61
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff16 	bl	8001ea4 <set_OCP>
    level -= 2;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	3b02      	subs	r3, #2
 800207c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	2109      	movs	r1, #9
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fe3b 	bl	8001d06 <write_register>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80020a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020a8:	f04f 0000 	mov.w	r0, #0
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	04d9      	lsls	r1, r3, #19
 80020b2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80020b6:	04d0      	lsls	r0, r2, #19
 80020b8:	4a19      	ldr	r2, [pc, #100]	; (8002120 <lora_set_frequency+0x88>)
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	f7fe fd8b 	bl	8000bd8 <__aeabi_uldivmod>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80020ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	0c02      	lsrs	r2, r0, #16
 80020d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020dc:	0c0b      	lsrs	r3, r1, #16
 80020de:	b2d3      	uxtb	r3, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	2106      	movs	r1, #6
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fe0e 	bl	8001d06 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80020ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	0a02      	lsrs	r2, r0, #8
 80020f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80020fc:	0a0b      	lsrs	r3, r1, #8
 80020fe:	b2d3      	uxtb	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	2107      	movs	r1, #7
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff fdfe 	bl	8001d06 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800210a:	7c3b      	ldrb	r3, [r7, #16]
 800210c:	461a      	mov	r2, r3
 800210e:	2108      	movs	r1, #8
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7ff fdf8 	bl	8001d06 <write_register>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	01e84800 	.word	0x01e84800

08002124 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	2b05      	cmp	r3, #5
 8002134:	d802      	bhi.n	800213c <lora_set_spreading_factor+0x18>
    sf = 6;
 8002136:	2306      	movs	r3, #6
 8002138:	70fb      	strb	r3, [r7, #3]
 800213a:	e004      	b.n	8002146 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d901      	bls.n	8002146 <lora_set_spreading_factor+0x22>
    sf = 12;
 8002142:	230c      	movs	r3, #12
 8002144:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d10a      	bne.n	8002162 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 800214c:	22c5      	movs	r2, #197	; 0xc5
 800214e:	2131      	movs	r1, #49	; 0x31
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fdd8 	bl	8001d06 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8002156:	220c      	movs	r2, #12
 8002158:	2137      	movs	r1, #55	; 0x37
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fdd3 	bl	8001d06 <write_register>
 8002160:	e009      	b.n	8002176 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8002162:	22c3      	movs	r2, #195	; 0xc3
 8002164:	2131      	movs	r1, #49	; 0x31
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fdcd 	bl	8001d06 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 800216c:	220a      	movs	r2, #10
 800216e:	2137      	movs	r1, #55	; 0x37
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fdc8 	bl	8001d06 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8002176:	211e      	movs	r1, #30
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fd8d 	bl	8001c98 <read_register>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	b25a      	sxtb	r2, r3
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	b25b      	sxtb	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b25b      	sxtb	r3, r3
 8002196:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	461a      	mov	r2, r3
 800219c:	211e      	movs	r1, #30
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fdb1 	bl	8001d06 <write_register>

  set_low_data_rate_optimization(lora);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff feb3 	bl	8001f10 <set_low_data_rate_optimization>
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	2120      	movs	r1, #32
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fd9b 	bl	8001d06 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	2121      	movs	r1, #33	; 0x21
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fd91 	bl	8001d06 <write_register>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80021f4:	2142      	movs	r1, #66	; 0x42
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fd4e 	bl	8001c98 <read_register>
 80021fc:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 800220e:	2101      	movs	r1, #1
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fd41 	bl	8001c98 <read_register>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d101      	bne.n	8002228 <lora_is_transmitting+0x22>
 8002224:	2305      	movs	r3, #5
 8002226:	e000      	b.n	800222a <lora_is_transmitting+0x24>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	4611      	mov	r1, r2
 800223e:	461a      	mov	r2, r3
 8002240:	460b      	mov	r3, r1
 8002242:	71fb      	strb	r3, [r7, #7]
 8002244:	4613      	mov	r3, r2
 8002246:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff ffdc 	bl	8002206 <lora_is_transmitting>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8002254:	2305      	movs	r3, #5
 8002256:	e02a      	b.n	80022ae <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8002258:	2101      	movs	r1, #1
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff fe0e 	bl	8001e7c <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f911 	bl	8002488 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	7d1b      	ldrb	r3, [r3, #20]
 800226a:	461a      	mov	r2, r3
 800226c:	210d      	movs	r1, #13
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff fd49 	bl	8001d06 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	7d1b      	ldrb	r3, [r3, #20]
 8002278:	461a      	mov	r2, r3
 800227a:	210e      	movs	r1, #14
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff fd42 	bl	8001d06 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	461a      	mov	r2, r3
 8002286:	2122      	movs	r1, #34	; 0x22
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff fd3c 	bl	8001d06 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7ff fd6a 	bl	8001d6e <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <lora_send_packet_base+0x72>
    return LORA_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e004      	b.n	80022ae <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 80022a4:	2103      	movs	r1, #3
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7ff fde8 	bl	8001e7c <set_mode>
  return LORA_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80022c4:	79fa      	ldrb	r2, [r7, #7]
 80022c6:	2302      	movs	r3, #2
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7ff ffb1 	bl	8002232 <lora_send_packet_base>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80022e2:	2112      	movs	r1, #18
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fcd7 	bl	8001c98 <read_register>
 80022ea:	4603      	mov	r3, r0
 80022ec:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f4:	b2db      	uxtb	r3, r3
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8002306:	211d      	movs	r1, #29
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff fcc5 	bl	8001c98 <read_register>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 800231c:	2122      	movs	r1, #34	; 0x22
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fcba 	bl	8001c98 <read_register>
 8002324:	4603      	mov	r3, r0
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e005      	b.n	8002336 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 800232a:	2113      	movs	r1, #19
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fcb3 	bl	8001c98 <read_register>
 8002332:	4603      	mov	r3, r0
 8002334:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8002350:	2306      	movs	r3, #6
 8002352:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8002358:	2112      	movs	r1, #18
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff fc9c 	bl	8001c98 <read_register>
 8002360:	4603      	mov	r3, r0
 8002362:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8002364:	22f0      	movs	r2, #240	; 0xf0
 8002366:	2112      	movs	r1, #18
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff fccc 	bl	8001d06 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 800236e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002372:	2b00      	cmp	r3, #0
 8002374:	da02      	bge.n	800237c <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8002376:	2302      	movs	r3, #2
 8002378:	75fb      	strb	r3, [r7, #23]
    goto done;
 800237a:	e030      	b.n	80023de <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 800237c:	7d7b      	ldrb	r3, [r7, #21]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d02a      	beq.n	80023dc <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8002386:	7d7b      	ldrb	r3, [r7, #21]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8002390:	2303      	movs	r3, #3
 8002392:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002394:	e023      	b.n	80023de <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8002396:	7d7b      	ldrb	r3, [r7, #21]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
      goto done;
 80023a4:	e01b      	b.n	80023de <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7ff ffa9 	bl	80022fe <lora_pending_packet_length>
 80023ac:	4603      	mov	r3, r0
 80023ae:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 80023b0:	2110      	movs	r1, #16
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff fc70 	bl	8001c98 <read_register>
 80023b8:	4603      	mov	r3, r0
 80023ba:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 80023bc:	7d3b      	ldrb	r3, [r7, #20]
 80023be:	461a      	mov	r2, r3
 80023c0:	210d      	movs	r1, #13
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff fc9f 	bl	8001d06 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 80023c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023cc:	7dba      	ldrb	r2, [r7, #22]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff fd0e 	bl	8001df2 <read_fifo>
    res = LORA_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]
 80023da:	e000      	b.n	80023de <lora_receive_packet_base+0x9e>
  }

done:
 80023dc:	bf00      	nop
  if (error) {
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <lora_receive_packet_base+0xaa>
    *error = res;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	7dfa      	ldrb	r2, [r7, #23]
 80023e8:	701a      	strb	r2, [r3, #0]
  }

  return len;
 80023ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8002404:	79fa      	ldrb	r2, [r7, #7]
 8002406:	2302      	movs	r3, #2
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff ff96 	bl	8002340 <lora_receive_packet_base>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8002432:	e00b      	b.n	800244c <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff ff50 	bl	80022da <lora_is_packet_available>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8002440:	2001      	movs	r0, #1
 8002442:	f004 fbb9 	bl	8006bb8 <HAL_Delay>
    elapsed++;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3301      	adds	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d3ef      	bcc.n	8002434 <lora_receive_packet_blocking+0x16>
 8002454:	e000      	b.n	8002458 <lora_receive_packet_blocking+0x3a>
      break;
 8002456:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f7ff ffc8 	bl	80023f4 <lora_receive_packet>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <lora_enable_interrupt_rx_done>:

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8002476:	2200      	movs	r2, #0
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fc43 	bl	8001d06 <write_register>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8002490:	2208      	movs	r2, #8
 8002492:	2112      	movs	r1, #18
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fc36 	bl	8001d06 <write_register>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80024c2:	6a3a      	ldr	r2, [r7, #32]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024e0:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fe82 	bl	80021ec <lora_version>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b12      	cmp	r3, #18
 80024f0:	d001      	beq.n	80024f6 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80024f2:	2304      	movs	r3, #4
 80024f4:	e031      	b.n	800255a <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fd3a 	bl	8001f70 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff fd37 	bl	8001f70 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8002502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff fdc6 	bl	8002098 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800250c:	2107      	movs	r1, #7
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff fe08 	bl	8002124 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8002514:	210a      	movs	r1, #10
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff fe4b 	bl	80021b2 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff fd57 	bl	8001fd0 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8002522:	210c      	movs	r1, #12
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f7ff fbb7 	bl	8001c98 <read_register>
 800252a:	4603      	mov	r3, r0
 800252c:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 800252e:	7dbb      	ldrb	r3, [r7, #22]
 8002530:	f043 0303 	orr.w	r3, r3, #3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	210c      	movs	r1, #12
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff fbe3 	bl	8001d06 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8002540:	2204      	movs	r2, #4
 8002542:	2126      	movs	r1, #38	; 0x26
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7ff fbde 	bl	8001d06 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 800254a:	2111      	movs	r1, #17
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff fd57 	bl	8002000 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7ff fd30 	bl	8001fb8 <lora_mode_standby>

  return LORA_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	0000      	movs	r0, r0
 8002564:	0000      	movs	r0, r0
	...

08002568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	b0ed      	sub	sp, #436	; 0x1b4
 800256c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 800256e:	4bb0      	ldr	r3, [pc, #704]	; (8002830 <main+0x2c8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4aaf      	ldr	r2, [pc, #700]	; (8002830 <main+0x2c8>)
 8002574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002578:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 800257a:	4bae      	ldr	r3, [pc, #696]	; (8002834 <main+0x2cc>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 8002580:	4bac      	ldr	r3, [pc, #688]	; (8002834 <main+0x2cc>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002586:	f004 faa2 	bl	8006ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800258a:	f000 fb79 	bl	8002c80 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800258e:	f000 fbd9 	bl	8002d44 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002592:	f001 faa3 	bl	8003adc <MX_GPIO_Init>
  MX_ADC1_Init();
 8002596:	f000 fc09 	bl	8002dac <MX_ADC1_Init>
  MX_COMP1_Init();
 800259a:	f000 fc6b 	bl	8002e74 <MX_COMP1_Init>
  MX_COMP2_Init();
 800259e:	f000 fc97 	bl	8002ed0 <MX_COMP2_Init>
  MX_I2C1_Init();
 80025a2:	f000 fcc1 	bl	8002f28 <MX_I2C1_Init>
  MX_I2C2_Init();
 80025a6:	f000 fcff 	bl	8002fa8 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80025aa:	f000 fd3d 	bl	8003028 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80025ae:	f000 fd87 	bl	80030c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025b2:	f000 fdd1 	bl	8003158 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 80025b6:	f000 fe1b 	bl	80031f0 <MX_SAI1_Init>
  MX_SAI2_Init();
 80025ba:	f000 feb1 	bl	8003320 <MX_SAI2_Init>
  MX_SPI3_Init();
 80025be:	f000 ff55 	bl	800346c <MX_SPI3_Init>
  MX_TIM1_Init();
 80025c2:	f000 ff91 	bl	80034e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80025c6:	f001 f847 	bl	8003658 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025ca:	f001 f8a9 	bl	8003720 <MX_TIM3_Init>
  MX_TIM4_Init();
 80025ce:	f001 f929 	bl	8003824 <MX_TIM4_Init>
  MX_TIM15_Init();
 80025d2:	f001 f981 	bl	80038d8 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 80025d6:	f001 fa79 	bl	8003acc <MX_USB_OTG_FS_USB_Init>
  MX_TIM17_Init();
 80025da:	f001 fa01 	bl	80039e0 <MX_TIM17_Init>
  MX_SPI2_Init();
 80025de:	f000 ff07 	bl	80033f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80025e2:	2108      	movs	r1, #8
 80025e4:	4894      	ldr	r0, [pc, #592]	; (8002838 <main+0x2d0>)
 80025e6:	f00b fb61 	bl	800dcac <HAL_TIM_PWM_Start>


//  ENABLE_LORA_REPEATEDLY(&lora);
  // IDK why, but the function causes a hard fault, while keeping the loop here is safe
  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 80025ea:	a38f      	add	r3, pc, #572	; (adr r3, 8002828 <main+0x2c0>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	e9cd 2300 	strd	r2, r3, [sp]
 80025f4:	2301      	movs	r3, #1
 80025f6:	4a91      	ldr	r2, [pc, #580]	; (800283c <main+0x2d4>)
 80025f8:	4991      	ldr	r1, [pc, #580]	; (8002840 <main+0x2d8>)
 80025fa:	4892      	ldr	r0, [pc, #584]	; (8002844 <main+0x2dc>)
 80025fc:	f7ff ff51 	bl	80024a2 <lora_init>
 8002600:	4603      	mov	r3, r0
 8002602:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	 while (res != LORA_OK) {
 8002606:	e010      	b.n	800262a <main+0xc2>
	   // Initialization failed
		 HAL_Delay(100);
 8002608:	2064      	movs	r0, #100	; 0x64
 800260a:	f004 fad5 	bl	8006bb8 <HAL_Delay>
		 res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 800260e:	a386      	add	r3, pc, #536	; (adr r3, 8002828 <main+0x2c0>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	e9cd 2300 	strd	r2, r3, [sp]
 8002618:	2301      	movs	r3, #1
 800261a:	4a88      	ldr	r2, [pc, #544]	; (800283c <main+0x2d4>)
 800261c:	4988      	ldr	r1, [pc, #544]	; (8002840 <main+0x2d8>)
 800261e:	4889      	ldr	r0, [pc, #548]	; (8002844 <main+0x2dc>)
 8002620:	f7ff ff3f 	bl	80024a2 <lora_init>
 8002624:	4603      	mov	r3, r0
 8002626:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	 while (res != LORA_OK) {
 800262a:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ea      	bne.n	8002608 <main+0xa0>
	 }
//  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
//  	     if (res != LORA_OK) {
//  	       // Initialization failed
//  	     }
LCD_init();
 8002632:	f7ff fac7 	bl	8001bc4 <LCD_init>
lora_enable_interrupt_rx_done(&lora);
 8002636:	4883      	ldr	r0, [pc, #524]	; (8002844 <main+0x2dc>)
 8002638:	f7ff ff19 	bl	800246e <lora_enable_interrupt_rx_done>
lora_mode_receive_continuous(&lora);
 800263c:	4881      	ldr	r0, [pc, #516]	; (8002844 <main+0x2dc>)
 800263e:	f7ff fca3 	bl	8001f88 <lora_mode_receive_continuous>
JOYSTICK_INIT(hi2c1);
 8002642:	4c81      	ldr	r4, [pc, #516]	; (8002848 <main+0x2e0>)
 8002644:	4668      	mov	r0, sp
 8002646:	f104 0310 	add.w	r3, r4, #16
 800264a:	2244      	movs	r2, #68	; 0x44
 800264c:	4619      	mov	r1, r3
 800264e:	f00e fb20 	bl	8010c92 <memcpy>
 8002652:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002656:	f7fe fcdd 	bl	8001014 <JOYSTICK_INIT>
TempHum_t data;
initTempHumSensor(&hi2c2);
 800265a:	487c      	ldr	r0, [pc, #496]	; (800284c <main+0x2e4>)
 800265c:	f7fe fc3a 	bl	8000ed4 <initTempHumSensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// 0 = runner view
// 1 = player 1 view
// 2 = weight and age input view
uint8_t current_viewport = 0; //determines what screen state you are on
 8002660:	2300      	movs	r3, #0
 8002662:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
DISPLAY_TIMER_TRIGGERED = 0;
 8002666:	4b7a      	ldr	r3, [pc, #488]	; (8002850 <main+0x2e8>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
HAL_TIM_Base_Start_IT(&htim17);
 800266c:	4879      	ldr	r0, [pc, #484]	; (8002854 <main+0x2ec>)
 800266e:	f00b f9f5 	bl	800da5c <HAL_TIM_Base_Start_IT>

// Set this pin ('D' on keypad) low for interrupt
 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002678:	4877      	ldr	r0, [pc, #476]	; (8002858 <main+0x2f0>)
 800267a:	f005 feb1 	bl	80083e0 <HAL_GPIO_WritePin>


 // DUMMY DATA FOR TESTING DATA
   struct arm_to_base armband_data = {0,0,0,0};
 800267e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
   struct arm_to_base TEMPCOPY = {0,0,0,0};
 800268c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
   struct base_to_arm buzzer = {0};
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

//   armband_data.velocity = 12.3;
//   armband_data.heartrate = 98.54;
//   armband_data.steps = 20000;
   uint16_t player_data_fill_height = 170;
 80026a0:	23aa      	movs	r3, #170	; 0xaa
 80026a2:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
   uint16_t player_data_fill_bottom = 50;
 80026a6:	2332      	movs	r3, #50	; 0x32
 80026a8:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
   char stamina_data_write_buffer[16];
   char buffer[128];
   int heartrate;
   int stepcount;

   uint8_t buzzing = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
   uint8_t wait = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
   // Only buzz once when someone passes the threshold
   // Will reset when user drops back below the threshold
   uint8_t buzz_triggered = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
    /* USER CODE BEGIN 3 */
	  // STATE MACHINE HERE
	  // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
	  // Joystick allows user to switch between states

	  uint8_t lr = threshold();
 80026be:	f7fe fd2f 	bl	8001120 <threshold>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
	  // Toggle current_viewport when joystick right
	  if (lr == 2) {
 80026c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d11f      	bne.n	8002710 <main+0x1a8>
		  current_viewport = (current_viewport == 2) ? 2 : 1;
 80026d0:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d101      	bne.n	80026dc <main+0x174>
 80026d8:	2302      	movs	r3, #2
 80026da:	e000      	b.n	80026de <main+0x176>
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 80026e2:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 80026e6:	2200      	movs	r2, #0
 80026e8:	9200      	str	r2, [sp, #0]
 80026ea:	22f0      	movs	r2, #240	; 0xf0
 80026ec:	2105      	movs	r1, #5
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff f948 	bl	8001984 <LCD_Fill>
		  LCD_Fill(0, player_data_fill_bottom, 240, 320, C_BLACK);
 80026f4:	f8b7 115c 	ldrh.w	r1, [r7, #348]	; 0x15c
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002700:	22f0      	movs	r2, #240	; 0xf0
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff f93e 	bl	8001984 <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002708:	4b51      	ldr	r3, [pc, #324]	; (8002850 <main+0x2e8>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e022      	b.n	8002756 <main+0x1ee>
	  }
	  // Toggle current_viewport when joystick left
	  else if(lr == 1){
 8002710:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002714:	2b01      	cmp	r3, #1
 8002716:	d11e      	bne.n	8002756 <main+0x1ee>
		  current_viewport = (current_viewport == 2) ? 2 : 0;
 8002718:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800271c:	2b02      	cmp	r3, #2
 800271e:	d101      	bne.n	8002724 <main+0x1bc>
 8002720:	2302      	movs	r3, #2
 8002722:	e000      	b.n	8002726 <main+0x1be>
 8002724:	2300      	movs	r3, #0
 8002726:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 800272a:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 800272e:	2200      	movs	r2, #0
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	22f0      	movs	r2, #240	; 0xf0
 8002734:	2105      	movs	r1, #5
 8002736:	2000      	movs	r0, #0
 8002738:	f7ff f924 	bl	8001984 <LCD_Fill>
		  LCD_Fill(0, player_data_fill_bottom, 240, 320, C_BLACK);
 800273c:	f8b7 115c 	ldrh.w	r1, [r7, #348]	; 0x15c
 8002740:	2300      	movs	r3, #0
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002748:	22f0      	movs	r2, #240	; 0xf0
 800274a:	2000      	movs	r0, #0
 800274c:	f7ff f91a 	bl	8001984 <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002750:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <main+0x2e8>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
	  }

	  if(LoRaRecieve == 1){
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <main+0x2f4>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	f040 809e 	bne.w	800289c <main+0x334>
		  //Get data
//		  	  lora_mode_receive_continuous(&lora);
		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 8002760:	4639      	mov	r1, r7
 8002762:	f207 134f 	addw	r3, r7, #335	; 0x14f
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	f242 7310 	movw	r3, #10000	; 0x2710
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	4835      	ldr	r0, [pc, #212]	; (8002844 <main+0x2dc>)
 8002770:	f7ff fe55 	bl	800241e <lora_receive_packet_blocking>
		  	  memcpy(&TEMPCOPY, &buffer, sizeof(armband_data));
 8002774:	4639      	mov	r1, r7
 8002776:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800277a:	2210      	movs	r2, #16
 800277c:	4618      	mov	r0, r3
 800277e:	f00e fa88 	bl	8010c92 <memcpy>
		  	  if (TEMPCOPY.heartrate < 1 || TEMPCOPY.heartrate > 300) {
 8002782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002786:	2b00      	cmp	r3, #0
 8002788:	dd04      	ble.n	8002794 <main+0x22c>
 800278a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800278e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002792:	dd06      	ble.n	80027a2 <main+0x23a>
		  		armband_data = TEMPCOPY;
 8002794:	f507 749a 	add.w	r4, r7, #308	; 0x134
 8002798:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800279c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800279e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  	  }
//		  	  if (res != LORA_OK) {
//		  		  // Receive failed
//		  	  }

		  	  if (heartRateHigh(armband_data.heartrate, age) || heartRateLow(armband_data.heartrate, age)){
 80027a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80027a6:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <main+0x2f8>)
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 f933 	bl	8004a18 <heartRateHigh>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <main+0x266>
 80027b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80027bc:	4a28      	ldr	r2, [pc, #160]	; (8002860 <main+0x2f8>)
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 f954 	bl	8004a70 <heartRateLow>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <main+0x27a>
		  		res = lora_send_packet(&lora, &buzzer, 1);
 80027ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80027d2:	2201      	movs	r2, #1
 80027d4:	4619      	mov	r1, r3
 80027d6:	481b      	ldr	r0, [pc, #108]	; (8002844 <main+0x2dc>)
 80027d8:	f7ff fd6d 	bl	80022b6 <lora_send_packet>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
		  	  }

		  	  // Conditions to set buzz at base station
		  	  if (get_strain_factor() < 50 && get_strain_factor() > 0) {
 80027e2:	f002 f9c7 	bl	8004b74 <get_strain_factor>
 80027e6:	eef0 7a40 	vmov.f32	s15, s0
 80027ea:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002864 <main+0x2fc>
 80027ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	d539      	bpl.n	800286c <main+0x304>
 80027f8:	f002 f9bc 	bl	8004b74 <get_strain_factor>
 80027fc:	eef0 7a40 	vmov.f32	s15, s0
 8002800:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	dd30      	ble.n	800286c <main+0x304>

		  		if (!buzz_triggered){
 800280a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800280e:	2b00      	cmp	r3, #0
 8002810:	d12f      	bne.n	8002872 <main+0x30a>
		  		TIM3->CCR3 = 15000;
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <main+0x300>)
 8002814:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
		  		buzzing = 1;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		  		buzz_triggered = 1;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
		  		if (!buzz_triggered){
 8002826:	e024      	b.n	8002872 <main+0x30a>
 8002828:	36e55840 	.word	0x36e55840
 800282c:	00000000 	.word	0x00000000
 8002830:	e000edf0 	.word	0xe000edf0
 8002834:	e0001000 	.word	0xe0001000
 8002838:	2000093c 	.word	0x2000093c
 800283c:	48000c00 	.word	0x48000c00
 8002840:	200007dc 	.word	0x200007dc
 8002844:	20000a6c 	.word	0x20000a6c
 8002848:	200003bc 	.word	0x200003bc
 800284c:	20000410 	.word	0x20000410
 8002850:	20000a84 	.word	0x20000a84
 8002854:	20000a20 	.word	0x20000a20
 8002858:	48001400 	.word	0x48001400
 800285c:	20000a86 	.word	0x20000a86
 8002860:	20000285 	.word	0x20000285
 8002864:	42480000 	.word	0x42480000
 8002868:	40000400 	.word	0x40000400
		  		}
		  	  } else {
		  		  buzz_triggered = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
		  	  }

		  	lora_mode_receive_continuous(&lora);
 8002872:	48c3      	ldr	r0, [pc, #780]	; (8002b80 <main+0x618>)
 8002874:	f7ff fb88 	bl	8001f88 <lora_mode_receive_continuous>




		  	if (!lora_is_packet_available(&lora))
 8002878:	48c1      	ldr	r0, [pc, #772]	; (8002b80 <main+0x618>)
 800287a:	f7ff fd2e 	bl	80022da <lora_is_packet_available>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <main+0x322>
		  		LoRaRecieve = 0;
 8002884:	4bbf      	ldr	r3, [pc, #764]	; (8002b84 <main+0x61c>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
		  	input_data(armband_data.heartrate, armband_data.velocity);
 800288a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800288e:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8002892:	eeb0 0a67 	vmov.f32	s0, s15
 8002896:	4618      	mov	r0, r3
 8002898:	f002 f916 	bl	8004ac8 <input_data>
	  }

	  // HOME SCREEN / RUNNER VIEW
	  if (current_viewport == 0 && DISPLAY_TIMER_TRIGGERED == 1) {
 800289c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 80b2 	bne.w	8002a0a <main+0x4a2>
 80028a6:	4bb8      	ldr	r3, [pc, #736]	; (8002b88 <main+0x620>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 80ad 	bne.w	8002a0a <main+0x4a2>
		  UG_FontSetTransparency(1);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f002 fe29 	bl	8005508 <UG_FontSetTransparency>
		  data = get_temp_hum();
 80028b6:	f7fe fb61 	bl	8000f7c <get_temp_hum>
 80028ba:	eeb0 7a40 	vmov.f32	s14, s0
 80028be:	eef0 7a60 	vmov.f32	s15, s1
 80028c2:	ed87 7a51 	vstr	s14, [r7, #324]	; 0x144
 80028c6:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148

		  // DO THE BELOW ONLY ON TIME INTERVAL
		  LCD_Fill(80, 5, 240, 120, C_BLACK);
 80028ca:	2300      	movs	r3, #0
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2378      	movs	r3, #120	; 0x78
 80028d0:	22f0      	movs	r2, #240	; 0xf0
 80028d2:	2105      	movs	r1, #5
 80028d4:	2050      	movs	r0, #80	; 0x50
 80028d6:	f7ff f855 	bl	8001984 <LCD_Fill>
		  snprintf(buffer, sizeof(buffer), "Temp: %.3f\nHumid: %.3f", data.temp, data.hum);
 80028da:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fe4a 	bl	8000578 <__aeabi_f2d>
 80028e4:	4604      	mov	r4, r0
 80028e6:	460d      	mov	r5, r1
 80028e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fe43 	bl	8000578 <__aeabi_f2d>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4638      	mov	r0, r7
 80028f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028fc:	e9cd 4500 	strd	r4, r5, [sp]
 8002900:	4aa2      	ldr	r2, [pc, #648]	; (8002b8c <main+0x624>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	f00e f87a 	bl	80109fc <sniprintf>
		  // Blue = Green
		  // 0b1111100000000000 = Blue
		  // 0b0000011111100000 = Red
		  // 0b0000000000011111 = Green

		  LCD_PutStr(5, 5, buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002908:	463a      	mov	r2, r7
 800290a:	2300      	movs	r3, #0
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4b9e      	ldr	r3, [pc, #632]	; (8002b90 <main+0x628>)
 8002916:	2105      	movs	r1, #5
 8002918:	2005      	movs	r0, #5
 800291a:	f7ff f916 	bl	8001b4a <LCD_PutStr>
//		  LCD_PutStr(50, 56, "Temp: " + data.temp + "\nHumid: " + data.hum, DEFAULT_FONT, C_GREEN, C_BLACK);
//		  float stamina = get_strain_factor();

		  //Stamina stuff below
		  // ERASE FIRST
		  LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 800291e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002922:	2300      	movs	r3, #0
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	4b99      	ldr	r3, [pc, #612]	; (8002b90 <main+0x628>)
 800292c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002930:	2005      	movs	r0, #5
 8002932:	f7ff f90a 	bl	8001b4a <LCD_PutStr>
		  LCD_PutStr(150, 288, stamina_data_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 8002936:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800293a:	2300      	movs	r3, #0
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	2300      	movs	r3, #0
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4b93      	ldr	r3, [pc, #588]	; (8002b90 <main+0x628>)
 8002944:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002948:	2096      	movs	r0, #150	; 0x96
 800294a:	f7ff f8fe 	bl	8001b4a <LCD_PutStr>
		  // Add field to buffer
		  snprintf(stamina_write_buffer, sizeof(stamina_write_buffer), "\nR1 Stamina: ");
 800294e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002952:	4a90      	ldr	r2, [pc, #576]	; (8002b94 <main+0x62c>)
 8002954:	2110      	movs	r1, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f00e f850 	bl	80109fc <sniprintf>
		  // Add value to a second buffer
		  float stamina = get_strain_factor();
 800295c:	f002 f90a 	bl	8004b74 <get_strain_factor>
 8002960:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
		  snprintf(stamina_data_write_buffer, sizeof(stamina_data_write_buffer), "%.3f", stamina);
 8002964:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8002968:	f7fd fe06 	bl	8000578 <__aeabi_f2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8002974:	e9cd 2300 	strd	r2, r3, [sp]
 8002978:	4a87      	ldr	r2, [pc, #540]	; (8002b98 <main+0x630>)
 800297a:	2110      	movs	r1, #16
 800297c:	f00e f83e 	bl	80109fc <sniprintf>
		  // Write field buffer
		  LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002980:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002984:	2300      	movs	r3, #0
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <main+0x628>)
 8002990:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002994:	2005      	movs	r0, #5
 8002996:	f7ff f8d8 	bl	8001b4a <LCD_PutStr>
		  // Write value buffer
		  uint16_t stamina_color;
		  if (stamina == -1 || stamina < 50){
 800299a:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 800299e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80029a2:	eef4 7a47 	vcmp.f32	s15, s14
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	d008      	beq.n	80029be <main+0x456>
 80029ac:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80029b0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002b9c <main+0x634>
 80029b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029bc:	d504      	bpl.n	80029c8 <main+0x460>
			  stamina_color = 0b0000011111100000; // RED
 80029be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029c2:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
 80029c6:	e010      	b.n	80029ea <main+0x482>
		  } else if (stamina > 100) {
 80029c8:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80029cc:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002bb0 <main+0x648>
 80029d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d8:	dd04      	ble.n	80029e4 <main+0x47c>
			  stamina_color = 0b0000011111111111; // YELLOW
 80029da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80029de:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
 80029e2:	e002      	b.n	80029ea <main+0x482>
		  } else {
  //			  stamina_color = C_WHITE;
			  stamina_color = 0b0000000000011111; // GREEN
 80029e4:	231f      	movs	r3, #31
 80029e6:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
		  }
		  LCD_PutStr(150, 288, stamina_data_write_buffer, DEFAULT_FONT, stamina_color, C_BLACK);
 80029ea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029ee:	2300      	movs	r3, #0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <main+0x628>)
 80029fa:	f44f 7190 	mov.w	r1, #288	; 0x120
 80029fe:	2096      	movs	r0, #150	; 0x96
 8002a00:	f7ff f8a3 	bl	8001b4a <LCD_PutStr>

		  DISPLAY_TIMER_TRIGGERED = 0;
 8002a04:	4b60      	ldr	r3, [pc, #384]	; (8002b88 <main+0x620>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
	  }
	  // We need an actual interrupt, otherwise can't listen for LoRa
	  if(current_viewport == 1 && KeyPadSelect){
 8002a0a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d106      	bne.n	8002a20 <main+0x4b8>
 8002a12:	4b63      	ldr	r3, [pc, #396]	; (8002ba0 <main+0x638>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <main+0x4b8>
		  current_viewport = 2;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
//		  while(KeyPadSelect == 1){}
	  }
	  if (DISPLAY_TIMER_TRIGGERED == 1 && buzzing) {
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <main+0x620>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d114      	bne.n	8002a52 <main+0x4ea>
 8002a28:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <main+0x4ea>

	  		  if (wait == 0) {
 8002a30:	f897 3165 	ldrb.w	r3, [r7, #357]	; 0x165
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d109      	bne.n	8002a4c <main+0x4e4>
	  			TIM3->CCR3 = 0;
 8002a38:	4b5a      	ldr	r3, [pc, #360]	; (8002ba4 <main+0x63c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c
	  			buzzing = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
	  			wait = 1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
 8002a4a:	e002      	b.n	8002a52 <main+0x4ea>
	  		  } else {
	  			  wait = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
	  		  }
	  	  }

	  if (current_viewport == 1 && DISPLAY_TIMER_TRIGGERED == 1) {
 8002a52:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f040 80cd 	bne.w	8002bf6 <main+0x68e>
 8002a5c:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <main+0x620>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 80c8 	bne.w	8002bf6 <main+0x68e>
		  UG_FontSetTransparency(1);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f002 fd4e 	bl	8005508 <UG_FontSetTransparency>
		  //Get the data that will be displayed by each player

//		  LCD_Fill(100, 5, 240, player_data_fill_height, C_BLACK);
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 8002a6c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002a70:	2300      	movs	r3, #0
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	2300      	movs	r3, #0
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <main+0x628>)
 8002a7a:	2105      	movs	r1, #5
 8002a7c:	2005      	movs	r0, #5
 8002a7e:	f7ff f864 	bl	8001b4a <LCD_PutStr>
		  LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 8002a82:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002a86:	2300      	movs	r3, #0
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <main+0x628>)
 8002a90:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002a94:	2005      	movs	r0, #5
 8002a96:	f7ff f858 	bl	8001b4a <LCD_PutStr>
		  LCD_PutStr(120, 288, stamina_data_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 8002a9a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <main+0x628>)
 8002aa8:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002aac:	2078      	movs	r0, #120	; 0x78
 8002aae:	f7ff f84c 	bl	8001b4a <LCD_PutStr>
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
				  "R1 Statistics\n \nVelocity: %.3f\nHeart Rate: %d\nDistance: %.3f\nStep Count: %d",
				  armband_data.velocity, armband_data.heartrate,
 8002ab2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd5e 	bl	8000578 <__aeabi_f2d>
 8002abc:	4604      	mov	r4, r0
 8002abe:	460d      	mov	r5, r1
 8002ac0:	f8d7 613c 	ldr.w	r6, [r7, #316]	; 0x13c
				  armband_data.distance, armband_data.steps);
 8002ac4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd55 	bl	8000578 <__aeabi_f2d>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ad6:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8002ada:	9106      	str	r1, [sp, #24]
 8002adc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ae0:	9602      	str	r6, [sp, #8]
 8002ae2:	e9cd 4500 	strd	r4, r5, [sp]
 8002ae6:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <main+0x640>)
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	f00d ff87 	bl	80109fc <sniprintf>
		  // Green = Red
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002aee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002af2:	2300      	movs	r3, #0
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <main+0x628>)
 8002afe:	2105      	movs	r1, #5
 8002b00:	2005      	movs	r0, #5
 8002b02:	f7ff f822 	bl	8001b4a <LCD_PutStr>
		  snprintf(stamina_write_buffer, sizeof(stamina_write_buffer), "\nStamina: ");
 8002b06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b0a:	4a28      	ldr	r2, [pc, #160]	; (8002bac <main+0x644>)
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f00d ff74 	bl	80109fc <sniprintf>
		  float stamina = get_strain_factor();
 8002b14:	f002 f82e 	bl	8004b74 <get_strain_factor>
 8002b18:	ed87 0a54 	vstr	s0, [r7, #336]	; 0x150
		  snprintf(stamina_data_write_buffer, sizeof(stamina_data_write_buffer), "%.3f", stamina);
 8002b1c:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8002b20:	f7fd fd2a 	bl	8000578 <__aeabi_f2d>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8002b2c:	e9cd 2300 	strd	r2, r3, [sp]
 8002b30:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <main+0x630>)
 8002b32:	2110      	movs	r1, #16
 8002b34:	f00d ff62 	bl	80109fc <sniprintf>
		  LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002b38:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <main+0x628>)
 8002b48:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f7fe fffc 	bl	8001b4a <LCD_PutStr>
		  uint16_t stamina_color;
		  if (stamina == -1 || stamina < 50){
 8002b52:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8002b56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002b5a:	eef4 7a47 	vcmp.f32	s15, s14
 8002b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b62:	d008      	beq.n	8002b76 <main+0x60e>
 8002b64:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8002b68:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b9c <main+0x634>
 8002b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	d51e      	bpl.n	8002bb4 <main+0x64c>
			  stamina_color = 0b0000011111100000; // RED
 8002b76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b7a:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
 8002b7e:	e02a      	b.n	8002bd6 <main+0x66e>
 8002b80:	20000a6c 	.word	0x20000a6c
 8002b84:	20000a86 	.word	0x20000a86
 8002b88:	20000a84 	.word	0x20000a84
 8002b8c:	08012d3c 	.word	0x08012d3c
 8002b90:	08012dc4 	.word	0x08012dc4
 8002b94:	08012d54 	.word	0x08012d54
 8002b98:	08012d64 	.word	0x08012d64
 8002b9c:	42480000 	.word	0x42480000
 8002ba0:	20000a85 	.word	0x20000a85
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	08012d6c 	.word	0x08012d6c
 8002bac:	08012db8 	.word	0x08012db8
 8002bb0:	42c80000 	.word	0x42c80000
		  } else if (stamina > 100) {
 8002bb4:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8002bb8:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8002bb0 <main+0x648>
 8002bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	dd04      	ble.n	8002bd0 <main+0x668>
			  stamina_color = 0b0000011111111111; // YELLOW
 8002bc6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002bca:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
 8002bce:	e002      	b.n	8002bd6 <main+0x66e>
		  } else {
//			  stamina_color = C_WHITE;
			  stamina_color = 0b0000000000011111; // GREEN
 8002bd0:	231f      	movs	r3, #31
 8002bd2:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
		  }
		  LCD_PutStr(120, 288, stamina_data_write_buffer, DEFAULT_FONT, stamina_color, C_BLACK);
 8002bd6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <main+0x700>)
 8002be6:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002bea:	2078      	movs	r0, #120	; 0x78
 8002bec:	f7fe ffad 	bl	8001b4a <LCD_PutStr>
//		  HAL_Delay(100);
		  DISPLAY_TIMER_TRIGGERED = 0;
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <main+0x704>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]




	  // WEIGHT AND AGE INPUT
	  if (current_viewport == 2) {
 8002bf6:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f47f ad5f 	bne.w	80026be <main+0x156>
		  LCD_Fill(5, 5, 240, player_data_fill_height, C_BLACK);
 8002c00:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002c04:	2200      	movs	r2, #0
 8002c06:	9200      	str	r2, [sp, #0]
 8002c08:	22f0      	movs	r2, #240	; 0xf0
 8002c0a:	2105      	movs	r1, #5
 8002c0c:	2005      	movs	r0, #5
 8002c0e:	f7fe feb9 	bl	8001984 <LCD_Fill>
		  while ( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8002c12:	bf00      	nop
 8002c14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c18:	4815      	ldr	r0, [pc, #84]	; (8002c70 <main+0x708>)
 8002c1a:	f005 fbc9 	bl	80083b0 <HAL_GPIO_ReadPin>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f7      	beq.n	8002c14 <main+0x6ac>
		     }
		  keypad_init();
 8002c24:	f7fe fae6 	bl	80011f4 <keypad_init>
		  running();
 8002c28:	f7fe fbe2 	bl	80013f0 <running>
		  init_analytics(age);
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <main+0x70c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fec9 	bl	80049c8 <init_analytics>
		  KeyPadSelect = 0;
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <main+0x710>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
		  // Go back to runner screen
		  current_viewport = 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		  LCD_Fill(5, 5, 160, 40, C_BLACK);
 8002c42:	2300      	movs	r3, #0
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2328      	movs	r3, #40	; 0x28
 8002c48:	22a0      	movs	r2, #160	; 0xa0
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	2005      	movs	r0, #5
 8002c4e:	f7fe fe99 	bl	8001984 <LCD_Fill>
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <main+0x704>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
		  // Listen to 'D' again
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c5e:	4807      	ldr	r0, [pc, #28]	; (8002c7c <main+0x714>)
 8002c60:	f005 fbbe 	bl	80083e0 <HAL_GPIO_WritePin>
  {
 8002c64:	e52b      	b.n	80026be <main+0x156>
 8002c66:	bf00      	nop
 8002c68:	08012dc4 	.word	0x08012dc4
 8002c6c:	20000a84 	.word	0x20000a84
 8002c70:	48000c00 	.word	0x48000c00
 8002c74:	20000285 	.word	0x20000285
 8002c78:	20000a85 	.word	0x20000a85
 8002c7c:	48001400 	.word	0x48001400

08002c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b096      	sub	sp, #88	; 0x58
 8002c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	2244      	movs	r2, #68	; 0x44
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f00d ffb6 	bl	8010c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c94:	463b      	mov	r3, r7
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002ca2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ca6:	f006 f9d9 	bl	800905c <HAL_PWREx_ControlVoltageScaling>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002cb0:	f001 f88e 	bl	8003dd0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002cb4:	f006 f9a2 	bl	8008ffc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002cb8:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <SystemClock_Config+0xc0>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	4a20      	ldr	r2, [pc, #128]	; (8002d40 <SystemClock_Config+0xc0>)
 8002cc0:	f023 0318 	bic.w	r3, r3, #24
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002cc8:	2314      	movs	r3, #20
 8002cca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002cd8:	2360      	movs	r3, #96	; 0x60
 8002cda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002ce8:	2310      	movs	r3, #16
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cec:	2302      	movs	r3, #2
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f006 fa61 	bl	80091c4 <HAL_RCC_OscConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002d08:	f001 f862 	bl	8003dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d0c:	230f      	movs	r3, #15
 8002d0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d10:	2303      	movs	r3, #3
 8002d12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d20:	463b      	mov	r3, r7
 8002d22:	2101      	movs	r1, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f006 fe67 	bl	80099f8 <HAL_RCC_ClockConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002d30:	f001 f84e 	bl	8003dd0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002d34:	f008 fb70 	bl	800b418 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002d38:	bf00      	nop
 8002d3a:	3758      	adds	r7, #88	; 0x58
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000

08002d44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b0a6      	sub	sp, #152	; 0x98
 8002d48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2294      	movs	r2, #148	; 0x94
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f00d ff55 	bl	8010c00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8002d56:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8002d5a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002d6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d70:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002d72:	2301      	movs	r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002d7a:	2318      	movs	r3, #24
 8002d7c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002d86:	2302      	movs	r3, #2
 8002d88:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <PeriphCommonClock_Config+0x64>)
 8002d8c:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	4618      	mov	r0, r3
 8002d92:	f007 f8ef 	bl	8009f74 <HAL_RCCEx_PeriphCLKConfig>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002d9c:	f001 f818 	bl	8003dd0 <Error_Handler>
  }
}
 8002da0:	bf00      	nop
 8002da2:	3798      	adds	r7, #152	; 0x98
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	01110000 	.word	0x01110000

08002dac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002db2:	463b      	mov	r3, r7
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
 8002dc0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002dc4:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <MX_ADC1_Init+0xc0>)
 8002dc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002de2:	2204      	movs	r2, #4
 8002de4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e22:	4811      	ldr	r0, [pc, #68]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002e24:	f004 f88c 	bl	8006f40 <HAL_ADC_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002e2e:	f000 ffcf 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <MX_ADC1_Init+0xc4>)
 8002e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e36:	2306      	movs	r3, #6
 8002e38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e3e:	237f      	movs	r3, #127	; 0x7f
 8002e40:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e42:	2304      	movs	r3, #4
 8002e44:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4806      	ldr	r0, [pc, #24]	; (8002e68 <MX_ADC1_Init+0xbc>)
 8002e50:	f004 f9bc 	bl	80071cc <HAL_ADC_ConfigChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002e5a:	f000 ffb9 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200002fc 	.word	0x200002fc
 8002e6c:	50040000 	.word	0x50040000
 8002e70:	04300002 	.word	0x04300002

08002e74 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002e7a:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <MX_COMP1_Init+0x54>)
 8002e7c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002e80:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <MX_COMP1_Init+0x58>)
 8002e82:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_COMP1_Init+0x50>)
 8002eb0:	f004 fe30 	bl	8007b14 <HAL_COMP_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8002eba:	f000 ff89 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000364 	.word	0x20000364
 8002ec8:	40010200 	.word	0x40010200
 8002ecc:	00800030 	.word	0x00800030

08002ed0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <MX_COMP2_Init+0x54>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002edc:	2270      	movs	r2, #112	; 0x70
 8002ede:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <MX_COMP2_Init+0x50>)
 8002f0c:	f004 fe02 	bl	8007b14 <HAL_COMP_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002f16:	f000 ff5b 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000390 	.word	0x20000390
 8002f24:	40010204 	.word	0x40010204

08002f28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <MX_I2C1_Init+0x78>)
 8002f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002f32:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <MX_I2C1_Init+0x7c>)
 8002f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f62:	480e      	ldr	r0, [pc, #56]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f64:	f005 fa77 	bl	8008456 <HAL_I2C_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f6e:	f000 ff2f 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f72:	2100      	movs	r1, #0
 8002f74:	4809      	ldr	r0, [pc, #36]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f76:	f005 ffa9 	bl	8008ecc <HAL_I2CEx_ConfigAnalogFilter>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f80:	f000 ff26 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f84:	2100      	movs	r1, #0
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_I2C1_Init+0x74>)
 8002f88:	f005 ffeb 	bl	8008f62 <HAL_I2CEx_ConfigDigitalFilter>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f92:	f000 ff1d 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200003bc 	.word	0x200003bc
 8002fa0:	40005400 	.word	0x40005400
 8002fa4:	00707cbb 	.word	0x00707cbb

08002fa8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <MX_I2C2_Init+0x74>)
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <MX_I2C2_Init+0x78>)
 8002fb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <MX_I2C2_Init+0x74>)
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <MX_I2C2_Init+0x7c>)
 8002fb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002fb8:	4b18      	ldr	r3, [pc, #96]	; (800301c <MX_I2C2_Init+0x74>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fbe:	4b17      	ldr	r3, [pc, #92]	; (800301c <MX_I2C2_Init+0x74>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <MX_I2C2_Init+0x74>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002fca:	4b14      	ldr	r3, [pc, #80]	; (800301c <MX_I2C2_Init+0x74>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <MX_I2C2_Init+0x74>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_I2C2_Init+0x74>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <MX_I2C2_Init+0x74>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002fe2:	480e      	ldr	r0, [pc, #56]	; (800301c <MX_I2C2_Init+0x74>)
 8002fe4:	f005 fa37 	bl	8008456 <HAL_I2C_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002fee:	f000 feef 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4809      	ldr	r0, [pc, #36]	; (800301c <MX_I2C2_Init+0x74>)
 8002ff6:	f005 ff69 	bl	8008ecc <HAL_I2CEx_ConfigAnalogFilter>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003000:	f000 fee6 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003004:	2100      	movs	r1, #0
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_I2C2_Init+0x74>)
 8003008:	f005 ffab 	bl	8008f62 <HAL_I2CEx_ConfigDigitalFilter>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003012:	f000 fedd 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000410 	.word	0x20000410
 8003020:	40005800 	.word	0x40005800
 8003024:	00707cbb 	.word	0x00707cbb

08003028 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <MX_LPUART1_UART_Init+0x94>)
 8003030:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003038:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 800304e:	220c      	movs	r2, #12
 8003050:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003060:	2200      	movs	r2, #0
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003066:	2200      	movs	r2, #0
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 800306c:	2200      	movs	r2, #0
 800306e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003070:	4811      	ldr	r0, [pc, #68]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003072:	f00c f8bd 	bl	800f1f0 <HAL_UART_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800307c:	f000 fea8 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003080:	2100      	movs	r1, #0
 8003082:	480d      	ldr	r0, [pc, #52]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003084:	f00c fee2 	bl	800fe4c <HAL_UARTEx_SetTxFifoThreshold>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800308e:	f000 fe9f 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003092:	2100      	movs	r1, #0
 8003094:	4808      	ldr	r0, [pc, #32]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 8003096:	f00c ff17 	bl	800fec8 <HAL_UARTEx_SetRxFifoThreshold>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80030a0:	f000 fe96 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_LPUART1_UART_Init+0x90>)
 80030a6:	f00c fe98 	bl	800fdda <HAL_UARTEx_DisableFifoMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80030b0:	f000 fe8e 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000464 	.word	0x20000464
 80030bc:	40008000 	.word	0x40008000

080030c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c4:	4b22      	ldr	r3, [pc, #136]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030c6:	4a23      	ldr	r2, [pc, #140]	; (8003154 <MX_USART2_UART_Init+0x94>)
 80030c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030e6:	220c      	movs	r2, #12
 80030e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030fe:	2200      	movs	r2, #0
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <MX_USART2_UART_Init+0x90>)
 8003104:	2200      	movs	r2, #0
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003108:	4811      	ldr	r0, [pc, #68]	; (8003150 <MX_USART2_UART_Init+0x90>)
 800310a:	f00c f871 	bl	800f1f0 <HAL_UART_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003114:	f000 fe5c 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003118:	2100      	movs	r1, #0
 800311a:	480d      	ldr	r0, [pc, #52]	; (8003150 <MX_USART2_UART_Init+0x90>)
 800311c:	f00c fe96 	bl	800fe4c <HAL_UARTEx_SetTxFifoThreshold>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003126:	f000 fe53 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800312a:	2100      	movs	r1, #0
 800312c:	4808      	ldr	r0, [pc, #32]	; (8003150 <MX_USART2_UART_Init+0x90>)
 800312e:	f00c fecb 	bl	800fec8 <HAL_UARTEx_SetRxFifoThreshold>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003138:	f000 fe4a 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800313c:	4804      	ldr	r0, [pc, #16]	; (8003150 <MX_USART2_UART_Init+0x90>)
 800313e:	f00c fe4c 	bl	800fdda <HAL_UARTEx_DisableFifoMode>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003148:	f000 fe42 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200004f8 	.word	0x200004f8
 8003154:	40004400 	.word	0x40004400

08003158 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 800315e:	4a23      	ldr	r2, [pc, #140]	; (80031ec <MX_USART3_UART_Init+0x94>)
 8003160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 8003164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 8003196:	2200      	movs	r2, #0
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 800319c:	2200      	movs	r2, #0
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031a0:	4811      	ldr	r0, [pc, #68]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 80031a2:	f00c f825 	bl	800f1f0 <HAL_UART_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80031ac:	f000 fe10 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031b0:	2100      	movs	r1, #0
 80031b2:	480d      	ldr	r0, [pc, #52]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 80031b4:	f00c fe4a 	bl	800fe4c <HAL_UARTEx_SetTxFifoThreshold>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80031be:	f000 fe07 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031c2:	2100      	movs	r1, #0
 80031c4:	4808      	ldr	r0, [pc, #32]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 80031c6:	f00c fe7f 	bl	800fec8 <HAL_UARTEx_SetRxFifoThreshold>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80031d0:	f000 fdfe 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80031d4:	4804      	ldr	r0, [pc, #16]	; (80031e8 <MX_USART3_UART_Init+0x90>)
 80031d6:	f00c fe00 	bl	800fdda <HAL_UARTEx_DisableFifoMode>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80031e0:	f000 fdf6 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	2000058c 	.word	0x2000058c
 80031ec:	40004800 	.word	0x40004800

080031f0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <MX_SAI1_Init+0x11c>)
 80031f6:	4a46      	ldr	r2, [pc, #280]	; (8003310 <MX_SAI1_Init+0x120>)
 80031f8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80031fa:	4b44      	ldr	r3, [pc, #272]	; (800330c <MX_SAI1_Init+0x11c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <MX_SAI1_Init+0x11c>)
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8003206:	4b41      	ldr	r3, [pc, #260]	; (800330c <MX_SAI1_Init+0x11c>)
 8003208:	2240      	movs	r2, #64	; 0x40
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800320c:	4b3f      	ldr	r3, [pc, #252]	; (800330c <MX_SAI1_Init+0x11c>)
 800320e:	2200      	movs	r2, #0
 8003210:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003212:	4b3e      	ldr	r3, [pc, #248]	; (800330c <MX_SAI1_Init+0x11c>)
 8003214:	2200      	movs	r2, #0
 8003216:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003218:	4b3c      	ldr	r3, [pc, #240]	; (800330c <MX_SAI1_Init+0x11c>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <MX_SAI1_Init+0x11c>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <MX_SAI1_Init+0x11c>)
 8003226:	2200      	movs	r2, #0
 8003228:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <MX_SAI1_Init+0x11c>)
 800322c:	2200      	movs	r2, #0
 800322e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <MX_SAI1_Init+0x11c>)
 8003232:	2200      	movs	r2, #0
 8003234:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8003236:	4b35      	ldr	r3, [pc, #212]	; (800330c <MX_SAI1_Init+0x11c>)
 8003238:	4a36      	ldr	r2, [pc, #216]	; (8003314 <MX_SAI1_Init+0x124>)
 800323a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800323c:	4b33      	ldr	r3, [pc, #204]	; (800330c <MX_SAI1_Init+0x11c>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003242:	4b32      	ldr	r3, [pc, #200]	; (800330c <MX_SAI1_Init+0x11c>)
 8003244:	2200      	movs	r2, #0
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <MX_SAI1_Init+0x11c>)
 800324a:	2200      	movs	r2, #0
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <MX_SAI1_Init+0x11c>)
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8003254:	4b2d      	ldr	r3, [pc, #180]	; (800330c <MX_SAI1_Init+0x11c>)
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <MX_SAI1_Init+0x11c>)
 800325e:	2200      	movs	r2, #0
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <MX_SAI1_Init+0x11c>)
 8003264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <MX_SAI1_Init+0x11c>)
 800326c:	2208      	movs	r2, #8
 800326e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8003270:	4b26      	ldr	r3, [pc, #152]	; (800330c <MX_SAI1_Init+0x11c>)
 8003272:	2201      	movs	r2, #1
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <MX_SAI1_Init+0x11c>)
 8003278:	2200      	movs	r2, #0
 800327a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <MX_SAI1_Init+0x11c>)
 800327e:	2200      	movs	r2, #0
 8003280:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <MX_SAI1_Init+0x11c>)
 8003284:	2200      	movs	r2, #0
 8003286:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <MX_SAI1_Init+0x11c>)
 800328a:	2200      	movs	r2, #0
 800328c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <MX_SAI1_Init+0x11c>)
 8003290:	2200      	movs	r2, #0
 8003292:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <MX_SAI1_Init+0x11c>)
 8003296:	2201      	movs	r2, #1
 8003298:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <MX_SAI1_Init+0x11c>)
 800329c:	2200      	movs	r2, #0
 800329e:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80032a0:	481a      	ldr	r0, [pc, #104]	; (800330c <MX_SAI1_Init+0x11c>)
 80032a2:	f008 fbf5 	bl	800ba90 <HAL_SAI_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80032ac:	f000 fd90 	bl	8003dd0 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <MX_SAI1_Init+0x128>)
 80032b2:	4a1a      	ldr	r2, [pc, #104]	; (800331c <MX_SAI1_Init+0x12c>)
 80032b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <MX_SAI1_Init+0x128>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <MX_SAI1_Init+0x128>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <MX_SAI1_Init+0x128>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <MX_SAI1_Init+0x128>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <MX_SAI1_Init+0x128>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <MX_SAI1_Init+0x128>)
 80032d6:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <MX_SAI1_Init+0x124>)
 80032d8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <MX_SAI1_Init+0x128>)
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <MX_SAI1_Init+0x128>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <MX_SAI1_Init+0x128>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <MX_SAI1_Init+0x128>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80032f2:	2302      	movs	r3, #2
 80032f4:	2200      	movs	r2, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	4807      	ldr	r0, [pc, #28]	; (8003318 <MX_SAI1_Init+0x128>)
 80032fa:	f008 fb97 	bl	800ba2c <HAL_SAI_InitProtocol>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8003304:	f000 fd64 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000620 	.word	0x20000620
 8003310:	40015424 	.word	0x40015424
 8003314:	0002ee00 	.word	0x0002ee00
 8003318:	200006b4 	.word	0x200006b4
 800331c:	40015404 	.word	0x40015404

08003320 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003326:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <MX_SAI2_Init+0xc8>)
 8003328:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <MX_SAI2_Init+0xc4>)
 800332c:	2200      	movs	r2, #0
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003338:	2240      	movs	r2, #64	; 0x40
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <MX_SAI2_Init+0xc4>)
 800333e:	2200      	movs	r2, #0
 8003340:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003342:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003344:	2200      	movs	r2, #0
 8003346:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003348:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <MX_SAI2_Init+0xc4>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800334e:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003350:	2200      	movs	r2, #0
 8003352:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003356:	2200      	movs	r2, #0
 8003358:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <MX_SAI2_Init+0xc4>)
 800335c:	2200      	movs	r2, #0
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003360:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8003366:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <MX_SAI2_Init+0xcc>)
 800336a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <MX_SAI2_Init+0xc4>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003374:	2200      	movs	r2, #0
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <MX_SAI2_Init+0xc4>)
 800337a:	2200      	movs	r2, #0
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800337e:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 800338c:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <MX_SAI2_Init+0xc4>)
 800338e:	2200      	movs	r2, #0
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8003392:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <MX_SAI2_Init+0xc4>)
 8003394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <MX_SAI2_Init+0xc4>)
 800339c:	2208      	movs	r2, #8
 800339e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80033a6:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <MX_SAI2_Init+0xc4>)
 80033d2:	f008 fb5d 	bl	800ba90 <HAL_SAI_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 80033dc:	f000 fcf8 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000748 	.word	0x20000748
 80033e8:	40015804 	.word	0x40015804
 80033ec:	0002ee00 	.word	0x0002ee00

080033f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <MX_SPI2_Init+0x74>)
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <MX_SPI2_Init+0x78>)
 80033f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033fa:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <MX_SPI2_Init+0x74>)
 80033fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003400:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <MX_SPI2_Init+0x74>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <MX_SPI2_Init+0x74>)
 800340a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800340e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <MX_SPI2_Init+0x74>)
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <MX_SPI2_Init+0x74>)
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <MX_SPI2_Init+0x74>)
 800341e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003422:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <MX_SPI2_Init+0x74>)
 8003426:	2218      	movs	r2, #24
 8003428:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <MX_SPI2_Init+0x74>)
 800342c:	2200      	movs	r2, #0
 800342e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <MX_SPI2_Init+0x74>)
 8003432:	2200      	movs	r2, #0
 8003434:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <MX_SPI2_Init+0x74>)
 8003438:	2200      	movs	r2, #0
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <MX_SPI2_Init+0x74>)
 800343e:	2207      	movs	r2, #7
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <MX_SPI2_Init+0x74>)
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <MX_SPI2_Init+0x74>)
 800344a:	2208      	movs	r2, #8
 800344c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800344e:	4805      	ldr	r0, [pc, #20]	; (8003464 <MX_SPI2_Init+0x74>)
 8003450:	f008 fe6a 	bl	800c128 <HAL_SPI_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800345a:	f000 fcb9 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200007dc 	.word	0x200007dc
 8003468:	40003800 	.word	0x40003800

0800346c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <MX_SPI3_Init+0x74>)
 8003472:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <MX_SPI3_Init+0x78>)
 8003474:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <MX_SPI3_Init+0x74>)
 8003478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800347c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <MX_SPI3_Init+0x74>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <MX_SPI3_Init+0x74>)
 8003486:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800348a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <MX_SPI3_Init+0x74>)
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <MX_SPI3_Init+0x74>)
 8003494:	2200      	movs	r2, #0
 8003496:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <MX_SPI3_Init+0x74>)
 800349a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <MX_SPI3_Init+0x74>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <MX_SPI3_Init+0x74>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <MX_SPI3_Init+0x74>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <MX_SPI3_Init+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <MX_SPI3_Init+0x74>)
 80034ba:	2207      	movs	r2, #7
 80034bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <MX_SPI3_Init+0x74>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <MX_SPI3_Init+0x74>)
 80034c6:	2208      	movs	r2, #8
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80034ca:	4805      	ldr	r0, [pc, #20]	; (80034e0 <MX_SPI3_Init+0x74>)
 80034cc:	f008 fe2c 	bl	800c128 <HAL_SPI_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80034d6:	f000 fc7b 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000840 	.word	0x20000840
 80034e4:	40003c00 	.word	0x40003c00

080034e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b098      	sub	sp, #96	; 0x60
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80034fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	611a      	str	r2, [r3, #16]
 8003516:	615a      	str	r2, [r3, #20]
 8003518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800351a:	463b      	mov	r3, r7
 800351c:	222c      	movs	r2, #44	; 0x2c
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f00d fb6d 	bl	8010c00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003526:	4b4a      	ldr	r3, [pc, #296]	; (8003650 <MX_TIM1_Init+0x168>)
 8003528:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <MX_TIM1_Init+0x16c>)
 800352a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800352c:	4b48      	ldr	r3, [pc, #288]	; (8003650 <MX_TIM1_Init+0x168>)
 800352e:	2200      	movs	r2, #0
 8003530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <MX_TIM1_Init+0x168>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003538:	4b45      	ldr	r3, [pc, #276]	; (8003650 <MX_TIM1_Init+0x168>)
 800353a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800353e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <MX_TIM1_Init+0x168>)
 8003542:	2200      	movs	r2, #0
 8003544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003546:	4b42      	ldr	r3, [pc, #264]	; (8003650 <MX_TIM1_Init+0x168>)
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800354c:	4b40      	ldr	r3, [pc, #256]	; (8003650 <MX_TIM1_Init+0x168>)
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003552:	483f      	ldr	r0, [pc, #252]	; (8003650 <MX_TIM1_Init+0x168>)
 8003554:	f00a fb53 	bl	800dbfe <HAL_TIM_PWM_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800355e:	f000 fc37 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800356a:	2300      	movs	r3, #0
 800356c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800356e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003572:	4619      	mov	r1, r3
 8003574:	4836      	ldr	r0, [pc, #216]	; (8003650 <MX_TIM1_Init+0x168>)
 8003576:	f00b fc51 	bl	800ee1c <HAL_TIMEx_MasterConfigSynchronization>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003580:	f000 fc26 	bl	8003dd0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003584:	2301      	movs	r3, #1
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8003588:	2301      	movs	r3, #1
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800358c:	2300      	movs	r3, #0
 800358e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003594:	461a      	mov	r2, r3
 8003596:	2101      	movs	r1, #1
 8003598:	482d      	ldr	r0, [pc, #180]	; (8003650 <MX_TIM1_Init+0x168>)
 800359a:	f00b fd45 	bl	800f028 <HAL_TIMEx_ConfigBreakInput>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80035a4:	f000 fc14 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80035a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035ac:	461a      	mov	r2, r3
 80035ae:	2102      	movs	r1, #2
 80035b0:	4827      	ldr	r0, [pc, #156]	; (8003650 <MX_TIM1_Init+0x168>)
 80035b2:	f00b fd39 	bl	800f028 <HAL_TIMEx_ConfigBreakInput>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80035bc:	f000 fc08 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035c0:	2360      	movs	r3, #96	; 0x60
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035c8:	2300      	movs	r3, #0
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035cc:	2300      	movs	r3, #0
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035d4:	2300      	movs	r3, #0
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035d8:	2300      	movs	r3, #0
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e0:	2208      	movs	r2, #8
 80035e2:	4619      	mov	r1, r3
 80035e4:	481a      	ldr	r0, [pc, #104]	; (8003650 <MX_TIM1_Init+0x168>)
 80035e6:	f00a fde3 	bl	800e1b0 <HAL_TIM_PWM_ConfigChannel>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80035f0:	f000 fbee 	bl	8003dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80035f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800360c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800360e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8003618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800361c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800361e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003622:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800362c:	463b      	mov	r3, r7
 800362e:	4619      	mov	r1, r3
 8003630:	4807      	ldr	r0, [pc, #28]	; (8003650 <MX_TIM1_Init+0x168>)
 8003632:	f00b fc7b 	bl	800ef2c <HAL_TIMEx_ConfigBreakDeadTime>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 800363c:	f000 fbc8 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003640:	4803      	ldr	r0, [pc, #12]	; (8003650 <MX_TIM1_Init+0x168>)
 8003642:	f000 ffc5 	bl	80045d0 <HAL_TIM_MspPostInit>

}
 8003646:	bf00      	nop
 8003648:	3760      	adds	r7, #96	; 0x60
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	200008a4 	.word	0x200008a4
 8003654:	40012c00 	.word	0x40012c00

08003658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800365e:	f107 031c 	add.w	r3, r7, #28
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800366a:	463b      	mov	r3, r7
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
 8003678:	615a      	str	r2, [r3, #20]
 800367a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <MX_TIM2_Init+0xc4>)
 800367e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003682:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <MX_TIM2_Init+0xc4>)
 8003686:	2200      	movs	r2, #0
 8003688:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <MX_TIM2_Init+0xc4>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <MX_TIM2_Init+0xc4>)
 8003692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <MX_TIM2_Init+0xc4>)
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369e:	4b1f      	ldr	r3, [pc, #124]	; (800371c <MX_TIM2_Init+0xc4>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036a4:	481d      	ldr	r0, [pc, #116]	; (800371c <MX_TIM2_Init+0xc4>)
 80036a6:	f00a faaa 	bl	800dbfe <HAL_TIM_PWM_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80036b0:	f000 fb8e 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036bc:	f107 031c 	add.w	r3, r7, #28
 80036c0:	4619      	mov	r1, r3
 80036c2:	4816      	ldr	r0, [pc, #88]	; (800371c <MX_TIM2_Init+0xc4>)
 80036c4:	f00b fbaa 	bl	800ee1c <HAL_TIMEx_MasterConfigSynchronization>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80036ce:	f000 fb7f 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036d2:	2360      	movs	r3, #96	; 0x60
 80036d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036e2:	463b      	mov	r3, r7
 80036e4:	2200      	movs	r2, #0
 80036e6:	4619      	mov	r1, r3
 80036e8:	480c      	ldr	r0, [pc, #48]	; (800371c <MX_TIM2_Init+0xc4>)
 80036ea:	f00a fd61 	bl	800e1b0 <HAL_TIM_PWM_ConfigChannel>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80036f4:	f000 fb6c 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036f8:	463b      	mov	r3, r7
 80036fa:	2208      	movs	r2, #8
 80036fc:	4619      	mov	r1, r3
 80036fe:	4807      	ldr	r0, [pc, #28]	; (800371c <MX_TIM2_Init+0xc4>)
 8003700:	f00a fd56 	bl	800e1b0 <HAL_TIM_PWM_ConfigChannel>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800370a:	f000 fb61 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800370e:	4803      	ldr	r0, [pc, #12]	; (800371c <MX_TIM2_Init+0xc4>)
 8003710:	f000 ff5e 	bl	80045d0 <HAL_TIM_MspPostInit>

}
 8003714:	bf00      	nop
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	200008f0 	.word	0x200008f0

08003720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	; 0x38
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003740:	463b      	mov	r3, r7
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	611a      	str	r2, [r3, #16]
 800374e:	615a      	str	r2, [r3, #20]
 8003750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003752:	4b32      	ldr	r3, [pc, #200]	; (800381c <MX_TIM3_Init+0xfc>)
 8003754:	4a32      	ldr	r2, [pc, #200]	; (8003820 <MX_TIM3_Init+0x100>)
 8003756:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003758:	4b30      	ldr	r3, [pc, #192]	; (800381c <MX_TIM3_Init+0xfc>)
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800375e:	4b2f      	ldr	r3, [pc, #188]	; (800381c <MX_TIM3_Init+0xfc>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003764:	4b2d      	ldr	r3, [pc, #180]	; (800381c <MX_TIM3_Init+0xfc>)
 8003766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800376a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <MX_TIM3_Init+0xfc>)
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <MX_TIM3_Init+0xfc>)
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003778:	4828      	ldr	r0, [pc, #160]	; (800381c <MX_TIM3_Init+0xfc>)
 800377a:	f00a f917 	bl	800d9ac <HAL_TIM_Base_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003784:	f000 fb24 	bl	8003dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800378e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003792:	4619      	mov	r1, r3
 8003794:	4821      	ldr	r0, [pc, #132]	; (800381c <MX_TIM3_Init+0xfc>)
 8003796:	f00a fe1f 	bl	800e3d8 <HAL_TIM_ConfigClockSource>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80037a0:	f000 fb16 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80037a4:	481d      	ldr	r0, [pc, #116]	; (800381c <MX_TIM3_Init+0xfc>)
 80037a6:	f00a fa2a 	bl	800dbfe <HAL_TIM_PWM_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80037b0:	f000 fb0e 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037bc:	f107 031c 	add.w	r3, r7, #28
 80037c0:	4619      	mov	r1, r3
 80037c2:	4816      	ldr	r0, [pc, #88]	; (800381c <MX_TIM3_Init+0xfc>)
 80037c4:	f00b fb2a 	bl	800ee1c <HAL_TIMEx_MasterConfigSynchronization>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80037ce:	f000 faff 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037d2:	2360      	movs	r3, #96	; 0x60
 80037d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037e2:	463b      	mov	r3, r7
 80037e4:	2204      	movs	r2, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	480c      	ldr	r0, [pc, #48]	; (800381c <MX_TIM3_Init+0xfc>)
 80037ea:	f00a fce1 	bl	800e1b0 <HAL_TIM_PWM_ConfigChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80037f4:	f000 faec 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037f8:	463b      	mov	r3, r7
 80037fa:	2208      	movs	r2, #8
 80037fc:	4619      	mov	r1, r3
 80037fe:	4807      	ldr	r0, [pc, #28]	; (800381c <MX_TIM3_Init+0xfc>)
 8003800:	f00a fcd6 	bl	800e1b0 <HAL_TIM_PWM_ConfigChannel>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800380a:	f000 fae1 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800380e:	4803      	ldr	r0, [pc, #12]	; (800381c <MX_TIM3_Init+0xfc>)
 8003810:	f000 fede 	bl	80045d0 <HAL_TIM_MspPostInit>

}
 8003814:	bf00      	nop
 8003816:	3738      	adds	r7, #56	; 0x38
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	2000093c 	.word	0x2000093c
 8003820:	40000400 	.word	0x40000400

08003824 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800382a:	f107 031c 	add.w	r3, r7, #28
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003836:	463b      	mov	r3, r7
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
 8003844:	615a      	str	r2, [r3, #20]
 8003846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <MX_TIM4_Init+0xac>)
 800384a:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <MX_TIM4_Init+0xb0>)
 800384c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <MX_TIM4_Init+0xac>)
 8003850:	2200      	movs	r2, #0
 8003852:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <MX_TIM4_Init+0xac>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <MX_TIM4_Init+0xac>)
 800385c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003860:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <MX_TIM4_Init+0xac>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <MX_TIM4_Init+0xac>)
 800386a:	2200      	movs	r2, #0
 800386c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800386e:	4818      	ldr	r0, [pc, #96]	; (80038d0 <MX_TIM4_Init+0xac>)
 8003870:	f00a f9c5 	bl	800dbfe <HAL_TIM_PWM_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800387a:	f000 faa9 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	4619      	mov	r1, r3
 800388c:	4810      	ldr	r0, [pc, #64]	; (80038d0 <MX_TIM4_Init+0xac>)
 800388e:	f00b fac5 	bl	800ee1c <HAL_TIMEx_MasterConfigSynchronization>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003898:	f000 fa9a 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800389c:	2360      	movs	r3, #96	; 0x60
 800389e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038ac:	463b      	mov	r3, r7
 80038ae:	220c      	movs	r2, #12
 80038b0:	4619      	mov	r1, r3
 80038b2:	4807      	ldr	r0, [pc, #28]	; (80038d0 <MX_TIM4_Init+0xac>)
 80038b4:	f00a fc7c 	bl	800e1b0 <HAL_TIM_PWM_ConfigChannel>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80038be:	f000 fa87 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80038c2:	4803      	ldr	r0, [pc, #12]	; (80038d0 <MX_TIM4_Init+0xac>)
 80038c4:	f000 fe84 	bl	80045d0 <HAL_TIM_MspPostInit>

}
 80038c8:	bf00      	nop
 80038ca:	3728      	adds	r7, #40	; 0x28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000988 	.word	0x20000988
 80038d4:	40000800 	.word	0x40000800

080038d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b096      	sub	sp, #88	; 0x58
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	60da      	str	r2, [r3, #12]
 80038f8:	611a      	str	r2, [r3, #16]
 80038fa:	615a      	str	r2, [r3, #20]
 80038fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	222c      	movs	r2, #44	; 0x2c
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f00d f97b 	bl	8010c00 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800390a:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <MX_TIM15_Init+0x100>)
 800390c:	4a33      	ldr	r2, [pc, #204]	; (80039dc <MX_TIM15_Init+0x104>)
 800390e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <MX_TIM15_Init+0x100>)
 8003912:	2200      	movs	r2, #0
 8003914:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <MX_TIM15_Init+0x100>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <MX_TIM15_Init+0x100>)
 800391e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003922:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003924:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <MX_TIM15_Init+0x100>)
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800392a:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <MX_TIM15_Init+0x100>)
 800392c:	2200      	movs	r2, #0
 800392e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <MX_TIM15_Init+0x100>)
 8003932:	2200      	movs	r2, #0
 8003934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003936:	4828      	ldr	r0, [pc, #160]	; (80039d8 <MX_TIM15_Init+0x100>)
 8003938:	f00a f961 	bl	800dbfe <HAL_TIM_PWM_Init>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8003942:	f000 fa45 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800394a:	2300      	movs	r3, #0
 800394c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800394e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003952:	4619      	mov	r1, r3
 8003954:	4820      	ldr	r0, [pc, #128]	; (80039d8 <MX_TIM15_Init+0x100>)
 8003956:	f00b fa61 	bl	800ee1c <HAL_TIMEx_MasterConfigSynchronization>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8003960:	f000 fa36 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003964:	2360      	movs	r3, #96	; 0x60
 8003966:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800396c:	2300      	movs	r3, #0
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003970:	2300      	movs	r3, #0
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003974:	2300      	movs	r3, #0
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003978:	2300      	movs	r3, #0
 800397a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800397c:	2300      	movs	r3, #0
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003984:	2200      	movs	r2, #0
 8003986:	4619      	mov	r1, r3
 8003988:	4813      	ldr	r0, [pc, #76]	; (80039d8 <MX_TIM15_Init+0x100>)
 800398a:	f00a fc11 	bl	800e1b0 <HAL_TIM_PWM_ConfigChannel>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8003994:	f000 fa1c 	bl	8003dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003998:	2300      	movs	r3, #0
 800399a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4807      	ldr	r0, [pc, #28]	; (80039d8 <MX_TIM15_Init+0x100>)
 80039bc:	f00b fab6 	bl	800ef2c <HAL_TIMEx_ConfigBreakDeadTime>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80039c6:	f000 fa03 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80039ca:	4803      	ldr	r0, [pc, #12]	; (80039d8 <MX_TIM15_Init+0x100>)
 80039cc:	f000 fe00 	bl	80045d0 <HAL_TIM_MspPostInit>

}
 80039d0:	bf00      	nop
 80039d2:	3758      	adds	r7, #88	; 0x58
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	200009d4 	.word	0x200009d4
 80039dc:	40014000 	.word	0x40014000

080039e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b092      	sub	sp, #72	; 0x48
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	615a      	str	r2, [r3, #20]
 80039f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039fa:	463b      	mov	r3, r7
 80039fc:	222c      	movs	r2, #44	; 0x2c
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f00d f8fd 	bl	8010c00 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003a06:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a08:	4a2f      	ldr	r2, [pc, #188]	; (8003ac8 <MX_TIM17_Init+0xe8>)
 8003a0a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2441;
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a0e:	f640 1289 	movw	r2, #2441	; 0x989
 8003a12:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a14:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003a1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a20:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a28:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a2e:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003a34:	4823      	ldr	r0, [pc, #140]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a36:	f009 ffb9 	bl	800d9ac <HAL_TIM_Base_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8003a40:	f000 f9c6 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003a44:	481f      	ldr	r0, [pc, #124]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a46:	f00a f879 	bl	800db3c <HAL_TIM_OC_Init>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8003a50:	f000 f9be 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003a54:	2300      	movs	r3, #0
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a60:	2300      	movs	r3, #0
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a74:	2200      	movs	r2, #0
 8003a76:	4619      	mov	r1, r3
 8003a78:	4812      	ldr	r0, [pc, #72]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003a7a:	f00a fb1f 	bl	800e0bc <HAL_TIM_OC_ConfigChannel>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8003a84:	f000 f9a4 	bl	8003dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4806      	ldr	r0, [pc, #24]	; (8003ac4 <MX_TIM17_Init+0xe4>)
 8003aac:	f00b fa3e 	bl	800ef2c <HAL_TIMEx_ConfigBreakDeadTime>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8003ab6:	f000 f98b 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003aba:	bf00      	nop
 8003abc:	3748      	adds	r7, #72	; 0x48
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000a20 	.word	0x20000a20
 8003ac8:	40014800 	.word	0x40014800

08003acc <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	; 0x38
 8003ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003af2:	4b9e      	ldr	r3, [pc, #632]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	4a9d      	ldr	r2, [pc, #628]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003af8:	f043 0310 	orr.w	r3, r3, #16
 8003afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003afe:	4b9b      	ldr	r3, [pc, #620]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	623b      	str	r3, [r7, #32]
 8003b08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0a:	4b98      	ldr	r3, [pc, #608]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	4a97      	ldr	r2, [pc, #604]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b16:	4b95      	ldr	r3, [pc, #596]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b22:	4b92      	ldr	r3, [pc, #584]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	4a91      	ldr	r2, [pc, #580]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b28:	f043 0320 	orr.w	r3, r3, #32
 8003b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b2e:	4b8f      	ldr	r3, [pc, #572]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b3a:	4b8c      	ldr	r3, [pc, #560]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	4a8b      	ldr	r2, [pc, #556]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b46:	4b89      	ldr	r3, [pc, #548]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b52:	4b86      	ldr	r3, [pc, #536]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	4a85      	ldr	r2, [pc, #532]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5e:	4b83      	ldr	r3, [pc, #524]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b6a:	4b80      	ldr	r3, [pc, #512]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	4a7f      	ldr	r2, [pc, #508]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b76:	4b7d      	ldr	r3, [pc, #500]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b82:	4b7a      	ldr	r3, [pc, #488]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	4a79      	ldr	r2, [pc, #484]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b88:	f043 0308 	orr.w	r3, r3, #8
 8003b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b8e:	4b77      	ldr	r3, [pc, #476]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b9a:	4b74      	ldr	r3, [pc, #464]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	4a73      	ldr	r2, [pc, #460]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ba6:	4b71      	ldr	r3, [pc, #452]	; (8003d6c <MX_GPIO_Init+0x290>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003bb2:	f005 faf7 	bl	80091a4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003bbc:	486c      	ldr	r0, [pc, #432]	; (8003d70 <MX_GPIO_Init+0x294>)
 8003bbe:	f004 fc0f 	bl	80083e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8003bc8:	486a      	ldr	r0, [pc, #424]	; (8003d74 <MX_GPIO_Init+0x298>)
 8003bca:	f004 fc09 	bl	80083e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8003bce:	2201      	movs	r2, #1
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4869      	ldr	r0, [pc, #420]	; (8003d78 <MX_GPIO_Init+0x29c>)
 8003bd4:	f004 fc04 	bl	80083e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bea:	4619      	mov	r1, r3
 8003bec:	4860      	ldr	r0, [pc, #384]	; (8003d70 <MX_GPIO_Init+0x294>)
 8003bee:	f004 fa4d 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bf2:	2310      	movs	r3, #16
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c02:	2305      	movs	r3, #5
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c10:	f004 fa3c 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003c14:	23e0      	movs	r3, #224	; 0xe0
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c24:	4619      	mov	r1, r3
 8003c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c2a:	f004 fa2f 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003c2e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003c34:	2311      	movs	r3, #17
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c44:	4619      	mov	r1, r3
 8003c46:	484a      	ldr	r0, [pc, #296]	; (8003d70 <MX_GPIO_Init+0x294>)
 8003c48:	f004 fa20 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8003c4c:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c52:	2301      	movs	r3, #1
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c56:	2301      	movs	r3, #1
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c62:	4619      	mov	r1, r3
 8003c64:	4843      	ldr	r0, [pc, #268]	; (8003d74 <MX_GPIO_Init+0x298>)
 8003c66:	f004 fa11 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003c6a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003c70:	2311      	movs	r3, #17
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c80:	4619      	mov	r1, r3
 8003c82:	483c      	ldr	r0, [pc, #240]	; (8003d74 <MX_GPIO_Init+0x298>)
 8003c84:	f004 fa02 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4836      	ldr	r0, [pc, #216]	; (8003d78 <MX_GPIO_Init+0x29c>)
 8003ca0:	f004 f9f4 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003caa:	2302      	movs	r3, #2
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	482e      	ldr	r0, [pc, #184]	; (8003d7c <MX_GPIO_Init+0x2a0>)
 8003cc2:	f004 f9e3 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003cc6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003cd8:	230a      	movs	r3, #10
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce6:	f004 f9d1 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d02:	f004 f9c3 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d06:	2301      	movs	r3, #1
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4816      	ldr	r0, [pc, #88]	; (8003d78 <MX_GPIO_Init+0x29c>)
 8003d1e:	f004 f9b5 	bl	800808c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d22:	2304      	movs	r3, #4
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003d32:	230c      	movs	r3, #12
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	480e      	ldr	r0, [pc, #56]	; (8003d78 <MX_GPIO_Init+0x29c>)
 8003d3e:	f004 f9a5 	bl	800808c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	2017      	movs	r0, #23
 8003d48:	f004 f8b1 	bl	8007eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d4c:	2017      	movs	r0, #23
 8003d4e:	f004 f8ca 	bl	8007ee6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	2028      	movs	r0, #40	; 0x28
 8003d58:	f004 f8a9 	bl	8007eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d5c:	2028      	movs	r0, #40	; 0x28
 8003d5e:	f004 f8c2 	bl	8007ee6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d62:	bf00      	nop
 8003d64:	3738      	adds	r7, #56	; 0x38
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	48001400 	.word	0x48001400
 8003d74:	48001000 	.word	0x48001000
 8003d78:	48000c00 	.word	0x48000c00
 8003d7c:	48000800 	.word	0x48000800

08003d80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	//check which version of the timer triggered this callback and toggle LED
	if(htim == &htim17){
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a06      	ldr	r2, [pc, #24]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d102      	bne.n	8003d96 <HAL_TIM_PeriodElapsedCallback+0x16>
		DISPLAY_TIMER_TRIGGERED = 1;
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
	}
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000a20 	.word	0x20000a20
 8003da8:	20000a84 	.word	0x20000a84

08003dac <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003db4:	1d39      	adds	r1, r7, #4
 8003db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4803      	ldr	r0, [pc, #12]	; (8003dcc <__io_putchar+0x20>)
 8003dbe:	f00b fa67 	bl	800f290 <HAL_UART_Transmit>
  return ch;
 8003dc2:	687b      	ldr	r3, [r7, #4]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000464 	.word	0x20000464

08003dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd4:	b672      	cpsid	i
}
 8003dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <Error_Handler+0x8>
	...

08003ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_MspInit+0x44>)
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <HAL_MspInit+0x44>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6613      	str	r3, [r2, #96]	; 0x60
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_MspInit+0x44>)
 8003df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_MspInit+0x44>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <HAL_MspInit+0x44>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6593      	str	r3, [r2, #88]	; 0x58
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_MspInit+0x44>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000

08003e24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08c      	sub	sp, #48	; 0x30
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <HAL_ADC_MspInit+0xd4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d154      	bne.n	8003ef0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	4a2c      	ldr	r2, [pc, #176]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e52:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5e:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	4a26      	ldr	r2, [pc, #152]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e6a:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e76:	4b21      	ldr	r3, [pc, #132]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	4a20      	ldr	r2, [pc, #128]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e94:	f043 0302 	orr.w	r3, r3, #2
 8003e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e9a:	4b18      	ldr	r3, [pc, #96]	; (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003ea6:	233b      	movs	r3, #59	; 0x3b
 8003ea8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003eaa:	230b      	movs	r3, #11
 8003eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb2:	f107 031c 	add.w	r3, r7, #28
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4811      	ldr	r0, [pc, #68]	; (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003eba:	f004 f8e7 	bl	800808c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ec2:	230b      	movs	r3, #11
 8003ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eca:	f107 031c 	add.w	r3, r7, #28
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed4:	f004 f8da 	bl	800808c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003edc:	230b      	movs	r3, #11
 8003ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee4:	f107 031c 	add.w	r3, r7, #28
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4806      	ldr	r0, [pc, #24]	; (8003f04 <HAL_ADC_MspInit+0xe0>)
 8003eec:	f004 f8ce 	bl	800808c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ef0:	bf00      	nop
 8003ef2:	3730      	adds	r7, #48	; 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	50040000 	.word	0x50040000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	48000800 	.word	0x48000800
 8003f04:	48000400 	.word	0x48000400

08003f08 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <HAL_COMP_MspInit+0x98>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d118      	bne.n	8003f5c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <HAL_COMP_MspInit+0x9c>)
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <HAL_COMP_MspInit+0x9c>)
 8003f30:	f043 0302 	orr.w	r3, r3, #2
 8003f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_COMP_MspInit+0x9c>)
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f42:	2304      	movs	r3, #4
 8003f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f46:	2303      	movs	r3, #3
 8003f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4e:	f107 0314 	add.w	r3, r7, #20
 8003f52:	4619      	mov	r1, r3
 8003f54:	4814      	ldr	r0, [pc, #80]	; (8003fa8 <HAL_COMP_MspInit+0xa0>)
 8003f56:	f004 f899 	bl	800808c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003f5a:	e01c      	b.n	8003f96 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a12      	ldr	r2, [pc, #72]	; (8003fac <HAL_COMP_MspInit+0xa4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d117      	bne.n	8003f96 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_COMP_MspInit+0x9c>)
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <HAL_COMP_MspInit+0x9c>)
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_COMP_MspInit+0x9c>)
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f7e:	23c0      	movs	r3, #192	; 0xc0
 8003f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f82:	2303      	movs	r3, #3
 8003f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4805      	ldr	r0, [pc, #20]	; (8003fa8 <HAL_COMP_MspInit+0xa0>)
 8003f92:	f004 f87b 	bl	800808c <HAL_GPIO_Init>
}
 8003f96:	bf00      	nop
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40010200 	.word	0x40010200
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	48000400 	.word	0x48000400
 8003fac:	40010204 	.word	0x40010204

08003fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b0b0      	sub	sp, #192	; 0xc0
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fc8:	f107 0318 	add.w	r3, r7, #24
 8003fcc:	2294      	movs	r2, #148	; 0x94
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f00c fe15 	bl	8010c00 <memset>
  if(hi2c->Instance==I2C1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a4c      	ldr	r2, [pc, #304]	; (800410c <HAL_I2C_MspInit+0x15c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d13c      	bne.n	800405a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003fe0:	2340      	movs	r3, #64	; 0x40
 8003fe2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fe8:	f107 0318 	add.w	r3, r7, #24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f005 ffc1 	bl	8009f74 <HAL_RCCEx_PeriphCLKConfig>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003ff8:	f7ff feea 	bl	8003dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffc:	4b44      	ldr	r3, [pc, #272]	; (8004110 <HAL_I2C_MspInit+0x160>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004000:	4a43      	ldr	r2, [pc, #268]	; (8004110 <HAL_I2C_MspInit+0x160>)
 8004002:	f043 0302 	orr.w	r3, r3, #2
 8004006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004008:	4b41      	ldr	r3, [pc, #260]	; (8004110 <HAL_I2C_MspInit+0x160>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004014:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800401c:	2312      	movs	r3, #18
 800401e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004022:	2301      	movs	r3, #1
 8004024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004028:	2303      	movs	r3, #3
 800402a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800402e:	2304      	movs	r3, #4
 8004030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004034:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004038:	4619      	mov	r1, r3
 800403a:	4836      	ldr	r0, [pc, #216]	; (8004114 <HAL_I2C_MspInit+0x164>)
 800403c:	f004 f826 	bl	800808c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004040:	4b33      	ldr	r3, [pc, #204]	; (8004110 <HAL_I2C_MspInit+0x160>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	4a32      	ldr	r2, [pc, #200]	; (8004110 <HAL_I2C_MspInit+0x160>)
 8004046:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800404a:	6593      	str	r3, [r2, #88]	; 0x58
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <HAL_I2C_MspInit+0x160>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004058:	e054      	b.n	8004104 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2e      	ldr	r2, [pc, #184]	; (8004118 <HAL_I2C_MspInit+0x168>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d14f      	bne.n	8004104 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004068:	2300      	movs	r3, #0
 800406a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800406c:	f107 0318 	add.w	r3, r7, #24
 8004070:	4618      	mov	r0, r3
 8004072:	f005 ff7f 	bl	8009f74 <HAL_RCCEx_PeriphCLKConfig>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 800407c:	f7ff fea8 	bl	8003dd0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004080:	4b23      	ldr	r3, [pc, #140]	; (8004110 <HAL_I2C_MspInit+0x160>)
 8004082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_I2C_MspInit+0x160>)
 8004086:	f043 0320 	orr.w	r3, r3, #32
 800408a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_I2C_MspInit+0x160>)
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004098:	2303      	movs	r3, #3
 800409a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800409e:	2312      	movs	r3, #18
 80040a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040aa:	2303      	movs	r3, #3
 80040ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80040b0:	2304      	movs	r3, #4
 80040b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80040ba:	4619      	mov	r1, r3
 80040bc:	4817      	ldr	r0, [pc, #92]	; (800411c <HAL_I2C_MspInit+0x16c>)
 80040be:	f003 ffe5 	bl	800808c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040c2:	2304      	movs	r3, #4
 80040c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040c8:	2312      	movs	r3, #18
 80040ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d4:	2303      	movs	r3, #3
 80040d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80040da:	2304      	movs	r3, #4
 80040dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80040e4:	4619      	mov	r1, r3
 80040e6:	480d      	ldr	r0, [pc, #52]	; (800411c <HAL_I2C_MspInit+0x16c>)
 80040e8:	f003 ffd0 	bl	800808c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040ec:	4b08      	ldr	r3, [pc, #32]	; (8004110 <HAL_I2C_MspInit+0x160>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	4a07      	ldr	r2, [pc, #28]	; (8004110 <HAL_I2C_MspInit+0x160>)
 80040f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040f6:	6593      	str	r3, [r2, #88]	; 0x58
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_I2C_MspInit+0x160>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
}
 8004104:	bf00      	nop
 8004106:	37c0      	adds	r7, #192	; 0xc0
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40005400 	.word	0x40005400
 8004110:	40021000 	.word	0x40021000
 8004114:	48000400 	.word	0x48000400
 8004118:	40005800 	.word	0x40005800
 800411c:	48001400 	.word	0x48001400

08004120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0b2      	sub	sp, #200	; 0xc8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004138:	f107 0320 	add.w	r3, r7, #32
 800413c:	2294      	movs	r2, #148	; 0x94
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f00c fd5d 	bl	8010c00 <memset>
  if(huart->Instance==LPUART1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a64      	ldr	r2, [pc, #400]	; (80042dc <HAL_UART_MspInit+0x1bc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d13e      	bne.n	80041ce <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004150:	2320      	movs	r3, #32
 8004152:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004154:	2300      	movs	r3, #0
 8004156:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004158:	f107 0320 	add.w	r3, r7, #32
 800415c:	4618      	mov	r0, r3
 800415e:	f005 ff09 	bl	8009f74 <HAL_RCCEx_PeriphCLKConfig>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004168:	f7ff fe32 	bl	8003dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800416c:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	4a5b      	ldr	r2, [pc, #364]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004178:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004184:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004188:	4a55      	ldr	r2, [pc, #340]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 800418a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800419c:	f005 f802 	bl	80091a4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80041a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80041a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	2303      	movs	r3, #3
 80041b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80041ba:	2308      	movs	r3, #8
 80041bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4847      	ldr	r0, [pc, #284]	; (80042e4 <HAL_UART_MspInit+0x1c4>)
 80041c8:	f003 ff60 	bl	800808c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041cc:	e081      	b.n	80042d2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a45      	ldr	r2, [pc, #276]	; (80042e8 <HAL_UART_MspInit+0x1c8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d13b      	bne.n	8004250 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041d8:	2302      	movs	r3, #2
 80041da:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041dc:	2300      	movs	r3, #0
 80041de:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041e0:	f107 0320 	add.w	r3, r7, #32
 80041e4:	4618      	mov	r0, r3
 80041e6:	f005 fec5 	bl	8009f74 <HAL_RCCEx_PeriphCLKConfig>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80041f0:	f7ff fdee 	bl	8003dd0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041f4:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	4a39      	ldr	r2, [pc, #228]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 80041fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004200:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800420c:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 800420e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004210:	4a33      	ldr	r2, [pc, #204]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004212:	f043 0308 	orr.w	r3, r3, #8
 8004216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004218:	4b31      	ldr	r3, [pc, #196]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 800421a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004224:	2360      	movs	r3, #96	; 0x60
 8004226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004236:	2303      	movs	r3, #3
 8004238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800423c:	2307      	movs	r3, #7
 800423e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004242:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004246:	4619      	mov	r1, r3
 8004248:	4828      	ldr	r0, [pc, #160]	; (80042ec <HAL_UART_MspInit+0x1cc>)
 800424a:	f003 ff1f 	bl	800808c <HAL_GPIO_Init>
}
 800424e:	e040      	b.n	80042d2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <HAL_UART_MspInit+0x1d0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d13b      	bne.n	80042d2 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800425a:	2304      	movs	r3, #4
 800425c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800425e:	2300      	movs	r3, #0
 8004260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004262:	f107 0320 	add.w	r3, r7, #32
 8004266:	4618      	mov	r0, r3
 8004268:	f005 fe84 	bl	8009f74 <HAL_RCCEx_PeriphCLKConfig>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8004272:	f7ff fdad 	bl	8003dd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004276:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 800427c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004280:	6593      	str	r3, [r2, #88]	; 0x58
 8004282:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 8004294:	f043 0308 	orr.w	r3, r3, #8
 8004298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <HAL_UART_MspInit+0x1c0>)
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ba:	2303      	movs	r3, #3
 80042bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042c0:	2307      	movs	r3, #7
 80042c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4807      	ldr	r0, [pc, #28]	; (80042ec <HAL_UART_MspInit+0x1cc>)
 80042ce:	f003 fedd 	bl	800808c <HAL_GPIO_Init>
}
 80042d2:	bf00      	nop
 80042d4:	37c8      	adds	r7, #200	; 0xc8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40008000 	.word	0x40008000
 80042e0:	40021000 	.word	0x40021000
 80042e4:	48001800 	.word	0x48001800
 80042e8:	40004400 	.word	0x40004400
 80042ec:	48000c00 	.word	0x48000c00
 80042f0:	40004800 	.word	0x40004800

080042f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	; 0x30
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fc:	f107 031c 	add.w	r3, r7, #28
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3c      	ldr	r2, [pc, #240]	; (8004404 <HAL_SPI_MspInit+0x110>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d144      	bne.n	80043a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004316:	4b3c      	ldr	r3, [pc, #240]	; (8004408 <HAL_SPI_MspInit+0x114>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	4a3b      	ldr	r2, [pc, #236]	; (8004408 <HAL_SPI_MspInit+0x114>)
 800431c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004320:	6593      	str	r3, [r2, #88]	; 0x58
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <HAL_SPI_MspInit+0x114>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_SPI_MspInit+0x114>)
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	4a35      	ldr	r2, [pc, #212]	; (8004408 <HAL_SPI_MspInit+0x114>)
 8004334:	f043 0304 	orr.w	r3, r3, #4
 8004338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800433a:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_SPI_MspInit+0x114>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004346:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_SPI_MspInit+0x114>)
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <HAL_SPI_MspInit+0x114>)
 800434c:	f043 0308 	orr.w	r3, r3, #8
 8004350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004352:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_SPI_MspInit+0x114>)
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800435e:	2304      	movs	r3, #4
 8004360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004362:	2302      	movs	r3, #2
 8004364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004366:	2300      	movs	r3, #0
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436a:	2303      	movs	r3, #3
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800436e:	2305      	movs	r3, #5
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004372:	f107 031c 	add.w	r3, r7, #28
 8004376:	4619      	mov	r1, r3
 8004378:	4824      	ldr	r0, [pc, #144]	; (800440c <HAL_SPI_MspInit+0x118>)
 800437a:	f003 fe87 	bl	800808c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800437e:	2312      	movs	r3, #18
 8004380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004382:	2302      	movs	r3, #2
 8004384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800438a:	2303      	movs	r3, #3
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800438e:	2305      	movs	r3, #5
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004392:	f107 031c 	add.w	r3, r7, #28
 8004396:	4619      	mov	r1, r3
 8004398:	481d      	ldr	r0, [pc, #116]	; (8004410 <HAL_SPI_MspInit+0x11c>)
 800439a:	f003 fe77 	bl	800808c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800439e:	e02d      	b.n	80043fc <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_SPI_MspInit+0x120>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d128      	bne.n	80043fc <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80043aa:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_SPI_MspInit+0x114>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	4a16      	ldr	r2, [pc, #88]	; (8004408 <HAL_SPI_MspInit+0x114>)
 80043b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b4:	6593      	str	r3, [r2, #88]	; 0x58
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_SPI_MspInit+0x114>)
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_SPI_MspInit+0x114>)
 80043c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <HAL_SPI_MspInit+0x114>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_SPI_MspInit+0x114>)
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80043da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80043de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e0:	2302      	movs	r3, #2
 80043e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e8:	2303      	movs	r3, #3
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80043ec:	2306      	movs	r3, #6
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043f0:	f107 031c 	add.w	r3, r7, #28
 80043f4:	4619      	mov	r1, r3
 80043f6:	4805      	ldr	r0, [pc, #20]	; (800440c <HAL_SPI_MspInit+0x118>)
 80043f8:	f003 fe48 	bl	800808c <HAL_GPIO_Init>
}
 80043fc:	bf00      	nop
 80043fe:	3730      	adds	r7, #48	; 0x30
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40003800 	.word	0x40003800
 8004408:	40021000 	.word	0x40021000
 800440c:	48000800 	.word	0x48000800
 8004410:	48000c00 	.word	0x48000c00
 8004414:	40003c00 	.word	0x40003c00

08004418 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	; 0x38
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a44      	ldr	r2, [pc, #272]	; (8004548 <HAL_TIM_PWM_MspInit+0x130>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d131      	bne.n	800449e <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800443a:	4b44      	ldr	r3, [pc, #272]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 800443c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443e:	4a43      	ldr	r2, [pc, #268]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 8004440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004444:	6613      	str	r3, [r2, #96]	; 0x60
 8004446:	4b41      	ldr	r3, [pc, #260]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004452:	4b3e      	ldr	r3, [pc, #248]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	4a3d      	ldr	r2, [pc, #244]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 8004458:	f043 0310 	orr.w	r3, r3, #16
 800445c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800445e:	4b3b      	ldr	r3, [pc, #236]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800446a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004478:	2300      	movs	r3, #0
 800447a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800447c:	2303      	movs	r3, #3
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004484:	4619      	mov	r1, r3
 8004486:	4832      	ldr	r0, [pc, #200]	; (8004550 <HAL_TIM_PWM_MspInit+0x138>)
 8004488:	f003 fe00 	bl	800808c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800448c:	2200      	movs	r2, #0
 800448e:	2100      	movs	r1, #0
 8004490:	201a      	movs	r0, #26
 8004492:	f003 fd0c 	bl	8007eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004496:	201a      	movs	r0, #26
 8004498:	f003 fd25 	bl	8007ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800449c:	e050      	b.n	8004540 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a6:	d10c      	bne.n	80044c2 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044a8:	4b28      	ldr	r3, [pc, #160]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	4a27      	ldr	r2, [pc, #156]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6593      	str	r3, [r2, #88]	; 0x58
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	69bb      	ldr	r3, [r7, #24]
}
 80044c0:	e03e      	b.n	8004540 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM4)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a23      	ldr	r2, [pc, #140]	; (8004554 <HAL_TIM_PWM_MspInit+0x13c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d128      	bne.n	800451e <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044cc:	4b1f      	ldr	r3, [pc, #124]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	4a1e      	ldr	r2, [pc, #120]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	6593      	str	r3, [r2, #88]	; 0x58
 80044d8:	4b1c      	ldr	r3, [pc, #112]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044ea:	f043 0310 	orr.w	r3, r3, #16
 80044ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 80044f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044fc:	2301      	movs	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004508:	2300      	movs	r3, #0
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800450c:	2302      	movs	r3, #2
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	4619      	mov	r1, r3
 8004516:	480e      	ldr	r0, [pc, #56]	; (8004550 <HAL_TIM_PWM_MspInit+0x138>)
 8004518:	f003 fdb8 	bl	800808c <HAL_GPIO_Init>
}
 800451c:	e010      	b.n	8004540 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM15)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <HAL_TIM_PWM_MspInit+0x140>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10b      	bne.n	8004540 <HAL_TIM_PWM_MspInit+0x128>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004528:	4b08      	ldr	r3, [pc, #32]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 800452a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452c:	4a07      	ldr	r2, [pc, #28]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 800452e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004532:	6613      	str	r3, [r2, #96]	; 0x60
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_TIM_PWM_MspInit+0x134>)
 8004536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]
}
 8004540:	bf00      	nop
 8004542:	3738      	adds	r7, #56	; 0x38
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40021000 	.word	0x40021000
 8004550:	48001000 	.word	0x48001000
 8004554:	40000800 	.word	0x40000800
 8004558:	40014000 	.word	0x40014000

0800455c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_TIM_Base_MspInit+0x68>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10c      	bne.n	8004588 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <HAL_TIM_Base_MspInit+0x6c>)
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <HAL_TIM_Base_MspInit+0x6c>)
 8004574:	f043 0302 	orr.w	r3, r3, #2
 8004578:	6593      	str	r3, [r2, #88]	; 0x58
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_TIM_Base_MspInit+0x6c>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004586:	e018      	b.n	80045ba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <HAL_TIM_Base_MspInit+0x70>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d113      	bne.n	80045ba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <HAL_TIM_Base_MspInit+0x6c>)
 8004594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004596:	4a0c      	ldr	r2, [pc, #48]	; (80045c8 <HAL_TIM_Base_MspInit+0x6c>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6613      	str	r3, [r2, #96]	; 0x60
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <HAL_TIM_Base_MspInit+0x6c>)
 80045a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2100      	movs	r1, #0
 80045ae:	201a      	movs	r0, #26
 80045b0:	f003 fc7d 	bl	8007eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80045b4:	201a      	movs	r0, #26
 80045b6:	f003 fc96 	bl	8007ee6 <HAL_NVIC_EnableIRQ>
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40014800 	.word	0x40014800

080045d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08e      	sub	sp, #56	; 0x38
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a66      	ldr	r2, [pc, #408]	; (8004788 <HAL_TIM_MspPostInit+0x1b8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d11d      	bne.n	800462e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045f2:	4b66      	ldr	r3, [pc, #408]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	4a65      	ldr	r2, [pc, #404]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 80045f8:	f043 0310 	orr.w	r3, r3, #16
 80045fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	623b      	str	r3, [r7, #32]
 8004608:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800460a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004610:	2302      	movs	r3, #2
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004618:	2300      	movs	r3, #0
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800461c:	2301      	movs	r3, #1
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004624:	4619      	mov	r1, r3
 8004626:	485a      	ldr	r0, [pc, #360]	; (8004790 <HAL_TIM_MspPostInit+0x1c0>)
 8004628:	f003 fd30 	bl	800808c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800462c:	e0a7      	b.n	800477e <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d13a      	bne.n	80046ae <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004638:	4b54      	ldr	r3, [pc, #336]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 800463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463c:	4a53      	ldr	r2, [pc, #332]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004644:	4b51      	ldr	r3, [pc, #324]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 8004646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004650:	4b4e      	ldr	r3, [pc, #312]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 8004652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004654:	4a4d      	ldr	r2, [pc, #308]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 800465e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004668:	2301      	movs	r3, #1
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466c:	2302      	movs	r3, #2
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004674:	2300      	movs	r3, #0
 8004676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004678:	2301      	movs	r3, #1
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004680:	4619      	mov	r1, r3
 8004682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004686:	f003 fd01 	bl	800808c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800468a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004698:	2300      	movs	r3, #0
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800469c:	2301      	movs	r3, #1
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a4:	4619      	mov	r1, r3
 80046a6:	483b      	ldr	r0, [pc, #236]	; (8004794 <HAL_TIM_MspPostInit+0x1c4>)
 80046a8:	f003 fcf0 	bl	800808c <HAL_GPIO_Init>
}
 80046ac:	e067      	b.n	800477e <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM3)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a39      	ldr	r2, [pc, #228]	; (8004798 <HAL_TIM_MspPostInit+0x1c8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d11d      	bne.n	80046f4 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b8:	4b34      	ldr	r3, [pc, #208]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046bc:	4a33      	ldr	r2, [pc, #204]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 80046c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80046d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d6:	2302      	movs	r3, #2
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046de:	2300      	movs	r3, #0
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046e2:	2302      	movs	r3, #2
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ea:	4619      	mov	r1, r3
 80046ec:	482b      	ldr	r0, [pc, #172]	; (800479c <HAL_TIM_MspPostInit+0x1cc>)
 80046ee:	f003 fccd 	bl	800808c <HAL_GPIO_Init>
}
 80046f2:	e044      	b.n	800477e <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM4)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a29      	ldr	r2, [pc, #164]	; (80047a0 <HAL_TIM_MspPostInit+0x1d0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d11d      	bne.n	800473a <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	4a22      	ldr	r2, [pc, #136]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 8004704:	f043 0308 	orr.w	r3, r3, #8
 8004708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471c:	2302      	movs	r3, #2
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004720:	2300      	movs	r3, #0
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004724:	2300      	movs	r3, #0
 8004726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004728:	2302      	movs	r3, #2
 800472a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800472c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004730:	4619      	mov	r1, r3
 8004732:	481c      	ldr	r0, [pc, #112]	; (80047a4 <HAL_TIM_MspPostInit+0x1d4>)
 8004734:	f003 fcaa 	bl	800808c <HAL_GPIO_Init>
}
 8004738:	e021      	b.n	800477e <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM15)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1a      	ldr	r2, [pc, #104]	; (80047a8 <HAL_TIM_MspPostInit+0x1d8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d11c      	bne.n	800477e <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	4a10      	ldr	r2, [pc, #64]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 800474a:	f043 0302 	orr.w	r3, r3, #2
 800474e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004750:	4b0e      	ldr	r3, [pc, #56]	; (800478c <HAL_TIM_MspPostInit+0x1bc>)
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800475c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004762:	2302      	movs	r3, #2
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476a:	2300      	movs	r3, #0
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800476e:	230e      	movs	r3, #14
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004776:	4619      	mov	r1, r3
 8004778:	4806      	ldr	r0, [pc, #24]	; (8004794 <HAL_TIM_MspPostInit+0x1c4>)
 800477a:	f003 fc87 	bl	800808c <HAL_GPIO_Init>
}
 800477e:	bf00      	nop
 8004780:	3738      	adds	r7, #56	; 0x38
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40021000 	.word	0x40021000
 8004790:	48001000 	.word	0x48001000
 8004794:	48000400 	.word	0x48000400
 8004798:	40000400 	.word	0x40000400
 800479c:	48000800 	.word	0x48000800
 80047a0:	40000800 	.word	0x40000800
 80047a4:	48000c00 	.word	0x48000c00
 80047a8:	40014000 	.word	0x40014000

080047ac <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	; 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a50      	ldr	r2, [pc, #320]	; (80048fc <HAL_SAI_MspInit+0x150>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d124      	bne.n	8004808 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80047be:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_SAI_MspInit+0x154>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80047c6:	4b4f      	ldr	r3, [pc, #316]	; (8004904 <HAL_SAI_MspInit+0x158>)
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	4a4e      	ldr	r2, [pc, #312]	; (8004904 <HAL_SAI_MspInit+0x158>)
 80047cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047d0:	6613      	str	r3, [r2, #96]	; 0x60
 80047d2:	4b4c      	ldr	r3, [pc, #304]	; (8004904 <HAL_SAI_MspInit+0x158>)
 80047d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80047de:	4b48      	ldr	r3, [pc, #288]	; (8004900 <HAL_SAI_MspInit+0x154>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a46      	ldr	r2, [pc, #280]	; (8004900 <HAL_SAI_MspInit+0x154>)
 80047e6:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80047e8:	2374      	movs	r3, #116	; 0x74
 80047ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f4:	2300      	movs	r3, #0
 80047f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80047f8:	230d      	movs	r3, #13
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	4619      	mov	r1, r3
 8004802:	4841      	ldr	r0, [pc, #260]	; (8004908 <HAL_SAI_MspInit+0x15c>)
 8004804:	f003 fc42 	bl	800808c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a3f      	ldr	r2, [pc, #252]	; (800490c <HAL_SAI_MspInit+0x160>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d135      	bne.n	800487e <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_SAI_MspInit+0x154>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800481a:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <HAL_SAI_MspInit+0x158>)
 800481c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481e:	4a39      	ldr	r2, [pc, #228]	; (8004904 <HAL_SAI_MspInit+0x158>)
 8004820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004824:	6613      	str	r3, [r2, #96]	; 0x60
 8004826:	4b37      	ldr	r3, [pc, #220]	; (8004904 <HAL_SAI_MspInit+0x158>)
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8004832:	4b33      	ldr	r3, [pc, #204]	; (8004900 <HAL_SAI_MspInit+0x154>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	4a31      	ldr	r2, [pc, #196]	; (8004900 <HAL_SAI_MspInit+0x154>)
 800483a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800483c:	2308      	movs	r3, #8
 800483e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004840:	2302      	movs	r3, #2
 8004842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004848:	2300      	movs	r3, #0
 800484a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800484c:	230d      	movs	r3, #13
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	4619      	mov	r1, r3
 8004856:	482c      	ldr	r0, [pc, #176]	; (8004908 <HAL_SAI_MspInit+0x15c>)
 8004858:	f003 fc18 	bl	800808c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800485c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004862:	2302      	movs	r3, #2
 8004864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	2300      	movs	r3, #0
 800486c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800486e:	230d      	movs	r3, #13
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004872:	f107 0314 	add.w	r3, r7, #20
 8004876:	4619      	mov	r1, r3
 8004878:	4825      	ldr	r0, [pc, #148]	; (8004910 <HAL_SAI_MspInit+0x164>)
 800487a:	f003 fc07 	bl	800808c <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a24      	ldr	r2, [pc, #144]	; (8004914 <HAL_SAI_MspInit+0x168>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d135      	bne.n	80048f4 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004888:	4b23      	ldr	r3, [pc, #140]	; (8004918 <HAL_SAI_MspInit+0x16c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004890:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <HAL_SAI_MspInit+0x158>)
 8004892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004894:	4a1b      	ldr	r2, [pc, #108]	; (8004904 <HAL_SAI_MspInit+0x158>)
 8004896:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800489a:	6613      	str	r3, [r2, #96]	; 0x60
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_SAI_MspInit+0x158>)
 800489e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_SAI_MspInit+0x16c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	4a1a      	ldr	r2, [pc, #104]	; (8004918 <HAL_SAI_MspInit+0x16c>)
 80048b0:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80048b2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80048b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b8:	2302      	movs	r3, #2
 80048ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80048c4:	230d      	movs	r3, #13
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4619      	mov	r1, r3
 80048ce:	4813      	ldr	r0, [pc, #76]	; (800491c <HAL_SAI_MspInit+0x170>)
 80048d0:	f003 fbdc 	bl	800808c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80048d4:	2340      	movs	r3, #64	; 0x40
 80048d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d8:	2302      	movs	r3, #2
 80048da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e0:	2300      	movs	r3, #0
 80048e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80048e4:	230d      	movs	r3, #13
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4619      	mov	r1, r3
 80048ee:	480c      	ldr	r0, [pc, #48]	; (8004920 <HAL_SAI_MspInit+0x174>)
 80048f0:	f003 fbcc 	bl	800808c <HAL_GPIO_Init>

    }
}
 80048f4:	bf00      	nop
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40015404 	.word	0x40015404
 8004900:	20000a88 	.word	0x20000a88
 8004904:	40021000 	.word	0x40021000
 8004908:	48001000 	.word	0x48001000
 800490c:	40015424 	.word	0x40015424
 8004910:	48001400 	.word	0x48001400
 8004914:	40015804 	.word	0x40015804
 8004918:	20000a8c 	.word	0x20000a8c
 800491c:	48000400 	.word	0x48000400
 8004920:	48000800 	.word	0x48000800

08004924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004928:	e7fe      	b.n	8004928 <NMI_Handler+0x4>

0800492a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800492a:	b480      	push	{r7}
 800492c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800492e:	e7fe      	b.n	800492e <HardFault_Handler+0x4>

08004930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004934:	e7fe      	b.n	8004934 <MemManage_Handler+0x4>

08004936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004936:	b480      	push	{r7}
 8004938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800493a:	e7fe      	b.n	800493a <BusFault_Handler+0x4>

0800493c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004940:	e7fe      	b.n	8004940 <UsageFault_Handler+0x4>

08004942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004970:	f002 f902 	bl	8006b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}

08004978 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800497c:	2020      	movs	r0, #32
 800497e:	f003 fd47 	bl	8008410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  LoRaRecieve = 1;
 8004982:	4b02      	ldr	r3, [pc, #8]	; (800498c <EXTI9_5_IRQHandler+0x14>)
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004988:	bf00      	nop
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000a86 	.word	0x20000a86

08004990 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004994:	4803      	ldr	r0, [pc, #12]	; (80049a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8004996:	f009 fa8f 	bl	800deb8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800499a:	4803      	ldr	r0, [pc, #12]	; (80049a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800499c:	f009 fa8c 	bl	800deb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80049a0:	bf00      	nop
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	200008a4 	.word	0x200008a4
 80049a8:	20000a20 	.word	0x20000a20

080049ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80049b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80049b4:	f003 fd2c 	bl	8008410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  KeyPadSelect = 1;
 80049b8:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <EXTI15_10_IRQHandler+0x18>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000a85 	.word	0x20000a85

080049c8 <init_analytics>:
// (calculated from exercise baseline)
// ~80% of minimum optimal heart rate 0.8 * 0.64*(220-age)
static int age = 0;
static int heart_threshold = INT_MAX;

void init_analytics(int age) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  heart_threshold = (220-age)*0.60;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1c3 03dc 	rsb	r3, r3, #220	; 0xdc
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fb fdbc 	bl	8000554 <__aeabi_i2d>
 80049dc:	a30c      	add	r3, pc, #48	; (adr r3, 8004a10 <init_analytics+0x48>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fe21 	bl	8000628 <__aeabi_dmul>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	f7fc f8cb 	bl	8000b88 <__aeabi_d2iz>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <init_analytics+0x40>)
 80049f6:	6013      	str	r3, [r2, #0]
  state = k_post_init;
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <init_analytics+0x44>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000028 	.word	0x20000028
 8004a0c:	20000af4 	.word	0x20000af4
 8004a10:	33333333 	.word	0x33333333
 8004a14:	3fe33333 	.word	0x3fe33333

08004a18 <heartRateHigh>:

// Heart Rate too High
uint8_t heartRateHigh(int bpm, int age) {
 8004a18:	b5b0      	push	{r4, r5, r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	int maxHR = 220 - age;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f1c3 03dc 	rsb	r3, r3, #220	; 0xdc
 8004a28:	60fb      	str	r3, [r7, #12]
	if (bpm > maxHR*0.80) return 1;
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fb fd92 	bl	8000554 <__aeabi_i2d>
 8004a30:	4604      	mov	r4, r0
 8004a32:	460d      	mov	r5, r1
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7fb fd8d 	bl	8000554 <__aeabi_i2d>
 8004a3a:	a30b      	add	r3, pc, #44	; (adr r3, 8004a68 <heartRateHigh+0x50>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fb fdf2 	bl	8000628 <__aeabi_dmul>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4620      	mov	r0, r4
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	f7fc f87c 	bl	8000b48 <__aeabi_dcmpgt>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <heartRateHigh+0x42>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <heartRateHigh+0x44>
	return 0;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bdb0      	pop	{r4, r5, r7, pc}
 8004a64:	f3af 8000 	nop.w
 8004a68:	9999999a 	.word	0x9999999a
 8004a6c:	3fe99999 	.word	0x3fe99999

08004a70 <heartRateLow>:

// Heart Rate too Low
uint8_t heartRateLow(int bpm, int age) {
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	int maxHR = 220 - age;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f1c3 03dc 	rsb	r3, r3, #220	; 0xdc
 8004a80:	60fb      	str	r3, [r7, #12]
	if (bpm < maxHR*0.60) return 1;
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fb fd66 	bl	8000554 <__aeabi_i2d>
 8004a88:	4604      	mov	r4, r0
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7fb fd61 	bl	8000554 <__aeabi_i2d>
 8004a92:	a30b      	add	r3, pc, #44	; (adr r3, 8004ac0 <heartRateLow+0x50>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fdc6 	bl	8000628 <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f7fc f832 	bl	8000b0c <__aeabi_dcmplt>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <heartRateLow+0x42>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <heartRateLow+0x44>
	return 0;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bdb0      	pop	{r4, r5, r7, pc}
 8004abc:	f3af 8000 	nop.w
 8004ac0:	33333333 	.word	0x33333333
 8004ac4:	3fe33333 	.word	0x3fe33333

08004ac8 <input_data>:

// Requires: speed in meters/s
void input_data(int bpm, float speed) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	ed87 0a00 	vstr	s0, [r7]
  switch (state) {
 8004ad4:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <input_data+0x9c>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d83f      	bhi.n	8004b5c <input_data+0x94>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <input_data+0x1c>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b53 	.word	0x08004b53
 8004ae8:	08004af5 	.word	0x08004af5
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b3d 	.word	0x08004b3d
    case k_pre_init:
      /* idle until init is called */
      break;
    case k_post_init:
      // if athlete starts moving or heart indicates exercise
      if (speed > SPEED_THRESHOLD || bpm > heart_threshold) {
 8004af4:	edd7 7a00 	vldr	s15, [r7]
 8004af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	dc04      	bgt.n	8004b10 <input_data+0x48>
 8004b06:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <input_data+0xa0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	dd22      	ble.n	8004b56 <input_data+0x8e>
        state = k_exercise_baseline;
 8004b10:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <input_data+0x9c>)
 8004b12:	2202      	movs	r2, #2
 8004b14:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b16:	e01e      	b.n	8004b56 <input_data+0x8e>
    case k_exercise_baseline:
      update_data(bpm, speed);
 8004b18:	ed97 0a00 	vldr	s0, [r7]
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f87b 	bl	8004c18 <update_data>
      if (data_index == DATA_BUFFER_LENGTH) {
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <input_data+0xa4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b18      	cmp	r3, #24
 8004b28:	d117      	bne.n	8004b5a <input_data+0x92>
        calculate_exercise_strain();
 8004b2a:	f000 f8a7 	bl	8004c7c <calculate_exercise_strain>
        data_index = 0;
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <input_data+0xa4>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
        state = k_exercise;
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <input_data+0x9c>)
 8004b36:	2203      	movs	r2, #3
 8004b38:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b3a:	e00e      	b.n	8004b5a <input_data+0x92>
    case k_exercise:
      current_strain = get_strain(bpm, speed);
 8004b3c:	ed97 0a00 	vldr	s0, [r7]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f841 	bl	8004bc8 <get_strain>
 8004b46:	eef0 7a40 	vmov.f32	s15, s0
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <input_data+0xa8>)
 8004b4c:	edc3 7a00 	vstr	s15, [r3]
      break;
 8004b50:	e004      	b.n	8004b5c <input_data+0x94>
      break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <input_data+0x94>
      break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <input_data+0x94>
      break;
 8004b5a:	bf00      	nop
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000af4 	.word	0x20000af4
 8004b68:	20000028 	.word	0x20000028
 8004b6c:	20000af0 	.word	0x20000af0
 8004b70:	20000020 	.word	0x20000020

08004b74 <get_strain_factor>:

float get_strain_factor() {
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  if (state != k_exercise || current_strain == -1) return -1;
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <get_strain_factor+0x48>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d109      	bne.n	8004b94 <get_strain_factor+0x20>
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <get_strain_factor+0x4c>)
 8004b82:	edd3 7a00 	vldr	s15, [r3]
 8004b86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004b8a:	eef4 7a47 	vcmp.f32	s15, s14
 8004b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b92:	d102      	bne.n	8004b9a <get_strain_factor+0x26>
 8004b94:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8004b98:	e007      	b.n	8004baa <get_strain_factor+0x36>
  return (exercise_base_strain / current_strain);
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <get_strain_factor+0x50>)
 8004b9c:	ed93 7a00 	vldr	s14, [r3]
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <get_strain_factor+0x4c>)
 8004ba2:	edd3 7a00 	vldr	s15, [r3]
 8004ba6:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8004baa:	eef0 7a66 	vmov.f32	s15, s13
 8004bae:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000af4 	.word	0x20000af4
 8004bc0:	20000020 	.word	0x20000020
 8004bc4:	20000024 	.word	0x20000024

08004bc8 <get_strain>:

inline
float get_strain(int bpm, float speed) {
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	ed87 0a00 	vstr	s0, [r7]
	// -1 if divide by zero, will not end up being pushed
	// to data array or updating curr_strain
  return (speed == 0) ? -1 : bpm / (speed * 60.0f);
 8004bd4:	edd7 7a00 	vldr	s15, [r7]
 8004bd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be0:	d00d      	beq.n	8004bfe <get_strain+0x36>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bec:	edd7 7a00 	vldr	s15, [r7]
 8004bf0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8004c14 <get_strain+0x4c>
 8004bf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bf8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004bfc:	e001      	b.n	8004c02 <get_strain+0x3a>
 8004bfe:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8004c02:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c06:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	42700000 	.word	0x42700000

08004c18 <update_data>:

void update_data(int bpm, float speed) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	ed87 0a00 	vstr	s0, [r7]
  current_strain = get_strain(bpm, speed);
 8004c24:	ed97 0a00 	vldr	s0, [r7]
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ffcd 	bl	8004bc8 <get_strain>
 8004c2e:	eef0 7a40 	vmov.f32	s15, s0
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <update_data+0x58>)
 8004c34:	edc3 7a00 	vstr	s15, [r3]
  if (current_strain == -1) return;
 8004c38:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <update_data+0x58>)
 8004c3a:	edd3 7a00 	vldr	s15, [r3]
 8004c3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c42:	eef4 7a47 	vcmp.f32	s15, s14
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	d00d      	beq.n	8004c68 <update_data+0x50>
  data[data_index] = current_strain;
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <update_data+0x5c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a07      	ldr	r2, [pc, #28]	; (8004c70 <update_data+0x58>)
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	4908      	ldr	r1, [pc, #32]	; (8004c78 <update_data+0x60>)
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	601a      	str	r2, [r3, #0]
  ++data_index;
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <update_data+0x5c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <update_data+0x5c>)
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e000      	b.n	8004c6a <update_data+0x52>
  if (current_strain == -1) return;
 8004c68:	bf00      	nop
}
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000020 	.word	0x20000020
 8004c74:	20000af0 	.word	0x20000af0
 8004c78:	20000a90 	.word	0x20000a90

08004c7c <calculate_exercise_strain>:

void calculate_exercise_strain(void) {
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
  exercise_base_strain = 0;
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <calculate_exercise_strain+0x5c>)
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	e010      	b.n	8004cb2 <calculate_exercise_strain+0x36>
    exercise_base_strain += data[i];
 8004c90:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <calculate_exercise_strain+0x60>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	ed93 7a00 	vldr	s14, [r3]
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <calculate_exercise_strain+0x5c>)
 8004c9e:	edd3 7a00 	vldr	s15, [r3]
 8004ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <calculate_exercise_strain+0x5c>)
 8004ca8:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b17      	cmp	r3, #23
 8004cb6:	ddeb      	ble.n	8004c90 <calculate_exercise_strain+0x14>
  }
  exercise_base_strain /= DATA_BUFFER_LENGTH;
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <calculate_exercise_strain+0x5c>)
 8004cba:	ed93 7a00 	vldr	s14, [r3]
 8004cbe:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8004cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cc6:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <calculate_exercise_strain+0x5c>)
 8004cc8:	edc3 7a00 	vstr	s15, [r3]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000024 	.word	0x20000024
 8004cdc:	20000a90 	.word	0x20000a90

08004ce0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return 1;
 8004ce4:	2301      	movs	r3, #1
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <_kill>:

int _kill(int pid, int sig)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004cfa:	f00b ff9d 	bl	8010c38 <__errno>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2216      	movs	r2, #22
 8004d02:	601a      	str	r2, [r3, #0]
  return -1;
 8004d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <_exit>:

void _exit (int status)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ffe7 	bl	8004cf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d22:	e7fe      	b.n	8004d22 <_exit+0x12>

08004d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e00a      	b.n	8004d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d36:	f3af 8000 	nop.w
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	60ba      	str	r2, [r7, #8]
 8004d42:	b2ca      	uxtb	r2, r1
 8004d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	dbf0      	blt.n	8004d36 <_read+0x12>
  }

  return len;
 8004d54:	687b      	ldr	r3, [r7, #4]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e009      	b.n	8004d84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	60ba      	str	r2, [r7, #8]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff f817 	bl	8003dac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3301      	adds	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	dbf1      	blt.n	8004d70 <_write+0x12>
  }
  return len;
 8004d8c:	687b      	ldr	r3, [r7, #4]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <_close>:

int _close(int file)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <_isatty>:

int _isatty(int file)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004dd6:	2301      	movs	r3, #1
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e08:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <_sbrk+0x5c>)
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <_sbrk+0x60>)
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <_sbrk+0x64>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e1c:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <_sbrk+0x64>)
 8004e1e:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <_sbrk+0x68>)
 8004e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <_sbrk+0x64>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4413      	add	r3, r2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d207      	bcs.n	8004e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e30:	f00b ff02 	bl	8010c38 <__errno>
 8004e34:	4603      	mov	r3, r0
 8004e36:	220c      	movs	r2, #12
 8004e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e3e:	e009      	b.n	8004e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <_sbrk+0x64>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e46:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <_sbrk+0x64>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	4a05      	ldr	r2, [pc, #20]	; (8004e64 <_sbrk+0x64>)
 8004e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	200a0000 	.word	0x200a0000
 8004e60:	00000400 	.word	0x00000400
 8004e64:	20000af8 	.word	0x20000af8
 8004e68:	20000c68 	.word	0x20000c68

08004e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <SystemInit+0x20>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <SystemInit+0x20>)
 8004e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8004ea2:	89fb      	ldrh	r3, [r7, #14]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	b21a      	sxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b21b      	sxth	r3, r3
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	b21b      	sxth	r3, r3
 8004eb2:	b29b      	uxth	r3, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	b21a      	sxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	b21a      	sxth	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8004f86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	e010      	b.n	8004fd6 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	330a      	adds	r3, #10
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	330a      	adds	r3, #10
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	2200      	movs	r2, #0
 8004fce:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	73fb      	strb	r3, [r7, #15]
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d9eb      	bls.n	8004fb4 <UG_Init+0xf4>
   }

   gui = g;
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <UG_Init+0x130>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6013      	str	r3, [r2, #0]
   return 1;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000afc 	.word	0x20000afc

08004ff4 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <UG_FontSelect+0x1c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000afc 	.word	0x20000afc

08005014 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af02      	add	r7, sp, #8
 800501a:	4603      	mov	r3, r0
 800501c:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800501e:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <UG_FillScreen+0x44>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29b      	uxth	r3, r3
 800502e:	b21a      	sxth	r2, r3
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <UG_FillScreen+0x44>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	b219      	sxth	r1, r3
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	460b      	mov	r3, r1
 8005048:	2100      	movs	r1, #0
 800504a:	2000      	movs	r0, #0
 800504c:	f000 f806 	bl	800505c <UG_FillFrame>
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000afc 	.word	0x20000afc

0800505c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	4604      	mov	r4, r0
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4623      	mov	r3, r4
 800506c:	80fb      	strh	r3, [r7, #6]
 800506e:	4603      	mov	r3, r0
 8005070:	80bb      	strh	r3, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	807b      	strh	r3, [r7, #2]
 8005076:	4613      	mov	r3, r2
 8005078:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800507a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800507e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005082:	429a      	cmp	r2, r3
 8005084:	da05      	bge.n	8005092 <UG_FillFrame+0x36>
     swap(x1,x2);
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	817b      	strh	r3, [r7, #10]
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	80fb      	strh	r3, [r7, #6]
 800508e:	897b      	ldrh	r3, [r7, #10]
 8005090:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005092:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005096:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800509a:	429a      	cmp	r2, r3
 800509c:	da05      	bge.n	80050aa <UG_FillFrame+0x4e>
     swap(y1,y2);
 800509e:	88bb      	ldrh	r3, [r7, #4]
 80050a0:	813b      	strh	r3, [r7, #8]
 80050a2:	883b      	ldrh	r3, [r7, #0]
 80050a4:	80bb      	strh	r3, [r7, #4]
 80050a6:	893b      	ldrh	r3, [r7, #8]
 80050a8:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 80050aa:	88bb      	ldrh	r3, [r7, #4]
 80050ac:	81bb      	strh	r3, [r7, #12]
 80050ae:	e01e      	b.n	80050ee <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	81fb      	strh	r3, [r7, #14]
 80050b4:	e00f      	b.n	80050d6 <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <UG_FillFrame+0xa8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	8c3a      	ldrh	r2, [r7, #32]
 80050c0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80050c4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80050c8:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80050ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3301      	adds	r3, #1
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	81fb      	strh	r3, [r7, #14]
 80050d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80050da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050de:	429a      	cmp	r2, r3
 80050e0:	dde9      	ble.n	80050b6 <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 80050e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3301      	adds	r3, #1
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	81bb      	strh	r3, [r7, #12]
 80050ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80050f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	ddda      	ble.n	80050b0 <UG_FillFrame+0x54>
      }
   }
}
 80050fa:	bf00      	nop
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bd90      	pop	{r4, r7, pc}
 8005104:	20000afc 	.word	0x20000afc

08005108 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005108:	b5b0      	push	{r4, r5, r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af02      	add	r7, sp, #8
 800510e:	4604      	mov	r4, r0
 8005110:	4608      	mov	r0, r1
 8005112:	4611      	mov	r1, r2
 8005114:	461a      	mov	r2, r3
 8005116:	4623      	mov	r3, r4
 8005118:	80fb      	strh	r3, [r7, #6]
 800511a:	4603      	mov	r3, r0
 800511c:	80bb      	strh	r3, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	807b      	strh	r3, [r7, #2]
 8005122:	4613      	mov	r3, r2
 8005124:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005126:	4b67      	ldr	r3, [pc, #412]	; (80052c4 <UG_DrawLine+0x1bc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d013      	beq.n	800515e <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005136:	4b63      	ldr	r3, [pc, #396]	; (80052c4 <UG_DrawLine+0x1bc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	461d      	mov	r5, r3
 800513e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005142:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005146:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800514a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800514e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	4623      	mov	r3, r4
 8005154:	47a8      	blx	r5
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80ae 	beq.w	80052ba <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800515e:	887a      	ldrh	r2, [r7, #2]
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	b29b      	uxth	r3, r3
 8005166:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8005168:	883a      	ldrh	r2, [r7, #0]
 800516a:	88bb      	ldrh	r3, [r7, #4]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	b29b      	uxth	r3, r3
 8005170:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8005172:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	bfb8      	it	lt
 800517a:	425b      	neglt	r3, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8005180:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005184:	2b00      	cmp	r3, #0
 8005186:	bfb8      	it	lt
 8005188:	425b      	neglt	r3, r3
 800518a:	b29b      	uxth	r3, r3
 800518c:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800518e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	dd01      	ble.n	800519a <UG_DrawLine+0x92>
 8005196:	2301      	movs	r3, #1
 8005198:	e001      	b.n	800519e <UG_DrawLine+0x96>
 800519a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800519e:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 80051a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dd01      	ble.n	80051ac <UG_DrawLine+0xa4>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e001      	b.n	80051b0 <UG_DrawLine+0xa8>
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b0:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 80051b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051b6:	105b      	asrs	r3, r3, #1
 80051b8:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 80051ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051be:	105b      	asrs	r3, r3, #1
 80051c0:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 80051c6:	88bb      	ldrh	r3, [r7, #4]
 80051c8:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 80051ca:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <UG_DrawLine+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80051d4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80051d8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80051dc:	4798      	blx	r3

   if( dxabs >= dyabs )
 80051de:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80051e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	db33      	blt.n	8005252 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 80051ea:	2300      	movs	r3, #0
 80051ec:	83fb      	strh	r3, [r7, #30]
 80051ee:	e029      	b.n	8005244 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80051f0:	8b7a      	ldrh	r2, [r7, #26]
 80051f2:	89fb      	ldrh	r3, [r7, #14]
 80051f4:	4413      	add	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80051fa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80051fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	db09      	blt.n	800521a <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8005206:	8b7a      	ldrh	r2, [r7, #26]
 8005208:	8a3b      	ldrh	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	b29b      	uxth	r3, r3
 800520e:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8005210:	8afa      	ldrh	r2, [r7, #22]
 8005212:	897b      	ldrh	r3, [r7, #10]
 8005214:	4413      	add	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800521a:	8b3a      	ldrh	r2, [r7, #24]
 800521c:	89bb      	ldrh	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	b29b      	uxth	r3, r3
 8005222:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005224:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <UG_DrawLine+0x1bc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800522e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005232:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005236:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005238:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800523c:	b29b      	uxth	r3, r3
 800523e:	3301      	adds	r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	83fb      	strh	r3, [r7, #30]
 8005244:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005248:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	dbcf      	blt.n	80051f0 <UG_DrawLine+0xe8>
 8005250:	e034      	b.n	80052bc <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8005252:	2300      	movs	r3, #0
 8005254:	83fb      	strh	r3, [r7, #30]
 8005256:	e029      	b.n	80052ac <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8005258:	8bba      	ldrh	r2, [r7, #28]
 800525a:	8a3b      	ldrh	r3, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	b29b      	uxth	r3, r3
 8005260:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8005262:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800526a:	429a      	cmp	r2, r3
 800526c:	db09      	blt.n	8005282 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800526e:	8bba      	ldrh	r2, [r7, #28]
 8005270:	89fb      	ldrh	r3, [r7, #14]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	b29b      	uxth	r3, r3
 8005276:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8005278:	8b3a      	ldrh	r2, [r7, #24]
 800527a:	89bb      	ldrh	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8005282:	8afa      	ldrh	r2, [r7, #22]
 8005284:	897b      	ldrh	r3, [r7, #10]
 8005286:	4413      	add	r3, r2
 8005288:	b29b      	uxth	r3, r3
 800528a:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 800528c:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <UG_DrawLine+0x1bc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005296:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800529a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800529e:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 80052a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3301      	adds	r3, #1
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	83fb      	strh	r3, [r7, #30]
 80052ac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80052b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	dbcf      	blt.n	8005258 <UG_DrawLine+0x150>
 80052b8:	e000      	b.n	80052bc <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80052ba:	bf00      	nop
      }
   }  
}
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bdb0      	pop	{r4, r5, r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000afc 	.word	0x20000afc

080052c8 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	4603      	mov	r3, r0
 80052d0:	603a      	str	r2, [r7, #0]
 80052d2:	80fb      	strh	r3, [r7, #6]
 80052d4:	460b      	mov	r3, r1
 80052d6:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80052dc:	88bb      	ldrh	r3, [r7, #4]
 80052de:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80052e0:	4b44      	ldr	r3, [pc, #272]	; (80053f4 <UG_PutString+0x12c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fae4 	bl	80058b4 <_UG_FontSelect>
   while ( *str != 0 )
 80052ec:	e064      	b.n	80053b8 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80052ee:	4b41      	ldr	r3, [pc, #260]	; (80053f4 <UG_PutString+0x12c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 80052fa:	463b      	mov	r3, r7
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f915 	bl	800552c <_UG_DecodeUTF8>
 8005302:	4603      	mov	r3, r0
 8005304:	817b      	strh	r3, [r7, #10]
 8005306:	e004      	b.n	8005312 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	603a      	str	r2, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8005312:	897b      	ldrh	r3, [r7, #10]
 8005314:	2b0a      	cmp	r3, #10
 8005316:	d105      	bne.n	8005324 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8005318:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <UG_PutString+0x12c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	81fb      	strh	r3, [r7, #14]
         continue;
 8005322:	e049      	b.n	80053b8 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8005324:	897b      	ldrh	r3, [r7, #10]
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f977 	bl	800561c <_UG_GetCharData>
 800532e:	4603      	mov	r3, r0
 8005330:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8005332:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800533a:	d100      	bne.n	800533e <UG_PutString+0x76>
 800533c:	e03c      	b.n	80053b8 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 800533e:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <UG_PutString+0x12c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005348:	4619      	mov	r1, r3
 800534a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800534e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005352:	4413      	add	r3, r2
 8005354:	4299      	cmp	r1, r3
 8005356:	dc12      	bgt.n	800537e <UG_PutString+0xb6>
      {
         xp = x;
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800535c:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <UG_PutString+0x12c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005364:	b21a      	sxth	r2, r3
 8005366:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <UG_PutString+0x12c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 800536e:	b21b      	sxth	r3, r3
 8005370:	4413      	add	r3, r2
 8005372:	b21b      	sxth	r3, r3
 8005374:	b29a      	uxth	r2, r3
 8005376:	89bb      	ldrh	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	b29b      	uxth	r3, r3
 800537c:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800537e:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <UG_PutString+0x12c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8005386:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <UG_PutString+0x12c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800538e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005392:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8005396:	8978      	ldrh	r0, [r7, #10]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	4623      	mov	r3, r4
 800539c:	f000 fb0c 	bl	80059b8 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80053a0:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <UG_PutString+0x12c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	893b      	ldrh	r3, [r7, #8]
 80053ac:	4413      	add	r3, r2
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	89fb      	ldrh	r3, [r7, #14]
 80053b2:	4413      	add	r3, r2
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d196      	bne.n	80052ee <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <UG_PutString+0x12c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80053d0:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <UG_PutString+0x12c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d6:	461c      	mov	r4, r3
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e8:	47a0      	blx	r4
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000afc 	.word	0x20000afc

080053f8 <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	4604      	mov	r4, r0
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	461a      	mov	r2, r3
 8005406:	4623      	mov	r3, r4
 8005408:	80fb      	strh	r3, [r7, #6]
 800540a:	4603      	mov	r3, r0
 800540c:	80bb      	strh	r3, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	807b      	strh	r3, [r7, #2]
 8005412:	4613      	mov	r3, r2
 8005414:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <UG_PutChar+0x74>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fa49 	bl	80058b4 <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 8005422:	883c      	ldrh	r4, [r7, #0]
 8005424:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005428:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800542c:	88f8      	ldrh	r0, [r7, #6]
 800542e:	8b3b      	ldrh	r3, [r7, #24]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4623      	mov	r3, r4
 8005434:	f000 fac0 	bl	80059b8 <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <UG_PutChar+0x74>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8005448:	4b08      	ldr	r3, [pc, #32]	; (800546c <UG_PutChar+0x74>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544e:	461c      	mov	r4, r3
 8005450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800545c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005460:	47a0      	blx	r4
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	bd90      	pop	{r4, r7, pc}
 800546a:	bf00      	nop
 800546c:	20000afc 	.word	0x20000afc

08005470 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <UG_SetForecolor+0x20>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000afc 	.word	0x20000afc

08005494 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <UG_SetBackcolor+0x20>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20000afc 	.word	0x20000afc

080054b8 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <UG_FontSetHSpace+0x24>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	b252      	sxtb	r2, r2
 80054ca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20000afc 	.word	0x20000afc

080054e0 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <UG_FontSetVSpace+0x24>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	b252      	sxtb	r2, r2
 80054f2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000afc 	.word	0x20000afc

08005508 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <UG_FontSetTransparency+0x20>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	79fa      	ldrb	r2, [r7, #7]
 8005518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	20000afc 	.word	0x20000afc

0800552c <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  char c=**str;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800553c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	db07      	blt.n	8005554 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
    return c;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	b29b      	uxth	r3, r3
 8005552:	e05c      	b.n	800560e <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8005554:	2300      	movs	r3, #0
 8005556:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8005558:	2300      	movs	r3, #0
 800555a:	81bb      	strh	r3, [r7, #12]

  while(**str)
 800555c:	e04f      	b.n	80055fe <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d130      	bne.n	80055d8 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2bdf      	cmp	r3, #223	; 0xdf
 800557a:	d806      	bhi.n	800558a <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 800557c:	2301      	movs	r3, #1
 800557e:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	73fb      	strb	r3, [r7, #15]
 8005588:	e023      	b.n	80055d2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	2bef      	cmp	r3, #239	; 0xef
 800558e:	d806      	bhi.n	800559e <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8005590:	2302      	movs	r3, #2
 8005592:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	e019      	b.n	80055d2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2bf7      	cmp	r3, #247	; 0xf7
 80055a2:	d806      	bhi.n	80055b2 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 80055a4:	2303      	movs	r3, #3
 80055a6:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	73fb      	strb	r3, [r7, #15]
 80055b0:	e00f      	b.n	80055d2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2bfb      	cmp	r3, #251	; 0xfb
 80055b6:	d806      	bhi.n	80055c6 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80055b8:	2304      	movs	r3, #4
 80055ba:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	73fb      	strb	r3, [r7, #15]
 80055c4:	e005      	b.n	80055d2 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80055c6:	2305      	movs	r3, #5
 80055c8:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	81bb      	strh	r3, [r7, #12]
 80055d6:	e012      	b.n	80055fe <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 80055d8:	89bb      	ldrh	r3, [r7, #12]
 80055da:	019b      	lsls	r3, r3, #6
 80055dc:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e6:	b21a      	sxth	r2, r3
 80055e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80055f2:	7bbb      	ldrb	r3, [r7, #14]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	73bb      	strb	r3, [r7, #14]
 80055f8:	7bbb      	ldrb	r3, [r7, #14]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <_UG_DecodeUTF8+0xde>
  while(**str)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1aa      	bne.n	800555e <_UG_DecodeUTF8+0x32>
 8005608:	e000      	b.n	800560c <_UG_DecodeUTF8+0xe0>
        break;
 800560a:	bf00      	nop
    }
  }
  return encoding;
 800560c:	89bb      	ldrh	r3, [r7, #12]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	6039      	str	r1, [r7, #0]
 8005626:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8005628:	2300      	movs	r3, #0
 800562a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 800562c:	2300      	movs	r3, #0
 800562e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8005630:	2300      	movs	r3, #0
 8005632:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8005634:	2300      	movs	r3, #0
 8005636:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8005638:	2300      	movs	r3, #0
 800563a:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800563c:	4b98      	ldr	r3, [pc, #608]	; (80058a0 <_UG_GetCharData+0x284>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005642:	4b98      	ldr	r3, [pc, #608]	; (80058a4 <_UG_GetCharData+0x288>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d10f      	bne.n	800566a <_UG_GetCharData+0x4e>
 800564a:	4b97      	ldr	r3, [pc, #604]	; (80058a8 <_UG_GetCharData+0x28c>)
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	429a      	cmp	r2, r3
 8005652:	d10a      	bne.n	800566a <_UG_GetCharData+0x4e>
    if(p){
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800565a:	4b94      	ldr	r3, [pc, #592]	; (80058ac <_UG_GetCharData+0x290>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8005662:	4b93      	ldr	r3, [pc, #588]	; (80058b0 <_UG_GetCharData+0x294>)
 8005664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005668:	e116      	b.n	8005898 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800566a:	4b8d      	ldr	r3, [pc, #564]	; (80058a0 <_UG_GetCharData+0x284>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80cc 	beq.w	8005810 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	2bfc      	cmp	r3, #252	; 0xfc
 800567c:	f300 80c8 	bgt.w	8005810 <_UG_GetCharData+0x1f4>
 8005680:	2bd6      	cmp	r3, #214	; 0xd6
 8005682:	da09      	bge.n	8005698 <_UG_GetCharData+0x7c>
 8005684:	2bc4      	cmp	r3, #196	; 0xc4
 8005686:	d06c      	beq.n	8005762 <_UG_GetCharData+0x146>
 8005688:	2bc4      	cmp	r3, #196	; 0xc4
 800568a:	f300 80c1 	bgt.w	8005810 <_UG_GetCharData+0x1f4>
 800568e:	2bb0      	cmp	r3, #176	; 0xb0
 8005690:	d06d      	beq.n	800576e <_UG_GetCharData+0x152>
 8005692:	2bb5      	cmp	r3, #181	; 0xb5
 8005694:	d068      	beq.n	8005768 <_UG_GetCharData+0x14c>
 8005696:	e06e      	b.n	8005776 <_UG_GetCharData+0x15a>
 8005698:	3bd6      	subs	r3, #214	; 0xd6
 800569a:	2b26      	cmp	r3, #38	; 0x26
 800569c:	f200 80b8 	bhi.w	8005810 <_UG_GetCharData+0x1f4>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <_UG_GetCharData+0x8c>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	0800574b 	.word	0x0800574b
 80056ac:	08005811 	.word	0x08005811
 80056b0:	08005811 	.word	0x08005811
 80056b4:	08005811 	.word	0x08005811
 80056b8:	08005811 	.word	0x08005811
 80056bc:	08005811 	.word	0x08005811
 80056c0:	08005757 	.word	0x08005757
 80056c4:	08005811 	.word	0x08005811
 80056c8:	08005811 	.word	0x08005811
 80056cc:	08005811 	.word	0x08005811
 80056d0:	08005811 	.word	0x08005811
 80056d4:	08005811 	.word	0x08005811
 80056d8:	08005811 	.word	0x08005811
 80056dc:	08005811 	.word	0x08005811
 80056e0:	0800575d 	.word	0x0800575d
 80056e4:	08005811 	.word	0x08005811
 80056e8:	08005811 	.word	0x08005811
 80056ec:	08005811 	.word	0x08005811
 80056f0:	08005811 	.word	0x08005811
 80056f4:	08005811 	.word	0x08005811
 80056f8:	08005811 	.word	0x08005811
 80056fc:	08005811 	.word	0x08005811
 8005700:	08005811 	.word	0x08005811
 8005704:	08005811 	.word	0x08005811
 8005708:	08005811 	.word	0x08005811
 800570c:	08005811 	.word	0x08005811
 8005710:	08005811 	.word	0x08005811
 8005714:	08005811 	.word	0x08005811
 8005718:	08005811 	.word	0x08005811
 800571c:	08005811 	.word	0x08005811
 8005720:	08005811 	.word	0x08005811
 8005724:	08005811 	.word	0x08005811
 8005728:	08005745 	.word	0x08005745
 800572c:	08005811 	.word	0x08005811
 8005730:	08005811 	.word	0x08005811
 8005734:	08005811 	.word	0x08005811
 8005738:	08005811 	.word	0x08005811
 800573c:	08005811 	.word	0x08005811
 8005740:	08005751 	.word	0x08005751
    {
       case 0xF6: encoding = 0x94; break; // ö
 8005744:	2394      	movs	r3, #148	; 0x94
 8005746:	80fb      	strh	r3, [r7, #6]
 8005748:	e015      	b.n	8005776 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 800574a:	2399      	movs	r3, #153	; 0x99
 800574c:	80fb      	strh	r3, [r7, #6]
 800574e:	e012      	b.n	8005776 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8005750:	2381      	movs	r3, #129	; 0x81
 8005752:	80fb      	strh	r3, [r7, #6]
 8005754:	e00f      	b.n	8005776 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8005756:	239a      	movs	r3, #154	; 0x9a
 8005758:	80fb      	strh	r3, [r7, #6]
 800575a:	e00c      	b.n	8005776 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 800575c:	2384      	movs	r3, #132	; 0x84
 800575e:	80fb      	strh	r3, [r7, #6]
 8005760:	e009      	b.n	8005776 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8005762:	238e      	movs	r3, #142	; 0x8e
 8005764:	80fb      	strh	r3, [r7, #6]
 8005766:	e006      	b.n	8005776 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8005768:	23e6      	movs	r3, #230	; 0xe6
 800576a:	80fb      	strh	r3, [r7, #6]
 800576c:	e003      	b.n	8005776 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 800576e:	23f8      	movs	r3, #248	; 0xf8
 8005770:	80fb      	strh	r3, [r7, #6]
 8005772:	bf00      	nop
 8005774:	e04c      	b.n	8005810 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005776:	e04b      	b.n	8005810 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8005778:	4b49      	ldr	r3, [pc, #292]	; (80058a0 <_UG_GetCharData+0x284>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	8a7a      	ldrh	r2, [r7, #18]
 8005780:	0052      	lsls	r2, r2, #1
 8005782:	4413      	add	r3, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fb83 	bl	8004e90 <ptr_8to16>
 800578a:	4603      	mov	r3, r0
 800578c:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800578e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005792:	2b00      	cmp	r3, #0
 8005794:	da06      	bge.n	80057a4 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8005796:	89fb      	ldrh	r3, [r7, #14]
 8005798:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800579c:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800579e:	2301      	movs	r3, #1
 80057a0:	747b      	strb	r3, [r7, #17]
 80057a2:	e032      	b.n	800580a <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80057a4:	7c7b      	ldrb	r3, [r7, #17]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d021      	beq.n	80057ee <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	8afb      	ldrh	r3, [r7, #22]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d30d      	bcc.n	80057ce <_UG_GetCharData+0x1b2>
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	89fb      	ldrh	r3, [r7, #14]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d809      	bhi.n	80057ce <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	8afb      	ldrh	r3, [r7, #22]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	8abb      	ldrh	r3, [r7, #20]
 80057c4:	4413      	add	r3, r2
 80057c6:	82bb      	strh	r3, [r7, #20]
        found=1;
 80057c8:	2301      	movs	r3, #1
 80057ca:	743b      	strb	r3, [r7, #16]
        break;
 80057cc:	e02a      	b.n	8005824 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	8afb      	ldrh	r3, [r7, #22]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d323      	bcc.n	800581e <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80057d6:	89fa      	ldrh	r2, [r7, #14]
 80057d8:	8afb      	ldrh	r3, [r7, #22]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	b29a      	uxth	r2, r3
 80057de:	8abb      	ldrh	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3301      	adds	r3, #1
 80057e6:	82bb      	strh	r3, [r7, #20]
      range=0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	747b      	strb	r3, [r7, #17]
 80057ec:	e00d      	b.n	800580a <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	89fb      	ldrh	r3, [r7, #14]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d102      	bne.n	80057fc <_UG_GetCharData+0x1e0>
      {
        found=1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	743b      	strb	r3, [r7, #16]
        break;
 80057fa:	e013      	b.n	8005824 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80057fc:	88fa      	ldrh	r2, [r7, #6]
 80057fe:	89fb      	ldrh	r3, [r7, #14]
 8005800:	429a      	cmp	r2, r3
 8005802:	d30e      	bcc.n	8005822 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8005804:	8abb      	ldrh	r3, [r7, #20]
 8005806:	3301      	adds	r3, #1
 8005808:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800580a:	8a7b      	ldrh	r3, [r7, #18]
 800580c:	3301      	adds	r3, #1
 800580e:	827b      	strh	r3, [r7, #18]
 8005810:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <_UG_GetCharData+0x284>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005816:	8a7a      	ldrh	r2, [r7, #18]
 8005818:	429a      	cmp	r2, r3
 800581a:	d3ad      	bcc.n	8005778 <_UG_GetCharData+0x15c>
 800581c:	e002      	b.n	8005824 <_UG_GetCharData+0x208>
        break;
 800581e:	bf00      	nop
 8005820:	e000      	b.n	8005824 <_UG_GetCharData+0x208>
        break;
 8005822:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8005824:	7c3b      	ldrb	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d034      	beq.n	8005894 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <_UG_GetCharData+0x284>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	4a1c      	ldr	r2, [pc, #112]	; (80058a4 <_UG_GetCharData+0x288>)
 8005832:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8005834:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <_UG_GetCharData+0x28c>)
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 800583a:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <_UG_GetCharData+0x284>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	8aba      	ldrh	r2, [r7, #20]
 8005842:	4917      	ldr	r1, [pc, #92]	; (80058a0 <_UG_GetCharData+0x284>)
 8005844:	6809      	ldr	r1, [r1, #0]
 8005846:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8005848:	fb01 f202 	mul.w	r2, r1, r2
 800584c:	4413      	add	r3, r2
 800584e:	4a17      	ldr	r2, [pc, #92]	; (80058ac <_UG_GetCharData+0x290>)
 8005850:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8005852:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <_UG_GetCharData+0x284>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 800585c:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <_UG_GetCharData+0x284>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005862:	8abb      	ldrh	r3, [r7, #20]
 8005864:	4413      	add	r3, r2
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b21a      	sxth	r2, r3
 800586a:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <_UG_GetCharData+0x294>)
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e006      	b.n	800587e <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <_UG_GetCharData+0x284>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005878:	b21a      	sxth	r2, r3
 800587a:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <_UG_GetCharData+0x294>)
 800587c:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <_UG_GetCharData+0x290>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 800588c:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <_UG_GetCharData+0x294>)
 800588e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005892:	e001      	b.n	8005898 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8005894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000afc 	.word	0x20000afc
 80058a4:	20000b00 	.word	0x20000b00
 80058a8:	20000b04 	.word	0x20000b04
 80058ac:	20000b08 	.word	0x20000b08
 80058b0:	20000b0c 	.word	0x20000b0c

080058b4 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80058bc:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <_UG_FontSelect+0x100>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d070      	beq.n	80059aa <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80058c8:	4b3a      	ldr	r3, [pc, #232]	; (80059b4 <_UG_FontSelect+0x100>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	4b37      	ldr	r3, [pc, #220]	; (80059b4 <_UG_FontSelect+0x100>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	b25b      	sxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da01      	bge.n	80058f4 <_UG_FontSelect+0x40>
 80058f0:	2201      	movs	r2, #1
 80058f2:	e000      	b.n	80058f6 <_UG_FontSelect+0x42>
 80058f4:	2200      	movs	r2, #0
 80058f6:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <_UG_FontSelect+0x100>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	4a2b      	ldr	r2, [pc, #172]	; (80059b4 <_UG_FontSelect+0x100>)
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	4a27      	ldr	r2, [pc, #156]	; (80059b4 <_UG_FontSelect+0x100>)
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005920:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <_UG_FontSelect+0x100>)
 8005922:	681c      	ldr	r4, [r3, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fab3 	bl	8004e90 <ptr_8to16>
 800592a:	4603      	mov	r3, r0
 800592c:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3302      	adds	r3, #2
 8005932:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8005934:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <_UG_FontSelect+0x100>)
 8005936:	681c      	ldr	r4, [r3, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff faa9 	bl	8004e90 <ptr_8to16>
 800593e:	4603      	mov	r3, r0
 8005940:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3302      	adds	r3, #2
 8005946:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005948:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <_UG_FontSelect+0x100>)
 800594a:	681c      	ldr	r4, [r3, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff fa9f 	bl	8004e90 <ptr_8to16>
 8005952:	4603      	mov	r3, r0
 8005954:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3302      	adds	r3, #2
 800595a:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8005968:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <_UG_FontSelect+0x100>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8005970:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <_UG_FontSelect+0x100>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005976:	461a      	mov	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4413      	add	r3, r2
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	e003      	b.n	8005988 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8005980:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <_UG_FontSelect+0x100>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2200      	movs	r2, #0
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <_UG_FontSelect+0x100>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8005990:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <_UG_FontSelect+0x100>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	461a      	mov	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4413      	add	r3, r2
 800599e:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <_UG_FontSelect+0x100>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
 80059a8:	e000      	b.n	80059ac <_UG_FontSelect+0xf8>
    return;
 80059aa:	bf00      	nop
}
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000afc 	.word	0x20000afc

080059b8 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80059b8:	b5b0      	push	{r4, r5, r7, lr}
 80059ba:	b08c      	sub	sp, #48	; 0x30
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4604      	mov	r4, r0
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4623      	mov	r3, r4
 80059c8:	80fb      	strh	r3, [r7, #6]
 80059ca:	4603      	mov	r3, r0
 80059cc:	80bb      	strh	r3, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	807b      	strh	r3, [r7, #2]
 80059d2:	4613      	mov	r3, r2
 80059d4:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059da:	2300      	movs	r3, #0
 80059dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80059de:	2300      	movs	r3, #0
 80059e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80059e2:	2300      	movs	r3, #0
 80059e4:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80059e6:	4b8c      	ldr	r3, [pc, #560]	; (8005c18 <_UG_PutChar+0x260>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80059ee:	75fb      	strb	r3, [r7, #23]
 80059f0:	4b89      	ldr	r3, [pc, #548]	; (8005c18 <_UG_PutChar+0x260>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8005a02:	f107 0208 	add.w	r2, r7, #8
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff fe06 	bl	800561c <_UG_GetCharData>
 8005a10:	4603      	mov	r3, r0
 8005a12:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8005a14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a1c:	d102      	bne.n	8005a24 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a22:	e226      	b.n	8005e72 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8005a24:	4b7c      	ldr	r3, [pc, #496]	; (8005c18 <_UG_PutChar+0x260>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8005a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <_UG_PutChar+0x80>
     return 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e21c      	b.n	8005e72 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8005a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a3a:	08db      	lsrs	r3, r3, #3
 8005a3c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8005a3e:	4b76      	ldr	r3, [pc, #472]	; (8005c18 <_UG_PutChar+0x260>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <_UG_PutChar+0x9e>
 8005a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a52:	3301      	adds	r3, #1
 8005a54:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8005a56:	7dbb      	ldrb	r3, [r7, #22]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01d      	beq.n	8005a98 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005a5c:	4b6e      	ldr	r3, [pc, #440]	; (8005c18 <_UG_PutChar+0x260>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a62:	461d      	mov	r5, r3
 8005a64:	88ba      	ldrh	r2, [r7, #4]
 8005a66:	8abb      	ldrh	r3, [r7, #20]
 8005a68:	4413      	add	r3, r2
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	b21c      	sxth	r4, r3
 8005a72:	4b69      	ldr	r3, [pc, #420]	; (8005c18 <_UG_PutChar+0x260>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	887b      	ldrh	r3, [r7, #2]
 8005a7e:	4413      	add	r3, r2
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	b21b      	sxth	r3, r3
 8005a88:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005a8c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8005a90:	4622      	mov	r2, r4
 8005a92:	47a8      	blx	r5
 8005a94:	4603      	mov	r3, r0
 8005a96:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005a98:	4b5f      	ldr	r3, [pc, #380]	; (8005c18 <_UG_PutChar+0x260>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f040 8172 	bne.w	8005d8a <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	853b      	strh	r3, [r7, #40]	; 0x28
 8005aaa:	e0ec      	b.n	8005c86 <_UG_PutChar+0x2ce>
     {
       c=0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ab4:	e0df      	b.n	8005c76 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	60ba      	str	r2, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ac4:	e0ca      	b.n	8005c5c <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8005ac6:	7f7b      	ldrb	r3, [r7, #29]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d033      	beq.n	8005b38 <_UG_PutChar+0x180>
           {
             if(driver)
 8005ad0:	7dbb      	ldrb	r3, [r7, #22]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01f      	beq.n	8005b16 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005ad6:	8c3b      	ldrh	r3, [r7, #32]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <_UG_PutChar+0x13a>
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d107      	bne.n	8005af2 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8005ae2:	8c3a      	ldrh	r2, [r7, #32]
 8005ae4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	4610      	mov	r0, r2
 8005aec:	4798      	blx	r3
                 bpixels=0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005af2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <_UG_PutChar+0x156>
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8005afe:	88ba      	ldrh	r2, [r7, #4]
 8005b00:	8bfb      	ldrh	r3, [r7, #30]
 8005b02:	4413      	add	r3, r2
 8005b04:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b0a:	4413      	add	r3, r2
 8005b0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b10:	3301      	adds	r3, #1
 8005b12:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b14:	e096      	b.n	8005c44 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005b16:	4b40      	ldr	r3, [pc, #256]	; (8005c18 <_UG_PutChar+0x260>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	88b9      	ldrh	r1, [r7, #4]
 8005b20:	8bfa      	ldrh	r2, [r7, #30]
 8005b22:	440a      	add	r2, r1
 8005b24:	b292      	uxth	r2, r2
 8005b26:	b210      	sxth	r0, r2
 8005b28:	8879      	ldrh	r1, [r7, #2]
 8005b2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b2c:	440a      	add	r2, r1
 8005b2e:	b292      	uxth	r2, r2
 8005b30:	b211      	sxth	r1, r2
 8005b32:	883a      	ldrh	r2, [r7, #0]
 8005b34:	4798      	blx	r3
 8005b36:	e085      	b.n	8005c44 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8005b38:	7dbb      	ldrb	r3, [r7, #22]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d06e      	beq.n	8005c1c <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8005b3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d064      	beq.n	8005c0e <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d15e      	bne.n	8005c08 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8005b4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005b4c:	8839      	ldrh	r1, [r7, #0]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
                   fpixels=0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b58:	e059      	b.n	8005c0e <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005b5a:	88ba      	ldrh	r2, [r7, #4]
 8005b5c:	8abb      	ldrh	r3, [r7, #20]
 8005b5e:	4413      	add	r3, r2
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8005b68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d003      	beq.n	8005b7a <_UG_PutChar+0x1c2>
 8005b72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005b74:	89fb      	ldrh	r3, [r7, #14]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d224      	bcs.n	8005bc4 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005b7a:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <_UG_PutChar+0x260>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b80:	461d      	mov	r5, r3
 8005b82:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005b86:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005b8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b8c:	89fb      	ldrh	r3, [r7, #14]
 8005b8e:	4413      	add	r3, r2
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	b21c      	sxth	r4, r3
 8005b98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005b9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ba6:	4413      	add	r3, r2
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	b21b      	sxth	r3, r3
 8005bac:	4622      	mov	r2, r4
 8005bae:	47a8      	blx	r5
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005bb4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005bb6:	8839      	ldrh	r1, [r7, #0]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4798      	blx	r3
                       fpixels=0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	847b      	strh	r3, [r7, #34]	; 0x22
 8005bc2:	e021      	b.n	8005c08 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005bc4:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <_UG_PutChar+0x260>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bca:	461c      	mov	r4, r3
 8005bcc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005bd0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005bd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bd6:	89fb      	ldrh	r3, [r7, #14]
 8005bd8:	4413      	add	r3, r2
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	b21a      	sxth	r2, r3
 8005be2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005be6:	47a0      	blx	r4
 8005be8:	4603      	mov	r3, r0
 8005bea:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005bec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005bee:	8839      	ldrh	r1, [r7, #0]
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4798      	blx	r3
                       fpixels -= width;
 8005bf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005bf8:	89fb      	ldrh	r3, [r7, #14]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8005bfe:	88bb      	ldrh	r3, [r7, #4]
 8005c00:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8005c02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c04:	3301      	adds	r3, #1
 8005c06:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8005c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1a5      	bne.n	8005b5a <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8005c0e:	8c3b      	ldrh	r3, [r7, #32]
 8005c10:	3301      	adds	r3, #1
 8005c12:	843b      	strh	r3, [r7, #32]
 8005c14:	e016      	b.n	8005c44 <_UG_PutChar+0x28c>
 8005c16:	bf00      	nop
 8005c18:	20000afc 	.word	0x20000afc
             }
             else if(!trans)                           // Not accelerated output
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d110      	bne.n	8005c44 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8005c22:	4b96      	ldr	r3, [pc, #600]	; (8005e7c <_UG_PutChar+0x4c4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	88b9      	ldrh	r1, [r7, #4]
 8005c2c:	8bfa      	ldrh	r2, [r7, #30]
 8005c2e:	440a      	add	r2, r1
 8005c30:	b292      	uxth	r2, r2
 8005c32:	b210      	sxth	r0, r2
 8005c34:	8879      	ldrh	r1, [r7, #2]
 8005c36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c38:	440a      	add	r2, r1
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	b211      	sxth	r1, r2
 8005c3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005c42:	4798      	blx	r3
             }
           }
           b >>= 1;
 8005c44:	7f7b      	ldrb	r3, [r7, #29]
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	777b      	strb	r3, [r7, #29]
           c++;
 8005c4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3301      	adds	r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005c56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c58:	3301      	adds	r3, #1
 8005c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c5e:	2b07      	cmp	r3, #7
 8005c60:	d806      	bhi.n	8005c70 <_UG_PutChar+0x2b8>
 8005c62:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005c66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	f6ff af2b 	blt.w	8005ac6 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8005c70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c72:	3301      	adds	r3, #1
 8005c74:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005c76:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	f4ff af1b 	bcc.w	8005ab6 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c82:	3301      	adds	r3, #1
 8005c84:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c86:	4b7d      	ldr	r3, [pc, #500]	; (8005e7c <_UG_PutChar+0x4c4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c92:	429a      	cmp	r2, r3
 8005c94:	f4ff af0a 	bcc.w	8005aac <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8005c98:	7dbb      	ldrb	r3, [r7, #22]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80e7 	beq.w	8005e6e <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8005ca0:	8c3b      	ldrh	r3, [r7, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <_UG_PutChar+0x302>
 8005ca6:	7dfb      	ldrb	r3, [r7, #23]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8005cac:	8c3a      	ldrh	r2, [r7, #32]
 8005cae:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
 8005cb8:	e0d9      	b.n	8005e6e <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8005cba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 80d6 	beq.w	8005e6e <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d15c      	bne.n	8005d82 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8005cc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005cca:	8839      	ldrh	r1, [r7, #0]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	4610      	mov	r0, r2
 8005cd0:	4798      	blx	r3
 8005cd2:	e0cc      	b.n	8005e6e <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8005cd4:	88ba      	ldrh	r2, [r7, #4]
 8005cd6:	8abb      	ldrh	r3, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8005ce2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ce4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d003      	beq.n	8005cf4 <_UG_PutChar+0x33c>
 8005cec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005cee:	8a3b      	ldrh	r3, [r7, #16]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d224      	bcs.n	8005d3e <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005cf4:	4b61      	ldr	r3, [pc, #388]	; (8005e7c <_UG_PutChar+0x4c4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005d00:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005d04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d06:	8a3b      	ldrh	r3, [r7, #16]
 8005d08:	4413      	add	r3, r2
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	b21c      	sxth	r4, r3
 8005d12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005d14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d20:	4413      	add	r3, r2
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	b21b      	sxth	r3, r3
 8005d26:	4622      	mov	r2, r4
 8005d28:	47a8      	blx	r5
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005d2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005d30:	8839      	ldrh	r1, [r7, #0]
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
               fpixels=0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d3c:	e021      	b.n	8005d82 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005d3e:	4b4f      	ldr	r3, [pc, #316]	; (8005e7c <_UG_PutChar+0x4c4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d44:	461c      	mov	r4, r3
 8005d46:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005d4a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005d4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d50:	8a3b      	ldrh	r3, [r7, #16]
 8005d52:	4413      	add	r3, r2
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	b21a      	sxth	r2, r3
 8005d5c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005d60:	47a0      	blx	r4
 8005d62:	4603      	mov	r3, r0
 8005d64:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005d66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005d68:	8839      	ldrh	r1, [r7, #0]
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
               fpixels -= width;
 8005d70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005d72:	8a3b      	ldrh	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8005d78:	88bb      	ldrh	r3, [r7, #4]
 8005d7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8005d7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d7e:	3301      	adds	r3, #1
 8005d80:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8005d82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1a5      	bne.n	8005cd4 <_UG_PutChar+0x31c>
 8005d88:	e071      	b.n	8005e6e <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8005d8a:	4b3c      	ldr	r3, [pc, #240]	; (8005e7c <_UG_PutChar+0x4c4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d16b      	bne.n	8005e6e <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005d96:	2300      	movs	r3, #0
 8005d98:	853b      	strh	r3, [r7, #40]	; 0x28
 8005d9a:	e060      	b.n	8005e5e <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005da0:	e04a      	b.n	8005e38 <_UG_PutChar+0x480>
       {
         b = *data++;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	60ba      	str	r2, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005dac:	883b      	ldrh	r3, [r7, #0]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	7f7a      	ldrb	r2, [r7, #29]
 8005db2:	fb03 f202 	mul.w	r2, r3, r2
 8005db6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	7f79      	ldrb	r1, [r7, #29]
 8005dbe:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	121b      	asrs	r3, r3, #8
 8005dca:	b21b      	sxth	r3, r3
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8005dd0:	883b      	ldrh	r3, [r7, #0]
 8005dd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005dd6:	7f79      	ldrb	r1, [r7, #29]
 8005dd8:	fb03 f101 	mul.w	r1, r3, r1
 8005ddc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005de0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005de4:	7f78      	ldrb	r0, [r7, #29]
 8005de6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005dea:	fb00 f303 	mul.w	r3, r0, r3
 8005dee:	440b      	add	r3, r1
 8005df0:	121b      	asrs	r3, r3, #8
 8005df2:	b21b      	sxth	r3, r3
 8005df4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005df8:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	b21b      	sxth	r3, r3
 8005dfe:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005e00:	7dbb      	ldrb	r3, [r7, #22]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8005e06:	8a7a      	ldrh	r2, [r7, #18]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	4798      	blx	r3
 8005e10:	e00f      	b.n	8005e32 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8005e12:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <_UG_PutChar+0x4c4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	88b9      	ldrh	r1, [r7, #4]
 8005e1c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005e1e:	440a      	add	r2, r1
 8005e20:	b292      	uxth	r2, r2
 8005e22:	b210      	sxth	r0, r2
 8005e24:	8879      	ldrh	r1, [r7, #2]
 8005e26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e28:	440a      	add	r2, r1
 8005e2a:	b292      	uxth	r2, r2
 8005e2c:	b211      	sxth	r1, r2
 8005e2e:	8a7a      	ldrh	r2, [r7, #18]
 8005e30:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8005e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e34:	3301      	adds	r3, #1
 8005e36:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e38:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005e3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	dbaf      	blt.n	8005da2 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <_UG_PutChar+0x4c4>)
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005e52:	1a8a      	subs	r2, r1, r2
 8005e54:	4413      	add	r3, r2
 8005e56:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005e58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e5e:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <_UG_PutChar+0x4c4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d396      	bcc.n	8005d9c <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8005e6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3730      	adds	r7, #48	; 0x30
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000afc 	.word	0x20000afc

08005e80 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8005e88:	4b57      	ldr	r3, [pc, #348]	; (8005fe8 <_UG_ProcessTouchData+0x168>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	88db      	ldrh	r3, [r3, #6]
 8005e8e:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8005e90:	4b55      	ldr	r3, [pc, #340]	; (8005fe8 <_UG_ProcessTouchData+0x168>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	891b      	ldrh	r3, [r3, #8]
 8005e96:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8005e98:	4b53      	ldr	r3, [pc, #332]	; (8005fe8 <_UG_ProcessTouchData+0x168>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	791b      	ldrb	r3, [r3, #4]
 8005e9e:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	83fb      	strh	r3, [r7, #30]
 8005eaa:	e090      	b.n	8005fce <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	8bfb      	ldrh	r3, [r7, #30]
 8005eb2:	015b      	lsls	r3, r3, #5
 8005eb4:	4413      	add	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d179      	bne.n	8005fc2 <_UG_ProcessTouchData+0x142>
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d074      	beq.n	8005fc2 <_UG_ProcessTouchData+0x142>
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d06f      	beq.n	8005fc2 <_UG_ProcessTouchData+0x142>
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d16a      	bne.n	8005fc2 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d047      	beq.n	8005f82 <_UG_ProcessTouchData+0x102>
 8005ef2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efa:	d042      	beq.n	8005f82 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005efc:	7f7b      	ldrb	r3, [r7, #29]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d107      	bne.n	8005f16 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8005f06:	7f7b      	ldrb	r3, [r7, #29]
 8005f08:	f043 0305 	orr.w	r3, r3, #5
 8005f0c:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8005f0e:	7f7b      	ldrb	r3, [r7, #29]
 8005f10:	f023 0318 	bic.w	r3, r3, #24
 8005f14:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005f16:	7f7b      	ldrb	r3, [r7, #29]
 8005f18:	f023 0320 	bic.w	r3, r3, #32
 8005f1c:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f24:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	db25      	blt.n	8005f78 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005f32:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	dc1e      	bgt.n	8005f78 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005f40:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	db17      	blt.n	8005f78 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005f4e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	dc10      	bgt.n	8005f78 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005f56:	7f7b      	ldrb	r3, [r7, #29]
 8005f58:	f043 0320 	orr.w	r3, r3, #32
 8005f5c:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005f5e:	7f7b      	ldrb	r3, [r7, #29]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d107      	bne.n	8005f78 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8005f68:	7f7b      	ldrb	r3, [r7, #29]
 8005f6a:	f023 0304 	bic.w	r3, r3, #4
 8005f6e:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8005f70:	7f7b      	ldrb	r3, [r7, #29]
 8005f72:	f043 0302 	orr.w	r3, r3, #2
 8005f76:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8005f78:	7f7b      	ldrb	r3, [r7, #29]
 8005f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7e:	777b      	strb	r3, [r7, #29]
 8005f80:	e01f      	b.n	8005fc2 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005f82:	7f7b      	ldrb	r3, [r7, #29]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01a      	beq.n	8005fc2 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8005f8c:	7f7b      	ldrb	r3, [r7, #29]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8005f96:	7f7b      	ldrb	r3, [r7, #29]
 8005f98:	f043 0308 	orr.w	r3, r3, #8
 8005f9c:	777b      	strb	r3, [r7, #29]
 8005f9e:	e003      	b.n	8005fa8 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8005fa0:	7f7b      	ldrb	r3, [r7, #29]
 8005fa2:	f043 0310 	orr.w	r3, r3, #16
 8005fa6:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005fa8:	7f7b      	ldrb	r3, [r7, #29]
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8005fb2:	7f7b      	ldrb	r3, [r7, #29]
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8005fba:	7f7b      	ldrb	r3, [r7, #29]
 8005fbc:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8005fc0:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	7f7a      	ldrb	r2, [r7, #29]
 8005fc6:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8005fc8:	8bfb      	ldrh	r3, [r7, #30]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	83fb      	strh	r3, [r7, #30]
 8005fce:	8bfa      	ldrh	r2, [r7, #30]
 8005fd0:	8abb      	ldrh	r3, [r7, #20]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	f4ff af6a 	bcc.w	8005eac <_UG_ProcessTouchData+0x2c>
   }
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	3724      	adds	r7, #36	; 0x24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000afc 	.word	0x20000afc

08005fec <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	82fb      	strh	r3, [r7, #22]
 8005ffe:	e035      	b.n	800606c <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	8afb      	ldrh	r3, [r7, #22]
 8006006:	015b      	lsls	r3, r3, #5
 8006008:	4413      	add	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d121      	bne.n	8006066 <_UG_UpdateObjects+0x7a>
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01c      	beq.n	8006066 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	6939      	ldr	r1, [r7, #16]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <_UG_UpdateObjects+0x7a>
 800604a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800604e:	2b00      	cmp	r3, #0
 8006050:	da09      	bge.n	8006066 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	6939      	ldr	r1, [r7, #16]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006066:	8afb      	ldrh	r3, [r7, #22]
 8006068:	3301      	adds	r3, #1
 800606a:	82fb      	strh	r3, [r7, #22]
 800606c:	8afa      	ldrh	r2, [r7, #22]
 800606e:	8abb      	ldrh	r3, [r7, #20]
 8006070:	429a      	cmp	r2, r3
 8006072:	d3c5      	bcc.n	8006000 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006088:	4b22      	ldr	r3, [pc, #136]	; (8006114 <_UG_HandleEvents+0x94>)
 800608a:	2200      	movs	r2, #0
 800608c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 800608e:	4b21      	ldr	r3, [pc, #132]	; (8006114 <_UG_HandleEvents+0x94>)
 8006090:	2202      	movs	r2, #2
 8006092:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	82fb      	strh	r3, [r7, #22]
 800609e:	e02f      	b.n	8006100 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	8afb      	ldrh	r3, [r7, #22]
 80060a6:	015b      	lsls	r3, r3, #5
 80060a8:	4413      	add	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d11e      	bne.n	80060fa <_UG_HandleEvents+0x7a>
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d019      	beq.n	80060fa <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	7e9b      	ldrb	r3, [r3, #26]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d015      	beq.n	80060fa <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80060ce:	4a11      	ldr	r2, [pc, #68]	; (8006114 <_UG_HandleEvents+0x94>)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	7e1a      	ldrb	r2, [r3, #24]
 80060d8:	4b0e      	ldr	r3, [pc, #56]	; (8006114 <_UG_HandleEvents+0x94>)
 80060da:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	7e5a      	ldrb	r2, [r3, #25]
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <_UG_HandleEvents+0x94>)
 80060e2:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	7e9a      	ldrb	r2, [r3, #26]
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <_UG_HandleEvents+0x94>)
 80060ea:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	4808      	ldr	r0, [pc, #32]	; (8006114 <_UG_HandleEvents+0x94>)
 80060f2:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2200      	movs	r2, #0
 80060f8:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80060fa:	8afb      	ldrh	r3, [r7, #22]
 80060fc:	3301      	adds	r3, #1
 80060fe:	82fb      	strh	r3, [r7, #22]
 8006100:	8afa      	ldrh	r2, [r7, #22]
 8006102:	8abb      	ldrh	r3, [r7, #20]
 8006104:	429a      	cmp	r2, r3
 8006106:	d3cb      	bcc.n	80060a0 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000b10 	.word	0x20000b10

08006118 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b08f      	sub	sp, #60	; 0x3c
 800611c:	af02      	add	r7, sp, #8
 800611e:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 812c 	beq.w	8006382 <_UG_PutText+0x26a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8127 	beq.w	8006382 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	89db      	ldrh	r3, [r3, #14]
 8006138:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	895b      	ldrh	r3, [r3, #10]
 800613e:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	3302      	adds	r3, #2
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 800614a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800614e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006152:	1ad2      	subs	r2, r2, r3
 8006154:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006158:	429a      	cmp	r2, r3
 800615a:	f2c0 8114 	blt.w	8006386 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	891b      	ldrh	r3, [r3, #8]
 8006162:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	899b      	ldrh	r3, [r3, #12]
 8006168:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7d1b      	ldrb	r3, [r3, #20]
 800616e:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8adb      	ldrh	r3, [r3, #22]
 8006174:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8b1b      	ldrh	r3, [r3, #24]
 800617a:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff fb92 	bl	80058b4 <_UG_FontSelect>

   rc=1;
 8006190:	2301      	movs	r3, #1
 8006192:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006198:	4b80      	ldr	r3, [pc, #512]	; (800639c <_UG_PutText+0x284>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d107      	bne.n	80061b4 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 80061a4:	f107 0308 	add.w	r3, r7, #8
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff f9bf 	bl	800552c <_UG_DecodeUTF8>
 80061ae:	4603      	mov	r3, r0
 80061b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80061b2:	e004      	b.n	80061be <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	60ba      	str	r2, [r7, #8]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80061be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d006      	beq.n	80061d2 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80061c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c6:	2b0a      	cmp	r3, #10
 80061c8:	d1e6      	bne.n	8006198 <_UG_PutText+0x80>
 80061ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061cc:	3301      	adds	r3, #1
 80061ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80061d0:	e7e2      	b.n	8006198 <_UG_PutText+0x80>
     if(!chr) break;
 80061d2:	bf00      	nop
   }

   yp = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80061d8:	7e7b      	ldrb	r3, [r7, #25]
 80061da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01f      	beq.n	8006222 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 80061e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80061e4:	8c3b      	ldrh	r3, [r7, #32]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3301      	adds	r3, #1
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 80061f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061f2:	8bfb      	ldrh	r3, [r7, #30]
 80061f4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80061f6:	fb11 f303 	smulbb	r3, r1, r3
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	b29b      	uxth	r3, r3
 8006200:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8006202:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006204:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006206:	3b01      	subs	r3, #1
 8006208:	b299      	uxth	r1, r3
 800620a:	8abb      	ldrh	r3, [r7, #20]
 800620c:	fb11 f303 	smulbb	r3, r1, r3
 8006210:	b29b      	uxth	r3, r3
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	b29b      	uxth	r3, r3
 8006216:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8006218:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800621c:	2b00      	cmp	r3, #0
 800621e:	f2c0 80b4 	blt.w	800638a <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8006222:	7e7b      	ldrb	r3, [r7, #25]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <_UG_PutText+0x11c>
 800622c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006230:	105b      	asrs	r3, r3, #1
 8006232:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8006234:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006236:	8c3b      	ldrh	r3, [r7, #32]
 8006238:	4413      	add	r3, r2
 800623a:	b29b      	uxth	r3, r3
 800623c:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 800623e:	2300      	movs	r3, #0
 8006240:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800624a:	4b54      	ldr	r3, [pc, #336]	; (800639c <_UG_PutText+0x284>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006252:	2b00      	cmp	r3, #0
 8006254:	d107      	bne.n	8006266 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8006256:	f107 0308 	add.w	r3, r7, #8
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff f966 	bl	800552c <_UG_DecodeUTF8>
 8006260:	4603      	mov	r3, r0
 8006262:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006264:	e004      	b.n	8006270 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	60ba      	str	r2, [r7, #8]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8006270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01b      	beq.n	80062ae <_UG_PutText+0x196>
 8006276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006278:	2b0a      	cmp	r3, #10
 800627a:	d018      	beq.n	80062ae <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 800627c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff f9cb 	bl	800561c <_UG_GetCharData>
 8006286:	4603      	mov	r3, r0
 8006288:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 800628a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006292:	d00a      	beq.n	80062aa <_UG_PutText+0x192>
         sl++;
 8006294:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006296:	3301      	adds	r3, #1
 8006298:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 800629a:	8a7a      	ldrh	r2, [r7, #18]
 800629c:	8afb      	ldrh	r3, [r7, #22]
 800629e:	4413      	add	r3, r2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062a4:	4413      	add	r3, r2
 80062a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80062a8:	e7cf      	b.n	800624a <_UG_PutText+0x132>
         if (w == -1){continue;}
 80062aa:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80062ac:	e7cd      	b.n	800624a <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 80062ae:	8afb      	ldrh	r3, [r7, #22]
 80062b0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 80062b6:	8b7a      	ldrh	r2, [r7, #26]
 80062b8:	8bbb      	ldrh	r3, [r7, #28]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3301      	adds	r3, #1
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80062c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80062c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80062ce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	db5b      	blt.n	800638e <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80062d6:	7e7b      	ldrb	r3, [r7, #25]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <_UG_PutText+0x1ce>
 80062e0:	2300      	movs	r3, #0
 80062e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80062e4:	e008      	b.n	80062f8 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80062e6:	7e7b      	ldrb	r3, [r7, #25]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <_UG_PutText+0x1e0>
 80062f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80062f4:	105b      	asrs	r3, r3, #1
 80062f6:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 80062f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80062fa:	8bbb      	ldrh	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	b29b      	uxth	r3, r3
 8006300:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006302:	4b26      	ldr	r3, [pc, #152]	; (800639c <_UG_PutText+0x284>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800630a:	2b00      	cmp	r3, #0
 800630c:	d107      	bne.n	800631e <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 800630e:	f107 030c 	add.w	r3, r7, #12
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff f90a 	bl	800552c <_UG_DecodeUTF8>
 8006318:	4603      	mov	r3, r0
 800631a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800631c:	e004      	b.n	8006328 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	60fa      	str	r2, [r7, #12]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8006328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d031      	beq.n	8006392 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 800632e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006330:	2b0a      	cmp	r3, #10
 8006332:	d01c      	beq.n	800636e <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8a1c      	ldrh	r4, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	8a5b      	ldrh	r3, [r3, #18]
 800633c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006340:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8006344:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4623      	mov	r3, r4
 800634a:	f7ff fb35 	bl	80059b8 <_UG_PutChar>
 800634e:	4603      	mov	r3, r0
 8006350:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8006352:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635a:	d0d2      	beq.n	8006302 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 800635c:	8a7a      	ldrh	r2, [r7, #18]
 800635e:	8afb      	ldrh	r3, [r7, #22]
 8006360:	4413      	add	r3, r2
 8006362:	b29a      	uxth	r2, r3
 8006364:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006366:	4413      	add	r3, r2
 8006368:	b29b      	uxth	r3, r3
 800636a:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800636c:	e7c9      	b.n	8006302 <_UG_PutText+0x1ea>
           break;
 800636e:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8006370:	8bfa      	ldrh	r2, [r7, #30]
 8006372:	8abb      	ldrh	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800637a:	4413      	add	r3, r2
 800637c:	b29b      	uxth	r3, r3
 800637e:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8006380:	e75d      	b.n	800623e <_UG_PutText+0x126>
     return;
 8006382:	bf00      	nop
 8006384:	e006      	b.n	8006394 <_UG_PutText+0x27c>
     return;
 8006386:	bf00      	nop
 8006388:	e004      	b.n	8006394 <_UG_PutText+0x27c>
        return;
 800638a:	bf00      	nop
 800638c:	e002      	b.n	8006394 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 800638e:	bf00      	nop
 8006390:	e000      	b.n	8006394 <_UG_PutText+0x27c>
           return;
 8006392:	bf00      	nop
   }
}
 8006394:	3734      	adds	r7, #52	; 0x34
 8006396:	46bd      	mov	sp, r7
 8006398:	bd90      	pop	{r4, r7, pc}
 800639a:	bf00      	nop
 800639c:	20000afc 	.word	0x20000afc

080063a0 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80063a0:	b5b0      	push	{r4, r5, r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4623      	mov	r3, r4
 80063b0:	80fb      	strh	r3, [r7, #6]
 80063b2:	4603      	mov	r3, r0
 80063b4:	80bb      	strh	r3, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	807b      	strh	r3, [r7, #2]
 80063ba:	4613      	mov	r3, r2
 80063bc:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80063be:	887b      	ldrh	r3, [r7, #2]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	b21c      	sxth	r4, r3
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	1c9a      	adds	r2, r3, #2
 80063ca:	61ba      	str	r2, [r7, #24]
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80063d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80063d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	4622      	mov	r2, r4
 80063e0:	f7fe fe92 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80063e4:	88bb      	ldrh	r3, [r7, #4]
 80063e6:	3301      	adds	r3, #1
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	b219      	sxth	r1, r3
 80063ec:	883b      	ldrh	r3, [r7, #0]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	b21c      	sxth	r4, r3
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	1c9a      	adds	r2, r3, #2
 80063f8:	61ba      	str	r2, [r7, #24]
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006400:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4623      	mov	r3, r4
 8006408:	f7fe fe7e 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	1c9a      	adds	r2, r3, #2
 8006410:	61ba      	str	r2, [r7, #24]
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	f9b7 4000 	ldrsh.w	r4, [r7]
 8006418:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800641c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8006420:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	4623      	mov	r3, r4
 8006428:	f7fe fe6e 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 800642c:	883b      	ldrh	r3, [r7, #0]
 800642e:	3b01      	subs	r3, #1
 8006430:	b29b      	uxth	r3, r3
 8006432:	b21c      	sxth	r4, r3
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	61ba      	str	r2, [r7, #24]
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006440:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006444:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	4623      	mov	r3, r4
 800644c:	f7fe fe5c 	bl	8005108 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8006450:	88fb      	ldrh	r3, [r7, #6]
 8006452:	3301      	adds	r3, #1
 8006454:	b29b      	uxth	r3, r3
 8006456:	b218      	sxth	r0, r3
 8006458:	88bb      	ldrh	r3, [r7, #4]
 800645a:	3301      	adds	r3, #1
 800645c:	b29b      	uxth	r3, r3
 800645e:	b219      	sxth	r1, r3
 8006460:	887b      	ldrh	r3, [r7, #2]
 8006462:	3b02      	subs	r3, #2
 8006464:	b29b      	uxth	r3, r3
 8006466:	b21c      	sxth	r4, r3
 8006468:	88bb      	ldrh	r3, [r7, #4]
 800646a:	3301      	adds	r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	b21d      	sxth	r5, r3
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	61ba      	str	r2, [r7, #24]
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	462b      	mov	r3, r5
 800647c:	4622      	mov	r2, r4
 800647e:	f7fe fe43 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	3301      	adds	r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	b218      	sxth	r0, r3
 800648a:	88bb      	ldrh	r3, [r7, #4]
 800648c:	3302      	adds	r3, #2
 800648e:	b29b      	uxth	r3, r3
 8006490:	b219      	sxth	r1, r3
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	3301      	adds	r3, #1
 8006496:	b29b      	uxth	r3, r3
 8006498:	b21c      	sxth	r4, r3
 800649a:	883b      	ldrh	r3, [r7, #0]
 800649c:	3b02      	subs	r3, #2
 800649e:	b29b      	uxth	r3, r3
 80064a0:	b21d      	sxth	r5, r3
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	1c9a      	adds	r2, r3, #2
 80064a6:	61ba      	str	r2, [r7, #24]
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	462b      	mov	r3, r5
 80064ae:	4622      	mov	r2, r4
 80064b0:	f7fe fe2a 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	3301      	adds	r3, #1
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	b218      	sxth	r0, r3
 80064bc:	883b      	ldrh	r3, [r7, #0]
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	b219      	sxth	r1, r3
 80064c4:	887b      	ldrh	r3, [r7, #2]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	b21c      	sxth	r4, r3
 80064cc:	883b      	ldrh	r3, [r7, #0]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	b21d      	sxth	r5, r3
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	1c9a      	adds	r2, r3, #2
 80064d8:	61ba      	str	r2, [r7, #24]
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	462b      	mov	r3, r5
 80064e0:	4622      	mov	r2, r4
 80064e2:	f7fe fe11 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80064e6:	887b      	ldrh	r3, [r7, #2]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	b218      	sxth	r0, r3
 80064ee:	88bb      	ldrh	r3, [r7, #4]
 80064f0:	3301      	adds	r3, #1
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	b219      	sxth	r1, r3
 80064f6:	887b      	ldrh	r3, [r7, #2]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	b21c      	sxth	r4, r3
 80064fe:	883b      	ldrh	r3, [r7, #0]
 8006500:	3b02      	subs	r3, #2
 8006502:	b29b      	uxth	r3, r3
 8006504:	b21d      	sxth	r5, r3
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	1c9a      	adds	r2, r3, #2
 800650a:	61ba      	str	r2, [r7, #24]
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	462b      	mov	r3, r5
 8006512:	4622      	mov	r2, r4
 8006514:	f7fe fdf8 	bl	8005108 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	3302      	adds	r3, #2
 800651c:	b29b      	uxth	r3, r3
 800651e:	b218      	sxth	r0, r3
 8006520:	88bb      	ldrh	r3, [r7, #4]
 8006522:	3302      	adds	r3, #2
 8006524:	b29b      	uxth	r3, r3
 8006526:	b219      	sxth	r1, r3
 8006528:	887b      	ldrh	r3, [r7, #2]
 800652a:	3b03      	subs	r3, #3
 800652c:	b29b      	uxth	r3, r3
 800652e:	b21c      	sxth	r4, r3
 8006530:	88bb      	ldrh	r3, [r7, #4]
 8006532:	3302      	adds	r3, #2
 8006534:	b29b      	uxth	r3, r3
 8006536:	b21d      	sxth	r5, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	1c9a      	adds	r2, r3, #2
 800653c:	61ba      	str	r2, [r7, #24]
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	462b      	mov	r3, r5
 8006544:	4622      	mov	r2, r4
 8006546:	f7fe fddf 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	3302      	adds	r3, #2
 800654e:	b29b      	uxth	r3, r3
 8006550:	b218      	sxth	r0, r3
 8006552:	88bb      	ldrh	r3, [r7, #4]
 8006554:	3303      	adds	r3, #3
 8006556:	b29b      	uxth	r3, r3
 8006558:	b219      	sxth	r1, r3
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	3302      	adds	r3, #2
 800655e:	b29b      	uxth	r3, r3
 8006560:	b21c      	sxth	r4, r3
 8006562:	883b      	ldrh	r3, [r7, #0]
 8006564:	3b03      	subs	r3, #3
 8006566:	b29b      	uxth	r3, r3
 8006568:	b21d      	sxth	r5, r3
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	1c9a      	adds	r2, r3, #2
 800656e:	61ba      	str	r2, [r7, #24]
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	462b      	mov	r3, r5
 8006576:	4622      	mov	r2, r4
 8006578:	f7fe fdc6 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	3302      	adds	r3, #2
 8006580:	b29b      	uxth	r3, r3
 8006582:	b218      	sxth	r0, r3
 8006584:	883b      	ldrh	r3, [r7, #0]
 8006586:	3b02      	subs	r3, #2
 8006588:	b29b      	uxth	r3, r3
 800658a:	b219      	sxth	r1, r3
 800658c:	887b      	ldrh	r3, [r7, #2]
 800658e:	3b02      	subs	r3, #2
 8006590:	b29b      	uxth	r3, r3
 8006592:	b21c      	sxth	r4, r3
 8006594:	883b      	ldrh	r3, [r7, #0]
 8006596:	3b02      	subs	r3, #2
 8006598:	b29b      	uxth	r3, r3
 800659a:	b21d      	sxth	r5, r3
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	1c9a      	adds	r2, r3, #2
 80065a0:	61ba      	str	r2, [r7, #24]
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	462b      	mov	r3, r5
 80065a8:	4622      	mov	r2, r4
 80065aa:	f7fe fdad 	bl	8005108 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80065ae:	887b      	ldrh	r3, [r7, #2]
 80065b0:	3b02      	subs	r3, #2
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	b218      	sxth	r0, r3
 80065b6:	88bb      	ldrh	r3, [r7, #4]
 80065b8:	3302      	adds	r3, #2
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	b219      	sxth	r1, r3
 80065be:	887b      	ldrh	r3, [r7, #2]
 80065c0:	3b02      	subs	r3, #2
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	b21a      	sxth	r2, r3
 80065c6:	883b      	ldrh	r3, [r7, #0]
 80065c8:	3b03      	subs	r3, #3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	b21c      	sxth	r4, r3
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4623      	mov	r3, r4
 80065d6:	f7fe fd97 	bl	8005108 <UG_DrawLine>
}
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080065e4 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	6039      	str	r1, [r7, #0]
 80065ee:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d810      	bhi.n	8006618 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <UG_DriverRegister+0x40>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	330a      	adds	r3, #10
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <UG_DriverRegister+0x40>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	330a      	adds	r3, #10
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4413      	add	r3, r2
 8006612:	2203      	movs	r2, #3
 8006614:	721a      	strb	r2, [r3, #8]
 8006616:	e000      	b.n	800661a <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006618:	bf00      	nop
}
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	20000afc 	.word	0x20000afc

08006628 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 800662e:	4b5e      	ldr	r3, [pc, #376]	; (80067a8 <UG_Update+0x180>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <UG_Update+0x2c>
 800663e:	4b5a      	ldr	r3, [pc, #360]	; (80067a8 <UG_Update+0x180>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8006646:	4b58      	ldr	r3, [pc, #352]	; (80067a8 <UG_Update+0x180>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8006654:	4b54      	ldr	r3, [pc, #336]	; (80067a8 <UG_Update+0x180>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	4b53      	ldr	r3, [pc, #332]	; (80067a8 <UG_Update+0x180>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	429a      	cmp	r2, r3
 8006662:	d071      	beq.n	8006748 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8006664:	4b50      	ldr	r3, [pc, #320]	; (80067a8 <UG_Update+0x180>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d06c      	beq.n	8006748 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 800666e:	4b4e      	ldr	r3, [pc, #312]	; (80067a8 <UG_Update+0x180>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b4d      	ldr	r3, [pc, #308]	; (80067a8 <UG_Update+0x180>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6912      	ldr	r2, [r2, #16]
 8006678:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 800667a:	4b4b      	ldr	r3, [pc, #300]	; (80067a8 <UG_Update+0x180>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4b4a      	ldr	r3, [pc, #296]	; (80067a8 <UG_Update+0x180>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68d2      	ldr	r2, [r2, #12]
 8006684:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8006686:	4b48      	ldr	r3, [pc, #288]	; (80067a8 <UG_Update+0x180>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d045      	beq.n	800671c <UG_Update+0xf4>
 8006690:	4b45      	ldr	r3, [pc, #276]	; (80067a8 <UG_Update+0x180>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	7d9b      	ldrb	r3, [r3, #22]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d03d      	beq.n	800671c <UG_Update+0xf4>
 80066a0:	4b41      	ldr	r3, [pc, #260]	; (80067a8 <UG_Update+0x180>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	7a1b      	ldrb	r3, [r3, #8]
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d035      	beq.n	800671c <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80066b0:	4b3d      	ldr	r3, [pc, #244]	; (80067a8 <UG_Update+0x180>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80066ba:	4b3b      	ldr	r3, [pc, #236]	; (80067a8 <UG_Update+0x180>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d123      	bne.n	8006710 <UG_Update+0xe8>
 80066c8:	4b37      	ldr	r3, [pc, #220]	; (80067a8 <UG_Update+0x180>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80066d2:	4b35      	ldr	r3, [pc, #212]	; (80067a8 <UG_Update+0x180>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d117      	bne.n	8006710 <UG_Update+0xe8>
 80066e0:	4b31      	ldr	r3, [pc, #196]	; (80067a8 <UG_Update+0x180>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80066ea:	4b2f      	ldr	r3, [pc, #188]	; (80067a8 <UG_Update+0x180>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d10b      	bne.n	8006710 <UG_Update+0xe8>
 80066f8:	4b2b      	ldr	r3, [pc, #172]	; (80067a8 <UG_Update+0x180>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8006702:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <UG_Update+0x180>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800670c:	429a      	cmp	r2, r3
 800670e:	d005      	beq.n	800671c <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006710:	4b25      	ldr	r3, [pc, #148]	; (80067a8 <UG_Update+0x180>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f848 	bl	80067ac <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 800671c:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <UG_Update+0x180>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	7a1a      	ldrb	r2, [r3, #8]
 8006724:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <UG_Update+0x180>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8006732:	4b1d      	ldr	r3, [pc, #116]	; (80067a8 <UG_Update+0x180>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	7a1a      	ldrb	r2, [r3, #8]
 800673a:	4b1b      	ldr	r3, [pc, #108]	; (80067a8 <UG_Update+0x180>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8006748:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <UG_Update+0x180>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01b      	beq.n	800678a <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <UG_Update+0x180>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7a1b      	ldrb	r3, [r3, #8]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f8ca 	bl	8006900 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	7a1b      	ldrb	r3, [r3, #8]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff fb81 	bl	8005e80 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fc34 	bl	8005fec <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff fc7b 	bl	8006080 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 800678a:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <UG_Update+0x180>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <UG_Update+0x178>
     gui->device->flush();
 8006796:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <UG_Update+0x180>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	4798      	blx	r3
   }
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000afc 	.word	0x20000afc

080067ac <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80067ac:	b590      	push	{r4, r7, lr}
 80067ae:	b08f      	sub	sp, #60	; 0x3c
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 809a 	beq.w	80068f0 <_UG_WindowDrawTitle+0x144>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	7a1b      	ldrb	r3, [r3, #8]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8093 	beq.w	80068f0 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	89db      	ldrh	r3, [r3, #14]
 80067ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8a1b      	ldrh	r3, [r3, #16]
 80067d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8a5b      	ldrh	r3, [r3, #18]
 80067da:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8a9b      	ldrh	r3, [r3, #20]
 80067e0:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	7d9b      	ldrb	r3, [r3, #22]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00f      	beq.n	800680e <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 80067ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067f0:	3303      	adds	r3, #3
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 80067f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067f8:	3303      	adds	r3, #3
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 80067fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006800:	3b03      	subs	r3, #3
 8006802:	b29b      	uxth	r3, r3
 8006804:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8006806:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006808:	3b03      	subs	r3, #3
 800680a:	b29b      	uxth	r3, r3
 800680c:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 800680e:	4b3b      	ldr	r3, [pc, #236]	; (80068fc <_UG_WindowDrawTitle+0x150>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d106      	bne.n	8006828 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800681e:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006824:	83bb      	strh	r3, [r7, #28]
 8006826:	e005      	b.n	8006834 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006832:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800683a:	b29a      	uxth	r2, r3
 800683c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800683e:	4413      	add	r3, r2
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29b      	uxth	r3, r3
 8006846:	b21c      	sxth	r4, r3
 8006848:	8bfb      	ldrh	r3, [r7, #30]
 800684a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800684e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006852:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	4623      	mov	r3, r4
 800685a:	f7fe fbff 	bl	800505c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 800686a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800686c:	3303      	adds	r3, #3
 800686e:	b29b      	uxth	r3, r3
 8006870:	b21b      	sxth	r3, r3
 8006872:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8006874:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006876:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8006878:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800687a:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006882:	b29a      	uxth	r2, r3
 8006884:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006886:	4413      	add	r3, r2
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29b      	uxth	r3, r3
 800688e:	b21b      	sxth	r3, r3
 8006890:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006898:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80068a2:	b21b      	sxth	r3, r3
 80068a4:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 80068ac:	b21b      	sxth	r3, r3
 80068ae:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 80068b0:	f107 030c 	add.w	r3, r7, #12
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fc2f 	bl	8006118 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068c4:	4413      	add	r3, r2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	b219      	sxth	r1, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068d4:	4413      	add	r3, r2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	b21b      	sxth	r3, r3
 80068da:	f649 5413 	movw	r4, #40211	; 0x9d13
 80068de:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80068e2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80068e6:	9400      	str	r4, [sp, #0]
 80068e8:	f7fe fc0e 	bl	8005108 <UG_DrawLine>
      return UG_RESULT_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e001      	b.n	80068f4 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3734      	adds	r7, #52	; 0x34
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd90      	pop	{r4, r7, pc}
 80068fc:	20000afc 	.word	0x20000afc

08006900 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006900:	b590      	push	{r4, r7, lr}
 8006902:	b089      	sub	sp, #36	; 0x24
 8006904:	af02      	add	r7, sp, #8
 8006906:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	89db      	ldrh	r3, [r3, #14]
 800690c:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8a1b      	ldrh	r3, [r3, #16]
 8006912:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8a5b      	ldrh	r3, [r3, #18]
 8006918:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8a9b      	ldrh	r3, [r3, #20]
 800691e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	7a1b      	ldrb	r3, [r3, #8]
 8006924:	f023 0320 	bic.w	r3, r3, #32
 8006928:	b2da      	uxtb	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	7a1b      	ldrb	r3, [r3, #8]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8084 	beq.w	8006a44 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7d9b      	ldrb	r3, [r3, #22]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d021      	beq.n	800698c <_UG_WindowUpdate+0x8c>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	7a1b      	ldrb	r3, [r3, #8]
 800694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11b      	bne.n	800698c <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8006954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006958:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800695c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006960:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006964:	4c43      	ldr	r4, [pc, #268]	; (8006a74 <_UG_WindowUpdate+0x174>)
 8006966:	9400      	str	r4, [sp, #0]
 8006968:	f7ff fd1a 	bl	80063a0 <_UG_DrawObjectFrame>
         xs+=3;
 800696c:	8abb      	ldrh	r3, [r7, #20]
 800696e:	3303      	adds	r3, #3
 8006970:	b29b      	uxth	r3, r3
 8006972:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8006974:	8a7b      	ldrh	r3, [r7, #18]
 8006976:	3303      	adds	r3, #3
 8006978:	b29b      	uxth	r3, r3
 800697a:	827b      	strh	r3, [r7, #18]
         xe-=3;
 800697c:	8a3b      	ldrh	r3, [r7, #16]
 800697e:	3b03      	subs	r3, #3
 8006980:	b29b      	uxth	r3, r3
 8006982:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	3b03      	subs	r3, #3
 8006988:	b29b      	uxth	r3, r3
 800698a:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	7d9b      	ldrb	r3, [r3, #22]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01a      	beq.n	80069ce <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff ff07 	bl	80067ac <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	8a7b      	ldrh	r3, [r7, #18]
 80069a8:	4413      	add	r3, r2
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3301      	adds	r3, #1
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	7a1b      	ldrb	r3, [r3, #8]
 80069b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	7a1b      	ldrb	r3, [r3, #8]
 80069c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	721a      	strb	r2, [r3, #8]
            return;
 80069cc:	e04e      	b.n	8006a6c <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	899b      	ldrh	r3, [r3, #12]
 80069d2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80069d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80069da:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80069de:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4623      	mov	r3, r4
 80069e6:	f7fe fb39 	bl	800505c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80069f0:	2300      	movs	r3, #0
 80069f2:	82fb      	strh	r3, [r7, #22]
 80069f4:	e021      	b.n	8006a3a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	8afb      	ldrh	r3, [r7, #22]
 80069fc:	015b      	lsls	r3, r3, #5
 80069fe:	4413      	add	r3, r2
 8006a00:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d112      	bne.n	8006a34 <_UG_WindowUpdate+0x134>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <_UG_WindowUpdate+0x134>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d006      	beq.n	8006a34 <_UG_WindowUpdate+0x134>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8006a34:	8afb      	ldrh	r3, [r7, #22]
 8006a36:	3301      	adds	r3, #1
 8006a38:	82fb      	strh	r3, [r7, #22]
 8006a3a:	8afa      	ldrh	r2, [r7, #22]
 8006a3c:	89bb      	ldrh	r3, [r7, #12]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d3d9      	bcc.n	80069f6 <_UG_WindowUpdate+0xf6>
 8006a42:	e013      	b.n	8006a6c <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8006a5c:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <_UG_WindowUpdate+0x178>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4623      	mov	r3, r4
 8006a68:	f7fe faf8 	bl	800505c <UG_FillFrame>
   }
}
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd90      	pop	{r4, r7, pc}
 8006a72:	bf00      	nop
 8006a74:	08018248 	.word	0x08018248
 8006a78:	20000afc 	.word	0x20000afc

08006a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006a80:	f7fe f9f4 	bl	8004e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a84:	480c      	ldr	r0, [pc, #48]	; (8006ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006a86:	490d      	ldr	r1, [pc, #52]	; (8006abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <LoopForever+0xe>)
  movs r3, #0
 8006a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a8c:	e002      	b.n	8006a94 <LoopCopyDataInit>

08006a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a92:	3304      	adds	r3, #4

08006a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a98:	d3f9      	bcc.n	8006a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a9c:	4c0a      	ldr	r4, [pc, #40]	; (8006ac8 <LoopForever+0x16>)
  movs r3, #0
 8006a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006aa0:	e001      	b.n	8006aa6 <LoopFillZerobss>

08006aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006aa4:	3204      	adds	r2, #4

08006aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006aa8:	d3fb      	bcc.n	8006aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006aaa:	f00a f8cb 	bl	8010c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006aae:	f7fb fd5b 	bl	8002568 <main>

08006ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8006ab2:	e7fe      	b.n	8006ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006ab4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8006ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006abc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8006ac0:	0801860c 	.word	0x0801860c
  ldr r2, =_sbss
 8006ac4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8006ac8:	20000c68 	.word	0x20000c68

08006acc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006acc:	e7fe      	b.n	8006acc <ADC1_IRQHandler>

08006ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ad8:	2003      	movs	r0, #3
 8006ada:	f001 f9dd 	bl	8007e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f000 f80e 	bl	8006b00 <HAL_InitTick>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	71fb      	strb	r3, [r7, #7]
 8006aee:	e001      	b.n	8006af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006af0:	f7fd f974 	bl	8003ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006af4:	79fb      	ldrb	r3, [r7, #7]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006b0c:	4b17      	ldr	r3, [pc, #92]	; (8006b6c <HAL_InitTick+0x6c>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d023      	beq.n	8006b5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006b14:	4b16      	ldr	r3, [pc, #88]	; (8006b70 <HAL_InitTick+0x70>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <HAL_InitTick+0x6c>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f9e9 	bl	8007f02 <HAL_SYSTICK_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10f      	bne.n	8006b56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b0f      	cmp	r3, #15
 8006b3a:	d809      	bhi.n	8006b50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b44:	f001 f9b3 	bl	8007eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b48:	4a0a      	ldr	r2, [pc, #40]	; (8006b74 <HAL_InitTick+0x74>)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e007      	b.n	8006b60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
 8006b54:	e004      	b.n	8006b60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	73fb      	strb	r3, [r7, #15]
 8006b5a:	e001      	b.n	8006b60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000034 	.word	0x20000034
 8006b70:	2000002c 	.word	0x2000002c
 8006b74:	20000030 	.word	0x20000030

08006b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HAL_IncTick+0x20>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <HAL_IncTick+0x24>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4413      	add	r3, r2
 8006b88:	4a04      	ldr	r2, [pc, #16]	; (8006b9c <HAL_IncTick+0x24>)
 8006b8a:	6013      	str	r3, [r2, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	20000034 	.word	0x20000034
 8006b9c:	20000b18 	.word	0x20000b18

08006ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8006ba4:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <HAL_GetTick+0x14>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000b18 	.word	0x20000b18

08006bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bc0:	f7ff ffee 	bl	8006ba0 <HAL_GetTick>
 8006bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd0:	d005      	beq.n	8006bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <HAL_Delay+0x44>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006bde:	bf00      	nop
 8006be0:	f7ff ffde 	bl	8006ba0 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d8f7      	bhi.n	8006be0 <HAL_Delay+0x28>
  {
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000034 	.word	0x20000034

08006c00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	609a      	str	r2, [r3, #8]
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	609a      	str	r2, [r3, #8]
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3360      	adds	r3, #96	; 0x60
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <LL_ADC_SetOffset+0x44>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	03fff000 	.word	0x03fff000

08006cb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3360      	adds	r3, #96	; 0x60
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3360      	adds	r3, #96	; 0x60
 8006cec:	461a      	mov	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	615a      	str	r2, [r3, #20]
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3330      	adds	r3, #48	; 0x30
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	f003 030c 	and.w	r3, r3, #12
 8006d54:	4413      	add	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	211f      	movs	r1, #31
 8006d64:	fa01 f303 	lsl.w	r3, r1, r3
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	401a      	ands	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	0e9b      	lsrs	r3, r3, #26
 8006d70:	f003 011f 	and.w	r1, r3, #31
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f003 031f 	and.w	r3, r3, #31
 8006d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	461a      	mov	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	0e5b      	lsrs	r3, r3, #25
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	4413      	add	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	0d1b      	lsrs	r3, r3, #20
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	2107      	movs	r1, #7
 8006dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	401a      	ands	r2, r3
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	0d1b      	lsrs	r3, r3, #20
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e00:	43db      	mvns	r3, r3
 8006e02:	401a      	ands	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f003 0318 	and.w	r3, r3, #24
 8006e0a:	4908      	ldr	r1, [pc, #32]	; (8006e2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8006e0c:	40d9      	lsrs	r1, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	400b      	ands	r3, r1
 8006e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e16:	431a      	orrs	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	0007ffff 	.word	0x0007ffff

08006e30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6093      	str	r3, [r2, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e68:	d101      	bne.n	8006e6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eb8:	d101      	bne.n	8006ebe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <LL_ADC_IsEnabled+0x18>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <LL_ADC_IsEnabled+0x1a>
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d101      	bne.n	8006f0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e000      	b.n	8006f0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d101      	bne.n	8006f30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e129      	b.n	80071ae <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d109      	bne.n	8006f7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7fc ff5b 	bl	8003e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff ff67 	bl	8006e54 <LL_ADC_IsDeepPowerDownEnabled>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ff4d 	bl	8006e30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff ff82 	bl	8006ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d115      	bne.n	8006fd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff ff66 	bl	8006e7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fb0:	4b81      	ldr	r3, [pc, #516]	; (80071b8 <HAL_ADC_Init+0x278>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	099b      	lsrs	r3, r3, #6
 8006fb6:	4a81      	ldr	r2, [pc, #516]	; (80071bc <HAL_ADC_Init+0x27c>)
 8006fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbc:	099b      	lsrs	r3, r3, #6
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006fc4:	e002      	b.n	8006fcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f9      	bne.n	8006fc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff ff64 	bl	8006ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10d      	bne.n	8006ffe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe6:	f043 0210 	orr.w	r2, r3, #16
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff2:	f043 0201 	orr.w	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff ff75 	bl	8006ef2 <LL_ADC_REG_IsConversionOngoing>
 8007008:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700e:	f003 0310 	and.w	r3, r3, #16
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 80c2 	bne.w	800719c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f040 80be 	bne.w	800719c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007028:	f043 0202 	orr.w	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff ff49 	bl	8006ecc <LL_ADC_IsEnabled>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007040:	485f      	ldr	r0, [pc, #380]	; (80071c0 <HAL_ADC_Init+0x280>)
 8007042:	f7ff ff43 	bl	8006ecc <LL_ADC_IsEnabled>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4619      	mov	r1, r3
 8007052:	485c      	ldr	r0, [pc, #368]	; (80071c4 <HAL_ADC_Init+0x284>)
 8007054:	f7ff fdd4 	bl	8006c00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7e5b      	ldrb	r3, [r3, #25]
 800705c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007062:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007068:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800706e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007076:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007078:	4313      	orrs	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d106      	bne.n	8007094 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	3b01      	subs	r3, #1
 800708c:	045b      	lsls	r3, r3, #17
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4313      	orrs	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	4b44      	ldr	r3, [pc, #272]	; (80071c8 <HAL_ADC_Init+0x288>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	69b9      	ldr	r1, [r7, #24]
 80070c0:	430b      	orrs	r3, r1
 80070c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ff25 	bl	8006f18 <LL_ADC_INJ_IsConversionOngoing>
 80070ce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d140      	bne.n	8007158 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d13d      	bne.n	8007158 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	7e1b      	ldrb	r3, [r3, #24]
 80070e4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80070e6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80070f0:	4313      	orrs	r3, r2
 80070f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070fe:	f023 0306 	bic.w	r3, r3, #6
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	69b9      	ldr	r1, [r7, #24]
 8007108:	430b      	orrs	r3, r1
 800710a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007112:	2b01      	cmp	r3, #1
 8007114:	d118      	bne.n	8007148 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800712c:	4311      	orrs	r1, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007132:	4311      	orrs	r1, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007138:	430a      	orrs	r2, r1
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0201 	orr.w	r2, r2, #1
 8007144:	611a      	str	r2, [r3, #16]
 8007146:	e007      	b.n	8007158 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0201 	bic.w	r2, r2, #1
 8007156:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d10c      	bne.n	800717a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	f023 010f 	bic.w	r1, r3, #15
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	1e5a      	subs	r2, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
 8007178:	e007      	b.n	800718a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 020f 	bic.w	r2, r2, #15
 8007188:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	f043 0201 	orr.w	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	659a      	str	r2, [r3, #88]	; 0x58
 800719a:	e007      	b.n	80071ac <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a0:	f043 0210 	orr.w	r2, r3, #16
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80071ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	2000002c 	.word	0x2000002c
 80071bc:	053e2d63 	.word	0x053e2d63
 80071c0:	50040000 	.word	0x50040000
 80071c4:	50040300 	.word	0x50040300
 80071c8:	fff0c007 	.word	0xfff0c007

080071cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b0b6      	sub	sp, #216	; 0xd8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80071dc:	2300      	movs	r3, #0
 80071de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_ADC_ConfigChannel+0x22>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e3d5      	b.n	800799a <HAL_ADC_ConfigChannel+0x7ce>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff fe79 	bl	8006ef2 <LL_ADC_REG_IsConversionOngoing>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	f040 83ba 	bne.w	800797c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b05      	cmp	r3, #5
 8007216:	d824      	bhi.n	8007262 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	3b02      	subs	r3, #2
 800721e:	2b03      	cmp	r3, #3
 8007220:	d81b      	bhi.n	800725a <HAL_ADC_ConfigChannel+0x8e>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <HAL_ADC_ConfigChannel+0x5c>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007239 	.word	0x08007239
 800722c:	08007241 	.word	0x08007241
 8007230:	08007249 	.word	0x08007249
 8007234:	08007251 	.word	0x08007251
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8007238:	230c      	movs	r3, #12
 800723a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800723e:	e010      	b.n	8007262 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8007240:	2312      	movs	r3, #18
 8007242:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8007246:	e00c      	b.n	8007262 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8007248:	2318      	movs	r3, #24
 800724a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800724e:	e008      	b.n	8007262 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8007250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8007258:	e003      	b.n	8007262 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800725a:	2306      	movs	r3, #6
 800725c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8007260:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007270:	f7ff fd62 	bl	8006d38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fe3a 	bl	8006ef2 <LL_ADC_REG_IsConversionOngoing>
 800727e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff fe46 	bl	8006f18 <LL_ADC_INJ_IsConversionOngoing>
 800728c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007294:	2b00      	cmp	r3, #0
 8007296:	f040 81bf 	bne.w	8007618 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800729a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f040 81ba 	bne.w	8007618 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ac:	d10f      	bne.n	80072ce <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2200      	movs	r2, #0
 80072b8:	4619      	mov	r1, r3
 80072ba:	f7ff fd69 	bl	8006d90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fd23 	bl	8006d12 <LL_ADC_SetSamplingTimeCommonConfig>
 80072cc:	e00e      	b.n	80072ec <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	461a      	mov	r2, r3
 80072dc:	f7ff fd58 	bl	8006d90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff fd13 	bl	8006d12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695a      	ldr	r2, [r3, #20]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	08db      	lsrs	r3, r3, #3
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b04      	cmp	r3, #4
 800730c:	d00a      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6919      	ldr	r1, [r3, #16]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800731e:	f7ff fca3 	bl	8006c68 <LL_ADC_SetOffset>
 8007322:	e179      	b.n	8007618 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff fcc0 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 8007330:	4603      	mov	r3, r0
 8007332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <HAL_ADC_ConfigChannel+0x184>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2100      	movs	r1, #0
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff fcb5 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 8007346:	4603      	mov	r3, r0
 8007348:	0e9b      	lsrs	r3, r3, #26
 800734a:	f003 021f 	and.w	r2, r3, #31
 800734e:	e01e      	b.n	800738e <HAL_ADC_ConfigChannel+0x1c2>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2100      	movs	r1, #0
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff fcaa 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 800735c:	4603      	mov	r3, r0
 800735e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007366:	fa93 f3a3 	rbit	r3, r3
 800736a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800736e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007372:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800737e:	2320      	movs	r3, #32
 8007380:	e004      	b.n	800738c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8007382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007386:	fab3 f383 	clz	r3, r3
 800738a:	b2db      	uxtb	r3, r3
 800738c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <HAL_ADC_ConfigChannel+0x1da>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	0e9b      	lsrs	r3, r3, #26
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	e018      	b.n	80073d8 <HAL_ADC_ConfigChannel+0x20c>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073b2:	fa93 f3a3 	rbit	r3, r3
 80073b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80073ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80073c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80073ca:	2320      	movs	r3, #32
 80073cc:	e004      	b.n	80073d8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80073ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073d2:	fab3 f383 	clz	r3, r3
 80073d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80073d8:	429a      	cmp	r2, r3
 80073da:	d106      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2200      	movs	r2, #0
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fc79 	bl	8006cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2101      	movs	r1, #1
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fc5d 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <HAL_ADC_ConfigChannel+0x24a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2101      	movs	r1, #1
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fc52 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 800740c:	4603      	mov	r3, r0
 800740e:	0e9b      	lsrs	r3, r3, #26
 8007410:	f003 021f 	and.w	r2, r3, #31
 8007414:	e01e      	b.n	8007454 <HAL_ADC_ConfigChannel+0x288>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2101      	movs	r1, #1
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fc47 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 8007422:	4603      	mov	r3, r0
 8007424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007428:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800742c:	fa93 f3a3 	rbit	r3, r3
 8007430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8007434:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800743c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8007444:	2320      	movs	r3, #32
 8007446:	e004      	b.n	8007452 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8007448:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800744c:	fab3 f383 	clz	r3, r3
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745c:	2b00      	cmp	r3, #0
 800745e:	d105      	bne.n	800746c <HAL_ADC_ConfigChannel+0x2a0>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	0e9b      	lsrs	r3, r3, #26
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	e018      	b.n	800749e <HAL_ADC_ConfigChannel+0x2d2>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007474:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007478:	fa93 f3a3 	rbit	r3, r3
 800747c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8007480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8007488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8007490:	2320      	movs	r3, #32
 8007492:	e004      	b.n	800749e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8007494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007498:	fab3 f383 	clz	r3, r3
 800749c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800749e:	429a      	cmp	r2, r3
 80074a0:	d106      	bne.n	80074b0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	2101      	movs	r1, #1
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fc16 	bl	8006cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2102      	movs	r1, #2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff fbfa 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 80074bc:	4603      	mov	r3, r0
 80074be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <HAL_ADC_ConfigChannel+0x310>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2102      	movs	r1, #2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fbef 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 80074d2:	4603      	mov	r3, r0
 80074d4:	0e9b      	lsrs	r3, r3, #26
 80074d6:	f003 021f 	and.w	r2, r3, #31
 80074da:	e01e      	b.n	800751a <HAL_ADC_ConfigChannel+0x34e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2102      	movs	r1, #2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fbe4 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074f2:	fa93 f3a3 	rbit	r3, r3
 80074f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80074fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8007502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800750a:	2320      	movs	r3, #32
 800750c:	e004      	b.n	8007518 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800750e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007512:	fab3 f383 	clz	r3, r3
 8007516:	b2db      	uxtb	r3, r3
 8007518:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007522:	2b00      	cmp	r3, #0
 8007524:	d105      	bne.n	8007532 <HAL_ADC_ConfigChannel+0x366>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	0e9b      	lsrs	r3, r3, #26
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	e014      	b.n	800755c <HAL_ADC_ConfigChannel+0x390>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007538:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800753a:	fa93 f3a3 	rbit	r3, r3
 800753e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800754e:	2320      	movs	r3, #32
 8007550:	e004      	b.n	800755c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8007552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007556:	fab3 f383 	clz	r3, r3
 800755a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800755c:	429a      	cmp	r2, r3
 800755e:	d106      	bne.n	800756e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2200      	movs	r2, #0
 8007566:	2102      	movs	r1, #2
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fbb7 	bl	8006cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2103      	movs	r1, #3
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fb9b 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 800757a:	4603      	mov	r3, r0
 800757c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <HAL_ADC_ConfigChannel+0x3ce>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2103      	movs	r1, #3
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fb90 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 8007590:	4603      	mov	r3, r0
 8007592:	0e9b      	lsrs	r3, r3, #26
 8007594:	f003 021f 	and.w	r2, r3, #31
 8007598:	e017      	b.n	80075ca <HAL_ADC_ConfigChannel+0x3fe>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2103      	movs	r1, #3
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fb85 	bl	8006cb0 <LL_ADC_GetOffsetChannel>
 80075a6:	4603      	mov	r3, r0
 80075a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ac:	fa93 f3a3 	rbit	r3, r3
 80075b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80075b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80075b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80075bc:	2320      	movs	r3, #32
 80075be:	e003      	b.n	80075c8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80075c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075c2:	fab3 f383 	clz	r3, r3
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <HAL_ADC_ConfigChannel+0x416>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	0e9b      	lsrs	r3, r3, #26
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	e011      	b.n	8007606 <HAL_ADC_ConfigChannel+0x43a>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ea:	fa93 f3a3 	rbit	r3, r3
 80075ee:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80075f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075f2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80075f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80075fa:	2320      	movs	r3, #32
 80075fc:	e003      	b.n	8007606 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80075fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007600:	fab3 f383 	clz	r3, r3
 8007604:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007606:	429a      	cmp	r2, r3
 8007608:	d106      	bne.n	8007618 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2200      	movs	r2, #0
 8007610:	2103      	movs	r1, #3
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff fb62 	bl	8006cdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fc55 	bl	8006ecc <LL_ADC_IsEnabled>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 813f 	bne.w	80078a8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	461a      	mov	r2, r3
 8007638:	f7ff fbd6 	bl	8006de8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	4a8e      	ldr	r2, [pc, #568]	; (800787c <HAL_ADC_ConfigChannel+0x6b0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	f040 8130 	bne.w	80078a8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <HAL_ADC_ConfigChannel+0x4a4>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	0e9b      	lsrs	r3, r3, #26
 800765e:	3301      	adds	r3, #1
 8007660:	f003 031f 	and.w	r3, r3, #31
 8007664:	2b09      	cmp	r3, #9
 8007666:	bf94      	ite	ls
 8007668:	2301      	movls	r3, #1
 800766a:	2300      	movhi	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	e019      	b.n	80076a4 <HAL_ADC_ConfigChannel+0x4d8>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007678:	fa93 f3a3 	rbit	r3, r3
 800767c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800767e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007680:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8007688:	2320      	movs	r3, #32
 800768a:	e003      	b.n	8007694 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800768c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800768e:	fab3 f383 	clz	r3, r3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	3301      	adds	r3, #1
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	2b09      	cmp	r3, #9
 800769c:	bf94      	ite	ls
 800769e:	2301      	movls	r3, #1
 80076a0:	2300      	movhi	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d079      	beq.n	800779c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d107      	bne.n	80076c4 <HAL_ADC_ConfigChannel+0x4f8>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	0e9b      	lsrs	r3, r3, #26
 80076ba:	3301      	adds	r3, #1
 80076bc:	069b      	lsls	r3, r3, #26
 80076be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076c2:	e015      	b.n	80076f0 <HAL_ADC_ConfigChannel+0x524>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076cc:	fa93 f3a3 	rbit	r3, r3
 80076d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80076d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80076d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80076dc:	2320      	movs	r3, #32
 80076de:	e003      	b.n	80076e8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80076e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e2:	fab3 f383 	clz	r3, r3
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	3301      	adds	r3, #1
 80076ea:	069b      	lsls	r3, r3, #26
 80076ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <HAL_ADC_ConfigChannel+0x544>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	0e9b      	lsrs	r3, r3, #26
 8007702:	3301      	adds	r3, #1
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	e017      	b.n	8007740 <HAL_ADC_ConfigChannel+0x574>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007718:	fa93 f3a3 	rbit	r3, r3
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800771e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007720:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8007728:	2320      	movs	r3, #32
 800772a:	e003      	b.n	8007734 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800772c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772e:	fab3 f383 	clz	r3, r3
 8007732:	b2db      	uxtb	r3, r3
 8007734:	3301      	adds	r3, #1
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2101      	movs	r1, #1
 800773c:	fa01 f303 	lsl.w	r3, r1, r3
 8007740:	ea42 0103 	orr.w	r1, r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <HAL_ADC_ConfigChannel+0x59a>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	0e9b      	lsrs	r3, r3, #26
 8007756:	3301      	adds	r3, #1
 8007758:	f003 021f 	and.w	r2, r3, #31
 800775c:	4613      	mov	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	4413      	add	r3, r2
 8007762:	051b      	lsls	r3, r3, #20
 8007764:	e018      	b.n	8007798 <HAL_ADC_ConfigChannel+0x5cc>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776e:	fa93 f3a3 	rbit	r3, r3
 8007772:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800777e:	2320      	movs	r3, #32
 8007780:	e003      	b.n	800778a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	fab3 f383 	clz	r3, r3
 8007788:	b2db      	uxtb	r3, r3
 800778a:	3301      	adds	r3, #1
 800778c:	f003 021f 	and.w	r2, r3, #31
 8007790:	4613      	mov	r3, r2
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	4413      	add	r3, r2
 8007796:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007798:	430b      	orrs	r3, r1
 800779a:	e080      	b.n	800789e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d107      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x5ec>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	0e9b      	lsrs	r3, r3, #26
 80077ae:	3301      	adds	r3, #1
 80077b0:	069b      	lsls	r3, r3, #26
 80077b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077b6:	e015      	b.n	80077e4 <HAL_ADC_ConfigChannel+0x618>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	fa93 f3a3 	rbit	r3, r3
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80077d0:	2320      	movs	r3, #32
 80077d2:	e003      	b.n	80077dc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	fab3 f383 	clz	r3, r3
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	3301      	adds	r3, #1
 80077de:	069b      	lsls	r3, r3, #26
 80077e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <HAL_ADC_ConfigChannel+0x638>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	0e9b      	lsrs	r3, r3, #26
 80077f6:	3301      	adds	r3, #1
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2101      	movs	r1, #1
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	e017      	b.n	8007834 <HAL_ADC_ConfigChannel+0x668>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	fa93 f3a3 	rbit	r3, r3
 8007810:	61bb      	str	r3, [r7, #24]
  return result;
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800781c:	2320      	movs	r3, #32
 800781e:	e003      	b.n	8007828 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	fab3 f383 	clz	r3, r3
 8007826:	b2db      	uxtb	r3, r3
 8007828:	3301      	adds	r3, #1
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	2101      	movs	r1, #1
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	ea42 0103 	orr.w	r1, r2, r3
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10d      	bne.n	8007860 <HAL_ADC_ConfigChannel+0x694>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	0e9b      	lsrs	r3, r3, #26
 800784a:	3301      	adds	r3, #1
 800784c:	f003 021f 	and.w	r2, r3, #31
 8007850:	4613      	mov	r3, r2
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	4413      	add	r3, r2
 8007856:	3b1e      	subs	r3, #30
 8007858:	051b      	lsls	r3, r3, #20
 800785a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800785e:	e01d      	b.n	800789c <HAL_ADC_ConfigChannel+0x6d0>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	fa93 f3a3 	rbit	r3, r3
 800786c:	60fb      	str	r3, [r7, #12]
  return result;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d103      	bne.n	8007880 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8007878:	2320      	movs	r3, #32
 800787a:	e005      	b.n	8007888 <HAL_ADC_ConfigChannel+0x6bc>
 800787c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	fab3 f383 	clz	r3, r3
 8007886:	b2db      	uxtb	r3, r3
 8007888:	3301      	adds	r3, #1
 800788a:	f003 021f 	and.w	r2, r3, #31
 800788e:	4613      	mov	r3, r2
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	4413      	add	r3, r2
 8007894:	3b1e      	subs	r3, #30
 8007896:	051b      	lsls	r3, r3, #20
 8007898:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800789c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078a2:	4619      	mov	r1, r3
 80078a4:	f7ff fa74 	bl	8006d90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	4b3d      	ldr	r3, [pc, #244]	; (80079a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d06c      	beq.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078b4:	483c      	ldr	r0, [pc, #240]	; (80079a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80078b6:	f7ff f9c9 	bl	8006c4c <LL_ADC_GetCommonPathInternalCh>
 80078ba:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a3a      	ldr	r2, [pc, #232]	; (80079ac <HAL_ADC_ConfigChannel+0x7e0>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d127      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80078c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d121      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a35      	ldr	r2, [pc, #212]	; (80079b0 <HAL_ADC_ConfigChannel+0x7e4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d157      	bne.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078e6:	4619      	mov	r1, r3
 80078e8:	482f      	ldr	r0, [pc, #188]	; (80079a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80078ea:	f7ff f99c 	bl	8006c26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80078ee:	4b31      	ldr	r3, [pc, #196]	; (80079b4 <HAL_ADC_ConfigChannel+0x7e8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	099b      	lsrs	r3, r3, #6
 80078f4:	4a30      	ldr	r2, [pc, #192]	; (80079b8 <HAL_ADC_ConfigChannel+0x7ec>)
 80078f6:	fba2 2303 	umull	r2, r3, r2, r3
 80078fa:	099b      	lsrs	r3, r3, #6
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	4613      	mov	r3, r2
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007908:	e002      	b.n	8007910 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	3b01      	subs	r3, #1
 800790e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1f9      	bne.n	800790a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007916:	e03a      	b.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a27      	ldr	r2, [pc, #156]	; (80079bc <HAL_ADC_ConfigChannel+0x7f0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d113      	bne.n	800794a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10d      	bne.n	800794a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d12a      	bne.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800793c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007940:	4619      	mov	r1, r3
 8007942:	4819      	ldr	r0, [pc, #100]	; (80079a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8007944:	f7ff f96f 	bl	8006c26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007948:	e021      	b.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a1c      	ldr	r2, [pc, #112]	; (80079c0 <HAL_ADC_ConfigChannel+0x7f4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d11c      	bne.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d116      	bne.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a12      	ldr	r2, [pc, #72]	; (80079b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d111      	bne.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800796a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800796e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007972:	4619      	mov	r1, r3
 8007974:	480c      	ldr	r0, [pc, #48]	; (80079a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8007976:	f7ff f956 	bl	8006c26 <LL_ADC_SetCommonPathInternalCh>
 800797a:	e008      	b.n	800798e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007980:	f043 0220 	orr.w	r2, r3, #32
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007996:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800799a:	4618      	mov	r0, r3
 800799c:	37d8      	adds	r7, #216	; 0xd8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	80080000 	.word	0x80080000
 80079a8:	50040300 	.word	0x50040300
 80079ac:	c7520000 	.word	0xc7520000
 80079b0:	50040000 	.word	0x50040000
 80079b4:	2000002c 	.word	0x2000002c
 80079b8:	053e2d63 	.word	0x053e2d63
 80079bc:	cb840000 	.word	0xcb840000
 80079c0:	80000001 	.word	0x80000001

080079c4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	4904      	ldr	r1, [pc, #16]	; (80079e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	600b      	str	r3, [r1, #0]
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	40010400 	.word	0x40010400

080079e8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80079f0:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <LL_EXTI_DisableIT_0_31+0x24>)
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	43db      	mvns	r3, r3
 80079f8:	4904      	ldr	r1, [pc, #16]	; (8007a0c <LL_EXTI_DisableIT_0_31+0x24>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	600b      	str	r3, [r1, #0]
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40010400 	.word	0x40010400

08007a10 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4904      	ldr	r1, [pc, #16]	; (8007a30 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	604b      	str	r3, [r1, #4]

}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	40010400 	.word	0x40010400

08007a34 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007a3c:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	43db      	mvns	r3, r3
 8007a44:	4904      	ldr	r1, [pc, #16]	; (8007a58 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007a46:	4013      	ands	r3, r2
 8007a48:	604b      	str	r3, [r1, #4]
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40010400 	.word	0x40010400

08007a5c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	4904      	ldr	r1, [pc, #16]	; (8007a7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	608b      	str	r3, [r1, #8]

}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	40010400 	.word	0x40010400

08007a80 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007a88:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	4904      	ldr	r1, [pc, #16]	; (8007aa4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	608b      	str	r3, [r1, #8]

}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40010400 	.word	0x40010400

08007aa8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	4904      	ldr	r1, [pc, #16]	; (8007ac8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60cb      	str	r3, [r1, #12]
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	40010400 	.word	0x40010400

08007acc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	43db      	mvns	r3, r3
 8007adc:	4904      	ldr	r1, [pc, #16]	; (8007af0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	60cb      	str	r3, [r1, #12]
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40010400 	.word	0x40010400

08007af4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007afc:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6153      	str	r3, [r2, #20]
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	40010400 	.word	0x40010400

08007b14 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	77fb      	strb	r3, [r7, #31]
 8007b2e:	e0d1      	b.n	8007cd4 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b3e:	d102      	bne.n	8007b46 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	77fb      	strb	r3, [r7, #31]
 8007b44:	e0c6      	b.n	8007cd4 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d115      	bne.n	8007b7e <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b60:	4b5f      	ldr	r3, [pc, #380]	; (8007ce0 <HAL_COMP_Init+0x1cc>)
 8007b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b64:	4a5e      	ldr	r2, [pc, #376]	; (8007ce0 <HAL_COMP_Init+0x1cc>)
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	6613      	str	r3, [r2, #96]	; 0x60
 8007b6c:	4b5c      	ldr	r3, [pc, #368]	; (8007ce0 <HAL_COMP_Init+0x1cc>)
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fc f9c5 	bl	8003f08 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b88:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007baa:	4313      	orrs	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	4b4b      	ldr	r3, [pc, #300]	; (8007ce4 <HAL_COMP_Init+0x1d0>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6812      	ldr	r2, [r2, #0]
 8007bbc:	6979      	ldr	r1, [r7, #20]
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bca:	d106      	bne.n	8007bda <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007bcc:	4b46      	ldr	r3, [pc, #280]	; (8007ce8 <HAL_COMP_Init+0x1d4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a45      	ldr	r2, [pc, #276]	; (8007ce8 <HAL_COMP_Init+0x1d4>)
 8007bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	e005      	b.n	8007be6 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007bda:	4b43      	ldr	r3, [pc, #268]	; (8007ce8 <HAL_COMP_Init+0x1d4>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a42      	ldr	r2, [pc, #264]	; (8007ce8 <HAL_COMP_Init+0x1d4>)
 8007be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007be4:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d016      	beq.n	8007c22 <HAL_COMP_Init+0x10e>
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d113      	bne.n	8007c22 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007bfa:	4b3c      	ldr	r3, [pc, #240]	; (8007cec <HAL_COMP_Init+0x1d8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	099b      	lsrs	r3, r3, #6
 8007c00:	4a3b      	ldr	r2, [pc, #236]	; (8007cf0 <HAL_COMP_Init+0x1dc>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	099b      	lsrs	r3, r3, #6
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007c14:	e002      	b.n	8007c1c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1f9      	bne.n	8007c16 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a33      	ldr	r2, [pc, #204]	; (8007cf4 <HAL_COMP_Init+0x1e0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d102      	bne.n	8007c32 <HAL_COMP_Init+0x11e>
 8007c2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c30:	e001      	b.n	8007c36 <HAL_COMP_Init+0x122>
 8007c32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c36:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d037      	beq.n	8007cb4 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007c50:	6938      	ldr	r0, [r7, #16]
 8007c52:	f7ff ff03 	bl	8007a5c <LL_EXTI_EnableRisingTrig_0_31>
 8007c56:	e002      	b.n	8007c5e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007c58:	6938      	ldr	r0, [r7, #16]
 8007c5a:	f7ff ff11 	bl	8007a80 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007c6a:	6938      	ldr	r0, [r7, #16]
 8007c6c:	f7ff ff1c 	bl	8007aa8 <LL_EXTI_EnableFallingTrig_0_31>
 8007c70:	e002      	b.n	8007c78 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007c72:	6938      	ldr	r0, [r7, #16]
 8007c74:	f7ff ff2a 	bl	8007acc <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007c78:	6938      	ldr	r0, [r7, #16]
 8007c7a:	f7ff ff3b 	bl	8007af4 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007c8a:	6938      	ldr	r0, [r7, #16]
 8007c8c:	f7ff fec0 	bl	8007a10 <LL_EXTI_EnableEvent_0_31>
 8007c90:	e002      	b.n	8007c98 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007c92:	6938      	ldr	r0, [r7, #16]
 8007c94:	f7ff fece 	bl	8007a34 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007ca4:	6938      	ldr	r0, [r7, #16]
 8007ca6:	f7ff fe8d 	bl	80079c4 <LL_EXTI_EnableIT_0_31>
 8007caa:	e009      	b.n	8007cc0 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007cac:	6938      	ldr	r0, [r7, #16]
 8007cae:	f7ff fe9b 	bl	80079e8 <LL_EXTI_DisableIT_0_31>
 8007cb2:	e005      	b.n	8007cc0 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007cb4:	6938      	ldr	r0, [r7, #16]
 8007cb6:	f7ff febd 	bl	8007a34 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007cba:	6938      	ldr	r0, [r7, #16]
 8007cbc:	f7ff fe94 	bl	80079e8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007cd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	ff207d03 	.word	0xff207d03
 8007ce8:	40010204 	.word	0x40010204
 8007cec:	2000002c 	.word	0x2000002c
 8007cf0:	053e2d63 	.word	0x053e2d63
 8007cf4:	40010200 	.word	0x40010200

08007cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <__NVIC_SetPriorityGrouping+0x44>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d14:	4013      	ands	r3, r2
 8007d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d2a:	4a04      	ldr	r2, [pc, #16]	; (8007d3c <__NVIC_SetPriorityGrouping+0x44>)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	60d3      	str	r3, [r2, #12]
}
 8007d30:	bf00      	nop
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	e000ed00 	.word	0xe000ed00

08007d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d44:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <__NVIC_GetPriorityGrouping+0x18>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	f003 0307 	and.w	r3, r3, #7
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	e000ed00 	.word	0xe000ed00

08007d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	db0b      	blt.n	8007d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	f003 021f 	and.w	r2, r3, #31
 8007d74:	4907      	ldr	r1, [pc, #28]	; (8007d94 <__NVIC_EnableIRQ+0x38>)
 8007d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8007d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	e000e100 	.word	0xe000e100

08007d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	db0a      	blt.n	8007dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	490c      	ldr	r1, [pc, #48]	; (8007de4 <__NVIC_SetPriority+0x4c>)
 8007db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db6:	0112      	lsls	r2, r2, #4
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	440b      	add	r3, r1
 8007dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007dc0:	e00a      	b.n	8007dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	4908      	ldr	r1, [pc, #32]	; (8007de8 <__NVIC_SetPriority+0x50>)
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	3b04      	subs	r3, #4
 8007dd0:	0112      	lsls	r2, r2, #4
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	761a      	strb	r2, [r3, #24]
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	e000e100 	.word	0xe000e100
 8007de8:	e000ed00 	.word	0xe000ed00

08007dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b089      	sub	sp, #36	; 0x24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f1c3 0307 	rsb	r3, r3, #7
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	bf28      	it	cs
 8007e0a:	2304      	movcs	r3, #4
 8007e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	3304      	adds	r3, #4
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d902      	bls.n	8007e1c <NVIC_EncodePriority+0x30>
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	3b03      	subs	r3, #3
 8007e1a:	e000      	b.n	8007e1e <NVIC_EncodePriority+0x32>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	43da      	mvns	r2, r3
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	401a      	ands	r2, r3
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3e:	43d9      	mvns	r1, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e44:	4313      	orrs	r3, r2
         );
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3724      	adds	r7, #36	; 0x24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e64:	d301      	bcc.n	8007e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e66:	2301      	movs	r3, #1
 8007e68:	e00f      	b.n	8007e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e6a:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <SysTick_Config+0x40>)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e72:	210f      	movs	r1, #15
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e78:	f7ff ff8e 	bl	8007d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e7c:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <SysTick_Config+0x40>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e82:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <SysTick_Config+0x40>)
 8007e84:	2207      	movs	r2, #7
 8007e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	e000e010 	.word	0xe000e010

08007e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff ff29 	bl	8007cf8 <__NVIC_SetPriorityGrouping>
}
 8007ea6:	bf00      	nop
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b086      	sub	sp, #24
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ec0:	f7ff ff3e 	bl	8007d40 <__NVIC_GetPriorityGrouping>
 8007ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	6978      	ldr	r0, [r7, #20]
 8007ecc:	f7ff ff8e 	bl	8007dec <NVIC_EncodePriority>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7ff ff5d 	bl	8007d98 <__NVIC_SetPriority>
}
 8007ede:	bf00      	nop
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	4603      	mov	r3, r0
 8007eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff ff31 	bl	8007d5c <__NVIC_EnableIRQ>
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff ffa2 	bl	8007e54 <SysTick_Config>
 8007f10:	4603      	mov	r3, r0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b086      	sub	sp, #24
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <HAL_DMA_Start_IT+0x20>
 8007f36:	2302      	movs	r3, #2
 8007f38:	e066      	b.n	8008008 <HAL_DMA_Start_IT+0xee>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d155      	bne.n	8007ffa <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0201 	bic.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 f84c 	bl	8008010 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 020e 	orr.w	r2, r2, #14
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	e00f      	b.n	8007fb2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0204 	bic.w	r2, r2, #4
 8007fa0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 020a 	orr.w	r2, r2, #10
 8007fb0:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fce:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fe6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0201 	orr.w	r2, r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	e005      	b.n	8008006 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008002:	2302      	movs	r3, #2
 8008004:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008026:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008038:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f003 021c 	and.w	r2, r3, #28
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	2101      	movs	r1, #1
 8008048:	fa01 f202 	lsl.w	r2, r1, r2
 800804c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	2b10      	cmp	r3, #16
 800805c:	d108      	bne.n	8008070 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800806e:	e007      	b.n	8008080 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	60da      	str	r2, [r3, #12]
}
 8008080:	bf00      	nop
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800809a:	e166      	b.n	800836a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	2101      	movs	r1, #1
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	fa01 f303 	lsl.w	r3, r1, r3
 80080a8:	4013      	ands	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 8158 	beq.w	8008364 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d005      	beq.n	80080cc <HAL_GPIO_Init+0x40>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f003 0303 	and.w	r3, r3, #3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d130      	bne.n	800812e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	2203      	movs	r2, #3
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	43db      	mvns	r3, r3
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4013      	ands	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	fa02 f303 	lsl.w	r3, r2, r3
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008102:	2201      	movs	r2, #1
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	fa02 f303 	lsl.w	r3, r2, r3
 800810a:	43db      	mvns	r3, r3
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4013      	ands	r3, r2
 8008110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	091b      	lsrs	r3, r3, #4
 8008118:	f003 0201 	and.w	r2, r3, #1
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	fa02 f303 	lsl.w	r3, r2, r3
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	2b03      	cmp	r3, #3
 8008138:	d017      	beq.n	800816a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	2203      	movs	r2, #3
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43db      	mvns	r3, r3
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4013      	ands	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	fa02 f303 	lsl.w	r3, r2, r3
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4313      	orrs	r3, r2
 8008162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d123      	bne.n	80081be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	08da      	lsrs	r2, r3, #3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3208      	adds	r2, #8
 800817e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	220f      	movs	r2, #15
 800818e:	fa02 f303 	lsl.w	r3, r2, r3
 8008192:	43db      	mvns	r3, r3
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4013      	ands	r3, r2
 8008198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	691a      	ldr	r2, [r3, #16]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	08da      	lsrs	r2, r3, #3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3208      	adds	r2, #8
 80081b8:	6939      	ldr	r1, [r7, #16]
 80081ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	2203      	movs	r2, #3
 80081ca:	fa02 f303 	lsl.w	r3, r2, r3
 80081ce:	43db      	mvns	r3, r3
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4013      	ands	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f003 0203 	and.w	r2, r3, #3
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	fa02 f303 	lsl.w	r3, r2, r3
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 80b2 	beq.w	8008364 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008200:	4b61      	ldr	r3, [pc, #388]	; (8008388 <HAL_GPIO_Init+0x2fc>)
 8008202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008204:	4a60      	ldr	r2, [pc, #384]	; (8008388 <HAL_GPIO_Init+0x2fc>)
 8008206:	f043 0301 	orr.w	r3, r3, #1
 800820a:	6613      	str	r3, [r2, #96]	; 0x60
 800820c:	4b5e      	ldr	r3, [pc, #376]	; (8008388 <HAL_GPIO_Init+0x2fc>)
 800820e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	60bb      	str	r3, [r7, #8]
 8008216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008218:	4a5c      	ldr	r2, [pc, #368]	; (800838c <HAL_GPIO_Init+0x300>)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	089b      	lsrs	r3, r3, #2
 800821e:	3302      	adds	r3, #2
 8008220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f003 0303 	and.w	r3, r3, #3
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	220f      	movs	r2, #15
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	43db      	mvns	r3, r3
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	4013      	ands	r3, r2
 800823a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008242:	d02b      	beq.n	800829c <HAL_GPIO_Init+0x210>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a52      	ldr	r2, [pc, #328]	; (8008390 <HAL_GPIO_Init+0x304>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d025      	beq.n	8008298 <HAL_GPIO_Init+0x20c>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a51      	ldr	r2, [pc, #324]	; (8008394 <HAL_GPIO_Init+0x308>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d01f      	beq.n	8008294 <HAL_GPIO_Init+0x208>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a50      	ldr	r2, [pc, #320]	; (8008398 <HAL_GPIO_Init+0x30c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d019      	beq.n	8008290 <HAL_GPIO_Init+0x204>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a4f      	ldr	r2, [pc, #316]	; (800839c <HAL_GPIO_Init+0x310>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d013      	beq.n	800828c <HAL_GPIO_Init+0x200>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a4e      	ldr	r2, [pc, #312]	; (80083a0 <HAL_GPIO_Init+0x314>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00d      	beq.n	8008288 <HAL_GPIO_Init+0x1fc>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a4d      	ldr	r2, [pc, #308]	; (80083a4 <HAL_GPIO_Init+0x318>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d007      	beq.n	8008284 <HAL_GPIO_Init+0x1f8>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a4c      	ldr	r2, [pc, #304]	; (80083a8 <HAL_GPIO_Init+0x31c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d101      	bne.n	8008280 <HAL_GPIO_Init+0x1f4>
 800827c:	2307      	movs	r3, #7
 800827e:	e00e      	b.n	800829e <HAL_GPIO_Init+0x212>
 8008280:	2308      	movs	r3, #8
 8008282:	e00c      	b.n	800829e <HAL_GPIO_Init+0x212>
 8008284:	2306      	movs	r3, #6
 8008286:	e00a      	b.n	800829e <HAL_GPIO_Init+0x212>
 8008288:	2305      	movs	r3, #5
 800828a:	e008      	b.n	800829e <HAL_GPIO_Init+0x212>
 800828c:	2304      	movs	r3, #4
 800828e:	e006      	b.n	800829e <HAL_GPIO_Init+0x212>
 8008290:	2303      	movs	r3, #3
 8008292:	e004      	b.n	800829e <HAL_GPIO_Init+0x212>
 8008294:	2302      	movs	r3, #2
 8008296:	e002      	b.n	800829e <HAL_GPIO_Init+0x212>
 8008298:	2301      	movs	r3, #1
 800829a:	e000      	b.n	800829e <HAL_GPIO_Init+0x212>
 800829c:	2300      	movs	r3, #0
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	f002 0203 	and.w	r2, r2, #3
 80082a4:	0092      	lsls	r2, r2, #2
 80082a6:	4093      	lsls	r3, r2
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80082ae:	4937      	ldr	r1, [pc, #220]	; (800838c <HAL_GPIO_Init+0x300>)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	089b      	lsrs	r3, r3, #2
 80082b4:	3302      	adds	r3, #2
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082bc:	4b3b      	ldr	r3, [pc, #236]	; (80083ac <HAL_GPIO_Init+0x320>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	43db      	mvns	r3, r3
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4013      	ands	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80082e0:	4a32      	ldr	r2, [pc, #200]	; (80083ac <HAL_GPIO_Init+0x320>)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80082e6:	4b31      	ldr	r3, [pc, #196]	; (80083ac <HAL_GPIO_Init+0x320>)
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	43db      	mvns	r3, r3
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	4013      	ands	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800830a:	4a28      	ldr	r2, [pc, #160]	; (80083ac <HAL_GPIO_Init+0x320>)
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008310:	4b26      	ldr	r3, [pc, #152]	; (80083ac <HAL_GPIO_Init+0x320>)
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	43db      	mvns	r3, r3
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	4013      	ands	r3, r2
 800831e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008334:	4a1d      	ldr	r2, [pc, #116]	; (80083ac <HAL_GPIO_Init+0x320>)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800833a:	4b1c      	ldr	r3, [pc, #112]	; (80083ac <HAL_GPIO_Init+0x320>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	43db      	mvns	r3, r3
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	4013      	ands	r3, r2
 8008348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800835e:	4a13      	ldr	r2, [pc, #76]	; (80083ac <HAL_GPIO_Init+0x320>)
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	3301      	adds	r3, #1
 8008368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	fa22 f303 	lsr.w	r3, r2, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	f47f ae91 	bne.w	800809c <HAL_GPIO_Init+0x10>
  }
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	40021000 	.word	0x40021000
 800838c:	40010000 	.word	0x40010000
 8008390:	48000400 	.word	0x48000400
 8008394:	48000800 	.word	0x48000800
 8008398:	48000c00 	.word	0x48000c00
 800839c:	48001000 	.word	0x48001000
 80083a0:	48001400 	.word	0x48001400
 80083a4:	48001800 	.word	0x48001800
 80083a8:	48001c00 	.word	0x48001c00
 80083ac:	40010400 	.word	0x40010400

080083b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	887b      	ldrh	r3, [r7, #2]
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
 80083cc:	e001      	b.n	80083d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	807b      	strh	r3, [r7, #2]
 80083ec:	4613      	mov	r3, r2
 80083ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083f0:	787b      	ldrb	r3, [r7, #1]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80083f6:	887a      	ldrh	r2, [r7, #2]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80083fc:	e002      	b.n	8008404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80083fe:	887a      	ldrh	r2, [r7, #2]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800841a:	4b08      	ldr	r3, [pc, #32]	; (800843c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800841c:	695a      	ldr	r2, [r3, #20]
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	4013      	ands	r3, r2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d006      	beq.n	8008434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008426:	4a05      	ldr	r2, [pc, #20]	; (800843c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f806 	bl	8008440 <HAL_GPIO_EXTI_Callback>
  }
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	40010400 	.word	0x40010400

08008440 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e08d      	b.n	8008584 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d106      	bne.n	8008482 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7fb fd97 	bl	8003fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2224      	movs	r2, #36	; 0x24
 8008486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d107      	bne.n	80084d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084cc:	609a      	str	r2, [r3, #8]
 80084ce:	e006      	b.n	80084de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d108      	bne.n	80084f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f4:	605a      	str	r2, [r3, #4]
 80084f6:	e007      	b.n	8008508 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008506:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800852a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	69d9      	ldr	r1, [r3, #28]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1a      	ldr	r2, [r3, #32]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0201 	orr.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af02      	add	r7, sp, #8
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	461a      	mov	r2, r3
 8008598:	460b      	mov	r3, r1
 800859a:	817b      	strh	r3, [r7, #10]
 800859c:	4613      	mov	r3, r2
 800859e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	f040 80fd 	bne.w	80087a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_I2C_Master_Transmit+0x30>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e0f6      	b.n	80087aa <HAL_I2C_Master_Transmit+0x21e>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085c4:	f7fe faec 	bl	8006ba0 <HAL_GetTick>
 80085c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	2319      	movs	r3, #25
 80085d0:	2201      	movs	r2, #1
 80085d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 fa0a 	bl	80089f0 <I2C_WaitOnFlagUntilTimeout>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e0e1      	b.n	80087aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2221      	movs	r2, #33	; 0x21
 80085ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2210      	movs	r2, #16
 80085f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	893a      	ldrh	r2, [r7, #8]
 8008606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008612:	b29b      	uxth	r3, r3
 8008614:	2bff      	cmp	r3, #255	; 0xff
 8008616:	d906      	bls.n	8008626 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	22ff      	movs	r2, #255	; 0xff
 800861c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800861e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e007      	b.n	8008636 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862a:	b29a      	uxth	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008630:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008634:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863a:	2b00      	cmp	r3, #0
 800863c:	d024      	beq.n	8008688 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	781a      	ldrb	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008672:	b2db      	uxtb	r3, r3
 8008674:	3301      	adds	r3, #1
 8008676:	b2da      	uxtb	r2, r3
 8008678:	8979      	ldrh	r1, [r7, #10]
 800867a:	4b4e      	ldr	r3, [pc, #312]	; (80087b4 <HAL_I2C_Master_Transmit+0x228>)
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fbf1 	bl	8008e68 <I2C_TransferConfig>
 8008686:	e066      	b.n	8008756 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868c:	b2da      	uxtb	r2, r3
 800868e:	8979      	ldrh	r1, [r7, #10]
 8008690:	4b48      	ldr	r3, [pc, #288]	; (80087b4 <HAL_I2C_Master_Transmit+0x228>)
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 fbe6 	bl	8008e68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800869c:	e05b      	b.n	8008756 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	6a39      	ldr	r1, [r7, #32]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 f9f3 	bl	8008a8e <I2C_WaitOnTXISFlagUntilTimeout>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e07b      	b.n	80087aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	781a      	ldrb	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d034      	beq.n	8008756 <HAL_I2C_Master_Transmit+0x1ca>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d130      	bne.n	8008756 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	2200      	movs	r2, #0
 80086fc:	2180      	movs	r1, #128	; 0x80
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f976 	bl	80089f0 <I2C_WaitOnFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e04d      	b.n	80087aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008712:	b29b      	uxth	r3, r3
 8008714:	2bff      	cmp	r3, #255	; 0xff
 8008716:	d90e      	bls.n	8008736 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	22ff      	movs	r2, #255	; 0xff
 800871c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008722:	b2da      	uxtb	r2, r3
 8008724:	8979      	ldrh	r1, [r7, #10]
 8008726:	2300      	movs	r3, #0
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 fb9a 	bl	8008e68 <I2C_TransferConfig>
 8008734:	e00f      	b.n	8008756 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873a:	b29a      	uxth	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008744:	b2da      	uxtb	r2, r3
 8008746:	8979      	ldrh	r1, [r7, #10]
 8008748:	2300      	movs	r3, #0
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 fb89 	bl	8008e68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875a:	b29b      	uxth	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d19e      	bne.n	800869e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	6a39      	ldr	r1, [r7, #32]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f9d9 	bl	8008b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e01a      	b.n	80087aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2220      	movs	r2, #32
 800877a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6859      	ldr	r1, [r3, #4]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <HAL_I2C_Master_Transmit+0x22c>)
 8008788:	400b      	ands	r3, r1
 800878a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2220      	movs	r2, #32
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e000      	b.n	80087aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80087a8:	2302      	movs	r3, #2
  }
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	80002000 	.word	0x80002000
 80087b8:	fe00e800 	.word	0xfe00e800

080087bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	607a      	str	r2, [r7, #4]
 80087c6:	461a      	mov	r2, r3
 80087c8:	460b      	mov	r3, r1
 80087ca:	817b      	strh	r3, [r7, #10]
 80087cc:	4613      	mov	r3, r2
 80087ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b20      	cmp	r3, #32
 80087da:	f040 80db 	bne.w	8008994 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_I2C_Master_Receive+0x30>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e0d4      	b.n	8008996 <HAL_I2C_Master_Receive+0x1da>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087f4:	f7fe f9d4 	bl	8006ba0 <HAL_GetTick>
 80087f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	2319      	movs	r3, #25
 8008800:	2201      	movs	r2, #1
 8008802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 f8f2 	bl	80089f0 <I2C_WaitOnFlagUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e0bf      	b.n	8008996 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2222      	movs	r2, #34	; 0x22
 800881a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2210      	movs	r2, #16
 8008822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	893a      	ldrh	r2, [r7, #8]
 8008836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008842:	b29b      	uxth	r3, r3
 8008844:	2bff      	cmp	r3, #255	; 0xff
 8008846:	d90e      	bls.n	8008866 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	22ff      	movs	r2, #255	; 0xff
 800884c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008852:	b2da      	uxtb	r2, r3
 8008854:	8979      	ldrh	r1, [r7, #10]
 8008856:	4b52      	ldr	r3, [pc, #328]	; (80089a0 <HAL_I2C_Master_Receive+0x1e4>)
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 fb02 	bl	8008e68 <I2C_TransferConfig>
 8008864:	e06d      	b.n	8008942 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008874:	b2da      	uxtb	r2, r3
 8008876:	8979      	ldrh	r1, [r7, #10]
 8008878:	4b49      	ldr	r3, [pc, #292]	; (80089a0 <HAL_I2C_Master_Receive+0x1e4>)
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 faf1 	bl	8008e68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008886:	e05c      	b.n	8008942 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	6a39      	ldr	r1, [r7, #32]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f989 	bl	8008ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e07c      	b.n	8008996 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d034      	beq.n	8008942 <HAL_I2C_Master_Receive+0x186>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d130      	bne.n	8008942 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	2200      	movs	r2, #0
 80088e8:	2180      	movs	r1, #128	; 0x80
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f880 	bl	80089f0 <I2C_WaitOnFlagUntilTimeout>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e04d      	b.n	8008996 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2bff      	cmp	r3, #255	; 0xff
 8008902:	d90e      	bls.n	8008922 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	22ff      	movs	r2, #255	; 0xff
 8008908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800890e:	b2da      	uxtb	r2, r3
 8008910:	8979      	ldrh	r1, [r7, #10]
 8008912:	2300      	movs	r3, #0
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 faa4 	bl	8008e68 <I2C_TransferConfig>
 8008920:	e00f      	b.n	8008942 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008930:	b2da      	uxtb	r2, r3
 8008932:	8979      	ldrh	r1, [r7, #10]
 8008934:	2300      	movs	r3, #0
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fa93 	bl	8008e68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d19d      	bne.n	8008888 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	6a39      	ldr	r1, [r7, #32]
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 f8e3 	bl	8008b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e01a      	b.n	8008996 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2220      	movs	r2, #32
 8008966:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6859      	ldr	r1, [r3, #4]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	4b0c      	ldr	r3, [pc, #48]	; (80089a4 <HAL_I2C_Master_Receive+0x1e8>)
 8008974:	400b      	ands	r3, r1
 8008976:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	e000      	b.n	8008996 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008994:	2302      	movs	r3, #2
  }
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	80002400 	.word	0x80002400
 80089a4:	fe00e800 	.word	0xfe00e800

080089a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d103      	bne.n	80089c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2200      	movs	r2, #0
 80089c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d007      	beq.n	80089e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0201 	orr.w	r2, r2, #1
 80089e2:	619a      	str	r2, [r3, #24]
  }
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	4613      	mov	r3, r2
 80089fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a00:	e031      	b.n	8008a66 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a08:	d02d      	beq.n	8008a66 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a0a:	f7fe f8c9 	bl	8006ba0 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d302      	bcc.n	8008a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d122      	bne.n	8008a66 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	bf0c      	ite	eq
 8008a30:	2301      	moveq	r3, #1
 8008a32:	2300      	movne	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	461a      	mov	r2, r3
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d113      	bne.n	8008a66 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a42:	f043 0220 	orr.w	r2, r3, #32
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e00f      	b.n	8008a86 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699a      	ldr	r2, [r3, #24]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	bf0c      	ite	eq
 8008a76:	2301      	moveq	r3, #1
 8008a78:	2300      	movne	r3, #0
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d0be      	beq.n	8008a02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a9a:	e033      	b.n	8008b04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 f901 	bl	8008ca8 <I2C_IsErrorOccurred>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e031      	b.n	8008b14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab6:	d025      	beq.n	8008b04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab8:	f7fe f872 	bl	8006ba0 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d302      	bcc.n	8008ace <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d11a      	bne.n	8008b04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d013      	beq.n	8008b04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae0:	f043 0220 	orr.w	r2, r3, #32
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e007      	b.n	8008b14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d1c4      	bne.n	8008a9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b28:	e02f      	b.n	8008b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 f8ba 	bl	8008ca8 <I2C_IsErrorOccurred>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e02d      	b.n	8008b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b3e:	f7fe f82f 	bl	8006ba0 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d302      	bcc.n	8008b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d11a      	bne.n	8008b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b20      	cmp	r3, #32
 8008b60:	d013      	beq.n	8008b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b66:	f043 0220 	orr.w	r2, r3, #32
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e007      	b.n	8008b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b20      	cmp	r3, #32
 8008b96:	d1c8      	bne.n	8008b2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bb0:	e06b      	b.n	8008c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f876 	bl	8008ca8 <I2C_IsErrorOccurred>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e069      	b.n	8008c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	f003 0320 	and.w	r3, r3, #32
 8008bd0:	2b20      	cmp	r3, #32
 8008bd2:	d138      	bne.n	8008c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d105      	bne.n	8008bee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e055      	b.n	8008c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d107      	bne.n	8008c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2210      	movs	r2, #16
 8008c02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2204      	movs	r2, #4
 8008c08:	645a      	str	r2, [r3, #68]	; 0x44
 8008c0a:	e002      	b.n	8008c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2220      	movs	r2, #32
 8008c18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6859      	ldr	r1, [r3, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	4b1f      	ldr	r3, [pc, #124]	; (8008ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008c26:	400b      	ands	r3, r1
 8008c28:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e029      	b.n	8008c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c46:	f7fd ffab 	bl	8006ba0 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d302      	bcc.n	8008c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d116      	bne.n	8008c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d00f      	beq.n	8008c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	f043 0220 	orr.w	r2, r3, #32
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e007      	b.n	8008c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d18c      	bne.n	8008bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	fe00e800 	.word	0xfe00e800

08008ca8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	; 0x28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	f003 0310 	and.w	r3, r3, #16
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d068      	beq.n	8008da6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2210      	movs	r2, #16
 8008cda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cdc:	e049      	b.n	8008d72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ce4:	d045      	beq.n	8008d72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ce6:	f7fd ff5b 	bl	8006ba0 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d302      	bcc.n	8008cfc <I2C_IsErrorOccurred+0x54>
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d13a      	bne.n	8008d72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d1e:	d121      	bne.n	8008d64 <I2C_IsErrorOccurred+0xbc>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d26:	d01d      	beq.n	8008d64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d28:	7cfb      	ldrb	r3, [r7, #19]
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d01a      	beq.n	8008d64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008d3e:	f7fd ff2f 	bl	8006ba0 <HAL_GetTick>
 8008d42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d44:	e00e      	b.n	8008d64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008d46:	f7fd ff2b 	bl	8006ba0 <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b19      	cmp	r3, #25
 8008d52:	d907      	bls.n	8008d64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	f043 0320 	orr.w	r3, r3, #32
 8008d5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008d62:	e006      	b.n	8008d72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	d1e9      	bne.n	8008d46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	f003 0320 	and.w	r3, r3, #32
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d003      	beq.n	8008d88 <I2C_IsErrorOccurred+0xe0>
 8008d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0aa      	beq.n	8008cde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2220      	movs	r2, #32
 8008d96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	f043 0304 	orr.w	r3, r3, #4
 8008d9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00b      	beq.n	8008df2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f043 0308 	orr.w	r3, r3, #8
 8008de0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008dea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	f043 0302 	orr.w	r3, r3, #2
 8008e02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01c      	beq.n	8008e56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff fdc3 	bl	80089a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6859      	ldr	r1, [r3, #4]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <I2C_IsErrorOccurred+0x1bc>)
 8008e2e:	400b      	ands	r3, r1
 8008e30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3728      	adds	r7, #40	; 0x28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	fe00e800 	.word	0xfe00e800

08008e68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	817b      	strh	r3, [r7, #10]
 8008e76:	4613      	mov	r3, r2
 8008e78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e7a:	897b      	ldrh	r3, [r7, #10]
 8008e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e80:	7a7b      	ldrb	r3, [r7, #9]
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	0d5b      	lsrs	r3, r3, #21
 8008ea2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008ea6:	4b08      	ldr	r3, [pc, #32]	; (8008ec8 <I2C_TransferConfig+0x60>)
 8008ea8:	430b      	orrs	r3, r1
 8008eaa:	43db      	mvns	r3, r3
 8008eac:	ea02 0103 	and.w	r1, r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	03ff63ff 	.word	0x03ff63ff

08008ecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b20      	cmp	r3, #32
 8008ee0:	d138      	bne.n	8008f54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e032      	b.n	8008f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2224      	movs	r2, #36	; 0x24
 8008efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6819      	ldr	r1, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0201 	orr.w	r2, r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	e000      	b.n	8008f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f54:	2302      	movs	r3, #2
  }
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d139      	bne.n	8008fec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d101      	bne.n	8008f86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e033      	b.n	8008fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2224      	movs	r2, #36	; 0x24
 8008f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0201 	bic.w	r2, r2, #1
 8008fa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008fb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	021b      	lsls	r3, r3, #8
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
	...

08008ffc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a04      	ldr	r2, [pc, #16]	; (8009018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800900a:	6013      	str	r3, [r2, #0]
}
 800900c:	bf00      	nop
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	40007000 	.word	0x40007000

0800901c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009020:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800902c:	d102      	bne.n	8009034 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800902e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009032:	e00b      	b.n	800904c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8009034:	4b08      	ldr	r3, [pc, #32]	; (8009058 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800903a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009042:	d102      	bne.n	800904a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8009044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009048:	e000      	b.n	800904c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800904a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800904c:	4618      	mov	r0, r3
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	40007000 	.word	0x40007000

0800905c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d141      	bne.n	80090ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800906a:	4b4b      	ldr	r3, [pc, #300]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009076:	d131      	bne.n	80090dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009078:	4b47      	ldr	r3, [pc, #284]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800907a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800907e:	4a46      	ldr	r2, [pc, #280]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009084:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009088:	4b43      	ldr	r3, [pc, #268]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009090:	4a41      	ldr	r2, [pc, #260]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009096:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009098:	4b40      	ldr	r3, [pc, #256]	; (800919c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2232      	movs	r2, #50	; 0x32
 800909e:	fb02 f303 	mul.w	r3, r2, r3
 80090a2:	4a3f      	ldr	r2, [pc, #252]	; (80091a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80090a4:	fba2 2303 	umull	r2, r3, r2, r3
 80090a8:	0c9b      	lsrs	r3, r3, #18
 80090aa:	3301      	adds	r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090ae:	e002      	b.n	80090b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090b6:	4b38      	ldr	r3, [pc, #224]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c2:	d102      	bne.n	80090ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1f2      	bne.n	80090b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090ca:	4b33      	ldr	r3, [pc, #204]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090d6:	d158      	bne.n	800918a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e057      	b.n	800918c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80090dc:	4b2e      	ldr	r3, [pc, #184]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090e2:	4a2d      	ldr	r2, [pc, #180]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80090ec:	e04d      	b.n	800918a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f4:	d141      	bne.n	800917a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80090f6:	4b28      	ldr	r3, [pc, #160]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009102:	d131      	bne.n	8009168 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009104:	4b24      	ldr	r3, [pc, #144]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800910a:	4a23      	ldr	r2, [pc, #140]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800910c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009114:	4b20      	ldr	r3, [pc, #128]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800911c:	4a1e      	ldr	r2, [pc, #120]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800911e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009122:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009124:	4b1d      	ldr	r3, [pc, #116]	; (800919c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2232      	movs	r2, #50	; 0x32
 800912a:	fb02 f303 	mul.w	r3, r2, r3
 800912e:	4a1c      	ldr	r2, [pc, #112]	; (80091a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009130:	fba2 2303 	umull	r2, r3, r2, r3
 8009134:	0c9b      	lsrs	r3, r3, #18
 8009136:	3301      	adds	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800913a:	e002      	b.n	8009142 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3b01      	subs	r3, #1
 8009140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009142:	4b15      	ldr	r3, [pc, #84]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800914a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800914e:	d102      	bne.n	8009156 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f2      	bne.n	800913c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009156:	4b10      	ldr	r3, [pc, #64]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800915e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009162:	d112      	bne.n	800918a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e011      	b.n	800918c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009168:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800916a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800916e:	4a0a      	ldr	r2, [pc, #40]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009178:	e007      	b.n	800918a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800917a:	4b07      	ldr	r3, [pc, #28]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009182:	4a05      	ldr	r2, [pc, #20]	; (8009198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009184:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009188:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	40007000 	.word	0x40007000
 800919c:	2000002c 	.word	0x2000002c
 80091a0:	431bde83 	.word	0x431bde83

080091a4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80091a8:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	4a04      	ldr	r2, [pc, #16]	; (80091c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80091ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091b2:	6053      	str	r3, [r2, #4]
}
 80091b4:	bf00      	nop
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	40007000 	.word	0x40007000

080091c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d102      	bne.n	80091d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	f000 bc08 	b.w	80099e8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091d8:	4b96      	ldr	r3, [pc, #600]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f003 030c 	and.w	r3, r3, #12
 80091e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80091e2:	4b94      	ldr	r3, [pc, #592]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0310 	and.w	r3, r3, #16
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 80e4 	beq.w	80093c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d007      	beq.n	8009210 <HAL_RCC_OscConfig+0x4c>
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	2b0c      	cmp	r3, #12
 8009204:	f040 808b 	bne.w	800931e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2b01      	cmp	r3, #1
 800920c:	f040 8087 	bne.w	800931e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009210:	4b88      	ldr	r3, [pc, #544]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <HAL_RCC_OscConfig+0x64>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e3df      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a1a      	ldr	r2, [r3, #32]
 800922c:	4b81      	ldr	r3, [pc, #516]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <HAL_RCC_OscConfig+0x7e>
 8009238:	4b7e      	ldr	r3, [pc, #504]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009240:	e005      	b.n	800924e <HAL_RCC_OscConfig+0x8a>
 8009242:	4b7c      	ldr	r3, [pc, #496]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009248:	091b      	lsrs	r3, r3, #4
 800924a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800924e:	4293      	cmp	r3, r2
 8009250:	d223      	bcs.n	800929a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	4618      	mov	r0, r3
 8009258:	f000 fdcc 	bl	8009df4 <RCC_SetFlashLatencyFromMSIRange>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e3c0      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009266:	4b73      	ldr	r3, [pc, #460]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a72      	ldr	r2, [pc, #456]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800926c:	f043 0308 	orr.w	r3, r3, #8
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	4b70      	ldr	r3, [pc, #448]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	496d      	ldr	r1, [pc, #436]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009280:	4313      	orrs	r3, r2
 8009282:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009284:	4b6b      	ldr	r3, [pc, #428]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	4968      	ldr	r1, [pc, #416]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009294:	4313      	orrs	r3, r2
 8009296:	604b      	str	r3, [r1, #4]
 8009298:	e025      	b.n	80092e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800929a:	4b66      	ldr	r3, [pc, #408]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a65      	ldr	r2, [pc, #404]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80092a0:	f043 0308 	orr.w	r3, r3, #8
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	4b63      	ldr	r3, [pc, #396]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	4960      	ldr	r1, [pc, #384]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80092b8:	4b5e      	ldr	r3, [pc, #376]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	495b      	ldr	r1, [pc, #364]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80092c8:	4313      	orrs	r3, r2
 80092ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d109      	bne.n	80092e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fd8c 	bl	8009df4 <RCC_SetFlashLatencyFromMSIRange>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e380      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80092e6:	f000 fcc1 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 80092ea:	4602      	mov	r2, r0
 80092ec:	4b51      	ldr	r3, [pc, #324]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	091b      	lsrs	r3, r3, #4
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	4950      	ldr	r1, [pc, #320]	; (8009438 <HAL_RCC_OscConfig+0x274>)
 80092f8:	5ccb      	ldrb	r3, [r1, r3]
 80092fa:	f003 031f 	and.w	r3, r3, #31
 80092fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009302:	4a4e      	ldr	r2, [pc, #312]	; (800943c <HAL_RCC_OscConfig+0x278>)
 8009304:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009306:	4b4e      	ldr	r3, [pc, #312]	; (8009440 <HAL_RCC_OscConfig+0x27c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4618      	mov	r0, r3
 800930c:	f7fd fbf8 	bl	8006b00 <HAL_InitTick>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d052      	beq.n	80093c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	e364      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d032      	beq.n	800938c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009326:	4b43      	ldr	r3, [pc, #268]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a42      	ldr	r2, [pc, #264]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800932c:	f043 0301 	orr.w	r3, r3, #1
 8009330:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009332:	f7fd fc35 	bl	8006ba0 <HAL_GetTick>
 8009336:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009338:	e008      	b.n	800934c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800933a:	f7fd fc31 	bl	8006ba0 <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d901      	bls.n	800934c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e34d      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800934c:	4b39      	ldr	r3, [pc, #228]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0f0      	beq.n	800933a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009358:	4b36      	ldr	r3, [pc, #216]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a35      	ldr	r2, [pc, #212]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800935e:	f043 0308 	orr.w	r3, r3, #8
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	4b33      	ldr	r3, [pc, #204]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	4930      	ldr	r1, [pc, #192]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009372:	4313      	orrs	r3, r2
 8009374:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009376:	4b2f      	ldr	r3, [pc, #188]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	492b      	ldr	r1, [pc, #172]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009386:	4313      	orrs	r3, r2
 8009388:	604b      	str	r3, [r1, #4]
 800938a:	e01a      	b.n	80093c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800938c:	4b29      	ldr	r3, [pc, #164]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a28      	ldr	r2, [pc, #160]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009392:	f023 0301 	bic.w	r3, r3, #1
 8009396:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009398:	f7fd fc02 	bl	8006ba0 <HAL_GetTick>
 800939c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800939e:	e008      	b.n	80093b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80093a0:	f7fd fbfe 	bl	8006ba0 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e31a      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80093b2:	4b20      	ldr	r3, [pc, #128]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f0      	bne.n	80093a0 <HAL_RCC_OscConfig+0x1dc>
 80093be:	e000      	b.n	80093c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80093c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d073      	beq.n	80094b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d005      	beq.n	80093e0 <HAL_RCC_OscConfig+0x21c>
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	2b0c      	cmp	r3, #12
 80093d8:	d10e      	bne.n	80093f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d10b      	bne.n	80093f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093e0:	4b14      	ldr	r3, [pc, #80]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d063      	beq.n	80094b4 <HAL_RCC_OscConfig+0x2f0>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d15f      	bne.n	80094b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e2f7      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009400:	d106      	bne.n	8009410 <HAL_RCC_OscConfig+0x24c>
 8009402:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a0b      	ldr	r2, [pc, #44]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	e025      	b.n	800945c <HAL_RCC_OscConfig+0x298>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009418:	d114      	bne.n	8009444 <HAL_RCC_OscConfig+0x280>
 800941a:	4b06      	ldr	r3, [pc, #24]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a05      	ldr	r2, [pc, #20]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	4b03      	ldr	r3, [pc, #12]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a02      	ldr	r2, [pc, #8]	; (8009434 <HAL_RCC_OscConfig+0x270>)
 800942c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	e013      	b.n	800945c <HAL_RCC_OscConfig+0x298>
 8009434:	40021000 	.word	0x40021000
 8009438:	08018200 	.word	0x08018200
 800943c:	2000002c 	.word	0x2000002c
 8009440:	20000030 	.word	0x20000030
 8009444:	4ba0      	ldr	r3, [pc, #640]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a9f      	ldr	r2, [pc, #636]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800944a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	4b9d      	ldr	r3, [pc, #628]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a9c      	ldr	r2, [pc, #624]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800945a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d013      	beq.n	800948c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009464:	f7fd fb9c 	bl	8006ba0 <HAL_GetTick>
 8009468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800946a:	e008      	b.n	800947e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800946c:	f7fd fb98 	bl	8006ba0 <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b64      	cmp	r3, #100	; 0x64
 8009478:	d901      	bls.n	800947e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e2b4      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800947e:	4b92      	ldr	r3, [pc, #584]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0f0      	beq.n	800946c <HAL_RCC_OscConfig+0x2a8>
 800948a:	e014      	b.n	80094b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948c:	f7fd fb88 	bl	8006ba0 <HAL_GetTick>
 8009490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009492:	e008      	b.n	80094a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009494:	f7fd fb84 	bl	8006ba0 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b64      	cmp	r3, #100	; 0x64
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e2a0      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80094a6:	4b88      	ldr	r3, [pc, #544]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1f0      	bne.n	8009494 <HAL_RCC_OscConfig+0x2d0>
 80094b2:	e000      	b.n	80094b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d060      	beq.n	8009584 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d005      	beq.n	80094d4 <HAL_RCC_OscConfig+0x310>
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	2b0c      	cmp	r3, #12
 80094cc:	d119      	bne.n	8009502 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d116      	bne.n	8009502 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094d4:	4b7c      	ldr	r3, [pc, #496]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <HAL_RCC_OscConfig+0x328>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e27d      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ec:	4b76      	ldr	r3, [pc, #472]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	061b      	lsls	r3, r3, #24
 80094fa:	4973      	ldr	r1, [pc, #460]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009500:	e040      	b.n	8009584 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d023      	beq.n	8009552 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800950a:	4b6f      	ldr	r3, [pc, #444]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a6e      	ldr	r2, [pc, #440]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009516:	f7fd fb43 	bl	8006ba0 <HAL_GetTick>
 800951a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800951c:	e008      	b.n	8009530 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800951e:	f7fd fb3f 	bl	8006ba0 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2b02      	cmp	r3, #2
 800952a:	d901      	bls.n	8009530 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e25b      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009530:	4b65      	ldr	r3, [pc, #404]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0f0      	beq.n	800951e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800953c:	4b62      	ldr	r3, [pc, #392]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	061b      	lsls	r3, r3, #24
 800954a:	495f      	ldr	r1, [pc, #380]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800954c:	4313      	orrs	r3, r2
 800954e:	604b      	str	r3, [r1, #4]
 8009550:	e018      	b.n	8009584 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009552:	4b5d      	ldr	r3, [pc, #372]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a5c      	ldr	r2, [pc, #368]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800955c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800955e:	f7fd fb1f 	bl	8006ba0 <HAL_GetTick>
 8009562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009564:	e008      	b.n	8009578 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009566:	f7fd fb1b 	bl	8006ba0 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d901      	bls.n	8009578 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e237      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009578:	4b53      	ldr	r3, [pc, #332]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f0      	bne.n	8009566 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0308 	and.w	r3, r3, #8
 800958c:	2b00      	cmp	r3, #0
 800958e:	d03c      	beq.n	800960a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01c      	beq.n	80095d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009598:	4b4b      	ldr	r3, [pc, #300]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800959a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800959e:	4a4a      	ldr	r2, [pc, #296]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80095a0:	f043 0301 	orr.w	r3, r3, #1
 80095a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095a8:	f7fd fafa 	bl	8006ba0 <HAL_GetTick>
 80095ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095b0:	f7fd faf6 	bl	8006ba0 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e212      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095c2:	4b41      	ldr	r3, [pc, #260]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80095c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095c8:	f003 0302 	and.w	r3, r3, #2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0ef      	beq.n	80095b0 <HAL_RCC_OscConfig+0x3ec>
 80095d0:	e01b      	b.n	800960a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095d2:	4b3d      	ldr	r3, [pc, #244]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80095d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095d8:	4a3b      	ldr	r2, [pc, #236]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80095da:	f023 0301 	bic.w	r3, r3, #1
 80095de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095e2:	f7fd fadd 	bl	8006ba0 <HAL_GetTick>
 80095e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095e8:	e008      	b.n	80095fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095ea:	f7fd fad9 	bl	8006ba0 <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d901      	bls.n	80095fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e1f5      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095fc:	4b32      	ldr	r3, [pc, #200]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80095fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1ef      	bne.n	80095ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0304 	and.w	r3, r3, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 80a6 	beq.w	8009764 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009618:	2300      	movs	r3, #0
 800961a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800961c:	4b2a      	ldr	r3, [pc, #168]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800961e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10d      	bne.n	8009644 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009628:	4b27      	ldr	r3, [pc, #156]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800962a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962c:	4a26      	ldr	r2, [pc, #152]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800962e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009632:	6593      	str	r3, [r2, #88]	; 0x58
 8009634:	4b24      	ldr	r3, [pc, #144]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800963c:	60bb      	str	r3, [r7, #8]
 800963e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009640:	2301      	movs	r3, #1
 8009642:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009644:	4b21      	ldr	r3, [pc, #132]	; (80096cc <HAL_RCC_OscConfig+0x508>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	2b00      	cmp	r3, #0
 800964e:	d118      	bne.n	8009682 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009650:	4b1e      	ldr	r3, [pc, #120]	; (80096cc <HAL_RCC_OscConfig+0x508>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a1d      	ldr	r2, [pc, #116]	; (80096cc <HAL_RCC_OscConfig+0x508>)
 8009656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800965a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800965c:	f7fd faa0 	bl	8006ba0 <HAL_GetTick>
 8009660:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009662:	e008      	b.n	8009676 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009664:	f7fd fa9c 	bl	8006ba0 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b02      	cmp	r3, #2
 8009670:	d901      	bls.n	8009676 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e1b8      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009676:	4b15      	ldr	r3, [pc, #84]	; (80096cc <HAL_RCC_OscConfig+0x508>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0f0      	beq.n	8009664 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d108      	bne.n	800969c <HAL_RCC_OscConfig+0x4d8>
 800968a:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 800968c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009690:	4a0d      	ldr	r2, [pc, #52]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 8009692:	f043 0301 	orr.w	r3, r3, #1
 8009696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800969a:	e029      	b.n	80096f0 <HAL_RCC_OscConfig+0x52c>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	2b05      	cmp	r3, #5
 80096a2:	d115      	bne.n	80096d0 <HAL_RCC_OscConfig+0x50c>
 80096a4:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80096a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096aa:	4a07      	ldr	r2, [pc, #28]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80096ac:	f043 0304 	orr.w	r3, r3, #4
 80096b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80096b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ba:	4a03      	ldr	r2, [pc, #12]	; (80096c8 <HAL_RCC_OscConfig+0x504>)
 80096bc:	f043 0301 	orr.w	r3, r3, #1
 80096c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096c4:	e014      	b.n	80096f0 <HAL_RCC_OscConfig+0x52c>
 80096c6:	bf00      	nop
 80096c8:	40021000 	.word	0x40021000
 80096cc:	40007000 	.word	0x40007000
 80096d0:	4b9d      	ldr	r3, [pc, #628]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d6:	4a9c      	ldr	r2, [pc, #624]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80096d8:	f023 0301 	bic.w	r3, r3, #1
 80096dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096e0:	4b99      	ldr	r3, [pc, #612]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80096e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e6:	4a98      	ldr	r2, [pc, #608]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80096e8:	f023 0304 	bic.w	r3, r3, #4
 80096ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d016      	beq.n	8009726 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096f8:	f7fd fa52 	bl	8006ba0 <HAL_GetTick>
 80096fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096fe:	e00a      	b.n	8009716 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009700:	f7fd fa4e 	bl	8006ba0 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	f241 3288 	movw	r2, #5000	; 0x1388
 800970e:	4293      	cmp	r3, r2
 8009710:	d901      	bls.n	8009716 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e168      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009716:	4b8c      	ldr	r3, [pc, #560]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0ed      	beq.n	8009700 <HAL_RCC_OscConfig+0x53c>
 8009724:	e015      	b.n	8009752 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009726:	f7fd fa3b 	bl	8006ba0 <HAL_GetTick>
 800972a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800972c:	e00a      	b.n	8009744 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800972e:	f7fd fa37 	bl	8006ba0 <HAL_GetTick>
 8009732:	4602      	mov	r2, r0
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	f241 3288 	movw	r2, #5000	; 0x1388
 800973c:	4293      	cmp	r3, r2
 800973e:	d901      	bls.n	8009744 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e151      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009744:	4b80      	ldr	r3, [pc, #512]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1ed      	bne.n	800972e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009752:	7ffb      	ldrb	r3, [r7, #31]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d105      	bne.n	8009764 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009758:	4b7b      	ldr	r3, [pc, #492]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 800975a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975c:	4a7a      	ldr	r2, [pc, #488]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 800975e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009762:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d03c      	beq.n	80097ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d01c      	beq.n	80097b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009778:	4b73      	ldr	r3, [pc, #460]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 800977a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800977e:	4a72      	ldr	r2, [pc, #456]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009780:	f043 0301 	orr.w	r3, r3, #1
 8009784:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009788:	f7fd fa0a 	bl	8006ba0 <HAL_GetTick>
 800978c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800978e:	e008      	b.n	80097a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009790:	f7fd fa06 	bl	8006ba0 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d901      	bls.n	80097a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e122      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80097a2:	4b69      	ldr	r3, [pc, #420]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80097a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d0ef      	beq.n	8009790 <HAL_RCC_OscConfig+0x5cc>
 80097b0:	e01b      	b.n	80097ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80097b2:	4b65      	ldr	r3, [pc, #404]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80097b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097b8:	4a63      	ldr	r2, [pc, #396]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80097ba:	f023 0301 	bic.w	r3, r3, #1
 80097be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c2:	f7fd f9ed 	bl	8006ba0 <HAL_GetTick>
 80097c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097c8:	e008      	b.n	80097dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097ca:	f7fd f9e9 	bl	8006ba0 <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d901      	bls.n	80097dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e105      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097dc:	4b5a      	ldr	r3, [pc, #360]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80097de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1ef      	bne.n	80097ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 80f9 	beq.w	80099e6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	f040 80cf 	bne.w	800999c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80097fe:	4b52      	ldr	r3, [pc, #328]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f003 0203 	and.w	r2, r3, #3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	429a      	cmp	r2, r3
 8009810:	d12c      	bne.n	800986c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	3b01      	subs	r3, #1
 800981e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009820:	429a      	cmp	r2, r3
 8009822:	d123      	bne.n	800986c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009830:	429a      	cmp	r2, r3
 8009832:	d11b      	bne.n	800986c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009840:	429a      	cmp	r2, r3
 8009842:	d113      	bne.n	800986c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984e:	085b      	lsrs	r3, r3, #1
 8009850:	3b01      	subs	r3, #1
 8009852:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009854:	429a      	cmp	r2, r3
 8009856:	d109      	bne.n	800986c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009862:	085b      	lsrs	r3, r3, #1
 8009864:	3b01      	subs	r3, #1
 8009866:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009868:	429a      	cmp	r2, r3
 800986a:	d071      	beq.n	8009950 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	2b0c      	cmp	r3, #12
 8009870:	d068      	beq.n	8009944 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009872:	4b35      	ldr	r3, [pc, #212]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d105      	bne.n	800988a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800987e:	4b32      	ldr	r3, [pc, #200]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e0ac      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a2d      	ldr	r2, [pc, #180]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009898:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800989a:	f7fd f981 	bl	8006ba0 <HAL_GetTick>
 800989e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098a0:	e008      	b.n	80098b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098a2:	f7fd f97d 	bl	8006ba0 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d901      	bls.n	80098b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e099      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1f0      	bne.n	80098a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098c0:	4b21      	ldr	r3, [pc, #132]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	4b21      	ldr	r3, [pc, #132]	; (800994c <HAL_RCC_OscConfig+0x788>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098d0:	3a01      	subs	r2, #1
 80098d2:	0112      	lsls	r2, r2, #4
 80098d4:	4311      	orrs	r1, r2
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098da:	0212      	lsls	r2, r2, #8
 80098dc:	4311      	orrs	r1, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80098e2:	0852      	lsrs	r2, r2, #1
 80098e4:	3a01      	subs	r2, #1
 80098e6:	0552      	lsls	r2, r2, #21
 80098e8:	4311      	orrs	r1, r2
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80098ee:	0852      	lsrs	r2, r2, #1
 80098f0:	3a01      	subs	r2, #1
 80098f2:	0652      	lsls	r2, r2, #25
 80098f4:	4311      	orrs	r1, r2
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098fa:	06d2      	lsls	r2, r2, #27
 80098fc:	430a      	orrs	r2, r1
 80098fe:	4912      	ldr	r1, [pc, #72]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009900:	4313      	orrs	r3, r2
 8009902:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009904:	4b10      	ldr	r3, [pc, #64]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a0f      	ldr	r2, [pc, #60]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 800990a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800990e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009910:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	4a0c      	ldr	r2, [pc, #48]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800991a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800991c:	f7fd f940 	bl	8006ba0 <HAL_GetTick>
 8009920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009922:	e008      	b.n	8009936 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009924:	f7fd f93c 	bl	8006ba0 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b02      	cmp	r3, #2
 8009930:	d901      	bls.n	8009936 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e058      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009936:	4b04      	ldr	r3, [pc, #16]	; (8009948 <HAL_RCC_OscConfig+0x784>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0f0      	beq.n	8009924 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009942:	e050      	b.n	80099e6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e04f      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
 8009948:	40021000 	.word	0x40021000
 800994c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009950:	4b27      	ldr	r3, [pc, #156]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d144      	bne.n	80099e6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800995c:	4b24      	ldr	r3, [pc, #144]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a23      	ldr	r2, [pc, #140]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 8009962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009968:	4b21      	ldr	r3, [pc, #132]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	4a20      	ldr	r2, [pc, #128]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 800996e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009974:	f7fd f914 	bl	8006ba0 <HAL_GetTick>
 8009978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800997a:	e008      	b.n	800998e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800997c:	f7fd f910 	bl	8006ba0 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	2b02      	cmp	r3, #2
 8009988:	d901      	bls.n	800998e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e02c      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800998e:	4b18      	ldr	r3, [pc, #96]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0f0      	beq.n	800997c <HAL_RCC_OscConfig+0x7b8>
 800999a:	e024      	b.n	80099e6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	2b0c      	cmp	r3, #12
 80099a0:	d01f      	beq.n	80099e2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099a2:	4b13      	ldr	r3, [pc, #76]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a12      	ldr	r2, [pc, #72]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 80099a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ae:	f7fd f8f7 	bl	8006ba0 <HAL_GetTick>
 80099b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099b4:	e008      	b.n	80099c8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099b6:	f7fd f8f3 	bl	8006ba0 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e00f      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099c8:	4b09      	ldr	r3, [pc, #36]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1f0      	bne.n	80099b6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80099d4:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 80099d6:	68da      	ldr	r2, [r3, #12]
 80099d8:	4905      	ldr	r1, [pc, #20]	; (80099f0 <HAL_RCC_OscConfig+0x82c>)
 80099da:	4b06      	ldr	r3, [pc, #24]	; (80099f4 <HAL_RCC_OscConfig+0x830>)
 80099dc:	4013      	ands	r3, r2
 80099de:	60cb      	str	r3, [r1, #12]
 80099e0:	e001      	b.n	80099e6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e000      	b.n	80099e8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3720      	adds	r7, #32
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	40021000 	.word	0x40021000
 80099f4:	feeefffc 	.word	0xfeeefffc

080099f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e11d      	b.n	8009c4c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a10:	4b90      	ldr	r3, [pc, #576]	; (8009c54 <HAL_RCC_ClockConfig+0x25c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 030f 	and.w	r3, r3, #15
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d910      	bls.n	8009a40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a1e:	4b8d      	ldr	r3, [pc, #564]	; (8009c54 <HAL_RCC_ClockConfig+0x25c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f023 020f 	bic.w	r2, r3, #15
 8009a26:	498b      	ldr	r1, [pc, #556]	; (8009c54 <HAL_RCC_ClockConfig+0x25c>)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a2e:	4b89      	ldr	r3, [pc, #548]	; (8009c54 <HAL_RCC_ClockConfig+0x25c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 030f 	and.w	r3, r3, #15
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d001      	beq.n	8009a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e105      	b.n	8009c4c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d010      	beq.n	8009a6e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	4b81      	ldr	r3, [pc, #516]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d908      	bls.n	8009a6e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a5c:	4b7e      	ldr	r3, [pc, #504]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	497b      	ldr	r1, [pc, #492]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d079      	beq.n	8009b6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d11e      	bne.n	8009ac0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a82:	4b75      	ldr	r3, [pc, #468]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e0dc      	b.n	8009c4c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009a92:	f000 fa09 	bl	8009ea8 <RCC_GetSysClockFreqFromPLLSource>
 8009a96:	4603      	mov	r3, r0
 8009a98:	4a70      	ldr	r2, [pc, #448]	; (8009c5c <HAL_RCC_ClockConfig+0x264>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d946      	bls.n	8009b2c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009a9e:	4b6e      	ldr	r3, [pc, #440]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d140      	bne.n	8009b2c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009aaa:	4b6b      	ldr	r3, [pc, #428]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ab2:	4a69      	ldr	r2, [pc, #420]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009aba:	2380      	movs	r3, #128	; 0x80
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	e035      	b.n	8009b2c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d107      	bne.n	8009ad8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ac8:	4b63      	ldr	r3, [pc, #396]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d115      	bne.n	8009b00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e0b9      	b.n	8009c4c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d107      	bne.n	8009af0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009ae0:	4b5d      	ldr	r3, [pc, #372]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d109      	bne.n	8009b00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e0ad      	b.n	8009c4c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009af0:	4b59      	ldr	r3, [pc, #356]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e0a5      	b.n	8009c4c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009b00:	f000 f8b4 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 8009b04:	4603      	mov	r3, r0
 8009b06:	4a55      	ldr	r2, [pc, #340]	; (8009c5c <HAL_RCC_ClockConfig+0x264>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d90f      	bls.n	8009b2c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009b0c:	4b52      	ldr	r3, [pc, #328]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d109      	bne.n	8009b2c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009b18:	4b4f      	ldr	r3, [pc, #316]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b20:	4a4d      	ldr	r2, [pc, #308]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b26:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009b28:	2380      	movs	r3, #128	; 0x80
 8009b2a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b2c:	4b4a      	ldr	r3, [pc, #296]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f023 0203 	bic.w	r2, r3, #3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4947      	ldr	r1, [pc, #284]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b3e:	f7fd f82f 	bl	8006ba0 <HAL_GetTick>
 8009b42:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b44:	e00a      	b.n	8009b5c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b46:	f7fd f82b 	bl	8006ba0 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d901      	bls.n	8009b5c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e077      	b.n	8009c4c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b5c:	4b3e      	ldr	r3, [pc, #248]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f003 020c 	and.w	r2, r3, #12
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d1eb      	bne.n	8009b46 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b80      	cmp	r3, #128	; 0x80
 8009b72:	d105      	bne.n	8009b80 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009b74:	4b38      	ldr	r3, [pc, #224]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	4a37      	ldr	r2, [pc, #220]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b7e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d010      	beq.n	8009bae <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	4b31      	ldr	r3, [pc, #196]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d208      	bcs.n	8009bae <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b9c:	4b2e      	ldr	r3, [pc, #184]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	492b      	ldr	r1, [pc, #172]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bae:	4b29      	ldr	r3, [pc, #164]	; (8009c54 <HAL_RCC_ClockConfig+0x25c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 030f 	and.w	r3, r3, #15
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d210      	bcs.n	8009bde <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <HAL_RCC_ClockConfig+0x25c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f023 020f 	bic.w	r2, r3, #15
 8009bc4:	4923      	ldr	r1, [pc, #140]	; (8009c54 <HAL_RCC_ClockConfig+0x25c>)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bcc:	4b21      	ldr	r3, [pc, #132]	; (8009c54 <HAL_RCC_ClockConfig+0x25c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 030f 	and.w	r3, r3, #15
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d001      	beq.n	8009bde <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e036      	b.n	8009c4c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0304 	and.w	r3, r3, #4
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d008      	beq.n	8009bfc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bea:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	4918      	ldr	r1, [pc, #96]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d009      	beq.n	8009c1c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c08:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	4910      	ldr	r1, [pc, #64]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009c1c:	f000 f826 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 8009c20:	4602      	mov	r2, r0
 8009c22:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <HAL_RCC_ClockConfig+0x260>)
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	091b      	lsrs	r3, r3, #4
 8009c28:	f003 030f 	and.w	r3, r3, #15
 8009c2c:	490c      	ldr	r1, [pc, #48]	; (8009c60 <HAL_RCC_ClockConfig+0x268>)
 8009c2e:	5ccb      	ldrb	r3, [r1, r3]
 8009c30:	f003 031f 	and.w	r3, r3, #31
 8009c34:	fa22 f303 	lsr.w	r3, r2, r3
 8009c38:	4a0a      	ldr	r2, [pc, #40]	; (8009c64 <HAL_RCC_ClockConfig+0x26c>)
 8009c3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009c3c:	4b0a      	ldr	r3, [pc, #40]	; (8009c68 <HAL_RCC_ClockConfig+0x270>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fc ff5d 	bl	8006b00 <HAL_InitTick>
 8009c46:	4603      	mov	r3, r0
 8009c48:	73fb      	strb	r3, [r7, #15]

  return status;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	40022000 	.word	0x40022000
 8009c58:	40021000 	.word	0x40021000
 8009c5c:	04c4b400 	.word	0x04c4b400
 8009c60:	08018200 	.word	0x08018200
 8009c64:	2000002c 	.word	0x2000002c
 8009c68:	20000030 	.word	0x20000030

08009c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b089      	sub	sp, #36	; 0x24
 8009c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	61fb      	str	r3, [r7, #28]
 8009c76:	2300      	movs	r3, #0
 8009c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c7a:	4b3e      	ldr	r3, [pc, #248]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f003 030c 	and.w	r3, r3, #12
 8009c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c84:	4b3b      	ldr	r3, [pc, #236]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	2b0c      	cmp	r3, #12
 8009c98:	d121      	bne.n	8009cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d11e      	bne.n	8009cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009ca0:	4b34      	ldr	r3, [pc, #208]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0308 	and.w	r3, r3, #8
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d107      	bne.n	8009cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009cac:	4b31      	ldr	r3, [pc, #196]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cb2:	0a1b      	lsrs	r3, r3, #8
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	61fb      	str	r3, [r7, #28]
 8009cba:	e005      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009cbc:	4b2d      	ldr	r3, [pc, #180]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	091b      	lsrs	r3, r3, #4
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009cc8:	4a2b      	ldr	r2, [pc, #172]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10d      	bne.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009cdc:	e00a      	b.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d102      	bne.n	8009cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009ce4:	4b25      	ldr	r3, [pc, #148]	; (8009d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8009ce6:	61bb      	str	r3, [r7, #24]
 8009ce8:	e004      	b.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d101      	bne.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009cf0:	4b23      	ldr	r3, [pc, #140]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8009cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2b0c      	cmp	r3, #12
 8009cf8:	d134      	bne.n	8009d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009cfa:	4b1e      	ldr	r3, [pc, #120]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d003      	beq.n	8009d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d003      	beq.n	8009d18 <HAL_RCC_GetSysClockFreq+0xac>
 8009d10:	e005      	b.n	8009d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009d12:	4b1a      	ldr	r3, [pc, #104]	; (8009d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8009d14:	617b      	str	r3, [r7, #20]
      break;
 8009d16:	e005      	b.n	8009d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009d18:	4b19      	ldr	r3, [pc, #100]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8009d1a:	617b      	str	r3, [r7, #20]
      break;
 8009d1c:	e002      	b.n	8009d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	617b      	str	r3, [r7, #20]
      break;
 8009d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d24:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	091b      	lsrs	r3, r3, #4
 8009d2a:	f003 030f 	and.w	r3, r3, #15
 8009d2e:	3301      	adds	r3, #1
 8009d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009d32:	4b10      	ldr	r3, [pc, #64]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	0a1b      	lsrs	r3, r3, #8
 8009d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	fb03 f202 	mul.w	r2, r3, r2
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d4a:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	0e5b      	lsrs	r3, r3, #25
 8009d50:	f003 0303 	and.w	r3, r3, #3
 8009d54:	3301      	adds	r3, #1
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009d64:	69bb      	ldr	r3, [r7, #24]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3724      	adds	r7, #36	; 0x24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	40021000 	.word	0x40021000
 8009d78:	08018218 	.word	0x08018218
 8009d7c:	00f42400 	.word	0x00f42400
 8009d80:	007a1200 	.word	0x007a1200

08009d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d88:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	2000002c 	.word	0x2000002c

08009d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009da0:	f7ff fff0 	bl	8009d84 <HAL_RCC_GetHCLKFreq>
 8009da4:	4602      	mov	r2, r0
 8009da6:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	0a1b      	lsrs	r3, r3, #8
 8009dac:	f003 0307 	and.w	r3, r3, #7
 8009db0:	4904      	ldr	r1, [pc, #16]	; (8009dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009db2:	5ccb      	ldrb	r3, [r1, r3]
 8009db4:	f003 031f 	and.w	r3, r3, #31
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	40021000 	.word	0x40021000
 8009dc4:	08018210 	.word	0x08018210

08009dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009dcc:	f7ff ffda 	bl	8009d84 <HAL_RCC_GetHCLKFreq>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	4b06      	ldr	r3, [pc, #24]	; (8009dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	0adb      	lsrs	r3, r3, #11
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	4904      	ldr	r1, [pc, #16]	; (8009df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009dde:	5ccb      	ldrb	r3, [r1, r3]
 8009de0:	f003 031f 	and.w	r3, r3, #31
 8009de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	40021000 	.word	0x40021000
 8009df0:	08018210 	.word	0x08018210

08009df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009e00:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d003      	beq.n	8009e14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009e0c:	f7ff f906 	bl	800901c <HAL_PWREx_GetVoltageRange>
 8009e10:	6178      	str	r0, [r7, #20]
 8009e12:	e014      	b.n	8009e3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e14:	4b22      	ldr	r3, [pc, #136]	; (8009ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e18:	4a21      	ldr	r2, [pc, #132]	; (8009ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8009e20:	4b1f      	ldr	r3, [pc, #124]	; (8009ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009e2c:	f7ff f8f6 	bl	800901c <HAL_PWREx_GetVoltageRange>
 8009e30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009e32:	4b1b      	ldr	r3, [pc, #108]	; (8009ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e36:	4a1a      	ldr	r2, [pc, #104]	; (8009ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e44:	d10b      	bne.n	8009e5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b80      	cmp	r3, #128	; 0x80
 8009e4a:	d913      	bls.n	8009e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2ba0      	cmp	r3, #160	; 0xa0
 8009e50:	d902      	bls.n	8009e58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009e52:	2302      	movs	r3, #2
 8009e54:	613b      	str	r3, [r7, #16]
 8009e56:	e00d      	b.n	8009e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009e58:	2301      	movs	r3, #1
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	e00a      	b.n	8009e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b7f      	cmp	r3, #127	; 0x7f
 8009e62:	d902      	bls.n	8009e6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009e64:	2302      	movs	r3, #2
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	e004      	b.n	8009e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b70      	cmp	r3, #112	; 0x70
 8009e6e:	d101      	bne.n	8009e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009e70:	2301      	movs	r3, #1
 8009e72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009e74:	4b0b      	ldr	r3, [pc, #44]	; (8009ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f023 020f 	bic.w	r2, r3, #15
 8009e7c:	4909      	ldr	r1, [pc, #36]	; (8009ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009e84:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d001      	beq.n	8009e96 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e000      	b.n	8009e98 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	40021000 	.word	0x40021000
 8009ea4:	40022000 	.word	0x40022000

08009ea8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009eae:	4b2d      	ldr	r3, [pc, #180]	; (8009f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	f003 0303 	and.w	r3, r3, #3
 8009eb6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d00b      	beq.n	8009ed6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d825      	bhi.n	8009f10 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d008      	beq.n	8009edc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d11f      	bne.n	8009f10 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009ed0:	4b25      	ldr	r3, [pc, #148]	; (8009f68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009ed2:	613b      	str	r3, [r7, #16]
    break;
 8009ed4:	e01f      	b.n	8009f16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009ed6:	4b25      	ldr	r3, [pc, #148]	; (8009f6c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009ed8:	613b      	str	r3, [r7, #16]
    break;
 8009eda:	e01c      	b.n	8009f16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009edc:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0308 	and.w	r3, r3, #8
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d107      	bne.n	8009ef8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009ee8:	4b1e      	ldr	r3, [pc, #120]	; (8009f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	e005      	b.n	8009f04 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009ef8:	4b1a      	ldr	r3, [pc, #104]	; (8009f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	091b      	lsrs	r3, r3, #4
 8009efe:	f003 030f 	and.w	r3, r3, #15
 8009f02:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009f04:	4a1a      	ldr	r2, [pc, #104]	; (8009f70 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f0c:	613b      	str	r3, [r7, #16]
    break;
 8009f0e:	e002      	b.n	8009f16 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	613b      	str	r3, [r7, #16]
    break;
 8009f14:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009f16:	4b13      	ldr	r3, [pc, #76]	; (8009f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	091b      	lsrs	r3, r3, #4
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	3301      	adds	r3, #1
 8009f22:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009f24:	4b0f      	ldr	r3, [pc, #60]	; (8009f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	0a1b      	lsrs	r3, r3, #8
 8009f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	fb03 f202 	mul.w	r2, r3, r2
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f3a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f3c:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	0e5b      	lsrs	r3, r3, #25
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	3301      	adds	r3, #1
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f54:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009f56:	683b      	ldr	r3, [r7, #0]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	371c      	adds	r7, #28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	40021000 	.word	0x40021000
 8009f68:	00f42400 	.word	0x00f42400
 8009f6c:	007a1200 	.word	0x007a1200
 8009f70:	08018218 	.word	0x08018218

08009f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009f80:	2300      	movs	r3, #0
 8009f82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d040      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f94:	2b80      	cmp	r3, #128	; 0x80
 8009f96:	d02a      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009f98:	2b80      	cmp	r3, #128	; 0x80
 8009f9a:	d825      	bhi.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009f9c:	2b60      	cmp	r3, #96	; 0x60
 8009f9e:	d026      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009fa0:	2b60      	cmp	r3, #96	; 0x60
 8009fa2:	d821      	bhi.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d006      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d81d      	bhi.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d009      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009fb0:	2b20      	cmp	r3, #32
 8009fb2:	d010      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009fb4:	e018      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009fb6:	4b89      	ldr	r3, [pc, #548]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	4a88      	ldr	r2, [pc, #544]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fc0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009fc2:	e015      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	2100      	movs	r1, #0
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 fa34 	bl	800b438 <RCCEx_PLLSAI1_Config>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009fd4:	e00c      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3320      	adds	r3, #32
 8009fda:	2100      	movs	r1, #0
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f001 fb1f 	bl	800b620 <RCCEx_PLLSAI2_Config>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009fe6:	e003      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	74fb      	strb	r3, [r7, #19]
      break;
 8009fec:	e000      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ff0:	7cfb      	ldrb	r3, [r7, #19]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10b      	bne.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ff6:	4b79      	ldr	r3, [pc, #484]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ffc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a004:	4975      	ldr	r1, [pc, #468]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a006:	4313      	orrs	r3, r2
 800a008:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a00c:	e001      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00e:	7cfb      	ldrb	r3, [r7, #19]
 800a010:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d047      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a026:	d030      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a02c:	d82a      	bhi.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a02e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a032:	d02a      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a038:	d824      	bhi.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a03a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a03e:	d008      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a044:	d81e      	bhi.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800a04a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a04e:	d010      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a050:	e018      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a052:	4b62      	ldr	r3, [pc, #392]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	4a61      	ldr	r2, [pc, #388]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a05c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a05e:	e015      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3304      	adds	r3, #4
 800a064:	2100      	movs	r1, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f001 f9e6 	bl	800b438 <RCCEx_PLLSAI1_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a070:	e00c      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3320      	adds	r3, #32
 800a076:	2100      	movs	r1, #0
 800a078:	4618      	mov	r0, r3
 800a07a:	f001 fad1 	bl	800b620 <RCCEx_PLLSAI2_Config>
 800a07e:	4603      	mov	r3, r0
 800a080:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a082:	e003      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	74fb      	strb	r3, [r7, #19]
      break;
 800a088:	e000      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a08a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a08c:	7cfb      	ldrb	r3, [r7, #19]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10b      	bne.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a092:	4b52      	ldr	r3, [pc, #328]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a0:	494e      	ldr	r1, [pc, #312]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a0a8:	e001      	b.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0aa:	7cfb      	ldrb	r3, [r7, #19]
 800a0ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 809f 	beq.w	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a0c0:	4b46      	ldr	r3, [pc, #280]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e000      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00d      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0d6:	4b41      	ldr	r3, [pc, #260]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0da:	4a40      	ldr	r2, [pc, #256]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0e0:	6593      	str	r3, [r2, #88]	; 0x58
 800a0e2:	4b3e      	ldr	r3, [pc, #248]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ea:	60bb      	str	r3, [r7, #8]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0f2:	4b3b      	ldr	r3, [pc, #236]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a3a      	ldr	r2, [pc, #232]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a0f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0fe:	f7fc fd4f 	bl	8006ba0 <HAL_GetTick>
 800a102:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a104:	e009      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a106:	f7fc fd4b 	bl	8006ba0 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d902      	bls.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	74fb      	strb	r3, [r7, #19]
        break;
 800a118:	e005      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a11a:	4b31      	ldr	r3, [pc, #196]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0ef      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a126:	7cfb      	ldrb	r3, [r7, #19]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d15b      	bne.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a12c:	4b2b      	ldr	r3, [pc, #172]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a136:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d01f      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	429a      	cmp	r2, r3
 800a148:	d019      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a14a:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a154:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a156:	4b21      	ldr	r3, [pc, #132]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15c:	4a1f      	ldr	r2, [pc, #124]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a15e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a166:	4b1d      	ldr	r3, [pc, #116]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16c:	4a1b      	ldr	r2, [pc, #108]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a16e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a176:	4a19      	ldr	r2, [pc, #100]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d016      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a188:	f7fc fd0a 	bl	8006ba0 <HAL_GetTick>
 800a18c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a18e:	e00b      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a190:	f7fc fd06 	bl	8006ba0 <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d902      	bls.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	74fb      	strb	r3, [r7, #19]
            break;
 800a1a6:	e006      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1a8:	4b0c      	ldr	r3, [pc, #48]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0ec      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a1b6:	7cfb      	ldrb	r3, [r7, #19]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10c      	bne.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1bc:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1cc:	4903      	ldr	r1, [pc, #12]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a1d4:	e008      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1d6:	7cfb      	ldrb	r3, [r7, #19]
 800a1d8:	74bb      	strb	r3, [r7, #18]
 800a1da:	e005      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800a1dc:	40021000 	.word	0x40021000
 800a1e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e4:	7cfb      	ldrb	r3, [r7, #19]
 800a1e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1e8:	7c7b      	ldrb	r3, [r7, #17]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d105      	bne.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1ee:	4ba0      	ldr	r3, [pc, #640]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1f2:	4a9f      	ldr	r2, [pc, #636]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00a      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a206:	4b9a      	ldr	r3, [pc, #616]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20c:	f023 0203 	bic.w	r2, r3, #3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a214:	4996      	ldr	r1, [pc, #600]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a216:	4313      	orrs	r3, r2
 800a218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a228:	4b91      	ldr	r3, [pc, #580]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22e:	f023 020c 	bic.w	r2, r3, #12
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	498e      	ldr	r1, [pc, #568]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a24a:	4b89      	ldr	r3, [pc, #548]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a250:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a258:	4985      	ldr	r1, [pc, #532]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0308 	and.w	r3, r3, #8
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a26c:	4b80      	ldr	r3, [pc, #512]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a272:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a27a:	497d      	ldr	r1, [pc, #500]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0310 	and.w	r3, r3, #16
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a28e:	4b78      	ldr	r3, [pc, #480]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29c:	4974      	ldr	r1, [pc, #464]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0320 	and.w	r3, r3, #32
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00a      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2b0:	4b6f      	ldr	r3, [pc, #444]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2be:	496c      	ldr	r1, [pc, #432]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00a      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2d2:	4b67      	ldr	r3, [pc, #412]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2e0:	4963      	ldr	r1, [pc, #396]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00a      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2f4:	4b5e      	ldr	r3, [pc, #376]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a302:	495b      	ldr	r1, [pc, #364]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a304:	4313      	orrs	r3, r2
 800a306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00a      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a316:	4b56      	ldr	r3, [pc, #344]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a324:	4952      	ldr	r1, [pc, #328]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a326:	4313      	orrs	r3, r2
 800a328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00a      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a338:	4b4d      	ldr	r3, [pc, #308]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a346:	494a      	ldr	r1, [pc, #296]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a348:	4313      	orrs	r3, r2
 800a34a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a35a:	4b45      	ldr	r3, [pc, #276]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a368:	4941      	ldr	r1, [pc, #260]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a37c:	4b3c      	ldr	r3, [pc, #240]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a37e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a382:	f023 0203 	bic.w	r2, r3, #3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a38a:	4939      	ldr	r1, [pc, #228]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d028      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a39e:	4b34      	ldr	r3, [pc, #208]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ac:	4930      	ldr	r1, [pc, #192]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3bc:	d106      	bne.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3be:	4b2c      	ldr	r3, [pc, #176]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	4a2b      	ldr	r2, [pc, #172]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3c8:	60d3      	str	r3, [r2, #12]
 800a3ca:	e011      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3d4:	d10c      	bne.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	2101      	movs	r1, #1
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f001 f82b 	bl	800b438 <RCCEx_PLLSAI1_Config>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a3e6:	7cfb      	ldrb	r3, [r7, #19]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800a3ec:	7cfb      	ldrb	r3, [r7, #19]
 800a3ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d04d      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a404:	d108      	bne.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800a406:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a40c:	4a18      	ldr	r2, [pc, #96]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a40e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a412:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800a416:	e012      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a418:	4b15      	ldr	r3, [pc, #84]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a41a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a41e:	4a14      	ldr	r2, [pc, #80]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a424:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800a428:	4b11      	ldr	r3, [pc, #68]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a436:	490e      	ldr	r1, [pc, #56]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a446:	d106      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a448:	4b09      	ldr	r3, [pc, #36]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	4a08      	ldr	r2, [pc, #32]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a44e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a452:	60d3      	str	r3, [r2, #12]
 800a454:	e020      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a45a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a45e:	d109      	bne.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a460:	4b03      	ldr	r3, [pc, #12]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	4a02      	ldr	r2, [pc, #8]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a46a:	60d3      	str	r3, [r2, #12]
 800a46c:	e014      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a46e:	bf00      	nop
 800a470:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a47c:	d10c      	bne.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3304      	adds	r3, #4
 800a482:	2101      	movs	r1, #1
 800a484:	4618      	mov	r0, r3
 800a486:	f000 ffd7 	bl	800b438 <RCCEx_PLLSAI1_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a48e:	7cfb      	ldrb	r3, [r7, #19]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800a494:	7cfb      	ldrb	r3, [r7, #19]
 800a496:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d028      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a4a4:	4b4a      	ldr	r3, [pc, #296]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4b2:	4947      	ldr	r1, [pc, #284]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4c2:	d106      	bne.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4c4:	4b42      	ldr	r3, [pc, #264]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	4a41      	ldr	r2, [pc, #260]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4ce:	60d3      	str	r3, [r2, #12]
 800a4d0:	e011      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4da:	d10c      	bne.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 ffa8 	bl	800b438 <RCCEx_PLLSAI1_Config>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a4ec:	7cfb      	ldrb	r3, [r7, #19]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800a4f2:	7cfb      	ldrb	r3, [r7, #19]
 800a4f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d01e      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a502:	4b33      	ldr	r3, [pc, #204]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a508:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a512:	492f      	ldr	r1, [pc, #188]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a514:	4313      	orrs	r3, r2
 800a516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a524:	d10c      	bne.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3304      	adds	r3, #4
 800a52a:	2102      	movs	r1, #2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 ff83 	bl	800b438 <RCCEx_PLLSAI1_Config>
 800a532:	4603      	mov	r3, r0
 800a534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a536:	7cfb      	ldrb	r3, [r7, #19]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800a53c:	7cfb      	ldrb	r3, [r7, #19]
 800a53e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00b      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a54c:	4b20      	ldr	r3, [pc, #128]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a54e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a552:	f023 0204 	bic.w	r2, r3, #4
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a55c:	491c      	ldr	r1, [pc, #112]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00b      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a570:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a576:	f023 0218 	bic.w	r2, r3, #24
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a580:	4913      	ldr	r1, [pc, #76]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a582:	4313      	orrs	r3, r2
 800a584:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d017      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a594:	4b0e      	ldr	r3, [pc, #56]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a59a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5a4:	490a      	ldr	r1, [pc, #40]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5b6:	d105      	bne.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5b8:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	4a04      	ldr	r2, [pc, #16]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a5c4:	7cbb      	ldrb	r3, [r7, #18]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	40021000 	.word	0x40021000

0800a5d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5e6:	d13e      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a5e8:	4bb6      	ldr	r3, [pc, #728]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5f2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5fa:	d028      	beq.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a602:	f200 86f4 	bhi.w	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a60c:	d005      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a614:	d00e      	beq.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800a616:	f000 beea 	b.w	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a61a:	4baa      	ldr	r3, [pc, #680]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a61c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b02      	cmp	r3, #2
 800a626:	f040 86e4 	bne.w	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800a62a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a62e:	61fb      	str	r3, [r7, #28]
      break;
 800a630:	f000 bedf 	b.w	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a634:	4ba3      	ldr	r3, [pc, #652]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a63a:	f003 0302 	and.w	r3, r3, #2
 800a63e:	2b02      	cmp	r3, #2
 800a640:	f040 86d9 	bne.w	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800a644:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a648:	61fb      	str	r3, [r7, #28]
      break;
 800a64a:	f000 bed4 	b.w	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a64e:	4b9d      	ldr	r3, [pc, #628]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a65a:	f040 86ce 	bne.w	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800a65e:	4b9a      	ldr	r3, [pc, #616]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800a660:	61fb      	str	r3, [r7, #28]
      break;
 800a662:	f000 beca 	b.w	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a666:	4b97      	ldr	r3, [pc, #604]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2b03      	cmp	r3, #3
 800a674:	d036      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d840      	bhi.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d003      	beq.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d020      	beq.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800a688:	e039      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a68a:	4b8e      	ldr	r3, [pc, #568]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 0302 	and.w	r3, r3, #2
 800a692:	2b02      	cmp	r3, #2
 800a694:	d116      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a696:	4b8b      	ldr	r3, [pc, #556]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d005      	beq.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a6a2:	4b88      	ldr	r3, [pc, #544]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	091b      	lsrs	r3, r3, #4
 800a6a8:	f003 030f 	and.w	r3, r3, #15
 800a6ac:	e005      	b.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a6ae:	4b85      	ldr	r3, [pc, #532]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a6b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6b4:	0a1b      	lsrs	r3, r3, #8
 800a6b6:	f003 030f 	and.w	r3, r3, #15
 800a6ba:	4a84      	ldr	r2, [pc, #528]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a6c2:	e01f      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61bb      	str	r3, [r7, #24]
      break;
 800a6c8:	e01c      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a6ca:	4b7e      	ldr	r3, [pc, #504]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6d6:	d102      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a6d8:	4b7d      	ldr	r3, [pc, #500]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a6da:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a6dc:	e012      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	61bb      	str	r3, [r7, #24]
      break;
 800a6e2:	e00f      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a6e4:	4b77      	ldr	r3, [pc, #476]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6f0:	d102      	bne.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a6f2:	4b78      	ldr	r3, [pc, #480]	; (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a6f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a6f6:	e005      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	61bb      	str	r3, [r7, #24]
      break;
 800a6fc:	e002      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	61bb      	str	r3, [r7, #24]
      break;
 800a702:	bf00      	nop
    }

    switch(PeriphClk)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a70a:	f000 8606 	beq.w	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a714:	f200 8673 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a71e:	f000 8469 	beq.w	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a728:	f200 8669 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a732:	f000 8531 	beq.w	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a73c:	f200 865f 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a746:	f000 8187 	beq.w	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a750:	f200 8655 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a75a:	f000 80cd 	beq.w	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a764:	f200 864b 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a76e:	f000 8430 	beq.w	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a778:	f200 8641 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a782:	f000 83e4 	beq.w	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a78c:	f200 8637 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a796:	f000 80af 	beq.w	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7a0:	f200 862d 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7aa:	f000 809d 	beq.w	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7b4:	f200 8623 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7be:	f000 808b 	beq.w	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7c8:	f200 8619 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7d2:	f000 8554 	beq.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7dc:	f200 860f 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7e6:	f000 8500 	beq.w	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7f0:	f200 8605 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fa:	f000 84a1 	beq.w	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a804:	f200 85fb 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b80      	cmp	r3, #128	; 0x80
 800a80c:	f000 846c 	beq.w	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b80      	cmp	r3, #128	; 0x80
 800a814:	f200 85f3 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	d84c      	bhi.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 85ec 	beq.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3b01      	subs	r3, #1
 800a82a:	2b1f      	cmp	r3, #31
 800a82c:	f200 85e7 	bhi.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a830:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800ac4d 	.word	0x0800ac4d
 800a83c:	0800acbb 	.word	0x0800acbb
 800a840:	0800b3ff 	.word	0x0800b3ff
 800a844:	0800ad4f 	.word	0x0800ad4f
 800a848:	0800b3ff 	.word	0x0800b3ff
 800a84c:	0800b3ff 	.word	0x0800b3ff
 800a850:	0800b3ff 	.word	0x0800b3ff
 800a854:	0800adc7 	.word	0x0800adc7
 800a858:	0800b3ff 	.word	0x0800b3ff
 800a85c:	0800b3ff 	.word	0x0800b3ff
 800a860:	0800b3ff 	.word	0x0800b3ff
 800a864:	0800b3ff 	.word	0x0800b3ff
 800a868:	0800b3ff 	.word	0x0800b3ff
 800a86c:	0800b3ff 	.word	0x0800b3ff
 800a870:	0800b3ff 	.word	0x0800b3ff
 800a874:	0800ae4b 	.word	0x0800ae4b
 800a878:	0800b3ff 	.word	0x0800b3ff
 800a87c:	0800b3ff 	.word	0x0800b3ff
 800a880:	0800b3ff 	.word	0x0800b3ff
 800a884:	0800b3ff 	.word	0x0800b3ff
 800a888:	0800b3ff 	.word	0x0800b3ff
 800a88c:	0800b3ff 	.word	0x0800b3ff
 800a890:	0800b3ff 	.word	0x0800b3ff
 800a894:	0800b3ff 	.word	0x0800b3ff
 800a898:	0800b3ff 	.word	0x0800b3ff
 800a89c:	0800b3ff 	.word	0x0800b3ff
 800a8a0:	0800b3ff 	.word	0x0800b3ff
 800a8a4:	0800b3ff 	.word	0x0800b3ff
 800a8a8:	0800b3ff 	.word	0x0800b3ff
 800a8ac:	0800b3ff 	.word	0x0800b3ff
 800a8b0:	0800b3ff 	.word	0x0800b3ff
 800a8b4:	0800aecd 	.word	0x0800aecd
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	f000 83e8 	beq.w	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a8c0:	f000 bd9d 	b.w	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a8c4:	40021000 	.word	0x40021000
 800a8c8:	0003d090 	.word	0x0003d090
 800a8cc:	08018218 	.word	0x08018218
 800a8d0:	00f42400 	.word	0x00f42400
 800a8d4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a8d8:	69b9      	ldr	r1, [r7, #24]
 800a8da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a8de:	f000 ff93 	bl	800b808 <RCCEx_GetSAIxPeriphCLKFreq>
 800a8e2:	61f8      	str	r0, [r7, #28]
      break;
 800a8e4:	f000 bd8e 	b.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a8e8:	69b9      	ldr	r1, [r7, #24]
 800a8ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a8ee:	f000 ff8b 	bl	800b808 <RCCEx_GetSAIxPeriphCLKFreq>
 800a8f2:	61f8      	str	r0, [r7, #28]
      break;
 800a8f4:	f000 bd86 	b.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a8f8:	4b9a      	ldr	r3, [pc, #616]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a90a:	d015      	beq.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a912:	f200 8092 	bhi.w	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a91c:	d029      	beq.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a924:	f200 8089 	bhi.w	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d07b      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a934:	d04a      	beq.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800a936:	e080      	b.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a938:	4b8a      	ldr	r3, [pc, #552]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0302 	and.w	r3, r3, #2
 800a940:	2b02      	cmp	r3, #2
 800a942:	d17d      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a944:	4b87      	ldr	r3, [pc, #540]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0308 	and.w	r3, r3, #8
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800a950:	4b84      	ldr	r3, [pc, #528]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	091b      	lsrs	r3, r3, #4
 800a956:	f003 030f 	and.w	r3, r3, #15
 800a95a:	e005      	b.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800a95c:	4b81      	ldr	r3, [pc, #516]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a95e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a962:	0a1b      	lsrs	r3, r3, #8
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	4a7f      	ldr	r2, [pc, #508]	; (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a96e:	61fb      	str	r3, [r7, #28]
          break;
 800a970:	e066      	b.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a972:	4b7c      	ldr	r3, [pc, #496]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a97a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a97e:	d162      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a980:	4b78      	ldr	r3, [pc, #480]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a98c:	d15b      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a98e:	4b75      	ldr	r3, [pc, #468]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	0a1b      	lsrs	r3, r3, #8
 800a994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a998:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	fb03 f202 	mul.w	r2, r3, r2
 800a9a2:	4b70      	ldr	r3, [pc, #448]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	091b      	lsrs	r3, r3, #4
 800a9a8:	f003 030f 	and.w	r3, r3, #15
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a9b4:	4b6b      	ldr	r3, [pc, #428]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	0d5b      	lsrs	r3, r3, #21
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	3301      	adds	r3, #1
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c8:	61fb      	str	r3, [r7, #28]
          break;
 800a9ca:	e03c      	b.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a9cc:	4b65      	ldr	r3, [pc, #404]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9d8:	d138      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a9da:	4b62      	ldr	r3, [pc, #392]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9e6:	d131      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a9e8:	4b5e      	ldr	r3, [pc, #376]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	0a1b      	lsrs	r3, r3, #8
 800a9ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	fb03 f202 	mul.w	r2, r3, r2
 800a9fc:	4b59      	ldr	r3, [pc, #356]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	091b      	lsrs	r3, r3, #4
 800aa02:	f003 030f 	and.w	r3, r3, #15
 800aa06:	3301      	adds	r3, #1
 800aa08:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa0c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800aa0e:	4b55      	ldr	r3, [pc, #340]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	0d5b      	lsrs	r3, r3, #21
 800aa14:	f003 0303 	and.w	r3, r3, #3
 800aa18:	3301      	adds	r3, #1
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	69ba      	ldr	r2, [r7, #24]
 800aa1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa22:	61fb      	str	r3, [r7, #28]
          break;
 800aa24:	e012      	b.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800aa26:	4b4f      	ldr	r3, [pc, #316]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d10e      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800aa34:	4b4d      	ldr	r3, [pc, #308]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800aa36:	61fb      	str	r3, [r7, #28]
          break;
 800aa38:	e00b      	b.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800aa3a:	bf00      	nop
 800aa3c:	f000 bce2 	b.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aa40:	bf00      	nop
 800aa42:	f000 bcdf 	b.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aa46:	bf00      	nop
 800aa48:	f000 bcdc 	b.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aa4c:	bf00      	nop
 800aa4e:	f000 bcd9 	b.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aa52:	bf00      	nop
        break;
 800aa54:	f000 bcd6 	b.w	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800aa58:	4b42      	ldr	r3, [pc, #264]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa66:	d13d      	bne.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800aa68:	4b3e      	ldr	r3, [pc, #248]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa74:	f040 84c5 	bne.w	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800aa78:	4b3a      	ldr	r3, [pc, #232]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa84:	f040 84bd 	bne.w	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800aa88:	4b36      	ldr	r3, [pc, #216]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	0a1b      	lsrs	r3, r3, #8
 800aa8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa92:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	fb03 f202 	mul.w	r2, r3, r2
 800aa9c:	4b31      	ldr	r3, [pc, #196]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	091b      	lsrs	r3, r3, #4
 800aaa2:	f003 030f 	and.w	r3, r3, #15
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaac:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800aaae:	4b2d      	ldr	r3, [pc, #180]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	0edb      	lsrs	r3, r3, #27
 800aab4:	f003 031f 	and.w	r3, r3, #31
 800aab8:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10a      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800aac0:	4b28      	ldr	r3, [pc, #160]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800aacc:	2311      	movs	r3, #17
 800aace:	617b      	str	r3, [r7, #20]
 800aad0:	e001      	b.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800aad2:	2307      	movs	r3, #7
 800aad4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	fbb2 f3f3 	udiv	r3, r2, r3
 800aade:	61fb      	str	r3, [r7, #28]
      break;
 800aae0:	f000 bc8f 	b.w	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800aae4:	4b1f      	ldr	r3, [pc, #124]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aaf6:	d016      	beq.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aafe:	f200 809b 	bhi.w	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab08:	d032      	beq.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab10:	f200 8092 	bhi.w	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 8084 	beq.w	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab22:	d052      	beq.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800ab24:	e088      	b.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ab26:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	f040 8084 	bne.w	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ab34:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0308 	and.w	r3, r3, #8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d005      	beq.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800ab40:	4b08      	ldr	r3, [pc, #32]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	091b      	lsrs	r3, r3, #4
 800ab46:	f003 030f 	and.w	r3, r3, #15
 800ab4a:	e005      	b.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab52:	0a1b      	lsrs	r3, r3, #8
 800ab54:	f003 030f 	and.w	r3, r3, #15
 800ab58:	4a03      	ldr	r2, [pc, #12]	; (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ab5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab5e:	61fb      	str	r3, [r7, #28]
          break;
 800ab60:	e06c      	b.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800ab62:	bf00      	nop
 800ab64:	40021000 	.word	0x40021000
 800ab68:	08018218 	.word	0x08018218
 800ab6c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ab70:	4ba5      	ldr	r3, [pc, #660]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab7c:	d160      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800ab7e:	4ba2      	ldr	r3, [pc, #648]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab8a:	d159      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ab8c:	4b9e      	ldr	r3, [pc, #632]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	0a1b      	lsrs	r3, r3, #8
 800ab92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab96:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	fb03 f202 	mul.w	r2, r3, r2
 800aba0:	4b99      	ldr	r3, [pc, #612]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	091b      	lsrs	r3, r3, #4
 800aba6:	f003 030f 	and.w	r3, r3, #15
 800abaa:	3301      	adds	r3, #1
 800abac:	fbb2 f3f3 	udiv	r3, r2, r3
 800abb0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800abb2:	4b95      	ldr	r3, [pc, #596]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	0d5b      	lsrs	r3, r3, #21
 800abb8:	f003 0303 	and.w	r3, r3, #3
 800abbc:	3301      	adds	r3, #1
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc6:	61fb      	str	r3, [r7, #28]
          break;
 800abc8:	e03a      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800abca:	4b8f      	ldr	r3, [pc, #572]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abd6:	d135      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800abd8:	4b8b      	ldr	r3, [pc, #556]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abe4:	d12e      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800abe6:	4b88      	ldr	r3, [pc, #544]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	0a1b      	lsrs	r3, r3, #8
 800abec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	fb03 f202 	mul.w	r2, r3, r2
 800abfa:	4b83      	ldr	r3, [pc, #524]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	091b      	lsrs	r3, r3, #4
 800ac00:	f003 030f 	and.w	r3, r3, #15
 800ac04:	3301      	adds	r3, #1
 800ac06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ac0c:	4b7e      	ldr	r3, [pc, #504]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	0d5b      	lsrs	r3, r3, #21
 800ac12:	f003 0303 	and.w	r3, r3, #3
 800ac16:	3301      	adds	r3, #1
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac20:	61fb      	str	r3, [r7, #28]
          break;
 800ac22:	e00f      	b.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800ac24:	4b78      	ldr	r3, [pc, #480]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d10a      	bne.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800ac32:	4b76      	ldr	r3, [pc, #472]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ac34:	61fb      	str	r3, [r7, #28]
          break;
 800ac36:	e007      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800ac38:	bf00      	nop
 800ac3a:	e3e2      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ac3c:	bf00      	nop
 800ac3e:	e3e0      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ac40:	bf00      	nop
 800ac42:	e3de      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ac44:	bf00      	nop
 800ac46:	e3dc      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ac48:	bf00      	nop
      break;
 800ac4a:	e3da      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ac4c:	4b6e      	ldr	r3, [pc, #440]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	60fb      	str	r3, [r7, #12]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d827      	bhi.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac75 	.word	0x0800ac75
 800ac68:	0800ac7d 	.word	0x0800ac7d
 800ac6c:	0800ac85 	.word	0x0800ac85
 800ac70:	0800ac99 	.word	0x0800ac99
          frequency = HAL_RCC_GetPCLK2Freq();
 800ac74:	f7ff f8a8 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800ac78:	61f8      	str	r0, [r7, #28]
          break;
 800ac7a:	e01d      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac7c:	f7fe fff6 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800ac80:	61f8      	str	r0, [r7, #28]
          break;
 800ac82:	e019      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac84:	4b60      	ldr	r3, [pc, #384]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac90:	d10f      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800ac92:	4b5f      	ldr	r3, [pc, #380]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac94:	61fb      	str	r3, [r7, #28]
          break;
 800ac96:	e00c      	b.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac98:	4b5b      	ldr	r3, [pc, #364]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac9e:	f003 0302 	and.w	r3, r3, #2
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d107      	bne.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800aca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acaa:	61fb      	str	r3, [r7, #28]
          break;
 800acac:	e003      	b.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800acae:	bf00      	nop
 800acb0:	e3a8      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800acb2:	bf00      	nop
 800acb4:	e3a6      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800acb6:	bf00      	nop
        break;
 800acb8:	e3a4      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800acba:	4b53      	ldr	r3, [pc, #332]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc0:	f003 030c 	and.w	r3, r3, #12
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b0c      	cmp	r3, #12
 800acca:	d83a      	bhi.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800accc:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800acce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd2:	bf00      	nop
 800acd4:	0800ad09 	.word	0x0800ad09
 800acd8:	0800ad43 	.word	0x0800ad43
 800acdc:	0800ad43 	.word	0x0800ad43
 800ace0:	0800ad43 	.word	0x0800ad43
 800ace4:	0800ad11 	.word	0x0800ad11
 800ace8:	0800ad43 	.word	0x0800ad43
 800acec:	0800ad43 	.word	0x0800ad43
 800acf0:	0800ad43 	.word	0x0800ad43
 800acf4:	0800ad19 	.word	0x0800ad19
 800acf8:	0800ad43 	.word	0x0800ad43
 800acfc:	0800ad43 	.word	0x0800ad43
 800ad00:	0800ad43 	.word	0x0800ad43
 800ad04:	0800ad2d 	.word	0x0800ad2d
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad08:	f7ff f848 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800ad0c:	61f8      	str	r0, [r7, #28]
          break;
 800ad0e:	e01d      	b.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad10:	f7fe ffac 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800ad14:	61f8      	str	r0, [r7, #28]
          break;
 800ad16:	e019      	b.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad18:	4b3b      	ldr	r3, [pc, #236]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad24:	d10f      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800ad26:	4b3a      	ldr	r3, [pc, #232]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad28:	61fb      	str	r3, [r7, #28]
          break;
 800ad2a:	e00c      	b.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad2c:	4b36      	ldr	r3, [pc, #216]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d107      	bne.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800ad3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad3e:	61fb      	str	r3, [r7, #28]
          break;
 800ad40:	e003      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800ad42:	bf00      	nop
 800ad44:	e35e      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad46:	bf00      	nop
 800ad48:	e35c      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad4a:	bf00      	nop
        break;
 800ad4c:	e35a      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ad4e:	4b2e      	ldr	r3, [pc, #184]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b30      	cmp	r3, #48	; 0x30
 800ad5e:	d021      	beq.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b30      	cmp	r3, #48	; 0x30
 800ad64:	d829      	bhi.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b20      	cmp	r3, #32
 800ad6a:	d011      	beq.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b20      	cmp	r3, #32
 800ad70:	d823      	bhi.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b10      	cmp	r3, #16
 800ad7c:	d004      	beq.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800ad7e:	e01c      	b.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad80:	f7ff f80c 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800ad84:	61f8      	str	r0, [r7, #28]
          break;
 800ad86:	e01d      	b.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad88:	f7fe ff70 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800ad8c:	61f8      	str	r0, [r7, #28]
          break;
 800ad8e:	e019      	b.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad90:	4b1d      	ldr	r3, [pc, #116]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad9c:	d10f      	bne.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800ad9e:	4b1c      	ldr	r3, [pc, #112]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ada0:	61fb      	str	r3, [r7, #28]
          break;
 800ada2:	e00c      	b.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ada4:	4b18      	ldr	r3, [pc, #96]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ada6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d107      	bne.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800adb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adb6:	61fb      	str	r3, [r7, #28]
          break;
 800adb8:	e003      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800adba:	bf00      	nop
 800adbc:	e322      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800adbe:	bf00      	nop
 800adc0:	e320      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800adc2:	bf00      	nop
        break;
 800adc4:	e31e      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800adc6:	4b10      	ldr	r3, [pc, #64]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800adc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800add0:	60fb      	str	r3, [r7, #12]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2bc0      	cmp	r3, #192	; 0xc0
 800add6:	d027      	beq.n	800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2bc0      	cmp	r3, #192	; 0xc0
 800addc:	d82f      	bhi.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b80      	cmp	r3, #128	; 0x80
 800ade2:	d017      	beq.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b80      	cmp	r3, #128	; 0x80
 800ade8:	d829      	bhi.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d003      	beq.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b40      	cmp	r3, #64	; 0x40
 800adf4:	d004      	beq.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800adf6:	e022      	b.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800adf8:	f7fe ffd0 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800adfc:	61f8      	str	r0, [r7, #28]
          break;
 800adfe:	e023      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae00:	f7fe ff34 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800ae04:	61f8      	str	r0, [r7, #28]
          break;
 800ae06:	e01f      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800ae08:	40021000 	.word	0x40021000
 800ae0c:	02dc6c00 	.word	0x02dc6c00
 800ae10:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae14:	4b9b      	ldr	r3, [pc, #620]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae20:	d10f      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800ae22:	4b99      	ldr	r3, [pc, #612]	; (800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ae24:	61fb      	str	r3, [r7, #28]
          break;
 800ae26:	e00c      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae28:	4b96      	ldr	r3, [pc, #600]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2e:	f003 0302 	and.w	r3, r3, #2
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d107      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800ae36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae3a:	61fb      	str	r3, [r7, #28]
          break;
 800ae3c:	e003      	b.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800ae3e:	bf00      	nop
 800ae40:	e2e0      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae42:	bf00      	nop
 800ae44:	e2de      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae46:	bf00      	nop
        break;
 800ae48:	e2dc      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ae4a:	4b8e      	ldr	r3, [pc, #568]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae54:	60fb      	str	r3, [r7, #12]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae5c:	d025      	beq.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae64:	d82c      	bhi.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae6c:	d013      	beq.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae74:	d824      	bhi.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d004      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae82:	d004      	beq.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800ae84:	e01c      	b.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ae86:	f7fe ff89 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800ae8a:	61f8      	str	r0, [r7, #28]
          break;
 800ae8c:	e01d      	b.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae8e:	f7fe feed 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800ae92:	61f8      	str	r0, [r7, #28]
          break;
 800ae94:	e019      	b.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae96:	4b7b      	ldr	r3, [pc, #492]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aea2:	d10f      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800aea4:	4b78      	ldr	r3, [pc, #480]	; (800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800aea6:	61fb      	str	r3, [r7, #28]
          break;
 800aea8:	e00c      	b.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aeaa:	4b76      	ldr	r3, [pc, #472]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb0:	f003 0302 	and.w	r3, r3, #2
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d107      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800aeb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aebc:	61fb      	str	r3, [r7, #28]
          break;
 800aebe:	e003      	b.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800aec0:	bf00      	nop
 800aec2:	e29f      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aec4:	bf00      	nop
 800aec6:	e29d      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aec8:	bf00      	nop
        break;
 800aeca:	e29b      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800aecc:	4b6d      	ldr	r3, [pc, #436]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aede:	d025      	beq.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aee6:	d82c      	bhi.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeee:	d013      	beq.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aef6:	d824      	bhi.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d004      	beq.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af04:	d004      	beq.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800af06:	e01c      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800af08:	f7fe ff48 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800af0c:	61f8      	str	r0, [r7, #28]
          break;
 800af0e:	e01d      	b.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800af10:	f7fe feac 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800af14:	61f8      	str	r0, [r7, #28]
          break;
 800af16:	e019      	b.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af18:	4b5a      	ldr	r3, [pc, #360]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af24:	d10f      	bne.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800af26:	4b58      	ldr	r3, [pc, #352]	; (800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800af28:	61fb      	str	r3, [r7, #28]
          break;
 800af2a:	e00c      	b.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800af2c:	4b55      	ldr	r3, [pc, #340]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b02      	cmp	r3, #2
 800af38:	d107      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800af3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af3e:	61fb      	str	r3, [r7, #28]
          break;
 800af40:	e003      	b.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800af42:	bf00      	nop
 800af44:	e25e      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af46:	bf00      	nop
 800af48:	e25c      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af4a:	bf00      	nop
        break;
 800af4c:	e25a      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800af4e:	4b4d      	ldr	r3, [pc, #308]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af60:	d007      	beq.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af68:	d12f      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800af6a:	f7fe fe7f 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800af6e:	61f8      	str	r0, [r7, #28]
          break;
 800af70:	e02e      	b.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800af72:	4b44      	ldr	r3, [pc, #272]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af7e:	d126      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800af80:	4b40      	ldr	r3, [pc, #256]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d020      	beq.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800af8c:	4b3d      	ldr	r3, [pc, #244]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	0a1b      	lsrs	r3, r3, #8
 800af92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af96:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	fb03 f202 	mul.w	r2, r3, r2
 800afa0:	4b38      	ldr	r3, [pc, #224]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	091b      	lsrs	r3, r3, #4
 800afa6:	f003 030f 	and.w	r3, r3, #15
 800afaa:	3301      	adds	r3, #1
 800afac:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800afb2:	4b34      	ldr	r3, [pc, #208]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	0e5b      	lsrs	r3, r3, #25
 800afb8:	f003 0303 	and.w	r3, r3, #3
 800afbc:	3301      	adds	r3, #1
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc6:	61fb      	str	r3, [r7, #28]
          break;
 800afc8:	e001      	b.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800afca:	bf00      	nop
 800afcc:	e21a      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800afce:	bf00      	nop
        break;
 800afd0:	e218      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800afd2:	4b2c      	ldr	r3, [pc, #176]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800afd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d103      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800afe4:	f7fe fef0 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800afe8:	61f8      	str	r0, [r7, #28]
        break;
 800afea:	e20b      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800afec:	f7fe fe3e 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800aff0:	61f8      	str	r0, [r7, #28]
        break;
 800aff2:	e207      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800aff4:	4b23      	ldr	r3, [pc, #140]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800affa:	f003 0318 	and.w	r3, r3, #24
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b10      	cmp	r3, #16
 800b004:	d010      	beq.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2b10      	cmp	r3, #16
 800b00a:	d834      	bhi.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b08      	cmp	r3, #8
 800b016:	d024      	beq.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800b018:	e02d      	b.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800b01a:	69b9      	ldr	r1, [r7, #24]
 800b01c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b020:	f000 fbf2 	bl	800b808 <RCCEx_GetSAIxPeriphCLKFreq>
 800b024:	61f8      	str	r0, [r7, #28]
          break;
 800b026:	e02b      	b.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b028:	4b16      	ldr	r3, [pc, #88]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	2b02      	cmp	r3, #2
 800b032:	d122      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b034:	4b13      	ldr	r3, [pc, #76]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0308 	and.w	r3, r3, #8
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800b040:	4b10      	ldr	r3, [pc, #64]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	091b      	lsrs	r3, r3, #4
 800b046:	f003 030f 	and.w	r3, r3, #15
 800b04a:	e005      	b.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800b04c:	4b0d      	ldr	r3, [pc, #52]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b04e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b052:	0a1b      	lsrs	r3, r3, #8
 800b054:	f003 030f 	and.w	r3, r3, #15
 800b058:	4a0c      	ldr	r2, [pc, #48]	; (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800b05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b05e:	61fb      	str	r3, [r7, #28]
          break;
 800b060:	e00b      	b.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b062:	4b08      	ldr	r3, [pc, #32]	; (800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b06a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b06e:	d106      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800b072:	61fb      	str	r3, [r7, #28]
          break;
 800b074:	e003      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800b076:	bf00      	nop
 800b078:	e1c4      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b07a:	bf00      	nop
 800b07c:	e1c2      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b07e:	bf00      	nop
        break;
 800b080:	e1c0      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800b082:	bf00      	nop
 800b084:	40021000 	.word	0x40021000
 800b088:	00f42400 	.word	0x00f42400
 800b08c:	08018218 	.word	0x08018218
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b090:	4b96      	ldr	r3, [pc, #600]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b096:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0a2:	d013      	beq.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0aa:	d819      	bhi.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d004      	beq.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b8:	d004      	beq.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800b0ba:	e011      	b.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0bc:	f7fe fe6e 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800b0c0:	61f8      	str	r0, [r7, #28]
          break;
 800b0c2:	e010      	b.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800b0c4:	f7fe fdd2 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800b0c8:	61f8      	str	r0, [r7, #28]
          break;
 800b0ca:	e00c      	b.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0cc:	4b87      	ldr	r3, [pc, #540]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0d8:	d104      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800b0da:	4b85      	ldr	r3, [pc, #532]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b0dc:	61fb      	str	r3, [r7, #28]
          break;
 800b0de:	e001      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800b0e0:	bf00      	nop
 800b0e2:	e18f      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b0e4:	bf00      	nop
        break;
 800b0e6:	e18d      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b0e8:	4b80      	ldr	r3, [pc, #512]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0fa:	d013      	beq.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b102:	d819      	bhi.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d004      	beq.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b110:	d004      	beq.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800b112:	e011      	b.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b114:	f7fe fe42 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800b118:	61f8      	str	r0, [r7, #28]
          break;
 800b11a:	e010      	b.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800b11c:	f7fe fda6 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800b120:	61f8      	str	r0, [r7, #28]
          break;
 800b122:	e00c      	b.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b124:	4b71      	ldr	r3, [pc, #452]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b12c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b130:	d104      	bne.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800b132:	4b6f      	ldr	r3, [pc, #444]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b134:	61fb      	str	r3, [r7, #28]
          break;
 800b136:	e001      	b.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800b138:	bf00      	nop
 800b13a:	e163      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b13c:	bf00      	nop
        break;
 800b13e:	e161      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b140:	4b6a      	ldr	r3, [pc, #424]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b152:	d013      	beq.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b15a:	d819      	bhi.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b168:	d004      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800b16a:	e011      	b.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b16c:	f7fe fe16 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800b170:	61f8      	str	r0, [r7, #28]
          break;
 800b172:	e010      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800b174:	f7fe fd7a 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800b178:	61f8      	str	r0, [r7, #28]
          break;
 800b17a:	e00c      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b17c:	4b5b      	ldr	r3, [pc, #364]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b188:	d104      	bne.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800b18a:	4b59      	ldr	r3, [pc, #356]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b18c:	61fb      	str	r3, [r7, #28]
          break;
 800b18e:	e001      	b.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800b190:	bf00      	nop
 800b192:	e137      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b194:	bf00      	nop
        break;
 800b196:	e135      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b198:	4b54      	ldr	r3, [pc, #336]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b19a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b19e:	f003 0303 	and.w	r3, r3, #3
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d011      	beq.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d818      	bhi.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d004      	beq.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800b1bc:	e011      	b.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b1be:	f7fe fded 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800b1c2:	61f8      	str	r0, [r7, #28]
          break;
 800b1c4:	e010      	b.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800b1c6:	f7fe fd51 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800b1ca:	61f8      	str	r0, [r7, #28]
          break;
 800b1cc:	e00c      	b.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1ce:	4b47      	ldr	r3, [pc, #284]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1da:	d104      	bne.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800b1dc:	4b44      	ldr	r3, [pc, #272]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b1de:	61fb      	str	r3, [r7, #28]
          break;
 800b1e0:	e001      	b.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800b1e2:	bf00      	nop
 800b1e4:	e10e      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b1e6:	bf00      	nop
        break;
 800b1e8:	e10c      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b1ea:	4b40      	ldr	r3, [pc, #256]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b1fc:	d02c      	beq.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b204:	d833      	bhi.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b20c:	d01a      	beq.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b214:	d82b      	bhi.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b222:	d004      	beq.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800b224:	e023      	b.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b226:	f7fe fdb9 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800b22a:	61f8      	str	r0, [r7, #28]
          break;
 800b22c:	e026      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b22e:	4b2f      	ldr	r3, [pc, #188]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d11a      	bne.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800b23c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b240:	61fb      	str	r3, [r7, #28]
          break;
 800b242:	e016      	b.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b244:	4b29      	ldr	r3, [pc, #164]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b24c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b250:	d111      	bne.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800b252:	4b27      	ldr	r3, [pc, #156]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b254:	61fb      	str	r3, [r7, #28]
          break;
 800b256:	e00e      	b.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b258:	4b24      	ldr	r3, [pc, #144]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b02      	cmp	r3, #2
 800b264:	d109      	bne.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800b266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b26a:	61fb      	str	r3, [r7, #28]
          break;
 800b26c:	e005      	b.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800b26e:	bf00      	nop
 800b270:	e0c8      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b272:	bf00      	nop
 800b274:	e0c6      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b276:	bf00      	nop
 800b278:	e0c4      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b27a:	bf00      	nop
        break;
 800b27c:	e0c2      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b27e:	4b1b      	ldr	r3, [pc, #108]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b290:	d030      	beq.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b298:	d837      	bhi.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2a0:	d01a      	beq.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2a8:	d82f      	bhi.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d004      	beq.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2b6:	d004      	beq.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800b2b8:	e027      	b.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b2ba:	f7fe fd6f 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800b2be:	61f8      	str	r0, [r7, #28]
          break;
 800b2c0:	e02a      	b.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b2c2:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b2c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2c8:	f003 0302 	and.w	r3, r3, #2
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d11e      	bne.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800b2d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b2d4:	61fb      	str	r3, [r7, #28]
          break;
 800b2d6:	e01a      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2d8:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e4:	d115      	bne.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800b2e6:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b2e8:	61fb      	str	r3, [r7, #28]
          break;
 800b2ea:	e012      	b.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b2ec:	40021000 	.word	0x40021000
 800b2f0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b2f4:	4b46      	ldr	r3, [pc, #280]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2fa:	f003 0302 	and.w	r3, r3, #2
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d109      	bne.n	800b316 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800b302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b306:	61fb      	str	r3, [r7, #28]
          break;
 800b308:	e005      	b.n	800b316 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800b30a:	bf00      	nop
 800b30c:	e07a      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b30e:	bf00      	nop
 800b310:	e078      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b312:	bf00      	nop
 800b314:	e076      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b316:	bf00      	nop
        break;
 800b318:	e074      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b31a:	4b3d      	ldr	r3, [pc, #244]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b31c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b320:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b32c:	d02c      	beq.n	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b334:	d855      	bhi.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d004      	beq.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b342:	d004      	beq.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800b344:	e04d      	b.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800b346:	f7fe fc91 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800b34a:	61f8      	str	r0, [r7, #28]
          break;
 800b34c:	e04e      	b.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b34e:	4b30      	ldr	r3, [pc, #192]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b02      	cmp	r3, #2
 800b358:	d145      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b35a:	4b2d      	ldr	r3, [pc, #180]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0308 	and.w	r3, r3, #8
 800b362:	2b00      	cmp	r3, #0
 800b364:	d005      	beq.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800b366:	4b2a      	ldr	r3, [pc, #168]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	091b      	lsrs	r3, r3, #4
 800b36c:	f003 030f 	and.w	r3, r3, #15
 800b370:	e005      	b.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800b372:	4b27      	ldr	r3, [pc, #156]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b378:	0a1b      	lsrs	r3, r3, #8
 800b37a:	f003 030f 	and.w	r3, r3, #15
 800b37e:	4a25      	ldr	r2, [pc, #148]	; (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800b380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b384:	61fb      	str	r3, [r7, #28]
          break;
 800b386:	e02e      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b388:	4b21      	ldr	r3, [pc, #132]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b394:	d129      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b396:	4b1e      	ldr	r3, [pc, #120]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b39e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3a2:	d122      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b3a4:	4b1a      	ldr	r3, [pc, #104]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	0a1b      	lsrs	r3, r3, #8
 800b3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3ae:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	fb03 f202 	mul.w	r2, r3, r2
 800b3b8:	4b15      	ldr	r3, [pc, #84]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	091b      	lsrs	r3, r3, #4
 800b3be:	f003 030f 	and.w	r3, r3, #15
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b3ca:	4b11      	ldr	r3, [pc, #68]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	0d5b      	lsrs	r3, r3, #21
 800b3d0:	f003 0303 	and.w	r3, r3, #3
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3de:	61fb      	str	r3, [r7, #28]
          break;
 800b3e0:	e003      	b.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800b3e2:	bf00      	nop
 800b3e4:	e00e      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b3e6:	bf00      	nop
 800b3e8:	e00c      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b3ea:	bf00      	nop
        break;
 800b3ec:	e00a      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b3ee:	bf00      	nop
 800b3f0:	e008      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b3f2:	bf00      	nop
 800b3f4:	e006      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b3f6:	bf00      	nop
 800b3f8:	e004      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b3fa:	bf00      	nop
 800b3fc:	e002      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b3fe:	bf00      	nop
 800b400:	e000      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b402:	bf00      	nop
    }
  }

  return(frequency);
 800b404:	69fb      	ldr	r3, [r7, #28]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3720      	adds	r7, #32
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	40021000 	.word	0x40021000
 800b414:	08018218 	.word	0x08018218

0800b418 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b418:	b480      	push	{r7}
 800b41a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800b41c:	4b05      	ldr	r3, [pc, #20]	; (800b434 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a04      	ldr	r2, [pc, #16]	; (800b434 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b422:	f043 0304 	orr.w	r3, r3, #4
 800b426:	6013      	str	r3, [r2, #0]
}
 800b428:	bf00      	nop
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	40021000 	.word	0x40021000

0800b438 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b446:	4b72      	ldr	r3, [pc, #456]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f003 0303 	and.w	r3, r3, #3
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00e      	beq.n	800b470 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b452:	4b6f      	ldr	r3, [pc, #444]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	f003 0203 	and.w	r2, r3, #3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d103      	bne.n	800b46a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
       ||
 800b466:	2b00      	cmp	r3, #0
 800b468:	d142      	bne.n	800b4f0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	73fb      	strb	r3, [r7, #15]
 800b46e:	e03f      	b.n	800b4f0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b03      	cmp	r3, #3
 800b476:	d018      	beq.n	800b4aa <RCCEx_PLLSAI1_Config+0x72>
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d825      	bhi.n	800b4c8 <RCCEx_PLLSAI1_Config+0x90>
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d002      	beq.n	800b486 <RCCEx_PLLSAI1_Config+0x4e>
 800b480:	2b02      	cmp	r3, #2
 800b482:	d009      	beq.n	800b498 <RCCEx_PLLSAI1_Config+0x60>
 800b484:	e020      	b.n	800b4c8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b486:	4b62      	ldr	r3, [pc, #392]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0302 	and.w	r3, r3, #2
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d11d      	bne.n	800b4ce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b496:	e01a      	b.n	800b4ce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b498:	4b5d      	ldr	r3, [pc, #372]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d116      	bne.n	800b4d2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4a8:	e013      	b.n	800b4d2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b4aa:	4b59      	ldr	r3, [pc, #356]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10f      	bne.n	800b4d6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b4b6:	4b56      	ldr	r3, [pc, #344]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d109      	bne.n	800b4d6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b4c6:	e006      	b.n	800b4d6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b4cc:	e004      	b.n	800b4d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b4ce:	bf00      	nop
 800b4d0:	e002      	b.n	800b4d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b4d2:	bf00      	nop
 800b4d4:	e000      	b.n	800b4d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b4d6:	bf00      	nop
    }

    if(status == HAL_OK)
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d108      	bne.n	800b4f0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b4de:	4b4c      	ldr	r3, [pc, #304]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	f023 0203 	bic.w	r2, r3, #3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4949      	ldr	r1, [pc, #292]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f040 8086 	bne.w	800b604 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b4f8:	4b45      	ldr	r3, [pc, #276]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a44      	ldr	r2, [pc, #272]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b504:	f7fb fb4c 	bl	8006ba0 <HAL_GetTick>
 800b508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b50a:	e009      	b.n	800b520 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b50c:	f7fb fb48 	bl	8006ba0 <HAL_GetTick>
 800b510:	4602      	mov	r2, r0
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	2b02      	cmp	r3, #2
 800b518:	d902      	bls.n	800b520 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	73fb      	strb	r3, [r7, #15]
        break;
 800b51e:	e005      	b.n	800b52c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b520:	4b3b      	ldr	r3, [pc, #236]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1ef      	bne.n	800b50c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d168      	bne.n	800b604 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d113      	bne.n	800b560 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b538:	4b35      	ldr	r3, [pc, #212]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b53a:	691a      	ldr	r2, [r3, #16]
 800b53c:	4b35      	ldr	r3, [pc, #212]	; (800b614 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b53e:	4013      	ands	r3, r2
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	6892      	ldr	r2, [r2, #8]
 800b544:	0211      	lsls	r1, r2, #8
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	68d2      	ldr	r2, [r2, #12]
 800b54a:	06d2      	lsls	r2, r2, #27
 800b54c:	4311      	orrs	r1, r2
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	6852      	ldr	r2, [r2, #4]
 800b552:	3a01      	subs	r2, #1
 800b554:	0112      	lsls	r2, r2, #4
 800b556:	430a      	orrs	r2, r1
 800b558:	492d      	ldr	r1, [pc, #180]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b55a:	4313      	orrs	r3, r2
 800b55c:	610b      	str	r3, [r1, #16]
 800b55e:	e02d      	b.n	800b5bc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d115      	bne.n	800b592 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b566:	4b2a      	ldr	r3, [pc, #168]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b568:	691a      	ldr	r2, [r3, #16]
 800b56a:	4b2b      	ldr	r3, [pc, #172]	; (800b618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b56c:	4013      	ands	r3, r2
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	6892      	ldr	r2, [r2, #8]
 800b572:	0211      	lsls	r1, r2, #8
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	6912      	ldr	r2, [r2, #16]
 800b578:	0852      	lsrs	r2, r2, #1
 800b57a:	3a01      	subs	r2, #1
 800b57c:	0552      	lsls	r2, r2, #21
 800b57e:	4311      	orrs	r1, r2
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	6852      	ldr	r2, [r2, #4]
 800b584:	3a01      	subs	r2, #1
 800b586:	0112      	lsls	r2, r2, #4
 800b588:	430a      	orrs	r2, r1
 800b58a:	4921      	ldr	r1, [pc, #132]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	610b      	str	r3, [r1, #16]
 800b590:	e014      	b.n	800b5bc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b592:	4b1f      	ldr	r3, [pc, #124]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b594:	691a      	ldr	r2, [r3, #16]
 800b596:	4b21      	ldr	r3, [pc, #132]	; (800b61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800b598:	4013      	ands	r3, r2
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	6892      	ldr	r2, [r2, #8]
 800b59e:	0211      	lsls	r1, r2, #8
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	6952      	ldr	r2, [r2, #20]
 800b5a4:	0852      	lsrs	r2, r2, #1
 800b5a6:	3a01      	subs	r2, #1
 800b5a8:	0652      	lsls	r2, r2, #25
 800b5aa:	4311      	orrs	r1, r2
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	6852      	ldr	r2, [r2, #4]
 800b5b0:	3a01      	subs	r2, #1
 800b5b2:	0112      	lsls	r2, r2, #4
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	4916      	ldr	r1, [pc, #88]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b5bc:	4b14      	ldr	r3, [pc, #80]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a13      	ldr	r2, [pc, #76]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b5c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5c8:	f7fb faea 	bl	8006ba0 <HAL_GetTick>
 800b5cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b5ce:	e009      	b.n	800b5e4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b5d0:	f7fb fae6 	bl	8006ba0 <HAL_GetTick>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	d902      	bls.n	800b5e4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	73fb      	strb	r3, [r7, #15]
          break;
 800b5e2:	e005      	b.n	800b5f0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b5e4:	4b0a      	ldr	r3, [pc, #40]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0ef      	beq.n	800b5d0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5f8:	691a      	ldr	r2, [r3, #16]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	4904      	ldr	r1, [pc, #16]	; (800b610 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b600:	4313      	orrs	r3, r2
 800b602:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b604:	7bfb      	ldrb	r3, [r7, #15]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	40021000 	.word	0x40021000
 800b614:	07ff800f 	.word	0x07ff800f
 800b618:	ff9f800f 	.word	0xff9f800f
 800b61c:	f9ff800f 	.word	0xf9ff800f

0800b620 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b62e:	4b72      	ldr	r3, [pc, #456]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00e      	beq.n	800b658 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b63a:	4b6f      	ldr	r3, [pc, #444]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	f003 0203 	and.w	r2, r3, #3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	d103      	bne.n	800b652 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
       ||
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d142      	bne.n	800b6d8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	73fb      	strb	r3, [r7, #15]
 800b656:	e03f      	b.n	800b6d8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b03      	cmp	r3, #3
 800b65e:	d018      	beq.n	800b692 <RCCEx_PLLSAI2_Config+0x72>
 800b660:	2b03      	cmp	r3, #3
 800b662:	d825      	bhi.n	800b6b0 <RCCEx_PLLSAI2_Config+0x90>
 800b664:	2b01      	cmp	r3, #1
 800b666:	d002      	beq.n	800b66e <RCCEx_PLLSAI2_Config+0x4e>
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d009      	beq.n	800b680 <RCCEx_PLLSAI2_Config+0x60>
 800b66c:	e020      	b.n	800b6b0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b66e:	4b62      	ldr	r3, [pc, #392]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f003 0302 	and.w	r3, r3, #2
 800b676:	2b00      	cmp	r3, #0
 800b678:	d11d      	bne.n	800b6b6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b67e:	e01a      	b.n	800b6b6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b680:	4b5d      	ldr	r3, [pc, #372]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d116      	bne.n	800b6ba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b690:	e013      	b.n	800b6ba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b692:	4b59      	ldr	r3, [pc, #356]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10f      	bne.n	800b6be <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b69e:	4b56      	ldr	r3, [pc, #344]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d109      	bne.n	800b6be <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b6ae:	e006      	b.n	800b6be <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b4:	e004      	b.n	800b6c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b6b6:	bf00      	nop
 800b6b8:	e002      	b.n	800b6c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b6ba:	bf00      	nop
 800b6bc:	e000      	b.n	800b6c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b6be:	bf00      	nop
    }

    if(status == HAL_OK)
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d108      	bne.n	800b6d8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b6c6:	4b4c      	ldr	r3, [pc, #304]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	f023 0203 	bic.w	r2, r3, #3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4949      	ldr	r1, [pc, #292]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f040 8086 	bne.w	800b7ec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b6e0:	4b45      	ldr	r3, [pc, #276]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a44      	ldr	r2, [pc, #272]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ec:	f7fb fa58 	bl	8006ba0 <HAL_GetTick>
 800b6f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b6f2:	e009      	b.n	800b708 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b6f4:	f7fb fa54 	bl	8006ba0 <HAL_GetTick>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d902      	bls.n	800b708 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b702:	2303      	movs	r3, #3
 800b704:	73fb      	strb	r3, [r7, #15]
        break;
 800b706:	e005      	b.n	800b714 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b708:	4b3b      	ldr	r3, [pc, #236]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1ef      	bne.n	800b6f4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d168      	bne.n	800b7ec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d113      	bne.n	800b748 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b720:	4b35      	ldr	r3, [pc, #212]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b722:	695a      	ldr	r2, [r3, #20]
 800b724:	4b35      	ldr	r3, [pc, #212]	; (800b7fc <RCCEx_PLLSAI2_Config+0x1dc>)
 800b726:	4013      	ands	r3, r2
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	6892      	ldr	r2, [r2, #8]
 800b72c:	0211      	lsls	r1, r2, #8
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	68d2      	ldr	r2, [r2, #12]
 800b732:	06d2      	lsls	r2, r2, #27
 800b734:	4311      	orrs	r1, r2
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	6852      	ldr	r2, [r2, #4]
 800b73a:	3a01      	subs	r2, #1
 800b73c:	0112      	lsls	r2, r2, #4
 800b73e:	430a      	orrs	r2, r1
 800b740:	492d      	ldr	r1, [pc, #180]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b742:	4313      	orrs	r3, r2
 800b744:	614b      	str	r3, [r1, #20]
 800b746:	e02d      	b.n	800b7a4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d115      	bne.n	800b77a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b74e:	4b2a      	ldr	r3, [pc, #168]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b750:	695a      	ldr	r2, [r3, #20]
 800b752:	4b2b      	ldr	r3, [pc, #172]	; (800b800 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b754:	4013      	ands	r3, r2
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	6892      	ldr	r2, [r2, #8]
 800b75a:	0211      	lsls	r1, r2, #8
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	6912      	ldr	r2, [r2, #16]
 800b760:	0852      	lsrs	r2, r2, #1
 800b762:	3a01      	subs	r2, #1
 800b764:	0552      	lsls	r2, r2, #21
 800b766:	4311      	orrs	r1, r2
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	6852      	ldr	r2, [r2, #4]
 800b76c:	3a01      	subs	r2, #1
 800b76e:	0112      	lsls	r2, r2, #4
 800b770:	430a      	orrs	r2, r1
 800b772:	4921      	ldr	r1, [pc, #132]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b774:	4313      	orrs	r3, r2
 800b776:	614b      	str	r3, [r1, #20]
 800b778:	e014      	b.n	800b7a4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b77a:	4b1f      	ldr	r3, [pc, #124]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b77c:	695a      	ldr	r2, [r3, #20]
 800b77e:	4b21      	ldr	r3, [pc, #132]	; (800b804 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b780:	4013      	ands	r3, r2
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	6892      	ldr	r2, [r2, #8]
 800b786:	0211      	lsls	r1, r2, #8
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	6952      	ldr	r2, [r2, #20]
 800b78c:	0852      	lsrs	r2, r2, #1
 800b78e:	3a01      	subs	r2, #1
 800b790:	0652      	lsls	r2, r2, #25
 800b792:	4311      	orrs	r1, r2
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	6852      	ldr	r2, [r2, #4]
 800b798:	3a01      	subs	r2, #1
 800b79a:	0112      	lsls	r2, r2, #4
 800b79c:	430a      	orrs	r2, r1
 800b79e:	4916      	ldr	r1, [pc, #88]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b7a4:	4b14      	ldr	r3, [pc, #80]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a13      	ldr	r2, [pc, #76]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7b0:	f7fb f9f6 	bl	8006ba0 <HAL_GetTick>
 800b7b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b7b6:	e009      	b.n	800b7cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b7b8:	f7fb f9f2 	bl	8006ba0 <HAL_GetTick>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d902      	bls.n	800b7cc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	73fb      	strb	r3, [r7, #15]
          break;
 800b7ca:	e005      	b.n	800b7d8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d0ef      	beq.n	800b7b8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b7de:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7e0:	695a      	ldr	r2, [r3, #20]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	4904      	ldr	r1, [pc, #16]	; (800b7f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	40021000 	.word	0x40021000
 800b7fc:	07ff800f 	.word	0x07ff800f
 800b800:	ff9f800f 	.word	0xff9f800f
 800b804:	f9ff800f 	.word	0xf9ff800f

0800b808 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b808:	b480      	push	{r7}
 800b80a:	b089      	sub	sp, #36	; 0x24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b824:	d10b      	bne.n	800b83e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b826:	4b7e      	ldr	r3, [pc, #504]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b82c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b830:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	2b60      	cmp	r3, #96	; 0x60
 800b836:	d112      	bne.n	800b85e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b838:	4b7a      	ldr	r3, [pc, #488]	; (800ba24 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b83a:	61fb      	str	r3, [r7, #28]
 800b83c:	e00f      	b.n	800b85e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b844:	d10b      	bne.n	800b85e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b846:	4b76      	ldr	r3, [pc, #472]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b84c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b850:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b858:	d101      	bne.n	800b85e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b85a:	4b72      	ldr	r3, [pc, #456]	; (800ba24 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b85c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f040 80d6 	bne.w	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	2b40      	cmp	r3, #64	; 0x40
 800b86e:	d003      	beq.n	800b878 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b876:	d13b      	bne.n	800b8f0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b878:	4b69      	ldr	r3, [pc, #420]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b884:	f040 80c4 	bne.w	800ba10 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800b888:	4b65      	ldr	r3, [pc, #404]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 80bd 	beq.w	800ba10 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b896:	4b62      	ldr	r3, [pc, #392]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	091b      	lsrs	r3, r3, #4
 800b89c:	f003 030f 	and.w	r3, r3, #15
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b8aa:	4b5d      	ldr	r3, [pc, #372]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	0a1b      	lsrs	r3, r3, #8
 800b8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8b4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b8b6:	4b5a      	ldr	r3, [pc, #360]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	0edb      	lsrs	r3, r3, #27
 800b8bc:	f003 031f 	and.w	r3, r3, #31
 800b8c0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10a      	bne.n	800b8de <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b8c8:	4b55      	ldr	r3, [pc, #340]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800b8d4:	2311      	movs	r3, #17
 800b8d6:	617b      	str	r3, [r7, #20]
 800b8d8:	e001      	b.n	800b8de <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800b8da:	2307      	movs	r3, #7
 800b8dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	fb03 f202 	mul.w	r2, r3, r2
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ec:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b8ee:	e08f      	b.n	800ba10 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d13a      	bne.n	800b96c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800b8f6:	4b4a      	ldr	r3, [pc, #296]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b902:	f040 8086 	bne.w	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b906:	4b46      	ldr	r3, [pc, #280]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d07f      	beq.n	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b912:	4b43      	ldr	r3, [pc, #268]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	091b      	lsrs	r3, r3, #4
 800b918:	f003 030f 	and.w	r3, r3, #15
 800b91c:	3301      	adds	r3, #1
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	fbb2 f3f3 	udiv	r3, r2, r3
 800b924:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b926:	4b3e      	ldr	r3, [pc, #248]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	0a1b      	lsrs	r3, r3, #8
 800b92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b930:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800b932:	4b3b      	ldr	r3, [pc, #236]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	0edb      	lsrs	r3, r3, #27
 800b938:	f003 031f 	and.w	r3, r3, #31
 800b93c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800b944:	4b36      	ldr	r3, [pc, #216]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800b950:	2311      	movs	r3, #17
 800b952:	617b      	str	r3, [r7, #20]
 800b954:	e001      	b.n	800b95a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800b956:	2307      	movs	r3, #7
 800b958:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	fb03 f202 	mul.w	r2, r3, r2
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	fbb2 f3f3 	udiv	r3, r2, r3
 800b968:	61fb      	str	r3, [r7, #28]
 800b96a:	e052      	b.n	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	2b80      	cmp	r3, #128	; 0x80
 800b970:	d003      	beq.n	800b97a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b978:	d109      	bne.n	800b98e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b97a:	4b29      	ldr	r3, [pc, #164]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b986:	d144      	bne.n	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800b988:	4b27      	ldr	r3, [pc, #156]	; (800ba28 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800b98a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b98c:	e041      	b.n	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	2b20      	cmp	r3, #32
 800b992:	d003      	beq.n	800b99c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b99a:	d13a      	bne.n	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800b99c:	4b20      	ldr	r3, [pc, #128]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9a8:	d133      	bne.n	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b9aa:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d02d      	beq.n	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800b9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	091b      	lsrs	r3, r3, #4
 800b9bc:	f003 030f 	and.w	r3, r3, #15
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b9ca:	4b15      	ldr	r3, [pc, #84]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	0a1b      	lsrs	r3, r3, #8
 800b9d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9d4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800b9d6:	4b12      	ldr	r3, [pc, #72]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	0edb      	lsrs	r3, r3, #27
 800b9dc:	f003 031f 	and.w	r3, r3, #31
 800b9e0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10a      	bne.n	800b9fe <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800b9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ba20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800b9f4:	2311      	movs	r3, #17
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e001      	b.n	800b9fe <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800b9fa:	2307      	movs	r3, #7
 800b9fc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	fb03 f202 	mul.w	r2, r3, r2
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba0c:	61fb      	str	r3, [r7, #28]
 800ba0e:	e000      	b.n	800ba12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ba10:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800ba12:	69fb      	ldr	r3, [r7, #28]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3724      	adds	r7, #36	; 0x24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	40021000 	.word	0x40021000
 800ba24:	001fff68 	.word	0x001fff68
 800ba28:	00f42400 	.word	0x00f42400

0800ba2c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d904      	bls.n	800ba4a <HAL_SAI_InitProtocol+0x1e>
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	3b03      	subs	r3, #3
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d812      	bhi.n	800ba6e <HAL_SAI_InitProtocol+0x42>
 800ba48:	e008      	b.n	800ba5c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f9fb 	bl	800be4c <SAI_InitI2S>
 800ba56:	4603      	mov	r3, r0
 800ba58:	75fb      	strb	r3, [r7, #23]
      break;
 800ba5a:	e00b      	b.n	800ba74 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	68b9      	ldr	r1, [r7, #8]
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f000 faa4 	bl	800bfb0 <SAI_InitPCM>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba6c:	e002      	b.n	800ba74 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	75fb      	strb	r3, [r7, #23]
      break;
 800ba72:	bf00      	nop
  }

  if (status == HAL_OK)
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d104      	bne.n	800ba84 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 f808 	bl	800ba90 <HAL_SAI_Init>
 800ba80:	4603      	mov	r3, r0
 800ba82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	; 0x28
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d101      	bne.n	800baa2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e1c7      	b.n	800be32 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d10e      	bne.n	800baca <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a81      	ldr	r2, [pc, #516]	; (800bcb8 <HAL_SAI_Init+0x228>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d107      	bne.n	800bac6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800baba:	2b01      	cmp	r3, #1
 800babc:	d103      	bne.n	800bac6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e1b3      	b.n	800be32 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d106      	bne.n	800bae4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7f8 fe64 	bl	80047ac <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fae5 	bl	800c0b4 <SAI_Disable>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e19e      	b.n	800be32 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2202      	movs	r2, #2
 800baf8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d00c      	beq.n	800bb1e <HAL_SAI_Init+0x8e>
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d80d      	bhi.n	800bb24 <HAL_SAI_Init+0x94>
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <HAL_SAI_Init+0x82>
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d003      	beq.n	800bb18 <HAL_SAI_Init+0x88>
 800bb10:	e008      	b.n	800bb24 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bb16:	e008      	b.n	800bb2a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bb18:	2310      	movs	r3, #16
 800bb1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bb1c:	e005      	b.n	800bb2a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bb1e:	2320      	movs	r3, #32
 800bb20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bb22:	e002      	b.n	800bb2a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bb28:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d81d      	bhi.n	800bb6e <HAL_SAI_Init+0xde>
 800bb32:	a201      	add	r2, pc, #4	; (adr r2, 800bb38 <HAL_SAI_Init+0xa8>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bb49 	.word	0x0800bb49
 800bb3c:	0800bb4f 	.word	0x0800bb4f
 800bb40:	0800bb57 	.word	0x0800bb57
 800bb44:	0800bb5f 	.word	0x0800bb5f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	61fb      	str	r3, [r7, #28]
      break;
 800bb4c:	e012      	b.n	800bb74 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bb4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb52:	61fb      	str	r3, [r7, #28]
      break;
 800bb54:	e00e      	b.n	800bb74 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bb56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb5a:	61fb      	str	r3, [r7, #28]
      break;
 800bb5c:	e00a      	b.n	800bb74 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bb5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb62:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	f043 0301 	orr.w	r3, r3, #1
 800bb6a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bb6c:	e002      	b.n	800bb74 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	61fb      	str	r3, [r7, #28]
      break;
 800bb72:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a4f      	ldr	r2, [pc, #316]	; (800bcb8 <HAL_SAI_Init+0x228>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d004      	beq.n	800bb88 <HAL_SAI_Init+0xf8>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a4e      	ldr	r2, [pc, #312]	; (800bcbc <HAL_SAI_Init+0x22c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d103      	bne.n	800bb90 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800bb88:	4a4d      	ldr	r2, [pc, #308]	; (800bcc0 <HAL_SAI_Init+0x230>)
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	e002      	b.n	800bb96 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bb90:	4a4c      	ldr	r2, [pc, #304]	; (800bcc4 <HAL_SAI_Init+0x234>)
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	69db      	ldr	r3, [r3, #28]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d073      	beq.n	800bc86 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a45      	ldr	r2, [pc, #276]	; (800bcb8 <HAL_SAI_Init+0x228>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d004      	beq.n	800bbb2 <HAL_SAI_Init+0x122>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a43      	ldr	r2, [pc, #268]	; (800bcbc <HAL_SAI_Init+0x22c>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d105      	bne.n	800bbbe <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bbb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bbb6:	f7fe fd0d 	bl	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bbba:	61b8      	str	r0, [r7, #24]
 800bbbc:	e004      	b.n	800bbc8 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bbbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bbc2:	f7fe fd07 	bl	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bbc6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bbd0:	d120      	bne.n	800bc14 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d102      	bne.n	800bbe0 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800bbda:	2340      	movs	r3, #64	; 0x40
 800bbdc:	613b      	str	r3, [r7, #16]
 800bbde:	e00a      	b.n	800bbf6 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe4:	2b08      	cmp	r3, #8
 800bbe6:	d103      	bne.n	800bbf0 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800bbe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbec:	613b      	str	r3, [r7, #16]
 800bbee:	e002      	b.n	800bbf6 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800bbf6:	69ba      	ldr	r2, [r7, #24]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	005b      	lsls	r3, r3, #1
 800bc00:	4619      	mov	r1, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	fb02 f303 	mul.w	r3, r2, r3
 800bc0c:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc10:	617b      	str	r3, [r7, #20]
 800bc12:	e017      	b.n	800bc44 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc1c:	d101      	bne.n	800bc22 <HAL_SAI_Init+0x192>
 800bc1e:	2302      	movs	r3, #2
 800bc20:	e000      	b.n	800bc24 <HAL_SAI_Init+0x194>
 800bc22:	2301      	movs	r3, #1
 800bc24:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800bc26:	69ba      	ldr	r2, [r7, #24]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	4619      	mov	r1, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	fb02 f303 	mul.w	r3, r2, r3
 800bc3c:	021b      	lsls	r3, r3, #8
 800bc3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc42:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	4a20      	ldr	r2, [pc, #128]	; (800bcc8 <HAL_SAI_Init+0x238>)
 800bc48:	fba2 2303 	umull	r2, r3, r2, r3
 800bc4c:	08da      	lsrs	r2, r3, #3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800bc52:	6979      	ldr	r1, [r7, #20]
 800bc54:	4b1c      	ldr	r3, [pc, #112]	; (800bcc8 <HAL_SAI_Init+0x238>)
 800bc56:	fba3 2301 	umull	r2, r3, r3, r1
 800bc5a:	08da      	lsrs	r2, r3, #3
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	1aca      	subs	r2, r1, r3
 800bc66:	2a08      	cmp	r2, #8
 800bc68:	d904      	bls.n	800bc74 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	1c5a      	adds	r2, r3, #1
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc78:	2b04      	cmp	r3, #4
 800bc7a:	d104      	bne.n	800bc86 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	085a      	lsrs	r2, r3, #1
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <HAL_SAI_Init+0x206>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d109      	bne.n	800bcaa <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d101      	bne.n	800bca2 <HAL_SAI_Init+0x212>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e001      	b.n	800bca6 <HAL_SAI_Init+0x216>
 800bca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bca6:	623b      	str	r3, [r7, #32]
 800bca8:	e012      	b.n	800bcd0 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d10c      	bne.n	800bccc <HAL_SAI_Init+0x23c>
 800bcb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcb6:	e00a      	b.n	800bcce <HAL_SAI_Init+0x23e>
 800bcb8:	40015404 	.word	0x40015404
 800bcbc:	40015424 	.word	0x40015424
 800bcc0:	40015400 	.word	0x40015400
 800bcc4:	40015800 	.word	0x40015800
 800bcc8:	cccccccd 	.word	0xcccccccd
 800bccc:	2300      	movs	r3, #0
 800bcce:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6819      	ldr	r1, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	4b58      	ldr	r3, [pc, #352]	; (800be3c <HAL_SAI_Init+0x3ac>)
 800bcdc:	400b      	ands	r3, r1
 800bcde:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6819      	ldr	r1, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bcf4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800bd08:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bd14:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	051b      	lsls	r3, r3, #20
 800bd1c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bd22:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	430a      	orrs	r2, r1
 800bd2a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	6812      	ldr	r2, [r2, #0]
 800bd36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800bd3a:	f023 030f 	bic.w	r3, r3, #15
 800bd3e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6859      	ldr	r1, [r3, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	699a      	ldr	r2, [r3, #24]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4e:	431a      	orrs	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd54:	431a      	orrs	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6899      	ldr	r1, [r3, #8]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	4b35      	ldr	r3, [pc, #212]	; (800be40 <HAL_SAI_Init+0x3b0>)
 800bd6a:	400b      	ands	r3, r1
 800bd6c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6899      	ldr	r1, [r3, #8]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd78:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bd7e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 800bd84:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800bd8a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd90:	3b01      	subs	r3, #1
 800bd92:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bd94:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68d9      	ldr	r1, [r3, #12]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	f24f 0320 	movw	r3, #61472	; 0xf020
 800bdac:	400b      	ands	r3, r1
 800bdae:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68d9      	ldr	r1, [r3, #12]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdbe:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bdc6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	021b      	lsls	r3, r3, #8
 800bdd0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a19      	ldr	r2, [pc, #100]	; (800be44 <HAL_SAI_Init+0x3b4>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d119      	bne.n	800be18 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bde4:	4b18      	ldr	r3, [pc, #96]	; (800be48 <HAL_SAI_Init+0x3b8>)
 800bde6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bde8:	4a17      	ldr	r2, [pc, #92]	; (800be48 <HAL_SAI_Init+0x3b8>)
 800bdea:	f023 0301 	bic.w	r3, r3, #1
 800bdee:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d10e      	bne.n	800be18 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be02:	3b01      	subs	r3, #1
 800be04:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800be06:	4910      	ldr	r1, [pc, #64]	; (800be48 <HAL_SAI_Init+0x3b8>)
 800be08:	4313      	orrs	r3, r2
 800be0a:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800be0c:	4b0e      	ldr	r3, [pc, #56]	; (800be48 <HAL_SAI_Init+0x3b8>)
 800be0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be10:	4a0d      	ldr	r2, [pc, #52]	; (800be48 <HAL_SAI_Init+0x3b8>)
 800be12:	f043 0301 	orr.w	r3, r3, #1
 800be16:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3728      	adds	r7, #40	; 0x28
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	f805c010 	.word	0xf805c010
 800be40:	fff88000 	.word	0xfff88000
 800be44:	40015404 	.word	0x40015404
 800be48:	40015400 	.word	0x40015400

0800be4c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <SAI_InitI2S+0x2e>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	2b02      	cmp	r3, #2
 800be78:	d103      	bne.n	800be82 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	64da      	str	r2, [r3, #76]	; 0x4c
 800be80:	e002      	b.n	800be88 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2201      	movs	r2, #1
 800be86:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800be8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be96:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e077      	b.n	800bfa2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d107      	bne.n	800bec8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bec4:	661a      	str	r2, [r3, #96]	; 0x60
 800bec6:	e006      	b.n	800bed6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bece:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b03      	cmp	r3, #3
 800beda:	d84f      	bhi.n	800bf7c <SAI_InitI2S+0x130>
 800bedc:	a201      	add	r2, pc, #4	; (adr r2, 800bee4 <SAI_InitI2S+0x98>)
 800bede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee2:	bf00      	nop
 800bee4:	0800bef5 	.word	0x0800bef5
 800bee8:	0800bf17 	.word	0x0800bf17
 800beec:	0800bf39 	.word	0x0800bf39
 800bef0:	0800bf5b 	.word	0x0800bf5b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2280      	movs	r2, #128	; 0x80
 800bef8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	085b      	lsrs	r3, r3, #1
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	085b      	lsrs	r3, r3, #1
 800bf08:	011a      	lsls	r2, r3, #4
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2240      	movs	r2, #64	; 0x40
 800bf12:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800bf14:	e035      	b.n	800bf82 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2280      	movs	r2, #128	; 0x80
 800bf1a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	085b      	lsrs	r3, r3, #1
 800bf20:	019a      	lsls	r2, r3, #6
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	085b      	lsrs	r3, r3, #1
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2280      	movs	r2, #128	; 0x80
 800bf34:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800bf36:	e024      	b.n	800bf82 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	22c0      	movs	r2, #192	; 0xc0
 800bf3c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	085b      	lsrs	r3, r3, #1
 800bf42:	019a      	lsls	r2, r3, #6
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	085b      	lsrs	r3, r3, #1
 800bf4c:	015a      	lsls	r2, r3, #5
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2280      	movs	r2, #128	; 0x80
 800bf56:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800bf58:	e013      	b.n	800bf82 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	22e0      	movs	r2, #224	; 0xe0
 800bf5e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	085b      	lsrs	r3, r3, #1
 800bf64:	019a      	lsls	r2, r3, #6
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	085b      	lsrs	r3, r3, #1
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2280      	movs	r2, #128	; 0x80
 800bf78:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800bf7a:	e002      	b.n	800bf82 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf80:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d10b      	bne.n	800bfa0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d102      	bne.n	800bf94 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2210      	movs	r2, #16
 800bf92:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d102      	bne.n	800bfa0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2208      	movs	r2, #8
 800bf9e:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	371c      	adds	r7, #28
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop

0800bfb0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b087      	sub	sp, #28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d003      	beq.n	800bfde <SAI_InitPCM+0x2e>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d103      	bne.n	800bfe6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	64da      	str	r2, [r3, #76]	; 0x4c
 800bfe4:	e002      	b.n	800bfec <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bff8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c000:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c014:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b04      	cmp	r3, #4
 800c01a:	d103      	bne.n	800c024 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2201      	movs	r2, #1
 800c020:	655a      	str	r2, [r3, #84]	; 0x54
 800c022:	e002      	b.n	800c02a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	220d      	movs	r2, #13
 800c028:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d837      	bhi.n	800c0a0 <SAI_InitPCM+0xf0>
 800c030:	a201      	add	r2, pc, #4	; (adr r2, 800c038 <SAI_InitPCM+0x88>)
 800c032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c036:	bf00      	nop
 800c038:	0800c049 	.word	0x0800c049
 800c03c:	0800c05f 	.word	0x0800c05f
 800c040:	0800c075 	.word	0x0800c075
 800c044:	0800c08b 	.word	0x0800c08b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2280      	movs	r2, #128	; 0x80
 800c04c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	011a      	lsls	r2, r3, #4
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2240      	movs	r2, #64	; 0x40
 800c05a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800c05c:	e023      	b.n	800c0a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2280      	movs	r2, #128	; 0x80
 800c062:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2280      	movs	r2, #128	; 0x80
 800c070:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800c072:	e018      	b.n	800c0a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	22c0      	movs	r2, #192	; 0xc0
 800c078:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	015a      	lsls	r2, r3, #5
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2280      	movs	r2, #128	; 0x80
 800c086:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800c088:	e00d      	b.n	800c0a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	22e0      	movs	r2, #224	; 0xe0
 800c08e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2280      	movs	r2, #128	; 0x80
 800c09c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800c09e:	e002      	b.n	800c0a6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0a4:	bf00      	nop
  }

  return status;
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	371c      	adds	r7, #28
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c0bc:	4b18      	ldr	r3, [pc, #96]	; (800c120 <SAI_Disable+0x6c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a18      	ldr	r2, [pc, #96]	; (800c124 <SAI_Disable+0x70>)
 800c0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c6:	0b1b      	lsrs	r3, r3, #12
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c0de:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10a      	bne.n	800c0fc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	72fb      	strb	r3, [r7, #11]
      break;
 800c0fa:	e009      	b.n	800c110 <SAI_Disable+0x5c>
    }
    count--;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1e7      	bne.n	800c0e0 <SAI_Disable+0x2c>

  return status;
 800c110:	7afb      	ldrb	r3, [r7, #11]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3714      	adds	r7, #20
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	2000002c 	.word	0x2000002c
 800c124:	95cbec1b 	.word	0x95cbec1b

0800c128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d101      	bne.n	800c13a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	e095      	b.n	800c266 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d108      	bne.n	800c154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c14a:	d009      	beq.n	800c160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	61da      	str	r2, [r3, #28]
 800c152:	e005      	b.n	800c160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7f8 f8ba 	bl	80042f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c196:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c1a0:	d902      	bls.n	800c1a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	e002      	b.n	800c1ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c1a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c1b6:	d007      	beq.n	800c1c8 <HAL_SPI_Init+0xa0>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c1c0:	d002      	beq.n	800c1c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c1d8:	431a      	orrs	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0302 	and.w	r3, r3, #2
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	f003 0301 	and.w	r3, r3, #1
 800c1ec:	431a      	orrs	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1f6:	431a      	orrs	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c200:	431a      	orrs	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c20a:	ea42 0103 	orr.w	r1, r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	430a      	orrs	r2, r1
 800c21c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	0c1b      	lsrs	r3, r3, #16
 800c224:	f003 0204 	and.w	r2, r3, #4
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22c:	f003 0310 	and.w	r3, r3, #16
 800c230:	431a      	orrs	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c236:	f003 0308 	and.w	r3, r3, #8
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c244:	ea42 0103 	orr.w	r1, r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	430a      	orrs	r2, r1
 800c254:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b088      	sub	sp, #32
 800c272:	af00      	add	r7, sp, #0
 800c274:	60f8      	str	r0, [r7, #12]
 800c276:	60b9      	str	r1, [r7, #8]
 800c278:	603b      	str	r3, [r7, #0]
 800c27a:	4613      	mov	r3, r2
 800c27c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d101      	bne.n	800c290 <HAL_SPI_Transmit+0x22>
 800c28c:	2302      	movs	r3, #2
 800c28e:	e15f      	b.n	800c550 <HAL_SPI_Transmit+0x2e2>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c298:	f7fa fc82 	bl	8006ba0 <HAL_GetTick>
 800c29c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c29e:	88fb      	ldrh	r3, [r7, #6]
 800c2a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d002      	beq.n	800c2b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2b2:	e148      	b.n	800c546 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d002      	beq.n	800c2c0 <HAL_SPI_Transmit+0x52>
 800c2ba:	88fb      	ldrh	r3, [r7, #6]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2c4:	e13f      	b.n	800c546 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2203      	movs	r2, #3
 800c2ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	88fa      	ldrh	r2, [r7, #6]
 800c2de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	88fa      	ldrh	r2, [r7, #6]
 800c2e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2200      	movs	r2, #0
 800c306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c310:	d10f      	bne.n	800c332 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33c:	2b40      	cmp	r3, #64	; 0x40
 800c33e:	d007      	beq.n	800c350 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c34e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c358:	d94f      	bls.n	800c3fa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <HAL_SPI_Transmit+0xfa>
 800c362:	8afb      	ldrh	r3, [r7, #22]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d142      	bne.n	800c3ee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36c:	881a      	ldrh	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c378:	1c9a      	adds	r2, r3, #2
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c382:	b29b      	uxth	r3, r3
 800c384:	3b01      	subs	r3, #1
 800c386:	b29a      	uxth	r2, r3
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c38c:	e02f      	b.n	800c3ee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	f003 0302 	and.w	r3, r3, #2
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d112      	bne.n	800c3c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a0:	881a      	ldrh	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ac:	1c9a      	adds	r2, r3, #2
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c3c0:	e015      	b.n	800c3ee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3c2:	f7fa fbed 	bl	8006ba0 <HAL_GetTick>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d803      	bhi.n	800c3da <HAL_SPI_Transmit+0x16c>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3d8:	d102      	bne.n	800c3e0 <HAL_SPI_Transmit+0x172>
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c3ec:	e0ab      	b.n	800c546 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1ca      	bne.n	800c38e <HAL_SPI_Transmit+0x120>
 800c3f8:	e080      	b.n	800c4fc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d002      	beq.n	800c408 <HAL_SPI_Transmit+0x19a>
 800c402:	8afb      	ldrh	r3, [r7, #22]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d174      	bne.n	800c4f2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d912      	bls.n	800c438 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c416:	881a      	ldrh	r2, [r3, #0]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c422:	1c9a      	adds	r2, r3, #2
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	3b02      	subs	r3, #2
 800c430:	b29a      	uxth	r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c436:	e05c      	b.n	800c4f2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	330c      	adds	r3, #12
 800c442:	7812      	ldrb	r2, [r2, #0]
 800c444:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c454:	b29b      	uxth	r3, r3
 800c456:	3b01      	subs	r3, #1
 800c458:	b29a      	uxth	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c45e:	e048      	b.n	800c4f2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	f003 0302 	and.w	r3, r3, #2
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d12b      	bne.n	800c4c6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c472:	b29b      	uxth	r3, r3
 800c474:	2b01      	cmp	r3, #1
 800c476:	d912      	bls.n	800c49e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47c:	881a      	ldrh	r2, [r3, #0]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c488:	1c9a      	adds	r2, r3, #2
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c492:	b29b      	uxth	r3, r3
 800c494:	3b02      	subs	r3, #2
 800c496:	b29a      	uxth	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c49c:	e029      	b.n	800c4f2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	330c      	adds	r3, #12
 800c4a8:	7812      	ldrb	r2, [r2, #0]
 800c4aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b0:	1c5a      	adds	r2, r3, #1
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c4c4:	e015      	b.n	800c4f2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4c6:	f7fa fb6b 	bl	8006ba0 <HAL_GetTick>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d803      	bhi.n	800c4de <HAL_SPI_Transmit+0x270>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4dc:	d102      	bne.n	800c4e4 <HAL_SPI_Transmit+0x276>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d106      	bne.n	800c4f2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c4f0:	e029      	b.n	800c546 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1b1      	bne.n	800c460 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f001 fa0d 	bl	800d920 <SPI_EndRxTxTransaction>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d002      	beq.n	800c512 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2220      	movs	r2, #32
 800c510:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10a      	bne.n	800c530 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c51a:	2300      	movs	r3, #0
 800c51c:	613b      	str	r3, [r7, #16]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	613b      	str	r3, [r7, #16]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	613b      	str	r3, [r7, #16]
 800c52e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	77fb      	strb	r3, [r7, #31]
 800c53c:	e003      	b.n	800c546 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c54e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3720      	adds	r7, #32
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af02      	add	r7, sp, #8
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	4613      	mov	r3, r2
 800c566:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c568:	2300      	movs	r3, #0
 800c56a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c572:	b2db      	uxtb	r3, r3
 800c574:	2b01      	cmp	r3, #1
 800c576:	d002      	beq.n	800c57e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800c578:	2302      	movs	r3, #2
 800c57a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c57c:	e11a      	b.n	800c7b4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c586:	d112      	bne.n	800c5ae <HAL_SPI_Receive+0x56>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10e      	bne.n	800c5ae <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2204      	movs	r2, #4
 800c594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c598:	88fa      	ldrh	r2, [r7, #6]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 f90e 	bl	800c7c6 <HAL_SPI_TransmitReceive>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	e107      	b.n	800c7be <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d101      	bne.n	800c5bc <HAL_SPI_Receive+0x64>
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	e100      	b.n	800c7be <HAL_SPI_Receive+0x266>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5c4:	f7fa faec 	bl	8006ba0 <HAL_GetTick>
 800c5c8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <HAL_SPI_Receive+0x7e>
 800c5d0:	88fb      	ldrh	r3, [r7, #6]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d102      	bne.n	800c5dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c5da:	e0eb      	b.n	800c7b4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2204      	movs	r2, #4
 800c5e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	88fa      	ldrh	r2, [r7, #6]
 800c5f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	88fa      	ldrh	r2, [r7, #6]
 800c5fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2200      	movs	r2, #0
 800c604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2200      	movs	r2, #0
 800c616:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c626:	d908      	bls.n	800c63a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c636:	605a      	str	r2, [r3, #4]
 800c638:	e007      	b.n	800c64a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c648:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c652:	d10f      	bne.n	800c674 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c662:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c672:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67e:	2b40      	cmp	r3, #64	; 0x40
 800c680:	d007      	beq.n	800c692 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c690:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c69a:	d86f      	bhi.n	800c77c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c69c:	e034      	b.n	800c708 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d117      	bne.n	800c6dc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f103 020c 	add.w	r2, r3, #12
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b8:	7812      	ldrb	r2, [r2, #0]
 800c6ba:	b2d2      	uxtb	r2, r2
 800c6bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c6da:	e015      	b.n	800c708 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6dc:	f7fa fa60 	bl	8006ba0 <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d803      	bhi.n	800c6f4 <HAL_SPI_Receive+0x19c>
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f2:	d102      	bne.n	800c6fa <HAL_SPI_Receive+0x1a2>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d106      	bne.n	800c708 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2201      	movs	r2, #1
 800c702:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c706:	e055      	b.n	800c7b4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c70e:	b29b      	uxth	r3, r3
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1c4      	bne.n	800c69e <HAL_SPI_Receive+0x146>
 800c714:	e038      	b.n	800c788 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b01      	cmp	r3, #1
 800c722:	d115      	bne.n	800c750 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68da      	ldr	r2, [r3, #12]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72e:	b292      	uxth	r2, r2
 800c730:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	1c9a      	adds	r2, r3, #2
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c742:	b29b      	uxth	r3, r3
 800c744:	3b01      	subs	r3, #1
 800c746:	b29a      	uxth	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c74e:	e015      	b.n	800c77c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c750:	f7fa fa26 	bl	8006ba0 <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d803      	bhi.n	800c768 <HAL_SPI_Receive+0x210>
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c766:	d102      	bne.n	800c76e <HAL_SPI_Receive+0x216>
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800c76e:	2303      	movs	r3, #3
 800c770:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c77a:	e01b      	b.n	800c7b4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c782:	b29b      	uxth	r3, r3
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1c6      	bne.n	800c716 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f001 f86f 	bl	800d870 <SPI_EndRxTransaction>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2220      	movs	r2, #32
 800c79c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	75fb      	strb	r3, [r7, #23]
 800c7aa:	e003      	b.n	800c7b4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b08a      	sub	sp, #40	; 0x28
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	60f8      	str	r0, [r7, #12]
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	607a      	str	r2, [r7, #4]
 800c7d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d101      	bne.n	800c7ec <HAL_SPI_TransmitReceive+0x26>
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	e20a      	b.n	800cc02 <HAL_SPI_TransmitReceive+0x43c>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7f4:	f7fa f9d4 	bl	8006ba0 <HAL_GetTick>
 800c7f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c800:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c808:	887b      	ldrh	r3, [r7, #2]
 800c80a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c80c:	887b      	ldrh	r3, [r7, #2]
 800c80e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c810:	7efb      	ldrb	r3, [r7, #27]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d00e      	beq.n	800c834 <HAL_SPI_TransmitReceive+0x6e>
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c81c:	d106      	bne.n	800c82c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d102      	bne.n	800c82c <HAL_SPI_TransmitReceive+0x66>
 800c826:	7efb      	ldrb	r3, [r7, #27]
 800c828:	2b04      	cmp	r3, #4
 800c82a:	d003      	beq.n	800c834 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c82c:	2302      	movs	r3, #2
 800c82e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c832:	e1e0      	b.n	800cbf6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d005      	beq.n	800c846 <HAL_SPI_TransmitReceive+0x80>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d002      	beq.n	800c846 <HAL_SPI_TransmitReceive+0x80>
 800c840:	887b      	ldrh	r3, [r7, #2]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d103      	bne.n	800c84e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c846:	2301      	movs	r3, #1
 800c848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c84c:	e1d3      	b.n	800cbf6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b04      	cmp	r3, #4
 800c858:	d003      	beq.n	800c862 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2205      	movs	r2, #5
 800c85e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	887a      	ldrh	r2, [r7, #2]
 800c872:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	887a      	ldrh	r2, [r7, #2]
 800c87a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	887a      	ldrh	r2, [r7, #2]
 800c888:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	887a      	ldrh	r2, [r7, #2]
 800c88e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8a4:	d802      	bhi.n	800c8ac <HAL_SPI_TransmitReceive+0xe6>
 800c8a6:	8a3b      	ldrh	r3, [r7, #16]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d908      	bls.n	800c8be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c8ba:	605a      	str	r2, [r3, #4]
 800c8bc:	e007      	b.n	800c8ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c8cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d8:	2b40      	cmp	r3, #64	; 0x40
 800c8da:	d007      	beq.n	800c8ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8f4:	f240 8081 	bls.w	800c9fa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <HAL_SPI_TransmitReceive+0x140>
 800c900:	8a7b      	ldrh	r3, [r7, #18]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d16d      	bne.n	800c9e2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c90a:	881a      	ldrh	r2, [r3, #0]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c916:	1c9a      	adds	r2, r3, #2
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c920:	b29b      	uxth	r3, r3
 800c922:	3b01      	subs	r3, #1
 800c924:	b29a      	uxth	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c92a:	e05a      	b.n	800c9e2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	f003 0302 	and.w	r3, r3, #2
 800c936:	2b02      	cmp	r3, #2
 800c938:	d11b      	bne.n	800c972 <HAL_SPI_TransmitReceive+0x1ac>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c93e:	b29b      	uxth	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d016      	beq.n	800c972 <HAL_SPI_TransmitReceive+0x1ac>
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	2b01      	cmp	r3, #1
 800c948:	d113      	bne.n	800c972 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94e:	881a      	ldrh	r2, [r3, #0]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95a:	1c9a      	adds	r2, r3, #2
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c964:	b29b      	uxth	r3, r3
 800c966:	3b01      	subs	r3, #1
 800c968:	b29a      	uxth	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	f003 0301 	and.w	r3, r3, #1
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d11c      	bne.n	800c9ba <HAL_SPI_TransmitReceive+0x1f4>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c986:	b29b      	uxth	r3, r3
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d016      	beq.n	800c9ba <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68da      	ldr	r2, [r3, #12]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c996:	b292      	uxth	r2, r2
 800c998:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99e:	1c9a      	adds	r2, r3, #2
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c9ba:	f7fa f8f1 	bl	8006ba0 <HAL_GetTick>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d80b      	bhi.n	800c9e2 <HAL_SPI_TransmitReceive+0x21c>
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9d0:	d007      	beq.n	800c9e2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800c9e0:	e109      	b.n	800cbf6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d19f      	bne.n	800c92c <HAL_SPI_TransmitReceive+0x166>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d199      	bne.n	800c92c <HAL_SPI_TransmitReceive+0x166>
 800c9f8:	e0e3      	b.n	800cbc2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d003      	beq.n	800ca0a <HAL_SPI_TransmitReceive+0x244>
 800ca02:	8a7b      	ldrh	r3, [r7, #18]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	f040 80cf 	bne.w	800cba8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d912      	bls.n	800ca3a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca18:	881a      	ldrh	r2, [r3, #0]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca24:	1c9a      	adds	r2, r3, #2
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	3b02      	subs	r3, #2
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ca38:	e0b6      	b.n	800cba8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	330c      	adds	r3, #12
 800ca44:	7812      	ldrb	r2, [r2, #0]
 800ca46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4c:	1c5a      	adds	r2, r3, #1
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca60:	e0a2      	b.n	800cba8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	f003 0302 	and.w	r3, r3, #2
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d134      	bne.n	800cada <HAL_SPI_TransmitReceive+0x314>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d02f      	beq.n	800cada <HAL_SPI_TransmitReceive+0x314>
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d12c      	bne.n	800cada <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d912      	bls.n	800cab0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8e:	881a      	ldrh	r2, [r3, #0]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9a:	1c9a      	adds	r2, r3, #2
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	3b02      	subs	r3, #2
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800caae:	e012      	b.n	800cad6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	330c      	adds	r3, #12
 800caba:	7812      	ldrb	r2, [r2, #0]
 800cabc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac2:	1c5a      	adds	r2, r3, #1
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cacc:	b29b      	uxth	r3, r3
 800cace:	3b01      	subs	r3, #1
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cad6:	2300      	movs	r3, #0
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d148      	bne.n	800cb7a <HAL_SPI_TransmitReceive+0x3b4>
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800caee:	b29b      	uxth	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d042      	beq.n	800cb7a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d923      	bls.n	800cb48 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68da      	ldr	r2, [r3, #12]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0a:	b292      	uxth	r2, r2
 800cb0c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb12:	1c9a      	adds	r2, r3, #2
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	3b02      	subs	r3, #2
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d81f      	bhi.n	800cb76 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb44:	605a      	str	r2, [r3, #4]
 800cb46:	e016      	b.n	800cb76 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f103 020c 	add.w	r2, r3, #12
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb54:	7812      	ldrb	r2, [r2, #0]
 800cb56:	b2d2      	uxtb	r2, r2
 800cb58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cb76:	2301      	movs	r3, #1
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cb7a:	f7fa f811 	bl	8006ba0 <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d803      	bhi.n	800cb92 <HAL_SPI_TransmitReceive+0x3cc>
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb90:	d102      	bne.n	800cb98 <HAL_SPI_TransmitReceive+0x3d2>
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d107      	bne.n	800cba8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800cb98:	2303      	movs	r3, #3
 800cb9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800cba6:	e026      	b.n	800cbf6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f47f af57 	bne.w	800ca62 <HAL_SPI_TransmitReceive+0x29c>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f47f af50 	bne.w	800ca62 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cbc2:	69fa      	ldr	r2, [r7, #28]
 800cbc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbc6:	68f8      	ldr	r0, [r7, #12]
 800cbc8:	f000 feaa 	bl	800d920 <SPI_EndRxTxTransaction>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d005      	beq.n	800cbde <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2220      	movs	r2, #32
 800cbdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbec:	e003      	b.n	800cbf6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cbfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3728      	adds	r7, #40	; 0x28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
	...

0800cc0c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d101      	bne.n	800cc2c <HAL_SPI_Transmit_DMA+0x20>
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e0d4      	b.n	800cdd6 <HAL_SPI_Transmit_DMA+0x1ca>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d002      	beq.n	800cc46 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800cc40:	2302      	movs	r3, #2
 800cc42:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc44:	e0c2      	b.n	800cdcc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d002      	beq.n	800cc52 <HAL_SPI_Transmit_DMA+0x46>
 800cc4c:	88fb      	ldrh	r3, [r7, #6]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d102      	bne.n	800cc58 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800cc52:	2301      	movs	r3, #1
 800cc54:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc56:	e0b9      	b.n	800cdcc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	88fa      	ldrh	r2, [r7, #6]
 800cc70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	88fa      	ldrh	r2, [r7, #6]
 800cc76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cca2:	d10f      	bne.n	800ccc4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ccc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccc8:	4a45      	ldr	r2, [pc, #276]	; (800cde0 <HAL_SPI_Transmit_DMA+0x1d4>)
 800ccca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd0:	4a44      	ldr	r2, [pc, #272]	; (800cde4 <HAL_SPI_Transmit_DMA+0x1d8>)
 800ccd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd8:	4a43      	ldr	r2, [pc, #268]	; (800cde8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800ccda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce0:	2200      	movs	r2, #0
 800cce2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	685a      	ldr	r2, [r3, #4]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ccf2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccfc:	d82d      	bhi.n	800cd5a <HAL_SPI_Transmit_DMA+0x14e>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd02:	699b      	ldr	r3, [r3, #24]
 800cd04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd08:	d127      	bne.n	800cd5a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	f003 0301 	and.w	r3, r3, #1
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10f      	bne.n	800cd38 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd26:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	085b      	lsrs	r3, r3, #1
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cd36:	e010      	b.n	800cd5a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd46:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	085b      	lsrs	r3, r3, #1
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	3301      	adds	r3, #1
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd62:	4619      	mov	r1, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	330c      	adds	r3, #12
 800cd6a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd70:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cd72:	f7fb f8d2 	bl	8007f1a <HAL_DMA_Start_IT>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d008      	beq.n	800cd8e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd80:	f043 0210 	orr.w	r2, r3, #16
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cd8c:	e01e      	b.n	800cdcc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd98:	2b40      	cmp	r3, #64	; 0x40
 800cd9a:	d007      	beq.n	800cdac <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdaa:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f042 0220 	orr.w	r2, r2, #32
 800cdba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685a      	ldr	r2, [r3, #4]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f042 0202 	orr.w	r2, r2, #2
 800cdca:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	0800d59f 	.word	0x0800d59f
 800cde4:	0800d3c1 	.word	0x0800d3c1
 800cde8:	0800d5f3 	.word	0x0800d5f3

0800cdec <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d002      	beq.n	800ce10 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800ce0a:	2302      	movs	r3, #2
 800ce0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce0e:	e0fe      	b.n	800d00e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d110      	bne.n	800ce3a <HAL_SPI_Receive_DMA+0x4e>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce20:	d10b      	bne.n	800ce3a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2204      	movs	r2, #4
 800ce26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ce2a:	88fb      	ldrh	r3, [r7, #6]
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	68b9      	ldr	r1, [r7, #8]
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f000 f8fb 	bl	800d02c <HAL_SPI_TransmitReceive_DMA>
 800ce36:	4603      	mov	r3, r0
 800ce38:	e0ee      	b.n	800d018 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d101      	bne.n	800ce48 <HAL_SPI_Receive_DMA+0x5c>
 800ce44:	2302      	movs	r3, #2
 800ce46:	e0e7      	b.n	800d018 <HAL_SPI_Receive_DMA+0x22c>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d002      	beq.n	800ce5c <HAL_SPI_Receive_DMA+0x70>
 800ce56:	88fb      	ldrh	r3, [r7, #6]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d102      	bne.n	800ce62 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce60:	e0d5      	b.n	800d00e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2204      	movs	r2, #4
 800ce66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	88fa      	ldrh	r2, [r7, #6]
 800ce7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	88fa      	ldrh	r2, [r7, #6]
 800ce82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2200      	movs	r2, #0
 800ce96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cea6:	d10f      	bne.n	800cec8 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cec6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ced6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cee0:	d908      	bls.n	800cef4 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	685a      	ldr	r2, [r3, #4]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cef0:	605a      	str	r2, [r3, #4]
 800cef2:	e042      	b.n	800cf7a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cf02:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf0e:	d134      	bne.n	800cf7a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf1e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	f003 0301 	and.w	r3, r3, #1
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d111      	bne.n	800cf54 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf3e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	085b      	lsrs	r3, r3, #1
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cf52:	e012      	b.n	800cf7a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	685a      	ldr	r2, [r3, #4]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf62:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	085b      	lsrs	r3, r3, #1
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	3301      	adds	r3, #1
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf7e:	4a28      	ldr	r2, [pc, #160]	; (800d020 <HAL_SPI_Receive_DMA+0x234>)
 800cf80:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf86:	4a27      	ldr	r2, [pc, #156]	; (800d024 <HAL_SPI_Receive_DMA+0x238>)
 800cf88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf8e:	4a26      	ldr	r2, [pc, #152]	; (800d028 <HAL_SPI_Receive_DMA+0x23c>)
 800cf90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf96:	2200      	movs	r2, #0
 800cf98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	330c      	adds	r3, #12
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfaa:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cfb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cfb4:	f7fa ffb1 	bl	8007f1a <HAL_DMA_Start_IT>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d008      	beq.n	800cfd0 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfc2:	f043 0210 	orr.w	r2, r3, #16
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cfce:	e01e      	b.n	800d00e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfda:	2b40      	cmp	r3, #64	; 0x40
 800cfdc:	d007      	beq.n	800cfee <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f042 0220 	orr.w	r2, r2, #32
 800cffc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	685a      	ldr	r2, [r3, #4]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f042 0201 	orr.w	r2, r2, #1
 800d00c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d016:	7dfb      	ldrb	r3, [r7, #23]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3718      	adds	r7, #24
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	0800d5bb 	.word	0x0800d5bb
 800d024:	0800d467 	.word	0x0800d467
 800d028:	0800d5f3 	.word	0x0800d5f3

0800d02c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
 800d038:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d03a:	2300      	movs	r3, #0
 800d03c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d044:	2b01      	cmp	r3, #1
 800d046:	d101      	bne.n	800d04c <HAL_SPI_TransmitReceive_DMA+0x20>
 800d048:	2302      	movs	r3, #2
 800d04a:	e164      	b.n	800d316 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d05a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800d062:	7dbb      	ldrb	r3, [r7, #22]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d00d      	beq.n	800d084 <HAL_SPI_TransmitReceive_DMA+0x58>
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d06e:	d106      	bne.n	800d07e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d102      	bne.n	800d07e <HAL_SPI_TransmitReceive_DMA+0x52>
 800d078:	7dbb      	ldrb	r3, [r7, #22]
 800d07a:	2b04      	cmp	r3, #4
 800d07c:	d002      	beq.n	800d084 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d07e:	2302      	movs	r3, #2
 800d080:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d082:	e143      	b.n	800d30c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d005      	beq.n	800d096 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d090:	887b      	ldrh	r3, [r7, #2]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d102      	bne.n	800d09c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d096:	2301      	movs	r3, #1
 800d098:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d09a:	e137      	b.n	800d30c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b04      	cmp	r3, #4
 800d0a6:	d003      	beq.n	800d0b0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2205      	movs	r2, #5
 800d0ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	68ba      	ldr	r2, [r7, #8]
 800d0ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	887a      	ldrh	r2, [r7, #2]
 800d0c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	887a      	ldrh	r2, [r7, #2]
 800d0c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	887a      	ldrh	r2, [r7, #2]
 800d0d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	887a      	ldrh	r2, [r7, #2]
 800d0da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800d0f8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d102:	d908      	bls.n	800d116 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	685a      	ldr	r2, [r3, #4]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d112:	605a      	str	r2, [r3, #4]
 800d114:	e06f      	b.n	800d1f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d124:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d130:	d126      	bne.n	800d180 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10f      	bne.n	800d15e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d14c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d152:	b29b      	uxth	r3, r3
 800d154:	085b      	lsrs	r3, r3, #1
 800d156:	b29a      	uxth	r2, r3
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d15c:	e010      	b.n	800d180 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	685a      	ldr	r2, [r3, #4]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d16c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d172:	b29b      	uxth	r3, r3
 800d174:	085b      	lsrs	r3, r3, #1
 800d176:	b29b      	uxth	r3, r3
 800d178:	3301      	adds	r3, #1
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d18a:	d134      	bne.n	800d1f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	685a      	ldr	r2, [r3, #4]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d19a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	f003 0301 	and.w	r3, r3, #1
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d111      	bne.n	800d1d0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d1ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	085b      	lsrs	r3, r3, #1
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d1ce:	e012      	b.n	800d1f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	685a      	ldr	r2, [r3, #4]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	085b      	lsrs	r3, r3, #1
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	2b04      	cmp	r3, #4
 800d200:	d108      	bne.n	800d214 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d206:	4a46      	ldr	r2, [pc, #280]	; (800d320 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800d208:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d20e:	4a45      	ldr	r2, [pc, #276]	; (800d324 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800d210:	62da      	str	r2, [r3, #44]	; 0x2c
 800d212:	e007      	b.n	800d224 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d218:	4a43      	ldr	r2, [pc, #268]	; (800d328 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800d21a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d220:	4a42      	ldr	r2, [pc, #264]	; (800d32c <HAL_SPI_TransmitReceive_DMA+0x300>)
 800d222:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d228:	4a41      	ldr	r2, [pc, #260]	; (800d330 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800d22a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d230:	2200      	movs	r2, #0
 800d232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	330c      	adds	r3, #12
 800d23e:	4619      	mov	r1, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d244:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d24c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d24e:	f7fa fe64 	bl	8007f1a <HAL_DMA_Start_IT>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d008      	beq.n	800d26a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d25c:	f043 0210 	orr.w	r2, r3, #16
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d268:	e050      	b.n	800d30c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f042 0201 	orr.w	r2, r2, #1
 800d278:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27e:	2200      	movs	r2, #0
 800d280:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d286:	2200      	movs	r2, #0
 800d288:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d28e:	2200      	movs	r2, #0
 800d290:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d296:	2200      	movs	r2, #0
 800d298:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	330c      	adds	r3, #12
 800d2aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d2b2:	f7fa fe32 	bl	8007f1a <HAL_DMA_Start_IT>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d008      	beq.n	800d2ce <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2c0:	f043 0210 	orr.w	r2, r3, #16
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d2cc:	e01e      	b.n	800d30c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d8:	2b40      	cmp	r3, #64	; 0x40
 800d2da:	d007      	beq.n	800d2ec <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2ea:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685a      	ldr	r2, [r3, #4]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f042 0220 	orr.w	r2, r2, #32
 800d2fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f042 0202 	orr.w	r2, r2, #2
 800d30a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d314:	7dfb      	ldrb	r3, [r7, #23]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	0800d5bb 	.word	0x0800d5bb
 800d324:	0800d467 	.word	0x0800d467
 800d328:	0800d5d7 	.word	0x0800d5d7
 800d32c:	0800d50f 	.word	0x0800d50f
 800d330:	0800d5f3 	.word	0x0800d5f3

0800d334 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d38c:	bf00      	nop
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d3a0:	bf00      	nop
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3ce:	f7f9 fbe7 	bl	8006ba0 <HAL_GetTick>
 800d3d2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 0320 	and.w	r3, r3, #32
 800d3de:	2b20      	cmp	r3, #32
 800d3e0:	d03b      	beq.n	800d45a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f022 0220 	bic.w	r2, r2, #32
 800d3f0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f022 0202 	bic.w	r2, r2, #2
 800d400:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d402:	693a      	ldr	r2, [r7, #16]
 800d404:	2164      	movs	r1, #100	; 0x64
 800d406:	6978      	ldr	r0, [r7, #20]
 800d408:	f000 fa8a 	bl	800d920 <SPI_EndRxTxTransaction>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d005      	beq.n	800d41e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d416:	f043 0220 	orr.w	r2, r3, #32
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10a      	bne.n	800d43c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	60fb      	str	r3, [r7, #12]
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	60fb      	str	r3, [r7, #12]
 800d43a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	2200      	movs	r2, #0
 800d440:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2201      	movs	r2, #1
 800d446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d003      	beq.n	800d45a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d452:	6978      	ldr	r0, [r7, #20]
 800d454:	f7ff ffaa 	bl	800d3ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d458:	e002      	b.n	800d460 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d45a:	6978      	ldr	r0, [r7, #20]
 800d45c:	f7ff ff6a 	bl	800d334 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d472:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d474:	f7f9 fb94 	bl	8006ba0 <HAL_GetTick>
 800d478:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 0320 	and.w	r3, r3, #32
 800d484:	2b20      	cmp	r3, #32
 800d486:	d03c      	beq.n	800d502 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f022 0220 	bic.w	r2, r2, #32
 800d496:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10d      	bne.n	800d4bc <SPI_DMAReceiveCplt+0x56>
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4a8:	d108      	bne.n	800d4bc <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f022 0203 	bic.w	r2, r2, #3
 800d4b8:	605a      	str	r2, [r3, #4]
 800d4ba:	e007      	b.n	800d4cc <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f022 0201 	bic.w	r2, r2, #1
 800d4ca:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	2164      	movs	r1, #100	; 0x64
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f000 f9cd 	bl	800d870 <SPI_EndRxTransaction>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2220      	movs	r2, #32
 800d4e0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d003      	beq.n	800d502 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f7ff ff56 	bl	800d3ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d500:	e002      	b.n	800d508 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f7ff ff20 	bl	800d348 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d51a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d51c:	f7f9 fb40 	bl	8006ba0 <HAL_GetTick>
 800d520:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 0320 	and.w	r3, r3, #32
 800d52c:	2b20      	cmp	r3, #32
 800d52e:	d030      	beq.n	800d592 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f022 0220 	bic.w	r2, r2, #32
 800d53e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	2164      	movs	r1, #100	; 0x64
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f000 f9eb 	bl	800d920 <SPI_EndRxTxTransaction>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d005      	beq.n	800d55c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d554:	f043 0220 	orr.w	r2, r3, #32
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	685a      	ldr	r2, [r3, #4]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f022 0203 	bic.w	r2, r2, #3
 800d56a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2200      	movs	r2, #0
 800d576:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d586:	2b00      	cmp	r3, #0
 800d588:	d003      	beq.n	800d592 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	f7ff ff0e 	bl	800d3ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d590:	e002      	b.n	800d598 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f7ff fee2 	bl	800d35c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b084      	sub	sp, #16
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5aa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f7ff fedf 	bl	800d370 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d5b2:	bf00      	nop
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7ff fedb 	bl	800d384 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d5ce:	bf00      	nop
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e2:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f7ff fed7 	bl	800d398 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d5ea:	bf00      	nop
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b084      	sub	sp, #16
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fe:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f022 0203 	bic.w	r2, r2, #3
 800d60e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d614:	f043 0210 	orr.w	r2, r3, #16
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f7ff fec1 	bl	800d3ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d62a:	bf00      	nop
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
	...

0800d634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b088      	sub	sp, #32
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	603b      	str	r3, [r7, #0]
 800d640:	4613      	mov	r3, r2
 800d642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d644:	f7f9 faac 	bl	8006ba0 <HAL_GetTick>
 800d648:	4602      	mov	r2, r0
 800d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64c:	1a9b      	subs	r3, r3, r2
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	4413      	add	r3, r2
 800d652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d654:	f7f9 faa4 	bl	8006ba0 <HAL_GetTick>
 800d658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d65a:	4b39      	ldr	r3, [pc, #228]	; (800d740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	015b      	lsls	r3, r3, #5
 800d660:	0d1b      	lsrs	r3, r3, #20
 800d662:	69fa      	ldr	r2, [r7, #28]
 800d664:	fb02 f303 	mul.w	r3, r2, r3
 800d668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d66a:	e054      	b.n	800d716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d672:	d050      	beq.n	800d716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d674:	f7f9 fa94 	bl	8006ba0 <HAL_GetTick>
 800d678:	4602      	mov	r2, r0
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	1ad3      	subs	r3, r2, r3
 800d67e:	69fa      	ldr	r2, [r7, #28]
 800d680:	429a      	cmp	r2, r3
 800d682:	d902      	bls.n	800d68a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d13d      	bne.n	800d706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	685a      	ldr	r2, [r3, #4]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6a2:	d111      	bne.n	800d6c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6ac:	d004      	beq.n	800d6b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6b6:	d107      	bne.n	800d6c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6d0:	d10f      	bne.n	800d6f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d6f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d702:	2303      	movs	r3, #3
 800d704:	e017      	b.n	800d736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d70c:	2300      	movs	r3, #0
 800d70e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	3b01      	subs	r3, #1
 800d714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	689a      	ldr	r2, [r3, #8]
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	4013      	ands	r3, r2
 800d720:	68ba      	ldr	r2, [r7, #8]
 800d722:	429a      	cmp	r2, r3
 800d724:	bf0c      	ite	eq
 800d726:	2301      	moveq	r3, #1
 800d728:	2300      	movne	r3, #0
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	461a      	mov	r2, r3
 800d72e:	79fb      	ldrb	r3, [r7, #7]
 800d730:	429a      	cmp	r2, r3
 800d732:	d19b      	bne.n	800d66c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3720      	adds	r7, #32
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	2000002c 	.word	0x2000002c

0800d744 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08a      	sub	sp, #40	; 0x28
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
 800d750:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d756:	f7f9 fa23 	bl	8006ba0 <HAL_GetTick>
 800d75a:	4602      	mov	r2, r0
 800d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75e:	1a9b      	subs	r3, r3, r2
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	4413      	add	r3, r2
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d766:	f7f9 fa1b 	bl	8006ba0 <HAL_GetTick>
 800d76a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	330c      	adds	r3, #12
 800d772:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d774:	4b3d      	ldr	r3, [pc, #244]	; (800d86c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	4613      	mov	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	00da      	lsls	r2, r3, #3
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	0d1b      	lsrs	r3, r3, #20
 800d784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d786:	fb02 f303 	mul.w	r3, r2, r3
 800d78a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d78c:	e060      	b.n	800d850 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d794:	d107      	bne.n	800d7a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d104      	bne.n	800d7a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d7a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7ac:	d050      	beq.n	800d850 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d7ae:	f7f9 f9f7 	bl	8006ba0 <HAL_GetTick>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d902      	bls.n	800d7c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d13d      	bne.n	800d840 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	685a      	ldr	r2, [r3, #4]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d7d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7dc:	d111      	bne.n	800d802 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7e6:	d004      	beq.n	800d7f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7f0:	d107      	bne.n	800d802 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d800:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d80a:	d10f      	bne.n	800d82c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d81a:	601a      	str	r2, [r3, #0]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d82a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d83c:	2303      	movs	r3, #3
 800d83e:	e010      	b.n	800d862 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d101      	bne.n	800d84a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	3b01      	subs	r3, #1
 800d84e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	689a      	ldr	r2, [r3, #8]
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	4013      	ands	r3, r2
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d196      	bne.n	800d78e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d860:	2300      	movs	r3, #0
}
 800d862:	4618      	mov	r0, r3
 800d864:	3728      	adds	r7, #40	; 0x28
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	2000002c 	.word	0x2000002c

0800d870 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af02      	add	r7, sp, #8
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d884:	d111      	bne.n	800d8aa <SPI_EndRxTransaction+0x3a>
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d88e:	d004      	beq.n	800d89a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d898:	d107      	bne.n	800d8aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	2180      	movs	r1, #128	; 0x80
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f7ff febd 	bl	800d634 <SPI_WaitFlagStateUntilTimeout>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d007      	beq.n	800d8d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8c4:	f043 0220 	orr.w	r2, r3, #32
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	e023      	b.n	800d918 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8d8:	d11d      	bne.n	800d916 <SPI_EndRxTransaction+0xa6>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8e2:	d004      	beq.n	800d8ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8ec:	d113      	bne.n	800d916 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7ff ff22 	bl	800d744 <SPI_WaitFifoStateUntilTimeout>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d007      	beq.n	800d916 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d90a:	f043 0220 	orr.w	r2, r3, #32
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d912:	2303      	movs	r3, #3
 800d914:	e000      	b.n	800d918 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af02      	add	r7, sp, #8
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2200      	movs	r2, #0
 800d934:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f7ff ff03 	bl	800d744 <SPI_WaitFifoStateUntilTimeout>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d007      	beq.n	800d954 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d948:	f043 0220 	orr.w	r2, r3, #32
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d950:	2303      	movs	r3, #3
 800d952:	e027      	b.n	800d9a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	2200      	movs	r2, #0
 800d95c:	2180      	movs	r1, #128	; 0x80
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7ff fe68 	bl	800d634 <SPI_WaitFlagStateUntilTimeout>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d007      	beq.n	800d97a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d96e:	f043 0220 	orr.w	r2, r3, #32
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	e014      	b.n	800d9a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2200      	movs	r2, #0
 800d982:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7ff fedc 	bl	800d744 <SPI_WaitFifoStateUntilTimeout>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d007      	beq.n	800d9a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d996:	f043 0220 	orr.w	r2, r3, #32
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	e000      	b.n	800d9a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e049      	b.n	800da52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d106      	bne.n	800d9d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7f6 fdc2 	bl	800455c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2202      	movs	r2, #2
 800d9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f000 fde6 	bl	800e5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
	...

0800da5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d001      	beq.n	800da74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	e04f      	b.n	800db14 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2202      	movs	r2, #2
 800da78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68da      	ldr	r2, [r3, #12]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f042 0201 	orr.w	r2, r2, #1
 800da8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a23      	ldr	r2, [pc, #140]	; (800db20 <HAL_TIM_Base_Start_IT+0xc4>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d01d      	beq.n	800dad2 <HAL_TIM_Base_Start_IT+0x76>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da9e:	d018      	beq.n	800dad2 <HAL_TIM_Base_Start_IT+0x76>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a1f      	ldr	r2, [pc, #124]	; (800db24 <HAL_TIM_Base_Start_IT+0xc8>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d013      	beq.n	800dad2 <HAL_TIM_Base_Start_IT+0x76>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a1e      	ldr	r2, [pc, #120]	; (800db28 <HAL_TIM_Base_Start_IT+0xcc>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d00e      	beq.n	800dad2 <HAL_TIM_Base_Start_IT+0x76>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a1c      	ldr	r2, [pc, #112]	; (800db2c <HAL_TIM_Base_Start_IT+0xd0>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d009      	beq.n	800dad2 <HAL_TIM_Base_Start_IT+0x76>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a1b      	ldr	r2, [pc, #108]	; (800db30 <HAL_TIM_Base_Start_IT+0xd4>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d004      	beq.n	800dad2 <HAL_TIM_Base_Start_IT+0x76>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a19      	ldr	r2, [pc, #100]	; (800db34 <HAL_TIM_Base_Start_IT+0xd8>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d115      	bne.n	800dafe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	689a      	ldr	r2, [r3, #8]
 800dad8:	4b17      	ldr	r3, [pc, #92]	; (800db38 <HAL_TIM_Base_Start_IT+0xdc>)
 800dada:	4013      	ands	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b06      	cmp	r3, #6
 800dae2:	d015      	beq.n	800db10 <HAL_TIM_Base_Start_IT+0xb4>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daea:	d011      	beq.n	800db10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f042 0201 	orr.w	r2, r2, #1
 800dafa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dafc:	e008      	b.n	800db10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f042 0201 	orr.w	r2, r2, #1
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	e000      	b.n	800db12 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	40012c00 	.word	0x40012c00
 800db24:	40000400 	.word	0x40000400
 800db28:	40000800 	.word	0x40000800
 800db2c:	40000c00 	.word	0x40000c00
 800db30:	40013400 	.word	0x40013400
 800db34:	40014000 	.word	0x40014000
 800db38:	00010007 	.word	0x00010007

0800db3c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d101      	bne.n	800db4e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e049      	b.n	800dbe2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db54:	b2db      	uxtb	r3, r3
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f841 	bl	800dbea <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2202      	movs	r2, #2
 800db6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	3304      	adds	r3, #4
 800db78:	4619      	mov	r1, r3
 800db7a:	4610      	mov	r0, r2
 800db7c:	f000 fd1e 	bl	800e5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b082      	sub	sp, #8
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e049      	b.n	800dca4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d106      	bne.n	800dc2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7f6 fbf7 	bl	8004418 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2202      	movs	r2, #2
 800dc2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	f000 fcbd 	bl	800e5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2201      	movs	r2, #1
 800dc66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2201      	movs	r2, #1
 800dc76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2201      	movs	r2, #1
 800dc86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dca2:	2300      	movs	r3, #0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d109      	bne.n	800dcd0 <HAL_TIM_PWM_Start+0x24>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	bf14      	ite	ne
 800dcc8:	2301      	movne	r3, #1
 800dcca:	2300      	moveq	r3, #0
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	e03c      	b.n	800dd4a <HAL_TIM_PWM_Start+0x9e>
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2b04      	cmp	r3, #4
 800dcd4:	d109      	bne.n	800dcea <HAL_TIM_PWM_Start+0x3e>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	bf14      	ite	ne
 800dce2:	2301      	movne	r3, #1
 800dce4:	2300      	moveq	r3, #0
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	e02f      	b.n	800dd4a <HAL_TIM_PWM_Start+0x9e>
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	2b08      	cmp	r3, #8
 800dcee:	d109      	bne.n	800dd04 <HAL_TIM_PWM_Start+0x58>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	bf14      	ite	ne
 800dcfc:	2301      	movne	r3, #1
 800dcfe:	2300      	moveq	r3, #0
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	e022      	b.n	800dd4a <HAL_TIM_PWM_Start+0x9e>
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	2b0c      	cmp	r3, #12
 800dd08:	d109      	bne.n	800dd1e <HAL_TIM_PWM_Start+0x72>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	bf14      	ite	ne
 800dd16:	2301      	movne	r3, #1
 800dd18:	2300      	moveq	r3, #0
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	e015      	b.n	800dd4a <HAL_TIM_PWM_Start+0x9e>
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	2b10      	cmp	r3, #16
 800dd22:	d109      	bne.n	800dd38 <HAL_TIM_PWM_Start+0x8c>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	bf14      	ite	ne
 800dd30:	2301      	movne	r3, #1
 800dd32:	2300      	moveq	r3, #0
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	e008      	b.n	800dd4a <HAL_TIM_PWM_Start+0x9e>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	bf14      	ite	ne
 800dd44:	2301      	movne	r3, #1
 800dd46:	2300      	moveq	r3, #0
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d001      	beq.n	800dd52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e09c      	b.n	800de8c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d104      	bne.n	800dd62 <HAL_TIM_PWM_Start+0xb6>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2202      	movs	r2, #2
 800dd5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd60:	e023      	b.n	800ddaa <HAL_TIM_PWM_Start+0xfe>
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2b04      	cmp	r3, #4
 800dd66:	d104      	bne.n	800dd72 <HAL_TIM_PWM_Start+0xc6>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd70:	e01b      	b.n	800ddaa <HAL_TIM_PWM_Start+0xfe>
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	2b08      	cmp	r3, #8
 800dd76:	d104      	bne.n	800dd82 <HAL_TIM_PWM_Start+0xd6>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd80:	e013      	b.n	800ddaa <HAL_TIM_PWM_Start+0xfe>
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	2b0c      	cmp	r3, #12
 800dd86:	d104      	bne.n	800dd92 <HAL_TIM_PWM_Start+0xe6>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2202      	movs	r2, #2
 800dd8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd90:	e00b      	b.n	800ddaa <HAL_TIM_PWM_Start+0xfe>
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	2b10      	cmp	r3, #16
 800dd96:	d104      	bne.n	800dda2 <HAL_TIM_PWM_Start+0xf6>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2202      	movs	r2, #2
 800dd9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dda0:	e003      	b.n	800ddaa <HAL_TIM_PWM_Start+0xfe>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2202      	movs	r2, #2
 800dda6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	6839      	ldr	r1, [r7, #0]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f001 f80c 	bl	800edd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a35      	ldr	r2, [pc, #212]	; (800de94 <HAL_TIM_PWM_Start+0x1e8>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d013      	beq.n	800ddea <HAL_TIM_PWM_Start+0x13e>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a34      	ldr	r2, [pc, #208]	; (800de98 <HAL_TIM_PWM_Start+0x1ec>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d00e      	beq.n	800ddea <HAL_TIM_PWM_Start+0x13e>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a32      	ldr	r2, [pc, #200]	; (800de9c <HAL_TIM_PWM_Start+0x1f0>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d009      	beq.n	800ddea <HAL_TIM_PWM_Start+0x13e>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a31      	ldr	r2, [pc, #196]	; (800dea0 <HAL_TIM_PWM_Start+0x1f4>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d004      	beq.n	800ddea <HAL_TIM_PWM_Start+0x13e>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a2f      	ldr	r2, [pc, #188]	; (800dea4 <HAL_TIM_PWM_Start+0x1f8>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d101      	bne.n	800ddee <HAL_TIM_PWM_Start+0x142>
 800ddea:	2301      	movs	r3, #1
 800ddec:	e000      	b.n	800ddf0 <HAL_TIM_PWM_Start+0x144>
 800ddee:	2300      	movs	r3, #0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d007      	beq.n	800de04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a22      	ldr	r2, [pc, #136]	; (800de94 <HAL_TIM_PWM_Start+0x1e8>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d01d      	beq.n	800de4a <HAL_TIM_PWM_Start+0x19e>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de16:	d018      	beq.n	800de4a <HAL_TIM_PWM_Start+0x19e>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a22      	ldr	r2, [pc, #136]	; (800dea8 <HAL_TIM_PWM_Start+0x1fc>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d013      	beq.n	800de4a <HAL_TIM_PWM_Start+0x19e>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a21      	ldr	r2, [pc, #132]	; (800deac <HAL_TIM_PWM_Start+0x200>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d00e      	beq.n	800de4a <HAL_TIM_PWM_Start+0x19e>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a1f      	ldr	r2, [pc, #124]	; (800deb0 <HAL_TIM_PWM_Start+0x204>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d009      	beq.n	800de4a <HAL_TIM_PWM_Start+0x19e>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a17      	ldr	r2, [pc, #92]	; (800de98 <HAL_TIM_PWM_Start+0x1ec>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d004      	beq.n	800de4a <HAL_TIM_PWM_Start+0x19e>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a15      	ldr	r2, [pc, #84]	; (800de9c <HAL_TIM_PWM_Start+0x1f0>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d115      	bne.n	800de76 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	4b18      	ldr	r3, [pc, #96]	; (800deb4 <HAL_TIM_PWM_Start+0x208>)
 800de52:	4013      	ands	r3, r2
 800de54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2b06      	cmp	r3, #6
 800de5a:	d015      	beq.n	800de88 <HAL_TIM_PWM_Start+0x1dc>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de62:	d011      	beq.n	800de88 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f042 0201 	orr.w	r2, r2, #1
 800de72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de74:	e008      	b.n	800de88 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f042 0201 	orr.w	r2, r2, #1
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	e000      	b.n	800de8a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de8a:	2300      	movs	r3, #0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	40012c00 	.word	0x40012c00
 800de98:	40013400 	.word	0x40013400
 800de9c:	40014000 	.word	0x40014000
 800dea0:	40014400 	.word	0x40014400
 800dea4:	40014800 	.word	0x40014800
 800dea8:	40000400 	.word	0x40000400
 800deac:	40000800 	.word	0x40000800
 800deb0:	40000c00 	.word	0x40000c00
 800deb4:	00010007 	.word	0x00010007

0800deb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	f003 0302 	and.w	r3, r3, #2
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d020      	beq.n	800df1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f003 0302 	and.w	r3, r3, #2
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d01b      	beq.n	800df1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f06f 0202 	mvn.w	r2, #2
 800deec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2201      	movs	r2, #1
 800def2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	699b      	ldr	r3, [r3, #24]
 800defa:	f003 0303 	and.w	r3, r3, #3
 800defe:	2b00      	cmp	r3, #0
 800df00:	d003      	beq.n	800df0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fb3b 	bl	800e57e <HAL_TIM_IC_CaptureCallback>
 800df08:	e005      	b.n	800df16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 fb2d 	bl	800e56a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fb3e 	bl	800e592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	f003 0304 	and.w	r3, r3, #4
 800df22:	2b00      	cmp	r3, #0
 800df24:	d020      	beq.n	800df68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f003 0304 	and.w	r3, r3, #4
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d01b      	beq.n	800df68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f06f 0204 	mvn.w	r2, #4
 800df38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2202      	movs	r2, #2
 800df3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fb15 	bl	800e57e <HAL_TIM_IC_CaptureCallback>
 800df54:	e005      	b.n	800df62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 fb07 	bl	800e56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fb18 	bl	800e592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	f003 0308 	and.w	r3, r3, #8
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d020      	beq.n	800dfb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f003 0308 	and.w	r3, r3, #8
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d01b      	beq.n	800dfb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f06f 0208 	mvn.w	r2, #8
 800df84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2204      	movs	r2, #4
 800df8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	69db      	ldr	r3, [r3, #28]
 800df92:	f003 0303 	and.w	r3, r3, #3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 faef 	bl	800e57e <HAL_TIM_IC_CaptureCallback>
 800dfa0:	e005      	b.n	800dfae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fae1 	bl	800e56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 faf2 	bl	800e592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	f003 0310 	and.w	r3, r3, #16
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d020      	beq.n	800e000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f003 0310 	and.w	r3, r3, #16
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d01b      	beq.n	800e000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f06f 0210 	mvn.w	r2, #16
 800dfd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2208      	movs	r2, #8
 800dfd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	69db      	ldr	r3, [r3, #28]
 800dfde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d003      	beq.n	800dfee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 fac9 	bl	800e57e <HAL_TIM_IC_CaptureCallback>
 800dfec:	e005      	b.n	800dffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 fabb 	bl	800e56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 facc 	bl	800e592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	f003 0301 	and.w	r3, r3, #1
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00c      	beq.n	800e024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f003 0301 	and.w	r3, r3, #1
 800e010:	2b00      	cmp	r3, #0
 800e012:	d007      	beq.n	800e024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f06f 0201 	mvn.w	r2, #1
 800e01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7f5 feae 	bl	8003d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00c      	beq.n	800e048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e034:	2b00      	cmp	r3, #0
 800e036:	d007      	beq.n	800e048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f001 f8c0 	bl	800f1c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d00c      	beq.n	800e06c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d007      	beq.n	800e06c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f001 f8b8 	bl	800f1dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00c      	beq.n	800e090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d007      	beq.n	800e090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fa8b 	bl	800e5a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	f003 0320 	and.w	r3, r3, #32
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00c      	beq.n	800e0b4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f003 0320 	and.w	r3, r3, #32
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d007      	beq.n	800e0b4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f06f 0220 	mvn.w	r2, #32
 800e0ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f001 f880 	bl	800f1b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0b4:	bf00      	nop
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d101      	bne.n	800e0da <HAL_TIM_OC_ConfigChannel+0x1e>
 800e0d6:	2302      	movs	r3, #2
 800e0d8:	e066      	b.n	800e1a8 <HAL_TIM_OC_ConfigChannel+0xec>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b14      	cmp	r3, #20
 800e0e6:	d857      	bhi.n	800e198 <HAL_TIM_OC_ConfigChannel+0xdc>
 800e0e8:	a201      	add	r2, pc, #4	; (adr r2, 800e0f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800e0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ee:	bf00      	nop
 800e0f0:	0800e145 	.word	0x0800e145
 800e0f4:	0800e199 	.word	0x0800e199
 800e0f8:	0800e199 	.word	0x0800e199
 800e0fc:	0800e199 	.word	0x0800e199
 800e100:	0800e153 	.word	0x0800e153
 800e104:	0800e199 	.word	0x0800e199
 800e108:	0800e199 	.word	0x0800e199
 800e10c:	0800e199 	.word	0x0800e199
 800e110:	0800e161 	.word	0x0800e161
 800e114:	0800e199 	.word	0x0800e199
 800e118:	0800e199 	.word	0x0800e199
 800e11c:	0800e199 	.word	0x0800e199
 800e120:	0800e16f 	.word	0x0800e16f
 800e124:	0800e199 	.word	0x0800e199
 800e128:	0800e199 	.word	0x0800e199
 800e12c:	0800e199 	.word	0x0800e199
 800e130:	0800e17d 	.word	0x0800e17d
 800e134:	0800e199 	.word	0x0800e199
 800e138:	0800e199 	.word	0x0800e199
 800e13c:	0800e199 	.word	0x0800e199
 800e140:	0800e18b 	.word	0x0800e18b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	68b9      	ldr	r1, [r7, #8]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f000 fad0 	bl	800e6f0 <TIM_OC1_SetConfig>
      break;
 800e150:	e025      	b.n	800e19e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	68b9      	ldr	r1, [r7, #8]
 800e158:	4618      	mov	r0, r3
 800e15a:	f000 fb59 	bl	800e810 <TIM_OC2_SetConfig>
      break;
 800e15e:	e01e      	b.n	800e19e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	68b9      	ldr	r1, [r7, #8]
 800e166:	4618      	mov	r0, r3
 800e168:	f000 fbdc 	bl	800e924 <TIM_OC3_SetConfig>
      break;
 800e16c:	e017      	b.n	800e19e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	68b9      	ldr	r1, [r7, #8]
 800e174:	4618      	mov	r0, r3
 800e176:	f000 fc5d 	bl	800ea34 <TIM_OC4_SetConfig>
      break;
 800e17a:	e010      	b.n	800e19e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68b9      	ldr	r1, [r7, #8]
 800e182:	4618      	mov	r0, r3
 800e184:	f000 fcc0 	bl	800eb08 <TIM_OC5_SetConfig>
      break;
 800e188:	e009      	b.n	800e19e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68b9      	ldr	r1, [r7, #8]
 800e190:	4618      	mov	r0, r3
 800e192:	f000 fd1d 	bl	800ebd0 <TIM_OC6_SetConfig>
      break;
 800e196:	e002      	b.n	800e19e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800e198:	2301      	movs	r3, #1
 800e19a:	75fb      	strb	r3, [r7, #23]
      break;
 800e19c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3718      	adds	r7, #24
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b086      	sub	sp, #24
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d101      	bne.n	800e1ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	e0ff      	b.n	800e3ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b14      	cmp	r3, #20
 800e1da:	f200 80f0 	bhi.w	800e3be <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e1de:	a201      	add	r2, pc, #4	; (adr r2, 800e1e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e4:	0800e239 	.word	0x0800e239
 800e1e8:	0800e3bf 	.word	0x0800e3bf
 800e1ec:	0800e3bf 	.word	0x0800e3bf
 800e1f0:	0800e3bf 	.word	0x0800e3bf
 800e1f4:	0800e279 	.word	0x0800e279
 800e1f8:	0800e3bf 	.word	0x0800e3bf
 800e1fc:	0800e3bf 	.word	0x0800e3bf
 800e200:	0800e3bf 	.word	0x0800e3bf
 800e204:	0800e2bb 	.word	0x0800e2bb
 800e208:	0800e3bf 	.word	0x0800e3bf
 800e20c:	0800e3bf 	.word	0x0800e3bf
 800e210:	0800e3bf 	.word	0x0800e3bf
 800e214:	0800e2fb 	.word	0x0800e2fb
 800e218:	0800e3bf 	.word	0x0800e3bf
 800e21c:	0800e3bf 	.word	0x0800e3bf
 800e220:	0800e3bf 	.word	0x0800e3bf
 800e224:	0800e33d 	.word	0x0800e33d
 800e228:	0800e3bf 	.word	0x0800e3bf
 800e22c:	0800e3bf 	.word	0x0800e3bf
 800e230:	0800e3bf 	.word	0x0800e3bf
 800e234:	0800e37d 	.word	0x0800e37d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68b9      	ldr	r1, [r7, #8]
 800e23e:	4618      	mov	r0, r3
 800e240:	f000 fa56 	bl	800e6f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	699a      	ldr	r2, [r3, #24]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f042 0208 	orr.w	r2, r2, #8
 800e252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	699a      	ldr	r2, [r3, #24]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f022 0204 	bic.w	r2, r2, #4
 800e262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	6999      	ldr	r1, [r3, #24]
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	691a      	ldr	r2, [r3, #16]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	430a      	orrs	r2, r1
 800e274:	619a      	str	r2, [r3, #24]
      break;
 800e276:	e0a5      	b.n	800e3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68b9      	ldr	r1, [r7, #8]
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 fac6 	bl	800e810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	699a      	ldr	r2, [r3, #24]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	699a      	ldr	r2, [r3, #24]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6999      	ldr	r1, [r3, #24]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	021a      	lsls	r2, r3, #8
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	430a      	orrs	r2, r1
 800e2b6:	619a      	str	r2, [r3, #24]
      break;
 800e2b8:	e084      	b.n	800e3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68b9      	ldr	r1, [r7, #8]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 fb2f 	bl	800e924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	69da      	ldr	r2, [r3, #28]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f042 0208 	orr.w	r2, r2, #8
 800e2d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	69da      	ldr	r2, [r3, #28]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f022 0204 	bic.w	r2, r2, #4
 800e2e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	69d9      	ldr	r1, [r3, #28]
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	691a      	ldr	r2, [r3, #16]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	430a      	orrs	r2, r1
 800e2f6:	61da      	str	r2, [r3, #28]
      break;
 800e2f8:	e064      	b.n	800e3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	68b9      	ldr	r1, [r7, #8]
 800e300:	4618      	mov	r0, r3
 800e302:	f000 fb97 	bl	800ea34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	69da      	ldr	r2, [r3, #28]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	69da      	ldr	r2, [r3, #28]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	69d9      	ldr	r1, [r3, #28]
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	691b      	ldr	r3, [r3, #16]
 800e330:	021a      	lsls	r2, r3, #8
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	430a      	orrs	r2, r1
 800e338:	61da      	str	r2, [r3, #28]
      break;
 800e33a:	e043      	b.n	800e3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	68b9      	ldr	r1, [r7, #8]
 800e342:	4618      	mov	r0, r3
 800e344:	f000 fbe0 	bl	800eb08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f042 0208 	orr.w	r2, r2, #8
 800e356:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f022 0204 	bic.w	r2, r2, #4
 800e366:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	691a      	ldr	r2, [r3, #16]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e37a:	e023      	b.n	800e3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68b9      	ldr	r1, [r7, #8]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 fc24 	bl	800ebd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e396:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	021a      	lsls	r2, r3, #8
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e3bc:	e002      	b.n	800e3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800e3c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3718      	adds	r7, #24
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop

0800e3d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d101      	bne.n	800e3f4 <HAL_TIM_ConfigClockSource+0x1c>
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	e0b6      	b.n	800e562 <HAL_TIM_ConfigClockSource+0x18a>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2202      	movs	r2, #2
 800e400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e41e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e430:	d03e      	beq.n	800e4b0 <HAL_TIM_ConfigClockSource+0xd8>
 800e432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e436:	f200 8087 	bhi.w	800e548 <HAL_TIM_ConfigClockSource+0x170>
 800e43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e43e:	f000 8086 	beq.w	800e54e <HAL_TIM_ConfigClockSource+0x176>
 800e442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e446:	d87f      	bhi.n	800e548 <HAL_TIM_ConfigClockSource+0x170>
 800e448:	2b70      	cmp	r3, #112	; 0x70
 800e44a:	d01a      	beq.n	800e482 <HAL_TIM_ConfigClockSource+0xaa>
 800e44c:	2b70      	cmp	r3, #112	; 0x70
 800e44e:	d87b      	bhi.n	800e548 <HAL_TIM_ConfigClockSource+0x170>
 800e450:	2b60      	cmp	r3, #96	; 0x60
 800e452:	d050      	beq.n	800e4f6 <HAL_TIM_ConfigClockSource+0x11e>
 800e454:	2b60      	cmp	r3, #96	; 0x60
 800e456:	d877      	bhi.n	800e548 <HAL_TIM_ConfigClockSource+0x170>
 800e458:	2b50      	cmp	r3, #80	; 0x50
 800e45a:	d03c      	beq.n	800e4d6 <HAL_TIM_ConfigClockSource+0xfe>
 800e45c:	2b50      	cmp	r3, #80	; 0x50
 800e45e:	d873      	bhi.n	800e548 <HAL_TIM_ConfigClockSource+0x170>
 800e460:	2b40      	cmp	r3, #64	; 0x40
 800e462:	d058      	beq.n	800e516 <HAL_TIM_ConfigClockSource+0x13e>
 800e464:	2b40      	cmp	r3, #64	; 0x40
 800e466:	d86f      	bhi.n	800e548 <HAL_TIM_ConfigClockSource+0x170>
 800e468:	2b30      	cmp	r3, #48	; 0x30
 800e46a:	d064      	beq.n	800e536 <HAL_TIM_ConfigClockSource+0x15e>
 800e46c:	2b30      	cmp	r3, #48	; 0x30
 800e46e:	d86b      	bhi.n	800e548 <HAL_TIM_ConfigClockSource+0x170>
 800e470:	2b20      	cmp	r3, #32
 800e472:	d060      	beq.n	800e536 <HAL_TIM_ConfigClockSource+0x15e>
 800e474:	2b20      	cmp	r3, #32
 800e476:	d867      	bhi.n	800e548 <HAL_TIM_ConfigClockSource+0x170>
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d05c      	beq.n	800e536 <HAL_TIM_ConfigClockSource+0x15e>
 800e47c:	2b10      	cmp	r3, #16
 800e47e:	d05a      	beq.n	800e536 <HAL_TIM_ConfigClockSource+0x15e>
 800e480:	e062      	b.n	800e548 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e492:	f000 fc7d 	bl	800ed90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e4a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	609a      	str	r2, [r3, #8]
      break;
 800e4ae:	e04f      	b.n	800e550 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e4c0:	f000 fc66 	bl	800ed90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	689a      	ldr	r2, [r3, #8]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e4d2:	609a      	str	r2, [r3, #8]
      break;
 800e4d4:	e03c      	b.n	800e550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	f000 fbda 	bl	800ec9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2150      	movs	r1, #80	; 0x50
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 fc33 	bl	800ed5a <TIM_ITRx_SetConfig>
      break;
 800e4f4:	e02c      	b.n	800e550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e502:	461a      	mov	r2, r3
 800e504:	f000 fbf9 	bl	800ecfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2160      	movs	r1, #96	; 0x60
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 fc23 	bl	800ed5a <TIM_ITRx_SetConfig>
      break;
 800e514:	e01c      	b.n	800e550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e522:	461a      	mov	r2, r3
 800e524:	f000 fbba 	bl	800ec9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2140      	movs	r1, #64	; 0x40
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 fc13 	bl	800ed5a <TIM_ITRx_SetConfig>
      break;
 800e534:	e00c      	b.n	800e550 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4619      	mov	r1, r3
 800e540:	4610      	mov	r0, r2
 800e542:	f000 fc0a 	bl	800ed5a <TIM_ITRx_SetConfig>
      break;
 800e546:	e003      	b.n	800e550 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	73fb      	strb	r3, [r7, #15]
      break;
 800e54c:	e000      	b.n	800e550 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e54e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e560:	7bfb      	ldrb	r3, [r7, #15]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3710      	adds	r7, #16
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e56a:	b480      	push	{r7}
 800e56c:	b083      	sub	sp, #12
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e572:	bf00      	nop
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e57e:	b480      	push	{r7}
 800e580:	b083      	sub	sp, #12
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e586:	bf00      	nop
 800e588:	370c      	adds	r7, #12
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr

0800e592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e592:	b480      	push	{r7}
 800e594:	b083      	sub	sp, #12
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e59a:	bf00      	nop
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr

0800e5a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e5a6:	b480      	push	{r7}
 800e5a8:	b083      	sub	sp, #12
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e5ae:	bf00      	nop
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
	...

0800e5bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	4a40      	ldr	r2, [pc, #256]	; (800e6d0 <TIM_Base_SetConfig+0x114>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d013      	beq.n	800e5fc <TIM_Base_SetConfig+0x40>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5da:	d00f      	beq.n	800e5fc <TIM_Base_SetConfig+0x40>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4a3d      	ldr	r2, [pc, #244]	; (800e6d4 <TIM_Base_SetConfig+0x118>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d00b      	beq.n	800e5fc <TIM_Base_SetConfig+0x40>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a3c      	ldr	r2, [pc, #240]	; (800e6d8 <TIM_Base_SetConfig+0x11c>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d007      	beq.n	800e5fc <TIM_Base_SetConfig+0x40>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4a3b      	ldr	r2, [pc, #236]	; (800e6dc <TIM_Base_SetConfig+0x120>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d003      	beq.n	800e5fc <TIM_Base_SetConfig+0x40>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4a3a      	ldr	r2, [pc, #232]	; (800e6e0 <TIM_Base_SetConfig+0x124>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d108      	bne.n	800e60e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4a2f      	ldr	r2, [pc, #188]	; (800e6d0 <TIM_Base_SetConfig+0x114>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d01f      	beq.n	800e656 <TIM_Base_SetConfig+0x9a>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e61c:	d01b      	beq.n	800e656 <TIM_Base_SetConfig+0x9a>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4a2c      	ldr	r2, [pc, #176]	; (800e6d4 <TIM_Base_SetConfig+0x118>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d017      	beq.n	800e656 <TIM_Base_SetConfig+0x9a>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4a2b      	ldr	r2, [pc, #172]	; (800e6d8 <TIM_Base_SetConfig+0x11c>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d013      	beq.n	800e656 <TIM_Base_SetConfig+0x9a>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4a2a      	ldr	r2, [pc, #168]	; (800e6dc <TIM_Base_SetConfig+0x120>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d00f      	beq.n	800e656 <TIM_Base_SetConfig+0x9a>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4a29      	ldr	r2, [pc, #164]	; (800e6e0 <TIM_Base_SetConfig+0x124>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d00b      	beq.n	800e656 <TIM_Base_SetConfig+0x9a>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a28      	ldr	r2, [pc, #160]	; (800e6e4 <TIM_Base_SetConfig+0x128>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d007      	beq.n	800e656 <TIM_Base_SetConfig+0x9a>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4a27      	ldr	r2, [pc, #156]	; (800e6e8 <TIM_Base_SetConfig+0x12c>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d003      	beq.n	800e656 <TIM_Base_SetConfig+0x9a>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a26      	ldr	r2, [pc, #152]	; (800e6ec <TIM_Base_SetConfig+0x130>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d108      	bne.n	800e668 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e65c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	4313      	orrs	r3, r2
 800e666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	4313      	orrs	r3, r2
 800e674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	689a      	ldr	r2, [r3, #8]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4a10      	ldr	r2, [pc, #64]	; (800e6d0 <TIM_Base_SetConfig+0x114>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d00f      	beq.n	800e6b4 <TIM_Base_SetConfig+0xf8>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4a12      	ldr	r2, [pc, #72]	; (800e6e0 <TIM_Base_SetConfig+0x124>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d00b      	beq.n	800e6b4 <TIM_Base_SetConfig+0xf8>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4a11      	ldr	r2, [pc, #68]	; (800e6e4 <TIM_Base_SetConfig+0x128>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d007      	beq.n	800e6b4 <TIM_Base_SetConfig+0xf8>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a10      	ldr	r2, [pc, #64]	; (800e6e8 <TIM_Base_SetConfig+0x12c>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d003      	beq.n	800e6b4 <TIM_Base_SetConfig+0xf8>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	4a0f      	ldr	r2, [pc, #60]	; (800e6ec <TIM_Base_SetConfig+0x130>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d103      	bne.n	800e6bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	691a      	ldr	r2, [r3, #16]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	615a      	str	r2, [r3, #20]
}
 800e6c2:	bf00      	nop
 800e6c4:	3714      	adds	r7, #20
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	40012c00 	.word	0x40012c00
 800e6d4:	40000400 	.word	0x40000400
 800e6d8:	40000800 	.word	0x40000800
 800e6dc:	40000c00 	.word	0x40000c00
 800e6e0:	40013400 	.word	0x40013400
 800e6e4:	40014000 	.word	0x40014000
 800e6e8:	40014400 	.word	0x40014400
 800e6ec:	40014800 	.word	0x40014800

0800e6f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b087      	sub	sp, #28
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a1b      	ldr	r3, [r3, #32]
 800e704:	f023 0201 	bic.w	r2, r3, #1
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e71e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f023 0303 	bic.w	r3, r3, #3
 800e72a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	4313      	orrs	r3, r2
 800e734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f023 0302 	bic.w	r3, r3, #2
 800e73c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	4313      	orrs	r3, r2
 800e746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4a2c      	ldr	r2, [pc, #176]	; (800e7fc <TIM_OC1_SetConfig+0x10c>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d00f      	beq.n	800e770 <TIM_OC1_SetConfig+0x80>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4a2b      	ldr	r2, [pc, #172]	; (800e800 <TIM_OC1_SetConfig+0x110>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d00b      	beq.n	800e770 <TIM_OC1_SetConfig+0x80>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4a2a      	ldr	r2, [pc, #168]	; (800e804 <TIM_OC1_SetConfig+0x114>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d007      	beq.n	800e770 <TIM_OC1_SetConfig+0x80>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4a29      	ldr	r2, [pc, #164]	; (800e808 <TIM_OC1_SetConfig+0x118>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d003      	beq.n	800e770 <TIM_OC1_SetConfig+0x80>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a28      	ldr	r2, [pc, #160]	; (800e80c <TIM_OC1_SetConfig+0x11c>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d10c      	bne.n	800e78a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	f023 0308 	bic.w	r3, r3, #8
 800e776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	697a      	ldr	r2, [r7, #20]
 800e77e:	4313      	orrs	r3, r2
 800e780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	f023 0304 	bic.w	r3, r3, #4
 800e788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a1b      	ldr	r2, [pc, #108]	; (800e7fc <TIM_OC1_SetConfig+0x10c>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d00f      	beq.n	800e7b2 <TIM_OC1_SetConfig+0xc2>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4a1a      	ldr	r2, [pc, #104]	; (800e800 <TIM_OC1_SetConfig+0x110>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d00b      	beq.n	800e7b2 <TIM_OC1_SetConfig+0xc2>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4a19      	ldr	r2, [pc, #100]	; (800e804 <TIM_OC1_SetConfig+0x114>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d007      	beq.n	800e7b2 <TIM_OC1_SetConfig+0xc2>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a18      	ldr	r2, [pc, #96]	; (800e808 <TIM_OC1_SetConfig+0x118>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d003      	beq.n	800e7b2 <TIM_OC1_SetConfig+0xc2>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4a17      	ldr	r2, [pc, #92]	; (800e80c <TIM_OC1_SetConfig+0x11c>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d111      	bne.n	800e7d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e7c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	695b      	ldr	r3, [r3, #20]
 800e7c6:	693a      	ldr	r2, [r7, #16]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	699b      	ldr	r3, [r3, #24]
 800e7d0:	693a      	ldr	r2, [r7, #16]
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	693a      	ldr	r2, [r7, #16]
 800e7da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	685a      	ldr	r2, [r3, #4]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	621a      	str	r2, [r3, #32]
}
 800e7f0:	bf00      	nop
 800e7f2:	371c      	adds	r7, #28
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	40012c00 	.word	0x40012c00
 800e800:	40013400 	.word	0x40013400
 800e804:	40014000 	.word	0x40014000
 800e808:	40014400 	.word	0x40014400
 800e80c:	40014800 	.word	0x40014800

0800e810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e810:	b480      	push	{r7}
 800e812:	b087      	sub	sp, #28
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6a1b      	ldr	r3, [r3, #32]
 800e81e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6a1b      	ldr	r3, [r3, #32]
 800e824:	f023 0210 	bic.w	r2, r3, #16
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	699b      	ldr	r3, [r3, #24]
 800e836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e83e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e84a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	021b      	lsls	r3, r3, #8
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	4313      	orrs	r3, r2
 800e856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	f023 0320 	bic.w	r3, r3, #32
 800e85e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	011b      	lsls	r3, r3, #4
 800e866:	697a      	ldr	r2, [r7, #20]
 800e868:	4313      	orrs	r3, r2
 800e86a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a28      	ldr	r2, [pc, #160]	; (800e910 <TIM_OC2_SetConfig+0x100>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d003      	beq.n	800e87c <TIM_OC2_SetConfig+0x6c>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a27      	ldr	r2, [pc, #156]	; (800e914 <TIM_OC2_SetConfig+0x104>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d10d      	bne.n	800e898 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	011b      	lsls	r3, r3, #4
 800e88a:	697a      	ldr	r2, [r7, #20]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4a1d      	ldr	r2, [pc, #116]	; (800e910 <TIM_OC2_SetConfig+0x100>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d00f      	beq.n	800e8c0 <TIM_OC2_SetConfig+0xb0>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a1c      	ldr	r2, [pc, #112]	; (800e914 <TIM_OC2_SetConfig+0x104>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d00b      	beq.n	800e8c0 <TIM_OC2_SetConfig+0xb0>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4a1b      	ldr	r2, [pc, #108]	; (800e918 <TIM_OC2_SetConfig+0x108>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d007      	beq.n	800e8c0 <TIM_OC2_SetConfig+0xb0>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4a1a      	ldr	r2, [pc, #104]	; (800e91c <TIM_OC2_SetConfig+0x10c>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d003      	beq.n	800e8c0 <TIM_OC2_SetConfig+0xb0>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	4a19      	ldr	r2, [pc, #100]	; (800e920 <TIM_OC2_SetConfig+0x110>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d113      	bne.n	800e8e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e8c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e8ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	695b      	ldr	r3, [r3, #20]
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	699b      	ldr	r3, [r3, #24]
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	693a      	ldr	r2, [r7, #16]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	693a      	ldr	r2, [r7, #16]
 800e8ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	685a      	ldr	r2, [r3, #4]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	621a      	str	r2, [r3, #32]
}
 800e902:	bf00      	nop
 800e904:	371c      	adds	r7, #28
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	40012c00 	.word	0x40012c00
 800e914:	40013400 	.word	0x40013400
 800e918:	40014000 	.word	0x40014000
 800e91c:	40014400 	.word	0x40014400
 800e920:	40014800 	.word	0x40014800

0800e924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e924:	b480      	push	{r7}
 800e926:	b087      	sub	sp, #28
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a1b      	ldr	r3, [r3, #32]
 800e932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a1b      	ldr	r3, [r3, #32]
 800e938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	69db      	ldr	r3, [r3, #28]
 800e94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f023 0303 	bic.w	r3, r3, #3
 800e95e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	4313      	orrs	r3, r2
 800e968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	021b      	lsls	r3, r3, #8
 800e978:	697a      	ldr	r2, [r7, #20]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a27      	ldr	r2, [pc, #156]	; (800ea20 <TIM_OC3_SetConfig+0xfc>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d003      	beq.n	800e98e <TIM_OC3_SetConfig+0x6a>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a26      	ldr	r2, [pc, #152]	; (800ea24 <TIM_OC3_SetConfig+0x100>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d10d      	bne.n	800e9aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	021b      	lsls	r3, r3, #8
 800e99c:	697a      	ldr	r2, [r7, #20]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e9a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	4a1c      	ldr	r2, [pc, #112]	; (800ea20 <TIM_OC3_SetConfig+0xfc>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d00f      	beq.n	800e9d2 <TIM_OC3_SetConfig+0xae>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	4a1b      	ldr	r2, [pc, #108]	; (800ea24 <TIM_OC3_SetConfig+0x100>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d00b      	beq.n	800e9d2 <TIM_OC3_SetConfig+0xae>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	4a1a      	ldr	r2, [pc, #104]	; (800ea28 <TIM_OC3_SetConfig+0x104>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d007      	beq.n	800e9d2 <TIM_OC3_SetConfig+0xae>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4a19      	ldr	r2, [pc, #100]	; (800ea2c <TIM_OC3_SetConfig+0x108>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d003      	beq.n	800e9d2 <TIM_OC3_SetConfig+0xae>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4a18      	ldr	r2, [pc, #96]	; (800ea30 <TIM_OC3_SetConfig+0x10c>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d113      	bne.n	800e9fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	695b      	ldr	r3, [r3, #20]
 800e9e6:	011b      	lsls	r3, r3, #4
 800e9e8:	693a      	ldr	r2, [r7, #16]
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	699b      	ldr	r3, [r3, #24]
 800e9f2:	011b      	lsls	r3, r3, #4
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	693a      	ldr	r2, [r7, #16]
 800e9fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	685a      	ldr	r2, [r3, #4]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	697a      	ldr	r2, [r7, #20]
 800ea12:	621a      	str	r2, [r3, #32]
}
 800ea14:	bf00      	nop
 800ea16:	371c      	adds	r7, #28
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	40012c00 	.word	0x40012c00
 800ea24:	40013400 	.word	0x40013400
 800ea28:	40014000 	.word	0x40014000
 800ea2c:	40014400 	.word	0x40014400
 800ea30:	40014800 	.word	0x40014800

0800ea34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a1b      	ldr	r3, [r3, #32]
 800ea48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	69db      	ldr	r3, [r3, #28]
 800ea5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ea62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	021b      	lsls	r3, r3, #8
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	031b      	lsls	r3, r3, #12
 800ea8a:	693a      	ldr	r2, [r7, #16]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4a18      	ldr	r2, [pc, #96]	; (800eaf4 <TIM_OC4_SetConfig+0xc0>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d00f      	beq.n	800eab8 <TIM_OC4_SetConfig+0x84>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	4a17      	ldr	r2, [pc, #92]	; (800eaf8 <TIM_OC4_SetConfig+0xc4>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d00b      	beq.n	800eab8 <TIM_OC4_SetConfig+0x84>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	4a16      	ldr	r2, [pc, #88]	; (800eafc <TIM_OC4_SetConfig+0xc8>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d007      	beq.n	800eab8 <TIM_OC4_SetConfig+0x84>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4a15      	ldr	r2, [pc, #84]	; (800eb00 <TIM_OC4_SetConfig+0xcc>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d003      	beq.n	800eab8 <TIM_OC4_SetConfig+0x84>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4a14      	ldr	r2, [pc, #80]	; (800eb04 <TIM_OC4_SetConfig+0xd0>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d109      	bne.n	800eacc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eabe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	695b      	ldr	r3, [r3, #20]
 800eac4:	019b      	lsls	r3, r3, #6
 800eac6:	697a      	ldr	r2, [r7, #20]
 800eac8:	4313      	orrs	r3, r2
 800eaca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	685a      	ldr	r2, [r3, #4]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	621a      	str	r2, [r3, #32]
}
 800eae6:	bf00      	nop
 800eae8:	371c      	adds	r7, #28
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	40012c00 	.word	0x40012c00
 800eaf8:	40013400 	.word	0x40013400
 800eafc:	40014000 	.word	0x40014000
 800eb00:	40014400 	.word	0x40014400
 800eb04:	40014800 	.word	0x40014800

0800eb08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a1b      	ldr	r3, [r3, #32]
 800eb1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	4313      	orrs	r3, r2
 800eb44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800eb4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	041b      	lsls	r3, r3, #16
 800eb54:	693a      	ldr	r2, [r7, #16]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	4a17      	ldr	r2, [pc, #92]	; (800ebbc <TIM_OC5_SetConfig+0xb4>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d00f      	beq.n	800eb82 <TIM_OC5_SetConfig+0x7a>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4a16      	ldr	r2, [pc, #88]	; (800ebc0 <TIM_OC5_SetConfig+0xb8>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d00b      	beq.n	800eb82 <TIM_OC5_SetConfig+0x7a>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4a15      	ldr	r2, [pc, #84]	; (800ebc4 <TIM_OC5_SetConfig+0xbc>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d007      	beq.n	800eb82 <TIM_OC5_SetConfig+0x7a>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4a14      	ldr	r2, [pc, #80]	; (800ebc8 <TIM_OC5_SetConfig+0xc0>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d003      	beq.n	800eb82 <TIM_OC5_SetConfig+0x7a>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a13      	ldr	r2, [pc, #76]	; (800ebcc <TIM_OC5_SetConfig+0xc4>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d109      	bne.n	800eb96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	695b      	ldr	r3, [r3, #20]
 800eb8e:	021b      	lsls	r3, r3, #8
 800eb90:	697a      	ldr	r2, [r7, #20]
 800eb92:	4313      	orrs	r3, r2
 800eb94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	697a      	ldr	r2, [r7, #20]
 800eb9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	685a      	ldr	r2, [r3, #4]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	693a      	ldr	r2, [r7, #16]
 800ebae:	621a      	str	r2, [r3, #32]
}
 800ebb0:	bf00      	nop
 800ebb2:	371c      	adds	r7, #28
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	40012c00 	.word	0x40012c00
 800ebc0:	40013400 	.word	0x40013400
 800ebc4:	40014000 	.word	0x40014000
 800ebc8:	40014400 	.word	0x40014400
 800ebcc:	40014800 	.word	0x40014800

0800ebd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b087      	sub	sp, #28
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a1b      	ldr	r3, [r3, #32]
 800ebe4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ebfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	021b      	lsls	r3, r3, #8
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	051b      	lsls	r3, r3, #20
 800ec1e:	693a      	ldr	r2, [r7, #16]
 800ec20:	4313      	orrs	r3, r2
 800ec22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a18      	ldr	r2, [pc, #96]	; (800ec88 <TIM_OC6_SetConfig+0xb8>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d00f      	beq.n	800ec4c <TIM_OC6_SetConfig+0x7c>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4a17      	ldr	r2, [pc, #92]	; (800ec8c <TIM_OC6_SetConfig+0xbc>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d00b      	beq.n	800ec4c <TIM_OC6_SetConfig+0x7c>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	4a16      	ldr	r2, [pc, #88]	; (800ec90 <TIM_OC6_SetConfig+0xc0>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d007      	beq.n	800ec4c <TIM_OC6_SetConfig+0x7c>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4a15      	ldr	r2, [pc, #84]	; (800ec94 <TIM_OC6_SetConfig+0xc4>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d003      	beq.n	800ec4c <TIM_OC6_SetConfig+0x7c>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	4a14      	ldr	r2, [pc, #80]	; (800ec98 <TIM_OC6_SetConfig+0xc8>)
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d109      	bne.n	800ec60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	695b      	ldr	r3, [r3, #20]
 800ec58:	029b      	lsls	r3, r3, #10
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	685a      	ldr	r2, [r3, #4]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	693a      	ldr	r2, [r7, #16]
 800ec78:	621a      	str	r2, [r3, #32]
}
 800ec7a:	bf00      	nop
 800ec7c:	371c      	adds	r7, #28
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	40012c00 	.word	0x40012c00
 800ec8c:	40013400 	.word	0x40013400
 800ec90:	40014000 	.word	0x40014000
 800ec94:	40014400 	.word	0x40014400
 800ec98:	40014800 	.word	0x40014800

0800ec9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6a1b      	ldr	r3, [r3, #32]
 800ecac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6a1b      	ldr	r3, [r3, #32]
 800ecb2:	f023 0201 	bic.w	r2, r3, #1
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	699b      	ldr	r3, [r3, #24]
 800ecbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	011b      	lsls	r3, r3, #4
 800eccc:	693a      	ldr	r2, [r7, #16]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	f023 030a 	bic.w	r3, r3, #10
 800ecd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ecda:	697a      	ldr	r2, [r7, #20]
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	693a      	ldr	r2, [r7, #16]
 800ece6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	621a      	str	r2, [r3, #32]
}
 800ecee:	bf00      	nop
 800ecf0:	371c      	adds	r7, #28
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr

0800ecfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecfa:	b480      	push	{r7}
 800ecfc:	b087      	sub	sp, #28
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	60f8      	str	r0, [r7, #12]
 800ed02:	60b9      	str	r1, [r7, #8]
 800ed04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6a1b      	ldr	r3, [r3, #32]
 800ed10:	f023 0210 	bic.w	r2, r3, #16
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	699b      	ldr	r3, [r3, #24]
 800ed1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	031b      	lsls	r3, r3, #12
 800ed2a:	693a      	ldr	r2, [r7, #16]
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ed36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	011b      	lsls	r3, r3, #4
 800ed3c:	697a      	ldr	r2, [r7, #20]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	693a      	ldr	r2, [r7, #16]
 800ed46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	697a      	ldr	r2, [r7, #20]
 800ed4c:	621a      	str	r2, [r3, #32]
}
 800ed4e:	bf00      	nop
 800ed50:	371c      	adds	r7, #28
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed5a:	b480      	push	{r7}
 800ed5c:	b085      	sub	sp, #20
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
 800ed62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	4313      	orrs	r3, r2
 800ed78:	f043 0307 	orr.w	r3, r3, #7
 800ed7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	609a      	str	r2, [r3, #8]
}
 800ed84:	bf00      	nop
 800ed86:	3714      	adds	r7, #20
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b087      	sub	sp, #28
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	021a      	lsls	r2, r3, #8
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	431a      	orrs	r2, r3
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	4313      	orrs	r3, r2
 800edbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	697a      	ldr	r2, [r7, #20]
 800edc2:	609a      	str	r2, [r3, #8]
}
 800edc4:	bf00      	nop
 800edc6:	371c      	adds	r7, #28
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b087      	sub	sp, #28
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	f003 031f 	and.w	r3, r3, #31
 800ede2:	2201      	movs	r2, #1
 800ede4:	fa02 f303 	lsl.w	r3, r2, r3
 800ede8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6a1a      	ldr	r2, [r3, #32]
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	43db      	mvns	r3, r3
 800edf2:	401a      	ands	r2, r3
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6a1a      	ldr	r2, [r3, #32]
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	f003 031f 	and.w	r3, r3, #31
 800ee02:	6879      	ldr	r1, [r7, #4]
 800ee04:	fa01 f303 	lsl.w	r3, r1, r3
 800ee08:	431a      	orrs	r2, r3
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	621a      	str	r2, [r3, #32]
}
 800ee0e:	bf00      	nop
 800ee10:	371c      	adds	r7, #28
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
	...

0800ee1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d101      	bne.n	800ee34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ee30:	2302      	movs	r3, #2
 800ee32:	e068      	b.n	800ef06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2201      	movs	r2, #1
 800ee38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2202      	movs	r2, #2
 800ee40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a2e      	ldr	r2, [pc, #184]	; (800ef14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d004      	beq.n	800ee68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4a2d      	ldr	r2, [pc, #180]	; (800ef18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d108      	bne.n	800ee7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ee6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a1e      	ldr	r2, [pc, #120]	; (800ef14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d01d      	beq.n	800eeda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eea6:	d018      	beq.n	800eeda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a1b      	ldr	r2, [pc, #108]	; (800ef1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d013      	beq.n	800eeda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a1a      	ldr	r2, [pc, #104]	; (800ef20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d00e      	beq.n	800eeda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a18      	ldr	r2, [pc, #96]	; (800ef24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d009      	beq.n	800eeda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a13      	ldr	r2, [pc, #76]	; (800ef18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d004      	beq.n	800eeda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a14      	ldr	r2, [pc, #80]	; (800ef28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d10c      	bne.n	800eef4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	4313      	orrs	r3, r2
 800eeea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2201      	movs	r2, #1
 800eef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3714      	adds	r7, #20
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	40012c00 	.word	0x40012c00
 800ef18:	40013400 	.word	0x40013400
 800ef1c:	40000400 	.word	0x40000400
 800ef20:	40000800 	.word	0x40000800
 800ef24:	40000c00 	.word	0x40000c00
 800ef28:	40014000 	.word	0x40014000

0800ef2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ef36:	2300      	movs	r3, #0
 800ef38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d101      	bne.n	800ef48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ef44:	2302      	movs	r3, #2
 800ef46:	e065      	b.n	800f014 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4313      	orrs	r3, r2
 800ef86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	4313      	orrs	r3, r2
 800ef94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	695b      	ldr	r3, [r3, #20]
 800efa0:	4313      	orrs	r3, r2
 800efa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efae:	4313      	orrs	r3, r2
 800efb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	041b      	lsls	r3, r3, #16
 800efbe:	4313      	orrs	r3, r2
 800efc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a16      	ldr	r2, [pc, #88]	; (800f020 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d004      	beq.n	800efd6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a14      	ldr	r2, [pc, #80]	; (800f024 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d115      	bne.n	800f002 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe0:	051b      	lsls	r3, r3, #20
 800efe2:	4313      	orrs	r3, r2
 800efe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	69db      	ldr	r3, [r3, #28]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	6a1b      	ldr	r3, [r3, #32]
 800effe:	4313      	orrs	r3, r2
 800f000:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f012:	2300      	movs	r3, #0
}
 800f014:	4618      	mov	r0, r3
 800f016:	3714      	adds	r7, #20
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	40012c00 	.word	0x40012c00
 800f024:	40013400 	.word	0x40013400

0800f028 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800f028:	b480      	push	{r7}
 800f02a:	b08b      	sub	sp, #44	; 0x2c
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f034:	2300      	movs	r3, #0
 800f036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f040:	2b01      	cmp	r3, #1
 800f042:	d101      	bne.n	800f048 <HAL_TIMEx_ConfigBreakInput+0x20>
 800f044:	2302      	movs	r3, #2
 800f046:	e0af      	b.n	800f1a8 <HAL_TIMEx_ConfigBreakInput+0x180>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	3b01      	subs	r3, #1
 800f056:	2b07      	cmp	r3, #7
 800f058:	d83a      	bhi.n	800f0d0 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800f05a:	a201      	add	r2, pc, #4	; (adr r2, 800f060 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800f05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f060:	0800f081 	.word	0x0800f081
 800f064:	0800f095 	.word	0x0800f095
 800f068:	0800f0d1 	.word	0x0800f0d1
 800f06c:	0800f0a9 	.word	0x0800f0a9
 800f070:	0800f0d1 	.word	0x0800f0d1
 800f074:	0800f0d1 	.word	0x0800f0d1
 800f078:	0800f0d1 	.word	0x0800f0d1
 800f07c:	0800f0bd 	.word	0x0800f0bd
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800f080:	2301      	movs	r3, #1
 800f082:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800f084:	2300      	movs	r3, #0
 800f086:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800f088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f08c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800f08e:	2309      	movs	r3, #9
 800f090:	613b      	str	r3, [r7, #16]
      break;
 800f092:	e026      	b.n	800f0e2 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800f094:	2302      	movs	r3, #2
 800f096:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800f098:	2301      	movs	r3, #1
 800f09a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800f09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0a0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800f0a2:	230a      	movs	r3, #10
 800f0a4:	613b      	str	r3, [r7, #16]
      break;
 800f0a6:	e01c      	b.n	800f0e2 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800f0a8:	2304      	movs	r3, #4
 800f0aa:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800f0b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0b4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800f0b6:	230b      	movs	r3, #11
 800f0b8:	613b      	str	r3, [r7, #16]
      break;
 800f0ba:	e012      	b.n	800f0e2 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800f0bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0c0:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800f0c2:	2308      	movs	r3, #8
 800f0c4:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	613b      	str	r3, [r7, #16]
      break;
 800f0ce:	e008      	b.n	800f0e2 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	613b      	str	r3, [r7, #16]
      break;
 800f0e0:	bf00      	nop
    }
  }

  switch (BreakInput)
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d003      	beq.n	800f0f0 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	d029      	beq.n	800f142 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800f0ee:	e051      	b.n	800f194 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0f6:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	43db      	mvns	r3, r3
 800f0fc:	6a3a      	ldr	r2, [r7, #32]
 800f0fe:	4013      	ands	r3, r2
 800f100:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685a      	ldr	r2, [r3, #4]
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	409a      	lsls	r2, r3
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	4013      	ands	r3, r2
 800f10e:	6a3a      	ldr	r2, [r7, #32]
 800f110:	4313      	orrs	r3, r2
 800f112:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b08      	cmp	r3, #8
 800f11a:	d00d      	beq.n	800f138 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	43db      	mvns	r3, r3
 800f120:	6a3a      	ldr	r2, [r7, #32]
 800f122:	4013      	ands	r3, r2
 800f124:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	409a      	lsls	r2, r3
 800f12e:	69bb      	ldr	r3, [r7, #24]
 800f130:	4013      	ands	r3, r2
 800f132:	6a3a      	ldr	r2, [r7, #32]
 800f134:	4313      	orrs	r3, r2
 800f136:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6a3a      	ldr	r2, [r7, #32]
 800f13e:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800f140:	e02c      	b.n	800f19c <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f148:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	43db      	mvns	r3, r3
 800f14e:	6a3a      	ldr	r2, [r7, #32]
 800f150:	4013      	ands	r3, r2
 800f152:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	685a      	ldr	r2, [r3, #4]
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	409a      	lsls	r2, r3
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	4013      	ands	r3, r2
 800f160:	6a3a      	ldr	r2, [r7, #32]
 800f162:	4313      	orrs	r3, r2
 800f164:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b08      	cmp	r3, #8
 800f16c:	d00d      	beq.n	800f18a <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	43db      	mvns	r3, r3
 800f172:	6a3a      	ldr	r2, [r7, #32]
 800f174:	4013      	ands	r3, r2
 800f176:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	689a      	ldr	r2, [r3, #8]
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	409a      	lsls	r2, r3
 800f180:	69bb      	ldr	r3, [r7, #24]
 800f182:	4013      	ands	r3, r2
 800f184:	6a3a      	ldr	r2, [r7, #32]
 800f186:	4313      	orrs	r3, r2
 800f188:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6a3a      	ldr	r2, [r7, #32]
 800f190:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800f192:	e003      	b.n	800f19c <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800f194:	2301      	movs	r3, #1
 800f196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800f19a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	372c      	adds	r7, #44	; 0x2c
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f1bc:	bf00      	nop
 800f1be:	370c      	adds	r7, #12
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f1d0:	bf00      	nop
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f1e4:	bf00      	nop
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d101      	bne.n	800f202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	e042      	b.n	800f288 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d106      	bne.n	800f21a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7f4 ff83 	bl	8004120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2224      	movs	r2, #36	; 0x24
 800f21e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f022 0201 	bic.w	r2, r2, #1
 800f230:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f236:	2b00      	cmp	r3, #0
 800f238:	d002      	beq.n	800f240 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fbb4 	bl	800f9a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 f8b5 	bl	800f3b0 <UART_SetConfig>
 800f246:	4603      	mov	r3, r0
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d101      	bne.n	800f250 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f24c:	2301      	movs	r3, #1
 800f24e:	e01b      	b.n	800f288 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	685a      	ldr	r2, [r3, #4]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f25e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	689a      	ldr	r2, [r3, #8]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f26e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f042 0201 	orr.w	r2, r2, #1
 800f27e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 fc33 	bl	800faec <UART_CheckIdleState>
 800f286:	4603      	mov	r3, r0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b08a      	sub	sp, #40	; 0x28
 800f294:	af02      	add	r7, sp, #8
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	603b      	str	r3, [r7, #0]
 800f29c:	4613      	mov	r3, r2
 800f29e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2a6:	2b20      	cmp	r3, #32
 800f2a8:	d17c      	bne.n	800f3a4 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <HAL_UART_Transmit+0x26>
 800f2b0:	88fb      	ldrh	r3, [r7, #6]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d101      	bne.n	800f2ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e075      	b.n	800f3a6 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2221      	movs	r2, #33	; 0x21
 800f2c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f2ca:	f7f7 fc69 	bl	8006ba0 <HAL_GetTick>
 800f2ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	88fa      	ldrh	r2, [r7, #6]
 800f2d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	88fa      	ldrh	r2, [r7, #6]
 800f2dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2e8:	d108      	bne.n	800f2fc <HAL_UART_Transmit+0x6c>
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d104      	bne.n	800f2fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	61bb      	str	r3, [r7, #24]
 800f2fa:	e003      	b.n	800f304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f300:	2300      	movs	r3, #0
 800f302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f304:	e031      	b.n	800f36a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	2200      	movs	r2, #0
 800f30e:	2180      	movs	r1, #128	; 0x80
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f000 fc95 	bl	800fc40 <UART_WaitOnFlagUntilTimeout>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d005      	beq.n	800f328 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2220      	movs	r2, #32
 800f320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800f324:	2303      	movs	r3, #3
 800f326:	e03e      	b.n	800f3a6 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d10b      	bne.n	800f346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	881a      	ldrh	r2, [r3, #0]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f33a:	b292      	uxth	r2, r2
 800f33c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	3302      	adds	r3, #2
 800f342:	61bb      	str	r3, [r7, #24]
 800f344:	e008      	b.n	800f358 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	781a      	ldrb	r2, [r3, #0]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	b292      	uxth	r2, r2
 800f350:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	3301      	adds	r3, #1
 800f356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f35e:	b29b      	uxth	r3, r3
 800f360:	3b01      	subs	r3, #1
 800f362:	b29a      	uxth	r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f370:	b29b      	uxth	r3, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1c7      	bne.n	800f306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	2200      	movs	r2, #0
 800f37e:	2140      	movs	r1, #64	; 0x40
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f000 fc5d 	bl	800fc40 <UART_WaitOnFlagUntilTimeout>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d005      	beq.n	800f398 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2220      	movs	r2, #32
 800f390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800f394:	2303      	movs	r3, #3
 800f396:	e006      	b.n	800f3a6 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2220      	movs	r2, #32
 800f39c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	e000      	b.n	800f3a6 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800f3a4:	2302      	movs	r3, #2
  }
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3720      	adds	r7, #32
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
	...

0800f3b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f3b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3b4:	b08c      	sub	sp, #48	; 0x30
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	689a      	ldr	r2, [r3, #8]
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	691b      	ldr	r3, [r3, #16]
 800f3c8:	431a      	orrs	r2, r3
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	695b      	ldr	r3, [r3, #20]
 800f3ce:	431a      	orrs	r2, r3
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	69db      	ldr	r3, [r3, #28]
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	4baa      	ldr	r3, [pc, #680]	; (800f688 <UART_SetConfig+0x2d8>)
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	6812      	ldr	r2, [r2, #0]
 800f3e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3e8:	430b      	orrs	r3, r1
 800f3ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	68da      	ldr	r2, [r3, #12]
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	430a      	orrs	r2, r1
 800f400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	699b      	ldr	r3, [r3, #24]
 800f406:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4a9f      	ldr	r2, [pc, #636]	; (800f68c <UART_SetConfig+0x2dc>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d004      	beq.n	800f41c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	6a1b      	ldr	r3, [r3, #32]
 800f416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f418:	4313      	orrs	r3, r2
 800f41a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f426:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f42a:	697a      	ldr	r2, [r7, #20]
 800f42c:	6812      	ldr	r2, [r2, #0]
 800f42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f430:	430b      	orrs	r3, r1
 800f432:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43a:	f023 010f 	bic.w	r1, r3, #15
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	430a      	orrs	r2, r1
 800f448:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a90      	ldr	r2, [pc, #576]	; (800f690 <UART_SetConfig+0x2e0>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d125      	bne.n	800f4a0 <UART_SetConfig+0xf0>
 800f454:	4b8f      	ldr	r3, [pc, #572]	; (800f694 <UART_SetConfig+0x2e4>)
 800f456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f45a:	f003 0303 	and.w	r3, r3, #3
 800f45e:	2b03      	cmp	r3, #3
 800f460:	d81a      	bhi.n	800f498 <UART_SetConfig+0xe8>
 800f462:	a201      	add	r2, pc, #4	; (adr r2, 800f468 <UART_SetConfig+0xb8>)
 800f464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f468:	0800f479 	.word	0x0800f479
 800f46c:	0800f489 	.word	0x0800f489
 800f470:	0800f481 	.word	0x0800f481
 800f474:	0800f491 	.word	0x0800f491
 800f478:	2301      	movs	r3, #1
 800f47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f47e:	e116      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f480:	2302      	movs	r3, #2
 800f482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f486:	e112      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f488:	2304      	movs	r3, #4
 800f48a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f48e:	e10e      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f490:	2308      	movs	r3, #8
 800f492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f496:	e10a      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f498:	2310      	movs	r3, #16
 800f49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f49e:	e106      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4a7c      	ldr	r2, [pc, #496]	; (800f698 <UART_SetConfig+0x2e8>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d138      	bne.n	800f51c <UART_SetConfig+0x16c>
 800f4aa:	4b7a      	ldr	r3, [pc, #488]	; (800f694 <UART_SetConfig+0x2e4>)
 800f4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4b0:	f003 030c 	and.w	r3, r3, #12
 800f4b4:	2b0c      	cmp	r3, #12
 800f4b6:	d82d      	bhi.n	800f514 <UART_SetConfig+0x164>
 800f4b8:	a201      	add	r2, pc, #4	; (adr r2, 800f4c0 <UART_SetConfig+0x110>)
 800f4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4be:	bf00      	nop
 800f4c0:	0800f4f5 	.word	0x0800f4f5
 800f4c4:	0800f515 	.word	0x0800f515
 800f4c8:	0800f515 	.word	0x0800f515
 800f4cc:	0800f515 	.word	0x0800f515
 800f4d0:	0800f505 	.word	0x0800f505
 800f4d4:	0800f515 	.word	0x0800f515
 800f4d8:	0800f515 	.word	0x0800f515
 800f4dc:	0800f515 	.word	0x0800f515
 800f4e0:	0800f4fd 	.word	0x0800f4fd
 800f4e4:	0800f515 	.word	0x0800f515
 800f4e8:	0800f515 	.word	0x0800f515
 800f4ec:	0800f515 	.word	0x0800f515
 800f4f0:	0800f50d 	.word	0x0800f50d
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4fa:	e0d8      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f4fc:	2302      	movs	r3, #2
 800f4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f502:	e0d4      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f504:	2304      	movs	r3, #4
 800f506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f50a:	e0d0      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f50c:	2308      	movs	r3, #8
 800f50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f512:	e0cc      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f514:	2310      	movs	r3, #16
 800f516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f51a:	e0c8      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a5e      	ldr	r2, [pc, #376]	; (800f69c <UART_SetConfig+0x2ec>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d125      	bne.n	800f572 <UART_SetConfig+0x1c2>
 800f526:	4b5b      	ldr	r3, [pc, #364]	; (800f694 <UART_SetConfig+0x2e4>)
 800f528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f52c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f530:	2b30      	cmp	r3, #48	; 0x30
 800f532:	d016      	beq.n	800f562 <UART_SetConfig+0x1b2>
 800f534:	2b30      	cmp	r3, #48	; 0x30
 800f536:	d818      	bhi.n	800f56a <UART_SetConfig+0x1ba>
 800f538:	2b20      	cmp	r3, #32
 800f53a:	d00a      	beq.n	800f552 <UART_SetConfig+0x1a2>
 800f53c:	2b20      	cmp	r3, #32
 800f53e:	d814      	bhi.n	800f56a <UART_SetConfig+0x1ba>
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <UART_SetConfig+0x19a>
 800f544:	2b10      	cmp	r3, #16
 800f546:	d008      	beq.n	800f55a <UART_SetConfig+0x1aa>
 800f548:	e00f      	b.n	800f56a <UART_SetConfig+0x1ba>
 800f54a:	2300      	movs	r3, #0
 800f54c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f550:	e0ad      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f552:	2302      	movs	r3, #2
 800f554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f558:	e0a9      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f55a:	2304      	movs	r3, #4
 800f55c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f560:	e0a5      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f562:	2308      	movs	r3, #8
 800f564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f568:	e0a1      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f56a:	2310      	movs	r3, #16
 800f56c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f570:	e09d      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a4a      	ldr	r2, [pc, #296]	; (800f6a0 <UART_SetConfig+0x2f0>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d125      	bne.n	800f5c8 <UART_SetConfig+0x218>
 800f57c:	4b45      	ldr	r3, [pc, #276]	; (800f694 <UART_SetConfig+0x2e4>)
 800f57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f582:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f586:	2bc0      	cmp	r3, #192	; 0xc0
 800f588:	d016      	beq.n	800f5b8 <UART_SetConfig+0x208>
 800f58a:	2bc0      	cmp	r3, #192	; 0xc0
 800f58c:	d818      	bhi.n	800f5c0 <UART_SetConfig+0x210>
 800f58e:	2b80      	cmp	r3, #128	; 0x80
 800f590:	d00a      	beq.n	800f5a8 <UART_SetConfig+0x1f8>
 800f592:	2b80      	cmp	r3, #128	; 0x80
 800f594:	d814      	bhi.n	800f5c0 <UART_SetConfig+0x210>
 800f596:	2b00      	cmp	r3, #0
 800f598:	d002      	beq.n	800f5a0 <UART_SetConfig+0x1f0>
 800f59a:	2b40      	cmp	r3, #64	; 0x40
 800f59c:	d008      	beq.n	800f5b0 <UART_SetConfig+0x200>
 800f59e:	e00f      	b.n	800f5c0 <UART_SetConfig+0x210>
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5a6:	e082      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f5a8:	2302      	movs	r3, #2
 800f5aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5ae:	e07e      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f5b0:	2304      	movs	r3, #4
 800f5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5b6:	e07a      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f5b8:	2308      	movs	r3, #8
 800f5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5be:	e076      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f5c0:	2310      	movs	r3, #16
 800f5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5c6:	e072      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a35      	ldr	r2, [pc, #212]	; (800f6a4 <UART_SetConfig+0x2f4>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d12a      	bne.n	800f628 <UART_SetConfig+0x278>
 800f5d2:	4b30      	ldr	r3, [pc, #192]	; (800f694 <UART_SetConfig+0x2e4>)
 800f5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5e0:	d01a      	beq.n	800f618 <UART_SetConfig+0x268>
 800f5e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5e6:	d81b      	bhi.n	800f620 <UART_SetConfig+0x270>
 800f5e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5ec:	d00c      	beq.n	800f608 <UART_SetConfig+0x258>
 800f5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5f2:	d815      	bhi.n	800f620 <UART_SetConfig+0x270>
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d003      	beq.n	800f600 <UART_SetConfig+0x250>
 800f5f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5fc:	d008      	beq.n	800f610 <UART_SetConfig+0x260>
 800f5fe:	e00f      	b.n	800f620 <UART_SetConfig+0x270>
 800f600:	2300      	movs	r3, #0
 800f602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f606:	e052      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f608:	2302      	movs	r3, #2
 800f60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f60e:	e04e      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f610:	2304      	movs	r3, #4
 800f612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f616:	e04a      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f618:	2308      	movs	r3, #8
 800f61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f61e:	e046      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f620:	2310      	movs	r3, #16
 800f622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f626:	e042      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a17      	ldr	r2, [pc, #92]	; (800f68c <UART_SetConfig+0x2dc>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d13a      	bne.n	800f6a8 <UART_SetConfig+0x2f8>
 800f632:	4b18      	ldr	r3, [pc, #96]	; (800f694 <UART_SetConfig+0x2e4>)
 800f634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f63c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f640:	d01a      	beq.n	800f678 <UART_SetConfig+0x2c8>
 800f642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f646:	d81b      	bhi.n	800f680 <UART_SetConfig+0x2d0>
 800f648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f64c:	d00c      	beq.n	800f668 <UART_SetConfig+0x2b8>
 800f64e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f652:	d815      	bhi.n	800f680 <UART_SetConfig+0x2d0>
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <UART_SetConfig+0x2b0>
 800f658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f65c:	d008      	beq.n	800f670 <UART_SetConfig+0x2c0>
 800f65e:	e00f      	b.n	800f680 <UART_SetConfig+0x2d0>
 800f660:	2300      	movs	r3, #0
 800f662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f666:	e022      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f668:	2302      	movs	r3, #2
 800f66a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f66e:	e01e      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f670:	2304      	movs	r3, #4
 800f672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f676:	e01a      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f678:	2308      	movs	r3, #8
 800f67a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f67e:	e016      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f680:	2310      	movs	r3, #16
 800f682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f686:	e012      	b.n	800f6ae <UART_SetConfig+0x2fe>
 800f688:	cfff69f3 	.word	0xcfff69f3
 800f68c:	40008000 	.word	0x40008000
 800f690:	40013800 	.word	0x40013800
 800f694:	40021000 	.word	0x40021000
 800f698:	40004400 	.word	0x40004400
 800f69c:	40004800 	.word	0x40004800
 800f6a0:	40004c00 	.word	0x40004c00
 800f6a4:	40005000 	.word	0x40005000
 800f6a8:	2310      	movs	r3, #16
 800f6aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4aae      	ldr	r2, [pc, #696]	; (800f96c <UART_SetConfig+0x5bc>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	f040 8097 	bne.w	800f7e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f6ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f6be:	2b08      	cmp	r3, #8
 800f6c0:	d823      	bhi.n	800f70a <UART_SetConfig+0x35a>
 800f6c2:	a201      	add	r2, pc, #4	; (adr r2, 800f6c8 <UART_SetConfig+0x318>)
 800f6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c8:	0800f6ed 	.word	0x0800f6ed
 800f6cc:	0800f70b 	.word	0x0800f70b
 800f6d0:	0800f6f5 	.word	0x0800f6f5
 800f6d4:	0800f70b 	.word	0x0800f70b
 800f6d8:	0800f6fb 	.word	0x0800f6fb
 800f6dc:	0800f70b 	.word	0x0800f70b
 800f6e0:	0800f70b 	.word	0x0800f70b
 800f6e4:	0800f70b 	.word	0x0800f70b
 800f6e8:	0800f703 	.word	0x0800f703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6ec:	f7fa fb56 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800f6f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f6f2:	e010      	b.n	800f716 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f6f4:	4b9e      	ldr	r3, [pc, #632]	; (800f970 <UART_SetConfig+0x5c0>)
 800f6f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f6f8:	e00d      	b.n	800f716 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f6fa:	f7fa fab7 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800f6fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f700:	e009      	b.n	800f716 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f708:	e005      	b.n	800f716 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f70a:	2300      	movs	r3, #0
 800f70c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f70e:	2301      	movs	r3, #1
 800f710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f714:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f000 8130 	beq.w	800f97e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f722:	4a94      	ldr	r2, [pc, #592]	; (800f974 <UART_SetConfig+0x5c4>)
 800f724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f728:	461a      	mov	r2, r3
 800f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f730:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	685a      	ldr	r2, [r3, #4]
 800f736:	4613      	mov	r3, r2
 800f738:	005b      	lsls	r3, r3, #1
 800f73a:	4413      	add	r3, r2
 800f73c:	69ba      	ldr	r2, [r7, #24]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d305      	bcc.n	800f74e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f748:	69ba      	ldr	r2, [r7, #24]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d903      	bls.n	800f756 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f74e:	2301      	movs	r3, #1
 800f750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f754:	e113      	b.n	800f97e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	2200      	movs	r2, #0
 800f75a:	60bb      	str	r3, [r7, #8]
 800f75c:	60fa      	str	r2, [r7, #12]
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f762:	4a84      	ldr	r2, [pc, #528]	; (800f974 <UART_SetConfig+0x5c4>)
 800f764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f768:	b29b      	uxth	r3, r3
 800f76a:	2200      	movs	r2, #0
 800f76c:	603b      	str	r3, [r7, #0]
 800f76e:	607a      	str	r2, [r7, #4]
 800f770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f774:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f778:	f7f1 fa2e 	bl	8000bd8 <__aeabi_uldivmod>
 800f77c:	4602      	mov	r2, r0
 800f77e:	460b      	mov	r3, r1
 800f780:	4610      	mov	r0, r2
 800f782:	4619      	mov	r1, r3
 800f784:	f04f 0200 	mov.w	r2, #0
 800f788:	f04f 0300 	mov.w	r3, #0
 800f78c:	020b      	lsls	r3, r1, #8
 800f78e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f792:	0202      	lsls	r2, r0, #8
 800f794:	6979      	ldr	r1, [r7, #20]
 800f796:	6849      	ldr	r1, [r1, #4]
 800f798:	0849      	lsrs	r1, r1, #1
 800f79a:	2000      	movs	r0, #0
 800f79c:	460c      	mov	r4, r1
 800f79e:	4605      	mov	r5, r0
 800f7a0:	eb12 0804 	adds.w	r8, r2, r4
 800f7a4:	eb43 0905 	adc.w	r9, r3, r5
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	469a      	mov	sl, r3
 800f7b0:	4693      	mov	fp, r2
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	465b      	mov	r3, fp
 800f7b6:	4640      	mov	r0, r8
 800f7b8:	4649      	mov	r1, r9
 800f7ba:	f7f1 fa0d 	bl	8000bd8 <__aeabi_uldivmod>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7cc:	d308      	bcc.n	800f7e0 <UART_SetConfig+0x430>
 800f7ce:	6a3b      	ldr	r3, [r7, #32]
 800f7d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7d4:	d204      	bcs.n	800f7e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	6a3a      	ldr	r2, [r7, #32]
 800f7dc:	60da      	str	r2, [r3, #12]
 800f7de:	e0ce      	b.n	800f97e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f7e6:	e0ca      	b.n	800f97e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	69db      	ldr	r3, [r3, #28]
 800f7ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7f0:	d166      	bne.n	800f8c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f7f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f7f6:	2b08      	cmp	r3, #8
 800f7f8:	d827      	bhi.n	800f84a <UART_SetConfig+0x49a>
 800f7fa:	a201      	add	r2, pc, #4	; (adr r2, 800f800 <UART_SetConfig+0x450>)
 800f7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f800:	0800f825 	.word	0x0800f825
 800f804:	0800f82d 	.word	0x0800f82d
 800f808:	0800f835 	.word	0x0800f835
 800f80c:	0800f84b 	.word	0x0800f84b
 800f810:	0800f83b 	.word	0x0800f83b
 800f814:	0800f84b 	.word	0x0800f84b
 800f818:	0800f84b 	.word	0x0800f84b
 800f81c:	0800f84b 	.word	0x0800f84b
 800f820:	0800f843 	.word	0x0800f843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f824:	f7fa faba 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800f828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f82a:	e014      	b.n	800f856 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f82c:	f7fa facc 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800f830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f832:	e010      	b.n	800f856 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f834:	4b4e      	ldr	r3, [pc, #312]	; (800f970 <UART_SetConfig+0x5c0>)
 800f836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f838:	e00d      	b.n	800f856 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f83a:	f7fa fa17 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800f83e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f840:	e009      	b.n	800f856 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f848:	e005      	b.n	800f856 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f84a:	2300      	movs	r3, #0
 800f84c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f84e:	2301      	movs	r3, #1
 800f850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f000 8090 	beq.w	800f97e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f862:	4a44      	ldr	r2, [pc, #272]	; (800f974 <UART_SetConfig+0x5c4>)
 800f864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f868:	461a      	mov	r2, r3
 800f86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f870:	005a      	lsls	r2, r3, #1
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	085b      	lsrs	r3, r3, #1
 800f878:	441a      	add	r2, r3
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f882:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f884:	6a3b      	ldr	r3, [r7, #32]
 800f886:	2b0f      	cmp	r3, #15
 800f888:	d916      	bls.n	800f8b8 <UART_SetConfig+0x508>
 800f88a:	6a3b      	ldr	r3, [r7, #32]
 800f88c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f890:	d212      	bcs.n	800f8b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f892:	6a3b      	ldr	r3, [r7, #32]
 800f894:	b29b      	uxth	r3, r3
 800f896:	f023 030f 	bic.w	r3, r3, #15
 800f89a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f89c:	6a3b      	ldr	r3, [r7, #32]
 800f89e:	085b      	lsrs	r3, r3, #1
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	f003 0307 	and.w	r3, r3, #7
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	8bfb      	ldrh	r3, [r7, #30]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	8bfa      	ldrh	r2, [r7, #30]
 800f8b4:	60da      	str	r2, [r3, #12]
 800f8b6:	e062      	b.n	800f97e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f8be:	e05e      	b.n	800f97e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f8c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f8c4:	2b08      	cmp	r3, #8
 800f8c6:	d828      	bhi.n	800f91a <UART_SetConfig+0x56a>
 800f8c8:	a201      	add	r2, pc, #4	; (adr r2, 800f8d0 <UART_SetConfig+0x520>)
 800f8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ce:	bf00      	nop
 800f8d0:	0800f8f5 	.word	0x0800f8f5
 800f8d4:	0800f8fd 	.word	0x0800f8fd
 800f8d8:	0800f905 	.word	0x0800f905
 800f8dc:	0800f91b 	.word	0x0800f91b
 800f8e0:	0800f90b 	.word	0x0800f90b
 800f8e4:	0800f91b 	.word	0x0800f91b
 800f8e8:	0800f91b 	.word	0x0800f91b
 800f8ec:	0800f91b 	.word	0x0800f91b
 800f8f0:	0800f913 	.word	0x0800f913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8f4:	f7fa fa52 	bl	8009d9c <HAL_RCC_GetPCLK1Freq>
 800f8f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f8fa:	e014      	b.n	800f926 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f8fc:	f7fa fa64 	bl	8009dc8 <HAL_RCC_GetPCLK2Freq>
 800f900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f902:	e010      	b.n	800f926 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f904:	4b1a      	ldr	r3, [pc, #104]	; (800f970 <UART_SetConfig+0x5c0>)
 800f906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f908:	e00d      	b.n	800f926 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f90a:	f7fa f9af 	bl	8009c6c <HAL_RCC_GetSysClockFreq>
 800f90e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f910:	e009      	b.n	800f926 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f918:	e005      	b.n	800f926 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f91a:	2300      	movs	r3, #0
 800f91c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f91e:	2301      	movs	r3, #1
 800f920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f924:	bf00      	nop
    }

    if (pclk != 0U)
 800f926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d028      	beq.n	800f97e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f930:	4a10      	ldr	r2, [pc, #64]	; (800f974 <UART_SetConfig+0x5c4>)
 800f932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f936:	461a      	mov	r2, r3
 800f938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	085b      	lsrs	r3, r3, #1
 800f944:	441a      	add	r2, r3
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f94e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f950:	6a3b      	ldr	r3, [r7, #32]
 800f952:	2b0f      	cmp	r3, #15
 800f954:	d910      	bls.n	800f978 <UART_SetConfig+0x5c8>
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f95c:	d20c      	bcs.n	800f978 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	b29a      	uxth	r2, r3
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	60da      	str	r2, [r3, #12]
 800f968:	e009      	b.n	800f97e <UART_SetConfig+0x5ce>
 800f96a:	bf00      	nop
 800f96c:	40008000 	.word	0x40008000
 800f970:	00f42400 	.word	0x00f42400
 800f974:	08018260 	.word	0x08018260
      }
      else
      {
        ret = HAL_ERROR;
 800f978:	2301      	movs	r3, #1
 800f97a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	2201      	movs	r2, #1
 800f982:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2201      	movs	r2, #1
 800f98a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2200      	movs	r2, #0
 800f992:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	2200      	movs	r2, #0
 800f998:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f99a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3730      	adds	r7, #48	; 0x30
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f9a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9b4:	f003 0308 	and.w	r3, r3, #8
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00a      	beq.n	800f9d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	430a      	orrs	r2, r1
 800f9d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d6:	f003 0301 	and.w	r3, r3, #1
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00a      	beq.n	800f9f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	430a      	orrs	r2, r1
 800f9f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f8:	f003 0302 	and.w	r3, r3, #2
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00a      	beq.n	800fa16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	430a      	orrs	r2, r1
 800fa14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa1a:	f003 0304 	and.w	r3, r3, #4
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00a      	beq.n	800fa38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	430a      	orrs	r2, r1
 800fa36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa3c:	f003 0310 	and.w	r3, r3, #16
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00a      	beq.n	800fa5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	430a      	orrs	r2, r1
 800fa58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa5e:	f003 0320 	and.w	r3, r3, #32
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00a      	beq.n	800fa7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	430a      	orrs	r2, r1
 800fa7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d01a      	beq.n	800fabe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	430a      	orrs	r2, r1
 800fa9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800faa6:	d10a      	bne.n	800fabe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	430a      	orrs	r2, r1
 800fabc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00a      	beq.n	800fae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	430a      	orrs	r2, r1
 800fade:	605a      	str	r2, [r3, #4]
  }
}
 800fae0:	bf00      	nop
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b098      	sub	sp, #96	; 0x60
 800faf0:	af02      	add	r7, sp, #8
 800faf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fafc:	f7f7 f850 	bl	8006ba0 <HAL_GetTick>
 800fb00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f003 0308 	and.w	r3, r3, #8
 800fb0c:	2b08      	cmp	r3, #8
 800fb0e:	d12f      	bne.n	800fb70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 f88e 	bl	800fc40 <UART_WaitOnFlagUntilTimeout>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d022      	beq.n	800fb70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb32:	e853 3f00 	ldrex	r3, [r3]
 800fb36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb3e:	653b      	str	r3, [r7, #80]	; 0x50
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	461a      	mov	r2, r3
 800fb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb48:	647b      	str	r3, [r7, #68]	; 0x44
 800fb4a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb50:	e841 2300 	strex	r3, r2, [r1]
 800fb54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d1e6      	bne.n	800fb2a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2220      	movs	r2, #32
 800fb60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb6c:	2303      	movs	r3, #3
 800fb6e:	e063      	b.n	800fc38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f003 0304 	and.w	r3, r3, #4
 800fb7a:	2b04      	cmp	r3, #4
 800fb7c:	d149      	bne.n	800fc12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb86:	2200      	movs	r2, #0
 800fb88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f000 f857 	bl	800fc40 <UART_WaitOnFlagUntilTimeout>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d03c      	beq.n	800fc12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba0:	e853 3f00 	ldrex	r3, [r3]
 800fba4:	623b      	str	r3, [r7, #32]
   return(result);
 800fba6:	6a3b      	ldr	r3, [r7, #32]
 800fba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb6:	633b      	str	r3, [r7, #48]	; 0x30
 800fbb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbbe:	e841 2300 	strex	r3, r2, [r1]
 800fbc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1e6      	bne.n	800fb98 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	3308      	adds	r3, #8
 800fbd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	e853 3f00 	ldrex	r3, [r3]
 800fbd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f023 0301 	bic.w	r3, r3, #1
 800fbe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	3308      	adds	r3, #8
 800fbe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbea:	61fa      	str	r2, [r7, #28]
 800fbec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbee:	69b9      	ldr	r1, [r7, #24]
 800fbf0:	69fa      	ldr	r2, [r7, #28]
 800fbf2:	e841 2300 	strex	r3, r2, [r1]
 800fbf6:	617b      	str	r3, [r7, #20]
   return(result);
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1e5      	bne.n	800fbca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2220      	movs	r2, #32
 800fc02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc0e:	2303      	movs	r3, #3
 800fc10:	e012      	b.n	800fc38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2220      	movs	r2, #32
 800fc16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2220      	movs	r2, #32
 800fc1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3758      	adds	r7, #88	; 0x58
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	603b      	str	r3, [r7, #0]
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc50:	e049      	b.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc58:	d045      	beq.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc5a:	f7f6 ffa1 	bl	8006ba0 <HAL_GetTick>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	1ad3      	subs	r3, r2, r3
 800fc64:	69ba      	ldr	r2, [r7, #24]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d302      	bcc.n	800fc70 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fc70:	2303      	movs	r3, #3
 800fc72:	e048      	b.n	800fd06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f003 0304 	and.w	r3, r3, #4
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d031      	beq.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	69db      	ldr	r3, [r3, #28]
 800fc88:	f003 0308 	and.w	r3, r3, #8
 800fc8c:	2b08      	cmp	r3, #8
 800fc8e:	d110      	bne.n	800fcb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2208      	movs	r2, #8
 800fc96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f000 f838 	bl	800fd0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2208      	movs	r2, #8
 800fca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e029      	b.n	800fd06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	69db      	ldr	r3, [r3, #28]
 800fcb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fcc0:	d111      	bne.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f000 f81e 	bl	800fd0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2220      	movs	r2, #32
 800fcd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fce2:	2303      	movs	r3, #3
 800fce4:	e00f      	b.n	800fd06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	69da      	ldr	r2, [r3, #28]
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	4013      	ands	r3, r2
 800fcf0:	68ba      	ldr	r2, [r7, #8]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	bf0c      	ite	eq
 800fcf6:	2301      	moveq	r3, #1
 800fcf8:	2300      	movne	r3, #0
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	79fb      	ldrb	r3, [r7, #7]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d0a6      	beq.n	800fc52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd04:	2300      	movs	r3, #0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd0e:	b480      	push	{r7}
 800fd10:	b095      	sub	sp, #84	; 0x54
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1e:	e853 3f00 	ldrex	r3, [r3]
 800fd22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	461a      	mov	r2, r3
 800fd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd34:	643b      	str	r3, [r7, #64]	; 0x40
 800fd36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd3c:	e841 2300 	strex	r3, r2, [r1]
 800fd40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d1e6      	bne.n	800fd16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd50:	6a3b      	ldr	r3, [r7, #32]
 800fd52:	e853 3f00 	ldrex	r3, [r3]
 800fd56:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd5e:	f023 0301 	bic.w	r3, r3, #1
 800fd62:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	3308      	adds	r3, #8
 800fd6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd74:	e841 2300 	strex	r3, r2, [r1]
 800fd78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1e3      	bne.n	800fd48 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d118      	bne.n	800fdba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	e853 3f00 	ldrex	r3, [r3]
 800fd94:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	f023 0310 	bic.w	r3, r3, #16
 800fd9c:	647b      	str	r3, [r7, #68]	; 0x44
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	461a      	mov	r2, r3
 800fda4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fda6:	61bb      	str	r3, [r7, #24]
 800fda8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdaa:	6979      	ldr	r1, [r7, #20]
 800fdac:	69ba      	ldr	r2, [r7, #24]
 800fdae:	e841 2300 	strex	r3, r2, [r1]
 800fdb2:	613b      	str	r3, [r7, #16]
   return(result);
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d1e6      	bne.n	800fd88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2220      	movs	r2, #32
 800fdbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fdce:	bf00      	nop
 800fdd0:	3754      	adds	r7, #84	; 0x54
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr

0800fdda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fdda:	b480      	push	{r7}
 800fddc:	b085      	sub	sp, #20
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d101      	bne.n	800fdf0 <HAL_UARTEx_DisableFifoMode+0x16>
 800fdec:	2302      	movs	r3, #2
 800fdee:	e027      	b.n	800fe40 <HAL_UARTEx_DisableFifoMode+0x66>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2224      	movs	r2, #36	; 0x24
 800fdfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f022 0201 	bic.w	r2, r2, #1
 800fe16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fe1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2220      	movs	r2, #32
 800fe32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fe3e:	2300      	movs	r3, #0
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3714      	adds	r7, #20
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d101      	bne.n	800fe64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fe60:	2302      	movs	r3, #2
 800fe62:	e02d      	b.n	800fec0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2201      	movs	r2, #1
 800fe68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2224      	movs	r2, #36	; 0x24
 800fe70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f022 0201 	bic.w	r2, r2, #1
 800fe8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	683a      	ldr	r2, [r7, #0]
 800fe9c:	430a      	orrs	r2, r1
 800fe9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f000 f84f 	bl	800ff44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2220      	movs	r2, #32
 800feb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d101      	bne.n	800fee0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fedc:	2302      	movs	r3, #2
 800fede:	e02d      	b.n	800ff3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2224      	movs	r2, #36	; 0x24
 800feec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f022 0201 	bic.w	r2, r2, #1
 800ff06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	683a      	ldr	r2, [r7, #0]
 800ff18:	430a      	orrs	r2, r1
 800ff1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f811 	bl	800ff44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	68fa      	ldr	r2, [r7, #12]
 800ff28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2220      	movs	r2, #32
 800ff2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d108      	bne.n	800ff66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2201      	movs	r2, #1
 800ff58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ff64:	e031      	b.n	800ffca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ff66:	2308      	movs	r3, #8
 800ff68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ff6a:	2308      	movs	r3, #8
 800ff6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	0e5b      	lsrs	r3, r3, #25
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	f003 0307 	and.w	r3, r3, #7
 800ff7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	0f5b      	lsrs	r3, r3, #29
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	f003 0307 	and.w	r3, r3, #7
 800ff8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff8e:	7bbb      	ldrb	r3, [r7, #14]
 800ff90:	7b3a      	ldrb	r2, [r7, #12]
 800ff92:	4911      	ldr	r1, [pc, #68]	; (800ffd8 <UARTEx_SetNbDataToProcess+0x94>)
 800ff94:	5c8a      	ldrb	r2, [r1, r2]
 800ff96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff9a:	7b3a      	ldrb	r2, [r7, #12]
 800ff9c:	490f      	ldr	r1, [pc, #60]	; (800ffdc <UARTEx_SetNbDataToProcess+0x98>)
 800ff9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffa0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ffac:	7bfb      	ldrb	r3, [r7, #15]
 800ffae:	7b7a      	ldrb	r2, [r7, #13]
 800ffb0:	4909      	ldr	r1, [pc, #36]	; (800ffd8 <UARTEx_SetNbDataToProcess+0x94>)
 800ffb2:	5c8a      	ldrb	r2, [r1, r2]
 800ffb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ffb8:	7b7a      	ldrb	r2, [r7, #13]
 800ffba:	4908      	ldr	r1, [pc, #32]	; (800ffdc <UARTEx_SetNbDataToProcess+0x98>)
 800ffbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ffbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffc2:	b29a      	uxth	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ffca:	bf00      	nop
 800ffcc:	3714      	adds	r7, #20
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	08018278 	.word	0x08018278
 800ffdc:	08018280 	.word	0x08018280

0800ffe0 <__cvt>:
 800ffe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe4:	ec55 4b10 	vmov	r4, r5, d0
 800ffe8:	2d00      	cmp	r5, #0
 800ffea:	460e      	mov	r6, r1
 800ffec:	4619      	mov	r1, r3
 800ffee:	462b      	mov	r3, r5
 800fff0:	bfbb      	ittet	lt
 800fff2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fff6:	461d      	movlt	r5, r3
 800fff8:	2300      	movge	r3, #0
 800fffa:	232d      	movlt	r3, #45	; 0x2d
 800fffc:	700b      	strb	r3, [r1, #0]
 800fffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010000:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010004:	4691      	mov	r9, r2
 8010006:	f023 0820 	bic.w	r8, r3, #32
 801000a:	bfbc      	itt	lt
 801000c:	4622      	movlt	r2, r4
 801000e:	4614      	movlt	r4, r2
 8010010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010014:	d005      	beq.n	8010022 <__cvt+0x42>
 8010016:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801001a:	d100      	bne.n	801001e <__cvt+0x3e>
 801001c:	3601      	adds	r6, #1
 801001e:	2102      	movs	r1, #2
 8010020:	e000      	b.n	8010024 <__cvt+0x44>
 8010022:	2103      	movs	r1, #3
 8010024:	ab03      	add	r3, sp, #12
 8010026:	9301      	str	r3, [sp, #4]
 8010028:	ab02      	add	r3, sp, #8
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	ec45 4b10 	vmov	d0, r4, r5
 8010030:	4653      	mov	r3, sl
 8010032:	4632      	mov	r2, r6
 8010034:	f000 fec4 	bl	8010dc0 <_dtoa_r>
 8010038:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801003c:	4607      	mov	r7, r0
 801003e:	d102      	bne.n	8010046 <__cvt+0x66>
 8010040:	f019 0f01 	tst.w	r9, #1
 8010044:	d022      	beq.n	801008c <__cvt+0xac>
 8010046:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801004a:	eb07 0906 	add.w	r9, r7, r6
 801004e:	d110      	bne.n	8010072 <__cvt+0x92>
 8010050:	783b      	ldrb	r3, [r7, #0]
 8010052:	2b30      	cmp	r3, #48	; 0x30
 8010054:	d10a      	bne.n	801006c <__cvt+0x8c>
 8010056:	2200      	movs	r2, #0
 8010058:	2300      	movs	r3, #0
 801005a:	4620      	mov	r0, r4
 801005c:	4629      	mov	r1, r5
 801005e:	f7f0 fd4b 	bl	8000af8 <__aeabi_dcmpeq>
 8010062:	b918      	cbnz	r0, 801006c <__cvt+0x8c>
 8010064:	f1c6 0601 	rsb	r6, r6, #1
 8010068:	f8ca 6000 	str.w	r6, [sl]
 801006c:	f8da 3000 	ldr.w	r3, [sl]
 8010070:	4499      	add	r9, r3
 8010072:	2200      	movs	r2, #0
 8010074:	2300      	movs	r3, #0
 8010076:	4620      	mov	r0, r4
 8010078:	4629      	mov	r1, r5
 801007a:	f7f0 fd3d 	bl	8000af8 <__aeabi_dcmpeq>
 801007e:	b108      	cbz	r0, 8010084 <__cvt+0xa4>
 8010080:	f8cd 900c 	str.w	r9, [sp, #12]
 8010084:	2230      	movs	r2, #48	; 0x30
 8010086:	9b03      	ldr	r3, [sp, #12]
 8010088:	454b      	cmp	r3, r9
 801008a:	d307      	bcc.n	801009c <__cvt+0xbc>
 801008c:	9b03      	ldr	r3, [sp, #12]
 801008e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010090:	1bdb      	subs	r3, r3, r7
 8010092:	4638      	mov	r0, r7
 8010094:	6013      	str	r3, [r2, #0]
 8010096:	b004      	add	sp, #16
 8010098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801009c:	1c59      	adds	r1, r3, #1
 801009e:	9103      	str	r1, [sp, #12]
 80100a0:	701a      	strb	r2, [r3, #0]
 80100a2:	e7f0      	b.n	8010086 <__cvt+0xa6>

080100a4 <__exponent>:
 80100a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100a6:	4603      	mov	r3, r0
 80100a8:	2900      	cmp	r1, #0
 80100aa:	bfb8      	it	lt
 80100ac:	4249      	neglt	r1, r1
 80100ae:	f803 2b02 	strb.w	r2, [r3], #2
 80100b2:	bfb4      	ite	lt
 80100b4:	222d      	movlt	r2, #45	; 0x2d
 80100b6:	222b      	movge	r2, #43	; 0x2b
 80100b8:	2909      	cmp	r1, #9
 80100ba:	7042      	strb	r2, [r0, #1]
 80100bc:	dd2a      	ble.n	8010114 <__exponent+0x70>
 80100be:	f10d 0207 	add.w	r2, sp, #7
 80100c2:	4617      	mov	r7, r2
 80100c4:	260a      	movs	r6, #10
 80100c6:	4694      	mov	ip, r2
 80100c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80100cc:	fb06 1415 	mls	r4, r6, r5, r1
 80100d0:	3430      	adds	r4, #48	; 0x30
 80100d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80100d6:	460c      	mov	r4, r1
 80100d8:	2c63      	cmp	r4, #99	; 0x63
 80100da:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80100de:	4629      	mov	r1, r5
 80100e0:	dcf1      	bgt.n	80100c6 <__exponent+0x22>
 80100e2:	3130      	adds	r1, #48	; 0x30
 80100e4:	f1ac 0402 	sub.w	r4, ip, #2
 80100e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80100ec:	1c41      	adds	r1, r0, #1
 80100ee:	4622      	mov	r2, r4
 80100f0:	42ba      	cmp	r2, r7
 80100f2:	d30a      	bcc.n	801010a <__exponent+0x66>
 80100f4:	f10d 0209 	add.w	r2, sp, #9
 80100f8:	eba2 020c 	sub.w	r2, r2, ip
 80100fc:	42bc      	cmp	r4, r7
 80100fe:	bf88      	it	hi
 8010100:	2200      	movhi	r2, #0
 8010102:	4413      	add	r3, r2
 8010104:	1a18      	subs	r0, r3, r0
 8010106:	b003      	add	sp, #12
 8010108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801010a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801010e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010112:	e7ed      	b.n	80100f0 <__exponent+0x4c>
 8010114:	2330      	movs	r3, #48	; 0x30
 8010116:	3130      	adds	r1, #48	; 0x30
 8010118:	7083      	strb	r3, [r0, #2]
 801011a:	70c1      	strb	r1, [r0, #3]
 801011c:	1d03      	adds	r3, r0, #4
 801011e:	e7f1      	b.n	8010104 <__exponent+0x60>

08010120 <_printf_float>:
 8010120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010124:	ed2d 8b02 	vpush	{d8}
 8010128:	b08d      	sub	sp, #52	; 0x34
 801012a:	460c      	mov	r4, r1
 801012c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010130:	4616      	mov	r6, r2
 8010132:	461f      	mov	r7, r3
 8010134:	4605      	mov	r5, r0
 8010136:	f000 fd6b 	bl	8010c10 <_localeconv_r>
 801013a:	f8d0 a000 	ldr.w	sl, [r0]
 801013e:	4650      	mov	r0, sl
 8010140:	f7f0 f8ae 	bl	80002a0 <strlen>
 8010144:	2300      	movs	r3, #0
 8010146:	930a      	str	r3, [sp, #40]	; 0x28
 8010148:	6823      	ldr	r3, [r4, #0]
 801014a:	9305      	str	r3, [sp, #20]
 801014c:	f8d8 3000 	ldr.w	r3, [r8]
 8010150:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010154:	3307      	adds	r3, #7
 8010156:	f023 0307 	bic.w	r3, r3, #7
 801015a:	f103 0208 	add.w	r2, r3, #8
 801015e:	f8c8 2000 	str.w	r2, [r8]
 8010162:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010166:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801016a:	9307      	str	r3, [sp, #28]
 801016c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010170:	ee08 0a10 	vmov	s16, r0
 8010174:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801017c:	4b9e      	ldr	r3, [pc, #632]	; (80103f8 <_printf_float+0x2d8>)
 801017e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010182:	f7f0 fceb 	bl	8000b5c <__aeabi_dcmpun>
 8010186:	bb88      	cbnz	r0, 80101ec <_printf_float+0xcc>
 8010188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801018c:	4b9a      	ldr	r3, [pc, #616]	; (80103f8 <_printf_float+0x2d8>)
 801018e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010192:	f7f0 fcc5 	bl	8000b20 <__aeabi_dcmple>
 8010196:	bb48      	cbnz	r0, 80101ec <_printf_float+0xcc>
 8010198:	2200      	movs	r2, #0
 801019a:	2300      	movs	r3, #0
 801019c:	4640      	mov	r0, r8
 801019e:	4649      	mov	r1, r9
 80101a0:	f7f0 fcb4 	bl	8000b0c <__aeabi_dcmplt>
 80101a4:	b110      	cbz	r0, 80101ac <_printf_float+0x8c>
 80101a6:	232d      	movs	r3, #45	; 0x2d
 80101a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101ac:	4a93      	ldr	r2, [pc, #588]	; (80103fc <_printf_float+0x2dc>)
 80101ae:	4b94      	ldr	r3, [pc, #592]	; (8010400 <_printf_float+0x2e0>)
 80101b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80101b4:	bf94      	ite	ls
 80101b6:	4690      	movls	r8, r2
 80101b8:	4698      	movhi	r8, r3
 80101ba:	2303      	movs	r3, #3
 80101bc:	6123      	str	r3, [r4, #16]
 80101be:	9b05      	ldr	r3, [sp, #20]
 80101c0:	f023 0304 	bic.w	r3, r3, #4
 80101c4:	6023      	str	r3, [r4, #0]
 80101c6:	f04f 0900 	mov.w	r9, #0
 80101ca:	9700      	str	r7, [sp, #0]
 80101cc:	4633      	mov	r3, r6
 80101ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80101d0:	4621      	mov	r1, r4
 80101d2:	4628      	mov	r0, r5
 80101d4:	f000 fa82 	bl	80106dc <_printf_common>
 80101d8:	3001      	adds	r0, #1
 80101da:	f040 8090 	bne.w	80102fe <_printf_float+0x1de>
 80101de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101e2:	b00d      	add	sp, #52	; 0x34
 80101e4:	ecbd 8b02 	vpop	{d8}
 80101e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ec:	4642      	mov	r2, r8
 80101ee:	464b      	mov	r3, r9
 80101f0:	4640      	mov	r0, r8
 80101f2:	4649      	mov	r1, r9
 80101f4:	f7f0 fcb2 	bl	8000b5c <__aeabi_dcmpun>
 80101f8:	b140      	cbz	r0, 801020c <_printf_float+0xec>
 80101fa:	464b      	mov	r3, r9
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	bfbc      	itt	lt
 8010200:	232d      	movlt	r3, #45	; 0x2d
 8010202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010206:	4a7f      	ldr	r2, [pc, #508]	; (8010404 <_printf_float+0x2e4>)
 8010208:	4b7f      	ldr	r3, [pc, #508]	; (8010408 <_printf_float+0x2e8>)
 801020a:	e7d1      	b.n	80101b0 <_printf_float+0x90>
 801020c:	6863      	ldr	r3, [r4, #4]
 801020e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010212:	9206      	str	r2, [sp, #24]
 8010214:	1c5a      	adds	r2, r3, #1
 8010216:	d13f      	bne.n	8010298 <_printf_float+0x178>
 8010218:	2306      	movs	r3, #6
 801021a:	6063      	str	r3, [r4, #4]
 801021c:	9b05      	ldr	r3, [sp, #20]
 801021e:	6861      	ldr	r1, [r4, #4]
 8010220:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010224:	2300      	movs	r3, #0
 8010226:	9303      	str	r3, [sp, #12]
 8010228:	ab0a      	add	r3, sp, #40	; 0x28
 801022a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801022e:	ab09      	add	r3, sp, #36	; 0x24
 8010230:	ec49 8b10 	vmov	d0, r8, r9
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	6022      	str	r2, [r4, #0]
 8010238:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801023c:	4628      	mov	r0, r5
 801023e:	f7ff fecf 	bl	800ffe0 <__cvt>
 8010242:	9b06      	ldr	r3, [sp, #24]
 8010244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010246:	2b47      	cmp	r3, #71	; 0x47
 8010248:	4680      	mov	r8, r0
 801024a:	d108      	bne.n	801025e <_printf_float+0x13e>
 801024c:	1cc8      	adds	r0, r1, #3
 801024e:	db02      	blt.n	8010256 <_printf_float+0x136>
 8010250:	6863      	ldr	r3, [r4, #4]
 8010252:	4299      	cmp	r1, r3
 8010254:	dd41      	ble.n	80102da <_printf_float+0x1ba>
 8010256:	f1ab 0302 	sub.w	r3, fp, #2
 801025a:	fa5f fb83 	uxtb.w	fp, r3
 801025e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010262:	d820      	bhi.n	80102a6 <_printf_float+0x186>
 8010264:	3901      	subs	r1, #1
 8010266:	465a      	mov	r2, fp
 8010268:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801026c:	9109      	str	r1, [sp, #36]	; 0x24
 801026e:	f7ff ff19 	bl	80100a4 <__exponent>
 8010272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010274:	1813      	adds	r3, r2, r0
 8010276:	2a01      	cmp	r2, #1
 8010278:	4681      	mov	r9, r0
 801027a:	6123      	str	r3, [r4, #16]
 801027c:	dc02      	bgt.n	8010284 <_printf_float+0x164>
 801027e:	6822      	ldr	r2, [r4, #0]
 8010280:	07d2      	lsls	r2, r2, #31
 8010282:	d501      	bpl.n	8010288 <_printf_float+0x168>
 8010284:	3301      	adds	r3, #1
 8010286:	6123      	str	r3, [r4, #16]
 8010288:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801028c:	2b00      	cmp	r3, #0
 801028e:	d09c      	beq.n	80101ca <_printf_float+0xaa>
 8010290:	232d      	movs	r3, #45	; 0x2d
 8010292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010296:	e798      	b.n	80101ca <_printf_float+0xaa>
 8010298:	9a06      	ldr	r2, [sp, #24]
 801029a:	2a47      	cmp	r2, #71	; 0x47
 801029c:	d1be      	bne.n	801021c <_printf_float+0xfc>
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1bc      	bne.n	801021c <_printf_float+0xfc>
 80102a2:	2301      	movs	r3, #1
 80102a4:	e7b9      	b.n	801021a <_printf_float+0xfa>
 80102a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80102aa:	d118      	bne.n	80102de <_printf_float+0x1be>
 80102ac:	2900      	cmp	r1, #0
 80102ae:	6863      	ldr	r3, [r4, #4]
 80102b0:	dd0b      	ble.n	80102ca <_printf_float+0x1aa>
 80102b2:	6121      	str	r1, [r4, #16]
 80102b4:	b913      	cbnz	r3, 80102bc <_printf_float+0x19c>
 80102b6:	6822      	ldr	r2, [r4, #0]
 80102b8:	07d0      	lsls	r0, r2, #31
 80102ba:	d502      	bpl.n	80102c2 <_printf_float+0x1a2>
 80102bc:	3301      	adds	r3, #1
 80102be:	440b      	add	r3, r1
 80102c0:	6123      	str	r3, [r4, #16]
 80102c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80102c4:	f04f 0900 	mov.w	r9, #0
 80102c8:	e7de      	b.n	8010288 <_printf_float+0x168>
 80102ca:	b913      	cbnz	r3, 80102d2 <_printf_float+0x1b2>
 80102cc:	6822      	ldr	r2, [r4, #0]
 80102ce:	07d2      	lsls	r2, r2, #31
 80102d0:	d501      	bpl.n	80102d6 <_printf_float+0x1b6>
 80102d2:	3302      	adds	r3, #2
 80102d4:	e7f4      	b.n	80102c0 <_printf_float+0x1a0>
 80102d6:	2301      	movs	r3, #1
 80102d8:	e7f2      	b.n	80102c0 <_printf_float+0x1a0>
 80102da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80102de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102e0:	4299      	cmp	r1, r3
 80102e2:	db05      	blt.n	80102f0 <_printf_float+0x1d0>
 80102e4:	6823      	ldr	r3, [r4, #0]
 80102e6:	6121      	str	r1, [r4, #16]
 80102e8:	07d8      	lsls	r0, r3, #31
 80102ea:	d5ea      	bpl.n	80102c2 <_printf_float+0x1a2>
 80102ec:	1c4b      	adds	r3, r1, #1
 80102ee:	e7e7      	b.n	80102c0 <_printf_float+0x1a0>
 80102f0:	2900      	cmp	r1, #0
 80102f2:	bfd4      	ite	le
 80102f4:	f1c1 0202 	rsble	r2, r1, #2
 80102f8:	2201      	movgt	r2, #1
 80102fa:	4413      	add	r3, r2
 80102fc:	e7e0      	b.n	80102c0 <_printf_float+0x1a0>
 80102fe:	6823      	ldr	r3, [r4, #0]
 8010300:	055a      	lsls	r2, r3, #21
 8010302:	d407      	bmi.n	8010314 <_printf_float+0x1f4>
 8010304:	6923      	ldr	r3, [r4, #16]
 8010306:	4642      	mov	r2, r8
 8010308:	4631      	mov	r1, r6
 801030a:	4628      	mov	r0, r5
 801030c:	47b8      	blx	r7
 801030e:	3001      	adds	r0, #1
 8010310:	d12c      	bne.n	801036c <_printf_float+0x24c>
 8010312:	e764      	b.n	80101de <_printf_float+0xbe>
 8010314:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010318:	f240 80e0 	bls.w	80104dc <_printf_float+0x3bc>
 801031c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010320:	2200      	movs	r2, #0
 8010322:	2300      	movs	r3, #0
 8010324:	f7f0 fbe8 	bl	8000af8 <__aeabi_dcmpeq>
 8010328:	2800      	cmp	r0, #0
 801032a:	d034      	beq.n	8010396 <_printf_float+0x276>
 801032c:	4a37      	ldr	r2, [pc, #220]	; (801040c <_printf_float+0x2ec>)
 801032e:	2301      	movs	r3, #1
 8010330:	4631      	mov	r1, r6
 8010332:	4628      	mov	r0, r5
 8010334:	47b8      	blx	r7
 8010336:	3001      	adds	r0, #1
 8010338:	f43f af51 	beq.w	80101de <_printf_float+0xbe>
 801033c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010340:	429a      	cmp	r2, r3
 8010342:	db02      	blt.n	801034a <_printf_float+0x22a>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	07d8      	lsls	r0, r3, #31
 8010348:	d510      	bpl.n	801036c <_printf_float+0x24c>
 801034a:	ee18 3a10 	vmov	r3, s16
 801034e:	4652      	mov	r2, sl
 8010350:	4631      	mov	r1, r6
 8010352:	4628      	mov	r0, r5
 8010354:	47b8      	blx	r7
 8010356:	3001      	adds	r0, #1
 8010358:	f43f af41 	beq.w	80101de <_printf_float+0xbe>
 801035c:	f04f 0800 	mov.w	r8, #0
 8010360:	f104 091a 	add.w	r9, r4, #26
 8010364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010366:	3b01      	subs	r3, #1
 8010368:	4543      	cmp	r3, r8
 801036a:	dc09      	bgt.n	8010380 <_printf_float+0x260>
 801036c:	6823      	ldr	r3, [r4, #0]
 801036e:	079b      	lsls	r3, r3, #30
 8010370:	f100 8107 	bmi.w	8010582 <_printf_float+0x462>
 8010374:	68e0      	ldr	r0, [r4, #12]
 8010376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010378:	4298      	cmp	r0, r3
 801037a:	bfb8      	it	lt
 801037c:	4618      	movlt	r0, r3
 801037e:	e730      	b.n	80101e2 <_printf_float+0xc2>
 8010380:	2301      	movs	r3, #1
 8010382:	464a      	mov	r2, r9
 8010384:	4631      	mov	r1, r6
 8010386:	4628      	mov	r0, r5
 8010388:	47b8      	blx	r7
 801038a:	3001      	adds	r0, #1
 801038c:	f43f af27 	beq.w	80101de <_printf_float+0xbe>
 8010390:	f108 0801 	add.w	r8, r8, #1
 8010394:	e7e6      	b.n	8010364 <_printf_float+0x244>
 8010396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010398:	2b00      	cmp	r3, #0
 801039a:	dc39      	bgt.n	8010410 <_printf_float+0x2f0>
 801039c:	4a1b      	ldr	r2, [pc, #108]	; (801040c <_printf_float+0x2ec>)
 801039e:	2301      	movs	r3, #1
 80103a0:	4631      	mov	r1, r6
 80103a2:	4628      	mov	r0, r5
 80103a4:	47b8      	blx	r7
 80103a6:	3001      	adds	r0, #1
 80103a8:	f43f af19 	beq.w	80101de <_printf_float+0xbe>
 80103ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80103b0:	4313      	orrs	r3, r2
 80103b2:	d102      	bne.n	80103ba <_printf_float+0x29a>
 80103b4:	6823      	ldr	r3, [r4, #0]
 80103b6:	07d9      	lsls	r1, r3, #31
 80103b8:	d5d8      	bpl.n	801036c <_printf_float+0x24c>
 80103ba:	ee18 3a10 	vmov	r3, s16
 80103be:	4652      	mov	r2, sl
 80103c0:	4631      	mov	r1, r6
 80103c2:	4628      	mov	r0, r5
 80103c4:	47b8      	blx	r7
 80103c6:	3001      	adds	r0, #1
 80103c8:	f43f af09 	beq.w	80101de <_printf_float+0xbe>
 80103cc:	f04f 0900 	mov.w	r9, #0
 80103d0:	f104 0a1a 	add.w	sl, r4, #26
 80103d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103d6:	425b      	negs	r3, r3
 80103d8:	454b      	cmp	r3, r9
 80103da:	dc01      	bgt.n	80103e0 <_printf_float+0x2c0>
 80103dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103de:	e792      	b.n	8010306 <_printf_float+0x1e6>
 80103e0:	2301      	movs	r3, #1
 80103e2:	4652      	mov	r2, sl
 80103e4:	4631      	mov	r1, r6
 80103e6:	4628      	mov	r0, r5
 80103e8:	47b8      	blx	r7
 80103ea:	3001      	adds	r0, #1
 80103ec:	f43f aef7 	beq.w	80101de <_printf_float+0xbe>
 80103f0:	f109 0901 	add.w	r9, r9, #1
 80103f4:	e7ee      	b.n	80103d4 <_printf_float+0x2b4>
 80103f6:	bf00      	nop
 80103f8:	7fefffff 	.word	0x7fefffff
 80103fc:	08018288 	.word	0x08018288
 8010400:	0801828c 	.word	0x0801828c
 8010404:	08018290 	.word	0x08018290
 8010408:	08018294 	.word	0x08018294
 801040c:	08018298 	.word	0x08018298
 8010410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010414:	429a      	cmp	r2, r3
 8010416:	bfa8      	it	ge
 8010418:	461a      	movge	r2, r3
 801041a:	2a00      	cmp	r2, #0
 801041c:	4691      	mov	r9, r2
 801041e:	dc37      	bgt.n	8010490 <_printf_float+0x370>
 8010420:	f04f 0b00 	mov.w	fp, #0
 8010424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010428:	f104 021a 	add.w	r2, r4, #26
 801042c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801042e:	9305      	str	r3, [sp, #20]
 8010430:	eba3 0309 	sub.w	r3, r3, r9
 8010434:	455b      	cmp	r3, fp
 8010436:	dc33      	bgt.n	80104a0 <_printf_float+0x380>
 8010438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801043c:	429a      	cmp	r2, r3
 801043e:	db3b      	blt.n	80104b8 <_printf_float+0x398>
 8010440:	6823      	ldr	r3, [r4, #0]
 8010442:	07da      	lsls	r2, r3, #31
 8010444:	d438      	bmi.n	80104b8 <_printf_float+0x398>
 8010446:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801044a:	eba2 0903 	sub.w	r9, r2, r3
 801044e:	9b05      	ldr	r3, [sp, #20]
 8010450:	1ad2      	subs	r2, r2, r3
 8010452:	4591      	cmp	r9, r2
 8010454:	bfa8      	it	ge
 8010456:	4691      	movge	r9, r2
 8010458:	f1b9 0f00 	cmp.w	r9, #0
 801045c:	dc35      	bgt.n	80104ca <_printf_float+0x3aa>
 801045e:	f04f 0800 	mov.w	r8, #0
 8010462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010466:	f104 0a1a 	add.w	sl, r4, #26
 801046a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801046e:	1a9b      	subs	r3, r3, r2
 8010470:	eba3 0309 	sub.w	r3, r3, r9
 8010474:	4543      	cmp	r3, r8
 8010476:	f77f af79 	ble.w	801036c <_printf_float+0x24c>
 801047a:	2301      	movs	r3, #1
 801047c:	4652      	mov	r2, sl
 801047e:	4631      	mov	r1, r6
 8010480:	4628      	mov	r0, r5
 8010482:	47b8      	blx	r7
 8010484:	3001      	adds	r0, #1
 8010486:	f43f aeaa 	beq.w	80101de <_printf_float+0xbe>
 801048a:	f108 0801 	add.w	r8, r8, #1
 801048e:	e7ec      	b.n	801046a <_printf_float+0x34a>
 8010490:	4613      	mov	r3, r2
 8010492:	4631      	mov	r1, r6
 8010494:	4642      	mov	r2, r8
 8010496:	4628      	mov	r0, r5
 8010498:	47b8      	blx	r7
 801049a:	3001      	adds	r0, #1
 801049c:	d1c0      	bne.n	8010420 <_printf_float+0x300>
 801049e:	e69e      	b.n	80101de <_printf_float+0xbe>
 80104a0:	2301      	movs	r3, #1
 80104a2:	4631      	mov	r1, r6
 80104a4:	4628      	mov	r0, r5
 80104a6:	9205      	str	r2, [sp, #20]
 80104a8:	47b8      	blx	r7
 80104aa:	3001      	adds	r0, #1
 80104ac:	f43f ae97 	beq.w	80101de <_printf_float+0xbe>
 80104b0:	9a05      	ldr	r2, [sp, #20]
 80104b2:	f10b 0b01 	add.w	fp, fp, #1
 80104b6:	e7b9      	b.n	801042c <_printf_float+0x30c>
 80104b8:	ee18 3a10 	vmov	r3, s16
 80104bc:	4652      	mov	r2, sl
 80104be:	4631      	mov	r1, r6
 80104c0:	4628      	mov	r0, r5
 80104c2:	47b8      	blx	r7
 80104c4:	3001      	adds	r0, #1
 80104c6:	d1be      	bne.n	8010446 <_printf_float+0x326>
 80104c8:	e689      	b.n	80101de <_printf_float+0xbe>
 80104ca:	9a05      	ldr	r2, [sp, #20]
 80104cc:	464b      	mov	r3, r9
 80104ce:	4442      	add	r2, r8
 80104d0:	4631      	mov	r1, r6
 80104d2:	4628      	mov	r0, r5
 80104d4:	47b8      	blx	r7
 80104d6:	3001      	adds	r0, #1
 80104d8:	d1c1      	bne.n	801045e <_printf_float+0x33e>
 80104da:	e680      	b.n	80101de <_printf_float+0xbe>
 80104dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104de:	2a01      	cmp	r2, #1
 80104e0:	dc01      	bgt.n	80104e6 <_printf_float+0x3c6>
 80104e2:	07db      	lsls	r3, r3, #31
 80104e4:	d53a      	bpl.n	801055c <_printf_float+0x43c>
 80104e6:	2301      	movs	r3, #1
 80104e8:	4642      	mov	r2, r8
 80104ea:	4631      	mov	r1, r6
 80104ec:	4628      	mov	r0, r5
 80104ee:	47b8      	blx	r7
 80104f0:	3001      	adds	r0, #1
 80104f2:	f43f ae74 	beq.w	80101de <_printf_float+0xbe>
 80104f6:	ee18 3a10 	vmov	r3, s16
 80104fa:	4652      	mov	r2, sl
 80104fc:	4631      	mov	r1, r6
 80104fe:	4628      	mov	r0, r5
 8010500:	47b8      	blx	r7
 8010502:	3001      	adds	r0, #1
 8010504:	f43f ae6b 	beq.w	80101de <_printf_float+0xbe>
 8010508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801050c:	2200      	movs	r2, #0
 801050e:	2300      	movs	r3, #0
 8010510:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010514:	f7f0 faf0 	bl	8000af8 <__aeabi_dcmpeq>
 8010518:	b9d8      	cbnz	r0, 8010552 <_printf_float+0x432>
 801051a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801051e:	f108 0201 	add.w	r2, r8, #1
 8010522:	4631      	mov	r1, r6
 8010524:	4628      	mov	r0, r5
 8010526:	47b8      	blx	r7
 8010528:	3001      	adds	r0, #1
 801052a:	d10e      	bne.n	801054a <_printf_float+0x42a>
 801052c:	e657      	b.n	80101de <_printf_float+0xbe>
 801052e:	2301      	movs	r3, #1
 8010530:	4652      	mov	r2, sl
 8010532:	4631      	mov	r1, r6
 8010534:	4628      	mov	r0, r5
 8010536:	47b8      	blx	r7
 8010538:	3001      	adds	r0, #1
 801053a:	f43f ae50 	beq.w	80101de <_printf_float+0xbe>
 801053e:	f108 0801 	add.w	r8, r8, #1
 8010542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010544:	3b01      	subs	r3, #1
 8010546:	4543      	cmp	r3, r8
 8010548:	dcf1      	bgt.n	801052e <_printf_float+0x40e>
 801054a:	464b      	mov	r3, r9
 801054c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010550:	e6da      	b.n	8010308 <_printf_float+0x1e8>
 8010552:	f04f 0800 	mov.w	r8, #0
 8010556:	f104 0a1a 	add.w	sl, r4, #26
 801055a:	e7f2      	b.n	8010542 <_printf_float+0x422>
 801055c:	2301      	movs	r3, #1
 801055e:	4642      	mov	r2, r8
 8010560:	e7df      	b.n	8010522 <_printf_float+0x402>
 8010562:	2301      	movs	r3, #1
 8010564:	464a      	mov	r2, r9
 8010566:	4631      	mov	r1, r6
 8010568:	4628      	mov	r0, r5
 801056a:	47b8      	blx	r7
 801056c:	3001      	adds	r0, #1
 801056e:	f43f ae36 	beq.w	80101de <_printf_float+0xbe>
 8010572:	f108 0801 	add.w	r8, r8, #1
 8010576:	68e3      	ldr	r3, [r4, #12]
 8010578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801057a:	1a5b      	subs	r3, r3, r1
 801057c:	4543      	cmp	r3, r8
 801057e:	dcf0      	bgt.n	8010562 <_printf_float+0x442>
 8010580:	e6f8      	b.n	8010374 <_printf_float+0x254>
 8010582:	f04f 0800 	mov.w	r8, #0
 8010586:	f104 0919 	add.w	r9, r4, #25
 801058a:	e7f4      	b.n	8010576 <_printf_float+0x456>

0801058c <malloc>:
 801058c:	4b02      	ldr	r3, [pc, #8]	; (8010598 <malloc+0xc>)
 801058e:	4601      	mov	r1, r0
 8010590:	6818      	ldr	r0, [r3, #0]
 8010592:	f000 b823 	b.w	80105dc <_malloc_r>
 8010596:	bf00      	nop
 8010598:	20000090 	.word	0x20000090

0801059c <sbrk_aligned>:
 801059c:	b570      	push	{r4, r5, r6, lr}
 801059e:	4e0e      	ldr	r6, [pc, #56]	; (80105d8 <sbrk_aligned+0x3c>)
 80105a0:	460c      	mov	r4, r1
 80105a2:	6831      	ldr	r1, [r6, #0]
 80105a4:	4605      	mov	r5, r0
 80105a6:	b911      	cbnz	r1, 80105ae <sbrk_aligned+0x12>
 80105a8:	f000 fb36 	bl	8010c18 <_sbrk_r>
 80105ac:	6030      	str	r0, [r6, #0]
 80105ae:	4621      	mov	r1, r4
 80105b0:	4628      	mov	r0, r5
 80105b2:	f000 fb31 	bl	8010c18 <_sbrk_r>
 80105b6:	1c43      	adds	r3, r0, #1
 80105b8:	d00a      	beq.n	80105d0 <sbrk_aligned+0x34>
 80105ba:	1cc4      	adds	r4, r0, #3
 80105bc:	f024 0403 	bic.w	r4, r4, #3
 80105c0:	42a0      	cmp	r0, r4
 80105c2:	d007      	beq.n	80105d4 <sbrk_aligned+0x38>
 80105c4:	1a21      	subs	r1, r4, r0
 80105c6:	4628      	mov	r0, r5
 80105c8:	f000 fb26 	bl	8010c18 <_sbrk_r>
 80105cc:	3001      	adds	r0, #1
 80105ce:	d101      	bne.n	80105d4 <sbrk_aligned+0x38>
 80105d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80105d4:	4620      	mov	r0, r4
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
 80105d8:	20000b20 	.word	0x20000b20

080105dc <_malloc_r>:
 80105dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e0:	1ccd      	adds	r5, r1, #3
 80105e2:	f025 0503 	bic.w	r5, r5, #3
 80105e6:	3508      	adds	r5, #8
 80105e8:	2d0c      	cmp	r5, #12
 80105ea:	bf38      	it	cc
 80105ec:	250c      	movcc	r5, #12
 80105ee:	2d00      	cmp	r5, #0
 80105f0:	4607      	mov	r7, r0
 80105f2:	db01      	blt.n	80105f8 <_malloc_r+0x1c>
 80105f4:	42a9      	cmp	r1, r5
 80105f6:	d905      	bls.n	8010604 <_malloc_r+0x28>
 80105f8:	230c      	movs	r3, #12
 80105fa:	603b      	str	r3, [r7, #0]
 80105fc:	2600      	movs	r6, #0
 80105fe:	4630      	mov	r0, r6
 8010600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80106d8 <_malloc_r+0xfc>
 8010608:	f000 fa2c 	bl	8010a64 <__malloc_lock>
 801060c:	f8d8 3000 	ldr.w	r3, [r8]
 8010610:	461c      	mov	r4, r3
 8010612:	bb5c      	cbnz	r4, 801066c <_malloc_r+0x90>
 8010614:	4629      	mov	r1, r5
 8010616:	4638      	mov	r0, r7
 8010618:	f7ff ffc0 	bl	801059c <sbrk_aligned>
 801061c:	1c43      	adds	r3, r0, #1
 801061e:	4604      	mov	r4, r0
 8010620:	d155      	bne.n	80106ce <_malloc_r+0xf2>
 8010622:	f8d8 4000 	ldr.w	r4, [r8]
 8010626:	4626      	mov	r6, r4
 8010628:	2e00      	cmp	r6, #0
 801062a:	d145      	bne.n	80106b8 <_malloc_r+0xdc>
 801062c:	2c00      	cmp	r4, #0
 801062e:	d048      	beq.n	80106c2 <_malloc_r+0xe6>
 8010630:	6823      	ldr	r3, [r4, #0]
 8010632:	4631      	mov	r1, r6
 8010634:	4638      	mov	r0, r7
 8010636:	eb04 0903 	add.w	r9, r4, r3
 801063a:	f000 faed 	bl	8010c18 <_sbrk_r>
 801063e:	4581      	cmp	r9, r0
 8010640:	d13f      	bne.n	80106c2 <_malloc_r+0xe6>
 8010642:	6821      	ldr	r1, [r4, #0]
 8010644:	1a6d      	subs	r5, r5, r1
 8010646:	4629      	mov	r1, r5
 8010648:	4638      	mov	r0, r7
 801064a:	f7ff ffa7 	bl	801059c <sbrk_aligned>
 801064e:	3001      	adds	r0, #1
 8010650:	d037      	beq.n	80106c2 <_malloc_r+0xe6>
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	442b      	add	r3, r5
 8010656:	6023      	str	r3, [r4, #0]
 8010658:	f8d8 3000 	ldr.w	r3, [r8]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d038      	beq.n	80106d2 <_malloc_r+0xf6>
 8010660:	685a      	ldr	r2, [r3, #4]
 8010662:	42a2      	cmp	r2, r4
 8010664:	d12b      	bne.n	80106be <_malloc_r+0xe2>
 8010666:	2200      	movs	r2, #0
 8010668:	605a      	str	r2, [r3, #4]
 801066a:	e00f      	b.n	801068c <_malloc_r+0xb0>
 801066c:	6822      	ldr	r2, [r4, #0]
 801066e:	1b52      	subs	r2, r2, r5
 8010670:	d41f      	bmi.n	80106b2 <_malloc_r+0xd6>
 8010672:	2a0b      	cmp	r2, #11
 8010674:	d917      	bls.n	80106a6 <_malloc_r+0xca>
 8010676:	1961      	adds	r1, r4, r5
 8010678:	42a3      	cmp	r3, r4
 801067a:	6025      	str	r5, [r4, #0]
 801067c:	bf18      	it	ne
 801067e:	6059      	strne	r1, [r3, #4]
 8010680:	6863      	ldr	r3, [r4, #4]
 8010682:	bf08      	it	eq
 8010684:	f8c8 1000 	streq.w	r1, [r8]
 8010688:	5162      	str	r2, [r4, r5]
 801068a:	604b      	str	r3, [r1, #4]
 801068c:	4638      	mov	r0, r7
 801068e:	f104 060b 	add.w	r6, r4, #11
 8010692:	f000 f9ed 	bl	8010a70 <__malloc_unlock>
 8010696:	f026 0607 	bic.w	r6, r6, #7
 801069a:	1d23      	adds	r3, r4, #4
 801069c:	1af2      	subs	r2, r6, r3
 801069e:	d0ae      	beq.n	80105fe <_malloc_r+0x22>
 80106a0:	1b9b      	subs	r3, r3, r6
 80106a2:	50a3      	str	r3, [r4, r2]
 80106a4:	e7ab      	b.n	80105fe <_malloc_r+0x22>
 80106a6:	42a3      	cmp	r3, r4
 80106a8:	6862      	ldr	r2, [r4, #4]
 80106aa:	d1dd      	bne.n	8010668 <_malloc_r+0x8c>
 80106ac:	f8c8 2000 	str.w	r2, [r8]
 80106b0:	e7ec      	b.n	801068c <_malloc_r+0xb0>
 80106b2:	4623      	mov	r3, r4
 80106b4:	6864      	ldr	r4, [r4, #4]
 80106b6:	e7ac      	b.n	8010612 <_malloc_r+0x36>
 80106b8:	4634      	mov	r4, r6
 80106ba:	6876      	ldr	r6, [r6, #4]
 80106bc:	e7b4      	b.n	8010628 <_malloc_r+0x4c>
 80106be:	4613      	mov	r3, r2
 80106c0:	e7cc      	b.n	801065c <_malloc_r+0x80>
 80106c2:	230c      	movs	r3, #12
 80106c4:	603b      	str	r3, [r7, #0]
 80106c6:	4638      	mov	r0, r7
 80106c8:	f000 f9d2 	bl	8010a70 <__malloc_unlock>
 80106cc:	e797      	b.n	80105fe <_malloc_r+0x22>
 80106ce:	6025      	str	r5, [r4, #0]
 80106d0:	e7dc      	b.n	801068c <_malloc_r+0xb0>
 80106d2:	605b      	str	r3, [r3, #4]
 80106d4:	deff      	udf	#255	; 0xff
 80106d6:	bf00      	nop
 80106d8:	20000b1c 	.word	0x20000b1c

080106dc <_printf_common>:
 80106dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106e0:	4616      	mov	r6, r2
 80106e2:	4699      	mov	r9, r3
 80106e4:	688a      	ldr	r2, [r1, #8]
 80106e6:	690b      	ldr	r3, [r1, #16]
 80106e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80106ec:	4293      	cmp	r3, r2
 80106ee:	bfb8      	it	lt
 80106f0:	4613      	movlt	r3, r2
 80106f2:	6033      	str	r3, [r6, #0]
 80106f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80106f8:	4607      	mov	r7, r0
 80106fa:	460c      	mov	r4, r1
 80106fc:	b10a      	cbz	r2, 8010702 <_printf_common+0x26>
 80106fe:	3301      	adds	r3, #1
 8010700:	6033      	str	r3, [r6, #0]
 8010702:	6823      	ldr	r3, [r4, #0]
 8010704:	0699      	lsls	r1, r3, #26
 8010706:	bf42      	ittt	mi
 8010708:	6833      	ldrmi	r3, [r6, #0]
 801070a:	3302      	addmi	r3, #2
 801070c:	6033      	strmi	r3, [r6, #0]
 801070e:	6825      	ldr	r5, [r4, #0]
 8010710:	f015 0506 	ands.w	r5, r5, #6
 8010714:	d106      	bne.n	8010724 <_printf_common+0x48>
 8010716:	f104 0a19 	add.w	sl, r4, #25
 801071a:	68e3      	ldr	r3, [r4, #12]
 801071c:	6832      	ldr	r2, [r6, #0]
 801071e:	1a9b      	subs	r3, r3, r2
 8010720:	42ab      	cmp	r3, r5
 8010722:	dc26      	bgt.n	8010772 <_printf_common+0x96>
 8010724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010728:	1e13      	subs	r3, r2, #0
 801072a:	6822      	ldr	r2, [r4, #0]
 801072c:	bf18      	it	ne
 801072e:	2301      	movne	r3, #1
 8010730:	0692      	lsls	r2, r2, #26
 8010732:	d42b      	bmi.n	801078c <_printf_common+0xb0>
 8010734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010738:	4649      	mov	r1, r9
 801073a:	4638      	mov	r0, r7
 801073c:	47c0      	blx	r8
 801073e:	3001      	adds	r0, #1
 8010740:	d01e      	beq.n	8010780 <_printf_common+0xa4>
 8010742:	6823      	ldr	r3, [r4, #0]
 8010744:	6922      	ldr	r2, [r4, #16]
 8010746:	f003 0306 	and.w	r3, r3, #6
 801074a:	2b04      	cmp	r3, #4
 801074c:	bf02      	ittt	eq
 801074e:	68e5      	ldreq	r5, [r4, #12]
 8010750:	6833      	ldreq	r3, [r6, #0]
 8010752:	1aed      	subeq	r5, r5, r3
 8010754:	68a3      	ldr	r3, [r4, #8]
 8010756:	bf0c      	ite	eq
 8010758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801075c:	2500      	movne	r5, #0
 801075e:	4293      	cmp	r3, r2
 8010760:	bfc4      	itt	gt
 8010762:	1a9b      	subgt	r3, r3, r2
 8010764:	18ed      	addgt	r5, r5, r3
 8010766:	2600      	movs	r6, #0
 8010768:	341a      	adds	r4, #26
 801076a:	42b5      	cmp	r5, r6
 801076c:	d11a      	bne.n	80107a4 <_printf_common+0xc8>
 801076e:	2000      	movs	r0, #0
 8010770:	e008      	b.n	8010784 <_printf_common+0xa8>
 8010772:	2301      	movs	r3, #1
 8010774:	4652      	mov	r2, sl
 8010776:	4649      	mov	r1, r9
 8010778:	4638      	mov	r0, r7
 801077a:	47c0      	blx	r8
 801077c:	3001      	adds	r0, #1
 801077e:	d103      	bne.n	8010788 <_printf_common+0xac>
 8010780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010788:	3501      	adds	r5, #1
 801078a:	e7c6      	b.n	801071a <_printf_common+0x3e>
 801078c:	18e1      	adds	r1, r4, r3
 801078e:	1c5a      	adds	r2, r3, #1
 8010790:	2030      	movs	r0, #48	; 0x30
 8010792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010796:	4422      	add	r2, r4
 8010798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801079c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80107a0:	3302      	adds	r3, #2
 80107a2:	e7c7      	b.n	8010734 <_printf_common+0x58>
 80107a4:	2301      	movs	r3, #1
 80107a6:	4622      	mov	r2, r4
 80107a8:	4649      	mov	r1, r9
 80107aa:	4638      	mov	r0, r7
 80107ac:	47c0      	blx	r8
 80107ae:	3001      	adds	r0, #1
 80107b0:	d0e6      	beq.n	8010780 <_printf_common+0xa4>
 80107b2:	3601      	adds	r6, #1
 80107b4:	e7d9      	b.n	801076a <_printf_common+0x8e>
	...

080107b8 <_printf_i>:
 80107b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107bc:	7e0f      	ldrb	r7, [r1, #24]
 80107be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80107c0:	2f78      	cmp	r7, #120	; 0x78
 80107c2:	4691      	mov	r9, r2
 80107c4:	4680      	mov	r8, r0
 80107c6:	460c      	mov	r4, r1
 80107c8:	469a      	mov	sl, r3
 80107ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80107ce:	d807      	bhi.n	80107e0 <_printf_i+0x28>
 80107d0:	2f62      	cmp	r7, #98	; 0x62
 80107d2:	d80a      	bhi.n	80107ea <_printf_i+0x32>
 80107d4:	2f00      	cmp	r7, #0
 80107d6:	f000 80d4 	beq.w	8010982 <_printf_i+0x1ca>
 80107da:	2f58      	cmp	r7, #88	; 0x58
 80107dc:	f000 80c0 	beq.w	8010960 <_printf_i+0x1a8>
 80107e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80107e8:	e03a      	b.n	8010860 <_printf_i+0xa8>
 80107ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80107ee:	2b15      	cmp	r3, #21
 80107f0:	d8f6      	bhi.n	80107e0 <_printf_i+0x28>
 80107f2:	a101      	add	r1, pc, #4	; (adr r1, 80107f8 <_printf_i+0x40>)
 80107f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107f8:	08010851 	.word	0x08010851
 80107fc:	08010865 	.word	0x08010865
 8010800:	080107e1 	.word	0x080107e1
 8010804:	080107e1 	.word	0x080107e1
 8010808:	080107e1 	.word	0x080107e1
 801080c:	080107e1 	.word	0x080107e1
 8010810:	08010865 	.word	0x08010865
 8010814:	080107e1 	.word	0x080107e1
 8010818:	080107e1 	.word	0x080107e1
 801081c:	080107e1 	.word	0x080107e1
 8010820:	080107e1 	.word	0x080107e1
 8010824:	08010969 	.word	0x08010969
 8010828:	08010891 	.word	0x08010891
 801082c:	08010923 	.word	0x08010923
 8010830:	080107e1 	.word	0x080107e1
 8010834:	080107e1 	.word	0x080107e1
 8010838:	0801098b 	.word	0x0801098b
 801083c:	080107e1 	.word	0x080107e1
 8010840:	08010891 	.word	0x08010891
 8010844:	080107e1 	.word	0x080107e1
 8010848:	080107e1 	.word	0x080107e1
 801084c:	0801092b 	.word	0x0801092b
 8010850:	682b      	ldr	r3, [r5, #0]
 8010852:	1d1a      	adds	r2, r3, #4
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	602a      	str	r2, [r5, #0]
 8010858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801085c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010860:	2301      	movs	r3, #1
 8010862:	e09f      	b.n	80109a4 <_printf_i+0x1ec>
 8010864:	6820      	ldr	r0, [r4, #0]
 8010866:	682b      	ldr	r3, [r5, #0]
 8010868:	0607      	lsls	r7, r0, #24
 801086a:	f103 0104 	add.w	r1, r3, #4
 801086e:	6029      	str	r1, [r5, #0]
 8010870:	d501      	bpl.n	8010876 <_printf_i+0xbe>
 8010872:	681e      	ldr	r6, [r3, #0]
 8010874:	e003      	b.n	801087e <_printf_i+0xc6>
 8010876:	0646      	lsls	r6, r0, #25
 8010878:	d5fb      	bpl.n	8010872 <_printf_i+0xba>
 801087a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801087e:	2e00      	cmp	r6, #0
 8010880:	da03      	bge.n	801088a <_printf_i+0xd2>
 8010882:	232d      	movs	r3, #45	; 0x2d
 8010884:	4276      	negs	r6, r6
 8010886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801088a:	485a      	ldr	r0, [pc, #360]	; (80109f4 <_printf_i+0x23c>)
 801088c:	230a      	movs	r3, #10
 801088e:	e012      	b.n	80108b6 <_printf_i+0xfe>
 8010890:	682b      	ldr	r3, [r5, #0]
 8010892:	6820      	ldr	r0, [r4, #0]
 8010894:	1d19      	adds	r1, r3, #4
 8010896:	6029      	str	r1, [r5, #0]
 8010898:	0605      	lsls	r5, r0, #24
 801089a:	d501      	bpl.n	80108a0 <_printf_i+0xe8>
 801089c:	681e      	ldr	r6, [r3, #0]
 801089e:	e002      	b.n	80108a6 <_printf_i+0xee>
 80108a0:	0641      	lsls	r1, r0, #25
 80108a2:	d5fb      	bpl.n	801089c <_printf_i+0xe4>
 80108a4:	881e      	ldrh	r6, [r3, #0]
 80108a6:	4853      	ldr	r0, [pc, #332]	; (80109f4 <_printf_i+0x23c>)
 80108a8:	2f6f      	cmp	r7, #111	; 0x6f
 80108aa:	bf0c      	ite	eq
 80108ac:	2308      	moveq	r3, #8
 80108ae:	230a      	movne	r3, #10
 80108b0:	2100      	movs	r1, #0
 80108b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80108b6:	6865      	ldr	r5, [r4, #4]
 80108b8:	60a5      	str	r5, [r4, #8]
 80108ba:	2d00      	cmp	r5, #0
 80108bc:	bfa2      	ittt	ge
 80108be:	6821      	ldrge	r1, [r4, #0]
 80108c0:	f021 0104 	bicge.w	r1, r1, #4
 80108c4:	6021      	strge	r1, [r4, #0]
 80108c6:	b90e      	cbnz	r6, 80108cc <_printf_i+0x114>
 80108c8:	2d00      	cmp	r5, #0
 80108ca:	d04b      	beq.n	8010964 <_printf_i+0x1ac>
 80108cc:	4615      	mov	r5, r2
 80108ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80108d2:	fb03 6711 	mls	r7, r3, r1, r6
 80108d6:	5dc7      	ldrb	r7, [r0, r7]
 80108d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80108dc:	4637      	mov	r7, r6
 80108de:	42bb      	cmp	r3, r7
 80108e0:	460e      	mov	r6, r1
 80108e2:	d9f4      	bls.n	80108ce <_printf_i+0x116>
 80108e4:	2b08      	cmp	r3, #8
 80108e6:	d10b      	bne.n	8010900 <_printf_i+0x148>
 80108e8:	6823      	ldr	r3, [r4, #0]
 80108ea:	07de      	lsls	r6, r3, #31
 80108ec:	d508      	bpl.n	8010900 <_printf_i+0x148>
 80108ee:	6923      	ldr	r3, [r4, #16]
 80108f0:	6861      	ldr	r1, [r4, #4]
 80108f2:	4299      	cmp	r1, r3
 80108f4:	bfde      	ittt	le
 80108f6:	2330      	movle	r3, #48	; 0x30
 80108f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010900:	1b52      	subs	r2, r2, r5
 8010902:	6122      	str	r2, [r4, #16]
 8010904:	f8cd a000 	str.w	sl, [sp]
 8010908:	464b      	mov	r3, r9
 801090a:	aa03      	add	r2, sp, #12
 801090c:	4621      	mov	r1, r4
 801090e:	4640      	mov	r0, r8
 8010910:	f7ff fee4 	bl	80106dc <_printf_common>
 8010914:	3001      	adds	r0, #1
 8010916:	d14a      	bne.n	80109ae <_printf_i+0x1f6>
 8010918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801091c:	b004      	add	sp, #16
 801091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010922:	6823      	ldr	r3, [r4, #0]
 8010924:	f043 0320 	orr.w	r3, r3, #32
 8010928:	6023      	str	r3, [r4, #0]
 801092a:	4833      	ldr	r0, [pc, #204]	; (80109f8 <_printf_i+0x240>)
 801092c:	2778      	movs	r7, #120	; 0x78
 801092e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	6829      	ldr	r1, [r5, #0]
 8010936:	061f      	lsls	r7, r3, #24
 8010938:	f851 6b04 	ldr.w	r6, [r1], #4
 801093c:	d402      	bmi.n	8010944 <_printf_i+0x18c>
 801093e:	065f      	lsls	r7, r3, #25
 8010940:	bf48      	it	mi
 8010942:	b2b6      	uxthmi	r6, r6
 8010944:	07df      	lsls	r7, r3, #31
 8010946:	bf48      	it	mi
 8010948:	f043 0320 	orrmi.w	r3, r3, #32
 801094c:	6029      	str	r1, [r5, #0]
 801094e:	bf48      	it	mi
 8010950:	6023      	strmi	r3, [r4, #0]
 8010952:	b91e      	cbnz	r6, 801095c <_printf_i+0x1a4>
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	f023 0320 	bic.w	r3, r3, #32
 801095a:	6023      	str	r3, [r4, #0]
 801095c:	2310      	movs	r3, #16
 801095e:	e7a7      	b.n	80108b0 <_printf_i+0xf8>
 8010960:	4824      	ldr	r0, [pc, #144]	; (80109f4 <_printf_i+0x23c>)
 8010962:	e7e4      	b.n	801092e <_printf_i+0x176>
 8010964:	4615      	mov	r5, r2
 8010966:	e7bd      	b.n	80108e4 <_printf_i+0x12c>
 8010968:	682b      	ldr	r3, [r5, #0]
 801096a:	6826      	ldr	r6, [r4, #0]
 801096c:	6961      	ldr	r1, [r4, #20]
 801096e:	1d18      	adds	r0, r3, #4
 8010970:	6028      	str	r0, [r5, #0]
 8010972:	0635      	lsls	r5, r6, #24
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	d501      	bpl.n	801097c <_printf_i+0x1c4>
 8010978:	6019      	str	r1, [r3, #0]
 801097a:	e002      	b.n	8010982 <_printf_i+0x1ca>
 801097c:	0670      	lsls	r0, r6, #25
 801097e:	d5fb      	bpl.n	8010978 <_printf_i+0x1c0>
 8010980:	8019      	strh	r1, [r3, #0]
 8010982:	2300      	movs	r3, #0
 8010984:	6123      	str	r3, [r4, #16]
 8010986:	4615      	mov	r5, r2
 8010988:	e7bc      	b.n	8010904 <_printf_i+0x14c>
 801098a:	682b      	ldr	r3, [r5, #0]
 801098c:	1d1a      	adds	r2, r3, #4
 801098e:	602a      	str	r2, [r5, #0]
 8010990:	681d      	ldr	r5, [r3, #0]
 8010992:	6862      	ldr	r2, [r4, #4]
 8010994:	2100      	movs	r1, #0
 8010996:	4628      	mov	r0, r5
 8010998:	f7ef fc32 	bl	8000200 <memchr>
 801099c:	b108      	cbz	r0, 80109a2 <_printf_i+0x1ea>
 801099e:	1b40      	subs	r0, r0, r5
 80109a0:	6060      	str	r0, [r4, #4]
 80109a2:	6863      	ldr	r3, [r4, #4]
 80109a4:	6123      	str	r3, [r4, #16]
 80109a6:	2300      	movs	r3, #0
 80109a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109ac:	e7aa      	b.n	8010904 <_printf_i+0x14c>
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	462a      	mov	r2, r5
 80109b2:	4649      	mov	r1, r9
 80109b4:	4640      	mov	r0, r8
 80109b6:	47d0      	blx	sl
 80109b8:	3001      	adds	r0, #1
 80109ba:	d0ad      	beq.n	8010918 <_printf_i+0x160>
 80109bc:	6823      	ldr	r3, [r4, #0]
 80109be:	079b      	lsls	r3, r3, #30
 80109c0:	d413      	bmi.n	80109ea <_printf_i+0x232>
 80109c2:	68e0      	ldr	r0, [r4, #12]
 80109c4:	9b03      	ldr	r3, [sp, #12]
 80109c6:	4298      	cmp	r0, r3
 80109c8:	bfb8      	it	lt
 80109ca:	4618      	movlt	r0, r3
 80109cc:	e7a6      	b.n	801091c <_printf_i+0x164>
 80109ce:	2301      	movs	r3, #1
 80109d0:	4632      	mov	r2, r6
 80109d2:	4649      	mov	r1, r9
 80109d4:	4640      	mov	r0, r8
 80109d6:	47d0      	blx	sl
 80109d8:	3001      	adds	r0, #1
 80109da:	d09d      	beq.n	8010918 <_printf_i+0x160>
 80109dc:	3501      	adds	r5, #1
 80109de:	68e3      	ldr	r3, [r4, #12]
 80109e0:	9903      	ldr	r1, [sp, #12]
 80109e2:	1a5b      	subs	r3, r3, r1
 80109e4:	42ab      	cmp	r3, r5
 80109e6:	dcf2      	bgt.n	80109ce <_printf_i+0x216>
 80109e8:	e7eb      	b.n	80109c2 <_printf_i+0x20a>
 80109ea:	2500      	movs	r5, #0
 80109ec:	f104 0619 	add.w	r6, r4, #25
 80109f0:	e7f5      	b.n	80109de <_printf_i+0x226>
 80109f2:	bf00      	nop
 80109f4:	0801829a 	.word	0x0801829a
 80109f8:	080182ab 	.word	0x080182ab

080109fc <sniprintf>:
 80109fc:	b40c      	push	{r2, r3}
 80109fe:	b530      	push	{r4, r5, lr}
 8010a00:	4b17      	ldr	r3, [pc, #92]	; (8010a60 <sniprintf+0x64>)
 8010a02:	1e0c      	subs	r4, r1, #0
 8010a04:	681d      	ldr	r5, [r3, #0]
 8010a06:	b09d      	sub	sp, #116	; 0x74
 8010a08:	da08      	bge.n	8010a1c <sniprintf+0x20>
 8010a0a:	238b      	movs	r3, #139	; 0x8b
 8010a0c:	602b      	str	r3, [r5, #0]
 8010a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a12:	b01d      	add	sp, #116	; 0x74
 8010a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a18:	b002      	add	sp, #8
 8010a1a:	4770      	bx	lr
 8010a1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010a20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a24:	bf14      	ite	ne
 8010a26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010a2a:	4623      	moveq	r3, r4
 8010a2c:	9304      	str	r3, [sp, #16]
 8010a2e:	9307      	str	r3, [sp, #28]
 8010a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a34:	9002      	str	r0, [sp, #8]
 8010a36:	9006      	str	r0, [sp, #24]
 8010a38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a3e:	ab21      	add	r3, sp, #132	; 0x84
 8010a40:	a902      	add	r1, sp, #8
 8010a42:	4628      	mov	r0, r5
 8010a44:	9301      	str	r3, [sp, #4]
 8010a46:	f001 f853 	bl	8011af0 <_svfiprintf_r>
 8010a4a:	1c43      	adds	r3, r0, #1
 8010a4c:	bfbc      	itt	lt
 8010a4e:	238b      	movlt	r3, #139	; 0x8b
 8010a50:	602b      	strlt	r3, [r5, #0]
 8010a52:	2c00      	cmp	r4, #0
 8010a54:	d0dd      	beq.n	8010a12 <sniprintf+0x16>
 8010a56:	9b02      	ldr	r3, [sp, #8]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	701a      	strb	r2, [r3, #0]
 8010a5c:	e7d9      	b.n	8010a12 <sniprintf+0x16>
 8010a5e:	bf00      	nop
 8010a60:	20000090 	.word	0x20000090

08010a64 <__malloc_lock>:
 8010a64:	4801      	ldr	r0, [pc, #4]	; (8010a6c <__malloc_lock+0x8>)
 8010a66:	f000 b912 	b.w	8010c8e <__retarget_lock_acquire_recursive>
 8010a6a:	bf00      	nop
 8010a6c:	20000c60 	.word	0x20000c60

08010a70 <__malloc_unlock>:
 8010a70:	4801      	ldr	r0, [pc, #4]	; (8010a78 <__malloc_unlock+0x8>)
 8010a72:	f000 b90d 	b.w	8010c90 <__retarget_lock_release_recursive>
 8010a76:	bf00      	nop
 8010a78:	20000c60 	.word	0x20000c60

08010a7c <std>:
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	b510      	push	{r4, lr}
 8010a80:	4604      	mov	r4, r0
 8010a82:	e9c0 3300 	strd	r3, r3, [r0]
 8010a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a8a:	6083      	str	r3, [r0, #8]
 8010a8c:	8181      	strh	r1, [r0, #12]
 8010a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8010a90:	81c2      	strh	r2, [r0, #14]
 8010a92:	6183      	str	r3, [r0, #24]
 8010a94:	4619      	mov	r1, r3
 8010a96:	2208      	movs	r2, #8
 8010a98:	305c      	adds	r0, #92	; 0x5c
 8010a9a:	f000 f8b1 	bl	8010c00 <memset>
 8010a9e:	4b0d      	ldr	r3, [pc, #52]	; (8010ad4 <std+0x58>)
 8010aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8010aa2:	4b0d      	ldr	r3, [pc, #52]	; (8010ad8 <std+0x5c>)
 8010aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010aa6:	4b0d      	ldr	r3, [pc, #52]	; (8010adc <std+0x60>)
 8010aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010aaa:	4b0d      	ldr	r3, [pc, #52]	; (8010ae0 <std+0x64>)
 8010aac:	6323      	str	r3, [r4, #48]	; 0x30
 8010aae:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <std+0x68>)
 8010ab0:	6224      	str	r4, [r4, #32]
 8010ab2:	429c      	cmp	r4, r3
 8010ab4:	d006      	beq.n	8010ac4 <std+0x48>
 8010ab6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010aba:	4294      	cmp	r4, r2
 8010abc:	d002      	beq.n	8010ac4 <std+0x48>
 8010abe:	33d0      	adds	r3, #208	; 0xd0
 8010ac0:	429c      	cmp	r4, r3
 8010ac2:	d105      	bne.n	8010ad0 <std+0x54>
 8010ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010acc:	f000 b8de 	b.w	8010c8c <__retarget_lock_init_recursive>
 8010ad0:	bd10      	pop	{r4, pc}
 8010ad2:	bf00      	nop
 8010ad4:	080127c9 	.word	0x080127c9
 8010ad8:	080127eb 	.word	0x080127eb
 8010adc:	08012823 	.word	0x08012823
 8010ae0:	08012847 	.word	0x08012847
 8010ae4:	20000b24 	.word	0x20000b24

08010ae8 <stdio_exit_handler>:
 8010ae8:	4a02      	ldr	r2, [pc, #8]	; (8010af4 <stdio_exit_handler+0xc>)
 8010aea:	4903      	ldr	r1, [pc, #12]	; (8010af8 <stdio_exit_handler+0x10>)
 8010aec:	4803      	ldr	r0, [pc, #12]	; (8010afc <stdio_exit_handler+0x14>)
 8010aee:	f000 b869 	b.w	8010bc4 <_fwalk_sglue>
 8010af2:	bf00      	nop
 8010af4:	20000038 	.word	0x20000038
 8010af8:	08012081 	.word	0x08012081
 8010afc:	20000044 	.word	0x20000044

08010b00 <cleanup_stdio>:
 8010b00:	6841      	ldr	r1, [r0, #4]
 8010b02:	4b0c      	ldr	r3, [pc, #48]	; (8010b34 <cleanup_stdio+0x34>)
 8010b04:	4299      	cmp	r1, r3
 8010b06:	b510      	push	{r4, lr}
 8010b08:	4604      	mov	r4, r0
 8010b0a:	d001      	beq.n	8010b10 <cleanup_stdio+0x10>
 8010b0c:	f001 fab8 	bl	8012080 <_fflush_r>
 8010b10:	68a1      	ldr	r1, [r4, #8]
 8010b12:	4b09      	ldr	r3, [pc, #36]	; (8010b38 <cleanup_stdio+0x38>)
 8010b14:	4299      	cmp	r1, r3
 8010b16:	d002      	beq.n	8010b1e <cleanup_stdio+0x1e>
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f001 fab1 	bl	8012080 <_fflush_r>
 8010b1e:	68e1      	ldr	r1, [r4, #12]
 8010b20:	4b06      	ldr	r3, [pc, #24]	; (8010b3c <cleanup_stdio+0x3c>)
 8010b22:	4299      	cmp	r1, r3
 8010b24:	d004      	beq.n	8010b30 <cleanup_stdio+0x30>
 8010b26:	4620      	mov	r0, r4
 8010b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b2c:	f001 baa8 	b.w	8012080 <_fflush_r>
 8010b30:	bd10      	pop	{r4, pc}
 8010b32:	bf00      	nop
 8010b34:	20000b24 	.word	0x20000b24
 8010b38:	20000b8c 	.word	0x20000b8c
 8010b3c:	20000bf4 	.word	0x20000bf4

08010b40 <global_stdio_init.part.0>:
 8010b40:	b510      	push	{r4, lr}
 8010b42:	4b0b      	ldr	r3, [pc, #44]	; (8010b70 <global_stdio_init.part.0+0x30>)
 8010b44:	4c0b      	ldr	r4, [pc, #44]	; (8010b74 <global_stdio_init.part.0+0x34>)
 8010b46:	4a0c      	ldr	r2, [pc, #48]	; (8010b78 <global_stdio_init.part.0+0x38>)
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	2104      	movs	r1, #4
 8010b50:	f7ff ff94 	bl	8010a7c <std>
 8010b54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010b58:	2201      	movs	r2, #1
 8010b5a:	2109      	movs	r1, #9
 8010b5c:	f7ff ff8e 	bl	8010a7c <std>
 8010b60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010b64:	2202      	movs	r2, #2
 8010b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b6a:	2112      	movs	r1, #18
 8010b6c:	f7ff bf86 	b.w	8010a7c <std>
 8010b70:	20000c5c 	.word	0x20000c5c
 8010b74:	20000b24 	.word	0x20000b24
 8010b78:	08010ae9 	.word	0x08010ae9

08010b7c <__sfp_lock_acquire>:
 8010b7c:	4801      	ldr	r0, [pc, #4]	; (8010b84 <__sfp_lock_acquire+0x8>)
 8010b7e:	f000 b886 	b.w	8010c8e <__retarget_lock_acquire_recursive>
 8010b82:	bf00      	nop
 8010b84:	20000c61 	.word	0x20000c61

08010b88 <__sfp_lock_release>:
 8010b88:	4801      	ldr	r0, [pc, #4]	; (8010b90 <__sfp_lock_release+0x8>)
 8010b8a:	f000 b881 	b.w	8010c90 <__retarget_lock_release_recursive>
 8010b8e:	bf00      	nop
 8010b90:	20000c61 	.word	0x20000c61

08010b94 <__sinit>:
 8010b94:	b510      	push	{r4, lr}
 8010b96:	4604      	mov	r4, r0
 8010b98:	f7ff fff0 	bl	8010b7c <__sfp_lock_acquire>
 8010b9c:	6a23      	ldr	r3, [r4, #32]
 8010b9e:	b11b      	cbz	r3, 8010ba8 <__sinit+0x14>
 8010ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ba4:	f7ff bff0 	b.w	8010b88 <__sfp_lock_release>
 8010ba8:	4b04      	ldr	r3, [pc, #16]	; (8010bbc <__sinit+0x28>)
 8010baa:	6223      	str	r3, [r4, #32]
 8010bac:	4b04      	ldr	r3, [pc, #16]	; (8010bc0 <__sinit+0x2c>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d1f5      	bne.n	8010ba0 <__sinit+0xc>
 8010bb4:	f7ff ffc4 	bl	8010b40 <global_stdio_init.part.0>
 8010bb8:	e7f2      	b.n	8010ba0 <__sinit+0xc>
 8010bba:	bf00      	nop
 8010bbc:	08010b01 	.word	0x08010b01
 8010bc0:	20000c5c 	.word	0x20000c5c

08010bc4 <_fwalk_sglue>:
 8010bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bc8:	4607      	mov	r7, r0
 8010bca:	4688      	mov	r8, r1
 8010bcc:	4614      	mov	r4, r2
 8010bce:	2600      	movs	r6, #0
 8010bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8010bd8:	d505      	bpl.n	8010be6 <_fwalk_sglue+0x22>
 8010bda:	6824      	ldr	r4, [r4, #0]
 8010bdc:	2c00      	cmp	r4, #0
 8010bde:	d1f7      	bne.n	8010bd0 <_fwalk_sglue+0xc>
 8010be0:	4630      	mov	r0, r6
 8010be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010be6:	89ab      	ldrh	r3, [r5, #12]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d907      	bls.n	8010bfc <_fwalk_sglue+0x38>
 8010bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	d003      	beq.n	8010bfc <_fwalk_sglue+0x38>
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	47c0      	blx	r8
 8010bfa:	4306      	orrs	r6, r0
 8010bfc:	3568      	adds	r5, #104	; 0x68
 8010bfe:	e7e9      	b.n	8010bd4 <_fwalk_sglue+0x10>

08010c00 <memset>:
 8010c00:	4402      	add	r2, r0
 8010c02:	4603      	mov	r3, r0
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d100      	bne.n	8010c0a <memset+0xa>
 8010c08:	4770      	bx	lr
 8010c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8010c0e:	e7f9      	b.n	8010c04 <memset+0x4>

08010c10 <_localeconv_r>:
 8010c10:	4800      	ldr	r0, [pc, #0]	; (8010c14 <_localeconv_r+0x4>)
 8010c12:	4770      	bx	lr
 8010c14:	20000184 	.word	0x20000184

08010c18 <_sbrk_r>:
 8010c18:	b538      	push	{r3, r4, r5, lr}
 8010c1a:	4d06      	ldr	r5, [pc, #24]	; (8010c34 <_sbrk_r+0x1c>)
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	4604      	mov	r4, r0
 8010c20:	4608      	mov	r0, r1
 8010c22:	602b      	str	r3, [r5, #0]
 8010c24:	f7f4 f8ec 	bl	8004e00 <_sbrk>
 8010c28:	1c43      	adds	r3, r0, #1
 8010c2a:	d102      	bne.n	8010c32 <_sbrk_r+0x1a>
 8010c2c:	682b      	ldr	r3, [r5, #0]
 8010c2e:	b103      	cbz	r3, 8010c32 <_sbrk_r+0x1a>
 8010c30:	6023      	str	r3, [r4, #0]
 8010c32:	bd38      	pop	{r3, r4, r5, pc}
 8010c34:	20000c64 	.word	0x20000c64

08010c38 <__errno>:
 8010c38:	4b01      	ldr	r3, [pc, #4]	; (8010c40 <__errno+0x8>)
 8010c3a:	6818      	ldr	r0, [r3, #0]
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop
 8010c40:	20000090 	.word	0x20000090

08010c44 <__libc_init_array>:
 8010c44:	b570      	push	{r4, r5, r6, lr}
 8010c46:	4d0d      	ldr	r5, [pc, #52]	; (8010c7c <__libc_init_array+0x38>)
 8010c48:	4c0d      	ldr	r4, [pc, #52]	; (8010c80 <__libc_init_array+0x3c>)
 8010c4a:	1b64      	subs	r4, r4, r5
 8010c4c:	10a4      	asrs	r4, r4, #2
 8010c4e:	2600      	movs	r6, #0
 8010c50:	42a6      	cmp	r6, r4
 8010c52:	d109      	bne.n	8010c68 <__libc_init_array+0x24>
 8010c54:	4d0b      	ldr	r5, [pc, #44]	; (8010c84 <__libc_init_array+0x40>)
 8010c56:	4c0c      	ldr	r4, [pc, #48]	; (8010c88 <__libc_init_array+0x44>)
 8010c58:	f002 f85a 	bl	8012d10 <_init>
 8010c5c:	1b64      	subs	r4, r4, r5
 8010c5e:	10a4      	asrs	r4, r4, #2
 8010c60:	2600      	movs	r6, #0
 8010c62:	42a6      	cmp	r6, r4
 8010c64:	d105      	bne.n	8010c72 <__libc_init_array+0x2e>
 8010c66:	bd70      	pop	{r4, r5, r6, pc}
 8010c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c6c:	4798      	blx	r3
 8010c6e:	3601      	adds	r6, #1
 8010c70:	e7ee      	b.n	8010c50 <__libc_init_array+0xc>
 8010c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c76:	4798      	blx	r3
 8010c78:	3601      	adds	r6, #1
 8010c7a:	e7f2      	b.n	8010c62 <__libc_init_array+0x1e>
 8010c7c:	08018604 	.word	0x08018604
 8010c80:	08018604 	.word	0x08018604
 8010c84:	08018604 	.word	0x08018604
 8010c88:	08018608 	.word	0x08018608

08010c8c <__retarget_lock_init_recursive>:
 8010c8c:	4770      	bx	lr

08010c8e <__retarget_lock_acquire_recursive>:
 8010c8e:	4770      	bx	lr

08010c90 <__retarget_lock_release_recursive>:
 8010c90:	4770      	bx	lr

08010c92 <memcpy>:
 8010c92:	440a      	add	r2, r1
 8010c94:	4291      	cmp	r1, r2
 8010c96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010c9a:	d100      	bne.n	8010c9e <memcpy+0xc>
 8010c9c:	4770      	bx	lr
 8010c9e:	b510      	push	{r4, lr}
 8010ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ca8:	4291      	cmp	r1, r2
 8010caa:	d1f9      	bne.n	8010ca0 <memcpy+0xe>
 8010cac:	bd10      	pop	{r4, pc}

08010cae <quorem>:
 8010cae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb2:	6903      	ldr	r3, [r0, #16]
 8010cb4:	690c      	ldr	r4, [r1, #16]
 8010cb6:	42a3      	cmp	r3, r4
 8010cb8:	4607      	mov	r7, r0
 8010cba:	db7e      	blt.n	8010dba <quorem+0x10c>
 8010cbc:	3c01      	subs	r4, #1
 8010cbe:	f101 0814 	add.w	r8, r1, #20
 8010cc2:	f100 0514 	add.w	r5, r0, #20
 8010cc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cca:	9301      	str	r3, [sp, #4]
 8010ccc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010cdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ce0:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ce4:	d331      	bcc.n	8010d4a <quorem+0x9c>
 8010ce6:	f04f 0e00 	mov.w	lr, #0
 8010cea:	4640      	mov	r0, r8
 8010cec:	46ac      	mov	ip, r5
 8010cee:	46f2      	mov	sl, lr
 8010cf0:	f850 2b04 	ldr.w	r2, [r0], #4
 8010cf4:	b293      	uxth	r3, r2
 8010cf6:	fb06 e303 	mla	r3, r6, r3, lr
 8010cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010cfe:	0c1a      	lsrs	r2, r3, #16
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	ebaa 0303 	sub.w	r3, sl, r3
 8010d06:	f8dc a000 	ldr.w	sl, [ip]
 8010d0a:	fa13 f38a 	uxtah	r3, r3, sl
 8010d0e:	fb06 220e 	mla	r2, r6, lr, r2
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	9b00      	ldr	r3, [sp, #0]
 8010d16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010d1a:	b292      	uxth	r2, r2
 8010d1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d24:	f8bd 3000 	ldrh.w	r3, [sp]
 8010d28:	4581      	cmp	r9, r0
 8010d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d2e:	f84c 3b04 	str.w	r3, [ip], #4
 8010d32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010d36:	d2db      	bcs.n	8010cf0 <quorem+0x42>
 8010d38:	f855 300b 	ldr.w	r3, [r5, fp]
 8010d3c:	b92b      	cbnz	r3, 8010d4a <quorem+0x9c>
 8010d3e:	9b01      	ldr	r3, [sp, #4]
 8010d40:	3b04      	subs	r3, #4
 8010d42:	429d      	cmp	r5, r3
 8010d44:	461a      	mov	r2, r3
 8010d46:	d32c      	bcc.n	8010da2 <quorem+0xf4>
 8010d48:	613c      	str	r4, [r7, #16]
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	f001 fc3c 	bl	80125c8 <__mcmp>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	db22      	blt.n	8010d9a <quorem+0xec>
 8010d54:	3601      	adds	r6, #1
 8010d56:	4629      	mov	r1, r5
 8010d58:	2000      	movs	r0, #0
 8010d5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d5e:	f8d1 c000 	ldr.w	ip, [r1]
 8010d62:	b293      	uxth	r3, r2
 8010d64:	1ac3      	subs	r3, r0, r3
 8010d66:	0c12      	lsrs	r2, r2, #16
 8010d68:	fa13 f38c 	uxtah	r3, r3, ip
 8010d6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010d70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d7a:	45c1      	cmp	r9, r8
 8010d7c:	f841 3b04 	str.w	r3, [r1], #4
 8010d80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d84:	d2e9      	bcs.n	8010d5a <quorem+0xac>
 8010d86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d8e:	b922      	cbnz	r2, 8010d9a <quorem+0xec>
 8010d90:	3b04      	subs	r3, #4
 8010d92:	429d      	cmp	r5, r3
 8010d94:	461a      	mov	r2, r3
 8010d96:	d30a      	bcc.n	8010dae <quorem+0x100>
 8010d98:	613c      	str	r4, [r7, #16]
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	b003      	add	sp, #12
 8010d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010da2:	6812      	ldr	r2, [r2, #0]
 8010da4:	3b04      	subs	r3, #4
 8010da6:	2a00      	cmp	r2, #0
 8010da8:	d1ce      	bne.n	8010d48 <quorem+0x9a>
 8010daa:	3c01      	subs	r4, #1
 8010dac:	e7c9      	b.n	8010d42 <quorem+0x94>
 8010dae:	6812      	ldr	r2, [r2, #0]
 8010db0:	3b04      	subs	r3, #4
 8010db2:	2a00      	cmp	r2, #0
 8010db4:	d1f0      	bne.n	8010d98 <quorem+0xea>
 8010db6:	3c01      	subs	r4, #1
 8010db8:	e7eb      	b.n	8010d92 <quorem+0xe4>
 8010dba:	2000      	movs	r0, #0
 8010dbc:	e7ee      	b.n	8010d9c <quorem+0xee>
	...

08010dc0 <_dtoa_r>:
 8010dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	ed2d 8b04 	vpush	{d8-d9}
 8010dc8:	69c5      	ldr	r5, [r0, #28]
 8010dca:	b093      	sub	sp, #76	; 0x4c
 8010dcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010dd0:	ec57 6b10 	vmov	r6, r7, d0
 8010dd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010dd8:	9107      	str	r1, [sp, #28]
 8010dda:	4604      	mov	r4, r0
 8010ddc:	920a      	str	r2, [sp, #40]	; 0x28
 8010dde:	930d      	str	r3, [sp, #52]	; 0x34
 8010de0:	b975      	cbnz	r5, 8010e00 <_dtoa_r+0x40>
 8010de2:	2010      	movs	r0, #16
 8010de4:	f7ff fbd2 	bl	801058c <malloc>
 8010de8:	4602      	mov	r2, r0
 8010dea:	61e0      	str	r0, [r4, #28]
 8010dec:	b920      	cbnz	r0, 8010df8 <_dtoa_r+0x38>
 8010dee:	4bae      	ldr	r3, [pc, #696]	; (80110a8 <_dtoa_r+0x2e8>)
 8010df0:	21ef      	movs	r1, #239	; 0xef
 8010df2:	48ae      	ldr	r0, [pc, #696]	; (80110ac <_dtoa_r+0x2ec>)
 8010df4:	f001 fed4 	bl	8012ba0 <__assert_func>
 8010df8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010dfc:	6005      	str	r5, [r0, #0]
 8010dfe:	60c5      	str	r5, [r0, #12]
 8010e00:	69e3      	ldr	r3, [r4, #28]
 8010e02:	6819      	ldr	r1, [r3, #0]
 8010e04:	b151      	cbz	r1, 8010e1c <_dtoa_r+0x5c>
 8010e06:	685a      	ldr	r2, [r3, #4]
 8010e08:	604a      	str	r2, [r1, #4]
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	4093      	lsls	r3, r2
 8010e0e:	608b      	str	r3, [r1, #8]
 8010e10:	4620      	mov	r0, r4
 8010e12:	f001 f99d 	bl	8012150 <_Bfree>
 8010e16:	69e3      	ldr	r3, [r4, #28]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	601a      	str	r2, [r3, #0]
 8010e1c:	1e3b      	subs	r3, r7, #0
 8010e1e:	bfbb      	ittet	lt
 8010e20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010e24:	9303      	strlt	r3, [sp, #12]
 8010e26:	2300      	movge	r3, #0
 8010e28:	2201      	movlt	r2, #1
 8010e2a:	bfac      	ite	ge
 8010e2c:	f8c8 3000 	strge.w	r3, [r8]
 8010e30:	f8c8 2000 	strlt.w	r2, [r8]
 8010e34:	4b9e      	ldr	r3, [pc, #632]	; (80110b0 <_dtoa_r+0x2f0>)
 8010e36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010e3a:	ea33 0308 	bics.w	r3, r3, r8
 8010e3e:	d11b      	bne.n	8010e78 <_dtoa_r+0xb8>
 8010e40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e42:	f242 730f 	movw	r3, #9999	; 0x270f
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010e4c:	4333      	orrs	r3, r6
 8010e4e:	f000 8593 	beq.w	8011978 <_dtoa_r+0xbb8>
 8010e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e54:	b963      	cbnz	r3, 8010e70 <_dtoa_r+0xb0>
 8010e56:	4b97      	ldr	r3, [pc, #604]	; (80110b4 <_dtoa_r+0x2f4>)
 8010e58:	e027      	b.n	8010eaa <_dtoa_r+0xea>
 8010e5a:	4b97      	ldr	r3, [pc, #604]	; (80110b8 <_dtoa_r+0x2f8>)
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	3308      	adds	r3, #8
 8010e60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010e62:	6013      	str	r3, [r2, #0]
 8010e64:	9800      	ldr	r0, [sp, #0]
 8010e66:	b013      	add	sp, #76	; 0x4c
 8010e68:	ecbd 8b04 	vpop	{d8-d9}
 8010e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e70:	4b90      	ldr	r3, [pc, #576]	; (80110b4 <_dtoa_r+0x2f4>)
 8010e72:	9300      	str	r3, [sp, #0]
 8010e74:	3303      	adds	r3, #3
 8010e76:	e7f3      	b.n	8010e60 <_dtoa_r+0xa0>
 8010e78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	ec51 0b17 	vmov	r0, r1, d7
 8010e82:	eeb0 8a47 	vmov.f32	s16, s14
 8010e86:	eef0 8a67 	vmov.f32	s17, s15
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	f7ef fe34 	bl	8000af8 <__aeabi_dcmpeq>
 8010e90:	4681      	mov	r9, r0
 8010e92:	b160      	cbz	r0, 8010eae <_dtoa_r+0xee>
 8010e94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e96:	2301      	movs	r3, #1
 8010e98:	6013      	str	r3, [r2, #0]
 8010e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f000 8568 	beq.w	8011972 <_dtoa_r+0xbb2>
 8010ea2:	4b86      	ldr	r3, [pc, #536]	; (80110bc <_dtoa_r+0x2fc>)
 8010ea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ea6:	6013      	str	r3, [r2, #0]
 8010ea8:	3b01      	subs	r3, #1
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	e7da      	b.n	8010e64 <_dtoa_r+0xa4>
 8010eae:	aa10      	add	r2, sp, #64	; 0x40
 8010eb0:	a911      	add	r1, sp, #68	; 0x44
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	eeb0 0a48 	vmov.f32	s0, s16
 8010eb8:	eef0 0a68 	vmov.f32	s1, s17
 8010ebc:	f001 fc2a 	bl	8012714 <__d2b>
 8010ec0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	2d00      	cmp	r5, #0
 8010ec8:	d07f      	beq.n	8010fca <_dtoa_r+0x20a>
 8010eca:	ee18 3a90 	vmov	r3, s17
 8010ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ed2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010ed6:	ec51 0b18 	vmov	r0, r1, d8
 8010eda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010ee2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	2200      	movs	r2, #0
 8010eea:	4b75      	ldr	r3, [pc, #468]	; (80110c0 <_dtoa_r+0x300>)
 8010eec:	f7ef f9e4 	bl	80002b8 <__aeabi_dsub>
 8010ef0:	a367      	add	r3, pc, #412	; (adr r3, 8011090 <_dtoa_r+0x2d0>)
 8010ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef6:	f7ef fb97 	bl	8000628 <__aeabi_dmul>
 8010efa:	a367      	add	r3, pc, #412	; (adr r3, 8011098 <_dtoa_r+0x2d8>)
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	f7ef f9dc 	bl	80002bc <__adddf3>
 8010f04:	4606      	mov	r6, r0
 8010f06:	4628      	mov	r0, r5
 8010f08:	460f      	mov	r7, r1
 8010f0a:	f7ef fb23 	bl	8000554 <__aeabi_i2d>
 8010f0e:	a364      	add	r3, pc, #400	; (adr r3, 80110a0 <_dtoa_r+0x2e0>)
 8010f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f14:	f7ef fb88 	bl	8000628 <__aeabi_dmul>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	4639      	mov	r1, r7
 8010f20:	f7ef f9cc 	bl	80002bc <__adddf3>
 8010f24:	4606      	mov	r6, r0
 8010f26:	460f      	mov	r7, r1
 8010f28:	f7ef fe2e 	bl	8000b88 <__aeabi_d2iz>
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	4683      	mov	fp, r0
 8010f30:	2300      	movs	r3, #0
 8010f32:	4630      	mov	r0, r6
 8010f34:	4639      	mov	r1, r7
 8010f36:	f7ef fde9 	bl	8000b0c <__aeabi_dcmplt>
 8010f3a:	b148      	cbz	r0, 8010f50 <_dtoa_r+0x190>
 8010f3c:	4658      	mov	r0, fp
 8010f3e:	f7ef fb09 	bl	8000554 <__aeabi_i2d>
 8010f42:	4632      	mov	r2, r6
 8010f44:	463b      	mov	r3, r7
 8010f46:	f7ef fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 8010f4a:	b908      	cbnz	r0, 8010f50 <_dtoa_r+0x190>
 8010f4c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010f50:	f1bb 0f16 	cmp.w	fp, #22
 8010f54:	d857      	bhi.n	8011006 <_dtoa_r+0x246>
 8010f56:	4b5b      	ldr	r3, [pc, #364]	; (80110c4 <_dtoa_r+0x304>)
 8010f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f60:	ec51 0b18 	vmov	r0, r1, d8
 8010f64:	f7ef fdd2 	bl	8000b0c <__aeabi_dcmplt>
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	d04e      	beq.n	801100a <_dtoa_r+0x24a>
 8010f6c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010f70:	2300      	movs	r3, #0
 8010f72:	930c      	str	r3, [sp, #48]	; 0x30
 8010f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f76:	1b5b      	subs	r3, r3, r5
 8010f78:	1e5a      	subs	r2, r3, #1
 8010f7a:	bf45      	ittet	mi
 8010f7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010f80:	9305      	strmi	r3, [sp, #20]
 8010f82:	2300      	movpl	r3, #0
 8010f84:	2300      	movmi	r3, #0
 8010f86:	9206      	str	r2, [sp, #24]
 8010f88:	bf54      	ite	pl
 8010f8a:	9305      	strpl	r3, [sp, #20]
 8010f8c:	9306      	strmi	r3, [sp, #24]
 8010f8e:	f1bb 0f00 	cmp.w	fp, #0
 8010f92:	db3c      	blt.n	801100e <_dtoa_r+0x24e>
 8010f94:	9b06      	ldr	r3, [sp, #24]
 8010f96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010f9a:	445b      	add	r3, fp
 8010f9c:	9306      	str	r3, [sp, #24]
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	9308      	str	r3, [sp, #32]
 8010fa2:	9b07      	ldr	r3, [sp, #28]
 8010fa4:	2b09      	cmp	r3, #9
 8010fa6:	d868      	bhi.n	801107a <_dtoa_r+0x2ba>
 8010fa8:	2b05      	cmp	r3, #5
 8010faa:	bfc4      	itt	gt
 8010fac:	3b04      	subgt	r3, #4
 8010fae:	9307      	strgt	r3, [sp, #28]
 8010fb0:	9b07      	ldr	r3, [sp, #28]
 8010fb2:	f1a3 0302 	sub.w	r3, r3, #2
 8010fb6:	bfcc      	ite	gt
 8010fb8:	2500      	movgt	r5, #0
 8010fba:	2501      	movle	r5, #1
 8010fbc:	2b03      	cmp	r3, #3
 8010fbe:	f200 8085 	bhi.w	80110cc <_dtoa_r+0x30c>
 8010fc2:	e8df f003 	tbb	[pc, r3]
 8010fc6:	3b2e      	.short	0x3b2e
 8010fc8:	5839      	.short	0x5839
 8010fca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010fce:	441d      	add	r5, r3
 8010fd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010fd4:	2b20      	cmp	r3, #32
 8010fd6:	bfc1      	itttt	gt
 8010fd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010fdc:	fa08 f803 	lslgt.w	r8, r8, r3
 8010fe0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010fe4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010fe8:	bfd6      	itet	le
 8010fea:	f1c3 0320 	rsble	r3, r3, #32
 8010fee:	ea48 0003 	orrgt.w	r0, r8, r3
 8010ff2:	fa06 f003 	lslle.w	r0, r6, r3
 8010ff6:	f7ef fa9d 	bl	8000534 <__aeabi_ui2d>
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011000:	3d01      	subs	r5, #1
 8011002:	920e      	str	r2, [sp, #56]	; 0x38
 8011004:	e76f      	b.n	8010ee6 <_dtoa_r+0x126>
 8011006:	2301      	movs	r3, #1
 8011008:	e7b3      	b.n	8010f72 <_dtoa_r+0x1b2>
 801100a:	900c      	str	r0, [sp, #48]	; 0x30
 801100c:	e7b2      	b.n	8010f74 <_dtoa_r+0x1b4>
 801100e:	9b05      	ldr	r3, [sp, #20]
 8011010:	eba3 030b 	sub.w	r3, r3, fp
 8011014:	9305      	str	r3, [sp, #20]
 8011016:	f1cb 0300 	rsb	r3, fp, #0
 801101a:	9308      	str	r3, [sp, #32]
 801101c:	2300      	movs	r3, #0
 801101e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011020:	e7bf      	b.n	8010fa2 <_dtoa_r+0x1e2>
 8011022:	2300      	movs	r3, #0
 8011024:	9309      	str	r3, [sp, #36]	; 0x24
 8011026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011028:	2b00      	cmp	r3, #0
 801102a:	dc52      	bgt.n	80110d2 <_dtoa_r+0x312>
 801102c:	2301      	movs	r3, #1
 801102e:	9301      	str	r3, [sp, #4]
 8011030:	9304      	str	r3, [sp, #16]
 8011032:	461a      	mov	r2, r3
 8011034:	920a      	str	r2, [sp, #40]	; 0x28
 8011036:	e00b      	b.n	8011050 <_dtoa_r+0x290>
 8011038:	2301      	movs	r3, #1
 801103a:	e7f3      	b.n	8011024 <_dtoa_r+0x264>
 801103c:	2300      	movs	r3, #0
 801103e:	9309      	str	r3, [sp, #36]	; 0x24
 8011040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011042:	445b      	add	r3, fp
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	3301      	adds	r3, #1
 8011048:	2b01      	cmp	r3, #1
 801104a:	9304      	str	r3, [sp, #16]
 801104c:	bfb8      	it	lt
 801104e:	2301      	movlt	r3, #1
 8011050:	69e0      	ldr	r0, [r4, #28]
 8011052:	2100      	movs	r1, #0
 8011054:	2204      	movs	r2, #4
 8011056:	f102 0614 	add.w	r6, r2, #20
 801105a:	429e      	cmp	r6, r3
 801105c:	d93d      	bls.n	80110da <_dtoa_r+0x31a>
 801105e:	6041      	str	r1, [r0, #4]
 8011060:	4620      	mov	r0, r4
 8011062:	f001 f835 	bl	80120d0 <_Balloc>
 8011066:	9000      	str	r0, [sp, #0]
 8011068:	2800      	cmp	r0, #0
 801106a:	d139      	bne.n	80110e0 <_dtoa_r+0x320>
 801106c:	4b16      	ldr	r3, [pc, #88]	; (80110c8 <_dtoa_r+0x308>)
 801106e:	4602      	mov	r2, r0
 8011070:	f240 11af 	movw	r1, #431	; 0x1af
 8011074:	e6bd      	b.n	8010df2 <_dtoa_r+0x32>
 8011076:	2301      	movs	r3, #1
 8011078:	e7e1      	b.n	801103e <_dtoa_r+0x27e>
 801107a:	2501      	movs	r5, #1
 801107c:	2300      	movs	r3, #0
 801107e:	9307      	str	r3, [sp, #28]
 8011080:	9509      	str	r5, [sp, #36]	; 0x24
 8011082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011086:	9301      	str	r3, [sp, #4]
 8011088:	9304      	str	r3, [sp, #16]
 801108a:	2200      	movs	r2, #0
 801108c:	2312      	movs	r3, #18
 801108e:	e7d1      	b.n	8011034 <_dtoa_r+0x274>
 8011090:	636f4361 	.word	0x636f4361
 8011094:	3fd287a7 	.word	0x3fd287a7
 8011098:	8b60c8b3 	.word	0x8b60c8b3
 801109c:	3fc68a28 	.word	0x3fc68a28
 80110a0:	509f79fb 	.word	0x509f79fb
 80110a4:	3fd34413 	.word	0x3fd34413
 80110a8:	080182c9 	.word	0x080182c9
 80110ac:	080182e0 	.word	0x080182e0
 80110b0:	7ff00000 	.word	0x7ff00000
 80110b4:	080182c5 	.word	0x080182c5
 80110b8:	080182bc 	.word	0x080182bc
 80110bc:	08018299 	.word	0x08018299
 80110c0:	3ff80000 	.word	0x3ff80000
 80110c4:	080183e0 	.word	0x080183e0
 80110c8:	08018338 	.word	0x08018338
 80110cc:	2301      	movs	r3, #1
 80110ce:	9309      	str	r3, [sp, #36]	; 0x24
 80110d0:	e7d7      	b.n	8011082 <_dtoa_r+0x2c2>
 80110d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110d4:	9301      	str	r3, [sp, #4]
 80110d6:	9304      	str	r3, [sp, #16]
 80110d8:	e7ba      	b.n	8011050 <_dtoa_r+0x290>
 80110da:	3101      	adds	r1, #1
 80110dc:	0052      	lsls	r2, r2, #1
 80110de:	e7ba      	b.n	8011056 <_dtoa_r+0x296>
 80110e0:	69e3      	ldr	r3, [r4, #28]
 80110e2:	9a00      	ldr	r2, [sp, #0]
 80110e4:	601a      	str	r2, [r3, #0]
 80110e6:	9b04      	ldr	r3, [sp, #16]
 80110e8:	2b0e      	cmp	r3, #14
 80110ea:	f200 80a8 	bhi.w	801123e <_dtoa_r+0x47e>
 80110ee:	2d00      	cmp	r5, #0
 80110f0:	f000 80a5 	beq.w	801123e <_dtoa_r+0x47e>
 80110f4:	f1bb 0f00 	cmp.w	fp, #0
 80110f8:	dd38      	ble.n	801116c <_dtoa_r+0x3ac>
 80110fa:	4bc0      	ldr	r3, [pc, #768]	; (80113fc <_dtoa_r+0x63c>)
 80110fc:	f00b 020f 	and.w	r2, fp, #15
 8011100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011104:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011108:	e9d3 6700 	ldrd	r6, r7, [r3]
 801110c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011110:	d019      	beq.n	8011146 <_dtoa_r+0x386>
 8011112:	4bbb      	ldr	r3, [pc, #748]	; (8011400 <_dtoa_r+0x640>)
 8011114:	ec51 0b18 	vmov	r0, r1, d8
 8011118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801111c:	f7ef fbae 	bl	800087c <__aeabi_ddiv>
 8011120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011124:	f008 080f 	and.w	r8, r8, #15
 8011128:	2503      	movs	r5, #3
 801112a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011400 <_dtoa_r+0x640>
 801112e:	f1b8 0f00 	cmp.w	r8, #0
 8011132:	d10a      	bne.n	801114a <_dtoa_r+0x38a>
 8011134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011138:	4632      	mov	r2, r6
 801113a:	463b      	mov	r3, r7
 801113c:	f7ef fb9e 	bl	800087c <__aeabi_ddiv>
 8011140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011144:	e02b      	b.n	801119e <_dtoa_r+0x3de>
 8011146:	2502      	movs	r5, #2
 8011148:	e7ef      	b.n	801112a <_dtoa_r+0x36a>
 801114a:	f018 0f01 	tst.w	r8, #1
 801114e:	d008      	beq.n	8011162 <_dtoa_r+0x3a2>
 8011150:	4630      	mov	r0, r6
 8011152:	4639      	mov	r1, r7
 8011154:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011158:	f7ef fa66 	bl	8000628 <__aeabi_dmul>
 801115c:	3501      	adds	r5, #1
 801115e:	4606      	mov	r6, r0
 8011160:	460f      	mov	r7, r1
 8011162:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011166:	f109 0908 	add.w	r9, r9, #8
 801116a:	e7e0      	b.n	801112e <_dtoa_r+0x36e>
 801116c:	f000 809f 	beq.w	80112ae <_dtoa_r+0x4ee>
 8011170:	f1cb 0600 	rsb	r6, fp, #0
 8011174:	4ba1      	ldr	r3, [pc, #644]	; (80113fc <_dtoa_r+0x63c>)
 8011176:	4fa2      	ldr	r7, [pc, #648]	; (8011400 <_dtoa_r+0x640>)
 8011178:	f006 020f 	and.w	r2, r6, #15
 801117c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011184:	ec51 0b18 	vmov	r0, r1, d8
 8011188:	f7ef fa4e 	bl	8000628 <__aeabi_dmul>
 801118c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011190:	1136      	asrs	r6, r6, #4
 8011192:	2300      	movs	r3, #0
 8011194:	2502      	movs	r5, #2
 8011196:	2e00      	cmp	r6, #0
 8011198:	d17e      	bne.n	8011298 <_dtoa_r+0x4d8>
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1d0      	bne.n	8011140 <_dtoa_r+0x380>
 801119e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 8084 	beq.w	80112b2 <_dtoa_r+0x4f2>
 80111aa:	4b96      	ldr	r3, [pc, #600]	; (8011404 <_dtoa_r+0x644>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	4640      	mov	r0, r8
 80111b0:	4649      	mov	r1, r9
 80111b2:	f7ef fcab 	bl	8000b0c <__aeabi_dcmplt>
 80111b6:	2800      	cmp	r0, #0
 80111b8:	d07b      	beq.n	80112b2 <_dtoa_r+0x4f2>
 80111ba:	9b04      	ldr	r3, [sp, #16]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d078      	beq.n	80112b2 <_dtoa_r+0x4f2>
 80111c0:	9b01      	ldr	r3, [sp, #4]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	dd39      	ble.n	801123a <_dtoa_r+0x47a>
 80111c6:	4b90      	ldr	r3, [pc, #576]	; (8011408 <_dtoa_r+0x648>)
 80111c8:	2200      	movs	r2, #0
 80111ca:	4640      	mov	r0, r8
 80111cc:	4649      	mov	r1, r9
 80111ce:	f7ef fa2b 	bl	8000628 <__aeabi_dmul>
 80111d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111d6:	9e01      	ldr	r6, [sp, #4]
 80111d8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80111dc:	3501      	adds	r5, #1
 80111de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80111e2:	4628      	mov	r0, r5
 80111e4:	f7ef f9b6 	bl	8000554 <__aeabi_i2d>
 80111e8:	4642      	mov	r2, r8
 80111ea:	464b      	mov	r3, r9
 80111ec:	f7ef fa1c 	bl	8000628 <__aeabi_dmul>
 80111f0:	4b86      	ldr	r3, [pc, #536]	; (801140c <_dtoa_r+0x64c>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	f7ef f862 	bl	80002bc <__adddf3>
 80111f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80111fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011200:	9303      	str	r3, [sp, #12]
 8011202:	2e00      	cmp	r6, #0
 8011204:	d158      	bne.n	80112b8 <_dtoa_r+0x4f8>
 8011206:	4b82      	ldr	r3, [pc, #520]	; (8011410 <_dtoa_r+0x650>)
 8011208:	2200      	movs	r2, #0
 801120a:	4640      	mov	r0, r8
 801120c:	4649      	mov	r1, r9
 801120e:	f7ef f853 	bl	80002b8 <__aeabi_dsub>
 8011212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011216:	4680      	mov	r8, r0
 8011218:	4689      	mov	r9, r1
 801121a:	f7ef fc95 	bl	8000b48 <__aeabi_dcmpgt>
 801121e:	2800      	cmp	r0, #0
 8011220:	f040 8296 	bne.w	8011750 <_dtoa_r+0x990>
 8011224:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011228:	4640      	mov	r0, r8
 801122a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801122e:	4649      	mov	r1, r9
 8011230:	f7ef fc6c 	bl	8000b0c <__aeabi_dcmplt>
 8011234:	2800      	cmp	r0, #0
 8011236:	f040 8289 	bne.w	801174c <_dtoa_r+0x98c>
 801123a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801123e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011240:	2b00      	cmp	r3, #0
 8011242:	f2c0 814e 	blt.w	80114e2 <_dtoa_r+0x722>
 8011246:	f1bb 0f0e 	cmp.w	fp, #14
 801124a:	f300 814a 	bgt.w	80114e2 <_dtoa_r+0x722>
 801124e:	4b6b      	ldr	r3, [pc, #428]	; (80113fc <_dtoa_r+0x63c>)
 8011250:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011254:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801125a:	2b00      	cmp	r3, #0
 801125c:	f280 80dc 	bge.w	8011418 <_dtoa_r+0x658>
 8011260:	9b04      	ldr	r3, [sp, #16]
 8011262:	2b00      	cmp	r3, #0
 8011264:	f300 80d8 	bgt.w	8011418 <_dtoa_r+0x658>
 8011268:	f040 826f 	bne.w	801174a <_dtoa_r+0x98a>
 801126c:	4b68      	ldr	r3, [pc, #416]	; (8011410 <_dtoa_r+0x650>)
 801126e:	2200      	movs	r2, #0
 8011270:	4640      	mov	r0, r8
 8011272:	4649      	mov	r1, r9
 8011274:	f7ef f9d8 	bl	8000628 <__aeabi_dmul>
 8011278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801127c:	f7ef fc5a 	bl	8000b34 <__aeabi_dcmpge>
 8011280:	9e04      	ldr	r6, [sp, #16]
 8011282:	4637      	mov	r7, r6
 8011284:	2800      	cmp	r0, #0
 8011286:	f040 8245 	bne.w	8011714 <_dtoa_r+0x954>
 801128a:	9d00      	ldr	r5, [sp, #0]
 801128c:	2331      	movs	r3, #49	; 0x31
 801128e:	f805 3b01 	strb.w	r3, [r5], #1
 8011292:	f10b 0b01 	add.w	fp, fp, #1
 8011296:	e241      	b.n	801171c <_dtoa_r+0x95c>
 8011298:	07f2      	lsls	r2, r6, #31
 801129a:	d505      	bpl.n	80112a8 <_dtoa_r+0x4e8>
 801129c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112a0:	f7ef f9c2 	bl	8000628 <__aeabi_dmul>
 80112a4:	3501      	adds	r5, #1
 80112a6:	2301      	movs	r3, #1
 80112a8:	1076      	asrs	r6, r6, #1
 80112aa:	3708      	adds	r7, #8
 80112ac:	e773      	b.n	8011196 <_dtoa_r+0x3d6>
 80112ae:	2502      	movs	r5, #2
 80112b0:	e775      	b.n	801119e <_dtoa_r+0x3de>
 80112b2:	9e04      	ldr	r6, [sp, #16]
 80112b4:	465f      	mov	r7, fp
 80112b6:	e792      	b.n	80111de <_dtoa_r+0x41e>
 80112b8:	9900      	ldr	r1, [sp, #0]
 80112ba:	4b50      	ldr	r3, [pc, #320]	; (80113fc <_dtoa_r+0x63c>)
 80112bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112c0:	4431      	add	r1, r6
 80112c2:	9102      	str	r1, [sp, #8]
 80112c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112c6:	eeb0 9a47 	vmov.f32	s18, s14
 80112ca:	eef0 9a67 	vmov.f32	s19, s15
 80112ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80112d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80112d6:	2900      	cmp	r1, #0
 80112d8:	d044      	beq.n	8011364 <_dtoa_r+0x5a4>
 80112da:	494e      	ldr	r1, [pc, #312]	; (8011414 <_dtoa_r+0x654>)
 80112dc:	2000      	movs	r0, #0
 80112de:	f7ef facd 	bl	800087c <__aeabi_ddiv>
 80112e2:	ec53 2b19 	vmov	r2, r3, d9
 80112e6:	f7ee ffe7 	bl	80002b8 <__aeabi_dsub>
 80112ea:	9d00      	ldr	r5, [sp, #0]
 80112ec:	ec41 0b19 	vmov	d9, r0, r1
 80112f0:	4649      	mov	r1, r9
 80112f2:	4640      	mov	r0, r8
 80112f4:	f7ef fc48 	bl	8000b88 <__aeabi_d2iz>
 80112f8:	4606      	mov	r6, r0
 80112fa:	f7ef f92b 	bl	8000554 <__aeabi_i2d>
 80112fe:	4602      	mov	r2, r0
 8011300:	460b      	mov	r3, r1
 8011302:	4640      	mov	r0, r8
 8011304:	4649      	mov	r1, r9
 8011306:	f7ee ffd7 	bl	80002b8 <__aeabi_dsub>
 801130a:	3630      	adds	r6, #48	; 0x30
 801130c:	f805 6b01 	strb.w	r6, [r5], #1
 8011310:	ec53 2b19 	vmov	r2, r3, d9
 8011314:	4680      	mov	r8, r0
 8011316:	4689      	mov	r9, r1
 8011318:	f7ef fbf8 	bl	8000b0c <__aeabi_dcmplt>
 801131c:	2800      	cmp	r0, #0
 801131e:	d164      	bne.n	80113ea <_dtoa_r+0x62a>
 8011320:	4642      	mov	r2, r8
 8011322:	464b      	mov	r3, r9
 8011324:	4937      	ldr	r1, [pc, #220]	; (8011404 <_dtoa_r+0x644>)
 8011326:	2000      	movs	r0, #0
 8011328:	f7ee ffc6 	bl	80002b8 <__aeabi_dsub>
 801132c:	ec53 2b19 	vmov	r2, r3, d9
 8011330:	f7ef fbec 	bl	8000b0c <__aeabi_dcmplt>
 8011334:	2800      	cmp	r0, #0
 8011336:	f040 80b6 	bne.w	80114a6 <_dtoa_r+0x6e6>
 801133a:	9b02      	ldr	r3, [sp, #8]
 801133c:	429d      	cmp	r5, r3
 801133e:	f43f af7c 	beq.w	801123a <_dtoa_r+0x47a>
 8011342:	4b31      	ldr	r3, [pc, #196]	; (8011408 <_dtoa_r+0x648>)
 8011344:	ec51 0b19 	vmov	r0, r1, d9
 8011348:	2200      	movs	r2, #0
 801134a:	f7ef f96d 	bl	8000628 <__aeabi_dmul>
 801134e:	4b2e      	ldr	r3, [pc, #184]	; (8011408 <_dtoa_r+0x648>)
 8011350:	ec41 0b19 	vmov	d9, r0, r1
 8011354:	2200      	movs	r2, #0
 8011356:	4640      	mov	r0, r8
 8011358:	4649      	mov	r1, r9
 801135a:	f7ef f965 	bl	8000628 <__aeabi_dmul>
 801135e:	4680      	mov	r8, r0
 8011360:	4689      	mov	r9, r1
 8011362:	e7c5      	b.n	80112f0 <_dtoa_r+0x530>
 8011364:	ec51 0b17 	vmov	r0, r1, d7
 8011368:	f7ef f95e 	bl	8000628 <__aeabi_dmul>
 801136c:	9b02      	ldr	r3, [sp, #8]
 801136e:	9d00      	ldr	r5, [sp, #0]
 8011370:	930f      	str	r3, [sp, #60]	; 0x3c
 8011372:	ec41 0b19 	vmov	d9, r0, r1
 8011376:	4649      	mov	r1, r9
 8011378:	4640      	mov	r0, r8
 801137a:	f7ef fc05 	bl	8000b88 <__aeabi_d2iz>
 801137e:	4606      	mov	r6, r0
 8011380:	f7ef f8e8 	bl	8000554 <__aeabi_i2d>
 8011384:	3630      	adds	r6, #48	; 0x30
 8011386:	4602      	mov	r2, r0
 8011388:	460b      	mov	r3, r1
 801138a:	4640      	mov	r0, r8
 801138c:	4649      	mov	r1, r9
 801138e:	f7ee ff93 	bl	80002b8 <__aeabi_dsub>
 8011392:	f805 6b01 	strb.w	r6, [r5], #1
 8011396:	9b02      	ldr	r3, [sp, #8]
 8011398:	429d      	cmp	r5, r3
 801139a:	4680      	mov	r8, r0
 801139c:	4689      	mov	r9, r1
 801139e:	f04f 0200 	mov.w	r2, #0
 80113a2:	d124      	bne.n	80113ee <_dtoa_r+0x62e>
 80113a4:	4b1b      	ldr	r3, [pc, #108]	; (8011414 <_dtoa_r+0x654>)
 80113a6:	ec51 0b19 	vmov	r0, r1, d9
 80113aa:	f7ee ff87 	bl	80002bc <__adddf3>
 80113ae:	4602      	mov	r2, r0
 80113b0:	460b      	mov	r3, r1
 80113b2:	4640      	mov	r0, r8
 80113b4:	4649      	mov	r1, r9
 80113b6:	f7ef fbc7 	bl	8000b48 <__aeabi_dcmpgt>
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d173      	bne.n	80114a6 <_dtoa_r+0x6e6>
 80113be:	ec53 2b19 	vmov	r2, r3, d9
 80113c2:	4914      	ldr	r1, [pc, #80]	; (8011414 <_dtoa_r+0x654>)
 80113c4:	2000      	movs	r0, #0
 80113c6:	f7ee ff77 	bl	80002b8 <__aeabi_dsub>
 80113ca:	4602      	mov	r2, r0
 80113cc:	460b      	mov	r3, r1
 80113ce:	4640      	mov	r0, r8
 80113d0:	4649      	mov	r1, r9
 80113d2:	f7ef fb9b 	bl	8000b0c <__aeabi_dcmplt>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	f43f af2f 	beq.w	801123a <_dtoa_r+0x47a>
 80113dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80113de:	1e6b      	subs	r3, r5, #1
 80113e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80113e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80113e6:	2b30      	cmp	r3, #48	; 0x30
 80113e8:	d0f8      	beq.n	80113dc <_dtoa_r+0x61c>
 80113ea:	46bb      	mov	fp, r7
 80113ec:	e04a      	b.n	8011484 <_dtoa_r+0x6c4>
 80113ee:	4b06      	ldr	r3, [pc, #24]	; (8011408 <_dtoa_r+0x648>)
 80113f0:	f7ef f91a 	bl	8000628 <__aeabi_dmul>
 80113f4:	4680      	mov	r8, r0
 80113f6:	4689      	mov	r9, r1
 80113f8:	e7bd      	b.n	8011376 <_dtoa_r+0x5b6>
 80113fa:	bf00      	nop
 80113fc:	080183e0 	.word	0x080183e0
 8011400:	080183b8 	.word	0x080183b8
 8011404:	3ff00000 	.word	0x3ff00000
 8011408:	40240000 	.word	0x40240000
 801140c:	401c0000 	.word	0x401c0000
 8011410:	40140000 	.word	0x40140000
 8011414:	3fe00000 	.word	0x3fe00000
 8011418:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801141c:	9d00      	ldr	r5, [sp, #0]
 801141e:	4642      	mov	r2, r8
 8011420:	464b      	mov	r3, r9
 8011422:	4630      	mov	r0, r6
 8011424:	4639      	mov	r1, r7
 8011426:	f7ef fa29 	bl	800087c <__aeabi_ddiv>
 801142a:	f7ef fbad 	bl	8000b88 <__aeabi_d2iz>
 801142e:	9001      	str	r0, [sp, #4]
 8011430:	f7ef f890 	bl	8000554 <__aeabi_i2d>
 8011434:	4642      	mov	r2, r8
 8011436:	464b      	mov	r3, r9
 8011438:	f7ef f8f6 	bl	8000628 <__aeabi_dmul>
 801143c:	4602      	mov	r2, r0
 801143e:	460b      	mov	r3, r1
 8011440:	4630      	mov	r0, r6
 8011442:	4639      	mov	r1, r7
 8011444:	f7ee ff38 	bl	80002b8 <__aeabi_dsub>
 8011448:	9e01      	ldr	r6, [sp, #4]
 801144a:	9f04      	ldr	r7, [sp, #16]
 801144c:	3630      	adds	r6, #48	; 0x30
 801144e:	f805 6b01 	strb.w	r6, [r5], #1
 8011452:	9e00      	ldr	r6, [sp, #0]
 8011454:	1bae      	subs	r6, r5, r6
 8011456:	42b7      	cmp	r7, r6
 8011458:	4602      	mov	r2, r0
 801145a:	460b      	mov	r3, r1
 801145c:	d134      	bne.n	80114c8 <_dtoa_r+0x708>
 801145e:	f7ee ff2d 	bl	80002bc <__adddf3>
 8011462:	4642      	mov	r2, r8
 8011464:	464b      	mov	r3, r9
 8011466:	4606      	mov	r6, r0
 8011468:	460f      	mov	r7, r1
 801146a:	f7ef fb6d 	bl	8000b48 <__aeabi_dcmpgt>
 801146e:	b9c8      	cbnz	r0, 80114a4 <_dtoa_r+0x6e4>
 8011470:	4642      	mov	r2, r8
 8011472:	464b      	mov	r3, r9
 8011474:	4630      	mov	r0, r6
 8011476:	4639      	mov	r1, r7
 8011478:	f7ef fb3e 	bl	8000af8 <__aeabi_dcmpeq>
 801147c:	b110      	cbz	r0, 8011484 <_dtoa_r+0x6c4>
 801147e:	9b01      	ldr	r3, [sp, #4]
 8011480:	07db      	lsls	r3, r3, #31
 8011482:	d40f      	bmi.n	80114a4 <_dtoa_r+0x6e4>
 8011484:	4651      	mov	r1, sl
 8011486:	4620      	mov	r0, r4
 8011488:	f000 fe62 	bl	8012150 <_Bfree>
 801148c:	2300      	movs	r3, #0
 801148e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011490:	702b      	strb	r3, [r5, #0]
 8011492:	f10b 0301 	add.w	r3, fp, #1
 8011496:	6013      	str	r3, [r2, #0]
 8011498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801149a:	2b00      	cmp	r3, #0
 801149c:	f43f ace2 	beq.w	8010e64 <_dtoa_r+0xa4>
 80114a0:	601d      	str	r5, [r3, #0]
 80114a2:	e4df      	b.n	8010e64 <_dtoa_r+0xa4>
 80114a4:	465f      	mov	r7, fp
 80114a6:	462b      	mov	r3, r5
 80114a8:	461d      	mov	r5, r3
 80114aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114ae:	2a39      	cmp	r2, #57	; 0x39
 80114b0:	d106      	bne.n	80114c0 <_dtoa_r+0x700>
 80114b2:	9a00      	ldr	r2, [sp, #0]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d1f7      	bne.n	80114a8 <_dtoa_r+0x6e8>
 80114b8:	9900      	ldr	r1, [sp, #0]
 80114ba:	2230      	movs	r2, #48	; 0x30
 80114bc:	3701      	adds	r7, #1
 80114be:	700a      	strb	r2, [r1, #0]
 80114c0:	781a      	ldrb	r2, [r3, #0]
 80114c2:	3201      	adds	r2, #1
 80114c4:	701a      	strb	r2, [r3, #0]
 80114c6:	e790      	b.n	80113ea <_dtoa_r+0x62a>
 80114c8:	4ba3      	ldr	r3, [pc, #652]	; (8011758 <_dtoa_r+0x998>)
 80114ca:	2200      	movs	r2, #0
 80114cc:	f7ef f8ac 	bl	8000628 <__aeabi_dmul>
 80114d0:	2200      	movs	r2, #0
 80114d2:	2300      	movs	r3, #0
 80114d4:	4606      	mov	r6, r0
 80114d6:	460f      	mov	r7, r1
 80114d8:	f7ef fb0e 	bl	8000af8 <__aeabi_dcmpeq>
 80114dc:	2800      	cmp	r0, #0
 80114de:	d09e      	beq.n	801141e <_dtoa_r+0x65e>
 80114e0:	e7d0      	b.n	8011484 <_dtoa_r+0x6c4>
 80114e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114e4:	2a00      	cmp	r2, #0
 80114e6:	f000 80ca 	beq.w	801167e <_dtoa_r+0x8be>
 80114ea:	9a07      	ldr	r2, [sp, #28]
 80114ec:	2a01      	cmp	r2, #1
 80114ee:	f300 80ad 	bgt.w	801164c <_dtoa_r+0x88c>
 80114f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114f4:	2a00      	cmp	r2, #0
 80114f6:	f000 80a5 	beq.w	8011644 <_dtoa_r+0x884>
 80114fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80114fe:	9e08      	ldr	r6, [sp, #32]
 8011500:	9d05      	ldr	r5, [sp, #20]
 8011502:	9a05      	ldr	r2, [sp, #20]
 8011504:	441a      	add	r2, r3
 8011506:	9205      	str	r2, [sp, #20]
 8011508:	9a06      	ldr	r2, [sp, #24]
 801150a:	2101      	movs	r1, #1
 801150c:	441a      	add	r2, r3
 801150e:	4620      	mov	r0, r4
 8011510:	9206      	str	r2, [sp, #24]
 8011512:	f000 fed3 	bl	80122bc <__i2b>
 8011516:	4607      	mov	r7, r0
 8011518:	b165      	cbz	r5, 8011534 <_dtoa_r+0x774>
 801151a:	9b06      	ldr	r3, [sp, #24]
 801151c:	2b00      	cmp	r3, #0
 801151e:	dd09      	ble.n	8011534 <_dtoa_r+0x774>
 8011520:	42ab      	cmp	r3, r5
 8011522:	9a05      	ldr	r2, [sp, #20]
 8011524:	bfa8      	it	ge
 8011526:	462b      	movge	r3, r5
 8011528:	1ad2      	subs	r2, r2, r3
 801152a:	9205      	str	r2, [sp, #20]
 801152c:	9a06      	ldr	r2, [sp, #24]
 801152e:	1aed      	subs	r5, r5, r3
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	9306      	str	r3, [sp, #24]
 8011534:	9b08      	ldr	r3, [sp, #32]
 8011536:	b1f3      	cbz	r3, 8011576 <_dtoa_r+0x7b6>
 8011538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801153a:	2b00      	cmp	r3, #0
 801153c:	f000 80a3 	beq.w	8011686 <_dtoa_r+0x8c6>
 8011540:	2e00      	cmp	r6, #0
 8011542:	dd10      	ble.n	8011566 <_dtoa_r+0x7a6>
 8011544:	4639      	mov	r1, r7
 8011546:	4632      	mov	r2, r6
 8011548:	4620      	mov	r0, r4
 801154a:	f000 ff77 	bl	801243c <__pow5mult>
 801154e:	4652      	mov	r2, sl
 8011550:	4601      	mov	r1, r0
 8011552:	4607      	mov	r7, r0
 8011554:	4620      	mov	r0, r4
 8011556:	f000 fec7 	bl	80122e8 <__multiply>
 801155a:	4651      	mov	r1, sl
 801155c:	4680      	mov	r8, r0
 801155e:	4620      	mov	r0, r4
 8011560:	f000 fdf6 	bl	8012150 <_Bfree>
 8011564:	46c2      	mov	sl, r8
 8011566:	9b08      	ldr	r3, [sp, #32]
 8011568:	1b9a      	subs	r2, r3, r6
 801156a:	d004      	beq.n	8011576 <_dtoa_r+0x7b6>
 801156c:	4651      	mov	r1, sl
 801156e:	4620      	mov	r0, r4
 8011570:	f000 ff64 	bl	801243c <__pow5mult>
 8011574:	4682      	mov	sl, r0
 8011576:	2101      	movs	r1, #1
 8011578:	4620      	mov	r0, r4
 801157a:	f000 fe9f 	bl	80122bc <__i2b>
 801157e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011580:	2b00      	cmp	r3, #0
 8011582:	4606      	mov	r6, r0
 8011584:	f340 8081 	ble.w	801168a <_dtoa_r+0x8ca>
 8011588:	461a      	mov	r2, r3
 801158a:	4601      	mov	r1, r0
 801158c:	4620      	mov	r0, r4
 801158e:	f000 ff55 	bl	801243c <__pow5mult>
 8011592:	9b07      	ldr	r3, [sp, #28]
 8011594:	2b01      	cmp	r3, #1
 8011596:	4606      	mov	r6, r0
 8011598:	dd7a      	ble.n	8011690 <_dtoa_r+0x8d0>
 801159a:	f04f 0800 	mov.w	r8, #0
 801159e:	6933      	ldr	r3, [r6, #16]
 80115a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80115a4:	6918      	ldr	r0, [r3, #16]
 80115a6:	f000 fe3b 	bl	8012220 <__hi0bits>
 80115aa:	f1c0 0020 	rsb	r0, r0, #32
 80115ae:	9b06      	ldr	r3, [sp, #24]
 80115b0:	4418      	add	r0, r3
 80115b2:	f010 001f 	ands.w	r0, r0, #31
 80115b6:	f000 8094 	beq.w	80116e2 <_dtoa_r+0x922>
 80115ba:	f1c0 0320 	rsb	r3, r0, #32
 80115be:	2b04      	cmp	r3, #4
 80115c0:	f340 8085 	ble.w	80116ce <_dtoa_r+0x90e>
 80115c4:	9b05      	ldr	r3, [sp, #20]
 80115c6:	f1c0 001c 	rsb	r0, r0, #28
 80115ca:	4403      	add	r3, r0
 80115cc:	9305      	str	r3, [sp, #20]
 80115ce:	9b06      	ldr	r3, [sp, #24]
 80115d0:	4403      	add	r3, r0
 80115d2:	4405      	add	r5, r0
 80115d4:	9306      	str	r3, [sp, #24]
 80115d6:	9b05      	ldr	r3, [sp, #20]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	dd05      	ble.n	80115e8 <_dtoa_r+0x828>
 80115dc:	4651      	mov	r1, sl
 80115de:	461a      	mov	r2, r3
 80115e0:	4620      	mov	r0, r4
 80115e2:	f000 ff85 	bl	80124f0 <__lshift>
 80115e6:	4682      	mov	sl, r0
 80115e8:	9b06      	ldr	r3, [sp, #24]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	dd05      	ble.n	80115fa <_dtoa_r+0x83a>
 80115ee:	4631      	mov	r1, r6
 80115f0:	461a      	mov	r2, r3
 80115f2:	4620      	mov	r0, r4
 80115f4:	f000 ff7c 	bl	80124f0 <__lshift>
 80115f8:	4606      	mov	r6, r0
 80115fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d072      	beq.n	80116e6 <_dtoa_r+0x926>
 8011600:	4631      	mov	r1, r6
 8011602:	4650      	mov	r0, sl
 8011604:	f000 ffe0 	bl	80125c8 <__mcmp>
 8011608:	2800      	cmp	r0, #0
 801160a:	da6c      	bge.n	80116e6 <_dtoa_r+0x926>
 801160c:	2300      	movs	r3, #0
 801160e:	4651      	mov	r1, sl
 8011610:	220a      	movs	r2, #10
 8011612:	4620      	mov	r0, r4
 8011614:	f000 fdbe 	bl	8012194 <__multadd>
 8011618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801161a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801161e:	4682      	mov	sl, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	f000 81b0 	beq.w	8011986 <_dtoa_r+0xbc6>
 8011626:	2300      	movs	r3, #0
 8011628:	4639      	mov	r1, r7
 801162a:	220a      	movs	r2, #10
 801162c:	4620      	mov	r0, r4
 801162e:	f000 fdb1 	bl	8012194 <__multadd>
 8011632:	9b01      	ldr	r3, [sp, #4]
 8011634:	2b00      	cmp	r3, #0
 8011636:	4607      	mov	r7, r0
 8011638:	f300 8096 	bgt.w	8011768 <_dtoa_r+0x9a8>
 801163c:	9b07      	ldr	r3, [sp, #28]
 801163e:	2b02      	cmp	r3, #2
 8011640:	dc59      	bgt.n	80116f6 <_dtoa_r+0x936>
 8011642:	e091      	b.n	8011768 <_dtoa_r+0x9a8>
 8011644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011646:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801164a:	e758      	b.n	80114fe <_dtoa_r+0x73e>
 801164c:	9b04      	ldr	r3, [sp, #16]
 801164e:	1e5e      	subs	r6, r3, #1
 8011650:	9b08      	ldr	r3, [sp, #32]
 8011652:	42b3      	cmp	r3, r6
 8011654:	bfbf      	itttt	lt
 8011656:	9b08      	ldrlt	r3, [sp, #32]
 8011658:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801165a:	9608      	strlt	r6, [sp, #32]
 801165c:	1af3      	sublt	r3, r6, r3
 801165e:	bfb4      	ite	lt
 8011660:	18d2      	addlt	r2, r2, r3
 8011662:	1b9e      	subge	r6, r3, r6
 8011664:	9b04      	ldr	r3, [sp, #16]
 8011666:	bfbc      	itt	lt
 8011668:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801166a:	2600      	movlt	r6, #0
 801166c:	2b00      	cmp	r3, #0
 801166e:	bfb7      	itett	lt
 8011670:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011674:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011678:	1a9d      	sublt	r5, r3, r2
 801167a:	2300      	movlt	r3, #0
 801167c:	e741      	b.n	8011502 <_dtoa_r+0x742>
 801167e:	9e08      	ldr	r6, [sp, #32]
 8011680:	9d05      	ldr	r5, [sp, #20]
 8011682:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011684:	e748      	b.n	8011518 <_dtoa_r+0x758>
 8011686:	9a08      	ldr	r2, [sp, #32]
 8011688:	e770      	b.n	801156c <_dtoa_r+0x7ac>
 801168a:	9b07      	ldr	r3, [sp, #28]
 801168c:	2b01      	cmp	r3, #1
 801168e:	dc19      	bgt.n	80116c4 <_dtoa_r+0x904>
 8011690:	9b02      	ldr	r3, [sp, #8]
 8011692:	b9bb      	cbnz	r3, 80116c4 <_dtoa_r+0x904>
 8011694:	9b03      	ldr	r3, [sp, #12]
 8011696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801169a:	b99b      	cbnz	r3, 80116c4 <_dtoa_r+0x904>
 801169c:	9b03      	ldr	r3, [sp, #12]
 801169e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80116a2:	0d1b      	lsrs	r3, r3, #20
 80116a4:	051b      	lsls	r3, r3, #20
 80116a6:	b183      	cbz	r3, 80116ca <_dtoa_r+0x90a>
 80116a8:	9b05      	ldr	r3, [sp, #20]
 80116aa:	3301      	adds	r3, #1
 80116ac:	9305      	str	r3, [sp, #20]
 80116ae:	9b06      	ldr	r3, [sp, #24]
 80116b0:	3301      	adds	r3, #1
 80116b2:	9306      	str	r3, [sp, #24]
 80116b4:	f04f 0801 	mov.w	r8, #1
 80116b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f47f af6f 	bne.w	801159e <_dtoa_r+0x7de>
 80116c0:	2001      	movs	r0, #1
 80116c2:	e774      	b.n	80115ae <_dtoa_r+0x7ee>
 80116c4:	f04f 0800 	mov.w	r8, #0
 80116c8:	e7f6      	b.n	80116b8 <_dtoa_r+0x8f8>
 80116ca:	4698      	mov	r8, r3
 80116cc:	e7f4      	b.n	80116b8 <_dtoa_r+0x8f8>
 80116ce:	d082      	beq.n	80115d6 <_dtoa_r+0x816>
 80116d0:	9a05      	ldr	r2, [sp, #20]
 80116d2:	331c      	adds	r3, #28
 80116d4:	441a      	add	r2, r3
 80116d6:	9205      	str	r2, [sp, #20]
 80116d8:	9a06      	ldr	r2, [sp, #24]
 80116da:	441a      	add	r2, r3
 80116dc:	441d      	add	r5, r3
 80116de:	9206      	str	r2, [sp, #24]
 80116e0:	e779      	b.n	80115d6 <_dtoa_r+0x816>
 80116e2:	4603      	mov	r3, r0
 80116e4:	e7f4      	b.n	80116d0 <_dtoa_r+0x910>
 80116e6:	9b04      	ldr	r3, [sp, #16]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	dc37      	bgt.n	801175c <_dtoa_r+0x99c>
 80116ec:	9b07      	ldr	r3, [sp, #28]
 80116ee:	2b02      	cmp	r3, #2
 80116f0:	dd34      	ble.n	801175c <_dtoa_r+0x99c>
 80116f2:	9b04      	ldr	r3, [sp, #16]
 80116f4:	9301      	str	r3, [sp, #4]
 80116f6:	9b01      	ldr	r3, [sp, #4]
 80116f8:	b963      	cbnz	r3, 8011714 <_dtoa_r+0x954>
 80116fa:	4631      	mov	r1, r6
 80116fc:	2205      	movs	r2, #5
 80116fe:	4620      	mov	r0, r4
 8011700:	f000 fd48 	bl	8012194 <__multadd>
 8011704:	4601      	mov	r1, r0
 8011706:	4606      	mov	r6, r0
 8011708:	4650      	mov	r0, sl
 801170a:	f000 ff5d 	bl	80125c8 <__mcmp>
 801170e:	2800      	cmp	r0, #0
 8011710:	f73f adbb 	bgt.w	801128a <_dtoa_r+0x4ca>
 8011714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011716:	9d00      	ldr	r5, [sp, #0]
 8011718:	ea6f 0b03 	mvn.w	fp, r3
 801171c:	f04f 0800 	mov.w	r8, #0
 8011720:	4631      	mov	r1, r6
 8011722:	4620      	mov	r0, r4
 8011724:	f000 fd14 	bl	8012150 <_Bfree>
 8011728:	2f00      	cmp	r7, #0
 801172a:	f43f aeab 	beq.w	8011484 <_dtoa_r+0x6c4>
 801172e:	f1b8 0f00 	cmp.w	r8, #0
 8011732:	d005      	beq.n	8011740 <_dtoa_r+0x980>
 8011734:	45b8      	cmp	r8, r7
 8011736:	d003      	beq.n	8011740 <_dtoa_r+0x980>
 8011738:	4641      	mov	r1, r8
 801173a:	4620      	mov	r0, r4
 801173c:	f000 fd08 	bl	8012150 <_Bfree>
 8011740:	4639      	mov	r1, r7
 8011742:	4620      	mov	r0, r4
 8011744:	f000 fd04 	bl	8012150 <_Bfree>
 8011748:	e69c      	b.n	8011484 <_dtoa_r+0x6c4>
 801174a:	2600      	movs	r6, #0
 801174c:	4637      	mov	r7, r6
 801174e:	e7e1      	b.n	8011714 <_dtoa_r+0x954>
 8011750:	46bb      	mov	fp, r7
 8011752:	4637      	mov	r7, r6
 8011754:	e599      	b.n	801128a <_dtoa_r+0x4ca>
 8011756:	bf00      	nop
 8011758:	40240000 	.word	0x40240000
 801175c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801175e:	2b00      	cmp	r3, #0
 8011760:	f000 80c8 	beq.w	80118f4 <_dtoa_r+0xb34>
 8011764:	9b04      	ldr	r3, [sp, #16]
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	2d00      	cmp	r5, #0
 801176a:	dd05      	ble.n	8011778 <_dtoa_r+0x9b8>
 801176c:	4639      	mov	r1, r7
 801176e:	462a      	mov	r2, r5
 8011770:	4620      	mov	r0, r4
 8011772:	f000 febd 	bl	80124f0 <__lshift>
 8011776:	4607      	mov	r7, r0
 8011778:	f1b8 0f00 	cmp.w	r8, #0
 801177c:	d05b      	beq.n	8011836 <_dtoa_r+0xa76>
 801177e:	6879      	ldr	r1, [r7, #4]
 8011780:	4620      	mov	r0, r4
 8011782:	f000 fca5 	bl	80120d0 <_Balloc>
 8011786:	4605      	mov	r5, r0
 8011788:	b928      	cbnz	r0, 8011796 <_dtoa_r+0x9d6>
 801178a:	4b83      	ldr	r3, [pc, #524]	; (8011998 <_dtoa_r+0xbd8>)
 801178c:	4602      	mov	r2, r0
 801178e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011792:	f7ff bb2e 	b.w	8010df2 <_dtoa_r+0x32>
 8011796:	693a      	ldr	r2, [r7, #16]
 8011798:	3202      	adds	r2, #2
 801179a:	0092      	lsls	r2, r2, #2
 801179c:	f107 010c 	add.w	r1, r7, #12
 80117a0:	300c      	adds	r0, #12
 80117a2:	f7ff fa76 	bl	8010c92 <memcpy>
 80117a6:	2201      	movs	r2, #1
 80117a8:	4629      	mov	r1, r5
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 fea0 	bl	80124f0 <__lshift>
 80117b0:	9b00      	ldr	r3, [sp, #0]
 80117b2:	3301      	adds	r3, #1
 80117b4:	9304      	str	r3, [sp, #16]
 80117b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117ba:	4413      	add	r3, r2
 80117bc:	9308      	str	r3, [sp, #32]
 80117be:	9b02      	ldr	r3, [sp, #8]
 80117c0:	f003 0301 	and.w	r3, r3, #1
 80117c4:	46b8      	mov	r8, r7
 80117c6:	9306      	str	r3, [sp, #24]
 80117c8:	4607      	mov	r7, r0
 80117ca:	9b04      	ldr	r3, [sp, #16]
 80117cc:	4631      	mov	r1, r6
 80117ce:	3b01      	subs	r3, #1
 80117d0:	4650      	mov	r0, sl
 80117d2:	9301      	str	r3, [sp, #4]
 80117d4:	f7ff fa6b 	bl	8010cae <quorem>
 80117d8:	4641      	mov	r1, r8
 80117da:	9002      	str	r0, [sp, #8]
 80117dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80117e0:	4650      	mov	r0, sl
 80117e2:	f000 fef1 	bl	80125c8 <__mcmp>
 80117e6:	463a      	mov	r2, r7
 80117e8:	9005      	str	r0, [sp, #20]
 80117ea:	4631      	mov	r1, r6
 80117ec:	4620      	mov	r0, r4
 80117ee:	f000 ff07 	bl	8012600 <__mdiff>
 80117f2:	68c2      	ldr	r2, [r0, #12]
 80117f4:	4605      	mov	r5, r0
 80117f6:	bb02      	cbnz	r2, 801183a <_dtoa_r+0xa7a>
 80117f8:	4601      	mov	r1, r0
 80117fa:	4650      	mov	r0, sl
 80117fc:	f000 fee4 	bl	80125c8 <__mcmp>
 8011800:	4602      	mov	r2, r0
 8011802:	4629      	mov	r1, r5
 8011804:	4620      	mov	r0, r4
 8011806:	9209      	str	r2, [sp, #36]	; 0x24
 8011808:	f000 fca2 	bl	8012150 <_Bfree>
 801180c:	9b07      	ldr	r3, [sp, #28]
 801180e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011810:	9d04      	ldr	r5, [sp, #16]
 8011812:	ea43 0102 	orr.w	r1, r3, r2
 8011816:	9b06      	ldr	r3, [sp, #24]
 8011818:	4319      	orrs	r1, r3
 801181a:	d110      	bne.n	801183e <_dtoa_r+0xa7e>
 801181c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011820:	d029      	beq.n	8011876 <_dtoa_r+0xab6>
 8011822:	9b05      	ldr	r3, [sp, #20]
 8011824:	2b00      	cmp	r3, #0
 8011826:	dd02      	ble.n	801182e <_dtoa_r+0xa6e>
 8011828:	9b02      	ldr	r3, [sp, #8]
 801182a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801182e:	9b01      	ldr	r3, [sp, #4]
 8011830:	f883 9000 	strb.w	r9, [r3]
 8011834:	e774      	b.n	8011720 <_dtoa_r+0x960>
 8011836:	4638      	mov	r0, r7
 8011838:	e7ba      	b.n	80117b0 <_dtoa_r+0x9f0>
 801183a:	2201      	movs	r2, #1
 801183c:	e7e1      	b.n	8011802 <_dtoa_r+0xa42>
 801183e:	9b05      	ldr	r3, [sp, #20]
 8011840:	2b00      	cmp	r3, #0
 8011842:	db04      	blt.n	801184e <_dtoa_r+0xa8e>
 8011844:	9907      	ldr	r1, [sp, #28]
 8011846:	430b      	orrs	r3, r1
 8011848:	9906      	ldr	r1, [sp, #24]
 801184a:	430b      	orrs	r3, r1
 801184c:	d120      	bne.n	8011890 <_dtoa_r+0xad0>
 801184e:	2a00      	cmp	r2, #0
 8011850:	dded      	ble.n	801182e <_dtoa_r+0xa6e>
 8011852:	4651      	mov	r1, sl
 8011854:	2201      	movs	r2, #1
 8011856:	4620      	mov	r0, r4
 8011858:	f000 fe4a 	bl	80124f0 <__lshift>
 801185c:	4631      	mov	r1, r6
 801185e:	4682      	mov	sl, r0
 8011860:	f000 feb2 	bl	80125c8 <__mcmp>
 8011864:	2800      	cmp	r0, #0
 8011866:	dc03      	bgt.n	8011870 <_dtoa_r+0xab0>
 8011868:	d1e1      	bne.n	801182e <_dtoa_r+0xa6e>
 801186a:	f019 0f01 	tst.w	r9, #1
 801186e:	d0de      	beq.n	801182e <_dtoa_r+0xa6e>
 8011870:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011874:	d1d8      	bne.n	8011828 <_dtoa_r+0xa68>
 8011876:	9a01      	ldr	r2, [sp, #4]
 8011878:	2339      	movs	r3, #57	; 0x39
 801187a:	7013      	strb	r3, [r2, #0]
 801187c:	462b      	mov	r3, r5
 801187e:	461d      	mov	r5, r3
 8011880:	3b01      	subs	r3, #1
 8011882:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011886:	2a39      	cmp	r2, #57	; 0x39
 8011888:	d06c      	beq.n	8011964 <_dtoa_r+0xba4>
 801188a:	3201      	adds	r2, #1
 801188c:	701a      	strb	r2, [r3, #0]
 801188e:	e747      	b.n	8011720 <_dtoa_r+0x960>
 8011890:	2a00      	cmp	r2, #0
 8011892:	dd07      	ble.n	80118a4 <_dtoa_r+0xae4>
 8011894:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011898:	d0ed      	beq.n	8011876 <_dtoa_r+0xab6>
 801189a:	9a01      	ldr	r2, [sp, #4]
 801189c:	f109 0301 	add.w	r3, r9, #1
 80118a0:	7013      	strb	r3, [r2, #0]
 80118a2:	e73d      	b.n	8011720 <_dtoa_r+0x960>
 80118a4:	9b04      	ldr	r3, [sp, #16]
 80118a6:	9a08      	ldr	r2, [sp, #32]
 80118a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d043      	beq.n	8011938 <_dtoa_r+0xb78>
 80118b0:	4651      	mov	r1, sl
 80118b2:	2300      	movs	r3, #0
 80118b4:	220a      	movs	r2, #10
 80118b6:	4620      	mov	r0, r4
 80118b8:	f000 fc6c 	bl	8012194 <__multadd>
 80118bc:	45b8      	cmp	r8, r7
 80118be:	4682      	mov	sl, r0
 80118c0:	f04f 0300 	mov.w	r3, #0
 80118c4:	f04f 020a 	mov.w	r2, #10
 80118c8:	4641      	mov	r1, r8
 80118ca:	4620      	mov	r0, r4
 80118cc:	d107      	bne.n	80118de <_dtoa_r+0xb1e>
 80118ce:	f000 fc61 	bl	8012194 <__multadd>
 80118d2:	4680      	mov	r8, r0
 80118d4:	4607      	mov	r7, r0
 80118d6:	9b04      	ldr	r3, [sp, #16]
 80118d8:	3301      	adds	r3, #1
 80118da:	9304      	str	r3, [sp, #16]
 80118dc:	e775      	b.n	80117ca <_dtoa_r+0xa0a>
 80118de:	f000 fc59 	bl	8012194 <__multadd>
 80118e2:	4639      	mov	r1, r7
 80118e4:	4680      	mov	r8, r0
 80118e6:	2300      	movs	r3, #0
 80118e8:	220a      	movs	r2, #10
 80118ea:	4620      	mov	r0, r4
 80118ec:	f000 fc52 	bl	8012194 <__multadd>
 80118f0:	4607      	mov	r7, r0
 80118f2:	e7f0      	b.n	80118d6 <_dtoa_r+0xb16>
 80118f4:	9b04      	ldr	r3, [sp, #16]
 80118f6:	9301      	str	r3, [sp, #4]
 80118f8:	9d00      	ldr	r5, [sp, #0]
 80118fa:	4631      	mov	r1, r6
 80118fc:	4650      	mov	r0, sl
 80118fe:	f7ff f9d6 	bl	8010cae <quorem>
 8011902:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011906:	9b00      	ldr	r3, [sp, #0]
 8011908:	f805 9b01 	strb.w	r9, [r5], #1
 801190c:	1aea      	subs	r2, r5, r3
 801190e:	9b01      	ldr	r3, [sp, #4]
 8011910:	4293      	cmp	r3, r2
 8011912:	dd07      	ble.n	8011924 <_dtoa_r+0xb64>
 8011914:	4651      	mov	r1, sl
 8011916:	2300      	movs	r3, #0
 8011918:	220a      	movs	r2, #10
 801191a:	4620      	mov	r0, r4
 801191c:	f000 fc3a 	bl	8012194 <__multadd>
 8011920:	4682      	mov	sl, r0
 8011922:	e7ea      	b.n	80118fa <_dtoa_r+0xb3a>
 8011924:	9b01      	ldr	r3, [sp, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	bfc8      	it	gt
 801192a:	461d      	movgt	r5, r3
 801192c:	9b00      	ldr	r3, [sp, #0]
 801192e:	bfd8      	it	le
 8011930:	2501      	movle	r5, #1
 8011932:	441d      	add	r5, r3
 8011934:	f04f 0800 	mov.w	r8, #0
 8011938:	4651      	mov	r1, sl
 801193a:	2201      	movs	r2, #1
 801193c:	4620      	mov	r0, r4
 801193e:	f000 fdd7 	bl	80124f0 <__lshift>
 8011942:	4631      	mov	r1, r6
 8011944:	4682      	mov	sl, r0
 8011946:	f000 fe3f 	bl	80125c8 <__mcmp>
 801194a:	2800      	cmp	r0, #0
 801194c:	dc96      	bgt.n	801187c <_dtoa_r+0xabc>
 801194e:	d102      	bne.n	8011956 <_dtoa_r+0xb96>
 8011950:	f019 0f01 	tst.w	r9, #1
 8011954:	d192      	bne.n	801187c <_dtoa_r+0xabc>
 8011956:	462b      	mov	r3, r5
 8011958:	461d      	mov	r5, r3
 801195a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801195e:	2a30      	cmp	r2, #48	; 0x30
 8011960:	d0fa      	beq.n	8011958 <_dtoa_r+0xb98>
 8011962:	e6dd      	b.n	8011720 <_dtoa_r+0x960>
 8011964:	9a00      	ldr	r2, [sp, #0]
 8011966:	429a      	cmp	r2, r3
 8011968:	d189      	bne.n	801187e <_dtoa_r+0xabe>
 801196a:	f10b 0b01 	add.w	fp, fp, #1
 801196e:	2331      	movs	r3, #49	; 0x31
 8011970:	e796      	b.n	80118a0 <_dtoa_r+0xae0>
 8011972:	4b0a      	ldr	r3, [pc, #40]	; (801199c <_dtoa_r+0xbdc>)
 8011974:	f7ff ba99 	b.w	8010eaa <_dtoa_r+0xea>
 8011978:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801197a:	2b00      	cmp	r3, #0
 801197c:	f47f aa6d 	bne.w	8010e5a <_dtoa_r+0x9a>
 8011980:	4b07      	ldr	r3, [pc, #28]	; (80119a0 <_dtoa_r+0xbe0>)
 8011982:	f7ff ba92 	b.w	8010eaa <_dtoa_r+0xea>
 8011986:	9b01      	ldr	r3, [sp, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	dcb5      	bgt.n	80118f8 <_dtoa_r+0xb38>
 801198c:	9b07      	ldr	r3, [sp, #28]
 801198e:	2b02      	cmp	r3, #2
 8011990:	f73f aeb1 	bgt.w	80116f6 <_dtoa_r+0x936>
 8011994:	e7b0      	b.n	80118f8 <_dtoa_r+0xb38>
 8011996:	bf00      	nop
 8011998:	08018338 	.word	0x08018338
 801199c:	08018298 	.word	0x08018298
 80119a0:	080182bc 	.word	0x080182bc

080119a4 <_free_r>:
 80119a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119a6:	2900      	cmp	r1, #0
 80119a8:	d044      	beq.n	8011a34 <_free_r+0x90>
 80119aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119ae:	9001      	str	r0, [sp, #4]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f1a1 0404 	sub.w	r4, r1, #4
 80119b6:	bfb8      	it	lt
 80119b8:	18e4      	addlt	r4, r4, r3
 80119ba:	f7ff f853 	bl	8010a64 <__malloc_lock>
 80119be:	4a1e      	ldr	r2, [pc, #120]	; (8011a38 <_free_r+0x94>)
 80119c0:	9801      	ldr	r0, [sp, #4]
 80119c2:	6813      	ldr	r3, [r2, #0]
 80119c4:	b933      	cbnz	r3, 80119d4 <_free_r+0x30>
 80119c6:	6063      	str	r3, [r4, #4]
 80119c8:	6014      	str	r4, [r2, #0]
 80119ca:	b003      	add	sp, #12
 80119cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119d0:	f7ff b84e 	b.w	8010a70 <__malloc_unlock>
 80119d4:	42a3      	cmp	r3, r4
 80119d6:	d908      	bls.n	80119ea <_free_r+0x46>
 80119d8:	6825      	ldr	r5, [r4, #0]
 80119da:	1961      	adds	r1, r4, r5
 80119dc:	428b      	cmp	r3, r1
 80119de:	bf01      	itttt	eq
 80119e0:	6819      	ldreq	r1, [r3, #0]
 80119e2:	685b      	ldreq	r3, [r3, #4]
 80119e4:	1949      	addeq	r1, r1, r5
 80119e6:	6021      	streq	r1, [r4, #0]
 80119e8:	e7ed      	b.n	80119c6 <_free_r+0x22>
 80119ea:	461a      	mov	r2, r3
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	b10b      	cbz	r3, 80119f4 <_free_r+0x50>
 80119f0:	42a3      	cmp	r3, r4
 80119f2:	d9fa      	bls.n	80119ea <_free_r+0x46>
 80119f4:	6811      	ldr	r1, [r2, #0]
 80119f6:	1855      	adds	r5, r2, r1
 80119f8:	42a5      	cmp	r5, r4
 80119fa:	d10b      	bne.n	8011a14 <_free_r+0x70>
 80119fc:	6824      	ldr	r4, [r4, #0]
 80119fe:	4421      	add	r1, r4
 8011a00:	1854      	adds	r4, r2, r1
 8011a02:	42a3      	cmp	r3, r4
 8011a04:	6011      	str	r1, [r2, #0]
 8011a06:	d1e0      	bne.n	80119ca <_free_r+0x26>
 8011a08:	681c      	ldr	r4, [r3, #0]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	6053      	str	r3, [r2, #4]
 8011a0e:	440c      	add	r4, r1
 8011a10:	6014      	str	r4, [r2, #0]
 8011a12:	e7da      	b.n	80119ca <_free_r+0x26>
 8011a14:	d902      	bls.n	8011a1c <_free_r+0x78>
 8011a16:	230c      	movs	r3, #12
 8011a18:	6003      	str	r3, [r0, #0]
 8011a1a:	e7d6      	b.n	80119ca <_free_r+0x26>
 8011a1c:	6825      	ldr	r5, [r4, #0]
 8011a1e:	1961      	adds	r1, r4, r5
 8011a20:	428b      	cmp	r3, r1
 8011a22:	bf04      	itt	eq
 8011a24:	6819      	ldreq	r1, [r3, #0]
 8011a26:	685b      	ldreq	r3, [r3, #4]
 8011a28:	6063      	str	r3, [r4, #4]
 8011a2a:	bf04      	itt	eq
 8011a2c:	1949      	addeq	r1, r1, r5
 8011a2e:	6021      	streq	r1, [r4, #0]
 8011a30:	6054      	str	r4, [r2, #4]
 8011a32:	e7ca      	b.n	80119ca <_free_r+0x26>
 8011a34:	b003      	add	sp, #12
 8011a36:	bd30      	pop	{r4, r5, pc}
 8011a38:	20000b1c 	.word	0x20000b1c

08011a3c <__ssputs_r>:
 8011a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a40:	688e      	ldr	r6, [r1, #8]
 8011a42:	461f      	mov	r7, r3
 8011a44:	42be      	cmp	r6, r7
 8011a46:	680b      	ldr	r3, [r1, #0]
 8011a48:	4682      	mov	sl, r0
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	4690      	mov	r8, r2
 8011a4e:	d82c      	bhi.n	8011aaa <__ssputs_r+0x6e>
 8011a50:	898a      	ldrh	r2, [r1, #12]
 8011a52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011a56:	d026      	beq.n	8011aa6 <__ssputs_r+0x6a>
 8011a58:	6965      	ldr	r5, [r4, #20]
 8011a5a:	6909      	ldr	r1, [r1, #16]
 8011a5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a60:	eba3 0901 	sub.w	r9, r3, r1
 8011a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a68:	1c7b      	adds	r3, r7, #1
 8011a6a:	444b      	add	r3, r9
 8011a6c:	106d      	asrs	r5, r5, #1
 8011a6e:	429d      	cmp	r5, r3
 8011a70:	bf38      	it	cc
 8011a72:	461d      	movcc	r5, r3
 8011a74:	0553      	lsls	r3, r2, #21
 8011a76:	d527      	bpl.n	8011ac8 <__ssputs_r+0x8c>
 8011a78:	4629      	mov	r1, r5
 8011a7a:	f7fe fdaf 	bl	80105dc <_malloc_r>
 8011a7e:	4606      	mov	r6, r0
 8011a80:	b360      	cbz	r0, 8011adc <__ssputs_r+0xa0>
 8011a82:	6921      	ldr	r1, [r4, #16]
 8011a84:	464a      	mov	r2, r9
 8011a86:	f7ff f904 	bl	8010c92 <memcpy>
 8011a8a:	89a3      	ldrh	r3, [r4, #12]
 8011a8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a94:	81a3      	strh	r3, [r4, #12]
 8011a96:	6126      	str	r6, [r4, #16]
 8011a98:	6165      	str	r5, [r4, #20]
 8011a9a:	444e      	add	r6, r9
 8011a9c:	eba5 0509 	sub.w	r5, r5, r9
 8011aa0:	6026      	str	r6, [r4, #0]
 8011aa2:	60a5      	str	r5, [r4, #8]
 8011aa4:	463e      	mov	r6, r7
 8011aa6:	42be      	cmp	r6, r7
 8011aa8:	d900      	bls.n	8011aac <__ssputs_r+0x70>
 8011aaa:	463e      	mov	r6, r7
 8011aac:	6820      	ldr	r0, [r4, #0]
 8011aae:	4632      	mov	r2, r6
 8011ab0:	4641      	mov	r1, r8
 8011ab2:	f000 fff3 	bl	8012a9c <memmove>
 8011ab6:	68a3      	ldr	r3, [r4, #8]
 8011ab8:	1b9b      	subs	r3, r3, r6
 8011aba:	60a3      	str	r3, [r4, #8]
 8011abc:	6823      	ldr	r3, [r4, #0]
 8011abe:	4433      	add	r3, r6
 8011ac0:	6023      	str	r3, [r4, #0]
 8011ac2:	2000      	movs	r0, #0
 8011ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ac8:	462a      	mov	r2, r5
 8011aca:	f000 fec0 	bl	801284e <_realloc_r>
 8011ace:	4606      	mov	r6, r0
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d1e0      	bne.n	8011a96 <__ssputs_r+0x5a>
 8011ad4:	6921      	ldr	r1, [r4, #16]
 8011ad6:	4650      	mov	r0, sl
 8011ad8:	f7ff ff64 	bl	80119a4 <_free_r>
 8011adc:	230c      	movs	r3, #12
 8011ade:	f8ca 3000 	str.w	r3, [sl]
 8011ae2:	89a3      	ldrh	r3, [r4, #12]
 8011ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ae8:	81a3      	strh	r3, [r4, #12]
 8011aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011aee:	e7e9      	b.n	8011ac4 <__ssputs_r+0x88>

08011af0 <_svfiprintf_r>:
 8011af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af4:	4698      	mov	r8, r3
 8011af6:	898b      	ldrh	r3, [r1, #12]
 8011af8:	061b      	lsls	r3, r3, #24
 8011afa:	b09d      	sub	sp, #116	; 0x74
 8011afc:	4607      	mov	r7, r0
 8011afe:	460d      	mov	r5, r1
 8011b00:	4614      	mov	r4, r2
 8011b02:	d50e      	bpl.n	8011b22 <_svfiprintf_r+0x32>
 8011b04:	690b      	ldr	r3, [r1, #16]
 8011b06:	b963      	cbnz	r3, 8011b22 <_svfiprintf_r+0x32>
 8011b08:	2140      	movs	r1, #64	; 0x40
 8011b0a:	f7fe fd67 	bl	80105dc <_malloc_r>
 8011b0e:	6028      	str	r0, [r5, #0]
 8011b10:	6128      	str	r0, [r5, #16]
 8011b12:	b920      	cbnz	r0, 8011b1e <_svfiprintf_r+0x2e>
 8011b14:	230c      	movs	r3, #12
 8011b16:	603b      	str	r3, [r7, #0]
 8011b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b1c:	e0d0      	b.n	8011cc0 <_svfiprintf_r+0x1d0>
 8011b1e:	2340      	movs	r3, #64	; 0x40
 8011b20:	616b      	str	r3, [r5, #20]
 8011b22:	2300      	movs	r3, #0
 8011b24:	9309      	str	r3, [sp, #36]	; 0x24
 8011b26:	2320      	movs	r3, #32
 8011b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b30:	2330      	movs	r3, #48	; 0x30
 8011b32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011cd8 <_svfiprintf_r+0x1e8>
 8011b36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b3a:	f04f 0901 	mov.w	r9, #1
 8011b3e:	4623      	mov	r3, r4
 8011b40:	469a      	mov	sl, r3
 8011b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b46:	b10a      	cbz	r2, 8011b4c <_svfiprintf_r+0x5c>
 8011b48:	2a25      	cmp	r2, #37	; 0x25
 8011b4a:	d1f9      	bne.n	8011b40 <_svfiprintf_r+0x50>
 8011b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8011b50:	d00b      	beq.n	8011b6a <_svfiprintf_r+0x7a>
 8011b52:	465b      	mov	r3, fp
 8011b54:	4622      	mov	r2, r4
 8011b56:	4629      	mov	r1, r5
 8011b58:	4638      	mov	r0, r7
 8011b5a:	f7ff ff6f 	bl	8011a3c <__ssputs_r>
 8011b5e:	3001      	adds	r0, #1
 8011b60:	f000 80a9 	beq.w	8011cb6 <_svfiprintf_r+0x1c6>
 8011b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b66:	445a      	add	r2, fp
 8011b68:	9209      	str	r2, [sp, #36]	; 0x24
 8011b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	f000 80a1 	beq.w	8011cb6 <_svfiprintf_r+0x1c6>
 8011b74:	2300      	movs	r3, #0
 8011b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b7e:	f10a 0a01 	add.w	sl, sl, #1
 8011b82:	9304      	str	r3, [sp, #16]
 8011b84:	9307      	str	r3, [sp, #28]
 8011b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8011b8c:	4654      	mov	r4, sl
 8011b8e:	2205      	movs	r2, #5
 8011b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b94:	4850      	ldr	r0, [pc, #320]	; (8011cd8 <_svfiprintf_r+0x1e8>)
 8011b96:	f7ee fb33 	bl	8000200 <memchr>
 8011b9a:	9a04      	ldr	r2, [sp, #16]
 8011b9c:	b9d8      	cbnz	r0, 8011bd6 <_svfiprintf_r+0xe6>
 8011b9e:	06d0      	lsls	r0, r2, #27
 8011ba0:	bf44      	itt	mi
 8011ba2:	2320      	movmi	r3, #32
 8011ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ba8:	0711      	lsls	r1, r2, #28
 8011baa:	bf44      	itt	mi
 8011bac:	232b      	movmi	r3, #43	; 0x2b
 8011bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8011bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8011bb8:	d015      	beq.n	8011be6 <_svfiprintf_r+0xf6>
 8011bba:	9a07      	ldr	r2, [sp, #28]
 8011bbc:	4654      	mov	r4, sl
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	f04f 0c0a 	mov.w	ip, #10
 8011bc4:	4621      	mov	r1, r4
 8011bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bca:	3b30      	subs	r3, #48	; 0x30
 8011bcc:	2b09      	cmp	r3, #9
 8011bce:	d94d      	bls.n	8011c6c <_svfiprintf_r+0x17c>
 8011bd0:	b1b0      	cbz	r0, 8011c00 <_svfiprintf_r+0x110>
 8011bd2:	9207      	str	r2, [sp, #28]
 8011bd4:	e014      	b.n	8011c00 <_svfiprintf_r+0x110>
 8011bd6:	eba0 0308 	sub.w	r3, r0, r8
 8011bda:	fa09 f303 	lsl.w	r3, r9, r3
 8011bde:	4313      	orrs	r3, r2
 8011be0:	9304      	str	r3, [sp, #16]
 8011be2:	46a2      	mov	sl, r4
 8011be4:	e7d2      	b.n	8011b8c <_svfiprintf_r+0x9c>
 8011be6:	9b03      	ldr	r3, [sp, #12]
 8011be8:	1d19      	adds	r1, r3, #4
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	9103      	str	r1, [sp, #12]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	bfbb      	ittet	lt
 8011bf2:	425b      	neglt	r3, r3
 8011bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8011bf8:	9307      	strge	r3, [sp, #28]
 8011bfa:	9307      	strlt	r3, [sp, #28]
 8011bfc:	bfb8      	it	lt
 8011bfe:	9204      	strlt	r2, [sp, #16]
 8011c00:	7823      	ldrb	r3, [r4, #0]
 8011c02:	2b2e      	cmp	r3, #46	; 0x2e
 8011c04:	d10c      	bne.n	8011c20 <_svfiprintf_r+0x130>
 8011c06:	7863      	ldrb	r3, [r4, #1]
 8011c08:	2b2a      	cmp	r3, #42	; 0x2a
 8011c0a:	d134      	bne.n	8011c76 <_svfiprintf_r+0x186>
 8011c0c:	9b03      	ldr	r3, [sp, #12]
 8011c0e:	1d1a      	adds	r2, r3, #4
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	9203      	str	r2, [sp, #12]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	bfb8      	it	lt
 8011c18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011c1c:	3402      	adds	r4, #2
 8011c1e:	9305      	str	r3, [sp, #20]
 8011c20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011ce8 <_svfiprintf_r+0x1f8>
 8011c24:	7821      	ldrb	r1, [r4, #0]
 8011c26:	2203      	movs	r2, #3
 8011c28:	4650      	mov	r0, sl
 8011c2a:	f7ee fae9 	bl	8000200 <memchr>
 8011c2e:	b138      	cbz	r0, 8011c40 <_svfiprintf_r+0x150>
 8011c30:	9b04      	ldr	r3, [sp, #16]
 8011c32:	eba0 000a 	sub.w	r0, r0, sl
 8011c36:	2240      	movs	r2, #64	; 0x40
 8011c38:	4082      	lsls	r2, r0
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	3401      	adds	r4, #1
 8011c3e:	9304      	str	r3, [sp, #16]
 8011c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c44:	4825      	ldr	r0, [pc, #148]	; (8011cdc <_svfiprintf_r+0x1ec>)
 8011c46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c4a:	2206      	movs	r2, #6
 8011c4c:	f7ee fad8 	bl	8000200 <memchr>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d038      	beq.n	8011cc6 <_svfiprintf_r+0x1d6>
 8011c54:	4b22      	ldr	r3, [pc, #136]	; (8011ce0 <_svfiprintf_r+0x1f0>)
 8011c56:	bb1b      	cbnz	r3, 8011ca0 <_svfiprintf_r+0x1b0>
 8011c58:	9b03      	ldr	r3, [sp, #12]
 8011c5a:	3307      	adds	r3, #7
 8011c5c:	f023 0307 	bic.w	r3, r3, #7
 8011c60:	3308      	adds	r3, #8
 8011c62:	9303      	str	r3, [sp, #12]
 8011c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c66:	4433      	add	r3, r6
 8011c68:	9309      	str	r3, [sp, #36]	; 0x24
 8011c6a:	e768      	b.n	8011b3e <_svfiprintf_r+0x4e>
 8011c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c70:	460c      	mov	r4, r1
 8011c72:	2001      	movs	r0, #1
 8011c74:	e7a6      	b.n	8011bc4 <_svfiprintf_r+0xd4>
 8011c76:	2300      	movs	r3, #0
 8011c78:	3401      	adds	r4, #1
 8011c7a:	9305      	str	r3, [sp, #20]
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	f04f 0c0a 	mov.w	ip, #10
 8011c82:	4620      	mov	r0, r4
 8011c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c88:	3a30      	subs	r2, #48	; 0x30
 8011c8a:	2a09      	cmp	r2, #9
 8011c8c:	d903      	bls.n	8011c96 <_svfiprintf_r+0x1a6>
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d0c6      	beq.n	8011c20 <_svfiprintf_r+0x130>
 8011c92:	9105      	str	r1, [sp, #20]
 8011c94:	e7c4      	b.n	8011c20 <_svfiprintf_r+0x130>
 8011c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	e7f0      	b.n	8011c82 <_svfiprintf_r+0x192>
 8011ca0:	ab03      	add	r3, sp, #12
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	462a      	mov	r2, r5
 8011ca6:	4b0f      	ldr	r3, [pc, #60]	; (8011ce4 <_svfiprintf_r+0x1f4>)
 8011ca8:	a904      	add	r1, sp, #16
 8011caa:	4638      	mov	r0, r7
 8011cac:	f7fe fa38 	bl	8010120 <_printf_float>
 8011cb0:	1c42      	adds	r2, r0, #1
 8011cb2:	4606      	mov	r6, r0
 8011cb4:	d1d6      	bne.n	8011c64 <_svfiprintf_r+0x174>
 8011cb6:	89ab      	ldrh	r3, [r5, #12]
 8011cb8:	065b      	lsls	r3, r3, #25
 8011cba:	f53f af2d 	bmi.w	8011b18 <_svfiprintf_r+0x28>
 8011cbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cc0:	b01d      	add	sp, #116	; 0x74
 8011cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc6:	ab03      	add	r3, sp, #12
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	462a      	mov	r2, r5
 8011ccc:	4b05      	ldr	r3, [pc, #20]	; (8011ce4 <_svfiprintf_r+0x1f4>)
 8011cce:	a904      	add	r1, sp, #16
 8011cd0:	4638      	mov	r0, r7
 8011cd2:	f7fe fd71 	bl	80107b8 <_printf_i>
 8011cd6:	e7eb      	b.n	8011cb0 <_svfiprintf_r+0x1c0>
 8011cd8:	08018349 	.word	0x08018349
 8011cdc:	08018353 	.word	0x08018353
 8011ce0:	08010121 	.word	0x08010121
 8011ce4:	08011a3d 	.word	0x08011a3d
 8011ce8:	0801834f 	.word	0x0801834f

08011cec <__sfputc_r>:
 8011cec:	6893      	ldr	r3, [r2, #8]
 8011cee:	3b01      	subs	r3, #1
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	b410      	push	{r4}
 8011cf4:	6093      	str	r3, [r2, #8]
 8011cf6:	da08      	bge.n	8011d0a <__sfputc_r+0x1e>
 8011cf8:	6994      	ldr	r4, [r2, #24]
 8011cfa:	42a3      	cmp	r3, r4
 8011cfc:	db01      	blt.n	8011d02 <__sfputc_r+0x16>
 8011cfe:	290a      	cmp	r1, #10
 8011d00:	d103      	bne.n	8011d0a <__sfputc_r+0x1e>
 8011d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d06:	f000 bdd1 	b.w	80128ac <__swbuf_r>
 8011d0a:	6813      	ldr	r3, [r2, #0]
 8011d0c:	1c58      	adds	r0, r3, #1
 8011d0e:	6010      	str	r0, [r2, #0]
 8011d10:	7019      	strb	r1, [r3, #0]
 8011d12:	4608      	mov	r0, r1
 8011d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d18:	4770      	bx	lr

08011d1a <__sfputs_r>:
 8011d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	460f      	mov	r7, r1
 8011d20:	4614      	mov	r4, r2
 8011d22:	18d5      	adds	r5, r2, r3
 8011d24:	42ac      	cmp	r4, r5
 8011d26:	d101      	bne.n	8011d2c <__sfputs_r+0x12>
 8011d28:	2000      	movs	r0, #0
 8011d2a:	e007      	b.n	8011d3c <__sfputs_r+0x22>
 8011d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d30:	463a      	mov	r2, r7
 8011d32:	4630      	mov	r0, r6
 8011d34:	f7ff ffda 	bl	8011cec <__sfputc_r>
 8011d38:	1c43      	adds	r3, r0, #1
 8011d3a:	d1f3      	bne.n	8011d24 <__sfputs_r+0xa>
 8011d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d40 <_vfiprintf_r>:
 8011d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d44:	460d      	mov	r5, r1
 8011d46:	b09d      	sub	sp, #116	; 0x74
 8011d48:	4614      	mov	r4, r2
 8011d4a:	4698      	mov	r8, r3
 8011d4c:	4606      	mov	r6, r0
 8011d4e:	b118      	cbz	r0, 8011d58 <_vfiprintf_r+0x18>
 8011d50:	6a03      	ldr	r3, [r0, #32]
 8011d52:	b90b      	cbnz	r3, 8011d58 <_vfiprintf_r+0x18>
 8011d54:	f7fe ff1e 	bl	8010b94 <__sinit>
 8011d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d5a:	07d9      	lsls	r1, r3, #31
 8011d5c:	d405      	bmi.n	8011d6a <_vfiprintf_r+0x2a>
 8011d5e:	89ab      	ldrh	r3, [r5, #12]
 8011d60:	059a      	lsls	r2, r3, #22
 8011d62:	d402      	bmi.n	8011d6a <_vfiprintf_r+0x2a>
 8011d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d66:	f7fe ff92 	bl	8010c8e <__retarget_lock_acquire_recursive>
 8011d6a:	89ab      	ldrh	r3, [r5, #12]
 8011d6c:	071b      	lsls	r3, r3, #28
 8011d6e:	d501      	bpl.n	8011d74 <_vfiprintf_r+0x34>
 8011d70:	692b      	ldr	r3, [r5, #16]
 8011d72:	b99b      	cbnz	r3, 8011d9c <_vfiprintf_r+0x5c>
 8011d74:	4629      	mov	r1, r5
 8011d76:	4630      	mov	r0, r6
 8011d78:	f000 fdd6 	bl	8012928 <__swsetup_r>
 8011d7c:	b170      	cbz	r0, 8011d9c <_vfiprintf_r+0x5c>
 8011d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d80:	07dc      	lsls	r4, r3, #31
 8011d82:	d504      	bpl.n	8011d8e <_vfiprintf_r+0x4e>
 8011d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d88:	b01d      	add	sp, #116	; 0x74
 8011d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d8e:	89ab      	ldrh	r3, [r5, #12]
 8011d90:	0598      	lsls	r0, r3, #22
 8011d92:	d4f7      	bmi.n	8011d84 <_vfiprintf_r+0x44>
 8011d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d96:	f7fe ff7b 	bl	8010c90 <__retarget_lock_release_recursive>
 8011d9a:	e7f3      	b.n	8011d84 <_vfiprintf_r+0x44>
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8011da0:	2320      	movs	r3, #32
 8011da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011daa:	2330      	movs	r3, #48	; 0x30
 8011dac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011f60 <_vfiprintf_r+0x220>
 8011db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011db4:	f04f 0901 	mov.w	r9, #1
 8011db8:	4623      	mov	r3, r4
 8011dba:	469a      	mov	sl, r3
 8011dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dc0:	b10a      	cbz	r2, 8011dc6 <_vfiprintf_r+0x86>
 8011dc2:	2a25      	cmp	r2, #37	; 0x25
 8011dc4:	d1f9      	bne.n	8011dba <_vfiprintf_r+0x7a>
 8011dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8011dca:	d00b      	beq.n	8011de4 <_vfiprintf_r+0xa4>
 8011dcc:	465b      	mov	r3, fp
 8011dce:	4622      	mov	r2, r4
 8011dd0:	4629      	mov	r1, r5
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	f7ff ffa1 	bl	8011d1a <__sfputs_r>
 8011dd8:	3001      	adds	r0, #1
 8011dda:	f000 80a9 	beq.w	8011f30 <_vfiprintf_r+0x1f0>
 8011dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011de0:	445a      	add	r2, fp
 8011de2:	9209      	str	r2, [sp, #36]	; 0x24
 8011de4:	f89a 3000 	ldrb.w	r3, [sl]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	f000 80a1 	beq.w	8011f30 <_vfiprintf_r+0x1f0>
 8011dee:	2300      	movs	r3, #0
 8011df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011df8:	f10a 0a01 	add.w	sl, sl, #1
 8011dfc:	9304      	str	r3, [sp, #16]
 8011dfe:	9307      	str	r3, [sp, #28]
 8011e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e04:	931a      	str	r3, [sp, #104]	; 0x68
 8011e06:	4654      	mov	r4, sl
 8011e08:	2205      	movs	r2, #5
 8011e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e0e:	4854      	ldr	r0, [pc, #336]	; (8011f60 <_vfiprintf_r+0x220>)
 8011e10:	f7ee f9f6 	bl	8000200 <memchr>
 8011e14:	9a04      	ldr	r2, [sp, #16]
 8011e16:	b9d8      	cbnz	r0, 8011e50 <_vfiprintf_r+0x110>
 8011e18:	06d1      	lsls	r1, r2, #27
 8011e1a:	bf44      	itt	mi
 8011e1c:	2320      	movmi	r3, #32
 8011e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e22:	0713      	lsls	r3, r2, #28
 8011e24:	bf44      	itt	mi
 8011e26:	232b      	movmi	r3, #43	; 0x2b
 8011e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e30:	2b2a      	cmp	r3, #42	; 0x2a
 8011e32:	d015      	beq.n	8011e60 <_vfiprintf_r+0x120>
 8011e34:	9a07      	ldr	r2, [sp, #28]
 8011e36:	4654      	mov	r4, sl
 8011e38:	2000      	movs	r0, #0
 8011e3a:	f04f 0c0a 	mov.w	ip, #10
 8011e3e:	4621      	mov	r1, r4
 8011e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e44:	3b30      	subs	r3, #48	; 0x30
 8011e46:	2b09      	cmp	r3, #9
 8011e48:	d94d      	bls.n	8011ee6 <_vfiprintf_r+0x1a6>
 8011e4a:	b1b0      	cbz	r0, 8011e7a <_vfiprintf_r+0x13a>
 8011e4c:	9207      	str	r2, [sp, #28]
 8011e4e:	e014      	b.n	8011e7a <_vfiprintf_r+0x13a>
 8011e50:	eba0 0308 	sub.w	r3, r0, r8
 8011e54:	fa09 f303 	lsl.w	r3, r9, r3
 8011e58:	4313      	orrs	r3, r2
 8011e5a:	9304      	str	r3, [sp, #16]
 8011e5c:	46a2      	mov	sl, r4
 8011e5e:	e7d2      	b.n	8011e06 <_vfiprintf_r+0xc6>
 8011e60:	9b03      	ldr	r3, [sp, #12]
 8011e62:	1d19      	adds	r1, r3, #4
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	9103      	str	r1, [sp, #12]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	bfbb      	ittet	lt
 8011e6c:	425b      	neglt	r3, r3
 8011e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8011e72:	9307      	strge	r3, [sp, #28]
 8011e74:	9307      	strlt	r3, [sp, #28]
 8011e76:	bfb8      	it	lt
 8011e78:	9204      	strlt	r2, [sp, #16]
 8011e7a:	7823      	ldrb	r3, [r4, #0]
 8011e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e7e:	d10c      	bne.n	8011e9a <_vfiprintf_r+0x15a>
 8011e80:	7863      	ldrb	r3, [r4, #1]
 8011e82:	2b2a      	cmp	r3, #42	; 0x2a
 8011e84:	d134      	bne.n	8011ef0 <_vfiprintf_r+0x1b0>
 8011e86:	9b03      	ldr	r3, [sp, #12]
 8011e88:	1d1a      	adds	r2, r3, #4
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	9203      	str	r2, [sp, #12]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	bfb8      	it	lt
 8011e92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011e96:	3402      	adds	r4, #2
 8011e98:	9305      	str	r3, [sp, #20]
 8011e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011f70 <_vfiprintf_r+0x230>
 8011e9e:	7821      	ldrb	r1, [r4, #0]
 8011ea0:	2203      	movs	r2, #3
 8011ea2:	4650      	mov	r0, sl
 8011ea4:	f7ee f9ac 	bl	8000200 <memchr>
 8011ea8:	b138      	cbz	r0, 8011eba <_vfiprintf_r+0x17a>
 8011eaa:	9b04      	ldr	r3, [sp, #16]
 8011eac:	eba0 000a 	sub.w	r0, r0, sl
 8011eb0:	2240      	movs	r2, #64	; 0x40
 8011eb2:	4082      	lsls	r2, r0
 8011eb4:	4313      	orrs	r3, r2
 8011eb6:	3401      	adds	r4, #1
 8011eb8:	9304      	str	r3, [sp, #16]
 8011eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ebe:	4829      	ldr	r0, [pc, #164]	; (8011f64 <_vfiprintf_r+0x224>)
 8011ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ec4:	2206      	movs	r2, #6
 8011ec6:	f7ee f99b 	bl	8000200 <memchr>
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	d03f      	beq.n	8011f4e <_vfiprintf_r+0x20e>
 8011ece:	4b26      	ldr	r3, [pc, #152]	; (8011f68 <_vfiprintf_r+0x228>)
 8011ed0:	bb1b      	cbnz	r3, 8011f1a <_vfiprintf_r+0x1da>
 8011ed2:	9b03      	ldr	r3, [sp, #12]
 8011ed4:	3307      	adds	r3, #7
 8011ed6:	f023 0307 	bic.w	r3, r3, #7
 8011eda:	3308      	adds	r3, #8
 8011edc:	9303      	str	r3, [sp, #12]
 8011ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ee0:	443b      	add	r3, r7
 8011ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ee4:	e768      	b.n	8011db8 <_vfiprintf_r+0x78>
 8011ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eea:	460c      	mov	r4, r1
 8011eec:	2001      	movs	r0, #1
 8011eee:	e7a6      	b.n	8011e3e <_vfiprintf_r+0xfe>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	3401      	adds	r4, #1
 8011ef4:	9305      	str	r3, [sp, #20]
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	f04f 0c0a 	mov.w	ip, #10
 8011efc:	4620      	mov	r0, r4
 8011efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f02:	3a30      	subs	r2, #48	; 0x30
 8011f04:	2a09      	cmp	r2, #9
 8011f06:	d903      	bls.n	8011f10 <_vfiprintf_r+0x1d0>
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d0c6      	beq.n	8011e9a <_vfiprintf_r+0x15a>
 8011f0c:	9105      	str	r1, [sp, #20]
 8011f0e:	e7c4      	b.n	8011e9a <_vfiprintf_r+0x15a>
 8011f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f14:	4604      	mov	r4, r0
 8011f16:	2301      	movs	r3, #1
 8011f18:	e7f0      	b.n	8011efc <_vfiprintf_r+0x1bc>
 8011f1a:	ab03      	add	r3, sp, #12
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	462a      	mov	r2, r5
 8011f20:	4b12      	ldr	r3, [pc, #72]	; (8011f6c <_vfiprintf_r+0x22c>)
 8011f22:	a904      	add	r1, sp, #16
 8011f24:	4630      	mov	r0, r6
 8011f26:	f7fe f8fb 	bl	8010120 <_printf_float>
 8011f2a:	4607      	mov	r7, r0
 8011f2c:	1c78      	adds	r0, r7, #1
 8011f2e:	d1d6      	bne.n	8011ede <_vfiprintf_r+0x19e>
 8011f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f32:	07d9      	lsls	r1, r3, #31
 8011f34:	d405      	bmi.n	8011f42 <_vfiprintf_r+0x202>
 8011f36:	89ab      	ldrh	r3, [r5, #12]
 8011f38:	059a      	lsls	r2, r3, #22
 8011f3a:	d402      	bmi.n	8011f42 <_vfiprintf_r+0x202>
 8011f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f3e:	f7fe fea7 	bl	8010c90 <__retarget_lock_release_recursive>
 8011f42:	89ab      	ldrh	r3, [r5, #12]
 8011f44:	065b      	lsls	r3, r3, #25
 8011f46:	f53f af1d 	bmi.w	8011d84 <_vfiprintf_r+0x44>
 8011f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f4c:	e71c      	b.n	8011d88 <_vfiprintf_r+0x48>
 8011f4e:	ab03      	add	r3, sp, #12
 8011f50:	9300      	str	r3, [sp, #0]
 8011f52:	462a      	mov	r2, r5
 8011f54:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <_vfiprintf_r+0x22c>)
 8011f56:	a904      	add	r1, sp, #16
 8011f58:	4630      	mov	r0, r6
 8011f5a:	f7fe fc2d 	bl	80107b8 <_printf_i>
 8011f5e:	e7e4      	b.n	8011f2a <_vfiprintf_r+0x1ea>
 8011f60:	08018349 	.word	0x08018349
 8011f64:	08018353 	.word	0x08018353
 8011f68:	08010121 	.word	0x08010121
 8011f6c:	08011d1b 	.word	0x08011d1b
 8011f70:	0801834f 	.word	0x0801834f

08011f74 <__sflush_r>:
 8011f74:	898a      	ldrh	r2, [r1, #12]
 8011f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7a:	4605      	mov	r5, r0
 8011f7c:	0710      	lsls	r0, r2, #28
 8011f7e:	460c      	mov	r4, r1
 8011f80:	d458      	bmi.n	8012034 <__sflush_r+0xc0>
 8011f82:	684b      	ldr	r3, [r1, #4]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	dc05      	bgt.n	8011f94 <__sflush_r+0x20>
 8011f88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	dc02      	bgt.n	8011f94 <__sflush_r+0x20>
 8011f8e:	2000      	movs	r0, #0
 8011f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f96:	2e00      	cmp	r6, #0
 8011f98:	d0f9      	beq.n	8011f8e <__sflush_r+0x1a>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011fa0:	682f      	ldr	r7, [r5, #0]
 8011fa2:	6a21      	ldr	r1, [r4, #32]
 8011fa4:	602b      	str	r3, [r5, #0]
 8011fa6:	d032      	beq.n	801200e <__sflush_r+0x9a>
 8011fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011faa:	89a3      	ldrh	r3, [r4, #12]
 8011fac:	075a      	lsls	r2, r3, #29
 8011fae:	d505      	bpl.n	8011fbc <__sflush_r+0x48>
 8011fb0:	6863      	ldr	r3, [r4, #4]
 8011fb2:	1ac0      	subs	r0, r0, r3
 8011fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011fb6:	b10b      	cbz	r3, 8011fbc <__sflush_r+0x48>
 8011fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011fba:	1ac0      	subs	r0, r0, r3
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011fc2:	6a21      	ldr	r1, [r4, #32]
 8011fc4:	4628      	mov	r0, r5
 8011fc6:	47b0      	blx	r6
 8011fc8:	1c43      	adds	r3, r0, #1
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	d106      	bne.n	8011fdc <__sflush_r+0x68>
 8011fce:	6829      	ldr	r1, [r5, #0]
 8011fd0:	291d      	cmp	r1, #29
 8011fd2:	d82b      	bhi.n	801202c <__sflush_r+0xb8>
 8011fd4:	4a29      	ldr	r2, [pc, #164]	; (801207c <__sflush_r+0x108>)
 8011fd6:	410a      	asrs	r2, r1
 8011fd8:	07d6      	lsls	r6, r2, #31
 8011fda:	d427      	bmi.n	801202c <__sflush_r+0xb8>
 8011fdc:	2200      	movs	r2, #0
 8011fde:	6062      	str	r2, [r4, #4]
 8011fe0:	04d9      	lsls	r1, r3, #19
 8011fe2:	6922      	ldr	r2, [r4, #16]
 8011fe4:	6022      	str	r2, [r4, #0]
 8011fe6:	d504      	bpl.n	8011ff2 <__sflush_r+0x7e>
 8011fe8:	1c42      	adds	r2, r0, #1
 8011fea:	d101      	bne.n	8011ff0 <__sflush_r+0x7c>
 8011fec:	682b      	ldr	r3, [r5, #0]
 8011fee:	b903      	cbnz	r3, 8011ff2 <__sflush_r+0x7e>
 8011ff0:	6560      	str	r0, [r4, #84]	; 0x54
 8011ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ff4:	602f      	str	r7, [r5, #0]
 8011ff6:	2900      	cmp	r1, #0
 8011ff8:	d0c9      	beq.n	8011f8e <__sflush_r+0x1a>
 8011ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ffe:	4299      	cmp	r1, r3
 8012000:	d002      	beq.n	8012008 <__sflush_r+0x94>
 8012002:	4628      	mov	r0, r5
 8012004:	f7ff fcce 	bl	80119a4 <_free_r>
 8012008:	2000      	movs	r0, #0
 801200a:	6360      	str	r0, [r4, #52]	; 0x34
 801200c:	e7c0      	b.n	8011f90 <__sflush_r+0x1c>
 801200e:	2301      	movs	r3, #1
 8012010:	4628      	mov	r0, r5
 8012012:	47b0      	blx	r6
 8012014:	1c41      	adds	r1, r0, #1
 8012016:	d1c8      	bne.n	8011faa <__sflush_r+0x36>
 8012018:	682b      	ldr	r3, [r5, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d0c5      	beq.n	8011faa <__sflush_r+0x36>
 801201e:	2b1d      	cmp	r3, #29
 8012020:	d001      	beq.n	8012026 <__sflush_r+0xb2>
 8012022:	2b16      	cmp	r3, #22
 8012024:	d101      	bne.n	801202a <__sflush_r+0xb6>
 8012026:	602f      	str	r7, [r5, #0]
 8012028:	e7b1      	b.n	8011f8e <__sflush_r+0x1a>
 801202a:	89a3      	ldrh	r3, [r4, #12]
 801202c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012030:	81a3      	strh	r3, [r4, #12]
 8012032:	e7ad      	b.n	8011f90 <__sflush_r+0x1c>
 8012034:	690f      	ldr	r7, [r1, #16]
 8012036:	2f00      	cmp	r7, #0
 8012038:	d0a9      	beq.n	8011f8e <__sflush_r+0x1a>
 801203a:	0793      	lsls	r3, r2, #30
 801203c:	680e      	ldr	r6, [r1, #0]
 801203e:	bf08      	it	eq
 8012040:	694b      	ldreq	r3, [r1, #20]
 8012042:	600f      	str	r7, [r1, #0]
 8012044:	bf18      	it	ne
 8012046:	2300      	movne	r3, #0
 8012048:	eba6 0807 	sub.w	r8, r6, r7
 801204c:	608b      	str	r3, [r1, #8]
 801204e:	f1b8 0f00 	cmp.w	r8, #0
 8012052:	dd9c      	ble.n	8011f8e <__sflush_r+0x1a>
 8012054:	6a21      	ldr	r1, [r4, #32]
 8012056:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012058:	4643      	mov	r3, r8
 801205a:	463a      	mov	r2, r7
 801205c:	4628      	mov	r0, r5
 801205e:	47b0      	blx	r6
 8012060:	2800      	cmp	r0, #0
 8012062:	dc06      	bgt.n	8012072 <__sflush_r+0xfe>
 8012064:	89a3      	ldrh	r3, [r4, #12]
 8012066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801206a:	81a3      	strh	r3, [r4, #12]
 801206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012070:	e78e      	b.n	8011f90 <__sflush_r+0x1c>
 8012072:	4407      	add	r7, r0
 8012074:	eba8 0800 	sub.w	r8, r8, r0
 8012078:	e7e9      	b.n	801204e <__sflush_r+0xda>
 801207a:	bf00      	nop
 801207c:	dfbffffe 	.word	0xdfbffffe

08012080 <_fflush_r>:
 8012080:	b538      	push	{r3, r4, r5, lr}
 8012082:	690b      	ldr	r3, [r1, #16]
 8012084:	4605      	mov	r5, r0
 8012086:	460c      	mov	r4, r1
 8012088:	b913      	cbnz	r3, 8012090 <_fflush_r+0x10>
 801208a:	2500      	movs	r5, #0
 801208c:	4628      	mov	r0, r5
 801208e:	bd38      	pop	{r3, r4, r5, pc}
 8012090:	b118      	cbz	r0, 801209a <_fflush_r+0x1a>
 8012092:	6a03      	ldr	r3, [r0, #32]
 8012094:	b90b      	cbnz	r3, 801209a <_fflush_r+0x1a>
 8012096:	f7fe fd7d 	bl	8010b94 <__sinit>
 801209a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d0f3      	beq.n	801208a <_fflush_r+0xa>
 80120a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80120a4:	07d0      	lsls	r0, r2, #31
 80120a6:	d404      	bmi.n	80120b2 <_fflush_r+0x32>
 80120a8:	0599      	lsls	r1, r3, #22
 80120aa:	d402      	bmi.n	80120b2 <_fflush_r+0x32>
 80120ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80120ae:	f7fe fdee 	bl	8010c8e <__retarget_lock_acquire_recursive>
 80120b2:	4628      	mov	r0, r5
 80120b4:	4621      	mov	r1, r4
 80120b6:	f7ff ff5d 	bl	8011f74 <__sflush_r>
 80120ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80120bc:	07da      	lsls	r2, r3, #31
 80120be:	4605      	mov	r5, r0
 80120c0:	d4e4      	bmi.n	801208c <_fflush_r+0xc>
 80120c2:	89a3      	ldrh	r3, [r4, #12]
 80120c4:	059b      	lsls	r3, r3, #22
 80120c6:	d4e1      	bmi.n	801208c <_fflush_r+0xc>
 80120c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80120ca:	f7fe fde1 	bl	8010c90 <__retarget_lock_release_recursive>
 80120ce:	e7dd      	b.n	801208c <_fflush_r+0xc>

080120d0 <_Balloc>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	69c6      	ldr	r6, [r0, #28]
 80120d4:	4604      	mov	r4, r0
 80120d6:	460d      	mov	r5, r1
 80120d8:	b976      	cbnz	r6, 80120f8 <_Balloc+0x28>
 80120da:	2010      	movs	r0, #16
 80120dc:	f7fe fa56 	bl	801058c <malloc>
 80120e0:	4602      	mov	r2, r0
 80120e2:	61e0      	str	r0, [r4, #28]
 80120e4:	b920      	cbnz	r0, 80120f0 <_Balloc+0x20>
 80120e6:	4b18      	ldr	r3, [pc, #96]	; (8012148 <_Balloc+0x78>)
 80120e8:	4818      	ldr	r0, [pc, #96]	; (801214c <_Balloc+0x7c>)
 80120ea:	216b      	movs	r1, #107	; 0x6b
 80120ec:	f000 fd58 	bl	8012ba0 <__assert_func>
 80120f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120f4:	6006      	str	r6, [r0, #0]
 80120f6:	60c6      	str	r6, [r0, #12]
 80120f8:	69e6      	ldr	r6, [r4, #28]
 80120fa:	68f3      	ldr	r3, [r6, #12]
 80120fc:	b183      	cbz	r3, 8012120 <_Balloc+0x50>
 80120fe:	69e3      	ldr	r3, [r4, #28]
 8012100:	68db      	ldr	r3, [r3, #12]
 8012102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012106:	b9b8      	cbnz	r0, 8012138 <_Balloc+0x68>
 8012108:	2101      	movs	r1, #1
 801210a:	fa01 f605 	lsl.w	r6, r1, r5
 801210e:	1d72      	adds	r2, r6, #5
 8012110:	0092      	lsls	r2, r2, #2
 8012112:	4620      	mov	r0, r4
 8012114:	f000 fd62 	bl	8012bdc <_calloc_r>
 8012118:	b160      	cbz	r0, 8012134 <_Balloc+0x64>
 801211a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801211e:	e00e      	b.n	801213e <_Balloc+0x6e>
 8012120:	2221      	movs	r2, #33	; 0x21
 8012122:	2104      	movs	r1, #4
 8012124:	4620      	mov	r0, r4
 8012126:	f000 fd59 	bl	8012bdc <_calloc_r>
 801212a:	69e3      	ldr	r3, [r4, #28]
 801212c:	60f0      	str	r0, [r6, #12]
 801212e:	68db      	ldr	r3, [r3, #12]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1e4      	bne.n	80120fe <_Balloc+0x2e>
 8012134:	2000      	movs	r0, #0
 8012136:	bd70      	pop	{r4, r5, r6, pc}
 8012138:	6802      	ldr	r2, [r0, #0]
 801213a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801213e:	2300      	movs	r3, #0
 8012140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012144:	e7f7      	b.n	8012136 <_Balloc+0x66>
 8012146:	bf00      	nop
 8012148:	080182c9 	.word	0x080182c9
 801214c:	0801835a 	.word	0x0801835a

08012150 <_Bfree>:
 8012150:	b570      	push	{r4, r5, r6, lr}
 8012152:	69c6      	ldr	r6, [r0, #28]
 8012154:	4605      	mov	r5, r0
 8012156:	460c      	mov	r4, r1
 8012158:	b976      	cbnz	r6, 8012178 <_Bfree+0x28>
 801215a:	2010      	movs	r0, #16
 801215c:	f7fe fa16 	bl	801058c <malloc>
 8012160:	4602      	mov	r2, r0
 8012162:	61e8      	str	r0, [r5, #28]
 8012164:	b920      	cbnz	r0, 8012170 <_Bfree+0x20>
 8012166:	4b09      	ldr	r3, [pc, #36]	; (801218c <_Bfree+0x3c>)
 8012168:	4809      	ldr	r0, [pc, #36]	; (8012190 <_Bfree+0x40>)
 801216a:	218f      	movs	r1, #143	; 0x8f
 801216c:	f000 fd18 	bl	8012ba0 <__assert_func>
 8012170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012174:	6006      	str	r6, [r0, #0]
 8012176:	60c6      	str	r6, [r0, #12]
 8012178:	b13c      	cbz	r4, 801218a <_Bfree+0x3a>
 801217a:	69eb      	ldr	r3, [r5, #28]
 801217c:	6862      	ldr	r2, [r4, #4]
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012184:	6021      	str	r1, [r4, #0]
 8012186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801218a:	bd70      	pop	{r4, r5, r6, pc}
 801218c:	080182c9 	.word	0x080182c9
 8012190:	0801835a 	.word	0x0801835a

08012194 <__multadd>:
 8012194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012198:	690d      	ldr	r5, [r1, #16]
 801219a:	4607      	mov	r7, r0
 801219c:	460c      	mov	r4, r1
 801219e:	461e      	mov	r6, r3
 80121a0:	f101 0c14 	add.w	ip, r1, #20
 80121a4:	2000      	movs	r0, #0
 80121a6:	f8dc 3000 	ldr.w	r3, [ip]
 80121aa:	b299      	uxth	r1, r3
 80121ac:	fb02 6101 	mla	r1, r2, r1, r6
 80121b0:	0c1e      	lsrs	r6, r3, #16
 80121b2:	0c0b      	lsrs	r3, r1, #16
 80121b4:	fb02 3306 	mla	r3, r2, r6, r3
 80121b8:	b289      	uxth	r1, r1
 80121ba:	3001      	adds	r0, #1
 80121bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121c0:	4285      	cmp	r5, r0
 80121c2:	f84c 1b04 	str.w	r1, [ip], #4
 80121c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121ca:	dcec      	bgt.n	80121a6 <__multadd+0x12>
 80121cc:	b30e      	cbz	r6, 8012212 <__multadd+0x7e>
 80121ce:	68a3      	ldr	r3, [r4, #8]
 80121d0:	42ab      	cmp	r3, r5
 80121d2:	dc19      	bgt.n	8012208 <__multadd+0x74>
 80121d4:	6861      	ldr	r1, [r4, #4]
 80121d6:	4638      	mov	r0, r7
 80121d8:	3101      	adds	r1, #1
 80121da:	f7ff ff79 	bl	80120d0 <_Balloc>
 80121de:	4680      	mov	r8, r0
 80121e0:	b928      	cbnz	r0, 80121ee <__multadd+0x5a>
 80121e2:	4602      	mov	r2, r0
 80121e4:	4b0c      	ldr	r3, [pc, #48]	; (8012218 <__multadd+0x84>)
 80121e6:	480d      	ldr	r0, [pc, #52]	; (801221c <__multadd+0x88>)
 80121e8:	21ba      	movs	r1, #186	; 0xba
 80121ea:	f000 fcd9 	bl	8012ba0 <__assert_func>
 80121ee:	6922      	ldr	r2, [r4, #16]
 80121f0:	3202      	adds	r2, #2
 80121f2:	f104 010c 	add.w	r1, r4, #12
 80121f6:	0092      	lsls	r2, r2, #2
 80121f8:	300c      	adds	r0, #12
 80121fa:	f7fe fd4a 	bl	8010c92 <memcpy>
 80121fe:	4621      	mov	r1, r4
 8012200:	4638      	mov	r0, r7
 8012202:	f7ff ffa5 	bl	8012150 <_Bfree>
 8012206:	4644      	mov	r4, r8
 8012208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801220c:	3501      	adds	r5, #1
 801220e:	615e      	str	r6, [r3, #20]
 8012210:	6125      	str	r5, [r4, #16]
 8012212:	4620      	mov	r0, r4
 8012214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012218:	08018338 	.word	0x08018338
 801221c:	0801835a 	.word	0x0801835a

08012220 <__hi0bits>:
 8012220:	0c03      	lsrs	r3, r0, #16
 8012222:	041b      	lsls	r3, r3, #16
 8012224:	b9d3      	cbnz	r3, 801225c <__hi0bits+0x3c>
 8012226:	0400      	lsls	r0, r0, #16
 8012228:	2310      	movs	r3, #16
 801222a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801222e:	bf04      	itt	eq
 8012230:	0200      	lsleq	r0, r0, #8
 8012232:	3308      	addeq	r3, #8
 8012234:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012238:	bf04      	itt	eq
 801223a:	0100      	lsleq	r0, r0, #4
 801223c:	3304      	addeq	r3, #4
 801223e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012242:	bf04      	itt	eq
 8012244:	0080      	lsleq	r0, r0, #2
 8012246:	3302      	addeq	r3, #2
 8012248:	2800      	cmp	r0, #0
 801224a:	db05      	blt.n	8012258 <__hi0bits+0x38>
 801224c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012250:	f103 0301 	add.w	r3, r3, #1
 8012254:	bf08      	it	eq
 8012256:	2320      	moveq	r3, #32
 8012258:	4618      	mov	r0, r3
 801225a:	4770      	bx	lr
 801225c:	2300      	movs	r3, #0
 801225e:	e7e4      	b.n	801222a <__hi0bits+0xa>

08012260 <__lo0bits>:
 8012260:	6803      	ldr	r3, [r0, #0]
 8012262:	f013 0207 	ands.w	r2, r3, #7
 8012266:	d00c      	beq.n	8012282 <__lo0bits+0x22>
 8012268:	07d9      	lsls	r1, r3, #31
 801226a:	d422      	bmi.n	80122b2 <__lo0bits+0x52>
 801226c:	079a      	lsls	r2, r3, #30
 801226e:	bf49      	itett	mi
 8012270:	085b      	lsrmi	r3, r3, #1
 8012272:	089b      	lsrpl	r3, r3, #2
 8012274:	6003      	strmi	r3, [r0, #0]
 8012276:	2201      	movmi	r2, #1
 8012278:	bf5c      	itt	pl
 801227a:	6003      	strpl	r3, [r0, #0]
 801227c:	2202      	movpl	r2, #2
 801227e:	4610      	mov	r0, r2
 8012280:	4770      	bx	lr
 8012282:	b299      	uxth	r1, r3
 8012284:	b909      	cbnz	r1, 801228a <__lo0bits+0x2a>
 8012286:	0c1b      	lsrs	r3, r3, #16
 8012288:	2210      	movs	r2, #16
 801228a:	b2d9      	uxtb	r1, r3
 801228c:	b909      	cbnz	r1, 8012292 <__lo0bits+0x32>
 801228e:	3208      	adds	r2, #8
 8012290:	0a1b      	lsrs	r3, r3, #8
 8012292:	0719      	lsls	r1, r3, #28
 8012294:	bf04      	itt	eq
 8012296:	091b      	lsreq	r3, r3, #4
 8012298:	3204      	addeq	r2, #4
 801229a:	0799      	lsls	r1, r3, #30
 801229c:	bf04      	itt	eq
 801229e:	089b      	lsreq	r3, r3, #2
 80122a0:	3202      	addeq	r2, #2
 80122a2:	07d9      	lsls	r1, r3, #31
 80122a4:	d403      	bmi.n	80122ae <__lo0bits+0x4e>
 80122a6:	085b      	lsrs	r3, r3, #1
 80122a8:	f102 0201 	add.w	r2, r2, #1
 80122ac:	d003      	beq.n	80122b6 <__lo0bits+0x56>
 80122ae:	6003      	str	r3, [r0, #0]
 80122b0:	e7e5      	b.n	801227e <__lo0bits+0x1e>
 80122b2:	2200      	movs	r2, #0
 80122b4:	e7e3      	b.n	801227e <__lo0bits+0x1e>
 80122b6:	2220      	movs	r2, #32
 80122b8:	e7e1      	b.n	801227e <__lo0bits+0x1e>
	...

080122bc <__i2b>:
 80122bc:	b510      	push	{r4, lr}
 80122be:	460c      	mov	r4, r1
 80122c0:	2101      	movs	r1, #1
 80122c2:	f7ff ff05 	bl	80120d0 <_Balloc>
 80122c6:	4602      	mov	r2, r0
 80122c8:	b928      	cbnz	r0, 80122d6 <__i2b+0x1a>
 80122ca:	4b05      	ldr	r3, [pc, #20]	; (80122e0 <__i2b+0x24>)
 80122cc:	4805      	ldr	r0, [pc, #20]	; (80122e4 <__i2b+0x28>)
 80122ce:	f240 1145 	movw	r1, #325	; 0x145
 80122d2:	f000 fc65 	bl	8012ba0 <__assert_func>
 80122d6:	2301      	movs	r3, #1
 80122d8:	6144      	str	r4, [r0, #20]
 80122da:	6103      	str	r3, [r0, #16]
 80122dc:	bd10      	pop	{r4, pc}
 80122de:	bf00      	nop
 80122e0:	08018338 	.word	0x08018338
 80122e4:	0801835a 	.word	0x0801835a

080122e8 <__multiply>:
 80122e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ec:	4691      	mov	r9, r2
 80122ee:	690a      	ldr	r2, [r1, #16]
 80122f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	bfb8      	it	lt
 80122f8:	460b      	movlt	r3, r1
 80122fa:	460c      	mov	r4, r1
 80122fc:	bfbc      	itt	lt
 80122fe:	464c      	movlt	r4, r9
 8012300:	4699      	movlt	r9, r3
 8012302:	6927      	ldr	r7, [r4, #16]
 8012304:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012308:	68a3      	ldr	r3, [r4, #8]
 801230a:	6861      	ldr	r1, [r4, #4]
 801230c:	eb07 060a 	add.w	r6, r7, sl
 8012310:	42b3      	cmp	r3, r6
 8012312:	b085      	sub	sp, #20
 8012314:	bfb8      	it	lt
 8012316:	3101      	addlt	r1, #1
 8012318:	f7ff feda 	bl	80120d0 <_Balloc>
 801231c:	b930      	cbnz	r0, 801232c <__multiply+0x44>
 801231e:	4602      	mov	r2, r0
 8012320:	4b44      	ldr	r3, [pc, #272]	; (8012434 <__multiply+0x14c>)
 8012322:	4845      	ldr	r0, [pc, #276]	; (8012438 <__multiply+0x150>)
 8012324:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012328:	f000 fc3a 	bl	8012ba0 <__assert_func>
 801232c:	f100 0514 	add.w	r5, r0, #20
 8012330:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012334:	462b      	mov	r3, r5
 8012336:	2200      	movs	r2, #0
 8012338:	4543      	cmp	r3, r8
 801233a:	d321      	bcc.n	8012380 <__multiply+0x98>
 801233c:	f104 0314 	add.w	r3, r4, #20
 8012340:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012344:	f109 0314 	add.w	r3, r9, #20
 8012348:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801234c:	9202      	str	r2, [sp, #8]
 801234e:	1b3a      	subs	r2, r7, r4
 8012350:	3a15      	subs	r2, #21
 8012352:	f022 0203 	bic.w	r2, r2, #3
 8012356:	3204      	adds	r2, #4
 8012358:	f104 0115 	add.w	r1, r4, #21
 801235c:	428f      	cmp	r7, r1
 801235e:	bf38      	it	cc
 8012360:	2204      	movcc	r2, #4
 8012362:	9201      	str	r2, [sp, #4]
 8012364:	9a02      	ldr	r2, [sp, #8]
 8012366:	9303      	str	r3, [sp, #12]
 8012368:	429a      	cmp	r2, r3
 801236a:	d80c      	bhi.n	8012386 <__multiply+0x9e>
 801236c:	2e00      	cmp	r6, #0
 801236e:	dd03      	ble.n	8012378 <__multiply+0x90>
 8012370:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012374:	2b00      	cmp	r3, #0
 8012376:	d05b      	beq.n	8012430 <__multiply+0x148>
 8012378:	6106      	str	r6, [r0, #16]
 801237a:	b005      	add	sp, #20
 801237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012380:	f843 2b04 	str.w	r2, [r3], #4
 8012384:	e7d8      	b.n	8012338 <__multiply+0x50>
 8012386:	f8b3 a000 	ldrh.w	sl, [r3]
 801238a:	f1ba 0f00 	cmp.w	sl, #0
 801238e:	d024      	beq.n	80123da <__multiply+0xf2>
 8012390:	f104 0e14 	add.w	lr, r4, #20
 8012394:	46a9      	mov	r9, r5
 8012396:	f04f 0c00 	mov.w	ip, #0
 801239a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801239e:	f8d9 1000 	ldr.w	r1, [r9]
 80123a2:	fa1f fb82 	uxth.w	fp, r2
 80123a6:	b289      	uxth	r1, r1
 80123a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80123ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80123b0:	f8d9 2000 	ldr.w	r2, [r9]
 80123b4:	4461      	add	r1, ip
 80123b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80123be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80123c2:	b289      	uxth	r1, r1
 80123c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80123c8:	4577      	cmp	r7, lr
 80123ca:	f849 1b04 	str.w	r1, [r9], #4
 80123ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123d2:	d8e2      	bhi.n	801239a <__multiply+0xb2>
 80123d4:	9a01      	ldr	r2, [sp, #4]
 80123d6:	f845 c002 	str.w	ip, [r5, r2]
 80123da:	9a03      	ldr	r2, [sp, #12]
 80123dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80123e0:	3304      	adds	r3, #4
 80123e2:	f1b9 0f00 	cmp.w	r9, #0
 80123e6:	d021      	beq.n	801242c <__multiply+0x144>
 80123e8:	6829      	ldr	r1, [r5, #0]
 80123ea:	f104 0c14 	add.w	ip, r4, #20
 80123ee:	46ae      	mov	lr, r5
 80123f0:	f04f 0a00 	mov.w	sl, #0
 80123f4:	f8bc b000 	ldrh.w	fp, [ip]
 80123f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80123fc:	fb09 220b 	mla	r2, r9, fp, r2
 8012400:	4452      	add	r2, sl
 8012402:	b289      	uxth	r1, r1
 8012404:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012408:	f84e 1b04 	str.w	r1, [lr], #4
 801240c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012410:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012414:	f8be 1000 	ldrh.w	r1, [lr]
 8012418:	fb09 110a 	mla	r1, r9, sl, r1
 801241c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012420:	4567      	cmp	r7, ip
 8012422:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012426:	d8e5      	bhi.n	80123f4 <__multiply+0x10c>
 8012428:	9a01      	ldr	r2, [sp, #4]
 801242a:	50a9      	str	r1, [r5, r2]
 801242c:	3504      	adds	r5, #4
 801242e:	e799      	b.n	8012364 <__multiply+0x7c>
 8012430:	3e01      	subs	r6, #1
 8012432:	e79b      	b.n	801236c <__multiply+0x84>
 8012434:	08018338 	.word	0x08018338
 8012438:	0801835a 	.word	0x0801835a

0801243c <__pow5mult>:
 801243c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012440:	4615      	mov	r5, r2
 8012442:	f012 0203 	ands.w	r2, r2, #3
 8012446:	4606      	mov	r6, r0
 8012448:	460f      	mov	r7, r1
 801244a:	d007      	beq.n	801245c <__pow5mult+0x20>
 801244c:	4c25      	ldr	r4, [pc, #148]	; (80124e4 <__pow5mult+0xa8>)
 801244e:	3a01      	subs	r2, #1
 8012450:	2300      	movs	r3, #0
 8012452:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012456:	f7ff fe9d 	bl	8012194 <__multadd>
 801245a:	4607      	mov	r7, r0
 801245c:	10ad      	asrs	r5, r5, #2
 801245e:	d03d      	beq.n	80124dc <__pow5mult+0xa0>
 8012460:	69f4      	ldr	r4, [r6, #28]
 8012462:	b97c      	cbnz	r4, 8012484 <__pow5mult+0x48>
 8012464:	2010      	movs	r0, #16
 8012466:	f7fe f891 	bl	801058c <malloc>
 801246a:	4602      	mov	r2, r0
 801246c:	61f0      	str	r0, [r6, #28]
 801246e:	b928      	cbnz	r0, 801247c <__pow5mult+0x40>
 8012470:	4b1d      	ldr	r3, [pc, #116]	; (80124e8 <__pow5mult+0xac>)
 8012472:	481e      	ldr	r0, [pc, #120]	; (80124ec <__pow5mult+0xb0>)
 8012474:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012478:	f000 fb92 	bl	8012ba0 <__assert_func>
 801247c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012480:	6004      	str	r4, [r0, #0]
 8012482:	60c4      	str	r4, [r0, #12]
 8012484:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801248c:	b94c      	cbnz	r4, 80124a2 <__pow5mult+0x66>
 801248e:	f240 2171 	movw	r1, #625	; 0x271
 8012492:	4630      	mov	r0, r6
 8012494:	f7ff ff12 	bl	80122bc <__i2b>
 8012498:	2300      	movs	r3, #0
 801249a:	f8c8 0008 	str.w	r0, [r8, #8]
 801249e:	4604      	mov	r4, r0
 80124a0:	6003      	str	r3, [r0, #0]
 80124a2:	f04f 0900 	mov.w	r9, #0
 80124a6:	07eb      	lsls	r3, r5, #31
 80124a8:	d50a      	bpl.n	80124c0 <__pow5mult+0x84>
 80124aa:	4639      	mov	r1, r7
 80124ac:	4622      	mov	r2, r4
 80124ae:	4630      	mov	r0, r6
 80124b0:	f7ff ff1a 	bl	80122e8 <__multiply>
 80124b4:	4639      	mov	r1, r7
 80124b6:	4680      	mov	r8, r0
 80124b8:	4630      	mov	r0, r6
 80124ba:	f7ff fe49 	bl	8012150 <_Bfree>
 80124be:	4647      	mov	r7, r8
 80124c0:	106d      	asrs	r5, r5, #1
 80124c2:	d00b      	beq.n	80124dc <__pow5mult+0xa0>
 80124c4:	6820      	ldr	r0, [r4, #0]
 80124c6:	b938      	cbnz	r0, 80124d8 <__pow5mult+0x9c>
 80124c8:	4622      	mov	r2, r4
 80124ca:	4621      	mov	r1, r4
 80124cc:	4630      	mov	r0, r6
 80124ce:	f7ff ff0b 	bl	80122e8 <__multiply>
 80124d2:	6020      	str	r0, [r4, #0]
 80124d4:	f8c0 9000 	str.w	r9, [r0]
 80124d8:	4604      	mov	r4, r0
 80124da:	e7e4      	b.n	80124a6 <__pow5mult+0x6a>
 80124dc:	4638      	mov	r0, r7
 80124de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124e2:	bf00      	nop
 80124e4:	080184a8 	.word	0x080184a8
 80124e8:	080182c9 	.word	0x080182c9
 80124ec:	0801835a 	.word	0x0801835a

080124f0 <__lshift>:
 80124f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124f4:	460c      	mov	r4, r1
 80124f6:	6849      	ldr	r1, [r1, #4]
 80124f8:	6923      	ldr	r3, [r4, #16]
 80124fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80124fe:	68a3      	ldr	r3, [r4, #8]
 8012500:	4607      	mov	r7, r0
 8012502:	4691      	mov	r9, r2
 8012504:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012508:	f108 0601 	add.w	r6, r8, #1
 801250c:	42b3      	cmp	r3, r6
 801250e:	db0b      	blt.n	8012528 <__lshift+0x38>
 8012510:	4638      	mov	r0, r7
 8012512:	f7ff fddd 	bl	80120d0 <_Balloc>
 8012516:	4605      	mov	r5, r0
 8012518:	b948      	cbnz	r0, 801252e <__lshift+0x3e>
 801251a:	4602      	mov	r2, r0
 801251c:	4b28      	ldr	r3, [pc, #160]	; (80125c0 <__lshift+0xd0>)
 801251e:	4829      	ldr	r0, [pc, #164]	; (80125c4 <__lshift+0xd4>)
 8012520:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012524:	f000 fb3c 	bl	8012ba0 <__assert_func>
 8012528:	3101      	adds	r1, #1
 801252a:	005b      	lsls	r3, r3, #1
 801252c:	e7ee      	b.n	801250c <__lshift+0x1c>
 801252e:	2300      	movs	r3, #0
 8012530:	f100 0114 	add.w	r1, r0, #20
 8012534:	f100 0210 	add.w	r2, r0, #16
 8012538:	4618      	mov	r0, r3
 801253a:	4553      	cmp	r3, sl
 801253c:	db33      	blt.n	80125a6 <__lshift+0xb6>
 801253e:	6920      	ldr	r0, [r4, #16]
 8012540:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012544:	f104 0314 	add.w	r3, r4, #20
 8012548:	f019 091f 	ands.w	r9, r9, #31
 801254c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012550:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012554:	d02b      	beq.n	80125ae <__lshift+0xbe>
 8012556:	f1c9 0e20 	rsb	lr, r9, #32
 801255a:	468a      	mov	sl, r1
 801255c:	2200      	movs	r2, #0
 801255e:	6818      	ldr	r0, [r3, #0]
 8012560:	fa00 f009 	lsl.w	r0, r0, r9
 8012564:	4310      	orrs	r0, r2
 8012566:	f84a 0b04 	str.w	r0, [sl], #4
 801256a:	f853 2b04 	ldr.w	r2, [r3], #4
 801256e:	459c      	cmp	ip, r3
 8012570:	fa22 f20e 	lsr.w	r2, r2, lr
 8012574:	d8f3      	bhi.n	801255e <__lshift+0x6e>
 8012576:	ebac 0304 	sub.w	r3, ip, r4
 801257a:	3b15      	subs	r3, #21
 801257c:	f023 0303 	bic.w	r3, r3, #3
 8012580:	3304      	adds	r3, #4
 8012582:	f104 0015 	add.w	r0, r4, #21
 8012586:	4584      	cmp	ip, r0
 8012588:	bf38      	it	cc
 801258a:	2304      	movcc	r3, #4
 801258c:	50ca      	str	r2, [r1, r3]
 801258e:	b10a      	cbz	r2, 8012594 <__lshift+0xa4>
 8012590:	f108 0602 	add.w	r6, r8, #2
 8012594:	3e01      	subs	r6, #1
 8012596:	4638      	mov	r0, r7
 8012598:	612e      	str	r6, [r5, #16]
 801259a:	4621      	mov	r1, r4
 801259c:	f7ff fdd8 	bl	8012150 <_Bfree>
 80125a0:	4628      	mov	r0, r5
 80125a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80125aa:	3301      	adds	r3, #1
 80125ac:	e7c5      	b.n	801253a <__lshift+0x4a>
 80125ae:	3904      	subs	r1, #4
 80125b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80125b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80125b8:	459c      	cmp	ip, r3
 80125ba:	d8f9      	bhi.n	80125b0 <__lshift+0xc0>
 80125bc:	e7ea      	b.n	8012594 <__lshift+0xa4>
 80125be:	bf00      	nop
 80125c0:	08018338 	.word	0x08018338
 80125c4:	0801835a 	.word	0x0801835a

080125c8 <__mcmp>:
 80125c8:	b530      	push	{r4, r5, lr}
 80125ca:	6902      	ldr	r2, [r0, #16]
 80125cc:	690c      	ldr	r4, [r1, #16]
 80125ce:	1b12      	subs	r2, r2, r4
 80125d0:	d10e      	bne.n	80125f0 <__mcmp+0x28>
 80125d2:	f100 0314 	add.w	r3, r0, #20
 80125d6:	3114      	adds	r1, #20
 80125d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80125dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80125e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80125e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80125e8:	42a5      	cmp	r5, r4
 80125ea:	d003      	beq.n	80125f4 <__mcmp+0x2c>
 80125ec:	d305      	bcc.n	80125fa <__mcmp+0x32>
 80125ee:	2201      	movs	r2, #1
 80125f0:	4610      	mov	r0, r2
 80125f2:	bd30      	pop	{r4, r5, pc}
 80125f4:	4283      	cmp	r3, r0
 80125f6:	d3f3      	bcc.n	80125e0 <__mcmp+0x18>
 80125f8:	e7fa      	b.n	80125f0 <__mcmp+0x28>
 80125fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125fe:	e7f7      	b.n	80125f0 <__mcmp+0x28>

08012600 <__mdiff>:
 8012600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012604:	460c      	mov	r4, r1
 8012606:	4606      	mov	r6, r0
 8012608:	4611      	mov	r1, r2
 801260a:	4620      	mov	r0, r4
 801260c:	4690      	mov	r8, r2
 801260e:	f7ff ffdb 	bl	80125c8 <__mcmp>
 8012612:	1e05      	subs	r5, r0, #0
 8012614:	d110      	bne.n	8012638 <__mdiff+0x38>
 8012616:	4629      	mov	r1, r5
 8012618:	4630      	mov	r0, r6
 801261a:	f7ff fd59 	bl	80120d0 <_Balloc>
 801261e:	b930      	cbnz	r0, 801262e <__mdiff+0x2e>
 8012620:	4b3a      	ldr	r3, [pc, #232]	; (801270c <__mdiff+0x10c>)
 8012622:	4602      	mov	r2, r0
 8012624:	f240 2137 	movw	r1, #567	; 0x237
 8012628:	4839      	ldr	r0, [pc, #228]	; (8012710 <__mdiff+0x110>)
 801262a:	f000 fab9 	bl	8012ba0 <__assert_func>
 801262e:	2301      	movs	r3, #1
 8012630:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012638:	bfa4      	itt	ge
 801263a:	4643      	movge	r3, r8
 801263c:	46a0      	movge	r8, r4
 801263e:	4630      	mov	r0, r6
 8012640:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012644:	bfa6      	itte	ge
 8012646:	461c      	movge	r4, r3
 8012648:	2500      	movge	r5, #0
 801264a:	2501      	movlt	r5, #1
 801264c:	f7ff fd40 	bl	80120d0 <_Balloc>
 8012650:	b920      	cbnz	r0, 801265c <__mdiff+0x5c>
 8012652:	4b2e      	ldr	r3, [pc, #184]	; (801270c <__mdiff+0x10c>)
 8012654:	4602      	mov	r2, r0
 8012656:	f240 2145 	movw	r1, #581	; 0x245
 801265a:	e7e5      	b.n	8012628 <__mdiff+0x28>
 801265c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012660:	6926      	ldr	r6, [r4, #16]
 8012662:	60c5      	str	r5, [r0, #12]
 8012664:	f104 0914 	add.w	r9, r4, #20
 8012668:	f108 0514 	add.w	r5, r8, #20
 801266c:	f100 0e14 	add.w	lr, r0, #20
 8012670:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012674:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012678:	f108 0210 	add.w	r2, r8, #16
 801267c:	46f2      	mov	sl, lr
 801267e:	2100      	movs	r1, #0
 8012680:	f859 3b04 	ldr.w	r3, [r9], #4
 8012684:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012688:	fa11 f88b 	uxtah	r8, r1, fp
 801268c:	b299      	uxth	r1, r3
 801268e:	0c1b      	lsrs	r3, r3, #16
 8012690:	eba8 0801 	sub.w	r8, r8, r1
 8012694:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012698:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801269c:	fa1f f888 	uxth.w	r8, r8
 80126a0:	1419      	asrs	r1, r3, #16
 80126a2:	454e      	cmp	r6, r9
 80126a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80126a8:	f84a 3b04 	str.w	r3, [sl], #4
 80126ac:	d8e8      	bhi.n	8012680 <__mdiff+0x80>
 80126ae:	1b33      	subs	r3, r6, r4
 80126b0:	3b15      	subs	r3, #21
 80126b2:	f023 0303 	bic.w	r3, r3, #3
 80126b6:	3304      	adds	r3, #4
 80126b8:	3415      	adds	r4, #21
 80126ba:	42a6      	cmp	r6, r4
 80126bc:	bf38      	it	cc
 80126be:	2304      	movcc	r3, #4
 80126c0:	441d      	add	r5, r3
 80126c2:	4473      	add	r3, lr
 80126c4:	469e      	mov	lr, r3
 80126c6:	462e      	mov	r6, r5
 80126c8:	4566      	cmp	r6, ip
 80126ca:	d30e      	bcc.n	80126ea <__mdiff+0xea>
 80126cc:	f10c 0203 	add.w	r2, ip, #3
 80126d0:	1b52      	subs	r2, r2, r5
 80126d2:	f022 0203 	bic.w	r2, r2, #3
 80126d6:	3d03      	subs	r5, #3
 80126d8:	45ac      	cmp	ip, r5
 80126da:	bf38      	it	cc
 80126dc:	2200      	movcc	r2, #0
 80126de:	4413      	add	r3, r2
 80126e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80126e4:	b17a      	cbz	r2, 8012706 <__mdiff+0x106>
 80126e6:	6107      	str	r7, [r0, #16]
 80126e8:	e7a4      	b.n	8012634 <__mdiff+0x34>
 80126ea:	f856 8b04 	ldr.w	r8, [r6], #4
 80126ee:	fa11 f288 	uxtah	r2, r1, r8
 80126f2:	1414      	asrs	r4, r2, #16
 80126f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80126f8:	b292      	uxth	r2, r2
 80126fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80126fe:	f84e 2b04 	str.w	r2, [lr], #4
 8012702:	1421      	asrs	r1, r4, #16
 8012704:	e7e0      	b.n	80126c8 <__mdiff+0xc8>
 8012706:	3f01      	subs	r7, #1
 8012708:	e7ea      	b.n	80126e0 <__mdiff+0xe0>
 801270a:	bf00      	nop
 801270c:	08018338 	.word	0x08018338
 8012710:	0801835a 	.word	0x0801835a

08012714 <__d2b>:
 8012714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012718:	460f      	mov	r7, r1
 801271a:	2101      	movs	r1, #1
 801271c:	ec59 8b10 	vmov	r8, r9, d0
 8012720:	4616      	mov	r6, r2
 8012722:	f7ff fcd5 	bl	80120d0 <_Balloc>
 8012726:	4604      	mov	r4, r0
 8012728:	b930      	cbnz	r0, 8012738 <__d2b+0x24>
 801272a:	4602      	mov	r2, r0
 801272c:	4b24      	ldr	r3, [pc, #144]	; (80127c0 <__d2b+0xac>)
 801272e:	4825      	ldr	r0, [pc, #148]	; (80127c4 <__d2b+0xb0>)
 8012730:	f240 310f 	movw	r1, #783	; 0x30f
 8012734:	f000 fa34 	bl	8012ba0 <__assert_func>
 8012738:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801273c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012740:	bb2d      	cbnz	r5, 801278e <__d2b+0x7a>
 8012742:	9301      	str	r3, [sp, #4]
 8012744:	f1b8 0300 	subs.w	r3, r8, #0
 8012748:	d026      	beq.n	8012798 <__d2b+0x84>
 801274a:	4668      	mov	r0, sp
 801274c:	9300      	str	r3, [sp, #0]
 801274e:	f7ff fd87 	bl	8012260 <__lo0bits>
 8012752:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012756:	b1e8      	cbz	r0, 8012794 <__d2b+0x80>
 8012758:	f1c0 0320 	rsb	r3, r0, #32
 801275c:	fa02 f303 	lsl.w	r3, r2, r3
 8012760:	430b      	orrs	r3, r1
 8012762:	40c2      	lsrs	r2, r0
 8012764:	6163      	str	r3, [r4, #20]
 8012766:	9201      	str	r2, [sp, #4]
 8012768:	9b01      	ldr	r3, [sp, #4]
 801276a:	61a3      	str	r3, [r4, #24]
 801276c:	2b00      	cmp	r3, #0
 801276e:	bf14      	ite	ne
 8012770:	2202      	movne	r2, #2
 8012772:	2201      	moveq	r2, #1
 8012774:	6122      	str	r2, [r4, #16]
 8012776:	b1bd      	cbz	r5, 80127a8 <__d2b+0x94>
 8012778:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801277c:	4405      	add	r5, r0
 801277e:	603d      	str	r5, [r7, #0]
 8012780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012784:	6030      	str	r0, [r6, #0]
 8012786:	4620      	mov	r0, r4
 8012788:	b003      	add	sp, #12
 801278a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012792:	e7d6      	b.n	8012742 <__d2b+0x2e>
 8012794:	6161      	str	r1, [r4, #20]
 8012796:	e7e7      	b.n	8012768 <__d2b+0x54>
 8012798:	a801      	add	r0, sp, #4
 801279a:	f7ff fd61 	bl	8012260 <__lo0bits>
 801279e:	9b01      	ldr	r3, [sp, #4]
 80127a0:	6163      	str	r3, [r4, #20]
 80127a2:	3020      	adds	r0, #32
 80127a4:	2201      	movs	r2, #1
 80127a6:	e7e5      	b.n	8012774 <__d2b+0x60>
 80127a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80127ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80127b0:	6038      	str	r0, [r7, #0]
 80127b2:	6918      	ldr	r0, [r3, #16]
 80127b4:	f7ff fd34 	bl	8012220 <__hi0bits>
 80127b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80127bc:	e7e2      	b.n	8012784 <__d2b+0x70>
 80127be:	bf00      	nop
 80127c0:	08018338 	.word	0x08018338
 80127c4:	0801835a 	.word	0x0801835a

080127c8 <__sread>:
 80127c8:	b510      	push	{r4, lr}
 80127ca:	460c      	mov	r4, r1
 80127cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127d0:	f000 f9c2 	bl	8012b58 <_read_r>
 80127d4:	2800      	cmp	r0, #0
 80127d6:	bfab      	itete	ge
 80127d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80127da:	89a3      	ldrhlt	r3, [r4, #12]
 80127dc:	181b      	addge	r3, r3, r0
 80127de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80127e2:	bfac      	ite	ge
 80127e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80127e6:	81a3      	strhlt	r3, [r4, #12]
 80127e8:	bd10      	pop	{r4, pc}

080127ea <__swrite>:
 80127ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127ee:	461f      	mov	r7, r3
 80127f0:	898b      	ldrh	r3, [r1, #12]
 80127f2:	05db      	lsls	r3, r3, #23
 80127f4:	4605      	mov	r5, r0
 80127f6:	460c      	mov	r4, r1
 80127f8:	4616      	mov	r6, r2
 80127fa:	d505      	bpl.n	8012808 <__swrite+0x1e>
 80127fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012800:	2302      	movs	r3, #2
 8012802:	2200      	movs	r2, #0
 8012804:	f000 f996 	bl	8012b34 <_lseek_r>
 8012808:	89a3      	ldrh	r3, [r4, #12]
 801280a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801280e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012812:	81a3      	strh	r3, [r4, #12]
 8012814:	4632      	mov	r2, r6
 8012816:	463b      	mov	r3, r7
 8012818:	4628      	mov	r0, r5
 801281a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801281e:	f000 b9ad 	b.w	8012b7c <_write_r>

08012822 <__sseek>:
 8012822:	b510      	push	{r4, lr}
 8012824:	460c      	mov	r4, r1
 8012826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801282a:	f000 f983 	bl	8012b34 <_lseek_r>
 801282e:	1c43      	adds	r3, r0, #1
 8012830:	89a3      	ldrh	r3, [r4, #12]
 8012832:	bf15      	itete	ne
 8012834:	6560      	strne	r0, [r4, #84]	; 0x54
 8012836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801283a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801283e:	81a3      	strheq	r3, [r4, #12]
 8012840:	bf18      	it	ne
 8012842:	81a3      	strhne	r3, [r4, #12]
 8012844:	bd10      	pop	{r4, pc}

08012846 <__sclose>:
 8012846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801284a:	f000 b941 	b.w	8012ad0 <_close_r>

0801284e <_realloc_r>:
 801284e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012852:	4680      	mov	r8, r0
 8012854:	4614      	mov	r4, r2
 8012856:	460e      	mov	r6, r1
 8012858:	b921      	cbnz	r1, 8012864 <_realloc_r+0x16>
 801285a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801285e:	4611      	mov	r1, r2
 8012860:	f7fd bebc 	b.w	80105dc <_malloc_r>
 8012864:	b92a      	cbnz	r2, 8012872 <_realloc_r+0x24>
 8012866:	f7ff f89d 	bl	80119a4 <_free_r>
 801286a:	4625      	mov	r5, r4
 801286c:	4628      	mov	r0, r5
 801286e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012872:	f000 f9db 	bl	8012c2c <_malloc_usable_size_r>
 8012876:	4284      	cmp	r4, r0
 8012878:	4607      	mov	r7, r0
 801287a:	d802      	bhi.n	8012882 <_realloc_r+0x34>
 801287c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012880:	d812      	bhi.n	80128a8 <_realloc_r+0x5a>
 8012882:	4621      	mov	r1, r4
 8012884:	4640      	mov	r0, r8
 8012886:	f7fd fea9 	bl	80105dc <_malloc_r>
 801288a:	4605      	mov	r5, r0
 801288c:	2800      	cmp	r0, #0
 801288e:	d0ed      	beq.n	801286c <_realloc_r+0x1e>
 8012890:	42bc      	cmp	r4, r7
 8012892:	4622      	mov	r2, r4
 8012894:	4631      	mov	r1, r6
 8012896:	bf28      	it	cs
 8012898:	463a      	movcs	r2, r7
 801289a:	f7fe f9fa 	bl	8010c92 <memcpy>
 801289e:	4631      	mov	r1, r6
 80128a0:	4640      	mov	r0, r8
 80128a2:	f7ff f87f 	bl	80119a4 <_free_r>
 80128a6:	e7e1      	b.n	801286c <_realloc_r+0x1e>
 80128a8:	4635      	mov	r5, r6
 80128aa:	e7df      	b.n	801286c <_realloc_r+0x1e>

080128ac <__swbuf_r>:
 80128ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ae:	460e      	mov	r6, r1
 80128b0:	4614      	mov	r4, r2
 80128b2:	4605      	mov	r5, r0
 80128b4:	b118      	cbz	r0, 80128be <__swbuf_r+0x12>
 80128b6:	6a03      	ldr	r3, [r0, #32]
 80128b8:	b90b      	cbnz	r3, 80128be <__swbuf_r+0x12>
 80128ba:	f7fe f96b 	bl	8010b94 <__sinit>
 80128be:	69a3      	ldr	r3, [r4, #24]
 80128c0:	60a3      	str	r3, [r4, #8]
 80128c2:	89a3      	ldrh	r3, [r4, #12]
 80128c4:	071a      	lsls	r2, r3, #28
 80128c6:	d525      	bpl.n	8012914 <__swbuf_r+0x68>
 80128c8:	6923      	ldr	r3, [r4, #16]
 80128ca:	b31b      	cbz	r3, 8012914 <__swbuf_r+0x68>
 80128cc:	6823      	ldr	r3, [r4, #0]
 80128ce:	6922      	ldr	r2, [r4, #16]
 80128d0:	1a98      	subs	r0, r3, r2
 80128d2:	6963      	ldr	r3, [r4, #20]
 80128d4:	b2f6      	uxtb	r6, r6
 80128d6:	4283      	cmp	r3, r0
 80128d8:	4637      	mov	r7, r6
 80128da:	dc04      	bgt.n	80128e6 <__swbuf_r+0x3a>
 80128dc:	4621      	mov	r1, r4
 80128de:	4628      	mov	r0, r5
 80128e0:	f7ff fbce 	bl	8012080 <_fflush_r>
 80128e4:	b9e0      	cbnz	r0, 8012920 <__swbuf_r+0x74>
 80128e6:	68a3      	ldr	r3, [r4, #8]
 80128e8:	3b01      	subs	r3, #1
 80128ea:	60a3      	str	r3, [r4, #8]
 80128ec:	6823      	ldr	r3, [r4, #0]
 80128ee:	1c5a      	adds	r2, r3, #1
 80128f0:	6022      	str	r2, [r4, #0]
 80128f2:	701e      	strb	r6, [r3, #0]
 80128f4:	6962      	ldr	r2, [r4, #20]
 80128f6:	1c43      	adds	r3, r0, #1
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d004      	beq.n	8012906 <__swbuf_r+0x5a>
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	07db      	lsls	r3, r3, #31
 8012900:	d506      	bpl.n	8012910 <__swbuf_r+0x64>
 8012902:	2e0a      	cmp	r6, #10
 8012904:	d104      	bne.n	8012910 <__swbuf_r+0x64>
 8012906:	4621      	mov	r1, r4
 8012908:	4628      	mov	r0, r5
 801290a:	f7ff fbb9 	bl	8012080 <_fflush_r>
 801290e:	b938      	cbnz	r0, 8012920 <__swbuf_r+0x74>
 8012910:	4638      	mov	r0, r7
 8012912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012914:	4621      	mov	r1, r4
 8012916:	4628      	mov	r0, r5
 8012918:	f000 f806 	bl	8012928 <__swsetup_r>
 801291c:	2800      	cmp	r0, #0
 801291e:	d0d5      	beq.n	80128cc <__swbuf_r+0x20>
 8012920:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012924:	e7f4      	b.n	8012910 <__swbuf_r+0x64>
	...

08012928 <__swsetup_r>:
 8012928:	b538      	push	{r3, r4, r5, lr}
 801292a:	4b2a      	ldr	r3, [pc, #168]	; (80129d4 <__swsetup_r+0xac>)
 801292c:	4605      	mov	r5, r0
 801292e:	6818      	ldr	r0, [r3, #0]
 8012930:	460c      	mov	r4, r1
 8012932:	b118      	cbz	r0, 801293c <__swsetup_r+0x14>
 8012934:	6a03      	ldr	r3, [r0, #32]
 8012936:	b90b      	cbnz	r3, 801293c <__swsetup_r+0x14>
 8012938:	f7fe f92c 	bl	8010b94 <__sinit>
 801293c:	89a3      	ldrh	r3, [r4, #12]
 801293e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012942:	0718      	lsls	r0, r3, #28
 8012944:	d422      	bmi.n	801298c <__swsetup_r+0x64>
 8012946:	06d9      	lsls	r1, r3, #27
 8012948:	d407      	bmi.n	801295a <__swsetup_r+0x32>
 801294a:	2309      	movs	r3, #9
 801294c:	602b      	str	r3, [r5, #0]
 801294e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012952:	81a3      	strh	r3, [r4, #12]
 8012954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012958:	e034      	b.n	80129c4 <__swsetup_r+0x9c>
 801295a:	0758      	lsls	r0, r3, #29
 801295c:	d512      	bpl.n	8012984 <__swsetup_r+0x5c>
 801295e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012960:	b141      	cbz	r1, 8012974 <__swsetup_r+0x4c>
 8012962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012966:	4299      	cmp	r1, r3
 8012968:	d002      	beq.n	8012970 <__swsetup_r+0x48>
 801296a:	4628      	mov	r0, r5
 801296c:	f7ff f81a 	bl	80119a4 <_free_r>
 8012970:	2300      	movs	r3, #0
 8012972:	6363      	str	r3, [r4, #52]	; 0x34
 8012974:	89a3      	ldrh	r3, [r4, #12]
 8012976:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801297a:	81a3      	strh	r3, [r4, #12]
 801297c:	2300      	movs	r3, #0
 801297e:	6063      	str	r3, [r4, #4]
 8012980:	6923      	ldr	r3, [r4, #16]
 8012982:	6023      	str	r3, [r4, #0]
 8012984:	89a3      	ldrh	r3, [r4, #12]
 8012986:	f043 0308 	orr.w	r3, r3, #8
 801298a:	81a3      	strh	r3, [r4, #12]
 801298c:	6923      	ldr	r3, [r4, #16]
 801298e:	b94b      	cbnz	r3, 80129a4 <__swsetup_r+0x7c>
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801299a:	d003      	beq.n	80129a4 <__swsetup_r+0x7c>
 801299c:	4621      	mov	r1, r4
 801299e:	4628      	mov	r0, r5
 80129a0:	f000 f840 	bl	8012a24 <__smakebuf_r>
 80129a4:	89a0      	ldrh	r0, [r4, #12]
 80129a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129aa:	f010 0301 	ands.w	r3, r0, #1
 80129ae:	d00a      	beq.n	80129c6 <__swsetup_r+0x9e>
 80129b0:	2300      	movs	r3, #0
 80129b2:	60a3      	str	r3, [r4, #8]
 80129b4:	6963      	ldr	r3, [r4, #20]
 80129b6:	425b      	negs	r3, r3
 80129b8:	61a3      	str	r3, [r4, #24]
 80129ba:	6923      	ldr	r3, [r4, #16]
 80129bc:	b943      	cbnz	r3, 80129d0 <__swsetup_r+0xa8>
 80129be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80129c2:	d1c4      	bne.n	801294e <__swsetup_r+0x26>
 80129c4:	bd38      	pop	{r3, r4, r5, pc}
 80129c6:	0781      	lsls	r1, r0, #30
 80129c8:	bf58      	it	pl
 80129ca:	6963      	ldrpl	r3, [r4, #20]
 80129cc:	60a3      	str	r3, [r4, #8]
 80129ce:	e7f4      	b.n	80129ba <__swsetup_r+0x92>
 80129d0:	2000      	movs	r0, #0
 80129d2:	e7f7      	b.n	80129c4 <__swsetup_r+0x9c>
 80129d4:	20000090 	.word	0x20000090

080129d8 <__swhatbuf_r>:
 80129d8:	b570      	push	{r4, r5, r6, lr}
 80129da:	460c      	mov	r4, r1
 80129dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129e0:	2900      	cmp	r1, #0
 80129e2:	b096      	sub	sp, #88	; 0x58
 80129e4:	4615      	mov	r5, r2
 80129e6:	461e      	mov	r6, r3
 80129e8:	da0d      	bge.n	8012a06 <__swhatbuf_r+0x2e>
 80129ea:	89a3      	ldrh	r3, [r4, #12]
 80129ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80129f0:	f04f 0100 	mov.w	r1, #0
 80129f4:	bf0c      	ite	eq
 80129f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80129fa:	2340      	movne	r3, #64	; 0x40
 80129fc:	2000      	movs	r0, #0
 80129fe:	6031      	str	r1, [r6, #0]
 8012a00:	602b      	str	r3, [r5, #0]
 8012a02:	b016      	add	sp, #88	; 0x58
 8012a04:	bd70      	pop	{r4, r5, r6, pc}
 8012a06:	466a      	mov	r2, sp
 8012a08:	f000 f872 	bl	8012af0 <_fstat_r>
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	dbec      	blt.n	80129ea <__swhatbuf_r+0x12>
 8012a10:	9901      	ldr	r1, [sp, #4]
 8012a12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012a16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012a1a:	4259      	negs	r1, r3
 8012a1c:	4159      	adcs	r1, r3
 8012a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a22:	e7eb      	b.n	80129fc <__swhatbuf_r+0x24>

08012a24 <__smakebuf_r>:
 8012a24:	898b      	ldrh	r3, [r1, #12]
 8012a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a28:	079d      	lsls	r5, r3, #30
 8012a2a:	4606      	mov	r6, r0
 8012a2c:	460c      	mov	r4, r1
 8012a2e:	d507      	bpl.n	8012a40 <__smakebuf_r+0x1c>
 8012a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	6123      	str	r3, [r4, #16]
 8012a38:	2301      	movs	r3, #1
 8012a3a:	6163      	str	r3, [r4, #20]
 8012a3c:	b002      	add	sp, #8
 8012a3e:	bd70      	pop	{r4, r5, r6, pc}
 8012a40:	ab01      	add	r3, sp, #4
 8012a42:	466a      	mov	r2, sp
 8012a44:	f7ff ffc8 	bl	80129d8 <__swhatbuf_r>
 8012a48:	9900      	ldr	r1, [sp, #0]
 8012a4a:	4605      	mov	r5, r0
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	f7fd fdc5 	bl	80105dc <_malloc_r>
 8012a52:	b948      	cbnz	r0, 8012a68 <__smakebuf_r+0x44>
 8012a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a58:	059a      	lsls	r2, r3, #22
 8012a5a:	d4ef      	bmi.n	8012a3c <__smakebuf_r+0x18>
 8012a5c:	f023 0303 	bic.w	r3, r3, #3
 8012a60:	f043 0302 	orr.w	r3, r3, #2
 8012a64:	81a3      	strh	r3, [r4, #12]
 8012a66:	e7e3      	b.n	8012a30 <__smakebuf_r+0xc>
 8012a68:	89a3      	ldrh	r3, [r4, #12]
 8012a6a:	6020      	str	r0, [r4, #0]
 8012a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a70:	81a3      	strh	r3, [r4, #12]
 8012a72:	9b00      	ldr	r3, [sp, #0]
 8012a74:	6163      	str	r3, [r4, #20]
 8012a76:	9b01      	ldr	r3, [sp, #4]
 8012a78:	6120      	str	r0, [r4, #16]
 8012a7a:	b15b      	cbz	r3, 8012a94 <__smakebuf_r+0x70>
 8012a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a80:	4630      	mov	r0, r6
 8012a82:	f000 f847 	bl	8012b14 <_isatty_r>
 8012a86:	b128      	cbz	r0, 8012a94 <__smakebuf_r+0x70>
 8012a88:	89a3      	ldrh	r3, [r4, #12]
 8012a8a:	f023 0303 	bic.w	r3, r3, #3
 8012a8e:	f043 0301 	orr.w	r3, r3, #1
 8012a92:	81a3      	strh	r3, [r4, #12]
 8012a94:	89a3      	ldrh	r3, [r4, #12]
 8012a96:	431d      	orrs	r5, r3
 8012a98:	81a5      	strh	r5, [r4, #12]
 8012a9a:	e7cf      	b.n	8012a3c <__smakebuf_r+0x18>

08012a9c <memmove>:
 8012a9c:	4288      	cmp	r0, r1
 8012a9e:	b510      	push	{r4, lr}
 8012aa0:	eb01 0402 	add.w	r4, r1, r2
 8012aa4:	d902      	bls.n	8012aac <memmove+0x10>
 8012aa6:	4284      	cmp	r4, r0
 8012aa8:	4623      	mov	r3, r4
 8012aaa:	d807      	bhi.n	8012abc <memmove+0x20>
 8012aac:	1e43      	subs	r3, r0, #1
 8012aae:	42a1      	cmp	r1, r4
 8012ab0:	d008      	beq.n	8012ac4 <memmove+0x28>
 8012ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012aba:	e7f8      	b.n	8012aae <memmove+0x12>
 8012abc:	4402      	add	r2, r0
 8012abe:	4601      	mov	r1, r0
 8012ac0:	428a      	cmp	r2, r1
 8012ac2:	d100      	bne.n	8012ac6 <memmove+0x2a>
 8012ac4:	bd10      	pop	{r4, pc}
 8012ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012ace:	e7f7      	b.n	8012ac0 <memmove+0x24>

08012ad0 <_close_r>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	4d06      	ldr	r5, [pc, #24]	; (8012aec <_close_r+0x1c>)
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	4608      	mov	r0, r1
 8012ada:	602b      	str	r3, [r5, #0]
 8012adc:	f7f2 f95b 	bl	8004d96 <_close>
 8012ae0:	1c43      	adds	r3, r0, #1
 8012ae2:	d102      	bne.n	8012aea <_close_r+0x1a>
 8012ae4:	682b      	ldr	r3, [r5, #0]
 8012ae6:	b103      	cbz	r3, 8012aea <_close_r+0x1a>
 8012ae8:	6023      	str	r3, [r4, #0]
 8012aea:	bd38      	pop	{r3, r4, r5, pc}
 8012aec:	20000c64 	.word	0x20000c64

08012af0 <_fstat_r>:
 8012af0:	b538      	push	{r3, r4, r5, lr}
 8012af2:	4d07      	ldr	r5, [pc, #28]	; (8012b10 <_fstat_r+0x20>)
 8012af4:	2300      	movs	r3, #0
 8012af6:	4604      	mov	r4, r0
 8012af8:	4608      	mov	r0, r1
 8012afa:	4611      	mov	r1, r2
 8012afc:	602b      	str	r3, [r5, #0]
 8012afe:	f7f2 f956 	bl	8004dae <_fstat>
 8012b02:	1c43      	adds	r3, r0, #1
 8012b04:	d102      	bne.n	8012b0c <_fstat_r+0x1c>
 8012b06:	682b      	ldr	r3, [r5, #0]
 8012b08:	b103      	cbz	r3, 8012b0c <_fstat_r+0x1c>
 8012b0a:	6023      	str	r3, [r4, #0]
 8012b0c:	bd38      	pop	{r3, r4, r5, pc}
 8012b0e:	bf00      	nop
 8012b10:	20000c64 	.word	0x20000c64

08012b14 <_isatty_r>:
 8012b14:	b538      	push	{r3, r4, r5, lr}
 8012b16:	4d06      	ldr	r5, [pc, #24]	; (8012b30 <_isatty_r+0x1c>)
 8012b18:	2300      	movs	r3, #0
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	4608      	mov	r0, r1
 8012b1e:	602b      	str	r3, [r5, #0]
 8012b20:	f7f2 f955 	bl	8004dce <_isatty>
 8012b24:	1c43      	adds	r3, r0, #1
 8012b26:	d102      	bne.n	8012b2e <_isatty_r+0x1a>
 8012b28:	682b      	ldr	r3, [r5, #0]
 8012b2a:	b103      	cbz	r3, 8012b2e <_isatty_r+0x1a>
 8012b2c:	6023      	str	r3, [r4, #0]
 8012b2e:	bd38      	pop	{r3, r4, r5, pc}
 8012b30:	20000c64 	.word	0x20000c64

08012b34 <_lseek_r>:
 8012b34:	b538      	push	{r3, r4, r5, lr}
 8012b36:	4d07      	ldr	r5, [pc, #28]	; (8012b54 <_lseek_r+0x20>)
 8012b38:	4604      	mov	r4, r0
 8012b3a:	4608      	mov	r0, r1
 8012b3c:	4611      	mov	r1, r2
 8012b3e:	2200      	movs	r2, #0
 8012b40:	602a      	str	r2, [r5, #0]
 8012b42:	461a      	mov	r2, r3
 8012b44:	f7f2 f94e 	bl	8004de4 <_lseek>
 8012b48:	1c43      	adds	r3, r0, #1
 8012b4a:	d102      	bne.n	8012b52 <_lseek_r+0x1e>
 8012b4c:	682b      	ldr	r3, [r5, #0]
 8012b4e:	b103      	cbz	r3, 8012b52 <_lseek_r+0x1e>
 8012b50:	6023      	str	r3, [r4, #0]
 8012b52:	bd38      	pop	{r3, r4, r5, pc}
 8012b54:	20000c64 	.word	0x20000c64

08012b58 <_read_r>:
 8012b58:	b538      	push	{r3, r4, r5, lr}
 8012b5a:	4d07      	ldr	r5, [pc, #28]	; (8012b78 <_read_r+0x20>)
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	4608      	mov	r0, r1
 8012b60:	4611      	mov	r1, r2
 8012b62:	2200      	movs	r2, #0
 8012b64:	602a      	str	r2, [r5, #0]
 8012b66:	461a      	mov	r2, r3
 8012b68:	f7f2 f8dc 	bl	8004d24 <_read>
 8012b6c:	1c43      	adds	r3, r0, #1
 8012b6e:	d102      	bne.n	8012b76 <_read_r+0x1e>
 8012b70:	682b      	ldr	r3, [r5, #0]
 8012b72:	b103      	cbz	r3, 8012b76 <_read_r+0x1e>
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	bd38      	pop	{r3, r4, r5, pc}
 8012b78:	20000c64 	.word	0x20000c64

08012b7c <_write_r>:
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	4d07      	ldr	r5, [pc, #28]	; (8012b9c <_write_r+0x20>)
 8012b80:	4604      	mov	r4, r0
 8012b82:	4608      	mov	r0, r1
 8012b84:	4611      	mov	r1, r2
 8012b86:	2200      	movs	r2, #0
 8012b88:	602a      	str	r2, [r5, #0]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f7f2 f8e7 	bl	8004d5e <_write>
 8012b90:	1c43      	adds	r3, r0, #1
 8012b92:	d102      	bne.n	8012b9a <_write_r+0x1e>
 8012b94:	682b      	ldr	r3, [r5, #0]
 8012b96:	b103      	cbz	r3, 8012b9a <_write_r+0x1e>
 8012b98:	6023      	str	r3, [r4, #0]
 8012b9a:	bd38      	pop	{r3, r4, r5, pc}
 8012b9c:	20000c64 	.word	0x20000c64

08012ba0 <__assert_func>:
 8012ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ba2:	4614      	mov	r4, r2
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	4b09      	ldr	r3, [pc, #36]	; (8012bcc <__assert_func+0x2c>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4605      	mov	r5, r0
 8012bac:	68d8      	ldr	r0, [r3, #12]
 8012bae:	b14c      	cbz	r4, 8012bc4 <__assert_func+0x24>
 8012bb0:	4b07      	ldr	r3, [pc, #28]	; (8012bd0 <__assert_func+0x30>)
 8012bb2:	9100      	str	r1, [sp, #0]
 8012bb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012bb8:	4906      	ldr	r1, [pc, #24]	; (8012bd4 <__assert_func+0x34>)
 8012bba:	462b      	mov	r3, r5
 8012bbc:	f000 f83e 	bl	8012c3c <fiprintf>
 8012bc0:	f000 f85b 	bl	8012c7a <abort>
 8012bc4:	4b04      	ldr	r3, [pc, #16]	; (8012bd8 <__assert_func+0x38>)
 8012bc6:	461c      	mov	r4, r3
 8012bc8:	e7f3      	b.n	8012bb2 <__assert_func+0x12>
 8012bca:	bf00      	nop
 8012bcc:	20000090 	.word	0x20000090
 8012bd0:	080185bf 	.word	0x080185bf
 8012bd4:	080185cc 	.word	0x080185cc
 8012bd8:	080185fa 	.word	0x080185fa

08012bdc <_calloc_r>:
 8012bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bde:	fba1 2402 	umull	r2, r4, r1, r2
 8012be2:	b94c      	cbnz	r4, 8012bf8 <_calloc_r+0x1c>
 8012be4:	4611      	mov	r1, r2
 8012be6:	9201      	str	r2, [sp, #4]
 8012be8:	f7fd fcf8 	bl	80105dc <_malloc_r>
 8012bec:	9a01      	ldr	r2, [sp, #4]
 8012bee:	4605      	mov	r5, r0
 8012bf0:	b930      	cbnz	r0, 8012c00 <_calloc_r+0x24>
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	b003      	add	sp, #12
 8012bf6:	bd30      	pop	{r4, r5, pc}
 8012bf8:	220c      	movs	r2, #12
 8012bfa:	6002      	str	r2, [r0, #0]
 8012bfc:	2500      	movs	r5, #0
 8012bfe:	e7f8      	b.n	8012bf2 <_calloc_r+0x16>
 8012c00:	4621      	mov	r1, r4
 8012c02:	f7fd fffd 	bl	8010c00 <memset>
 8012c06:	e7f4      	b.n	8012bf2 <_calloc_r+0x16>

08012c08 <__ascii_mbtowc>:
 8012c08:	b082      	sub	sp, #8
 8012c0a:	b901      	cbnz	r1, 8012c0e <__ascii_mbtowc+0x6>
 8012c0c:	a901      	add	r1, sp, #4
 8012c0e:	b142      	cbz	r2, 8012c22 <__ascii_mbtowc+0x1a>
 8012c10:	b14b      	cbz	r3, 8012c26 <__ascii_mbtowc+0x1e>
 8012c12:	7813      	ldrb	r3, [r2, #0]
 8012c14:	600b      	str	r3, [r1, #0]
 8012c16:	7812      	ldrb	r2, [r2, #0]
 8012c18:	1e10      	subs	r0, r2, #0
 8012c1a:	bf18      	it	ne
 8012c1c:	2001      	movne	r0, #1
 8012c1e:	b002      	add	sp, #8
 8012c20:	4770      	bx	lr
 8012c22:	4610      	mov	r0, r2
 8012c24:	e7fb      	b.n	8012c1e <__ascii_mbtowc+0x16>
 8012c26:	f06f 0001 	mvn.w	r0, #1
 8012c2a:	e7f8      	b.n	8012c1e <__ascii_mbtowc+0x16>

08012c2c <_malloc_usable_size_r>:
 8012c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c30:	1f18      	subs	r0, r3, #4
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	bfbc      	itt	lt
 8012c36:	580b      	ldrlt	r3, [r1, r0]
 8012c38:	18c0      	addlt	r0, r0, r3
 8012c3a:	4770      	bx	lr

08012c3c <fiprintf>:
 8012c3c:	b40e      	push	{r1, r2, r3}
 8012c3e:	b503      	push	{r0, r1, lr}
 8012c40:	4601      	mov	r1, r0
 8012c42:	ab03      	add	r3, sp, #12
 8012c44:	4805      	ldr	r0, [pc, #20]	; (8012c5c <fiprintf+0x20>)
 8012c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c4a:	6800      	ldr	r0, [r0, #0]
 8012c4c:	9301      	str	r3, [sp, #4]
 8012c4e:	f7ff f877 	bl	8011d40 <_vfiprintf_r>
 8012c52:	b002      	add	sp, #8
 8012c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c58:	b003      	add	sp, #12
 8012c5a:	4770      	bx	lr
 8012c5c:	20000090 	.word	0x20000090

08012c60 <__ascii_wctomb>:
 8012c60:	b149      	cbz	r1, 8012c76 <__ascii_wctomb+0x16>
 8012c62:	2aff      	cmp	r2, #255	; 0xff
 8012c64:	bf85      	ittet	hi
 8012c66:	238a      	movhi	r3, #138	; 0x8a
 8012c68:	6003      	strhi	r3, [r0, #0]
 8012c6a:	700a      	strbls	r2, [r1, #0]
 8012c6c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012c70:	bf98      	it	ls
 8012c72:	2001      	movls	r0, #1
 8012c74:	4770      	bx	lr
 8012c76:	4608      	mov	r0, r1
 8012c78:	4770      	bx	lr

08012c7a <abort>:
 8012c7a:	b508      	push	{r3, lr}
 8012c7c:	2006      	movs	r0, #6
 8012c7e:	f000 f82b 	bl	8012cd8 <raise>
 8012c82:	2001      	movs	r0, #1
 8012c84:	f7f2 f844 	bl	8004d10 <_exit>

08012c88 <_raise_r>:
 8012c88:	291f      	cmp	r1, #31
 8012c8a:	b538      	push	{r3, r4, r5, lr}
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	460d      	mov	r5, r1
 8012c90:	d904      	bls.n	8012c9c <_raise_r+0x14>
 8012c92:	2316      	movs	r3, #22
 8012c94:	6003      	str	r3, [r0, #0]
 8012c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c9a:	bd38      	pop	{r3, r4, r5, pc}
 8012c9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012c9e:	b112      	cbz	r2, 8012ca6 <_raise_r+0x1e>
 8012ca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ca4:	b94b      	cbnz	r3, 8012cba <_raise_r+0x32>
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f000 f830 	bl	8012d0c <_getpid_r>
 8012cac:	462a      	mov	r2, r5
 8012cae:	4601      	mov	r1, r0
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cb6:	f000 b817 	b.w	8012ce8 <_kill_r>
 8012cba:	2b01      	cmp	r3, #1
 8012cbc:	d00a      	beq.n	8012cd4 <_raise_r+0x4c>
 8012cbe:	1c59      	adds	r1, r3, #1
 8012cc0:	d103      	bne.n	8012cca <_raise_r+0x42>
 8012cc2:	2316      	movs	r3, #22
 8012cc4:	6003      	str	r3, [r0, #0]
 8012cc6:	2001      	movs	r0, #1
 8012cc8:	e7e7      	b.n	8012c9a <_raise_r+0x12>
 8012cca:	2400      	movs	r4, #0
 8012ccc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	4798      	blx	r3
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	e7e0      	b.n	8012c9a <_raise_r+0x12>

08012cd8 <raise>:
 8012cd8:	4b02      	ldr	r3, [pc, #8]	; (8012ce4 <raise+0xc>)
 8012cda:	4601      	mov	r1, r0
 8012cdc:	6818      	ldr	r0, [r3, #0]
 8012cde:	f7ff bfd3 	b.w	8012c88 <_raise_r>
 8012ce2:	bf00      	nop
 8012ce4:	20000090 	.word	0x20000090

08012ce8 <_kill_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4d07      	ldr	r5, [pc, #28]	; (8012d08 <_kill_r+0x20>)
 8012cec:	2300      	movs	r3, #0
 8012cee:	4604      	mov	r4, r0
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	4611      	mov	r1, r2
 8012cf4:	602b      	str	r3, [r5, #0]
 8012cf6:	f7f1 fffb 	bl	8004cf0 <_kill>
 8012cfa:	1c43      	adds	r3, r0, #1
 8012cfc:	d102      	bne.n	8012d04 <_kill_r+0x1c>
 8012cfe:	682b      	ldr	r3, [r5, #0]
 8012d00:	b103      	cbz	r3, 8012d04 <_kill_r+0x1c>
 8012d02:	6023      	str	r3, [r4, #0]
 8012d04:	bd38      	pop	{r3, r4, r5, pc}
 8012d06:	bf00      	nop
 8012d08:	20000c64 	.word	0x20000c64

08012d0c <_getpid_r>:
 8012d0c:	f7f1 bfe8 	b.w	8004ce0 <_getpid>

08012d10 <_init>:
 8012d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d12:	bf00      	nop
 8012d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d16:	bc08      	pop	{r3}
 8012d18:	469e      	mov	lr, r3
 8012d1a:	4770      	bx	lr

08012d1c <_fini>:
 8012d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d1e:	bf00      	nop
 8012d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d22:	bc08      	pop	{r3}
 8012d24:	469e      	mov	lr, r3
 8012d26:	4770      	bx	lr

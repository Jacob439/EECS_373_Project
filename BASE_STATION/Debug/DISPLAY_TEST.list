
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f44  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058a0  08012108  08012108  00013108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080179a8  080179a8  000191f4  2**0
                  CONTENTS
  4 .ARM          00000008  080179a8  080179a8  000189a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080179b0  080179b0  000191f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080179b0  080179b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080179b4  080179b4  000189b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080179b8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  200001f4  08017bac  000191f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  08017bac  00019bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000259f4  00000000  00000000  00019224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ee  00000000  00000000  0003ec18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a8  00000000  00000000  00043208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a4f  00000000  00000000  000453b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003002f  00000000  00000000  00046dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d3f  00000000  00000000  00076e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129611  00000000  00000000  0009fb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c917e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2a8  00000000  00000000  001c91c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001d346c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080120ec 	.word	0x080120ec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	080120ec 	.word	0x080120ec

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <initTempHumSensor+0x1c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000210 	.word	0x20000210

08000ee8 <req_measurements>:

// send command to sensor
void req_measurements() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000eee:	f640 532c 	movw	r3, #3372	@ 0xd2c
 8000ef2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <req_measurements+0x28>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	1d3a      	adds	r2, r7, #4
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2302      	movs	r3, #2
 8000f02:	2188      	movs	r1, #136	@ 0x88
 8000f04:	f006 fffc 	bl	8007f00 <HAL_I2C_Master_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000210 	.word	0x20000210

08000f14 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[6];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 6, 1000);
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <read_raw_measurements+0x58>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	463a      	mov	r2, r7
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2306      	movs	r3, #6
 8000f28:	2189      	movs	r1, #137	@ 0x89
 8000f2a:	f007 f901 	bl	8008130 <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000f2e:	783b      	ldrb	r3, [r7, #0]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	787b      	ldrb	r3, [r7, #1]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	813b      	strh	r3, [r7, #8]
	data.hum = buf[3] << 8 | buf[4];
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	793b      	ldrb	r3, [r7, #4]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	817b      	strh	r3, [r7, #10]
	return data;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	2300      	movs	r3, #0
 8000f58:	89ba      	ldrh	r2, [r7, #12]
 8000f5a:	f362 030f 	bfi	r3, r2, #0, #16
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000210 	.word	0x20000210

08000f70 <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 8000f76:	f7ff ffb7 	bl	8000ee8 <req_measurements>
	raw_data = read_raw_measurements();
 8000f7a:	f7ff ffcb 	bl	8000f14 <read_raw_measurements>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 8000f82:	8abb      	ldrh	r3, [r7, #20]
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 8000f86:	8afb      	ldrh	r3, [r7, #22]
 8000f88:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f94:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000ff8 <get_temp_hum+0x88>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ffc <get_temp_hum+0x8c>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001000 <get_temp_hum+0x90>
 8000fa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fac:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fba:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000ff8 <get_temp_hum+0x88>
 8000fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001004 <get_temp_hum+0x94>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fda:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	ee07 2a10 	vmov	s14, r2
 8000fe6:	ee07 3a90 	vmov	s15, r3
}
 8000fea:	eeb0 0a47 	vmov.f32	s0, s14
 8000fee:	eef0 0a67 	vmov.f32	s1, s15
 8000ff2:	3728      	adds	r7, #40	@ 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	477fff00 	.word	0x477fff00
 8000ffc:	439d8000 	.word	0x439d8000
 8001000:	42340000 	.word	0x42340000
 8001004:	42c80000 	.word	0x42c80000

08001008 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 8001008:	b084      	sub	sp, #16
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
 800100e:	f107 0c08 	add.w	ip, r7, #8
 8001012:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <JOYSTICK_INIT+0x2c>)
 8001018:	4618      	mov	r0, r3
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2254      	movs	r2, #84	@ 0x54
 8001020:	4619      	mov	r1, r3
 8001022:	f00f f8dc 	bl	80101de <memcpy>
	}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800102e:	b004      	add	sp, #16
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000218 	.word	0x20000218

08001038 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	811a      	strh	r2, [r3, #8]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 8001060:	f107 0214 	add.w	r2, r7, #20
 8001064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2140      	movs	r1, #64	@ 0x40
 800106e:	4810      	ldr	r0, [pc, #64]	@ (80010b0 <readRegister+0x78>)
 8001070:	f006 ff46 	bl	8007f00 <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <readRegister+0x7c>)
 800107a:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 800107c:	f107 0208 	add.w	r2, r7, #8
 8001080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	2140      	movs	r1, #64	@ 0x40
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <readRegister+0x78>)
 800108c:	f007 f850 	bl	8008130 <HAL_I2C_Master_Receive>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <readRegister+0x7c>)
 8001096:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <readRegister+0x7c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 80010a0:	2300      	movs	r3, #0
 80010a2:	e000      	b.n	80010a6 <readRegister+0x6e>
    }
    return buf0[0];
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
  }
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000218 	.word	0x20000218
 80010b4:	20000214 	.word	0x20000214

080010b8 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff ffba 	bl	8001038 <readRegister>
 80010c4:	4603      	mov	r3, r0
 80010c6:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 80010c8:	2004      	movs	r0, #4
 80010ca:	f7ff ffb5 	bl	8001038 <readRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	021a      	lsls	r2, r3, #8
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	119b      	asrs	r3, r3, #6
 80010dc:	b29b      	uxth	r3, r3
  }
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 80010ec:	2005      	movs	r0, #5
 80010ee:	f7ff ffa3 	bl	8001038 <readRegister>
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 80010f6:	2006      	movs	r0, #6
 80010f8:	f7ff ff9e 	bl	8001038 <readRegister>
 80010fc:	4603      	mov	r3, r0
 80010fe:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	021a      	lsls	r2, r3, #8
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	119b      	asrs	r3, r3, #6
 800110a:	b29b      	uxth	r3, r3
  }
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 800111a:	f7ff ffcd 	bl	80010b8 <getHorizontal>
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 8001122:	f7ff ffe0 	bl	80010e6 <getVertical>
 8001126:	4603      	mov	r3, r0
 8001128:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	2bfa      	cmp	r3, #250	@ 0xfa
 800112e:	d906      	bls.n	800113e <threshold+0x2a>
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001136:	4293      	cmp	r3, r2
 8001138:	d801      	bhi.n	800113e <threshold+0x2a>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <threshold+0x2c>
 800113e:	2300      	movs	r3, #0
 8001140:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2bf9      	cmp	r3, #249	@ 0xf9
 8001146:	d804      	bhi.n	8001152 <threshold+0x3e>
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <threshold+0x3e>
		  return 1;
 800114e:	2301      	movs	r3, #1
 8001150:	e00a      	b.n	8001168 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001158:	4293      	cmp	r3, r2
 800115a:	d904      	bls.n	8001166 <threshold+0x52>
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <threshold+0x52>
		  return 2;
 8001162:	2302      	movs	r3, #2
 8001164:	e000      	b.n	8001168 <threshold+0x54>
	  }
	  return 0;
 8001166:	2300      	movs	r3, #0
  }
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
    int val = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 800117a:	2120      	movs	r1, #32
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f006 fdd0 	bl	8007d24 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <RowChecker+0x1e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e000      	b.n	8001190 <RowChecker+0x20>
 800118e:	2301      	movs	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001198:	f006 fdc4 	bl	8007d24 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <RowChecker+0x36>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e000      	b.n	80011a8 <RowChecker+0x38>
 80011a6:	2302      	movs	r3, #2
 80011a8:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 80011aa:	2180      	movs	r1, #128	@ 0x80
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f006 fdb8 	bl	8007d24 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <RowChecker+0x4e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	e000      	b.n	80011c0 <RowChecker+0x50>
 80011be:	2303      	movs	r3, #3
 80011c0:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 80011c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011c6:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <RowChecker+0x74>)
 80011c8:	f006 fdac 	bl	8007d24 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <RowChecker+0x66>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e000      	b.n	80011d8 <RowChecker+0x68>
 80011d6:	2304      	movs	r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 80011da:	687b      	ldr	r3, [r7, #4]
  }
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	48000c00 	.word	0x48000c00

080011e8 <keypad_init>:
//		}
//		return 0;
//	}


void keypad_init(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <keypad_init+0x38>)
 80011f4:	f006 fdae 	bl	8007d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011fe:	4809      	ldr	r0, [pc, #36]	@ (8001224 <keypad_init+0x3c>)
 8001200:	f006 fda8 	bl	8007d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <keypad_init+0x38>)
 800120c:	f006 fda2 	bl	8007d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <keypad_init+0x3c>)
 8001218:	f006 fd9c 	bl	8007d54 <HAL_GPIO_WritePin>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	48001000 	.word	0x48001000
 8001224:	48001400 	.word	0x48001400

08001228 <KeyPadReturn>:


	//Processes the row (val) and col values to get the number associated with that row and col
	//weightSel is used to determine if Weight (1) or Age (0) is being input
  uint8_t KeyPadReturn(int row, int col, int weightSel) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af02      	add	r7, sp, #8
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
	// 1-based indexing, row 0 is nothing
	// col 4 are letters
    if (row == 0 || col == 4) {
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <KeyPadReturn+0x18>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d101      	bne.n	8001244 <KeyPadReturn+0x1c>
      return 0;
 8001240:	2300      	movs	r3, #0
 8001242:	e09a      	b.n	800137a <KeyPadReturn+0x152>
    }
    HAL_Delay(10);
 8001244:	200a      	movs	r0, #10
 8001246:	f005 f971 	bl	800652c <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 800124a:	bf00      	nop
 800124c:	f7ff ff90 	bl	8001170 <RowChecker>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4293      	cmp	r3, r2
 8001256:	d0f9      	beq.n	800124c <KeyPadReturn+0x24>
    }
    HAL_Delay(10);
 8001258:	200a      	movs	r0, #10
 800125a:	f005 f967 	bl	800652c <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3b01      	subs	r3, #1
 8001266:	4947      	ldr	r1, [pc, #284]	@ (8001384 <KeyPadReturn+0x15c>)
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	440a      	add	r2, r1
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	75fb      	strb	r3, [r7, #23]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	2b23      	cmp	r3, #35	@ 0x23
 8001276:	d11a      	bne.n	80012ae <KeyPadReturn+0x86>
    	// Go to main display
      if (weightCounter == 0) {
 8001278:	4b43      	ldr	r3, [pc, #268]	@ (8001388 <KeyPadReturn+0x160>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <KeyPadReturn+0x5c>
        // If there is no value for weight, just return
        return 0;
 8001280:	2300      	movs	r3, #0
 8001282:	e07a      	b.n	800137a <KeyPadReturn+0x152>
      for (uint8_t i = 0; i < weightCounter; i++) {
        // print the values here
        //printf("%x ", ASCII_Weight[i]);
      }
      printf("\n");*/
      if(weightSel){
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <KeyPadReturn+0x70>
          	ASCII_Weight[weightCounter] = '\0';
 800128a:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <KeyPadReturn+0x160>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b3e      	ldr	r3, [pc, #248]	@ (800138c <KeyPadReturn+0x164>)
 8001292:	2100      	movs	r1, #0
 8001294:	5499      	strb	r1, [r3, r2]
 8001296:	e005      	b.n	80012a4 <KeyPadReturn+0x7c>
      }
      else{
    	  ASCII_Age[weightCounter] = '\0';
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <KeyPadReturn+0x160>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <KeyPadReturn+0x168>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	5499      	strb	r1, [r3, r2]
      }
      weightCounter = 0;
 80012a4:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <KeyPadReturn+0x160>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      //LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
      return 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e065      	b.n	800137a <KeyPadReturn+0x152>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80012b2:	d006      	beq.n	80012c2 <KeyPadReturn+0x9a>
 80012b4:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <KeyPadReturn+0x160>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	2305      	movs	r3, #5
 80012bc:	3b02      	subs	r3, #2
 80012be:	429a      	cmp	r2, r3
 80012c0:	d118      	bne.n	80012f4 <KeyPadReturn+0xcc>
    	// Wipe screen
    	if(weightSel){
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <KeyPadReturn+0xb2>
    		LCD_Fill(105, 5, 170, 5+28, C_BLACK);
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2321      	movs	r3, #33	@ 0x21
 80012ce:	22aa      	movs	r2, #170	@ 0xaa
 80012d0:	2105      	movs	r1, #5
 80012d2:	2069      	movs	r0, #105	@ 0x69
 80012d4:	f000 fb2a 	bl	800192c <LCD_Fill>
 80012d8:	e007      	b.n	80012ea <KeyPadReturn+0xc2>
    	}
    	else{
    		LCD_Fill(80, 5, 170, 5+28, C_BLACK);
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2321      	movs	r3, #33	@ 0x21
 80012e0:	22aa      	movs	r2, #170	@ 0xaa
 80012e2:	2105      	movs	r1, #5
 80012e4:	2050      	movs	r0, #80	@ 0x50
 80012e6:	f000 fb21 	bl	800192c <LCD_Fill>
    	}
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 80012ea:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <KeyPadReturn+0x160>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
      return 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e042      	b.n	800137a <KeyPadReturn+0x152>
    }
    //printf("ASCII value: %x\n", ASCII_Value);


    if(weightSel){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01c      	beq.n	8001334 <KeyPadReturn+0x10c>
    	ASCII_Weight[weightCounter] = ASCII_Value;
 80012fa:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <KeyPadReturn+0x160>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	4a22      	ldr	r2, [pc, #136]	@ (800138c <KeyPadReturn+0x164>)
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(105 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <KeyPadReturn+0x160>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	b29b      	uxth	r3, r3
 8001314:	3369      	adds	r3, #105	@ 0x69
 8001316:	b298      	uxth	r0, r3
 8001318:	7dfa      	ldrb	r2, [r7, #23]
 800131a:	2300      	movs	r3, #0
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <KeyPadReturn+0x16c>)
 8001326:	2105      	movs	r1, #5
 8001328:	f000 fbc6 	bl	8001ab8 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f003 fda9 	bl	8004e84 <UG_FontSetTransparency>
 8001332:	e01b      	b.n	800136c <KeyPadReturn+0x144>
    }
    else{
    	ASCII_Age[weightCounter] = ASCII_Value;
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <KeyPadReturn+0x160>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	4a15      	ldr	r2, [pc, #84]	@ (8001390 <KeyPadReturn+0x168>)
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(80 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <KeyPadReturn+0x160>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	b29b      	uxth	r3, r3
 800134e:	3350      	adds	r3, #80	@ 0x50
 8001350:	b298      	uxth	r0, r3
 8001352:	7dfa      	ldrb	r2, [r7, #23]
 8001354:	2300      	movs	r3, #0
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <KeyPadReturn+0x16c>)
 8001360:	2105      	movs	r1, #5
 8001362:	f000 fba9 	bl	8001ab8 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f003 fd8c 	bl	8004e84 <UG_FontSetTransparency>
    }

    weightCounter++;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <KeyPadReturn+0x160>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <KeyPadReturn+0x160>)
 8001376:	701a      	strb	r2, [r3, #0]
    return 0;
 8001378:	2300      	movs	r3, #0
  }
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	20000279 	.word	0x20000279
 800138c:	2000026c 	.word	0x2000026c
 8001390:	20000274 	.word	0x20000274
 8001394:	08012174 	.word	0x08012174

08001398 <running>:



  void running(){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af02      	add	r7, sp, #8
	  uint8_t finished = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
	  //Gathers Weight data
	  LCD_PutStr(5, 5, "Weight: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4b79      	ldr	r3, [pc, #484]	@ (8001598 <running+0x200>)
 80013b2:	4a7a      	ldr	r2, [pc, #488]	@ (800159c <running+0x204>)
 80013b4:	2105      	movs	r1, #5
 80013b6:	2005      	movs	r0, #5
 80013b8:	f000 fb9b 	bl	8001af2 <LCD_PutStr>
  while (!finished) {
 80013bc:	e060      	b.n	8001480 <running+0xe8>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c4:	4876      	ldr	r0, [pc, #472]	@ (80015a0 <running+0x208>)
 80013c6:	f006 fcc5 	bl	8007d54 <HAL_GPIO_WritePin>
      val = RowChecker();
 80013ca:	f7ff fed1 	bl	8001170 <RowChecker>
 80013ce:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4, 1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2104      	movs	r1, #4
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f7ff ff27 	bl	8001228 <KeyPadReturn>
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013e4:	486e      	ldr	r0, [pc, #440]	@ (80015a0 <running+0x208>)
 80013e6:	f006 fcb5 	bl	8007d54 <HAL_GPIO_WritePin>
      if (finished) break;
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d14b      	bne.n	8001488 <running+0xf0>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f6:	486b      	ldr	r0, [pc, #428]	@ (80015a4 <running+0x20c>)
 80013f8:	f006 fcac 	bl	8007d54 <HAL_GPIO_WritePin>
      val = RowChecker();
 80013fc:	f7ff feb8 	bl	8001170 <RowChecker>
 8001400:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3, 1);
 8001402:	2201      	movs	r2, #1
 8001404:	2103      	movs	r1, #3
 8001406:	6838      	ldr	r0, [r7, #0]
 8001408:	f7ff ff0e 	bl	8001228 <KeyPadReturn>
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001416:	4863      	ldr	r0, [pc, #396]	@ (80015a4 <running+0x20c>)
 8001418:	f006 fc9c 	bl	8007d54 <HAL_GPIO_WritePin>
      if (finished) break;
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d134      	bne.n	800148c <running+0xf4>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001428:	485e      	ldr	r0, [pc, #376]	@ (80015a4 <running+0x20c>)
 800142a:	f006 fc93 	bl	8007d54 <HAL_GPIO_WritePin>
      val = RowChecker();
 800142e:	f7ff fe9f 	bl	8001170 <RowChecker>
 8001432:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	2102      	movs	r1, #2
 8001438:	6838      	ldr	r0, [r7, #0]
 800143a:	f7ff fef5 	bl	8001228 <KeyPadReturn>
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001448:	4856      	ldr	r0, [pc, #344]	@ (80015a4 <running+0x20c>)
 800144a:	f006 fc83 	bl	8007d54 <HAL_GPIO_WritePin>
      if (finished) break;
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d11d      	bne.n	8001490 <running+0xf8>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800145a:	4851      	ldr	r0, [pc, #324]	@ (80015a0 <running+0x208>)
 800145c:	f006 fc7a 	bl	8007d54 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001460:	f7ff fe86 	bl	8001170 <RowChecker>
 8001464:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	2101      	movs	r1, #1
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f7ff fedc 	bl	8001228 <KeyPadReturn>
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800147a:	4849      	ldr	r0, [pc, #292]	@ (80015a0 <running+0x208>)
 800147c:	f006 fc6a 	bl	8007d54 <HAL_GPIO_WritePin>
  while (!finished) {
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d09b      	beq.n	80013be <running+0x26>
 8001486:	e004      	b.n	8001492 <running+0xfa>
      if (finished) break;
 8001488:	bf00      	nop
 800148a:	e002      	b.n	8001492 <running+0xfa>
      if (finished) break;
 800148c:	bf00      	nop
 800148e:	e000      	b.n	8001492 <running+0xfa>
      if (finished) break;
 8001490:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  	  finished = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	71fb      	strb	r3, [r7, #7]
  	  LCD_Fill(5, 5, 170, 5+28, C_BLACK);
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2321      	movs	r3, #33	@ 0x21
 800149c:	22aa      	movs	r2, #170	@ 0xaa
 800149e:	2105      	movs	r1, #5
 80014a0:	2005      	movs	r0, #5
 80014a2:	f000 fa43 	bl	800192c <LCD_Fill>
  	  //Gathers Age data
  	  LCD_PutStr(5, 5, "Age: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 80014a6:	2300      	movs	r3, #0
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <running+0x200>)
 80014b2:	4a3d      	ldr	r2, [pc, #244]	@ (80015a8 <running+0x210>)
 80014b4:	2105      	movs	r1, #5
 80014b6:	2005      	movs	r0, #5
 80014b8:	f000 fb1b 	bl	8001af2 <LCD_PutStr>
  	while (!finished) {
 80014bc:	e060      	b.n	8001580 <running+0x1e8>
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014c4:	4836      	ldr	r0, [pc, #216]	@ (80015a0 <running+0x208>)
 80014c6:	f006 fc45 	bl	8007d54 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80014ca:	f7ff fe51 	bl	8001170 <RowChecker>
 80014ce:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 4, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2104      	movs	r1, #4
 80014d4:	6838      	ldr	r0, [r7, #0]
 80014d6:	f7ff fea7 	bl	8001228 <KeyPadReturn>
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e4:	482e      	ldr	r0, [pc, #184]	@ (80015a0 <running+0x208>)
 80014e6:	f006 fc35 	bl	8007d54 <HAL_GPIO_WritePin>
  	      if (finished) return;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d14b      	bne.n	8001588 <running+0x1f0>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f6:	482b      	ldr	r0, [pc, #172]	@ (80015a4 <running+0x20c>)
 80014f8:	f006 fc2c 	bl	8007d54 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80014fc:	f7ff fe38 	bl	8001170 <RowChecker>
 8001500:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 3, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2103      	movs	r1, #3
 8001506:	6838      	ldr	r0, [r7, #0]
 8001508:	f7ff fe8e 	bl	8001228 <KeyPadReturn>
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001516:	4823      	ldr	r0, [pc, #140]	@ (80015a4 <running+0x20c>)
 8001518:	f006 fc1c 	bl	8007d54 <HAL_GPIO_WritePin>
  	      if (finished) return;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d134      	bne.n	800158c <running+0x1f4>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001528:	481e      	ldr	r0, [pc, #120]	@ (80015a4 <running+0x20c>)
 800152a:	f006 fc13 	bl	8007d54 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 800152e:	f7ff fe1f 	bl	8001170 <RowChecker>
 8001532:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 2, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2102      	movs	r1, #2
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7ff fe75 	bl	8001228 <KeyPadReturn>
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001548:	4816      	ldr	r0, [pc, #88]	@ (80015a4 <running+0x20c>)
 800154a:	f006 fc03 	bl	8007d54 <HAL_GPIO_WritePin>
  	      if (finished) return;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d11d      	bne.n	8001590 <running+0x1f8>

  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800155a:	4811      	ldr	r0, [pc, #68]	@ (80015a0 <running+0x208>)
 800155c:	f006 fbfa 	bl	8007d54 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001560:	f7ff fe06 	bl	8001170 <RowChecker>
 8001564:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 1, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2101      	movs	r1, #1
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f7ff fe5c 	bl	8001228 <KeyPadReturn>
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800157a:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <running+0x208>)
 800157c:	f006 fbea 	bl	8007d54 <HAL_GPIO_WritePin>
  	while (!finished) {
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d09b      	beq.n	80014be <running+0x126>
 8001586:	e004      	b.n	8001592 <running+0x1fa>
  	      if (finished) return;
 8001588:	bf00      	nop
 800158a:	e002      	b.n	8001592 <running+0x1fa>
  	      if (finished) return;
 800158c:	bf00      	nop
 800158e:	e000      	b.n	8001592 <running+0x1fa>
  	      if (finished) return;
 8001590:	bf00      	nop
  	}
  }
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	08012174 	.word	0x08012174
 800159c:	08012108 	.word	0x08012108
 80015a0:	48001400 	.word	0x48001400
 80015a4:	48001000 	.word	0x48001000
 80015a8:	08012114 	.word	0x08012114

080015ac <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <setSPI_Size+0x74>)
 80015b8:	f993 3000 	ldrsb.w	r3, [r3]
 80015bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d027      	beq.n	8001614 <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <setSPI_Size+0x78>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <setSPI_Size+0x78>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015d2:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80015d4:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <setSPI_Size+0x74>)
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d10c      	bne.n	80015fc <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <setSPI_Size+0x78>)
 80015e4:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80015e8:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <setSPI_Size+0x78>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <setSPI_Size+0x78>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015f8:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 80015fa:	e00b      	b.n	8001614 <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <setSPI_Size+0x78>)
 80015fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001602:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 8001604:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <setSPI_Size+0x78>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <setSPI_Size+0x78>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001612:	601a      	str	r2, [r3, #0]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20000010 	.word	0x20000010
 8001624:	20000834 	.word	0x20000834

08001628 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff ffb9 	bl	80015ac <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001640:	4815      	ldr	r0, [pc, #84]	@ (8001698 <LCD_WriteCommand+0x70>)
 8001642:	f006 fb87 	bl	8007d54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800164c:	4812      	ldr	r0, [pc, #72]	@ (8001698 <LCD_WriteCommand+0x70>)
 800164e:	f006 fb81 	bl	8007d54 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	2201      	movs	r2, #1
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4810      	ldr	r0, [pc, #64]	@ (800169c <LCD_WriteCommand+0x74>)
 800165c:	f00a fac1 	bl	800bbe2 <HAL_SPI_Transmit>
	  if (argc) {
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00e      	beq.n	8001684 <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166c:	480a      	ldr	r0, [pc, #40]	@ (8001698 <LCD_WriteCommand+0x70>)
 800166e:	f006 fb71 	bl	8007d54 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1c59      	adds	r1, r3, #1
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	b29a      	uxth	r2, r3
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	4807      	ldr	r0, [pc, #28]	@ (800169c <LCD_WriteCommand+0x74>)
 8001680:	f00a faaf 	bl	800bbe2 <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800168a:	4803      	ldr	r0, [pc, #12]	@ (8001698 <LCD_WriteCommand+0x70>)
 800168c:	f006 fb62 	bl	8007d54 <HAL_GPIO_WritePin>
	}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	48001000 	.word	0x48001000
 800169c:	20000834 	.word	0x20000834

080016a0 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b0:	4814      	ldr	r0, [pc, #80]	@ (8001704 <LCD_WriteData+0x64>)
 80016b2:	f006 fb4f 	bl	8007d54 <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016bc:	4811      	ldr	r0, [pc, #68]	@ (8001704 <LCD_WriteData+0x64>)
 80016be:	f006 fb49 	bl	8007d54 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80016c2:	e011      	b.n	80016e8 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ca:	4293      	cmp	r3, r2
 80016cc:	bf28      	it	cs
 80016ce:	4613      	movcs	r3, r2
 80016d0:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80016d2:	89fa      	ldrh	r2, [r7, #14]
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	480b      	ldr	r0, [pc, #44]	@ (8001708 <LCD_WriteData+0x68>)
 80016dc:	f00a fa81 	bl	800bbe2 <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ea      	bne.n	80016c4 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <LCD_WriteData+0x64>)
 80016f6:	f006 fb2d 	bl	8007d54 <HAL_GPIO_WritePin>
#endif
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	48001000 	.word	0x48001000
 8001708:	20000834 	.word	0x20000834

0800170c <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b08b      	sub	sp, #44	@ 0x2c
 8001710:	af00      	add	r7, sp, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	80fb      	strh	r3, [r7, #6]
 800171e:	4603      	mov	r3, r0
 8001720:	80bb      	strh	r3, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
 8001726:	4613      	mov	r3, r2
 8001728:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	84bb      	strh	r3, [r7, #36]	@ 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 8001732:	88bb      	ldrh	r3, [r7, #4]
 8001734:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001736:	883b      	ldrh	r3, [r7, #0]
 8001738:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800173a:	232a      	movs	r3, #42	@ 0x2a
 800173c:	763b      	strb	r3, [r7, #24]
 800173e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001742:	121b      	asrs	r3, r3, #8
 8001744:	b21b      	sxth	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	767b      	strb	r3, [r7, #25]
 800174a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800174c:	b2db      	uxtb	r3, r3
 800174e:	76bb      	strb	r3, [r7, #26]
 8001750:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001754:	121b      	asrs	r3, r3, #8
 8001756:	b21b      	sxth	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	76fb      	strb	r3, [r7, #27]
 800175c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800175e:	b2db      	uxtb	r3, r3
 8001760:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	2104      	movs	r1, #4
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800176e:	232b      	movs	r3, #43	@ 0x2b
 8001770:	743b      	strb	r3, [r7, #16]
 8001772:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001776:	121b      	asrs	r3, r3, #8
 8001778:	b21b      	sxth	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	747b      	strb	r3, [r7, #17]
 800177e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001780:	b2db      	uxtb	r3, r3
 8001782:	74bb      	strb	r3, [r7, #18]
 8001784:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001788:	121b      	asrs	r3, r3, #8
 800178a:	b21b      	sxth	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	74fb      	strb	r3, [r7, #19]
 8001790:	8c3b      	ldrh	r3, [r7, #32]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2104      	movs	r1, #4
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff43 	bl	8001628 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80017a2:	232c      	movs	r3, #44	@ 0x2c
 80017a4:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff3b 	bl	8001628 <LCD_WriteCommand>
  }
}
 80017b2:	bf00      	nop
 80017b4:	372c      	adds	r7, #44	@ 0x2c
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}
	...

080017bc <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
 80017c6:	460b      	mov	r3, r1
 80017c8:	80bb      	strh	r3, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db39      	blt.n	800184a <LCD_DrawPixel+0x8e>
 80017d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017da:	2bef      	cmp	r3, #239	@ 0xef
 80017dc:	dc35      	bgt.n	800184a <LCD_DrawPixel+0x8e>
 80017de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db31      	blt.n	800184a <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80017e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80017ee:	da2c      	bge.n	800184a <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	733b      	strb	r3, [r7, #12]
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8001800:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001804:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001808:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800180c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001810:	f7ff ff7c 	bl	800170c <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800181a:	480e      	ldr	r0, [pc, #56]	@ (8001854 <LCD_DrawPixel+0x98>)
 800181c:	f006 fa9a 	bl	8007d54 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001826:	480b      	ldr	r0, [pc, #44]	@ (8001854 <LCD_DrawPixel+0x98>)
 8001828:	f006 fa94 	bl	8007d54 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 800182c:	f107 010c 	add.w	r1, r7, #12
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	2202      	movs	r2, #2
 8001836:	4808      	ldr	r0, [pc, #32]	@ (8001858 <LCD_DrawPixel+0x9c>)
 8001838:	f00a f9d3 	bl	800bbe2 <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001842:	4804      	ldr	r0, [pc, #16]	@ (8001854 <LCD_DrawPixel+0x98>)
 8001844:	f006 fa86 	bl	8007d54 <HAL_GPIO_WritePin>
 8001848:	e000      	b.n	800184c <LCD_DrawPixel+0x90>
    return;
 800184a:	bf00      	nop
#endif
}
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	48001000 	.word	0x48001000
 8001858:	20000834 	.word	0x20000834

0800185c <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 800185c:	b580      	push	{r7, lr}
 800185e:	b094      	sub	sp, #80	@ 0x50
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001868:	2300      	movs	r3, #0
 800186a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800186c:	e009      	b.n	8001882 <LCD_FillPixels+0x26>
      fill[t]=color;
 800186e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	3350      	adds	r3, #80	@ 0x50
 8001874:	443b      	add	r3, r7
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800187c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800187e:	3301      	adds	r3, #1
 8001880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b20      	cmp	r3, #32
 8001886:	bf28      	it	cs
 8001888:	2320      	movcs	r3, #32
 800188a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800188c:	429a      	cmp	r2, r3
 800188e:	d3ee      	bcc.n	800186e <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 8001890:	e00e      	b.n	80018b0 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b20      	cmp	r3, #32
 8001896:	bf28      	it	cs
 8001898:	2320      	movcs	r3, #32
 800189a:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fefc 	bl	80016a0 <LCD_WriteData>
      pixels-=sz;
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ed      	bne.n	8001892 <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3750      	adds	r7, #80	@ 0x50
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4604      	mov	r4, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4623      	mov	r3, r4
 80018d0:	80fb      	strh	r3, [r7, #6]
 80018d2:	4603      	mov	r3, r0
 80018d4:	80bb      	strh	r3, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	807b      	strh	r3, [r7, #2]
 80018da:	4613      	mov	r3, r2
 80018dc:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80018de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d104      	bne.n	80018f2 <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fe5f 	bl	80015ac <setSPI_Size>
#endif
    return NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e013      	b.n	800191a <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80018f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001902:	f7ff ff03 	bl	800170c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff fe50 	bl	80015ac <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001912:	4804      	ldr	r0, [pc, #16]	@ (8001924 <LCD_FillArea+0x64>)
 8001914:	f006 fa1e 	bl	8007d54 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <LCD_FillArea+0x68>)
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	bf00      	nop
 8001924:	48001000 	.word	0x48001000
 8001928:	0800185d 	.word	0x0800185d

0800192c <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	4604      	mov	r4, r0
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4623      	mov	r3, r4
 800193c:	80fb      	strh	r3, [r7, #6]
 800193e:	4603      	mov	r3, r0
 8001940:	80bb      	strh	r3, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	807b      	strh	r3, [r7, #2]
 8001946:	4613      	mov	r3, r2
 8001948:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	3301      	adds	r3, #1
 8001952:	4619      	mov	r1, r3
 8001954:	883a      	ldrh	r2, [r7, #0]
 8001956:	88bb      	ldrh	r3, [r7, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	3301      	adds	r3, #1
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001962:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001966:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800196a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800196e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001972:	f7ff fecb 	bl	800170c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff fe18 	bl	80015ac <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 800197c:	8c3b      	ldrh	r3, [r7, #32]
 800197e:	4619      	mov	r1, r3
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff ff6b 	bl	800185c <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fe10 	bl	80015ac <setSPI_Size>
#endif
  return UG_RESULT_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}

08001996 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001996:	b590      	push	{r4, r7, lr}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	603a      	str	r2, [r7, #0]
 80019a0:	80fb      	strh	r3, [r7, #6]
 80019a2:	460b      	mov	r3, r1
 80019a4:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	889b      	ldrh	r3, [r3, #4]
 80019aa:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	88db      	ldrh	r3, [r3, #6]
 80019b0:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	2bef      	cmp	r3, #239	@ 0xef
 80019b6:	d837      	bhi.n	8001a28 <LCD_DrawImage+0x92>
 80019b8:	88bb      	ldrh	r3, [r7, #4]
 80019ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80019be:	d233      	bcs.n	8001a28 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	4413      	add	r3, r2
 80019c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80019c8:	dc30      	bgt.n	8001a2c <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80019ca:	88ba      	ldrh	r2, [r7, #4]
 80019cc:	89bb      	ldrh	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80019d4:	dc2c      	bgt.n	8001a30 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	7a1b      	ldrb	r3, [r3, #8]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d12a      	bne.n	8001a34 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80019de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019e6:	88fa      	ldrh	r2, [r7, #6]
 80019e8:	89fb      	ldrh	r3, [r7, #14]
 80019ea:	4413      	add	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	88ba      	ldrh	r2, [r7, #4]
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4622      	mov	r2, r4
 8001a04:	f7ff fe82 	bl	800170c <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fdcf 	bl	80015ac <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	89ba      	ldrh	r2, [r7, #12]
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff fe40 	bl	80016a0 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fdc3 	bl	80015ac <setSPI_Size>
 8001a26:	e006      	b.n	8001a36 <LCD_DrawImage+0xa0>
    return;
 8001a28:	bf00      	nop
 8001a2a:	e004      	b.n	8001a36 <LCD_DrawImage+0xa0>
    return;
 8001a2c:	bf00      	nop
 8001a2e:	e002      	b.n	8001a36 <LCD_DrawImage+0xa0>
    return;
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <LCD_DrawImage+0xa0>
    return;
 8001a34:	bf00      	nop
#endif
  }
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	80fb      	strh	r3, [r7, #6]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80bb      	strh	r3, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	807b      	strh	r3, [r7, #2]
 8001a56:	4613      	mov	r3, r2
 8001a58:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001a5a:	88fa      	ldrh	r2, [r7, #6]
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d10a      	bne.n	8001a78 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001a62:	88ba      	ldrh	r2, [r7, #4]
 8001a64:	883b      	ldrh	r3, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d918      	bls.n	8001a9c <LCD_DrawLine+0x60>
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	81bb      	strh	r3, [r7, #12]
 8001a6e:	883b      	ldrh	r3, [r7, #0]
 8001a70:	80bb      	strh	r3, [r7, #4]
 8001a72:	89bb      	ldrh	r3, [r7, #12]
 8001a74:	803b      	strh	r3, [r7, #0]
 8001a76:	e011      	b.n	8001a9c <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001a78:	88ba      	ldrh	r2, [r7, #4]
 8001a7a:	883b      	ldrh	r3, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d10a      	bne.n	8001a96 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001a80:	88fa      	ldrh	r2, [r7, #6]
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d909      	bls.n	8001a9c <LCD_DrawLine+0x60>
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	81fb      	strh	r3, [r7, #14]
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	80fb      	strh	r3, [r7, #6]
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	e002      	b.n	8001a9c <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e009      	b.n	8001ab0 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001a9c:	883c      	ldrh	r4, [r7, #0]
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	88b9      	ldrh	r1, [r7, #4]
 8001aa2:	88f8      	ldrh	r0, [r7, #6]
 8001aa4:	8c3b      	ldrh	r3, [r7, #32]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	4623      	mov	r3, r4
 8001aaa:	f7ff ff3f 	bl	800192c <LCD_Fill>
  return UG_RESULT_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}

08001ab8 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	81fb      	strh	r3, [r7, #14]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	81bb      	strh	r3, [r7, #12]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f002 ff4f 	bl	8004970 <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 8001ad2:	7afb      	ldrb	r3, [r7, #11]
 8001ad4:	b298      	uxth	r0, r3
 8001ad6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001ada:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ade:	8c3c      	ldrh	r4, [r7, #32]
 8001ae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	f003 f945 	bl	8004d74 <UG_PutChar>
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}

08001af2 <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	4603      	mov	r3, r0
 8001afe:	81fb      	strh	r3, [r7, #14]
 8001b00:	460b      	mov	r3, r1
 8001b02:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f002 ff33 	bl	8004970 <UG_FontSelect>
  UG_SetForecolor(color);
 8001b0a:	8b3b      	ldrh	r3, [r7, #24]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 f96d 	bl	8004dec <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001b12:	8bbb      	ldrh	r3, [r7, #28]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 f97b 	bl	8004e10 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001b1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b1e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 f88d 	bl	8004c44 <UG_PutString>
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <LCD_setPower+0x14>
 8001b42:	2329      	movs	r3, #41	@ 0x29
 8001b44:	e000      	b.n	8001b48 <LCD_setPower+0x16>
 8001b46:	2328      	movs	r3, #40	@ 0x28
 8001b48:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fd69 	bl	8001628 <LCD_WriteCommand>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <LCD_Update>:

static void LCD_Update(void)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fd22 	bl	80015ac <setSPI_Size>
  #endif
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b78:	4829      	ldr	r0, [pc, #164]	@ (8001c20 <LCD_init+0xb4>)
 8001b7a:	f006 f8eb 	bl	8007d54 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2180      	movs	r1, #128	@ 0x80
 8001b82:	4827      	ldr	r0, [pc, #156]	@ (8001c20 <LCD_init+0xb4>)
 8001b84:	f006 f8e6 	bl	8007d54 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f004 fccf 	bl	800652c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2180      	movs	r1, #128	@ 0x80
 8001b92:	4823      	ldr	r0, [pc, #140]	@ (8001c20 <LCD_init+0xb4>)
 8001b94:	f006 f8de 	bl	8007d54 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001b98:	20c8      	movs	r0, #200	@ 0xc8
 8001b9a:	f004 fcc7 	bl	800652c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001b9e:	4921      	ldr	r1, [pc, #132]	@ (8001c24 <LCD_init+0xb8>)
 8001ba0:	4821      	ldr	r0, [pc, #132]	@ (8001c28 <LCD_init+0xbc>)
 8001ba2:	f002 fe4b 	bl	800483c <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001ba6:	4921      	ldr	r1, [pc, #132]	@ (8001c2c <LCD_init+0xc0>)
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f004 f9d7 	bl	8005f5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001bae:	4920      	ldr	r1, [pc, #128]	@ (8001c30 <LCD_init+0xc4>)
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f004 f9d3 	bl	8005f5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001bb6:	491f      	ldr	r1, [pc, #124]	@ (8001c34 <LCD_init+0xc8>)
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f004 f9cf 	bl	8005f5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001bbe:	491e      	ldr	r1, [pc, #120]	@ (8001c38 <LCD_init+0xcc>)
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f004 f9cb 	bl	8005f5c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f003 f934 	bl	8004e34 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f003 f945 	bl	8004e5c <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	80fb      	strh	r3, [r7, #6]
 8001bd6:	e013      	b.n	8001c00 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a17      	ldr	r2, [pc, #92]	@ (8001c3c <LCD_init+0xd0>)
 8001bde:	441a      	add	r2, r3
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4916      	ldr	r1, [pc, #88]	@ (8001c3c <LCD_init+0xd0>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f7ff fd1d 	bl	8001628 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <LCD_init+0xd0>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	2b4b      	cmp	r3, #75	@ 0x4b
 8001c04:	d9e8      	bls.n	8001bd8 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001c06:	2000      	movs	r0, #0
 8001c08:	f002 fec2 	bl	8004990 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff ff90 	bl	8001b32 <LCD_setPower>
  UG_Update();
 8001c12:	f004 f9c5 	bl	8005fa0 <UG_Update>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	48001000 	.word	0x48001000
 8001c24:	20000014 	.word	0x20000014
 8001c28:	2000027c 	.word	0x2000027c
 8001c2c:	08001a3d 	.word	0x08001a3d
 8001c30:	0800192d 	.word	0x0800192d
 8001c34:	080018c1 	.word	0x080018c1
 8001c38:	08001997 	.word	0x08001997
 8001c3c:	08017564 	.word	0x08017564

08001c40 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6858      	ldr	r0, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	8adb      	ldrh	r3, [r3, #22]
 8001c62:	2200      	movs	r2, #0
 8001c64:	4619      	mov	r1, r3
 8001c66:	f006 f875 	bl	8007d54 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	1cf9      	adds	r1, r7, #3
 8001c74:	2201      	movs	r2, #1
 8001c76:	f009 ffb4 	bl	800bbe2 <HAL_SPI_Transmit>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f107 010f 	add.w	r1, r7, #15
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f00a f91e 	bl	800becc <HAL_SPI_Receive>
 8001c90:	4603      	mov	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6858      	ldr	r0, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	8adb      	ldrh	r3, [r3, #22]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f006 f858 	bl	8007d54 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	70fb      	strb	r3, [r7, #3]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cc4:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001cc6:	78bb      	ldrb	r3, [r7, #2]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b21a      	sxth	r2, r3
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6858      	ldr	r0, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	8adb      	ldrh	r3, [r3, #22]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f006 f836 	bl	8007d54 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f107 010a 	add.w	r1, r7, #10
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f009 ff74 	bl	800bbe2 <HAL_SPI_Transmit>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6858      	ldr	r0, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	8adb      	ldrh	r3, [r3, #22]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f006 f823 	bl	8007d54 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b088      	sub	sp, #32
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	4611      	mov	r1, r2
 8001d22:	461a      	mov	r2, r3
 8001d24:	460b      	mov	r3, r1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6858      	ldr	r0, [r3, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8adb      	ldrh	r3, [r3, #22]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f006 f80a 	bl	8007d54 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f107 0117 	add.w	r1, r7, #23
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f009 ff48 	bl	800bbe2 <HAL_SPI_Transmit>
 8001d52:	4603      	mov	r3, r0
 8001d54:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001d56:	79bb      	ldrb	r3, [r7, #6]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	79fa      	ldrb	r2, [r7, #7]
 8001d62:	b292      	uxth	r2, r2
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f00a fc0a 	bl	800c580 <HAL_SPI_Transmit_DMA>
 8001d6c:	e012      	b.n	8001d94 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	f009 ff31 	bl	800bbe2 <HAL_SPI_Transmit>
 8001d80:	4603      	mov	r3, r0
 8001d82:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6858      	ldr	r0, [r3, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8adb      	ldrh	r3, [r3, #22]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f005 ffe0 	bl	8007d54 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b088      	sub	sp, #32
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	4611      	mov	r1, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	460b      	mov	r3, r1
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	4613      	mov	r3, r2
 8001dae:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6858      	ldr	r0, [r3, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8adb      	ldrh	r3, [r3, #22]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f005 ffc8 	bl	8007d54 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f107 0117 	add.w	r1, r7, #23
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f009 ff06 	bl	800bbe2 <HAL_SPI_Transmit>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10a      	bne.n	8001df6 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	b292      	uxth	r2, r2
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f00a fcb8 	bl	800c760 <HAL_SPI_Receive_DMA>
 8001df0:	4603      	mov	r3, r0
 8001df2:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001df4:	e012      	b.n	8001e1c <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	f00a f862 	bl	800becc <HAL_SPI_Receive>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6858      	ldr	r0, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8adb      	ldrh	r3, [r3, #22]
 8001e14:	2201      	movs	r2, #1
 8001e16:	4619      	mov	r1, r3
 8001e18:	f005 ff9c 	bl	8007d54 <HAL_GPIO_WritePin>
}
 8001e1c:	bf00      	nop
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff36 	bl	8001cae <write_register>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001e5c:	d801      	bhi.n	8001e62 <set_OCP+0x16>
    imax = 45;
 8001e5e:	232d      	movs	r3, #45	@ 0x2d
 8001e60:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e66:	d901      	bls.n	8001e6c <set_OCP+0x20>
    imax = 240;
 8001e68:	23f0      	movs	r3, #240	@ 0xf0
 8001e6a:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	2b81      	cmp	r3, #129	@ 0x81
 8001e70:	d809      	bhi.n	8001e86 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	3b2d      	subs	r3, #45	@ 0x2d
 8001e76:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb4 <set_OCP+0x68>)
 8001e78:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7c:	1052      	asrs	r2, r2, #1
 8001e7e:	17db      	asrs	r3, r3, #31
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e008      	b.n	8001e98 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	331e      	adds	r3, #30
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <set_OCP+0x68>)
 8001e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e90:	1092      	asrs	r2, r2, #2
 8001e92:	17db      	asrs	r3, r3, #31
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	f043 0320 	orr.w	r3, r3, #32
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	210b      	movs	r1, #11
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff02 	bl	8001cae <write_register>
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	66666667 	.word	0x66666667

08001eb8 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001ec0:	211d      	movs	r1, #29
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff febc 	bl	8001c40 <read_register>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	461c      	mov	r4, r3
 8001ed4:	4615      	mov	r5, r2
 8001ed6:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001eda:	211e      	movs	r1, #30
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff feaf 	bl	8001c40 <read_register>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b0a      	cmp	r3, #10
 8001ef0:	d908      	bls.n	8001f04 <set_low_data_rate_optimization+0x4c>
 8001ef2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef6:	1fd1      	subs	r1, r2, #7
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	d103      	bne.n	8001f04 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001f04:	7ffb      	ldrb	r3, [r7, #31]
 8001f06:	461a      	mov	r2, r3
 8001f08:	2126      	movs	r1, #38	@ 0x26
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fecf 	bl	8001cae <write_register>
}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bdb0      	pop	{r4, r5, r7, pc}

08001f18 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff7e 	bl	8001e24 <set_mode>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7d5b      	ldrb	r3, [r3, #21]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	210f      	movs	r1, #15
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff feb4 	bl	8001cae <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8001f46:	22f0      	movs	r2, #240	@ 0xf0
 8001f48:	2112      	movs	r1, #18
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff feaf 	bl	8001cae <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8001f50:	2105      	movs	r1, #5
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff66 	bl	8001e24 <set_mode>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001f68:	2101      	movs	r1, #1
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff5a 	bl	8001e24 <set_mode>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001f80:	211d      	movs	r1, #29
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fe5c 	bl	8001c40 <read_register>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	461a      	mov	r2, r3
 8001f98:	211d      	movs	r1, #29
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff fe87 	bl	8001cae <write_register>
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10e      	bne.n	8001fda <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	d901      	bls.n	8001fc6 <lora_set_tx_power+0x1e>
      level = 15;
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2109      	movs	r1, #9
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fe6b 	bl	8001cae <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001fd8:	e02e      	b.n	8002038 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	2b14      	cmp	r3, #20
 8001fde:	d901      	bls.n	8001fe4 <lora_set_tx_power+0x3c>
      level = 20;
 8001fe0:	2314      	movs	r3, #20
 8001fe2:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d801      	bhi.n	8001fee <lora_set_tx_power+0x46>
      level = 2;
 8001fea:	2302      	movs	r3, #2
 8001fec:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	2b11      	cmp	r3, #17
 8001ff2:	d90c      	bls.n	800200e <lora_set_tx_power+0x66>
      level -= 3;
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	3b03      	subs	r3, #3
 8001ff8:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001ffa:	2287      	movs	r2, #135	@ 0x87
 8001ffc:	214d      	movs	r1, #77	@ 0x4d
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fe55 	bl	8001cae <write_register>
      set_OCP(lora, 140);
 8002004:	218c      	movs	r1, #140	@ 0x8c
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff20 	bl	8001e4c <set_OCP>
 800200c:	e008      	b.n	8002020 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800200e:	2284      	movs	r2, #132	@ 0x84
 8002010:	214d      	movs	r1, #77	@ 0x4d
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fe4b 	bl	8001cae <write_register>
      set_OCP(lora, 97);
 8002018:	2161      	movs	r1, #97	@ 0x61
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff16 	bl	8001e4c <set_OCP>
    level -= 2;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	3b02      	subs	r3, #2
 8002024:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	2109      	movs	r1, #9
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fe3b 	bl	8001cae <write_register>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 800204c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002050:	f04f 0000 	mov.w	r0, #0
 8002054:	f04f 0100 	mov.w	r1, #0
 8002058:	04d9      	lsls	r1, r3, #19
 800205a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800205e:	04d0      	lsls	r0, r2, #19
 8002060:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <lora_set_frequency+0x88>)
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	f7fe fdb7 	bl	8000bd8 <__aeabi_uldivmod>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8002072:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	0c02      	lsrs	r2, r0, #16
 8002080:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002084:	0c0b      	lsrs	r3, r1, #16
 8002086:	b2d3      	uxtb	r3, r2
 8002088:	461a      	mov	r2, r3
 800208a:	2106      	movs	r1, #6
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7ff fe0e 	bl	8001cae <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8002092:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	0a02      	lsrs	r2, r0, #8
 80020a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80020a4:	0a0b      	lsrs	r3, r1, #8
 80020a6:	b2d3      	uxtb	r3, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	2107      	movs	r1, #7
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff fdfe 	bl	8001cae <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80020b2:	7c3b      	ldrb	r3, [r7, #16]
 80020b4:	461a      	mov	r2, r3
 80020b6:	2108      	movs	r1, #8
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff fdf8 	bl	8001cae <write_register>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	01e84800 	.word	0x01e84800

080020cc <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d802      	bhi.n	80020e4 <lora_set_spreading_factor+0x18>
    sf = 6;
 80020de:	2306      	movs	r3, #6
 80020e0:	70fb      	strb	r3, [r7, #3]
 80020e2:	e004      	b.n	80020ee <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d901      	bls.n	80020ee <lora_set_spreading_factor+0x22>
    sf = 12;
 80020ea:	230c      	movs	r3, #12
 80020ec:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d10a      	bne.n	800210a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80020f4:	22c5      	movs	r2, #197	@ 0xc5
 80020f6:	2131      	movs	r1, #49	@ 0x31
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fdd8 	bl	8001cae <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80020fe:	220c      	movs	r2, #12
 8002100:	2137      	movs	r1, #55	@ 0x37
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fdd3 	bl	8001cae <write_register>
 8002108:	e009      	b.n	800211e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 800210a:	22c3      	movs	r2, #195	@ 0xc3
 800210c:	2131      	movs	r1, #49	@ 0x31
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fdcd 	bl	8001cae <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8002114:	220a      	movs	r2, #10
 8002116:	2137      	movs	r1, #55	@ 0x37
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fdc8 	bl	8001cae <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800211e:	211e      	movs	r1, #30
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fd8d 	bl	8001c40 <read_register>
 8002126:	4603      	mov	r3, r0
 8002128:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	b25a      	sxtb	r2, r3
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	b25b      	sxtb	r3, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	b25b      	sxtb	r3, r3
 800213e:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	461a      	mov	r2, r3
 8002144:	211e      	movs	r1, #30
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fdb1 	bl	8001cae <write_register>

  set_low_data_rate_optimization(lora);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff feb3 	bl	8001eb8 <set_low_data_rate_optimization>
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	b29b      	uxth	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	2120      	movs	r1, #32
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fd9b 	bl	8001cae <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	2121      	movs	r1, #33	@ 0x21
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fd91 	bl	8001cae <write_register>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 800219c:	2142      	movs	r1, #66	@ 0x42
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fd4e 	bl	8001c40 <read_register>
 80021a4:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80021b6:	2101      	movs	r1, #1
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fd41 	bl	8001c40 <read_register>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d101      	bne.n	80021d0 <lora_is_transmitting+0x22>
 80021cc:	2305      	movs	r3, #5
 80021ce:	e000      	b.n	80021d2 <lora_is_transmitting+0x24>
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	4611      	mov	r1, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	4613      	mov	r3, r2
 80021ee:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff ffdc 	bl	80021ae <lora_is_transmitting>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80021fc:	2305      	movs	r3, #5
 80021fe:	e02a      	b.n	8002256 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8002200:	2101      	movs	r1, #1
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f7ff fe0e 	bl	8001e24 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f911 	bl	8002430 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	7d1b      	ldrb	r3, [r3, #20]
 8002212:	461a      	mov	r2, r3
 8002214:	210d      	movs	r1, #13
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff fd49 	bl	8001cae <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7d1b      	ldrb	r3, [r3, #20]
 8002220:	461a      	mov	r2, r3
 8002222:	210e      	movs	r1, #14
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f7ff fd42 	bl	8001cae <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	461a      	mov	r2, r3
 800222e:	2122      	movs	r1, #34	@ 0x22
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fd3c 	bl	8001cae <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8002236:	79bb      	ldrb	r3, [r7, #6]
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff fd6a 	bl	8001d16 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <lora_send_packet_base+0x72>
    return LORA_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e004      	b.n	8002256 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 800224c:	2103      	movs	r1, #3
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff fde8 	bl	8001e24 <set_mode>
  return LORA_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	4613      	mov	r3, r2
 800226a:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 800226c:	79fa      	ldrb	r2, [r7, #7]
 800226e:	2302      	movs	r3, #2
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f7ff ffb1 	bl	80021da <lora_send_packet_base>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 800228a:	2112      	movs	r1, #18
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fcd7 	bl	8001c40 <read_register>
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800229c:	b2db      	uxtb	r3, r3
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 80022ae:	211d      	movs	r1, #29
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fcc5 	bl	8001c40 <read_register>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 80022be:	7bbb      	ldrb	r3, [r7, #14]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 80022c4:	2122      	movs	r1, #34	@ 0x22
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fcba 	bl	8001c40 <read_register>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e005      	b.n	80022de <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 80022d2:	2113      	movs	r1, #19
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fcb3 	bl	8001c40 <read_register>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 80022f8:	2306      	movs	r3, #6
 80022fa:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8002300:	2112      	movs	r1, #18
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7ff fc9c 	bl	8001c40 <read_register>
 8002308:	4603      	mov	r3, r0
 800230a:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800230c:	22f0      	movs	r2, #240	@ 0xf0
 800230e:	2112      	movs	r1, #18
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7ff fccc 	bl	8001cae <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8002316:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da02      	bge.n	8002324 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 800231e:	2302      	movs	r3, #2
 8002320:	75fb      	strb	r3, [r7, #23]
    goto done;
 8002322:	e030      	b.n	8002386 <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8002324:	7d7b      	ldrb	r3, [r7, #21]
 8002326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d02a      	beq.n	8002384 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 800232e:	7d7b      	ldrb	r3, [r7, #21]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8002338:	2303      	movs	r3, #3
 800233a:	75fb      	strb	r3, [r7, #23]
      goto done;
 800233c:	e023      	b.n	8002386 <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 800233e:	7d7b      	ldrb	r3, [r7, #21]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
      goto done;
 800234c:	e01b      	b.n	8002386 <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff ffa9 	bl	80022a6 <lora_pending_packet_length>
 8002354:	4603      	mov	r3, r0
 8002356:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8002358:	2110      	movs	r1, #16
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff fc70 	bl	8001c40 <read_register>
 8002360:	4603      	mov	r3, r0
 8002362:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8002364:	7d3b      	ldrb	r3, [r7, #20]
 8002366:	461a      	mov	r2, r3
 8002368:	210d      	movs	r1, #13
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fc9f 	bl	8001cae <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8002370:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002374:	7dba      	ldrb	r2, [r7, #22]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7ff fd0e 	bl	8001d9a <read_fifo>
    res = LORA_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
 8002382:	e000      	b.n	8002386 <lora_receive_packet_base+0x9e>
  }

done:
 8002384:	bf00      	nop
  if (error) {
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <lora_receive_packet_base+0xaa>
    *error = res;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	7dfa      	ldrb	r2, [r7, #23]
 8002390:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8002392:	7dbb      	ldrb	r3, [r7, #22]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	2302      	movs	r3, #2
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f7ff ff96 	bl	80022e8 <lora_receive_packet_base>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 80023da:	e00b      	b.n	80023f4 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff ff50 	bl	8002282 <lora_is_packet_available>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f004 f89f 	bl	800652c <HAL_Delay>
    elapsed++;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d3ef      	bcc.n	80023dc <lora_receive_packet_blocking+0x16>
 80023fc:	e000      	b.n	8002400 <lora_receive_packet_blocking+0x3a>
      break;
 80023fe:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8002400:	79fa      	ldrb	r2, [r7, #7]
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f7ff ffc8 	bl	800239c <lora_receive_packet>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <lora_enable_interrupt_rx_done>:

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 800241e:	2200      	movs	r2, #0
 8002420:	2140      	movs	r1, #64	@ 0x40
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fc43 	bl	8001cae <write_register>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8002438:	2208      	movs	r2, #8
 800243a:	2112      	movs	r1, #18
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fc36 	bl	8001cae <write_register>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 800246a:	6a3a      	ldr	r2, [r7, #32]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002488:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff fe82 	bl	8002194 <lora_version>
 8002490:	4603      	mov	r3, r0
 8002492:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b12      	cmp	r3, #18
 8002498:	d001      	beq.n	800249e <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 800249a:	2304      	movs	r3, #4
 800249c:	e031      	b.n	8002502 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff fd3a 	bl	8001f18 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff fd37 	bl	8001f18 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80024aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff fdc6 	bl	8002040 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 80024b4:	2107      	movs	r1, #7
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff fe08 	bl	80020cc <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80024bc:	210a      	movs	r1, #10
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff fe4b 	bl	800215a <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fd57 	bl	8001f78 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80024ca:	210c      	movs	r1, #12
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fbb7 	bl	8001c40 <read_register>
 80024d2:	4603      	mov	r3, r0
 80024d4:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80024d6:	7dbb      	ldrb	r3, [r7, #22]
 80024d8:	f043 0303 	orr.w	r3, r3, #3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	210c      	movs	r1, #12
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fbe3 	bl	8001cae <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80024e8:	2204      	movs	r2, #4
 80024ea:	2126      	movs	r1, #38	@ 0x26
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff fbde 	bl	8001cae <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80024f2:	2111      	movs	r1, #17
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fd57 	bl	8001fa8 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7ff fd30 	bl	8001f60 <lora_mode_standby>

  return LORA_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	0000      	movs	r0, r0
 800250c:	0000      	movs	r0, r0
	...

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002512:	b0e1      	sub	sp, #388	@ 0x184
 8002514:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 8002516:	4b60      	ldr	r3, [pc, #384]	@ (8002698 <main+0x188>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4a5f      	ldr	r2, [pc, #380]	@ (8002698 <main+0x188>)
 800251c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002520:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 8002522:	4b5e      	ldr	r3, [pc, #376]	@ (800269c <main+0x18c>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 8002528:	4b5c      	ldr	r3, [pc, #368]	@ (800269c <main+0x18c>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800252e:	f003 ff88 	bl	8006442 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002532:	f000 f9eb 	bl	800290c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002536:	f000 fa4b 	bl	80029d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800253a:	f001 f8f9 	bl	8003730 <MX_GPIO_Init>
  MX_ADC1_Init();
 800253e:	f000 fa7b 	bl	8002a38 <MX_ADC1_Init>
  MX_COMP1_Init();
 8002542:	f000 fadd 	bl	8002b00 <MX_COMP1_Init>
  MX_COMP2_Init();
 8002546:	f000 fb09 	bl	8002b5c <MX_COMP2_Init>
  MX_I2C1_Init();
 800254a:	f000 fb33 	bl	8002bb4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800254e:	f000 fb71 	bl	8002c34 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8002552:	f000 fbaf 	bl	8002cb4 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8002556:	f000 fbf9 	bl	8002d4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800255a:	f000 fc43 	bl	8002de4 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800255e:	f000 fc8d 	bl	8002e7c <MX_SAI1_Init>
  MX_SAI2_Init();
 8002562:	f000 fd23 	bl	8002fac <MX_SAI2_Init>
  MX_SPI3_Init();
 8002566:	f000 fdc7 	bl	80030f8 <MX_SPI3_Init>
  MX_TIM1_Init();
 800256a:	f000 fe03 	bl	8003174 <MX_TIM1_Init>
  MX_TIM2_Init();
 800256e:	f000 feb9 	bl	80032e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002572:	f000 ff1b 	bl	80033ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8002576:	f000 ff7f 	bl	8003478 <MX_TIM4_Init>
  MX_TIM15_Init();
 800257a:	f000 ffd7 	bl	800352c <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 800257e:	f001 f8cf 	bl	8003720 <MX_USB_OTG_FS_USB_Init>
  MX_TIM17_Init();
 8002582:	f001 f857 	bl	8003634 <MX_TIM17_Init>
  MX_SPI2_Init();
 8002586:	f000 fd79 	bl	800307c <MX_SPI2_Init>
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);


//  ENABLE_LORA_REPEATEDLY(&lora);
  // IDK why, but the function causes a hard fault, while keeping the loop here is safe
  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 800258a:	a341      	add	r3, pc, #260	@ (adr r3, 8002690 <main+0x180>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	e9cd 2300 	strd	r2, r3, [sp]
 8002594:	2301      	movs	r3, #1
 8002596:	4a42      	ldr	r2, [pc, #264]	@ (80026a0 <main+0x190>)
 8002598:	4942      	ldr	r1, [pc, #264]	@ (80026a4 <main+0x194>)
 800259a:	4843      	ldr	r0, [pc, #268]	@ (80026a8 <main+0x198>)
 800259c:	f7ff ff55 	bl	800244a <lora_init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
	 while (res != LORA_OK) {
 80025a6:	e010      	b.n	80025ca <main+0xba>
	   // Initialization failed
		 HAL_Delay(100);
 80025a8:	2064      	movs	r0, #100	@ 0x64
 80025aa:	f003 ffbf 	bl	800652c <HAL_Delay>
		 res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 80025ae:	a338      	add	r3, pc, #224	@ (adr r3, 8002690 <main+0x180>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	e9cd 2300 	strd	r2, r3, [sp]
 80025b8:	2301      	movs	r3, #1
 80025ba:	4a39      	ldr	r2, [pc, #228]	@ (80026a0 <main+0x190>)
 80025bc:	4939      	ldr	r1, [pc, #228]	@ (80026a4 <main+0x194>)
 80025be:	483a      	ldr	r0, [pc, #232]	@ (80026a8 <main+0x198>)
 80025c0:	f7ff ff43 	bl	800244a <lora_init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
	 while (res != LORA_OK) {
 80025ca:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ea      	bne.n	80025a8 <main+0x98>
	 }
//  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
//  	     if (res != LORA_OK) {
//  	       // Initialization failed
//  	     }
LCD_init();
 80025d2:	f7ff facb 	bl	8001b6c <LCD_init>
lora_enable_interrupt_rx_done(&lora);
 80025d6:	4834      	ldr	r0, [pc, #208]	@ (80026a8 <main+0x198>)
 80025d8:	f7ff ff1d 	bl	8002416 <lora_enable_interrupt_rx_done>
lora_mode_receive_continuous(&lora);
 80025dc:	4832      	ldr	r0, [pc, #200]	@ (80026a8 <main+0x198>)
 80025de:	f7ff fca7 	bl	8001f30 <lora_mode_receive_continuous>
JOYSTICK_INIT(hi2c1);
 80025e2:	4c32      	ldr	r4, [pc, #200]	@ (80026ac <main+0x19c>)
 80025e4:	4668      	mov	r0, sp
 80025e6:	f104 0310 	add.w	r3, r4, #16
 80025ea:	2244      	movs	r2, #68	@ 0x44
 80025ec:	4619      	mov	r1, r3
 80025ee:	f00d fdf6 	bl	80101de <memcpy>
 80025f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025f6:	f7fe fd07 	bl	8001008 <JOYSTICK_INIT>
TempHum_t data;
initTempHumSensor(&hi2c2);
 80025fa:	482d      	ldr	r0, [pc, #180]	@ (80026b0 <main+0x1a0>)
 80025fc:	f7fe fc64 	bl	8000ec8 <initTempHumSensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// 0 = runner view
// 1 = player 1 view
// 2 = weight and age input view
uint8_t current_viewport = 0; //determines what screen state you are on
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
DISPLAY_TIMER_TRIGGERED = 0;
 8002606:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <main+0x1a4>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
HAL_TIM_Base_Start_IT(&htim17);
 800260c:	482a      	ldr	r0, [pc, #168]	@ (80026b8 <main+0x1a8>)
 800260e:	f00a fedf 	bl	800d3d0 <HAL_TIM_Base_Start_IT>

// TEMP DATA
float exhaustion = 12;
 8002612:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <main+0x1ac>)
 8002614:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

// Set this pin ('D' on keypad) low for interrupt
 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800261e:	4828      	ldr	r0, [pc, #160]	@ (80026c0 <main+0x1b0>)
 8002620:	f005 fb98 	bl	8007d54 <HAL_GPIO_WritePin>


 // DUMMY DATA FOR TESTING DATA
   struct arm_to_base armband_data = {0,0,0,0};
 8002624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
   struct base_to_arm buzzer = {0};
 8002632:	2300      	movs	r3, #0
 8002634:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104

//   armband_data.velocity = 12.3;
//   armband_data.heartrate = 98.54;
//   armband_data.steps = 20000;
   uint16_t player_data_fill_height = 140;
 8002638:	238c      	movs	r3, #140	@ 0x8c
 800263a:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    /* USER CODE BEGIN 3 */
	  // STATE MACHINE HERE
	  // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
	  // Joystick allows user to switch between states

	  uint8_t lr = threshold();
 800263e:	f7fe fd69 	bl	8001114 <threshold>
 8002642:	4603      	mov	r3, r0
 8002644:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
	  // Toggle current_viewport when joystick right
	  if (lr == 2) {
 8002648:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800264c:	2b02      	cmp	r3, #2
 800264e:	d115      	bne.n	800267c <main+0x16c>
		  current_viewport = (current_viewport == 2) ? 2 : 1;
 8002650:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8002654:	2b02      	cmp	r3, #2
 8002656:	d101      	bne.n	800265c <main+0x14c>
 8002658:	2302      	movs	r3, #2
 800265a:	e000      	b.n	800265e <main+0x14e>
 800265c:	2301      	movs	r3, #1
 800265e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 8002662:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8002666:	2200      	movs	r2, #0
 8002668:	9200      	str	r2, [sp, #0]
 800266a:	22f0      	movs	r2, #240	@ 0xf0
 800266c:	2105      	movs	r1, #5
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff f95c 	bl	800192c <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <main+0x1a4>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e032      	b.n	80026e2 <main+0x1d2>
	  }
	  // Toggle current_viewport when joystick left
	  else if(lr == 1){
 800267c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8002680:	2b01      	cmp	r3, #1
 8002682:	d12e      	bne.n	80026e2 <main+0x1d2>
		  current_viewport = (current_viewport == 2) ? 2 : 0;
 8002684:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8002688:	2b02      	cmp	r3, #2
 800268a:	d11b      	bne.n	80026c4 <main+0x1b4>
 800268c:	2302      	movs	r3, #2
 800268e:	e01a      	b.n	80026c6 <main+0x1b6>
 8002690:	36e55840 	.word	0x36e55840
 8002694:	00000000 	.word	0x00000000
 8002698:	e000edf0 	.word	0xe000edf0
 800269c:	e0001000 	.word	0xe0001000
 80026a0:	48000c00 	.word	0x48000c00
 80026a4:	200007d0 	.word	0x200007d0
 80026a8:	20000a60 	.word	0x20000a60
 80026ac:	200003b0 	.word	0x200003b0
 80026b0:	20000404 	.word	0x20000404
 80026b4:	20000a78 	.word	0x20000a78
 80026b8:	20000a14 	.word	0x20000a14
 80026bc:	41400000 	.word	0x41400000
 80026c0:	48001400 	.word	0x48001400
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 80026ca:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80026ce:	2200      	movs	r2, #0
 80026d0:	9200      	str	r2, [sp, #0]
 80026d2:	22f0      	movs	r2, #240	@ 0xf0
 80026d4:	2105      	movs	r1, #5
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff f928 	bl	800192c <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 80026dc:	4b82      	ldr	r3, [pc, #520]	@ (80028e8 <main+0x3d8>)
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
	  }

	  if(LoRaRecieve == 1){
 80026e2:	4b82      	ldr	r3, [pc, #520]	@ (80028ec <main+0x3dc>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d126      	bne.n	8002738 <main+0x228>
		  //Get data
//		  	  lora_mode_receive_continuous(&lora);
		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 80026ea:	1d39      	adds	r1, r7, #4
 80026ec:	f207 1323 	addw	r3, r7, #291	@ 0x123
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	487d      	ldr	r0, [pc, #500]	@ (80028f0 <main+0x3e0>)
 80026fa:	f7ff fe64 	bl	80023c6 <lora_receive_packet_blocking>
		  	  memcpy(&armband_data, &buffer, sizeof(armband_data));
 80026fe:	1d39      	adds	r1, r7, #4
 8002700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002704:	2210      	movs	r2, #16
 8002706:	4618      	mov	r0, r3
 8002708:	f00d fd69 	bl	80101de <memcpy>
//		  	  if (res != LORA_OK) {
//		  		  // Receive failed
//		  	  }
		  	  res = lora_send_packet(&lora, &buzzer, sizeof(buzzer));
 800270c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002710:	2201      	movs	r2, #1
 8002712:	4619      	mov	r1, r3
 8002714:	4876      	ldr	r0, [pc, #472]	@ (80028f0 <main+0x3e0>)
 8002716:	f7ff fda2 	bl	800225e <lora_send_packet>
 800271a:	4603      	mov	r3, r0
 800271c:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
		  	lora_mode_receive_continuous(&lora);
 8002720:	4873      	ldr	r0, [pc, #460]	@ (80028f0 <main+0x3e0>)
 8002722:	f7ff fc05 	bl	8001f30 <lora_mode_receive_continuous>



		  	if (!lora_is_packet_available(&lora))
 8002726:	4872      	ldr	r0, [pc, #456]	@ (80028f0 <main+0x3e0>)
 8002728:	f7ff fdab 	bl	8002282 <lora_is_packet_available>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <main+0x228>
		  		LoRaRecieve = 0;
 8002732:	4b6e      	ldr	r3, [pc, #440]	@ (80028ec <main+0x3dc>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
	  }

	  // HOME SCREEN / RUNNER VIEW
	  if (current_viewport == 0 && DISPLAY_TIMER_TRIGGERED == 1) {
 8002738:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800273c:	2b00      	cmp	r3, #0
 800273e:	d140      	bne.n	80027c2 <main+0x2b2>
 8002740:	4b69      	ldr	r3, [pc, #420]	@ (80028e8 <main+0x3d8>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d13c      	bne.n	80027c2 <main+0x2b2>
		  UG_FontSetTransparency(1);
 8002748:	2001      	movs	r0, #1
 800274a:	f002 fb9b 	bl	8004e84 <UG_FontSetTransparency>
		  data = get_temp_hum();
 800274e:	f7fe fc0f 	bl	8000f70 <get_temp_hum>
 8002752:	eeb0 7a40 	vmov.f32	s14, s0
 8002756:	eef0 7a60 	vmov.f32	s15, s1
 800275a:	ed87 7a46 	vstr	s14, [r7, #280]	@ 0x118
 800275e:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c

		  // DO THE BELOW ONLY ON TIME INTERVAL
		  LCD_Fill(80, 5, 240, 120, C_BLACK);
 8002762:	2300      	movs	r3, #0
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2378      	movs	r3, #120	@ 0x78
 8002768:	22f0      	movs	r2, #240	@ 0xf0
 800276a:	2105      	movs	r1, #5
 800276c:	2050      	movs	r0, #80	@ 0x50
 800276e:	f7ff f8dd 	bl	800192c <LCD_Fill>
		  snprintf(buffer, sizeof(buffer), "Temp: %.3f\nHumid: %.3f", data.temp, data.hum);
 8002772:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fefe 	bl	8000578 <__aeabi_f2d>
 800277c:	4604      	mov	r4, r0
 800277e:	460d      	mov	r5, r1
 8002780:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fef7 	bl	8000578 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	1d38      	adds	r0, r7, #4
 8002790:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002794:	e9cd 4500 	strd	r4, r5, [sp]
 8002798:	4a56      	ldr	r2, [pc, #344]	@ (80028f4 <main+0x3e4>)
 800279a:	2180      	movs	r1, #128	@ 0x80
 800279c:	f00d fc18 	bl	800ffd0 <sniprintf>
		  LCD_PutStr(5, 5, buffer, DEFAULT_FONT, C_GREEN, C_BLACK);
 80027a0:	1d3a      	adds	r2, r7, #4
 80027a2:	2300      	movs	r3, #0
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	4b52      	ldr	r3, [pc, #328]	@ (80028f8 <main+0x3e8>)
 80027ae:	2105      	movs	r1, #5
 80027b0:	2005      	movs	r0, #5
 80027b2:	f7ff f99e 	bl	8001af2 <LCD_PutStr>
//		  LCD_PutStr(50, 56, "Temp: " + data.temp + "\nHumid: " + data.hum, DEFAULT_FONT, C_GREEN, C_BLACK);
		  // Why the HAL_Delays? don't these only trigger on a timer anyway?
		  HAL_Delay(100);
 80027b6:	2064      	movs	r0, #100	@ 0x64
 80027b8:	f003 feb8 	bl	800652c <HAL_Delay>
		  DISPLAY_TIMER_TRIGGERED = 0;
 80027bc:	4b4a      	ldr	r3, [pc, #296]	@ (80028e8 <main+0x3d8>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
	  }
	  // We need an actual interrupt, otherwise can't listen for LoRa
	  if(current_viewport == 1 && KeyPadSelect){
 80027c2:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d106      	bne.n	80027d8 <main+0x2c8>
 80027ca:	4b4c      	ldr	r3, [pc, #304]	@ (80028fc <main+0x3ec>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <main+0x2c8>
		  current_viewport = 2;
 80027d2:	2302      	movs	r3, #2
 80027d4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
//		  while(KeyPadSelect == 1){}
	  }

	  if (current_viewport == 1 && DISPLAY_TIMER_TRIGGERED == 1) {
 80027d8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d148      	bne.n	8002872 <main+0x362>
 80027e0:	4b41      	ldr	r3, [pc, #260]	@ (80028e8 <main+0x3d8>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d144      	bne.n	8002872 <main+0x362>
		  UG_FontSetTransparency(1);
 80027e8:	2001      	movs	r0, #1
 80027ea:	f002 fb4b 	bl	8004e84 <UG_FontSetTransparency>
		  //Get the data that will be displayed by each player

//		  LCD_Fill(100, 5, 240, player_data_fill_height, C_BLACK);
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 80027ee:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80027f2:	2300      	movs	r3, #0
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	2300      	movs	r3, #0
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4b3f      	ldr	r3, [pc, #252]	@ (80028f8 <main+0x3e8>)
 80027fc:	2105      	movs	r1, #5
 80027fe:	2005      	movs	r0, #5
 8002800:	f7ff f977 	bl	8001af2 <LCD_PutStr>
		  snprintf(player_write_buffer, sizeof(player_write_buffer), "Velocity: %.3f\nHeart Rate: %d\nExhaustion: %.3f\nStep Count: %d",
				  armband_data.velocity, armband_data.heartrate, exhaustion, armband_data.steps);
 8002804:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
		  snprintf(player_write_buffer, sizeof(player_write_buffer), "Velocity: %.3f\nHeart Rate: %d\nExhaustion: %.3f\nStep Count: %d",
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd feb5 	bl	8000578 <__aeabi_f2d>
 800280e:	4604      	mov	r4, r0
 8002810:	460d      	mov	r5, r1
 8002812:	f8d7 6110 	ldr.w	r6, [r7, #272]	@ 0x110
 8002816:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800281a:	f7fd fead 	bl	8000578 <__aeabi_f2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8002826:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 800282a:	9106      	str	r1, [sp, #24]
 800282c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002830:	9602      	str	r6, [sp, #8]
 8002832:	e9cd 4500 	strd	r4, r5, [sp]
 8002836:	4a32      	ldr	r2, [pc, #200]	@ (8002900 <main+0x3f0>)
 8002838:	2180      	movs	r1, #128	@ 0x80
 800283a:	f00d fbc9 	bl	800ffd0 <sniprintf>
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_GREEN, C_BLACK);
 800283e:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8002842:	2300      	movs	r3, #0
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <main+0x3e8>)
 800284e:	2105      	movs	r1, #5
 8002850:	2005      	movs	r0, #5
 8002852:	f7ff f94e 	bl	8001af2 <LCD_PutStr>
		  HAL_Delay(100);
 8002856:	2064      	movs	r0, #100	@ 0x64
 8002858:	f003 fe68 	bl	800652c <HAL_Delay>
		  DISPLAY_TIMER_TRIGGERED = 0;
 800285c:	4b22      	ldr	r3, [pc, #136]	@ (80028e8 <main+0x3d8>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		  // TESTING BELOW
		  ++exhaustion;
 8002862:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8002866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800286a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800286e:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
	  }


	  // WEIGHT AND AGE INPUT
	  if (current_viewport == 2) {
 8002872:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8002876:	2b02      	cmp	r3, #2
 8002878:	d12c      	bne.n	80028d4 <main+0x3c4>
		  LCD_Fill(5, 5, 240, player_data_fill_height, C_BLACK);
 800287a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800287e:	2200      	movs	r2, #0
 8002880:	9200      	str	r2, [sp, #0]
 8002882:	22f0      	movs	r2, #240	@ 0xf0
 8002884:	2105      	movs	r1, #5
 8002886:	2005      	movs	r0, #5
 8002888:	f7ff f850 	bl	800192c <LCD_Fill>
		  while ( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 800288c:	bf00      	nop
 800288e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002892:	481c      	ldr	r0, [pc, #112]	@ (8002904 <main+0x3f4>)
 8002894:	f005 fa46 	bl	8007d24 <HAL_GPIO_ReadPin>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f7      	beq.n	800288e <main+0x37e>
		     }
		  keypad_init();
 800289e:	f7fe fca3 	bl	80011e8 <keypad_init>
		  running();
 80028a2:	f7fe fd79 	bl	8001398 <running>
		  KeyPadSelect = 0;
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <main+0x3ec>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
		  // Go back to runner screen
		  current_viewport = 1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
		  LCD_Fill(5, 5, 160, 40, C_BLACK);
 80028b2:	2300      	movs	r3, #0
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2328      	movs	r3, #40	@ 0x28
 80028b8:	22a0      	movs	r2, #160	@ 0xa0
 80028ba:	2105      	movs	r1, #5
 80028bc:	2005      	movs	r0, #5
 80028be:	f7ff f835 	bl	800192c <LCD_Fill>
		  DISPLAY_TIMER_TRIGGERED = 1;
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <main+0x3d8>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
		  // Listen to 'D' again
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028ce:	480e      	ldr	r0, [pc, #56]	@ (8002908 <main+0x3f8>)
 80028d0:	f005 fa40 	bl	8007d54 <HAL_GPIO_WritePin>
//	  //	  UG_Update();
//	  	  LCD_PutStr(50,56, "TESTING", DEFAULT_FONT, C_GREEN, C_BLACK);
//	  	  HAL_Delay(500);


	  heartrate = armband_data.heartrate;
 80028d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80028d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	  stepcount = armband_data.steps;
 80028dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  {
 80028e4:	e6ab      	b.n	800263e <main+0x12e>
 80028e6:	bf00      	nop
 80028e8:	20000a78 	.word	0x20000a78
 80028ec:	20000a7a 	.word	0x20000a7a
 80028f0:	20000a60 	.word	0x20000a60
 80028f4:	0801211c 	.word	0x0801211c
 80028f8:	08012174 	.word	0x08012174
 80028fc:	20000a79 	.word	0x20000a79
 8002900:	08012134 	.word	0x08012134
 8002904:	48000c00 	.word	0x48000c00
 8002908:	48001400 	.word	0x48001400

0800290c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b096      	sub	sp, #88	@ 0x58
 8002910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	2244      	movs	r2, #68	@ 0x44
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f00d fbcf 	bl	80100be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800292e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002932:	f006 f84d 	bl	80089d0 <HAL_PWREx_ControlVoltageScaling>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800293c:	f001 f872 	bl	8003a24 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002940:	f006 f816 	bl	8008970 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002944:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <SystemClock_Config+0xc0>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294a:	4a20      	ldr	r2, [pc, #128]	@ (80029cc <SystemClock_Config+0xc0>)
 800294c:	f023 0318 	bic.w	r3, r3, #24
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002954:	2314      	movs	r3, #20
 8002956:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002958:	2301      	movs	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800295c:	2301      	movs	r3, #1
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002964:	2360      	movs	r3, #96	@ 0x60
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002968:	2302      	movs	r3, #2
 800296a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800296c:	2301      	movs	r3, #1
 800296e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002970:	2301      	movs	r3, #1
 8002972:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002974:	2310      	movs	r3, #16
 8002976:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002978:	2302      	movs	r3, #2
 800297a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800297c:	2302      	movs	r3, #2
 800297e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002980:	2302      	movs	r3, #2
 8002982:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4618      	mov	r0, r3
 800298a:	f006 f8d5 	bl	8008b38 <HAL_RCC_OscConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002994:	f001 f846 	bl	8003a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002998:	230f      	movs	r3, #15
 800299a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299c:	2303      	movs	r3, #3
 800299e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029ac:	463b      	mov	r3, r7
 80029ae:	2101      	movs	r1, #1
 80029b0:	4618      	mov	r0, r3
 80029b2:	f006 fcdb 	bl	800936c <HAL_RCC_ClockConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80029bc:	f001 f832 	bl	8003a24 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80029c0:	f008 f9e4 	bl	800ad8c <HAL_RCCEx_EnableMSIPLLMode>
}
 80029c4:	bf00      	nop
 80029c6:	3758      	adds	r7, #88	@ 0x58
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000

080029d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0a6      	sub	sp, #152	@ 0x98
 80029d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2294      	movs	r2, #148	@ 0x94
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f00d fb6e 	bl	80100be <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80029e2:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80029e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80029e8:	2300      	movs	r3, #0
 80029ea:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80029f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80029f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80029f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80029fe:	2301      	movs	r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002a06:	2318      	movs	r3, #24
 8002a08:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a12:	2302      	movs	r3, #2
 8002a14:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <PeriphCommonClock_Config+0x64>)
 8002a18:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f006 ff63 	bl	80098e8 <HAL_RCCEx_PeriphCLKConfig>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002a28:	f000 fffc 	bl	8003a24 <Error_Handler>
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3798      	adds	r7, #152	@ 0x98
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	01110000 	.word	0x01110000

08002a38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a3e:	463b      	mov	r3, r7
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a4e:	4b29      	ldr	r3, [pc, #164]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a50:	4a29      	ldr	r2, [pc, #164]	@ (8002af8 <MX_ADC1_Init+0xc0>)
 8002a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a54:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a5a:	4b26      	ldr	r3, [pc, #152]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a60:	4b24      	ldr	r3, [pc, #144]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a66:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a6c:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a6e:	2204      	movs	r2, #4
 8002a70:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a72:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a78:	4b1e      	ldr	r3, [pc, #120]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a98:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002aa0:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002aa6:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aae:	4811      	ldr	r0, [pc, #68]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002ab0:	f003 ff00 	bl	80068b4 <HAL_ADC_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002aba:	f000 ffb3 	bl	8003a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002abe:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <MX_ADC1_Init+0xc4>)
 8002ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002aca:	237f      	movs	r3, #127	@ 0x7f
 8002acc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ace:	2304      	movs	r3, #4
 8002ad0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4806      	ldr	r0, [pc, #24]	@ (8002af4 <MX_ADC1_Init+0xbc>)
 8002adc:	f004 f830 	bl	8006b40 <HAL_ADC_ConfigChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002ae6:	f000 ff9d 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200002f0 	.word	0x200002f0
 8002af8:	50040000 	.word	0x50040000
 8002afc:	04300002 	.word	0x04300002

08002b00 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002b04:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b06:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <MX_COMP1_Init+0x54>)
 8002b08:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b0c:	4a12      	ldr	r2, [pc, #72]	@ (8002b58 <MX_COMP1_Init+0x58>)
 8002b0e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b12:	2280      	movs	r2, #128	@ 0x80
 8002b14:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002b3a:	4805      	ldr	r0, [pc, #20]	@ (8002b50 <MX_COMP1_Init+0x50>)
 8002b3c:	f004 fca4 	bl	8007488 <HAL_COMP_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8002b46:	f000 ff6d 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000358 	.word	0x20000358
 8002b54:	40010200 	.word	0x40010200
 8002b58:	00800030 	.word	0x00800030

08002b5c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002b60:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b62:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <MX_COMP2_Init+0x54>)
 8002b64:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b68:	2270      	movs	r2, #112	@ 0x70
 8002b6a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b6e:	2280      	movs	r2, #128	@ 0x80
 8002b70:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002b90:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002b96:	4805      	ldr	r0, [pc, #20]	@ (8002bac <MX_COMP2_Init+0x50>)
 8002b98:	f004 fc76 	bl	8007488 <HAL_COMP_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002ba2:	f000 ff3f 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000384 	.word	0x20000384
 8002bb0:	40010204 	.word	0x40010204

08002bb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bba:	4a1c      	ldr	r2, [pc, #112]	@ (8002c2c <MX_I2C1_Init+0x78>)
 8002bbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <MX_I2C1_Init+0x7c>)
 8002bc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bc4:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bca:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be2:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bee:	480e      	ldr	r0, [pc, #56]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002bf0:	f005 f8eb 	bl	8007dca <HAL_I2C_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bfa:	f000 ff13 	bl	8003a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4809      	ldr	r0, [pc, #36]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002c02:	f005 fe1d 	bl	8008840 <HAL_I2CEx_ConfigAnalogFilter>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c0c:	f000 ff0a 	bl	8003a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c10:	2100      	movs	r1, #0
 8002c12:	4805      	ldr	r0, [pc, #20]	@ (8002c28 <MX_I2C1_Init+0x74>)
 8002c14:	f005 fe5f 	bl	80088d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c1e:	f000 ff01 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200003b0 	.word	0x200003b0
 8002c2c:	40005400 	.word	0x40005400
 8002c30:	00707cbb 	.word	0x00707cbb

08002c34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <MX_I2C2_Init+0x78>)
 8002c3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c40:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb0 <MX_I2C2_Init+0x7c>)
 8002c42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c44:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c4a:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c50:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c6e:	480e      	ldr	r0, [pc, #56]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c70:	f005 f8ab 	bl	8007dca <HAL_I2C_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c7a:	f000 fed3 	bl	8003a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4809      	ldr	r0, [pc, #36]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c82:	f005 fddd 	bl	8008840 <HAL_I2CEx_ConfigAnalogFilter>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c8c:	f000 feca 	bl	8003a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c90:	2100      	movs	r1, #0
 8002c92:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <MX_I2C2_Init+0x74>)
 8002c94:	f005 fe1f 	bl	80088d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c9e:	f000 fec1 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000404 	.word	0x20000404
 8002cac:	40005800 	.word	0x40005800
 8002cb0:	00707cbb 	.word	0x00707cbb

08002cb4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cb8:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cba:	4a23      	ldr	r2, [pc, #140]	@ (8002d48 <MX_LPUART1_UART_Init+0x94>)
 8002cbc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002cbe:	4b21      	ldr	r3, [pc, #132]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cc4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cda:	220c      	movs	r2, #12
 8002cdc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cde:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce4:	4b17      	ldr	r3, [pc, #92]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cea:	4b16      	ldr	r3, [pc, #88]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cf0:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002cf6:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cfc:	4811      	ldr	r0, [pc, #68]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cfe:	f00b fca1 	bl	800e644 <HAL_UART_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d08:	f000 fe8c 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	480d      	ldr	r0, [pc, #52]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002d10:	f00c fac4 	bl	800f29c <HAL_UARTEx_SetTxFifoThreshold>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d1a:	f000 fe83 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4808      	ldr	r0, [pc, #32]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002d22:	f00c faf9 	bl	800f318 <HAL_UARTEx_SetRxFifoThreshold>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d2c:	f000 fe7a 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d30:	4804      	ldr	r0, [pc, #16]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002d32:	f00c fa7a 	bl	800f22a <HAL_UARTEx_DisableFifoMode>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d3c:	f000 fe72 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000458 	.word	0x20000458
 8002d48:	40008000 	.word	0x40008000

08002d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d50:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d52:	4a23      	ldr	r2, [pc, #140]	@ (8002de0 <MX_USART2_UART_Init+0x94>)
 8002d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d56:	4b21      	ldr	r3, [pc, #132]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d72:	220c      	movs	r2, #12
 8002d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d76:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d7c:	4b17      	ldr	r3, [pc, #92]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d82:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d88:	4b14      	ldr	r3, [pc, #80]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d8e:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d94:	4811      	ldr	r0, [pc, #68]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002d96:	f00b fc55 	bl	800e644 <HAL_UART_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002da0:	f000 fe40 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da4:	2100      	movs	r1, #0
 8002da6:	480d      	ldr	r0, [pc, #52]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002da8:	f00c fa78 	bl	800f29c <HAL_UARTEx_SetTxFifoThreshold>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002db2:	f000 fe37 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db6:	2100      	movs	r1, #0
 8002db8:	4808      	ldr	r0, [pc, #32]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002dba:	f00c faad 	bl	800f318 <HAL_UARTEx_SetRxFifoThreshold>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002dc4:	f000 fe2e 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <MX_USART2_UART_Init+0x90>)
 8002dca:	f00c fa2e 	bl	800f22a <HAL_UARTEx_DisableFifoMode>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002dd4:	f000 fe26 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	200004ec 	.word	0x200004ec
 8002de0:	40004400 	.word	0x40004400

08002de4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002de8:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002dea:	4a23      	ldr	r2, [pc, #140]	@ (8002e78 <MX_USART3_UART_Init+0x94>)
 8002dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dee:	4b21      	ldr	r3, [pc, #132]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b1c      	ldr	r3, [pc, #112]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b17      	ldr	r3, [pc, #92]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e1a:	4b16      	ldr	r3, [pc, #88]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e20:	4b14      	ldr	r3, [pc, #80]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e26:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e2c:	4811      	ldr	r0, [pc, #68]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e2e:	f00b fc09 	bl	800e644 <HAL_UART_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e38:	f000 fdf4 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	480d      	ldr	r0, [pc, #52]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e40:	f00c fa2c 	bl	800f29c <HAL_UARTEx_SetTxFifoThreshold>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e4a:	f000 fdeb 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4808      	ldr	r0, [pc, #32]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e52:	f00c fa61 	bl	800f318 <HAL_UARTEx_SetRxFifoThreshold>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e5c:	f000 fde2 	bl	8003a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e60:	4804      	ldr	r0, [pc, #16]	@ (8002e74 <MX_USART3_UART_Init+0x90>)
 8002e62:	f00c f9e2 	bl	800f22a <HAL_UARTEx_DisableFifoMode>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e6c:	f000 fdda 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000580 	.word	0x20000580
 8002e78:	40004800 	.word	0x40004800

08002e7c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002e80:	4b45      	ldr	r3, [pc, #276]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002e82:	4a46      	ldr	r2, [pc, #280]	@ (8002f9c <MX_SAI1_Init+0x120>)
 8002e84:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002e86:	4b44      	ldr	r3, [pc, #272]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002e8c:	4b42      	ldr	r3, [pc, #264]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002e92:	4b41      	ldr	r3, [pc, #260]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002e94:	2240      	movs	r2, #64	@ 0x40
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002e98:	4b3f      	ldr	r3, [pc, #252]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002eb0:	4b39      	ldr	r3, [pc, #228]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002eb6:	4b38      	ldr	r3, [pc, #224]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ebc:	4b36      	ldr	r3, [pc, #216]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002ec2:	4b35      	ldr	r3, [pc, #212]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ec4:	4a36      	ldr	r2, [pc, #216]	@ (8002fa0 <MX_SAI1_Init+0x124>)
 8002ec6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002ec8:	4b33      	ldr	r3, [pc, #204]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ece:	4b32      	ldr	r3, [pc, #200]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ed4:	4b30      	ldr	r3, [pc, #192]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002eda:	4b2f      	ldr	r3, [pc, #188]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8002eee:	4b2a      	ldr	r3, [pc, #168]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8002ef6:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002ef8:	2208      	movs	r2, #8
 8002efa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8002efc:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002f02:	4b25      	ldr	r3, [pc, #148]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002f08:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002f0e:	4b22      	ldr	r3, [pc, #136]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002f14:	4b20      	ldr	r3, [pc, #128]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002f26:	4b1c      	ldr	r3, [pc, #112]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002f2c:	481a      	ldr	r0, [pc, #104]	@ (8002f98 <MX_SAI1_Init+0x11c>)
 8002f2e:	f008 fa69 	bl	800b404 <HAL_SAI_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8002f38:	f000 fd74 	bl	8003a24 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa8 <MX_SAI1_Init+0x12c>)
 8002f40:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002f48:	4b16      	ldr	r3, [pc, #88]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002f54:	4b13      	ldr	r3, [pc, #76]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002f5a:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002f60:	4b10      	ldr	r3, [pc, #64]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f62:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa0 <MX_SAI1_Init+0x124>)
 8002f64:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002f66:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002f72:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002f7e:	2302      	movs	r3, #2
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	4807      	ldr	r0, [pc, #28]	@ (8002fa4 <MX_SAI1_Init+0x128>)
 8002f86:	f008 fa0b 	bl	800b3a0 <HAL_SAI_InitProtocol>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8002f90:	f000 fd48 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000614 	.word	0x20000614
 8002f9c:	40015424 	.word	0x40015424
 8002fa0:	0002ee00 	.word	0x0002ee00
 8002fa4:	200006a8 	.word	0x200006a8
 8002fa8:	40015404 	.word	0x40015404

08002fac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fb2:	4a30      	ldr	r2, [pc, #192]	@ (8003074 <MX_SAI2_Init+0xc8>)
 8002fb4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002fc8:	4b29      	ldr	r3, [pc, #164]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002fce:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002fd4:	4b26      	ldr	r3, [pc, #152]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002fda:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002fe0:	4b23      	ldr	r3, [pc, #140]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002fe6:	4b22      	ldr	r3, [pc, #136]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002fec:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002ff4:	4a20      	ldr	r2, [pc, #128]	@ (8003078 <MX_SAI2_Init+0xcc>)
 8002ff6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003000:	2200      	movs	r2, #0
 8003002:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003004:	4b1a      	ldr	r3, [pc, #104]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003006:	2200      	movs	r2, #0
 8003008:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800300a:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <MX_SAI2_Init+0xc4>)
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8003010:	4b17      	ldr	r3, [pc, #92]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8003018:	4b15      	ldr	r3, [pc, #84]	@ (8003070 <MX_SAI2_Init+0xc4>)
 800301a:	2200      	movs	r2, #0
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800301e:	4b14      	ldr	r3, [pc, #80]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003024:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8003026:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003028:	2208      	movs	r2, #8
 800302a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800302c:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <MX_SAI2_Init+0xc4>)
 800302e:	2201      	movs	r2, #1
 8003030:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003032:	4b0f      	ldr	r3, [pc, #60]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003034:	2200      	movs	r2, #0
 8003036:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003038:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <MX_SAI2_Init+0xc4>)
 800303a:	2200      	movs	r2, #0
 800303c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800303e:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003040:	2200      	movs	r2, #0
 8003042:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8003044:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003046:	2200      	movs	r2, #0
 8003048:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800304a:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <MX_SAI2_Init+0xc4>)
 800304c:	2200      	movs	r2, #0
 800304e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8003050:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003052:	2201      	movs	r2, #1
 8003054:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <MX_SAI2_Init+0xc4>)
 8003058:	2200      	movs	r2, #0
 800305a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800305c:	4804      	ldr	r0, [pc, #16]	@ (8003070 <MX_SAI2_Init+0xc4>)
 800305e:	f008 f9d1 	bl	800b404 <HAL_SAI_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8003068:	f000 fcdc 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	2000073c 	.word	0x2000073c
 8003074:	40015804 	.word	0x40015804
 8003078:	0002ee00 	.word	0x0002ee00

0800307c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003080:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <MX_SPI2_Init+0x74>)
 8003082:	4a1c      	ldr	r2, [pc, #112]	@ (80030f4 <MX_SPI2_Init+0x78>)
 8003084:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003086:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <MX_SPI2_Init+0x74>)
 8003088:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800308c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800308e:	4b18      	ldr	r3, [pc, #96]	@ (80030f0 <MX_SPI2_Init+0x74>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003094:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <MX_SPI2_Init+0x74>)
 8003096:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800309a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800309c:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <MX_SPI2_Init+0x74>)
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a2:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030a8:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030b0:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030b2:	2218      	movs	r2, #24
 80030b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030b6:	4b0e      	ldr	r3, [pc, #56]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030bc:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030be:	2200      	movs	r2, #0
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030ca:	2207      	movs	r2, #7
 80030cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030ce:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030d4:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030d6:	2208      	movs	r2, #8
 80030d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030da:	4805      	ldr	r0, [pc, #20]	@ (80030f0 <MX_SPI2_Init+0x74>)
 80030dc:	f008 fcde 	bl	800ba9c <HAL_SPI_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80030e6:	f000 fc9d 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200007d0 	.word	0x200007d0
 80030f4:	40003800 	.word	0x40003800

080030f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <MX_SPI3_Init+0x74>)
 80030fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003170 <MX_SPI3_Init+0x78>)
 8003100:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003102:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <MX_SPI3_Init+0x74>)
 8003104:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003108:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800310a:	4b18      	ldr	r3, [pc, #96]	@ (800316c <MX_SPI3_Init+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003110:	4b16      	ldr	r3, [pc, #88]	@ (800316c <MX_SPI3_Init+0x74>)
 8003112:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003116:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003118:	4b14      	ldr	r3, [pc, #80]	@ (800316c <MX_SPI3_Init+0x74>)
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800311e:	4b13      	ldr	r3, [pc, #76]	@ (800316c <MX_SPI3_Init+0x74>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <MX_SPI3_Init+0x74>)
 8003126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800312a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800312c:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <MX_SPI3_Init+0x74>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <MX_SPI3_Init+0x74>)
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <MX_SPI3_Init+0x74>)
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <MX_SPI3_Init+0x74>)
 8003140:	2200      	movs	r2, #0
 8003142:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003144:	4b09      	ldr	r3, [pc, #36]	@ (800316c <MX_SPI3_Init+0x74>)
 8003146:	2207      	movs	r2, #7
 8003148:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <MX_SPI3_Init+0x74>)
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <MX_SPI3_Init+0x74>)
 8003152:	2208      	movs	r2, #8
 8003154:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003156:	4805      	ldr	r0, [pc, #20]	@ (800316c <MX_SPI3_Init+0x74>)
 8003158:	f008 fca0 	bl	800ba9c <HAL_SPI_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003162:	f000 fc5f 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000834 	.word	0x20000834
 8003170:	40003c00 	.word	0x40003c00

08003174 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b098      	sub	sp, #96	@ 0x60
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800317a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003186:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003192:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	611a      	str	r2, [r3, #16]
 80031a2:	615a      	str	r2, [r3, #20]
 80031a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031a6:	463b      	mov	r3, r7
 80031a8:	222c      	movs	r2, #44	@ 0x2c
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f00c ff86 	bl	80100be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031b2:	4b4a      	ldr	r3, [pc, #296]	@ (80032dc <MX_TIM1_Init+0x168>)
 80031b4:	4a4a      	ldr	r2, [pc, #296]	@ (80032e0 <MX_TIM1_Init+0x16c>)
 80031b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031b8:	4b48      	ldr	r3, [pc, #288]	@ (80032dc <MX_TIM1_Init+0x168>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031be:	4b47      	ldr	r3, [pc, #284]	@ (80032dc <MX_TIM1_Init+0x168>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031c4:	4b45      	ldr	r3, [pc, #276]	@ (80032dc <MX_TIM1_Init+0x168>)
 80031c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031cc:	4b43      	ldr	r3, [pc, #268]	@ (80032dc <MX_TIM1_Init+0x168>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031d2:	4b42      	ldr	r3, [pc, #264]	@ (80032dc <MX_TIM1_Init+0x168>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d8:	4b40      	ldr	r3, [pc, #256]	@ (80032dc <MX_TIM1_Init+0x168>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031de:	483f      	ldr	r0, [pc, #252]	@ (80032dc <MX_TIM1_Init+0x168>)
 80031e0:	f00a f9c7 	bl	800d572 <HAL_TIM_PWM_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80031ea:	f000 fc1b 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031fe:	4619      	mov	r1, r3
 8003200:	4836      	ldr	r0, [pc, #216]	@ (80032dc <MX_TIM1_Init+0x168>)
 8003202:	f00b f835 	bl	800e270 <HAL_TIMEx_MasterConfigSynchronization>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800320c:	f000 fc0a 	bl	8003a24 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003210:	2301      	movs	r3, #1
 8003212:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8003214:	2301      	movs	r3, #1
 8003216:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003218:	2300      	movs	r3, #0
 800321a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800321c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003220:	461a      	mov	r2, r3
 8003222:	2101      	movs	r1, #1
 8003224:	482d      	ldr	r0, [pc, #180]	@ (80032dc <MX_TIM1_Init+0x168>)
 8003226:	f00b f929 	bl	800e47c <HAL_TIMEx_ConfigBreakInput>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003230:	f000 fbf8 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8003234:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003238:	461a      	mov	r2, r3
 800323a:	2102      	movs	r1, #2
 800323c:	4827      	ldr	r0, [pc, #156]	@ (80032dc <MX_TIM1_Init+0x168>)
 800323e:	f00b f91d 	bl	800e47c <HAL_TIMEx_ConfigBreakInput>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003248:	f000 fbec 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800324c:	2360      	movs	r3, #96	@ 0x60
 800324e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003254:	2300      	movs	r3, #0
 8003256:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003258:	2300      	movs	r3, #0
 800325a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800326c:	2208      	movs	r2, #8
 800326e:	4619      	mov	r1, r3
 8003270:	481a      	ldr	r0, [pc, #104]	@ (80032dc <MX_TIM1_Init+0x168>)
 8003272:	f00a fb51 	bl	800d918 <HAL_TIM_PWM_ConfigChannel>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 800327c:	f000 fbd2 	bl	8003a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003280:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003284:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800328a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003298:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800329a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800329e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80032a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80032aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032b8:	463b      	mov	r3, r7
 80032ba:	4619      	mov	r1, r3
 80032bc:	4807      	ldr	r0, [pc, #28]	@ (80032dc <MX_TIM1_Init+0x168>)
 80032be:	f00b f85f 	bl	800e380 <HAL_TIMEx_ConfigBreakDeadTime>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80032c8:	f000 fbac 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032cc:	4803      	ldr	r0, [pc, #12]	@ (80032dc <MX_TIM1_Init+0x168>)
 80032ce:	f000 ffa9 	bl	8004224 <HAL_TIM_MspPostInit>

}
 80032d2:	bf00      	nop
 80032d4:	3760      	adds	r7, #96	@ 0x60
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000898 	.word	0x20000898
 80032e0:	40012c00 	.word	0x40012c00

080032e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	@ 0x28
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032f6:	463b      	mov	r3, r7
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
 8003304:	615a      	str	r2, [r3, #20]
 8003306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003308:	4b27      	ldr	r3, [pc, #156]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 800330a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800330e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003310:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 8003312:	2200      	movs	r2, #0
 8003314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003316:	4b24      	ldr	r3, [pc, #144]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800331c:	4b22      	ldr	r3, [pc, #136]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 800331e:	f04f 32ff 	mov.w	r2, #4294967295
 8003322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003324:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332a:	4b1f      	ldr	r3, [pc, #124]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003330:	481d      	ldr	r0, [pc, #116]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 8003332:	f00a f91e 	bl	800d572 <HAL_TIM_PWM_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800333c:	f000 fb72 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	4619      	mov	r1, r3
 800334e:	4816      	ldr	r0, [pc, #88]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 8003350:	f00a ff8e 	bl	800e270 <HAL_TIMEx_MasterConfigSynchronization>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800335a:	f000 fb63 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800335e:	2360      	movs	r3, #96	@ 0x60
 8003360:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800336e:	463b      	mov	r3, r7
 8003370:	2200      	movs	r2, #0
 8003372:	4619      	mov	r1, r3
 8003374:	480c      	ldr	r0, [pc, #48]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 8003376:	f00a facf 	bl	800d918 <HAL_TIM_PWM_ConfigChannel>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003380:	f000 fb50 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003384:	463b      	mov	r3, r7
 8003386:	2208      	movs	r2, #8
 8003388:	4619      	mov	r1, r3
 800338a:	4807      	ldr	r0, [pc, #28]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 800338c:	f00a fac4 	bl	800d918 <HAL_TIM_PWM_ConfigChannel>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003396:	f000 fb45 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800339a:	4803      	ldr	r0, [pc, #12]	@ (80033a8 <MX_TIM2_Init+0xc4>)
 800339c:	f000 ff42 	bl	8004224 <HAL_TIM_MspPostInit>

}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	@ 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	200008e4 	.word	0x200008e4

080033ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b2:	f107 031c 	add.w	r3, r7, #28
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033be:	463b      	mov	r3, r7
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
 80033cc:	615a      	str	r2, [r3, #20]
 80033ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033d0:	4b27      	ldr	r3, [pc, #156]	@ (8003470 <MX_TIM3_Init+0xc4>)
 80033d2:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <MX_TIM3_Init+0xc8>)
 80033d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033d6:	4b26      	ldr	r3, [pc, #152]	@ (8003470 <MX_TIM3_Init+0xc4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033dc:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <MX_TIM3_Init+0xc4>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033e2:	4b23      	ldr	r3, [pc, #140]	@ (8003470 <MX_TIM3_Init+0xc4>)
 80033e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ea:	4b21      	ldr	r3, [pc, #132]	@ (8003470 <MX_TIM3_Init+0xc4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003470 <MX_TIM3_Init+0xc4>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033f6:	481e      	ldr	r0, [pc, #120]	@ (8003470 <MX_TIM3_Init+0xc4>)
 80033f8:	f00a f8bb 	bl	800d572 <HAL_TIM_PWM_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003402:	f000 fb0f 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	4816      	ldr	r0, [pc, #88]	@ (8003470 <MX_TIM3_Init+0xc4>)
 8003416:	f00a ff2b 	bl	800e270 <HAL_TIMEx_MasterConfigSynchronization>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003420:	f000 fb00 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003424:	2360      	movs	r3, #96	@ 0x60
 8003426:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003434:	463b      	mov	r3, r7
 8003436:	2204      	movs	r2, #4
 8003438:	4619      	mov	r1, r3
 800343a:	480d      	ldr	r0, [pc, #52]	@ (8003470 <MX_TIM3_Init+0xc4>)
 800343c:	f00a fa6c 	bl	800d918 <HAL_TIM_PWM_ConfigChannel>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003446:	f000 faed 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800344a:	463b      	mov	r3, r7
 800344c:	2208      	movs	r2, #8
 800344e:	4619      	mov	r1, r3
 8003450:	4807      	ldr	r0, [pc, #28]	@ (8003470 <MX_TIM3_Init+0xc4>)
 8003452:	f00a fa61 	bl	800d918 <HAL_TIM_PWM_ConfigChannel>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800345c:	f000 fae2 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003460:	4803      	ldr	r0, [pc, #12]	@ (8003470 <MX_TIM3_Init+0xc4>)
 8003462:	f000 fedf 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8003466:	bf00      	nop
 8003468:	3728      	adds	r7, #40	@ 0x28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000930 	.word	0x20000930
 8003474:	40000400 	.word	0x40000400

08003478 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	@ 0x28
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800348a:	463b      	mov	r3, r7
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
 8003498:	615a      	str	r2, [r3, #20]
 800349a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800349c:	4b21      	ldr	r3, [pc, #132]	@ (8003524 <MX_TIM4_Init+0xac>)
 800349e:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <MX_TIM4_Init+0xb0>)
 80034a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <MX_TIM4_Init+0xac>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003524 <MX_TIM4_Init+0xac>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003524 <MX_TIM4_Init+0xac>)
 80034b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <MX_TIM4_Init+0xac>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034bc:	4b19      	ldr	r3, [pc, #100]	@ (8003524 <MX_TIM4_Init+0xac>)
 80034be:	2200      	movs	r2, #0
 80034c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80034c2:	4818      	ldr	r0, [pc, #96]	@ (8003524 <MX_TIM4_Init+0xac>)
 80034c4:	f00a f855 	bl	800d572 <HAL_TIM_PWM_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80034ce:	f000 faa9 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034da:	f107 031c 	add.w	r3, r7, #28
 80034de:	4619      	mov	r1, r3
 80034e0:	4810      	ldr	r0, [pc, #64]	@ (8003524 <MX_TIM4_Init+0xac>)
 80034e2:	f00a fec5 	bl	800e270 <HAL_TIMEx_MasterConfigSynchronization>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80034ec:	f000 fa9a 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f0:	2360      	movs	r3, #96	@ 0x60
 80034f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003500:	463b      	mov	r3, r7
 8003502:	220c      	movs	r2, #12
 8003504:	4619      	mov	r1, r3
 8003506:	4807      	ldr	r0, [pc, #28]	@ (8003524 <MX_TIM4_Init+0xac>)
 8003508:	f00a fa06 	bl	800d918 <HAL_TIM_PWM_ConfigChannel>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003512:	f000 fa87 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003516:	4803      	ldr	r0, [pc, #12]	@ (8003524 <MX_TIM4_Init+0xac>)
 8003518:	f000 fe84 	bl	8004224 <HAL_TIM_MspPostInit>

}
 800351c:	bf00      	nop
 800351e:	3728      	adds	r7, #40	@ 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	2000097c 	.word	0x2000097c
 8003528:	40000800 	.word	0x40000800

0800352c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b096      	sub	sp, #88	@ 0x58
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003532:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800353e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	615a      	str	r2, [r3, #20]
 8003550:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	222c      	movs	r2, #44	@ 0x2c
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f00c fdb0 	bl	80100be <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800355e:	4b33      	ldr	r3, [pc, #204]	@ (800362c <MX_TIM15_Init+0x100>)
 8003560:	4a33      	ldr	r2, [pc, #204]	@ (8003630 <MX_TIM15_Init+0x104>)
 8003562:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003564:	4b31      	ldr	r3, [pc, #196]	@ (800362c <MX_TIM15_Init+0x100>)
 8003566:	2200      	movs	r2, #0
 8003568:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356a:	4b30      	ldr	r3, [pc, #192]	@ (800362c <MX_TIM15_Init+0x100>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003570:	4b2e      	ldr	r3, [pc, #184]	@ (800362c <MX_TIM15_Init+0x100>)
 8003572:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003576:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003578:	4b2c      	ldr	r3, [pc, #176]	@ (800362c <MX_TIM15_Init+0x100>)
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800357e:	4b2b      	ldr	r3, [pc, #172]	@ (800362c <MX_TIM15_Init+0x100>)
 8003580:	2200      	movs	r2, #0
 8003582:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003584:	4b29      	ldr	r3, [pc, #164]	@ (800362c <MX_TIM15_Init+0x100>)
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800358a:	4828      	ldr	r0, [pc, #160]	@ (800362c <MX_TIM15_Init+0x100>)
 800358c:	f009 fff1 	bl	800d572 <HAL_TIM_PWM_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8003596:	f000 fa45 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800359e:	2300      	movs	r3, #0
 80035a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80035a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80035a6:	4619      	mov	r1, r3
 80035a8:	4820      	ldr	r0, [pc, #128]	@ (800362c <MX_TIM15_Init+0x100>)
 80035aa:	f00a fe61 	bl	800e270 <HAL_TIMEx_MasterConfigSynchronization>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80035b4:	f000 fa36 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035b8:	2360      	movs	r3, #96	@ 0x60
 80035ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035c0:	2300      	movs	r3, #0
 80035c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035c4:	2300      	movs	r3, #0
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035d0:	2300      	movs	r3, #0
 80035d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035d8:	2200      	movs	r2, #0
 80035da:	4619      	mov	r1, r3
 80035dc:	4813      	ldr	r0, [pc, #76]	@ (800362c <MX_TIM15_Init+0x100>)
 80035de:	f00a f99b 	bl	800d918 <HAL_TIM_PWM_ConfigChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80035e8:	f000 fa1c 	bl	8003a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003600:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003604:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4807      	ldr	r0, [pc, #28]	@ (800362c <MX_TIM15_Init+0x100>)
 8003610:	f00a feb6 	bl	800e380 <HAL_TIMEx_ConfigBreakDeadTime>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800361a:	f000 fa03 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800361e:	4803      	ldr	r0, [pc, #12]	@ (800362c <MX_TIM15_Init+0x100>)
 8003620:	f000 fe00 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8003624:	bf00      	nop
 8003626:	3758      	adds	r7, #88	@ 0x58
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200009c8 	.word	0x200009c8
 8003630:	40014000 	.word	0x40014000

08003634 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b092      	sub	sp, #72	@ 0x48
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800363a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	611a      	str	r2, [r3, #16]
 800364a:	615a      	str	r2, [r3, #20]
 800364c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800364e:	463b      	mov	r3, r7
 8003650:	222c      	movs	r2, #44	@ 0x2c
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f00c fd32 	bl	80100be <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800365a:	4b2f      	ldr	r3, [pc, #188]	@ (8003718 <MX_TIM17_Init+0xe4>)
 800365c:	4a2f      	ldr	r2, [pc, #188]	@ (800371c <MX_TIM17_Init+0xe8>)
 800365e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2441;
 8003660:	4b2d      	ldr	r3, [pc, #180]	@ (8003718 <MX_TIM17_Init+0xe4>)
 8003662:	f640 1289 	movw	r2, #2441	@ 0x989
 8003666:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003668:	4b2b      	ldr	r3, [pc, #172]	@ (8003718 <MX_TIM17_Init+0xe4>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800366e:	4b2a      	ldr	r3, [pc, #168]	@ (8003718 <MX_TIM17_Init+0xe4>)
 8003670:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003674:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003676:	4b28      	ldr	r3, [pc, #160]	@ (8003718 <MX_TIM17_Init+0xe4>)
 8003678:	2200      	movs	r2, #0
 800367a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800367c:	4b26      	ldr	r3, [pc, #152]	@ (8003718 <MX_TIM17_Init+0xe4>)
 800367e:	2200      	movs	r2, #0
 8003680:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003682:	4b25      	ldr	r3, [pc, #148]	@ (8003718 <MX_TIM17_Init+0xe4>)
 8003684:	2200      	movs	r2, #0
 8003686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003688:	4823      	ldr	r0, [pc, #140]	@ (8003718 <MX_TIM17_Init+0xe4>)
 800368a:	f009 fe49 	bl	800d320 <HAL_TIM_Base_Init>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8003694:	f000 f9c6 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003698:	481f      	ldr	r0, [pc, #124]	@ (8003718 <MX_TIM17_Init+0xe4>)
 800369a:	f009 ff09 	bl	800d4b0 <HAL_TIM_OC_Init>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80036a4:	f000 f9be 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036b0:	2300      	movs	r3, #0
 80036b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036b4:	2300      	movs	r3, #0
 80036b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036bc:	2300      	movs	r3, #0
 80036be:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036c0:	2300      	movs	r3, #0
 80036c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036c8:	2200      	movs	r2, #0
 80036ca:	4619      	mov	r1, r3
 80036cc:	4812      	ldr	r0, [pc, #72]	@ (8003718 <MX_TIM17_Init+0xe4>)
 80036ce:	f00a f8a9 	bl	800d824 <HAL_TIM_OC_ConfigChannel>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80036d8:	f000 f9a4 	bl	8003a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036dc:	2300      	movs	r3, #0
 80036de:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80036fa:	463b      	mov	r3, r7
 80036fc:	4619      	mov	r1, r3
 80036fe:	4806      	ldr	r0, [pc, #24]	@ (8003718 <MX_TIM17_Init+0xe4>)
 8003700:	f00a fe3e 	bl	800e380 <HAL_TIMEx_ConfigBreakDeadTime>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 800370a:	f000 f98b 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800370e:	bf00      	nop
 8003710:	3748      	adds	r7, #72	@ 0x48
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000a14 	.word	0x20000a14
 800371c:	40014800 	.word	0x40014800

08003720 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08e      	sub	sp, #56	@ 0x38
 8003734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003746:	4b9e      	ldr	r3, [pc, #632]	@ (80039c0 <MX_GPIO_Init+0x290>)
 8003748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374a:	4a9d      	ldr	r2, [pc, #628]	@ (80039c0 <MX_GPIO_Init+0x290>)
 800374c:	f043 0310 	orr.w	r3, r3, #16
 8003750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003752:	4b9b      	ldr	r3, [pc, #620]	@ (80039c0 <MX_GPIO_Init+0x290>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800375e:	4b98      	ldr	r3, [pc, #608]	@ (80039c0 <MX_GPIO_Init+0x290>)
 8003760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003762:	4a97      	ldr	r2, [pc, #604]	@ (80039c0 <MX_GPIO_Init+0x290>)
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800376a:	4b95      	ldr	r3, [pc, #596]	@ (80039c0 <MX_GPIO_Init+0x290>)
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003776:	4b92      	ldr	r3, [pc, #584]	@ (80039c0 <MX_GPIO_Init+0x290>)
 8003778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377a:	4a91      	ldr	r2, [pc, #580]	@ (80039c0 <MX_GPIO_Init+0x290>)
 800377c:	f043 0320 	orr.w	r3, r3, #32
 8003780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003782:	4b8f      	ldr	r3, [pc, #572]	@ (80039c0 <MX_GPIO_Init+0x290>)
 8003784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800378e:	4b8c      	ldr	r3, [pc, #560]	@ (80039c0 <MX_GPIO_Init+0x290>)
 8003790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003792:	4a8b      	ldr	r2, [pc, #556]	@ (80039c0 <MX_GPIO_Init+0x290>)
 8003794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800379a:	4b89      	ldr	r3, [pc, #548]	@ (80039c0 <MX_GPIO_Init+0x290>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a6:	4b86      	ldr	r3, [pc, #536]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037aa:	4a85      	ldr	r2, [pc, #532]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037b2:	4b83      	ldr	r3, [pc, #524]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037be:	4b80      	ldr	r3, [pc, #512]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c2:	4a7f      	ldr	r2, [pc, #508]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ca:	4b7d      	ldr	r3, [pc, #500]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037d6:	4b7a      	ldr	r3, [pc, #488]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037da:	4a79      	ldr	r2, [pc, #484]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037dc:	f043 0308 	orr.w	r3, r3, #8
 80037e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037e2:	4b77      	ldr	r3, [pc, #476]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037ee:	4b74      	ldr	r3, [pc, #464]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f2:	4a73      	ldr	r2, [pc, #460]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037fa:	4b71      	ldr	r3, [pc, #452]	@ (80039c0 <MX_GPIO_Init+0x290>)
 80037fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003806:	f005 f987 	bl	8008b18 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800380a:	2200      	movs	r2, #0
 800380c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003810:	486c      	ldr	r0, [pc, #432]	@ (80039c4 <MX_GPIO_Init+0x294>)
 8003812:	f004 fa9f 	bl	8007d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003816:	2200      	movs	r2, #0
 8003818:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 800381c:	486a      	ldr	r0, [pc, #424]	@ (80039c8 <MX_GPIO_Init+0x298>)
 800381e:	f004 fa99 	bl	8007d54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8003822:	2201      	movs	r2, #1
 8003824:	2101      	movs	r1, #1
 8003826:	4869      	ldr	r0, [pc, #420]	@ (80039cc <MX_GPIO_Init+0x29c>)
 8003828:	f004 fa94 	bl	8007d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800382c:	2320      	movs	r3, #32
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003830:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800383a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800383e:	4619      	mov	r1, r3
 8003840:	4860      	ldr	r0, [pc, #384]	@ (80039c4 <MX_GPIO_Init+0x294>)
 8003842:	f004 f8dd 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003846:	2310      	movs	r3, #16
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003852:	2303      	movs	r3, #3
 8003854:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003856:	2305      	movs	r3, #5
 8003858:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800385e:	4619      	mov	r1, r3
 8003860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003864:	f004 f8cc 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003868:	23e0      	movs	r3, #224	@ 0xe0
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800386c:	2300      	movs	r3, #0
 800386e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003870:	2301      	movs	r3, #1
 8003872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003878:	4619      	mov	r1, r3
 800387a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800387e:	f004 f8bf 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003882:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003888:	2311      	movs	r3, #17
 800388a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003890:	2300      	movs	r3, #0
 8003892:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003898:	4619      	mov	r1, r3
 800389a:	484a      	ldr	r0, [pc, #296]	@ (80039c4 <MX_GPIO_Init+0x294>)
 800389c:	f004 f8b0 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80038a0:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a6:	2301      	movs	r3, #1
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038aa:	2301      	movs	r3, #1
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2300      	movs	r3, #0
 80038b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038b6:	4619      	mov	r1, r3
 80038b8:	4843      	ldr	r0, [pc, #268]	@ (80039c8 <MX_GPIO_Init+0x298>)
 80038ba:	f004 f8a1 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80038be:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80038c4:	2311      	movs	r3, #17
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038cc:	2300      	movs	r3, #0
 80038ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d4:	4619      	mov	r1, r3
 80038d6:	483c      	ldr	r0, [pc, #240]	@ (80039c8 <MX_GPIO_Init+0x298>)
 80038d8:	f004 f892 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80038dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80038e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e8:	2301      	movs	r3, #1
 80038ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038f0:	4619      	mov	r1, r3
 80038f2:	4836      	ldr	r0, [pc, #216]	@ (80039cc <MX_GPIO_Init+0x29c>)
 80038f4:	f004 f884 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003906:	2303      	movs	r3, #3
 8003908:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800390a:	230c      	movs	r3, #12
 800390c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003912:	4619      	mov	r1, r3
 8003914:	482e      	ldr	r0, [pc, #184]	@ (80039d0 <MX_GPIO_Init+0x2a0>)
 8003916:	f004 f873 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800391a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003920:	2302      	movs	r3, #2
 8003922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003928:	2303      	movs	r3, #3
 800392a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800392c:	230a      	movs	r3, #10
 800392e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003934:	4619      	mov	r1, r3
 8003936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800393a:	f004 f861 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800393e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003944:	2300      	movs	r3, #0
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003950:	4619      	mov	r1, r3
 8003952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003956:	f004 f853 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800395a:	2301      	movs	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395e:	2301      	movs	r3, #1
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	2300      	movs	r3, #0
 8003968:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800396a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800396e:	4619      	mov	r1, r3
 8003970:	4816      	ldr	r0, [pc, #88]	@ (80039cc <MX_GPIO_Init+0x29c>)
 8003972:	f004 f845 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003976:	2304      	movs	r3, #4
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2302      	movs	r3, #2
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003982:	2303      	movs	r3, #3
 8003984:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003986:	230c      	movs	r3, #12
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800398a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800398e:	4619      	mov	r1, r3
 8003990:	480e      	ldr	r0, [pc, #56]	@ (80039cc <MX_GPIO_Init+0x29c>)
 8003992:	f004 f835 	bl	8007a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	2017      	movs	r0, #23
 800399c:	f003 ff41 	bl	8007822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039a0:	2017      	movs	r0, #23
 80039a2:	f003 ff5a 	bl	800785a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2100      	movs	r1, #0
 80039aa:	2028      	movs	r0, #40	@ 0x28
 80039ac:	f003 ff39 	bl	8007822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039b0:	2028      	movs	r0, #40	@ 0x28
 80039b2:	f003 ff52 	bl	800785a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039b6:	bf00      	nop
 80039b8:	3738      	adds	r7, #56	@ 0x38
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	48001400 	.word	0x48001400
 80039c8:	48001000 	.word	0x48001000
 80039cc:	48000c00 	.word	0x48000c00
 80039d0:	48000800 	.word	0x48000800

080039d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	//check which version of the timer triggered this callback and toggle LED
	if(htim == &htim17){
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a06      	ldr	r2, [pc, #24]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d102      	bne.n	80039ea <HAL_TIM_PeriodElapsedCallback+0x16>
		DISPLAY_TIMER_TRIGGERED = 1;
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]
	}
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000a14 	.word	0x20000a14
 80039fc:	20000a78 	.word	0x20000a78

08003a00 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003a08:	1d39      	adds	r1, r7, #4
 8003a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4803      	ldr	r0, [pc, #12]	@ (8003a20 <__io_putchar+0x20>)
 8003a12:	f00a fe67 	bl	800e6e4 <HAL_UART_Transmit>
  return ch;
 8003a16:	687b      	ldr	r3, [r7, #4]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000458 	.word	0x20000458

08003a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <Error_Handler+0x8>

08003a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a36:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <HAL_MspInit+0x44>)
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a74 <HAL_MspInit+0x44>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a42:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <HAL_MspInit+0x44>)
 8003a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_MspInit+0x44>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	4a08      	ldr	r2, [pc, #32]	@ (8003a74 <HAL_MspInit+0x44>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_MspInit+0x44>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000

08003a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	@ 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 031c 	add.w	r3, r7, #28
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2d      	ldr	r2, [pc, #180]	@ (8003b4c <HAL_ADC_MspInit+0xd4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d154      	bne.n	8003b44 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003aa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab2:	4b27      	ldr	r3, [pc, #156]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab6:	4a26      	ldr	r2, [pc, #152]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003abe:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aca:	4b21      	ldr	r3, [pc, #132]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ace:	4a20      	ldr	r2, [pc, #128]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aee:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <HAL_ADC_MspInit+0xd8>)
 8003af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003afa:	233b      	movs	r3, #59	@ 0x3b
 8003afc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003afe:	230b      	movs	r3, #11
 8003b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4811      	ldr	r0, [pc, #68]	@ (8003b54 <HAL_ADC_MspInit+0xdc>)
 8003b0e:	f003 ff77 	bl	8007a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003b12:	230a      	movs	r3, #10
 8003b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b16:	230b      	movs	r3, #11
 8003b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	4619      	mov	r1, r3
 8003b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b28:	f003 ff6a 	bl	8007a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b30:	230b      	movs	r3, #11
 8003b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4806      	ldr	r0, [pc, #24]	@ (8003b58 <HAL_ADC_MspInit+0xe0>)
 8003b40:	f003 ff5e 	bl	8007a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b44:	bf00      	nop
 8003b46:	3730      	adds	r7, #48	@ 0x30
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	50040000 	.word	0x50040000
 8003b50:	40021000 	.word	0x40021000
 8003b54:	48000800 	.word	0x48000800
 8003b58:	48000400 	.word	0x48000400

08003b5c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	@ 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf4 <HAL_COMP_MspInit+0x98>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d118      	bne.n	8003bb0 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf8 <HAL_COMP_MspInit+0x9c>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b82:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf8 <HAL_COMP_MspInit+0x9c>)
 8003b84:	f043 0302 	orr.w	r3, r3, #2
 8003b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_COMP_MspInit+0x9c>)
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b96:	2304      	movs	r3, #4
 8003b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4814      	ldr	r0, [pc, #80]	@ (8003bfc <HAL_COMP_MspInit+0xa0>)
 8003baa:	f003 ff29 	bl	8007a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003bae:	e01c      	b.n	8003bea <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a12      	ldr	r2, [pc, #72]	@ (8003c00 <HAL_COMP_MspInit+0xa4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d117      	bne.n	8003bea <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bba:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf8 <HAL_COMP_MspInit+0x9c>)
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf8 <HAL_COMP_MspInit+0x9c>)
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <HAL_COMP_MspInit+0x9c>)
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bd2:	23c0      	movs	r3, #192	@ 0xc0
 8003bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	4619      	mov	r1, r3
 8003be4:	4805      	ldr	r0, [pc, #20]	@ (8003bfc <HAL_COMP_MspInit+0xa0>)
 8003be6:	f003 ff0b 	bl	8007a00 <HAL_GPIO_Init>
}
 8003bea:	bf00      	nop
 8003bec:	3728      	adds	r7, #40	@ 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40010200 	.word	0x40010200
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	48000400 	.word	0x48000400
 8003c00:	40010204 	.word	0x40010204

08003c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b0b0      	sub	sp, #192	@ 0xc0
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c1c:	f107 0318 	add.w	r3, r7, #24
 8003c20:	2294      	movs	r2, #148	@ 0x94
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f00c fa4a 	bl	80100be <memset>
  if(hi2c->Instance==I2C1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8003d60 <HAL_I2C_MspInit+0x15c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d13c      	bne.n	8003cae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c34:	2340      	movs	r3, #64	@ 0x40
 8003c36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c3c:	f107 0318 	add.w	r3, r7, #24
 8003c40:	4618      	mov	r0, r3
 8003c42:	f005 fe51 	bl	80098e8 <HAL_RCCEx_PeriphCLKConfig>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003c4c:	f7ff feea 	bl	8003a24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c50:	4b44      	ldr	r3, [pc, #272]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c54:	4a43      	ldr	r2, [pc, #268]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003c56:	f043 0302 	orr.w	r3, r3, #2
 8003c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c5c:	4b41      	ldr	r3, [pc, #260]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c70:	2312      	movs	r3, #18
 8003c72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c82:	2304      	movs	r3, #4
 8003c84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c88:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4836      	ldr	r0, [pc, #216]	@ (8003d68 <HAL_I2C_MspInit+0x164>)
 8003c90:	f003 feb6 	bl	8007a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c94:	4b33      	ldr	r3, [pc, #204]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c98:	4a32      	ldr	r2, [pc, #200]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003c9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca0:	4b30      	ldr	r3, [pc, #192]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003cac:	e054      	b.n	8003d58 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8003d6c <HAL_I2C_MspInit+0x168>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d14f      	bne.n	8003d58 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cc0:	f107 0318 	add.w	r3, r7, #24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f005 fe0f 	bl	80098e8 <HAL_RCCEx_PeriphCLKConfig>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003cd0:	f7ff fea8 	bl	8003a24 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cd4:	4b23      	ldr	r3, [pc, #140]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd8:	4a22      	ldr	r2, [pc, #136]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003cda:	f043 0320 	orr.w	r3, r3, #32
 8003cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ce0:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cec:	2303      	movs	r3, #3
 8003cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cf2:	2312      	movs	r3, #18
 8003cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d04:	2304      	movs	r3, #4
 8003d06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d0a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4817      	ldr	r0, [pc, #92]	@ (8003d70 <HAL_I2C_MspInit+0x16c>)
 8003d12:	f003 fe75 	bl	8007a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d16:	2304      	movs	r3, #4
 8003d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d1c:	2312      	movs	r3, #18
 8003d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d2e:	2304      	movs	r3, #4
 8003d30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d38:	4619      	mov	r1, r3
 8003d3a:	480d      	ldr	r0, [pc, #52]	@ (8003d70 <HAL_I2C_MspInit+0x16c>)
 8003d3c:	f003 fe60 	bl	8007a00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d40:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d44:	4a07      	ldr	r2, [pc, #28]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003d46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_I2C_MspInit+0x160>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	37c0      	adds	r7, #192	@ 0xc0
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40005400 	.word	0x40005400
 8003d64:	40021000 	.word	0x40021000
 8003d68:	48000400 	.word	0x48000400
 8003d6c:	40005800 	.word	0x40005800
 8003d70:	48001400 	.word	0x48001400

08003d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b0b2      	sub	sp, #200	@ 0xc8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d8c:	f107 0320 	add.w	r3, r7, #32
 8003d90:	2294      	movs	r2, #148	@ 0x94
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f00c f992 	bl	80100be <memset>
  if(huart->Instance==LPUART1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a64      	ldr	r2, [pc, #400]	@ (8003f30 <HAL_UART_MspInit+0x1bc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d13e      	bne.n	8003e22 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003da4:	2320      	movs	r3, #32
 8003da6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003da8:	2300      	movs	r3, #0
 8003daa:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dac:	f107 0320 	add.w	r3, r7, #32
 8003db0:	4618      	mov	r0, r3
 8003db2:	f005 fd99 	bl	80098e8 <HAL_RCCEx_PeriphCLKConfig>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003dbc:	f7ff fe32 	bl	8003a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003dcc:	4b59      	ldr	r3, [pc, #356]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dd8:	4b56      	ldr	r3, [pc, #344]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ddc:	4a55      	ldr	r2, [pc, #340]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003de4:	4b53      	ldr	r3, [pc, #332]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8003df0:	f004 fe92 	bl	8008b18 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003df4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003df8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003e0e:	2308      	movs	r3, #8
 8003e10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e14:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4847      	ldr	r0, [pc, #284]	@ (8003f38 <HAL_UART_MspInit+0x1c4>)
 8003e1c:	f003 fdf0 	bl	8007a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e20:	e081      	b.n	8003f26 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a45      	ldr	r2, [pc, #276]	@ (8003f3c <HAL_UART_MspInit+0x1c8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d13b      	bne.n	8003ea4 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e30:	2300      	movs	r3, #0
 8003e32:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e34:	f107 0320 	add.w	r3, r7, #32
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f005 fd55 	bl	80098e8 <HAL_RCCEx_PeriphCLKConfig>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003e44:	f7ff fdee 	bl	8003a24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e48:	4b3a      	ldr	r3, [pc, #232]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4c:	4a39      	ldr	r2, [pc, #228]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e54:	4b37      	ldr	r3, [pc, #220]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e60:	4b34      	ldr	r3, [pc, #208]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e64:	4a33      	ldr	r2, [pc, #204]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e6c:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e78:	2360      	movs	r3, #96	@ 0x60
 8003e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e90:	2307      	movs	r3, #7
 8003e92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e96:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4828      	ldr	r0, [pc, #160]	@ (8003f40 <HAL_UART_MspInit+0x1cc>)
 8003e9e:	f003 fdaf 	bl	8007a00 <HAL_GPIO_Init>
}
 8003ea2:	e040      	b.n	8003f26 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a26      	ldr	r2, [pc, #152]	@ (8003f44 <HAL_UART_MspInit+0x1d0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d13b      	bne.n	8003f26 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003eae:	2304      	movs	r3, #4
 8003eb0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eb6:	f107 0320 	add.w	r3, r7, #32
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f005 fd14 	bl	80098e8 <HAL_RCCEx_PeriphCLKConfig>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_UART_MspInit+0x156>
      Error_Handler();
 8003ec6:	f7ff fdad 	bl	8003a24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003eca:	4b1a      	ldr	r3, [pc, #104]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ece:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed6:	4b17      	ldr	r3, [pc, #92]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ee2:	4b14      	ldr	r3, [pc, #80]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee6:	4a13      	ldr	r2, [pc, #76]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003ee8:	f043 0308 	orr.w	r3, r3, #8
 8003eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eee:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <HAL_UART_MspInit+0x1c0>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003efa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003efe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
 8003f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f14:	2307      	movs	r3, #7
 8003f16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f1a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4807      	ldr	r0, [pc, #28]	@ (8003f40 <HAL_UART_MspInit+0x1cc>)
 8003f22:	f003 fd6d 	bl	8007a00 <HAL_GPIO_Init>
}
 8003f26:	bf00      	nop
 8003f28:	37c8      	adds	r7, #200	@ 0xc8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40008000 	.word	0x40008000
 8003f34:	40021000 	.word	0x40021000
 8003f38:	48001800 	.word	0x48001800
 8003f3c:	40004400 	.word	0x40004400
 8003f40:	48000c00 	.word	0x48000c00
 8003f44:	40004800 	.word	0x40004800

08003f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 031c 	add.w	r3, r7, #28
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3c      	ldr	r2, [pc, #240]	@ (8004058 <HAL_SPI_MspInit+0x110>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d144      	bne.n	8003ff4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f76:	4b39      	ldr	r3, [pc, #228]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f82:	4b36      	ldr	r3, [pc, #216]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	4a35      	ldr	r2, [pc, #212]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f8e:	4b33      	ldr	r3, [pc, #204]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f9a:	4b30      	ldr	r3, [pc, #192]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fc2:	2305      	movs	r3, #5
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fc6:	f107 031c 	add.w	r3, r7, #28
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4824      	ldr	r0, [pc, #144]	@ (8004060 <HAL_SPI_MspInit+0x118>)
 8003fce:	f003 fd17 	bl	8007a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8003fd2:	2312      	movs	r3, #18
 8003fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fe2:	2305      	movs	r3, #5
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fe6:	f107 031c 	add.w	r3, r7, #28
 8003fea:	4619      	mov	r1, r3
 8003fec:	481d      	ldr	r0, [pc, #116]	@ (8004064 <HAL_SPI_MspInit+0x11c>)
 8003fee:	f003 fd07 	bl	8007a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003ff2:	e02d      	b.n	8004050 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8004068 <HAL_SPI_MspInit+0x120>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d128      	bne.n	8004050 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ffe:	4b17      	ldr	r3, [pc, #92]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	4a16      	ldr	r2, [pc, #88]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8004004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004008:	6593      	str	r3, [r2, #88]	@ 0x58
 800400a:	4b14      	ldr	r3, [pc, #80]	@ (800405c <HAL_SPI_MspInit+0x114>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004016:	4b11      	ldr	r3, [pc, #68]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8004018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401a:	4a10      	ldr	r2, [pc, #64]	@ (800405c <HAL_SPI_MspInit+0x114>)
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004022:	4b0e      	ldr	r3, [pc, #56]	@ (800405c <HAL_SPI_MspInit+0x114>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800402e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403c:	2303      	movs	r3, #3
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004040:	2306      	movs	r3, #6
 8004042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004044:	f107 031c 	add.w	r3, r7, #28
 8004048:	4619      	mov	r1, r3
 800404a:	4805      	ldr	r0, [pc, #20]	@ (8004060 <HAL_SPI_MspInit+0x118>)
 800404c:	f003 fcd8 	bl	8007a00 <HAL_GPIO_Init>
}
 8004050:	bf00      	nop
 8004052:	3730      	adds	r7, #48	@ 0x30
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40003800 	.word	0x40003800
 800405c:	40021000 	.word	0x40021000
 8004060:	48000800 	.word	0x48000800
 8004064:	48000c00 	.word	0x48000c00
 8004068:	40003c00 	.word	0x40003c00

0800406c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08e      	sub	sp, #56	@ 0x38
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a4d      	ldr	r2, [pc, #308]	@ (80041c0 <HAL_TIM_PWM_MspInit+0x154>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d131      	bne.n	80040f2 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800408e:	4b4d      	ldr	r3, [pc, #308]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 8004090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004092:	4a4c      	ldr	r2, [pc, #304]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 8004094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004098:	6613      	str	r3, [r2, #96]	@ 0x60
 800409a:	4b4a      	ldr	r3, [pc, #296]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 800409c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040a6:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040aa:	4a46      	ldr	r2, [pc, #280]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 80040ac:	f043 0310 	orr.w	r3, r3, #16
 80040b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040b2:	4b44      	ldr	r3, [pc, #272]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80040be:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c4:	2302      	movs	r3, #2
 80040c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040cc:	2300      	movs	r3, #0
 80040ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80040d0:	2303      	movs	r3, #3
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040d8:	4619      	mov	r1, r3
 80040da:	483b      	ldr	r0, [pc, #236]	@ (80041c8 <HAL_TIM_PWM_MspInit+0x15c>)
 80040dc:	f003 fc90 	bl	8007a00 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80040e0:	2200      	movs	r2, #0
 80040e2:	2100      	movs	r1, #0
 80040e4:	201a      	movs	r0, #26
 80040e6:	f003 fb9c 	bl	8007822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80040ea:	201a      	movs	r0, #26
 80040ec:	f003 fbb5 	bl	800785a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80040f0:	e062      	b.n	80041b8 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fa:	d10c      	bne.n	8004116 <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040fc:	4b31      	ldr	r3, [pc, #196]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004100:	4a30      	ldr	r2, [pc, #192]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6593      	str	r3, [r2, #88]	@ 0x58
 8004108:	4b2e      	ldr	r3, [pc, #184]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	69bb      	ldr	r3, [r7, #24]
}
 8004114:	e050      	b.n	80041b8 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM3)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2c      	ldr	r2, [pc, #176]	@ (80041cc <HAL_TIM_PWM_MspInit+0x160>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10c      	bne.n	800413a <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004120:	4b28      	ldr	r3, [pc, #160]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004124:	4a27      	ldr	r2, [pc, #156]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 8004126:	f043 0302 	orr.w	r3, r3, #2
 800412a:	6593      	str	r3, [r2, #88]	@ 0x58
 800412c:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697b      	ldr	r3, [r7, #20]
}
 8004138:	e03e      	b.n	80041b8 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM4)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a24      	ldr	r2, [pc, #144]	@ (80041d0 <HAL_TIM_PWM_MspInit+0x164>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d128      	bne.n	8004196 <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004144:	4b1f      	ldr	r3, [pc, #124]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004148:	4a1e      	ldr	r2, [pc, #120]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004150:	4b1c      	ldr	r3, [pc, #112]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 8004152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800415c:	4b19      	ldr	r3, [pc, #100]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 800415e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004160:	4a18      	ldr	r2, [pc, #96]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 8004162:	f043 0310 	orr.w	r3, r3, #16
 8004166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004168:	4b16      	ldr	r3, [pc, #88]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 800416a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004174:	2301      	movs	r3, #1
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004178:	2302      	movs	r3, #2
 800417a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004180:	2300      	movs	r3, #0
 8004182:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004184:	2302      	movs	r3, #2
 8004186:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800418c:	4619      	mov	r1, r3
 800418e:	480e      	ldr	r0, [pc, #56]	@ (80041c8 <HAL_TIM_PWM_MspInit+0x15c>)
 8004190:	f003 fc36 	bl	8007a00 <HAL_GPIO_Init>
}
 8004194:	e010      	b.n	80041b8 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM15)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a0e      	ldr	r2, [pc, #56]	@ (80041d4 <HAL_TIM_PWM_MspInit+0x168>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10b      	bne.n	80041b8 <HAL_TIM_PWM_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80041a0:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 80041a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a4:	4a07      	ldr	r2, [pc, #28]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HAL_TIM_PWM_MspInit+0x158>)
 80041ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]
}
 80041b8:	bf00      	nop
 80041ba:	3738      	adds	r7, #56	@ 0x38
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40021000 	.word	0x40021000
 80041c8:	48001000 	.word	0x48001000
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40014000 	.word	0x40014000

080041d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0d      	ldr	r2, [pc, #52]	@ (800421c <HAL_TIM_Base_MspInit+0x44>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d113      	bne.n	8004212 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <HAL_TIM_Base_MspInit+0x48>)
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004220 <HAL_TIM_Base_MspInit+0x48>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80041f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004220 <HAL_TIM_Base_MspInit+0x48>)
 80041f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004202:	2200      	movs	r2, #0
 8004204:	2100      	movs	r1, #0
 8004206:	201a      	movs	r0, #26
 8004208:	f003 fb0b 	bl	8007822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800420c:	201a      	movs	r0, #26
 800420e:	f003 fb24 	bl	800785a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40014800 	.word	0x40014800
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	@ 0x38
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a73      	ldr	r2, [pc, #460]	@ (8004410 <HAL_TIM_MspPostInit+0x1ec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d11d      	bne.n	8004282 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004246:	4b73      	ldr	r3, [pc, #460]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424a:	4a72      	ldr	r2, [pc, #456]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 800424c:	f043 0310 	orr.w	r3, r3, #16
 8004250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004252:	4b70      	ldr	r3, [pc, #448]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800425e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004270:	2301      	movs	r3, #1
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004278:	4619      	mov	r1, r3
 800427a:	4867      	ldr	r0, [pc, #412]	@ (8004418 <HAL_TIM_MspPostInit+0x1f4>)
 800427c:	f003 fbc0 	bl	8007a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004280:	e0c2      	b.n	8004408 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428a:	d13a      	bne.n	8004302 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428c:	4b61      	ldr	r3, [pc, #388]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 800428e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004290:	4a60      	ldr	r2, [pc, #384]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004298:	4b5e      	ldr	r3, [pc, #376]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 800429a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 80042a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 80042aa:	f043 0302 	orr.w	r3, r3, #2
 80042ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042b0:	4b58      	ldr	r3, [pc, #352]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 80042b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042bc:	2301      	movs	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c0:	2302      	movs	r3, #2
 80042c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c8:	2300      	movs	r3, #0
 80042ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042cc:	2301      	movs	r3, #1
 80042ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042d4:	4619      	mov	r1, r3
 80042d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042da:	f003 fb91 	bl	8007a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e4:	2302      	movs	r3, #2
 80042e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ec:	2300      	movs	r3, #0
 80042ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042f0:	2301      	movs	r3, #1
 80042f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042f8:	4619      	mov	r1, r3
 80042fa:	4848      	ldr	r0, [pc, #288]	@ (800441c <HAL_TIM_MspPostInit+0x1f8>)
 80042fc:	f003 fb80 	bl	8007a00 <HAL_GPIO_Init>
}
 8004300:	e082      	b.n	8004408 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a46      	ldr	r2, [pc, #280]	@ (8004420 <HAL_TIM_MspPostInit+0x1fc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d138      	bne.n	800437e <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430c:	4b41      	ldr	r3, [pc, #260]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 800430e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004310:	4a40      	ldr	r2, [pc, #256]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 8004312:	f043 0302 	orr.w	r3, r3, #2
 8004316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004318:	4b3e      	ldr	r3, [pc, #248]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004324:	4b3b      	ldr	r3, [pc, #236]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 8004326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004328:	4a3a      	ldr	r2, [pc, #232]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 800432a:	f043 0304 	orr.w	r3, r3, #4
 800432e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004330:	4b38      	ldr	r3, [pc, #224]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 8004332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800433c:	2301      	movs	r3, #1
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004340:	2302      	movs	r3, #2
 8004342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004348:	2300      	movs	r3, #0
 800434a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800434c:	2302      	movs	r3, #2
 800434e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004354:	4619      	mov	r1, r3
 8004356:	4831      	ldr	r0, [pc, #196]	@ (800441c <HAL_TIM_MspPostInit+0x1f8>)
 8004358:	f003 fb52 	bl	8007a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800435c:	2380      	movs	r3, #128	@ 0x80
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004360:	2302      	movs	r3, #2
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004364:	2300      	movs	r3, #0
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004368:	2300      	movs	r3, #0
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800436c:	2302      	movs	r3, #2
 800436e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004374:	4619      	mov	r1, r3
 8004376:	482b      	ldr	r0, [pc, #172]	@ (8004424 <HAL_TIM_MspPostInit+0x200>)
 8004378:	f003 fb42 	bl	8007a00 <HAL_GPIO_Init>
}
 800437c:	e044      	b.n	8004408 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a29      	ldr	r2, [pc, #164]	@ (8004428 <HAL_TIM_MspPostInit+0x204>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d11d      	bne.n	80043c4 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004388:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 800438a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438c:	4a21      	ldr	r2, [pc, #132]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 800438e:	f043 0308 	orr.w	r3, r3, #8
 8004392:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004394:	4b1f      	ldr	r3, [pc, #124]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 8004396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a6:	2302      	movs	r3, #2
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ae:	2300      	movs	r3, #0
 80043b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043b2:	2302      	movs	r3, #2
 80043b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ba:	4619      	mov	r1, r3
 80043bc:	481b      	ldr	r0, [pc, #108]	@ (800442c <HAL_TIM_MspPostInit+0x208>)
 80043be:	f003 fb1f 	bl	8007a00 <HAL_GPIO_Init>
}
 80043c2:	e021      	b.n	8004408 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <HAL_TIM_MspPostInit+0x20c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d11c      	bne.n	8004408 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ce:	4b11      	ldr	r3, [pc, #68]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 80043d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d2:	4a10      	ldr	r2, [pc, #64]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043da:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <HAL_TIM_MspPostInit+0x1f0>)
 80043dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	60bb      	str	r3, [r7, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80043e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f4:	2300      	movs	r3, #0
 80043f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80043f8:	230e      	movs	r3, #14
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004400:	4619      	mov	r1, r3
 8004402:	4806      	ldr	r0, [pc, #24]	@ (800441c <HAL_TIM_MspPostInit+0x1f8>)
 8004404:	f003 fafc 	bl	8007a00 <HAL_GPIO_Init>
}
 8004408:	bf00      	nop
 800440a:	3738      	adds	r7, #56	@ 0x38
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40021000 	.word	0x40021000
 8004418:	48001000 	.word	0x48001000
 800441c:	48000400 	.word	0x48000400
 8004420:	40000400 	.word	0x40000400
 8004424:	48000800 	.word	0x48000800
 8004428:	40000800 	.word	0x40000800
 800442c:	48000c00 	.word	0x48000c00
 8004430:	40014000 	.word	0x40014000

08004434 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	@ 0x28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a50      	ldr	r2, [pc, #320]	@ (8004584 <HAL_SAI_MspInit+0x150>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d124      	bne.n	8004490 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8004446:	4b50      	ldr	r3, [pc, #320]	@ (8004588 <HAL_SAI_MspInit+0x154>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800444e:	4b4f      	ldr	r3, [pc, #316]	@ (800458c <HAL_SAI_MspInit+0x158>)
 8004450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004452:	4a4e      	ldr	r2, [pc, #312]	@ (800458c <HAL_SAI_MspInit+0x158>)
 8004454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004458:	6613      	str	r3, [r2, #96]	@ 0x60
 800445a:	4b4c      	ldr	r3, [pc, #304]	@ (800458c <HAL_SAI_MspInit+0x158>)
 800445c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8004466:	4b48      	ldr	r3, [pc, #288]	@ (8004588 <HAL_SAI_MspInit+0x154>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	4a46      	ldr	r2, [pc, #280]	@ (8004588 <HAL_SAI_MspInit+0x154>)
 800446e:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004470:	2374      	movs	r3, #116	@ 0x74
 8004472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	2302      	movs	r3, #2
 8004476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447c:	2300      	movs	r3, #0
 800447e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004480:	230d      	movs	r3, #13
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	4619      	mov	r1, r3
 800448a:	4841      	ldr	r0, [pc, #260]	@ (8004590 <HAL_SAI_MspInit+0x15c>)
 800448c:	f003 fab8 	bl	8007a00 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3f      	ldr	r2, [pc, #252]	@ (8004594 <HAL_SAI_MspInit+0x160>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d135      	bne.n	8004506 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800449a:	4b3b      	ldr	r3, [pc, #236]	@ (8004588 <HAL_SAI_MspInit+0x154>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80044a2:	4b3a      	ldr	r3, [pc, #232]	@ (800458c <HAL_SAI_MspInit+0x158>)
 80044a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a6:	4a39      	ldr	r2, [pc, #228]	@ (800458c <HAL_SAI_MspInit+0x158>)
 80044a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80044ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80044ae:	4b37      	ldr	r3, [pc, #220]	@ (800458c <HAL_SAI_MspInit+0x158>)
 80044b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80044ba:	4b33      	ldr	r3, [pc, #204]	@ (8004588 <HAL_SAI_MspInit+0x154>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a31      	ldr	r2, [pc, #196]	@ (8004588 <HAL_SAI_MspInit+0x154>)
 80044c2:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044c4:	2308      	movs	r3, #8
 80044c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c8:	2302      	movs	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d0:	2300      	movs	r3, #0
 80044d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80044d4:	230d      	movs	r3, #13
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	4619      	mov	r1, r3
 80044de:	482c      	ldr	r0, [pc, #176]	@ (8004590 <HAL_SAI_MspInit+0x15c>)
 80044e0:	f003 fa8e 	bl	8007a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80044e4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80044e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ea:	2302      	movs	r3, #2
 80044ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80044f6:	230d      	movs	r3, #13
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	4619      	mov	r1, r3
 8004500:	4825      	ldr	r0, [pc, #148]	@ (8004598 <HAL_SAI_MspInit+0x164>)
 8004502:	f003 fa7d 	bl	8007a00 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a24      	ldr	r2, [pc, #144]	@ (800459c <HAL_SAI_MspInit+0x168>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d135      	bne.n	800457c <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004510:	4b23      	ldr	r3, [pc, #140]	@ (80045a0 <HAL_SAI_MspInit+0x16c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004518:	4b1c      	ldr	r3, [pc, #112]	@ (800458c <HAL_SAI_MspInit+0x158>)
 800451a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451c:	4a1b      	ldr	r2, [pc, #108]	@ (800458c <HAL_SAI_MspInit+0x158>)
 800451e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004522:	6613      	str	r3, [r2, #96]	@ 0x60
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <HAL_SAI_MspInit+0x158>)
 8004526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8004530:	4b1b      	ldr	r3, [pc, #108]	@ (80045a0 <HAL_SAI_MspInit+0x16c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	4a1a      	ldr	r2, [pc, #104]	@ (80045a0 <HAL_SAI_MspInit+0x16c>)
 8004538:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800453a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800453e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004540:	2302      	movs	r3, #2
 8004542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004548:	2300      	movs	r3, #0
 800454a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800454c:	230d      	movs	r3, #13
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004550:	f107 0314 	add.w	r3, r7, #20
 8004554:	4619      	mov	r1, r3
 8004556:	4813      	ldr	r0, [pc, #76]	@ (80045a4 <HAL_SAI_MspInit+0x170>)
 8004558:	f003 fa52 	bl	8007a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800455c:	2340      	movs	r3, #64	@ 0x40
 800455e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004560:	2302      	movs	r3, #2
 8004562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004568:	2300      	movs	r3, #0
 800456a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800456c:	230d      	movs	r3, #13
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	4619      	mov	r1, r3
 8004576:	480c      	ldr	r0, [pc, #48]	@ (80045a8 <HAL_SAI_MspInit+0x174>)
 8004578:	f003 fa42 	bl	8007a00 <HAL_GPIO_Init>

    }
}
 800457c:	bf00      	nop
 800457e:	3728      	adds	r7, #40	@ 0x28
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40015404 	.word	0x40015404
 8004588:	20000a7c 	.word	0x20000a7c
 800458c:	40021000 	.word	0x40021000
 8004590:	48001000 	.word	0x48001000
 8004594:	40015424 	.word	0x40015424
 8004598:	48001400 	.word	0x48001400
 800459c:	40015804 	.word	0x40015804
 80045a0:	20000a80 	.word	0x20000a80
 80045a4:	48000400 	.word	0x48000400
 80045a8:	48000800 	.word	0x48000800

080045ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <NMI_Handler+0x4>

080045b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <HardFault_Handler+0x4>

080045bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <MemManage_Handler+0x4>

080045c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <BusFault_Handler+0x4>

080045cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <UsageFault_Handler+0x4>

080045d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004602:	f001 ff73 	bl	80064ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004610:	2020      	movs	r0, #32
 8004612:	f003 fbb7 	bl	8007d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  LoRaRecieve = 1;
 8004616:	4b02      	ldr	r3, [pc, #8]	@ (8004620 <EXTI9_5_IRQHandler+0x14>)
 8004618:	2201      	movs	r2, #1
 800461a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800461c:	bf00      	nop
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000a7a 	.word	0x20000a7a

08004624 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004628:	4803      	ldr	r0, [pc, #12]	@ (8004638 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800462a:	f008 fff9 	bl	800d620 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800462e:	4803      	ldr	r0, [pc, #12]	@ (800463c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004630:	f008 fff6 	bl	800d620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000898 	.word	0x20000898
 800463c:	20000a14 	.word	0x20000a14

08004640 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004644:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004648:	f003 fb9c 	bl	8007d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  KeyPadSelect = 1;
 800464c:	4b02      	ldr	r3, [pc, #8]	@ (8004658 <EXTI15_10_IRQHandler+0x18>)
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000a79 	.word	0x20000a79

0800465c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return 1;
 8004660:	2301      	movs	r3, #1
}
 8004662:	4618      	mov	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <_kill>:

int _kill(int pid, int sig)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004676:	f00b fd85 	bl	8010184 <__errno>
 800467a:	4603      	mov	r3, r0
 800467c:	2216      	movs	r2, #22
 800467e:	601a      	str	r2, [r3, #0]
  return -1;
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <_exit>:

void _exit (int status)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004694:	f04f 31ff 	mov.w	r1, #4294967295
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ffe7 	bl	800466c <_kill>
  while (1) {}    /* Make sure we hang here */
 800469e:	bf00      	nop
 80046a0:	e7fd      	b.n	800469e <_exit+0x12>

080046a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b086      	sub	sp, #24
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e00a      	b.n	80046ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046b4:	f3af 8000 	nop.w
 80046b8:	4601      	mov	r1, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	60ba      	str	r2, [r7, #8]
 80046c0:	b2ca      	uxtb	r2, r1
 80046c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	3301      	adds	r3, #1
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	dbf0      	blt.n	80046b4 <_read+0x12>
  }

  return len;
 80046d2:	687b      	ldr	r3, [r7, #4]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e009      	b.n	8004702 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	60ba      	str	r2, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff f982 	bl	8003a00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3301      	adds	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	dbf1      	blt.n	80046ee <_write+0x12>
  }
  return len;
 800470a:	687b      	ldr	r3, [r7, #4]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <_close>:

int _close(int file)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800471c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800473c:	605a      	str	r2, [r3, #4]
  return 0;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <_isatty>:

int _isatty(int file)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004754:	2301      	movs	r3, #1
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004784:	4a14      	ldr	r2, [pc, #80]	@ (80047d8 <_sbrk+0x5c>)
 8004786:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <_sbrk+0x60>)
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004790:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <_sbrk+0x64>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <_sbrk+0x64>)
 800479a:	4a12      	ldr	r2, [pc, #72]	@ (80047e4 <_sbrk+0x68>)
 800479c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <_sbrk+0x64>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d207      	bcs.n	80047bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047ac:	f00b fcea 	bl	8010184 <__errno>
 80047b0:	4603      	mov	r3, r0
 80047b2:	220c      	movs	r2, #12
 80047b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	e009      	b.n	80047d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047bc:	4b08      	ldr	r3, [pc, #32]	@ (80047e0 <_sbrk+0x64>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047c2:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <_sbrk+0x64>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4413      	add	r3, r2
 80047ca:	4a05      	ldr	r2, [pc, #20]	@ (80047e0 <_sbrk+0x64>)
 80047cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ce:	68fb      	ldr	r3, [r7, #12]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	200a0000 	.word	0x200a0000
 80047dc:	00000400 	.word	0x00000400
 80047e0:	20000a84 	.word	0x20000a84
 80047e4:	20000bf8 	.word	0x20000bf8

080047e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80047ec:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <SystemInit+0x20>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	4a05      	ldr	r2, [pc, #20]	@ (8004808 <SystemInit+0x20>)
 80047f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800481e:	89fb      	ldrh	r3, [r7, #14]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	b21a      	sxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b21b      	sxth	r3, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	b21b      	sxth	r3, r3
 800482e:	b29b      	uxth	r3, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2204      	movs	r2, #4
 8004850:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2204      	movs	r2, #4
 8004856:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004868:	b29b      	uxth	r3, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29b      	uxth	r3, r3
 8004872:	b21a      	sxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004888:	b29b      	uxth	r3, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29b      	uxth	r3, r3
 8004892:	b21a      	sxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 8004902:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800490c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
 800492e:	e010      	b.n	8004952 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	330a      	adds	r3, #10
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	330a      	adds	r3, #10
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4413      	add	r3, r2
 8004948:	2200      	movs	r2, #0
 800494a:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	3301      	adds	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d9eb      	bls.n	8004930 <UG_Init+0xf4>
   }

   gui = g;
 8004958:	4a04      	ldr	r2, [pc, #16]	@ (800496c <UG_Init+0x130>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
   return 1;
 800495e:	2301      	movs	r3, #1
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000a88 	.word	0x20000a88

08004970 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004978:	4b04      	ldr	r3, [pc, #16]	@ (800498c <UG_FontSelect+0x1c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000a88 	.word	0x20000a88

08004990 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af02      	add	r7, sp, #8
 8004996:	4603      	mov	r3, r0
 8004998:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800499a:	4b0e      	ldr	r3, [pc, #56]	@ (80049d4 <UG_FillScreen+0x44>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	b21a      	sxth	r2, r3
 80049ac:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <UG_FillScreen+0x44>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	b219      	sxth	r1, r3
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	460b      	mov	r3, r1
 80049c4:	2100      	movs	r1, #0
 80049c6:	2000      	movs	r0, #0
 80049c8:	f000 f806 	bl	80049d8 <UG_FillFrame>
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000a88 	.word	0x20000a88

080049d8 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	80fb      	strh	r3, [r7, #6]
 80049ea:	4603      	mov	r3, r0
 80049ec:	80bb      	strh	r3, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	807b      	strh	r3, [r7, #2]
 80049f2:	4613      	mov	r3, r2
 80049f4:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80049f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80049fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	da05      	bge.n	8004a0e <UG_FillFrame+0x36>
     swap(x1,x2);
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	817b      	strh	r3, [r7, #10]
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	80fb      	strh	r3, [r7, #6]
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8004a0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004a12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	da05      	bge.n	8004a26 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8004a1a:	88bb      	ldrh	r3, [r7, #4]
 8004a1c:	813b      	strh	r3, [r7, #8]
 8004a1e:	883b      	ldrh	r3, [r7, #0]
 8004a20:	80bb      	strh	r3, [r7, #4]
 8004a22:	893b      	ldrh	r3, [r7, #8]
 8004a24:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 8004a26:	88bb      	ldrh	r3, [r7, #4]
 8004a28:	81bb      	strh	r3, [r7, #12]
 8004a2a:	e01e      	b.n	8004a6a <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	81fb      	strh	r3, [r7, #14]
 8004a30:	e00f      	b.n	8004a52 <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 8004a32:	4b13      	ldr	r3, [pc, #76]	@ (8004a80 <UG_FillFrame+0xa8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	8c3a      	ldrh	r2, [r7, #32]
 8004a3c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004a40:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004a44:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8004a46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	81fb      	strh	r3, [r7, #14]
 8004a52:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	dde9      	ble.n	8004a32 <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 8004a5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3301      	adds	r3, #1
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	81bb      	strh	r3, [r7, #12]
 8004a6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	ddda      	ble.n	8004a2c <UG_FillFrame+0x54>
      }
   }
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}
 8004a80:	20000a88 	.word	0x20000a88

08004a84 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004a84:	b5b0      	push	{r4, r5, r7, lr}
 8004a86:	b08a      	sub	sp, #40	@ 0x28
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4623      	mov	r3, r4
 8004a94:	80fb      	strh	r3, [r7, #6]
 8004a96:	4603      	mov	r3, r0
 8004a98:	80bb      	strh	r3, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	807b      	strh	r3, [r7, #2]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8004aa2:	4b67      	ldr	r3, [pc, #412]	@ (8004c40 <UG_DrawLine+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d013      	beq.n	8004ada <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004ab2:	4b63      	ldr	r3, [pc, #396]	@ (8004c40 <UG_DrawLine+0x1bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab8:	461d      	mov	r5, r3
 8004aba:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004abe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ac2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004ac6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004aca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	4623      	mov	r3, r4
 8004ad0:	47a8      	blx	r5
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80ae 	beq.w	8004c36 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8004ae4:	883a      	ldrh	r2, [r7, #0]
 8004ae6:	88bb      	ldrh	r3, [r7, #4]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8004aee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bfb8      	it	lt
 8004af6:	425b      	neglt	r3, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8004afc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb8      	it	lt
 8004b04:	425b      	neglt	r3, r3
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8004b0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dd01      	ble.n	8004b16 <UG_DrawLine+0x92>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e001      	b.n	8004b1a <UG_DrawLine+0x96>
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8004b1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dd01      	ble.n	8004b28 <UG_DrawLine+0xa4>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e001      	b.n	8004b2c <UG_DrawLine+0xa8>
 8004b28:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8004b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b32:	105b      	asrs	r3, r3, #1
 8004b34:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8004b36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b3a:	105b      	asrs	r3, r3, #1
 8004b3c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8004b42:	88bb      	ldrh	r3, [r7, #4]
 8004b44:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8004b46:	4b3e      	ldr	r3, [pc, #248]	@ (8004c40 <UG_DrawLine+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004b50:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004b54:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004b58:	4798      	blx	r3

   if( dxabs >= dyabs )
 8004b5a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	db33      	blt.n	8004bce <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8004b66:	2300      	movs	r3, #0
 8004b68:	83fb      	strh	r3, [r7, #30]
 8004b6a:	e029      	b.n	8004bc0 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8004b6c:	8b7a      	ldrh	r2, [r7, #26]
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	4413      	add	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8004b76:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004b7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	db09      	blt.n	8004b96 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8004b82:	8b7a      	ldrh	r2, [r7, #26]
 8004b84:	8a3b      	ldrh	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8004b8c:	8afa      	ldrh	r2, [r7, #22]
 8004b8e:	897b      	ldrh	r3, [r7, #10]
 8004b90:	4413      	add	r3, r2
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8004b96:	8b3a      	ldrh	r2, [r7, #24]
 8004b98:	89bb      	ldrh	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8004ba0:	4b27      	ldr	r3, [pc, #156]	@ (8004c40 <UG_DrawLine+0x1bc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004baa:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004bae:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004bb2:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8004bb4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	83fb      	strh	r3, [r7, #30]
 8004bc0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004bc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	dbcf      	blt.n	8004b6c <UG_DrawLine+0xe8>
 8004bcc:	e034      	b.n	8004c38 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8004bce:	2300      	movs	r3, #0
 8004bd0:	83fb      	strh	r3, [r7, #30]
 8004bd2:	e029      	b.n	8004c28 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8004bd4:	8bba      	ldrh	r2, [r7, #28]
 8004bd6:	8a3b      	ldrh	r3, [r7, #16]
 8004bd8:	4413      	add	r3, r2
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8004bde:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	db09      	blt.n	8004bfe <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8004bea:	8bba      	ldrh	r2, [r7, #28]
 8004bec:	89fb      	ldrh	r3, [r7, #14]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8004bf4:	8b3a      	ldrh	r2, [r7, #24]
 8004bf6:	89bb      	ldrh	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8004bfe:	8afa      	ldrh	r2, [r7, #22]
 8004c00:	897b      	ldrh	r3, [r7, #10]
 8004c02:	4413      	add	r3, r2
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8004c08:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <UG_DrawLine+0x1bc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004c12:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004c16:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004c1a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8004c1c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3301      	adds	r3, #1
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	83fb      	strh	r3, [r7, #30]
 8004c28:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	dbcf      	blt.n	8004bd4 <UG_DrawLine+0x150>
 8004c34:	e000      	b.n	8004c38 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004c36:	bf00      	nop
      }
   }  
}
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000a88 	.word	0x20000a88

08004c44 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	603a      	str	r2, [r7, #0]
 8004c4e:	80fb      	strh	r3, [r7, #6]
 8004c50:	460b      	mov	r3, r1
 8004c52:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8004c58:	88bb      	ldrh	r3, [r7, #4]
 8004c5a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8004c5c:	4b44      	ldr	r3, [pc, #272]	@ (8004d70 <UG_PutString+0x12c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fae4 	bl	8005230 <_UG_FontSelect>
   while ( *str != 0 )
 8004c68:	e064      	b.n	8004d34 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004c6a:	4b41      	ldr	r3, [pc, #260]	@ (8004d70 <UG_PutString+0x12c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8004c76:	463b      	mov	r3, r7
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f915 	bl	8004ea8 <_UG_DecodeUTF8>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	e004      	b.n	8004c8e <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	603a      	str	r2, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	2b0a      	cmp	r3, #10
 8004c92:	d105      	bne.n	8004ca0 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8004c94:	4b36      	ldr	r3, [pc, #216]	@ (8004d70 <UG_PutString+0x12c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	81fb      	strh	r3, [r7, #14]
         continue;
 8004c9e:	e049      	b.n	8004d34 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8004ca0:	897b      	ldrh	r3, [r7, #10]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f977 	bl	8004f98 <_UG_GetCharData>
 8004caa:	4603      	mov	r3, r0
 8004cac:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8004cae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d03c      	beq.n	8004d32 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d70 <UG_PutString+0x12c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004cc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	4299      	cmp	r1, r3
 8004cd0:	dc11      	bgt.n	8004cf6 <UG_PutString+0xb2>
      {
         xp = x;
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8004cd6:	4b26      	ldr	r3, [pc, #152]	@ (8004d70 <UG_PutString+0x12c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004cde:	b21b      	sxth	r3, r3
 8004ce0:	4a23      	ldr	r2, [pc, #140]	@ (8004d70 <UG_PutString+0x12c>)
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 8004ce8:	4413      	add	r3, r2
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	89bb      	ldrh	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d70 <UG_PutString+0x12c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8004d70 <UG_PutString+0x12c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8004d06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d0a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8004d0e:	8978      	ldrh	r0, [r7, #10]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4623      	mov	r3, r4
 8004d14:	f000 fb0e 	bl	8005334 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8004d18:	4b15      	ldr	r3, [pc, #84]	@ (8004d70 <UG_PutString+0x12c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	893b      	ldrh	r3, [r7, #8]
 8004d24:	4413      	add	r3, r2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	89fb      	ldrh	r3, [r7, #14]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	81fb      	strh	r3, [r7, #14]
 8004d30:	e000      	b.n	8004d34 <UG_PutString+0xf0>
      if(cw==-1) continue;
 8004d32:	bf00      	nop
   while ( *str != 0 )
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d196      	bne.n	8004c6a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <UG_PutString+0x12c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00c      	beq.n	8004d66 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <UG_PutString+0x12c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d52:	461c      	mov	r4, r3
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295
 8004d58:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295
 8004d64:	47a0      	blx	r4
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd90      	pop	{r4, r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000a88 	.word	0x20000a88

08004d74 <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4623      	mov	r3, r4
 8004d84:	80fb      	strh	r3, [r7, #6]
 8004d86:	4603      	mov	r3, r0
 8004d88:	80bb      	strh	r3, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	807b      	strh	r3, [r7, #2]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 8004d92:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <UG_PutChar+0x74>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fa49 	bl	8005230 <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 8004d9e:	883c      	ldrh	r4, [r7, #0]
 8004da0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004da4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004da8:	88f8      	ldrh	r0, [r7, #6]
 8004daa:	8b3b      	ldrh	r3, [r7, #24]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	4623      	mov	r3, r4
 8004db0:	f000 fac0 	bl	8005334 <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <UG_PutChar+0x74>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00c      	beq.n	8004dde <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8004dc4:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <UG_PutChar+0x74>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dca:	461c      	mov	r4, r3
 8004dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	47a0      	blx	r4
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd90      	pop	{r4, r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000a88 	.word	0x20000a88

08004dec <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8004df6:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <UG_SetForecolor+0x20>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	20000a88 	.word	0x20000a88

08004e10 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <UG_SetBackcolor+0x20>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	88fa      	ldrh	r2, [r7, #6]
 8004e20:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	20000a88 	.word	0x20000a88

08004e34 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <UG_FontSetHSpace+0x24>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	b252      	sxtb	r2, r2
 8004e46:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000a88 	.word	0x20000a88

08004e5c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <UG_FontSetVSpace+0x24>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	b252      	sxtb	r2, r2
 8004e6e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000a88 	.word	0x20000a88

08004e84 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 8004e8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <UG_FontSetTransparency+0x20>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	79fa      	ldrb	r2, [r7, #7]
 8004e94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20000a88 	.word	0x20000a88

08004ea8 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  char c=**str;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8004eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	db07      	blt.n	8004ed0 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
    return c;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	e05c      	b.n	8004f8a <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8004ed8:	e04f      	b.n	8004f7a <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8004eec:	7bbb      	ldrb	r3, [r7, #14]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d130      	bne.n	8004f54 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2bdf      	cmp	r3, #223	@ 0xdf
 8004ef6:	d806      	bhi.n	8004f06 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e023      	b.n	8004f4e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2bef      	cmp	r3, #239	@ 0xef
 8004f0a:	d806      	bhi.n	8004f1a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e019      	b.n	8004f4e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2bf7      	cmp	r3, #247	@ 0xf7
 8004f1e:	d806      	bhi.n	8004f2e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8004f20:	2303      	movs	r3, #3
 8004f22:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	73fb      	strb	r3, [r7, #15]
 8004f2c:	e00f      	b.n	8004f4e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2bfb      	cmp	r3, #251	@ 0xfb
 8004f32:	d806      	bhi.n	8004f42 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8004f34:	2304      	movs	r3, #4
 8004f36:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	e005      	b.n	8004f4e <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8004f42:	2305      	movs	r3, #5
 8004f44:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	81bb      	strh	r3, [r7, #12]
 8004f52:	e012      	b.n	8004f7a <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8004f54:	89bb      	ldrh	r3, [r7, #12]
 8004f56:	019b      	lsls	r3, r3, #6
 8004f58:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	b21b      	sxth	r3, r3
 8004f5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f62:	b21a      	sxth	r2, r3
 8004f64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8004f6e:	7bbb      	ldrb	r3, [r7, #14]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	73bb      	strb	r3, [r7, #14]
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <_UG_DecodeUTF8+0xde>
  while(**str)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1aa      	bne.n	8004eda <_UG_DecodeUTF8+0x32>
 8004f84:	e000      	b.n	8004f88 <_UG_DecodeUTF8+0xe0>
        break;
 8004f86:	bf00      	nop
    }
  }
  return encoding;
 8004f88:	89bb      	ldrh	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	6039      	str	r1, [r7, #0]
 8004fa2:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8004fb8:	4b98      	ldr	r3, [pc, #608]	@ (800521c <_UG_GetCharData+0x284>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fbe:	4b98      	ldr	r3, [pc, #608]	@ (8005220 <_UG_GetCharData+0x288>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10f      	bne.n	8004fe6 <_UG_GetCharData+0x4e>
 8004fc6:	4b97      	ldr	r3, [pc, #604]	@ (8005224 <_UG_GetCharData+0x28c>)
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d10a      	bne.n	8004fe6 <_UG_GetCharData+0x4e>
    if(p){
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8004fd6:	4b94      	ldr	r3, [pc, #592]	@ (8005228 <_UG_GetCharData+0x290>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8004fde:	4b93      	ldr	r3, [pc, #588]	@ (800522c <_UG_GetCharData+0x294>)
 8004fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fe4:	e116      	b.n	8005214 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8004fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800521c <_UG_GetCharData+0x284>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80cc 	beq.w	800518c <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	2bfc      	cmp	r3, #252	@ 0xfc
 8004ff8:	f300 80c8 	bgt.w	800518c <_UG_GetCharData+0x1f4>
 8004ffc:	2bd6      	cmp	r3, #214	@ 0xd6
 8004ffe:	da09      	bge.n	8005014 <_UG_GetCharData+0x7c>
 8005000:	2bc4      	cmp	r3, #196	@ 0xc4
 8005002:	d06c      	beq.n	80050de <_UG_GetCharData+0x146>
 8005004:	2bc4      	cmp	r3, #196	@ 0xc4
 8005006:	f300 80c1 	bgt.w	800518c <_UG_GetCharData+0x1f4>
 800500a:	2bb0      	cmp	r3, #176	@ 0xb0
 800500c:	d06d      	beq.n	80050ea <_UG_GetCharData+0x152>
 800500e:	2bb5      	cmp	r3, #181	@ 0xb5
 8005010:	d068      	beq.n	80050e4 <_UG_GetCharData+0x14c>
 8005012:	e06e      	b.n	80050f2 <_UG_GetCharData+0x15a>
 8005014:	3bd6      	subs	r3, #214	@ 0xd6
 8005016:	2b26      	cmp	r3, #38	@ 0x26
 8005018:	f200 80b8 	bhi.w	800518c <_UG_GetCharData+0x1f4>
 800501c:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <_UG_GetCharData+0x8c>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	080050c7 	.word	0x080050c7
 8005028:	0800518d 	.word	0x0800518d
 800502c:	0800518d 	.word	0x0800518d
 8005030:	0800518d 	.word	0x0800518d
 8005034:	0800518d 	.word	0x0800518d
 8005038:	0800518d 	.word	0x0800518d
 800503c:	080050d3 	.word	0x080050d3
 8005040:	0800518d 	.word	0x0800518d
 8005044:	0800518d 	.word	0x0800518d
 8005048:	0800518d 	.word	0x0800518d
 800504c:	0800518d 	.word	0x0800518d
 8005050:	0800518d 	.word	0x0800518d
 8005054:	0800518d 	.word	0x0800518d
 8005058:	0800518d 	.word	0x0800518d
 800505c:	080050d9 	.word	0x080050d9
 8005060:	0800518d 	.word	0x0800518d
 8005064:	0800518d 	.word	0x0800518d
 8005068:	0800518d 	.word	0x0800518d
 800506c:	0800518d 	.word	0x0800518d
 8005070:	0800518d 	.word	0x0800518d
 8005074:	0800518d 	.word	0x0800518d
 8005078:	0800518d 	.word	0x0800518d
 800507c:	0800518d 	.word	0x0800518d
 8005080:	0800518d 	.word	0x0800518d
 8005084:	0800518d 	.word	0x0800518d
 8005088:	0800518d 	.word	0x0800518d
 800508c:	0800518d 	.word	0x0800518d
 8005090:	0800518d 	.word	0x0800518d
 8005094:	0800518d 	.word	0x0800518d
 8005098:	0800518d 	.word	0x0800518d
 800509c:	0800518d 	.word	0x0800518d
 80050a0:	0800518d 	.word	0x0800518d
 80050a4:	080050c1 	.word	0x080050c1
 80050a8:	0800518d 	.word	0x0800518d
 80050ac:	0800518d 	.word	0x0800518d
 80050b0:	0800518d 	.word	0x0800518d
 80050b4:	0800518d 	.word	0x0800518d
 80050b8:	0800518d 	.word	0x0800518d
 80050bc:	080050cd 	.word	0x080050cd
    {
       case 0xF6: encoding = 0x94; break; // ö
 80050c0:	2394      	movs	r3, #148	@ 0x94
 80050c2:	80fb      	strh	r3, [r7, #6]
 80050c4:	e015      	b.n	80050f2 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80050c6:	2399      	movs	r3, #153	@ 0x99
 80050c8:	80fb      	strh	r3, [r7, #6]
 80050ca:	e012      	b.n	80050f2 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 80050cc:	2381      	movs	r3, #129	@ 0x81
 80050ce:	80fb      	strh	r3, [r7, #6]
 80050d0:	e00f      	b.n	80050f2 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 80050d2:	239a      	movs	r3, #154	@ 0x9a
 80050d4:	80fb      	strh	r3, [r7, #6]
 80050d6:	e00c      	b.n	80050f2 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 80050d8:	2384      	movs	r3, #132	@ 0x84
 80050da:	80fb      	strh	r3, [r7, #6]
 80050dc:	e009      	b.n	80050f2 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 80050de:	238e      	movs	r3, #142	@ 0x8e
 80050e0:	80fb      	strh	r3, [r7, #6]
 80050e2:	e006      	b.n	80050f2 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 80050e4:	23e6      	movs	r3, #230	@ 0xe6
 80050e6:	80fb      	strh	r3, [r7, #6]
 80050e8:	e003      	b.n	80050f2 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 80050ea:	23f8      	movs	r3, #248	@ 0xf8
 80050ec:	80fb      	strh	r3, [r7, #6]
 80050ee:	bf00      	nop
 80050f0:	e04c      	b.n	800518c <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80050f2:	e04b      	b.n	800518c <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80050f4:	4b49      	ldr	r3, [pc, #292]	@ (800521c <_UG_GetCharData+0x284>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fa:	8a7a      	ldrh	r2, [r7, #18]
 80050fc:	0052      	lsls	r2, r2, #1
 80050fe:	4413      	add	r3, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fb83 	bl	800480c <ptr_8to16>
 8005106:	4603      	mov	r3, r0
 8005108:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800510a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800510e:	2b00      	cmp	r3, #0
 8005110:	da06      	bge.n	8005120 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8005112:	89fb      	ldrh	r3, [r7, #14]
 8005114:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005118:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800511a:	2301      	movs	r3, #1
 800511c:	747b      	strb	r3, [r7, #17]
 800511e:	e032      	b.n	8005186 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8005120:	7c7b      	ldrb	r3, [r7, #17]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d021      	beq.n	800516a <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	8afb      	ldrh	r3, [r7, #22]
 800512a:	429a      	cmp	r2, r3
 800512c:	d30d      	bcc.n	800514a <_UG_GetCharData+0x1b2>
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	89fb      	ldrh	r3, [r7, #14]
 8005132:	429a      	cmp	r2, r3
 8005134:	d809      	bhi.n	800514a <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	8afb      	ldrh	r3, [r7, #22]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	b29a      	uxth	r2, r3
 800513e:	8abb      	ldrh	r3, [r7, #20]
 8005140:	4413      	add	r3, r2
 8005142:	82bb      	strh	r3, [r7, #20]
        found=1;
 8005144:	2301      	movs	r3, #1
 8005146:	743b      	strb	r3, [r7, #16]
        break;
 8005148:	e02a      	b.n	80051a0 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	8afb      	ldrh	r3, [r7, #22]
 800514e:	429a      	cmp	r2, r3
 8005150:	d323      	bcc.n	800519a <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8005152:	89fa      	ldrh	r2, [r7, #14]
 8005154:	8afb      	ldrh	r3, [r7, #22]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	b29a      	uxth	r2, r3
 800515a:	8abb      	ldrh	r3, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	3301      	adds	r3, #1
 8005162:	82bb      	strh	r3, [r7, #20]
      range=0;
 8005164:	2300      	movs	r3, #0
 8005166:	747b      	strb	r3, [r7, #17]
 8005168:	e00d      	b.n	8005186 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	89fb      	ldrh	r3, [r7, #14]
 800516e:	429a      	cmp	r2, r3
 8005170:	d102      	bne.n	8005178 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8005172:	2301      	movs	r3, #1
 8005174:	743b      	strb	r3, [r7, #16]
        break;
 8005176:	e013      	b.n	80051a0 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8005178:	88fa      	ldrh	r2, [r7, #6]
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	429a      	cmp	r2, r3
 800517e:	d30e      	bcc.n	800519e <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8005180:	8abb      	ldrh	r3, [r7, #20]
 8005182:	3301      	adds	r3, #1
 8005184:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005186:	8a7b      	ldrh	r3, [r7, #18]
 8005188:	3301      	adds	r3, #1
 800518a:	827b      	strh	r3, [r7, #18]
 800518c:	4b23      	ldr	r3, [pc, #140]	@ (800521c <_UG_GetCharData+0x284>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005192:	8a7a      	ldrh	r2, [r7, #18]
 8005194:	429a      	cmp	r2, r3
 8005196:	d3ad      	bcc.n	80050f4 <_UG_GetCharData+0x15c>
 8005198:	e002      	b.n	80051a0 <_UG_GetCharData+0x208>
        break;
 800519a:	bf00      	nop
 800519c:	e000      	b.n	80051a0 <_UG_GetCharData+0x208>
        break;
 800519e:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 80051a0:	7c3b      	ldrb	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d034      	beq.n	8005210 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 80051a6:	4b1d      	ldr	r3, [pc, #116]	@ (800521c <_UG_GetCharData+0x284>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <_UG_GetCharData+0x288>)
 80051ae:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80051b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <_UG_GetCharData+0x28c>)
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80051b6:	4b19      	ldr	r3, [pc, #100]	@ (800521c <_UG_GetCharData+0x284>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	8aba      	ldrh	r2, [r7, #20]
 80051be:	4917      	ldr	r1, [pc, #92]	@ (800521c <_UG_GetCharData+0x284>)
 80051c0:	6809      	ldr	r1, [r1, #0]
 80051c2:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 80051c4:	fb01 f202 	mul.w	r2, r1, r2
 80051c8:	4413      	add	r3, r2
 80051ca:	4a17      	ldr	r2, [pc, #92]	@ (8005228 <_UG_GetCharData+0x290>)
 80051cc:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80051ce:	4b13      	ldr	r3, [pc, #76]	@ (800521c <_UG_GetCharData+0x284>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80051d8:	4b10      	ldr	r3, [pc, #64]	@ (800521c <_UG_GetCharData+0x284>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051de:	8abb      	ldrh	r3, [r7, #20]
 80051e0:	4413      	add	r3, r2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b21a      	sxth	r2, r3
 80051e6:	4b11      	ldr	r3, [pc, #68]	@ (800522c <_UG_GetCharData+0x294>)
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	e006      	b.n	80051fa <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80051ec:	4b0b      	ldr	r3, [pc, #44]	@ (800521c <_UG_GetCharData+0x284>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80051f4:	b21a      	sxth	r2, r3
 80051f6:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <_UG_GetCharData+0x294>)
 80051f8:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8005200:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <_UG_GetCharData+0x290>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8005208:	4b08      	ldr	r3, [pc, #32]	@ (800522c <_UG_GetCharData+0x294>)
 800520a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800520e:	e001      	b.n	8005214 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8005210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20000a88 	.word	0x20000a88
 8005220:	20000a8c 	.word	0x20000a8c
 8005224:	20000a90 	.word	0x20000a90
 8005228:	20000a94 	.word	0x20000a94
 800522c:	20000a98 	.word	0x20000a98

08005230 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005238:	4b3d      	ldr	r3, [pc, #244]	@ (8005330 <_UG_FontSelect+0x100>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d070      	beq.n	8005326 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005244:	4b3a      	ldr	r3, [pc, #232]	@ (8005330 <_UG_FontSelect+0x100>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	4b37      	ldr	r3, [pc, #220]	@ (8005330 <_UG_FontSelect+0x100>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b25b      	sxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	da01      	bge.n	8005270 <_UG_FontSelect+0x40>
 800526c:	2201      	movs	r2, #1
 800526e:	e000      	b.n	8005272 <_UG_FontSelect+0x42>
 8005270:	2200      	movs	r2, #0
 8005272:	4b2f      	ldr	r3, [pc, #188]	@ (8005330 <_UG_FontSelect+0x100>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	4a2b      	ldr	r2, [pc, #172]	@ (8005330 <_UG_FontSelect+0x100>)
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	4a27      	ldr	r2, [pc, #156]	@ (8005330 <_UG_FontSelect+0x100>)
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 800529c:	4b24      	ldr	r3, [pc, #144]	@ (8005330 <_UG_FontSelect+0x100>)
 800529e:	681c      	ldr	r4, [r3, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff fab3 	bl	800480c <ptr_8to16>
 80052a6:	4603      	mov	r3, r0
 80052a8:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3302      	adds	r3, #2
 80052ae:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 80052b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005330 <_UG_FontSelect+0x100>)
 80052b2:	681c      	ldr	r4, [r3, #0]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff faa9 	bl	800480c <ptr_8to16>
 80052ba:	4603      	mov	r3, r0
 80052bc:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3302      	adds	r3, #2
 80052c2:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80052c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005330 <_UG_FontSelect+0x100>)
 80052c6:	681c      	ldr	r4, [r3, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff fa9f 	bl	800480c <ptr_8to16>
 80052ce:	4603      	mov	r3, r0
 80052d0:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3302      	adds	r3, #2
 80052d6:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80052e4:	4b12      	ldr	r3, [pc, #72]	@ (8005330 <_UG_FontSelect+0x100>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80052ec:	4b10      	ldr	r3, [pc, #64]	@ (8005330 <_UG_FontSelect+0x100>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052f2:	461a      	mov	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4413      	add	r3, r2
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	e003      	b.n	8005304 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80052fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <_UG_FontSelect+0x100>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2200      	movs	r2, #0
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005304:	4b0a      	ldr	r3, [pc, #40]	@ (8005330 <_UG_FontSelect+0x100>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800530c:	4b08      	ldr	r3, [pc, #32]	@ (8005330 <_UG_FontSelect+0x100>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	461a      	mov	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800531c:	4b04      	ldr	r3, [pc, #16]	@ (8005330 <_UG_FontSelect+0x100>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	641a      	str	r2, [r3, #64]	@ 0x40
 8005324:	e000      	b.n	8005328 <_UG_FontSelect+0xf8>
    return;
 8005326:	bf00      	nop
}
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bd90      	pop	{r4, r7, pc}
 800532e:	bf00      	nop
 8005330:	20000a88 	.word	0x20000a88

08005334 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8005334:	b5b0      	push	{r4, r5, r7, lr}
 8005336:	b08c      	sub	sp, #48	@ 0x30
 8005338:	af00      	add	r7, sp, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4623      	mov	r3, r4
 8005344:	80fb      	strh	r3, [r7, #6]
 8005346:	4603      	mov	r3, r0
 8005348:	80bb      	strh	r3, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	807b      	strh	r3, [r7, #2]
 800534e:	4613      	mov	r3, r2
 8005350:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8005352:	2300      	movs	r3, #0
 8005354:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005356:	2300      	movs	r3, #0
 8005358:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800535a:	2300      	movs	r3, #0
 800535c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800535e:	2300      	movs	r3, #0
 8005360:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8005362:	4b8b      	ldr	r3, [pc, #556]	@ (8005590 <_UG_PutChar+0x25c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800536a:	75fb      	strb	r3, [r7, #23]
 800536c:	4b88      	ldr	r3, [pc, #544]	@ (8005590 <_UG_PutChar+0x25c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800537e:	f107 0208 	add.w	r2, r7, #8
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	4611      	mov	r1, r2
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fe06 	bl	8004f98 <_UG_GetCharData>
 800538c:	4603      	mov	r3, r0
 800538e:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8005390:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d102      	bne.n	80053a0 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 800539a:	f04f 33ff 	mov.w	r3, #4294967295
 800539e:	e224      	b.n	80057ea <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 80053a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005590 <_UG_PutChar+0x25c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80053a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 80053aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <_UG_PutChar+0x80>
     return 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	e21a      	b.n	80057ea <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 80053b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053b6:	08db      	lsrs	r3, r3, #3
 80053b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80053ba:	4b75      	ldr	r3, [pc, #468]	@ (8005590 <_UG_PutChar+0x25c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <_UG_PutChar+0x9e>
 80053cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053ce:	3301      	adds	r3, #1
 80053d0:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80053d2:	7dbb      	ldrb	r3, [r7, #22]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01c      	beq.n	8005412 <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80053d8:	4b6d      	ldr	r3, [pc, #436]	@ (8005590 <_UG_PutChar+0x25c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053de:	461c      	mov	r4, r3
 80053e0:	88ba      	ldrh	r2, [r7, #4]
 80053e2:	8abb      	ldrh	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	b21a      	sxth	r2, r3
 80053ee:	4b68      	ldr	r3, [pc, #416]	@ (8005590 <_UG_PutChar+0x25c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80053f6:	4619      	mov	r1, r3
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	440b      	add	r3, r1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29b      	uxth	r3, r3
 8005402:	b21b      	sxth	r3, r3
 8005404:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005408:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800540c:	47a0      	blx	r4
 800540e:	4603      	mov	r3, r0
 8005410:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005412:	4b5f      	ldr	r3, [pc, #380]	@ (8005590 <_UG_PutChar+0x25c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 8171 	bne.w	8005702 <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005420:	2300      	movs	r3, #0
 8005422:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005424:	e0eb      	b.n	80055fe <_UG_PutChar+0x2ca>
     {
       c=0;
 8005426:	2300      	movs	r3, #0
 8005428:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800542a:	2300      	movs	r3, #0
 800542c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800542e:	e0de      	b.n	80055ee <_UG_PutChar+0x2ba>
       {
         b = *data++;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	60ba      	str	r2, [r7, #8]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800543a:	2300      	movs	r3, #0
 800543c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800543e:	e0c9      	b.n	80055d4 <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8005440:	7f7b      	ldrb	r3, [r7, #29]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d033      	beq.n	80054b2 <_UG_PutChar+0x17e>
           {
             if(driver)
 800544a:	7dbb      	ldrb	r3, [r7, #22]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01f      	beq.n	8005490 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005450:	8c3b      	ldrh	r3, [r7, #32]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <_UG_PutChar+0x138>
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d107      	bne.n	800546c <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 800545c:	8c3a      	ldrh	r2, [r7, #32]
 800545e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	4610      	mov	r0, r2
 8005466:	4798      	blx	r3
                 bpixels=0;
 8005468:	2300      	movs	r3, #0
 800546a:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 800546c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <_UG_PutChar+0x154>
 8005472:	7dfb      	ldrb	r3, [r7, #23]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 8005478:	88ba      	ldrh	r2, [r7, #4]
 800547a:	8bfb      	ldrh	r3, [r7, #30]
 800547c:	4413      	add	r3, r2
 800547e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 8005480:	887a      	ldrh	r2, [r7, #2]
 8005482:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005484:	4413      	add	r3, r2
 8005486:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005488:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800548a:	3301      	adds	r3, #1
 800548c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800548e:	e095      	b.n	80055bc <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005490:	4b3f      	ldr	r3, [pc, #252]	@ (8005590 <_UG_PutChar+0x25c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	88b9      	ldrh	r1, [r7, #4]
 800549a:	8bfa      	ldrh	r2, [r7, #30]
 800549c:	440a      	add	r2, r1
 800549e:	b292      	uxth	r2, r2
 80054a0:	b210      	sxth	r0, r2
 80054a2:	8879      	ldrh	r1, [r7, #2]
 80054a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80054a6:	440a      	add	r2, r1
 80054a8:	b292      	uxth	r2, r2
 80054aa:	b211      	sxth	r1, r2
 80054ac:	883a      	ldrh	r2, [r7, #0]
 80054ae:	4798      	blx	r3
 80054b0:	e084      	b.n	80055bc <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 80054b2:	7dbb      	ldrb	r3, [r7, #22]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d06d      	beq.n	8005594 <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 80054b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d064      	beq.n	8005588 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80054be:	7dfb      	ldrb	r3, [r7, #23]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d15e      	bne.n	8005582 <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 80054c4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80054c6:	8839      	ldrh	r1, [r7, #0]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	4610      	mov	r0, r2
 80054cc:	4798      	blx	r3
                   fpixels=0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80054d2:	e059      	b.n	8005588 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80054d4:	88ba      	ldrh	r2, [r7, #4]
 80054d6:	8abb      	ldrh	r3, [r7, #20]
 80054d8:	4413      	add	r3, r2
 80054da:	b29a      	uxth	r2, r3
 80054dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80054e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80054e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d003      	beq.n	80054f4 <_UG_PutChar+0x1c0>
 80054ec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d224      	bcs.n	800553e <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80054f4:	4b26      	ldr	r3, [pc, #152]	@ (8005590 <_UG_PutChar+0x25c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054fa:	461d      	mov	r5, r3
 80054fc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005500:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005504:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005506:	89fb      	ldrh	r3, [r7, #14]
 8005508:	4413      	add	r3, r2
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29b      	uxth	r3, r3
 8005510:	b21c      	sxth	r4, r3
 8005512:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005514:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005518:	fb92 f3f3 	sdiv	r3, r2, r3
 800551c:	b29a      	uxth	r2, r3
 800551e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005520:	4413      	add	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	b21b      	sxth	r3, r3
 8005526:	4622      	mov	r2, r4
 8005528:	47a8      	blx	r5
 800552a:	4603      	mov	r3, r0
 800552c:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800552e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005530:	8839      	ldrh	r1, [r7, #0]
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
                       fpixels=0;
 8005538:	2300      	movs	r3, #0
 800553a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800553c:	e021      	b.n	8005582 <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800553e:	4b14      	ldr	r3, [pc, #80]	@ (8005590 <_UG_PutChar+0x25c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005544:	461c      	mov	r4, r3
 8005546:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800554a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800554e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	4413      	add	r3, r2
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29b      	uxth	r3, r3
 800555a:	b21a      	sxth	r2, r3
 800555c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005560:	47a0      	blx	r4
 8005562:	4603      	mov	r3, r0
 8005564:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005566:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005568:	8839      	ldrh	r1, [r7, #0]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	4610      	mov	r0, r2
 800556e:	4798      	blx	r3
                       fpixels -= width;
 8005570:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005572:	89fb      	ldrh	r3, [r7, #14]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 8005578:	88bb      	ldrh	r3, [r7, #4]
 800557a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 800557c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800557e:	3301      	adds	r3, #1
 8005580:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 8005582:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1a5      	bne.n	80054d4 <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 8005588:	8c3b      	ldrh	r3, [r7, #32]
 800558a:	3301      	adds	r3, #1
 800558c:	843b      	strh	r3, [r7, #32]
 800558e:	e015      	b.n	80055bc <_UG_PutChar+0x288>
 8005590:	20000a88 	.word	0x20000a88
             }
             else if(!trans)                           // Not accelerated output
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d110      	bne.n	80055bc <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 800559a:	4b96      	ldr	r3, [pc, #600]	@ (80057f4 <_UG_PutChar+0x4c0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	88b9      	ldrh	r1, [r7, #4]
 80055a4:	8bfa      	ldrh	r2, [r7, #30]
 80055a6:	440a      	add	r2, r1
 80055a8:	b292      	uxth	r2, r2
 80055aa:	b210      	sxth	r0, r2
 80055ac:	8879      	ldrh	r1, [r7, #2]
 80055ae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80055b0:	440a      	add	r2, r1
 80055b2:	b292      	uxth	r2, r2
 80055b4:	b211      	sxth	r1, r2
 80055b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80055ba:	4798      	blx	r3
             }
           }
           b >>= 1;
 80055bc:	7f7b      	ldrb	r3, [r7, #29]
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	777b      	strb	r3, [r7, #29]
           c++;
 80055c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3301      	adds	r3, #1
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80055ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055d0:	3301      	adds	r3, #1
 80055d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80055d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055d6:	2b07      	cmp	r3, #7
 80055d8:	d806      	bhi.n	80055e8 <_UG_PutChar+0x2b4>
 80055da:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80055de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f6ff af2c 	blt.w	8005440 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 80055e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80055ea:	3301      	adds	r3, #1
 80055ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80055ee:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80055f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055f2:	429a      	cmp	r2, r3
 80055f4:	f4ff af1c 	bcc.w	8005430 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80055f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80055fa:	3301      	adds	r3, #1
 80055fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80055fe:	4b7d      	ldr	r3, [pc, #500]	@ (80057f4 <_UG_PutChar+0x4c0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005606:	461a      	mov	r2, r3
 8005608:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800560a:	4293      	cmp	r3, r2
 800560c:	f4ff af0b 	bcc.w	8005426 <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8005610:	7dbb      	ldrb	r3, [r7, #22]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80e7 	beq.w	80057e6 <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 8005618:	8c3b      	ldrh	r3, [r7, #32]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <_UG_PutChar+0x2fe>
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8005624:	8c3a      	ldrh	r2, [r7, #32]
 8005626:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	4610      	mov	r0, r2
 800562e:	4798      	blx	r3
 8005630:	e0d9      	b.n	80057e6 <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 8005632:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80d6 	beq.w	80057e6 <_UG_PutChar+0x4b2>
       {
         if(!trans)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d15c      	bne.n	80056fa <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 8005640:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005642:	8839      	ldrh	r1, [r7, #0]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	4610      	mov	r0, r2
 8005648:	4798      	blx	r3
 800564a:	e0cc      	b.n	80057e6 <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 800564c:	88ba      	ldrh	r2, [r7, #4]
 800564e:	8abb      	ldrh	r3, [r7, #20]
 8005650:	4413      	add	r3, r2
 8005652:	b29a      	uxth	r2, r3
 8005654:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 800565a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800565c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d003      	beq.n	800566c <_UG_PutChar+0x338>
 8005664:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005666:	8a3b      	ldrh	r3, [r7, #16]
 8005668:	429a      	cmp	r2, r3
 800566a:	d224      	bcs.n	80056b6 <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800566c:	4b61      	ldr	r3, [pc, #388]	@ (80057f4 <_UG_PutChar+0x4c0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005672:	461d      	mov	r5, r3
 8005674:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005678:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800567c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800567e:	8a3b      	ldrh	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29b      	uxth	r3, r3
 8005688:	b21c      	sxth	r4, r3
 800568a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800568c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005690:	fb92 f3f3 	sdiv	r3, r2, r3
 8005694:	b29a      	uxth	r2, r3
 8005696:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005698:	4413      	add	r3, r2
 800569a:	b29b      	uxth	r3, r3
 800569c:	b21b      	sxth	r3, r3
 800569e:	4622      	mov	r2, r4
 80056a0:	47a8      	blx	r5
 80056a2:	4603      	mov	r3, r0
 80056a4:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80056a6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80056a8:	8839      	ldrh	r1, [r7, #0]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
               fpixels=0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80056b4:	e021      	b.n	80056fa <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80056b6:	4b4f      	ldr	r3, [pc, #316]	@ (80057f4 <_UG_PutChar+0x4c0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056bc:	461c      	mov	r4, r3
 80056be:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80056c2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80056c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80056c8:	8a3b      	ldrh	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b21a      	sxth	r2, r3
 80056d4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80056d8:	47a0      	blx	r4
 80056da:	4603      	mov	r3, r0
 80056dc:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80056de:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80056e0:	8839      	ldrh	r1, [r7, #0]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	4610      	mov	r0, r2
 80056e6:	4798      	blx	r3
               fpixels -= width;
 80056e8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80056ea:	8a3b      	ldrh	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 80056f0:	88bb      	ldrh	r3, [r7, #4]
 80056f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 80056f4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80056f6:	3301      	adds	r3, #1
 80056f8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 80056fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1a5      	bne.n	800564c <_UG_PutChar+0x318>
 8005700:	e071      	b.n	80057e6 <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8005702:	4b3c      	ldr	r3, [pc, #240]	@ (80057f4 <_UG_PutChar+0x4c0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d16b      	bne.n	80057e6 <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800570e:	2300      	movs	r3, #0
 8005710:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005712:	e060      	b.n	80057d6 <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8005714:	2300      	movs	r3, #0
 8005716:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005718:	e04a      	b.n	80057b0 <_UG_PutChar+0x47c>
       {
         b = *data++;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	60ba      	str	r2, [r7, #8]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005724:	883b      	ldrh	r3, [r7, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	7f7a      	ldrb	r2, [r7, #29]
 800572a:	fb03 f202 	mul.w	r2, r3, r2
 800572e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005732:	b2db      	uxtb	r3, r3
 8005734:	7f79      	ldrb	r1, [r7, #29]
 8005736:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	4413      	add	r3, r2
 8005740:	121b      	asrs	r3, r3, #8
 8005742:	b21b      	sxth	r3, r3
 8005744:	b2db      	uxtb	r3, r3
 8005746:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8005748:	883b      	ldrh	r3, [r7, #0]
 800574a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800574e:	7f79      	ldrb	r1, [r7, #29]
 8005750:	fb03 f101 	mul.w	r1, r3, r1
 8005754:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005758:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800575c:	7f78      	ldrb	r0, [r7, #29]
 800575e:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8005762:	fb00 f303 	mul.w	r3, r0, r3
 8005766:	440b      	add	r3, r1
 8005768:	121b      	asrs	r3, r3, #8
 800576a:	b21b      	sxth	r3, r3
 800576c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005770:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005772:	4313      	orrs	r3, r2
 8005774:	b21b      	sxth	r3, r3
 8005776:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005778:	7dbb      	ldrb	r3, [r7, #22]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800577e:	8a7a      	ldrh	r2, [r7, #18]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	4611      	mov	r1, r2
 8005784:	2001      	movs	r0, #1
 8005786:	4798      	blx	r3
 8005788:	e00f      	b.n	80057aa <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800578a:	4b1a      	ldr	r3, [pc, #104]	@ (80057f4 <_UG_PutChar+0x4c0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	88b9      	ldrh	r1, [r7, #4]
 8005794:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005796:	440a      	add	r2, r1
 8005798:	b292      	uxth	r2, r2
 800579a:	b210      	sxth	r0, r2
 800579c:	8879      	ldrh	r1, [r7, #2]
 800579e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057a0:	440a      	add	r2, r1
 80057a2:	b292      	uxth	r2, r2
 80057a4:	b211      	sxth	r1, r2
 80057a6:	8a7a      	ldrh	r2, [r7, #18]
 80057a8:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80057aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057ac:	3301      	adds	r3, #1
 80057ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80057b0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80057b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	dbaf      	blt.n	800571a <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4a0d      	ldr	r2, [pc, #52]	@ (80057f4 <_UG_PutChar+0x4c0>)
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80057c4:	4611      	mov	r1, r2
 80057c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80057ca:	1a8a      	subs	r2, r1, r2
 80057cc:	4413      	add	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80057d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80057d2:	3301      	adds	r3, #1
 80057d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057d6:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <_UG_PutChar+0x4c0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80057de:	461a      	mov	r2, r3
 80057e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d396      	bcc.n	8005714 <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 80057e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3730      	adds	r7, #48	@ 0x30
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bdb0      	pop	{r4, r5, r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000a88 	.word	0x20000a88

080057f8 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b089      	sub	sp, #36	@ 0x24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8005800:	4b57      	ldr	r3, [pc, #348]	@ (8005960 <_UG_ProcessTouchData+0x168>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	88db      	ldrh	r3, [r3, #6]
 8005806:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8005808:	4b55      	ldr	r3, [pc, #340]	@ (8005960 <_UG_ProcessTouchData+0x168>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	891b      	ldrh	r3, [r3, #8]
 800580e:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8005810:	4b53      	ldr	r3, [pc, #332]	@ (8005960 <_UG_ProcessTouchData+0x168>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800581e:	2300      	movs	r3, #0
 8005820:	83fb      	strh	r3, [r7, #30]
 8005822:	e090      	b.n	8005946 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	8bfb      	ldrh	r3, [r7, #30]
 800582a:	015b      	lsls	r3, r3, #5
 800582c:	4413      	add	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d179      	bne.n	800593a <_UG_ProcessTouchData+0x142>
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d074      	beq.n	800593a <_UG_ProcessTouchData+0x142>
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d06f      	beq.n	800593a <_UG_ProcessTouchData+0x142>
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d16a      	bne.n	800593a <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d047      	beq.n	80058fa <_UG_ProcessTouchData+0x102>
 800586a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d042      	beq.n	80058fa <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005874:	7f7b      	ldrb	r3, [r7, #29]
 8005876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d107      	bne.n	800588e <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 800587e:	7f7b      	ldrb	r3, [r7, #29]
 8005880:	f043 0305 	orr.w	r3, r3, #5
 8005884:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8005886:	7f7b      	ldrb	r3, [r7, #29]
 8005888:	f023 0318 	bic.w	r3, r3, #24
 800588c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800588e:	7f7b      	ldrb	r3, [r7, #29]
 8005890:	f023 0320 	bic.w	r3, r3, #32
 8005894:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800589c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	db25      	blt.n	80058f0 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80058aa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	dc1e      	bgt.n	80058f0 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80058b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80058bc:	429a      	cmp	r2, r3
 80058be:	db17      	blt.n	80058f0 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80058c6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	dc10      	bgt.n	80058f0 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80058ce:	7f7b      	ldrb	r3, [r7, #29]
 80058d0:	f043 0320 	orr.w	r3, r3, #32
 80058d4:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80058d6:	7f7b      	ldrb	r3, [r7, #29]
 80058d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 80058e0:	7f7b      	ldrb	r3, [r7, #29]
 80058e2:	f023 0304 	bic.w	r3, r3, #4
 80058e6:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80058e8:	7f7b      	ldrb	r3, [r7, #29]
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80058f0:	7f7b      	ldrb	r3, [r7, #29]
 80058f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f6:	777b      	strb	r3, [r7, #29]
 80058f8:	e01f      	b.n	800593a <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80058fa:	7f7b      	ldrb	r3, [r7, #29]
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01a      	beq.n	800593a <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8005904:	7f7b      	ldrb	r3, [r7, #29]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 800590e:	7f7b      	ldrb	r3, [r7, #29]
 8005910:	f043 0308 	orr.w	r3, r3, #8
 8005914:	777b      	strb	r3, [r7, #29]
 8005916:	e003      	b.n	8005920 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8005918:	7f7b      	ldrb	r3, [r7, #29]
 800591a:	f043 0310 	orr.w	r3, r3, #16
 800591e:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005920:	7f7b      	ldrb	r3, [r7, #29]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800592a:	7f7b      	ldrb	r3, [r7, #29]
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8005932:	7f7b      	ldrb	r3, [r7, #29]
 8005934:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 8005938:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	7f7a      	ldrb	r2, [r7, #29]
 800593e:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8005940:	8bfb      	ldrh	r3, [r7, #30]
 8005942:	3301      	adds	r3, #1
 8005944:	83fb      	strh	r3, [r7, #30]
 8005946:	8bfa      	ldrh	r2, [r7, #30]
 8005948:	8abb      	ldrh	r3, [r7, #20]
 800594a:	429a      	cmp	r2, r3
 800594c:	f4ff af6a 	bcc.w	8005824 <_UG_ProcessTouchData+0x2c>
   }
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	3724      	adds	r7, #36	@ 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000a88 	.word	0x20000a88

08005964 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005972:	2300      	movs	r3, #0
 8005974:	82fb      	strh	r3, [r7, #22]
 8005976:	e035      	b.n	80059e4 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	8afb      	ldrh	r3, [r7, #22]
 800597e:	015b      	lsls	r3, r3, #5
 8005980:	4413      	add	r3, r2
 8005982:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d121      	bne.n	80059de <_UG_UpdateObjects+0x7a>
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01c      	beq.n	80059de <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	6939      	ldr	r1, [r7, #16]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00d      	beq.n	80059de <_UG_UpdateObjects+0x7a>
 80059c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da09      	bge.n	80059de <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 80059ca:	7bbb      	ldrb	r3, [r7, #14]
 80059cc:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	6939      	ldr	r1, [r7, #16]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 80059de:	8afb      	ldrh	r3, [r7, #22]
 80059e0:	3301      	adds	r3, #1
 80059e2:	82fb      	strh	r3, [r7, #22]
 80059e4:	8afa      	ldrh	r2, [r7, #22]
 80059e6:	8abb      	ldrh	r3, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d3c5      	bcc.n	8005978 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8005a00:	4b22      	ldr	r3, [pc, #136]	@ (8005a8c <_UG_HandleEvents+0x94>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8005a06:	4b21      	ldr	r3, [pc, #132]	@ (8005a8c <_UG_HandleEvents+0x94>)
 8005a08:	2202      	movs	r2, #2
 8005a0a:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	82fb      	strh	r3, [r7, #22]
 8005a16:	e02f      	b.n	8005a78 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	8afb      	ldrh	r3, [r7, #22]
 8005a1e:	015b      	lsls	r3, r3, #5
 8005a20:	4413      	add	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11e      	bne.n	8005a72 <_UG_HandleEvents+0x7a>
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d019      	beq.n	8005a72 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	7e9b      	ldrb	r3, [r3, #26]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d015      	beq.n	8005a72 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8005a46:	4a11      	ldr	r2, [pc, #68]	@ (8005a8c <_UG_HandleEvents+0x94>)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	7e1a      	ldrb	r2, [r3, #24]
 8005a50:	4b0e      	ldr	r3, [pc, #56]	@ (8005a8c <_UG_HandleEvents+0x94>)
 8005a52:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	7e5a      	ldrb	r2, [r3, #25]
 8005a58:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <_UG_HandleEvents+0x94>)
 8005a5a:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	7e9a      	ldrb	r2, [r3, #26]
 8005a60:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <_UG_HandleEvents+0x94>)
 8005a62:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	4808      	ldr	r0, [pc, #32]	@ (8005a8c <_UG_HandleEvents+0x94>)
 8005a6a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8005a72:	8afb      	ldrh	r3, [r7, #22]
 8005a74:	3301      	adds	r3, #1
 8005a76:	82fb      	strh	r3, [r7, #22]
 8005a78:	8afa      	ldrh	r2, [r7, #22]
 8005a7a:	8abb      	ldrh	r3, [r7, #20]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3cb      	bcc.n	8005a18 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000a9c 	.word	0x20000a9c

08005a90 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b08f      	sub	sp, #60	@ 0x3c
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 812c 	beq.w	8005cfa <_UG_PutText+0x26a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8127 	beq.w	8005cfa <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	89db      	ldrh	r3, [r3, #14]
 8005ab0:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	895b      	ldrh	r3, [r3, #10]
 8005ab6:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	3302      	adds	r3, #2
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8005ac2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8005ac6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	f2c0 8114 	blt.w	8005cfe <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	891b      	ldrh	r3, [r3, #8]
 8005ada:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	899b      	ldrh	r3, [r3, #12]
 8005ae0:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	7d1b      	ldrb	r3, [r3, #20]
 8005ae6:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8adb      	ldrh	r3, [r3, #22]
 8005aec:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8b1b      	ldrh	r3, [r3, #24]
 8005af2:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fb94 	bl	8005230 <_UG_FontSelect>

   rc=1;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005b10:	4b80      	ldr	r3, [pc, #512]	@ (8005d14 <_UG_PutText+0x284>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d107      	bne.n	8005b2c <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8005b1c:	f107 0308 	add.w	r3, r7, #8
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff f9c1 	bl	8004ea8 <_UG_DecodeUTF8>
 8005b26:	4603      	mov	r3, r0
 8005b28:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005b2a:	e004      	b.n	8005b36 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	60ba      	str	r2, [r7, #8]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8005b36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8005b3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b3e:	2b0a      	cmp	r3, #10
 8005b40:	d1e6      	bne.n	8005b10 <_UG_PutText+0x80>
 8005b42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005b44:	3301      	adds	r3, #1
 8005b46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005b48:	e7e2      	b.n	8005b10 <_UG_PutText+0x80>
     if(!chr) break;
 8005b4a:	bf00      	nop
   }

   yp = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8005b50:	7e7b      	ldrb	r3, [r7, #25]
 8005b52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01f      	beq.n	8005b9a <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8005b5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b5c:	8c3b      	ldrh	r3, [r7, #32]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3301      	adds	r3, #1
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 8005b68:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005b6a:	8bfb      	ldrh	r3, [r7, #30]
 8005b6c:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8005b6e:	fb11 f303 	smulbb	r3, r1, r3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 8005b7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005b7c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b299      	uxth	r1, r3
 8005b82:	8abb      	ldrh	r3, [r7, #20]
 8005b84:	fb11 f303 	smulbb	r3, r1, r3
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 8005b90:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f2c0 80b4 	blt.w	8005d02 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8005b9a:	7e7b      	ldrb	r3, [r7, #25]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <_UG_PutText+0x11c>
 8005ba4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005ba8:	105b      	asrs	r3, r3, #1
 8005baa:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 8005bac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005bae:	8c3b      	ldrh	r3, [r7, #32]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005bc2:	4b54      	ldr	r3, [pc, #336]	@ (8005d14 <_UG_PutText+0x284>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff f968 	bl	8004ea8 <_UG_DecodeUTF8>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005bdc:	e004      	b.n	8005be8 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	60ba      	str	r2, [r7, #8]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8005be8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01b      	beq.n	8005c26 <_UG_PutText+0x196>
 8005bee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bf0:	2b0a      	cmp	r3, #10
 8005bf2:	d018      	beq.n	8005c26 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8005bf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff f9cd 	bl	8004f98 <_UG_GetCharData>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8005c02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d00a      	beq.n	8005c22 <_UG_PutText+0x192>
         sl++;
 8005c0c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005c0e:	3301      	adds	r3, #1
 8005c10:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 8005c12:	8a7a      	ldrh	r2, [r7, #18]
 8005c14:	8afb      	ldrh	r3, [r7, #22]
 8005c16:	4413      	add	r3, r2
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c1c:	4413      	add	r3, r2
 8005c1e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005c20:	e7cf      	b.n	8005bc2 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8005c22:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005c24:	e7cd      	b.n	8005bc2 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8005c26:	8afb      	ldrh	r3, [r7, #22]
 8005c28:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 8005c2e:	8b7a      	ldrh	r2, [r7, #26]
 8005c30:	8bbb      	ldrh	r3, [r7, #28]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3301      	adds	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 8005c3c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 8005c46:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	db5b      	blt.n	8005d06 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8005c4e:	7e7b      	ldrb	r3, [r7, #25]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <_UG_PutText+0x1ce>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c5c:	e008      	b.n	8005c70 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8005c5e:	7e7b      	ldrb	r3, [r7, #25]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <_UG_PutText+0x1e0>
 8005c68:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8005c6c:	105b      	asrs	r3, r3, #1
 8005c6e:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 8005c70:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c72:	8bbb      	ldrh	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005c7a:	4b26      	ldr	r3, [pc, #152]	@ (8005d14 <_UG_PutText+0x284>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d107      	bne.n	8005c96 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8005c86:	f107 030c 	add.w	r3, r7, #12
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff f90c 	bl	8004ea8 <_UG_DecodeUTF8>
 8005c90:	4603      	mov	r3, r0
 8005c92:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005c94:	e004      	b.n	8005ca0 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	60fa      	str	r2, [r7, #12]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8005ca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d031      	beq.n	8005d0a <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8005ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca8:	2b0a      	cmp	r3, #10
 8005caa:	d01c      	beq.n	8005ce6 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	8a1c      	ldrh	r4, [r3, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8a5b      	ldrh	r3, [r3, #18]
 8005cb4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8005cb8:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 8005cbc:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	f7ff fb37 	bl	8005334 <_UG_PutChar>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8005cca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d0d2      	beq.n	8005c7a <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8005cd4:	8a7a      	ldrh	r2, [r7, #18]
 8005cd6:	8afb      	ldrh	r3, [r7, #22]
 8005cd8:	4413      	add	r3, r2
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005cde:	4413      	add	r3, r2
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005ce4:	e7c9      	b.n	8005c7a <_UG_PutText+0x1ea>
           break;
 8005ce6:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8005ce8:	8bfa      	ldrh	r2, [r7, #30]
 8005cea:	8abb      	ldrh	r3, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005cf2:	4413      	add	r3, r2
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 8005cf8:	e75d      	b.n	8005bb6 <_UG_PutText+0x126>
     return;
 8005cfa:	bf00      	nop
 8005cfc:	e006      	b.n	8005d0c <_UG_PutText+0x27c>
     return;
 8005cfe:	bf00      	nop
 8005d00:	e004      	b.n	8005d0c <_UG_PutText+0x27c>
        return;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <_UG_PutText+0x27c>
           return;
 8005d0a:	bf00      	nop
   }
}
 8005d0c:	3734      	adds	r7, #52	@ 0x34
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd90      	pop	{r4, r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000a88 	.word	0x20000a88

08005d18 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8005d18:	b5b0      	push	{r4, r5, r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	4623      	mov	r3, r4
 8005d28:	80fb      	strh	r3, [r7, #6]
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	80bb      	strh	r3, [r7, #4]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	807b      	strh	r3, [r7, #2]
 8005d32:	4613      	mov	r3, r2
 8005d34:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8005d36:	887b      	ldrh	r3, [r7, #2]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	b21c      	sxth	r4, r3
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	1c9a      	adds	r2, r3, #2
 8005d42:	61ba      	str	r2, [r7, #24]
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005d4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005d4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	4622      	mov	r2, r4
 8005d58:	f7fe fe94 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8005d5c:	88bb      	ldrh	r3, [r7, #4]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	b219      	sxth	r1, r3
 8005d64:	883b      	ldrh	r3, [r7, #0]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	b21c      	sxth	r4, r3
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1c9a      	adds	r2, r3, #2
 8005d70:	61ba      	str	r2, [r7, #24]
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d78:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4623      	mov	r3, r4
 8005d80:	f7fe fe80 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	61ba      	str	r2, [r7, #24]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005d90:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005d94:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005d98:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	4623      	mov	r3, r4
 8005da0:	f7fe fe70 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8005da4:	883b      	ldrh	r3, [r7, #0]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	b21c      	sxth	r4, r3
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	1c9a      	adds	r2, r3, #2
 8005db0:	61ba      	str	r2, [r7, #24]
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005db8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005dbc:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	f7fe fe5e 	bl	8004a84 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	b218      	sxth	r0, r3
 8005dd0:	88bb      	ldrh	r3, [r7, #4]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	b219      	sxth	r1, r3
 8005dd8:	887b      	ldrh	r3, [r7, #2]
 8005dda:	3b02      	subs	r3, #2
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	b21c      	sxth	r4, r3
 8005de0:	88bb      	ldrh	r3, [r7, #4]
 8005de2:	3301      	adds	r3, #1
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	b21d      	sxth	r5, r3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	61ba      	str	r2, [r7, #24]
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	462b      	mov	r3, r5
 8005df4:	4622      	mov	r2, r4
 8005df6:	f7fe fe45 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	b218      	sxth	r0, r3
 8005e02:	88bb      	ldrh	r3, [r7, #4]
 8005e04:	3302      	adds	r3, #2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	b219      	sxth	r1, r3
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	b21c      	sxth	r4, r3
 8005e12:	883b      	ldrh	r3, [r7, #0]
 8005e14:	3b02      	subs	r3, #2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	b21d      	sxth	r5, r3
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	1c9a      	adds	r2, r3, #2
 8005e1e:	61ba      	str	r2, [r7, #24]
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	462b      	mov	r3, r5
 8005e26:	4622      	mov	r2, r4
 8005e28:	f7fe fe2c 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b218      	sxth	r0, r3
 8005e34:	883b      	ldrh	r3, [r7, #0]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	b219      	sxth	r1, r3
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	b21c      	sxth	r4, r3
 8005e44:	883b      	ldrh	r3, [r7, #0]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	b21d      	sxth	r5, r3
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	1c9a      	adds	r2, r3, #2
 8005e50:	61ba      	str	r2, [r7, #24]
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	462b      	mov	r3, r5
 8005e58:	4622      	mov	r2, r4
 8005e5a:	f7fe fe13 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8005e5e:	887b      	ldrh	r3, [r7, #2]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	b218      	sxth	r0, r3
 8005e66:	88bb      	ldrh	r3, [r7, #4]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	b219      	sxth	r1, r3
 8005e6e:	887b      	ldrh	r3, [r7, #2]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	b21c      	sxth	r4, r3
 8005e76:	883b      	ldrh	r3, [r7, #0]
 8005e78:	3b02      	subs	r3, #2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	b21d      	sxth	r5, r3
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	1c9a      	adds	r2, r3, #2
 8005e82:	61ba      	str	r2, [r7, #24]
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	462b      	mov	r3, r5
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	f7fe fdfa 	bl	8004a84 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	3302      	adds	r3, #2
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b218      	sxth	r0, r3
 8005e98:	88bb      	ldrh	r3, [r7, #4]
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b219      	sxth	r1, r3
 8005ea0:	887b      	ldrh	r3, [r7, #2]
 8005ea2:	3b03      	subs	r3, #3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b21c      	sxth	r4, r3
 8005ea8:	88bb      	ldrh	r3, [r7, #4]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	b21d      	sxth	r5, r3
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	1c9a      	adds	r2, r3, #2
 8005eb4:	61ba      	str	r2, [r7, #24]
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	462b      	mov	r3, r5
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	f7fe fde1 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	b218      	sxth	r0, r3
 8005eca:	88bb      	ldrh	r3, [r7, #4]
 8005ecc:	3303      	adds	r3, #3
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	b219      	sxth	r1, r3
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	b21c      	sxth	r4, r3
 8005eda:	883b      	ldrh	r3, [r7, #0]
 8005edc:	3b03      	subs	r3, #3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	b21d      	sxth	r5, r3
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	1c9a      	adds	r2, r3, #2
 8005ee6:	61ba      	str	r2, [r7, #24]
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	462b      	mov	r3, r5
 8005eee:	4622      	mov	r2, r4
 8005ef0:	f7fe fdc8 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	b218      	sxth	r0, r3
 8005efc:	883b      	ldrh	r3, [r7, #0]
 8005efe:	3b02      	subs	r3, #2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	b219      	sxth	r1, r3
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	3b02      	subs	r3, #2
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	b21c      	sxth	r4, r3
 8005f0c:	883b      	ldrh	r3, [r7, #0]
 8005f0e:	3b02      	subs	r3, #2
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	b21d      	sxth	r5, r3
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	1c9a      	adds	r2, r3, #2
 8005f18:	61ba      	str	r2, [r7, #24]
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	462b      	mov	r3, r5
 8005f20:	4622      	mov	r2, r4
 8005f22:	f7fe fdaf 	bl	8004a84 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8005f26:	887b      	ldrh	r3, [r7, #2]
 8005f28:	3b02      	subs	r3, #2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	b218      	sxth	r0, r3
 8005f2e:	88bb      	ldrh	r3, [r7, #4]
 8005f30:	3302      	adds	r3, #2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	b219      	sxth	r1, r3
 8005f36:	887b      	ldrh	r3, [r7, #2]
 8005f38:	3b02      	subs	r3, #2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	b21a      	sxth	r2, r3
 8005f3e:	883b      	ldrh	r3, [r7, #0]
 8005f40:	3b03      	subs	r3, #3
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	b21c      	sxth	r4, r3
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	f7fe fd99 	bl	8004a84 <UG_DrawLine>
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f5c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	6039      	str	r1, [r7, #0]
 8005f66:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d810      	bhi.n	8005f90 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f9c <UG_DriverRegister+0x40>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	330a      	adds	r3, #10
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4413      	add	r3, r2
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8005f7e:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <UG_DriverRegister+0x40>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	330a      	adds	r3, #10
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	721a      	strb	r2, [r3, #8]
 8005f8e:	e000      	b.n	8005f92 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8005f90:	bf00      	nop
}
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	20000a88 	.word	0x20000a88

08005fa0 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8005fa6:	4b5e      	ldr	r3, [pc, #376]	@ (8006120 <UG_Update+0x180>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UG_Update+0x2c>
 8005fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8006120 <UG_Update+0x180>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 8005fbe:	4b58      	ldr	r3, [pc, #352]	@ (8006120 <UG_Update+0x180>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8005fcc:	4b54      	ldr	r3, [pc, #336]	@ (8006120 <UG_Update+0x180>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	4b53      	ldr	r3, [pc, #332]	@ (8006120 <UG_Update+0x180>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d071      	beq.n	80060c0 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8005fdc:	4b50      	ldr	r3, [pc, #320]	@ (8006120 <UG_Update+0x180>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d06c      	beq.n	80060c0 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8005fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8006120 <UG_Update+0x180>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b4d      	ldr	r3, [pc, #308]	@ (8006120 <UG_Update+0x180>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6912      	ldr	r2, [r2, #16]
 8005ff0:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8005ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8006120 <UG_Update+0x180>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8006120 <UG_Update+0x180>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68d2      	ldr	r2, [r2, #12]
 8005ffc:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8005ffe:	4b48      	ldr	r3, [pc, #288]	@ (8006120 <UG_Update+0x180>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d045      	beq.n	8006094 <UG_Update+0xf4>
 8006008:	4b45      	ldr	r3, [pc, #276]	@ (8006120 <UG_Update+0x180>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	7d9b      	ldrb	r3, [r3, #22]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d03d      	beq.n	8006094 <UG_Update+0xf4>
 8006018:	4b41      	ldr	r3, [pc, #260]	@ (8006120 <UG_Update+0x180>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	7a1b      	ldrb	r3, [r3, #8]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d035      	beq.n	8006094 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006028:	4b3d      	ldr	r3, [pc, #244]	@ (8006120 <UG_Update+0x180>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8006032:	4b3b      	ldr	r3, [pc, #236]	@ (8006120 <UG_Update+0x180>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800603c:	429a      	cmp	r2, r3
 800603e:	d123      	bne.n	8006088 <UG_Update+0xe8>
 8006040:	4b37      	ldr	r3, [pc, #220]	@ (8006120 <UG_Update+0x180>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800604a:	4b35      	ldr	r3, [pc, #212]	@ (8006120 <UG_Update+0x180>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006054:	429a      	cmp	r2, r3
 8006056:	d117      	bne.n	8006088 <UG_Update+0xe8>
 8006058:	4b31      	ldr	r3, [pc, #196]	@ (8006120 <UG_Update+0x180>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8006062:	4b2f      	ldr	r3, [pc, #188]	@ (8006120 <UG_Update+0x180>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800606c:	429a      	cmp	r2, r3
 800606e:	d10b      	bne.n	8006088 <UG_Update+0xe8>
 8006070:	4b2b      	ldr	r3, [pc, #172]	@ (8006120 <UG_Update+0x180>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800607a:	4b29      	ldr	r3, [pc, #164]	@ (8006120 <UG_Update+0x180>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006084:	429a      	cmp	r2, r3
 8006086:	d005      	beq.n	8006094 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006088:	4b25      	ldr	r3, [pc, #148]	@ (8006120 <UG_Update+0x180>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 f848 	bl	8006124 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006094:	4b22      	ldr	r3, [pc, #136]	@ (8006120 <UG_Update+0x180>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	7a1a      	ldrb	r2, [r3, #8]
 800609c:	4b20      	ldr	r3, [pc, #128]	@ (8006120 <UG_Update+0x180>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80060aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006120 <UG_Update+0x180>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	7a1a      	ldrb	r2, [r3, #8]
 80060b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006120 <UG_Update+0x180>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80060c0:	4b17      	ldr	r3, [pc, #92]	@ (8006120 <UG_Update+0x180>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01b      	beq.n	8006102 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 80060ca:	4b15      	ldr	r3, [pc, #84]	@ (8006120 <UG_Update+0x180>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	7a1b      	ldrb	r3, [r3, #8]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f8c8 	bl	8006274 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7a1b      	ldrb	r3, [r3, #8]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff fb81 	bl	80057f8 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fc34 	bl	8005964 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff fc7b 	bl	80059f8 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8006102:	4b07      	ldr	r3, [pc, #28]	@ (8006120 <UG_Update+0x180>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <UG_Update+0x178>
     gui->device->flush();
 800610e:	4b04      	ldr	r3, [pc, #16]	@ (8006120 <UG_Update+0x180>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	4798      	blx	r3
   }
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000a88 	.word	0x20000a88

08006124 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b08f      	sub	sp, #60	@ 0x3c
 8006128:	af02      	add	r7, sp, #8
 800612a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8098 	beq.w	8006264 <_UG_WindowDrawTitle+0x140>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7a1b      	ldrb	r3, [r3, #8]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8091 	beq.w	8006264 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	89db      	ldrh	r3, [r3, #14]
 8006146:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8a1b      	ldrh	r3, [r3, #16]
 800614c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8a5b      	ldrh	r3, [r3, #18]
 8006152:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8a9b      	ldrh	r3, [r3, #20]
 8006158:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7d9b      	ldrb	r3, [r3, #22]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00f      	beq.n	8006186 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8006166:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006168:	3303      	adds	r3, #3
 800616a:	b29b      	uxth	r3, r3
 800616c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 800616e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006170:	3303      	adds	r3, #3
 8006172:	b29b      	uxth	r3, r3
 8006174:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 8006176:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006178:	3b03      	subs	r3, #3
 800617a:	b29b      	uxth	r3, r3
 800617c:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 800617e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006180:	3b03      	subs	r3, #3
 8006182:	b29b      	uxth	r3, r3
 8006184:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006186:	4b3a      	ldr	r3, [pc, #232]	@ (8006270 <_UG_WindowDrawTitle+0x14c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	429a      	cmp	r2, r3
 8006190:	d106      	bne.n	80061a0 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006196:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800619c:	83bb      	strh	r3, [r7, #28]
 800619e:	e005      	b.n	80061ac <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a4:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061aa:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80061b2:	461a      	mov	r2, r3
 80061b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80061b6:	4413      	add	r3, r2
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29b      	uxth	r3, r3
 80061be:	b21c      	sxth	r4, r3
 80061c0:	8bfb      	ldrh	r3, [r7, #30]
 80061c2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80061c6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80061ca:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4623      	mov	r3, r4
 80061d2:	f7fe fc01 	bl	80049d8 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80061e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80061e4:	3303      	adds	r3, #3
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80061ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80061ee:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80061f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061f2:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80061fa:	461a      	mov	r2, r3
 80061fc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80061fe:	4413      	add	r3, r2
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29b      	uxth	r3, r3
 8006206:	b21b      	sxth	r3, r3
 8006208:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006210:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800621a:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8006222:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 8006224:	f107 030c 	add.w	r3, r7, #12
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fc31 	bl	8005a90 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006234:	461a      	mov	r2, r3
 8006236:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006238:	4413      	add	r3, r2
 800623a:	b29b      	uxth	r3, r3
 800623c:	b219      	sxth	r1, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006244:	461a      	mov	r2, r3
 8006246:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006248:	4413      	add	r3, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	b21b      	sxth	r3, r3
 800624e:	f649 5413 	movw	r4, #40211	@ 0x9d13
 8006252:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006256:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800625a:	9400      	str	r4, [sp, #0]
 800625c:	f7fe fc12 	bl	8004a84 <UG_DrawLine>
      return UG_RESULT_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	e001      	b.n	8006268 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 8006264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006268:	4618      	mov	r0, r3
 800626a:	3734      	adds	r7, #52	@ 0x34
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}
 8006270:	20000a88 	.word	0x20000a88

08006274 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006274:	b590      	push	{r4, r7, lr}
 8006276:	b089      	sub	sp, #36	@ 0x24
 8006278:	af02      	add	r7, sp, #8
 800627a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	89db      	ldrh	r3, [r3, #14]
 8006280:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8a1b      	ldrh	r3, [r3, #16]
 8006286:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8a5b      	ldrh	r3, [r3, #18]
 800628c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8a9b      	ldrh	r3, [r3, #20]
 8006292:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7a1b      	ldrb	r3, [r3, #8]
 8006298:	f023 0320 	bic.w	r3, r3, #32
 800629c:	b2da      	uxtb	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	7a1b      	ldrb	r3, [r3, #8]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8084 	beq.w	80063b8 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7d9b      	ldrb	r3, [r3, #22]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d021      	beq.n	8006300 <_UG_WindowUpdate+0x8c>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	7a1b      	ldrb	r3, [r3, #8]
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11b      	bne.n	8006300 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80062c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80062cc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80062d0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80062d4:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80062d8:	4c43      	ldr	r4, [pc, #268]	@ (80063e8 <_UG_WindowUpdate+0x174>)
 80062da:	9400      	str	r4, [sp, #0]
 80062dc:	f7ff fd1c 	bl	8005d18 <_UG_DrawObjectFrame>
         xs+=3;
 80062e0:	8abb      	ldrh	r3, [r7, #20]
 80062e2:	3303      	adds	r3, #3
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80062e8:	8a7b      	ldrh	r3, [r7, #18]
 80062ea:	3303      	adds	r3, #3
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80062f0:	8a3b      	ldrh	r3, [r7, #16]
 80062f2:	3b03      	subs	r3, #3
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80062f8:	89fb      	ldrh	r3, [r7, #14]
 80062fa:	3b03      	subs	r3, #3
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	7d9b      	ldrb	r3, [r3, #22]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01a      	beq.n	8006342 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ff09 	bl	8006124 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006318:	461a      	mov	r2, r3
 800631a:	8a7b      	ldrh	r3, [r7, #18]
 800631c:	4413      	add	r3, r2
 800631e:	b29b      	uxth	r3, r3
 8006320:	3301      	adds	r3, #1
 8006322:	b29b      	uxth	r3, r3
 8006324:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	7a1b      	ldrb	r3, [r3, #8]
 800632a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7a1b      	ldrb	r3, [r3, #8]
 8006336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800633a:	b2da      	uxtb	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	721a      	strb	r2, [r3, #8]
            return;
 8006340:	e04e      	b.n	80063e0 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	899b      	ldrh	r3, [r3, #12]
 8006346:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800634a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800634e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006352:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	4623      	mov	r3, r4
 800635a:	f7fe fb3d 	bl	80049d8 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8006364:	2300      	movs	r3, #0
 8006366:	82fb      	strh	r3, [r7, #22]
 8006368:	e021      	b.n	80063ae <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	8afb      	ldrh	r3, [r7, #22]
 8006370:	015b      	lsls	r3, r3, #5
 8006372:	4413      	add	r3, r2
 8006374:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d112      	bne.n	80063a8 <_UG_WindowUpdate+0x134>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00c      	beq.n	80063a8 <_UG_WindowUpdate+0x134>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d006      	beq.n	80063a8 <_UG_WindowUpdate+0x134>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80063a8:	8afb      	ldrh	r3, [r7, #22]
 80063aa:	3301      	adds	r3, #1
 80063ac:	82fb      	strh	r3, [r7, #22]
 80063ae:	8afa      	ldrh	r2, [r7, #22]
 80063b0:	89bb      	ldrh	r3, [r7, #12]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d3d9      	bcc.n	800636a <_UG_WindowUpdate+0xf6>
 80063b6:	e013      	b.n	80063e0 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80063d0:	4b06      	ldr	r3, [pc, #24]	@ (80063ec <_UG_WindowUpdate+0x178>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	4623      	mov	r3, r4
 80063dc:	f7fe fafc 	bl	80049d8 <UG_FillFrame>
   }
}
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd90      	pop	{r4, r7, pc}
 80063e6:	bf00      	nop
 80063e8:	080175f8 	.word	0x080175f8
 80063ec:	20000a88 	.word	0x20000a88

080063f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80063f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006428 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80063f4:	f7fe f9f8 	bl	80047e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063f8:	480c      	ldr	r0, [pc, #48]	@ (800642c <LoopForever+0x6>)
  ldr r1, =_edata
 80063fa:	490d      	ldr	r1, [pc, #52]	@ (8006430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80063fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006434 <LoopForever+0xe>)
  movs r3, #0
 80063fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006400:	e002      	b.n	8006408 <LoopCopyDataInit>

08006402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006406:	3304      	adds	r3, #4

08006408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800640a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800640c:	d3f9      	bcc.n	8006402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800640e:	4a0a      	ldr	r2, [pc, #40]	@ (8006438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006410:	4c0a      	ldr	r4, [pc, #40]	@ (800643c <LoopForever+0x16>)
  movs r3, #0
 8006412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006414:	e001      	b.n	800641a <LoopFillZerobss>

08006416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006418:	3204      	adds	r2, #4

0800641a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800641a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800641c:	d3fb      	bcc.n	8006416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800641e:	f009 feb7 	bl	8010190 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006422:	f7fc f875 	bl	8002510 <main>

08006426 <LoopForever>:

LoopForever:
    b LoopForever
 8006426:	e7fe      	b.n	8006426 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006428:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800642c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006430:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8006434:	080179b8 	.word	0x080179b8
  ldr r2, =_sbss
 8006438:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800643c:	20000bf4 	.word	0x20000bf4

08006440 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006440:	e7fe      	b.n	8006440 <ADC1_IRQHandler>

08006442 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800644c:	2003      	movs	r0, #3
 800644e:	f001 f9dd 	bl	800780c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006452:	2000      	movs	r0, #0
 8006454:	f000 f80e 	bl	8006474 <HAL_InitTick>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	71fb      	strb	r3, [r7, #7]
 8006462:	e001      	b.n	8006468 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006464:	f7fd fae4 	bl	8003a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006468:	79fb      	ldrb	r3, [r7, #7]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006480:	4b17      	ldr	r3, [pc, #92]	@ (80064e0 <HAL_InitTick+0x6c>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d023      	beq.n	80064d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006488:	4b16      	ldr	r3, [pc, #88]	@ (80064e4 <HAL_InitTick+0x70>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <HAL_InitTick+0x6c>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006496:	fbb3 f3f1 	udiv	r3, r3, r1
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 f9e9 	bl	8007876 <HAL_SYSTICK_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10f      	bne.n	80064ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d809      	bhi.n	80064c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064b0:	2200      	movs	r2, #0
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	f001 f9b3 	bl	8007822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80064bc:	4a0a      	ldr	r2, [pc, #40]	@ (80064e8 <HAL_InitTick+0x74>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	e007      	b.n	80064d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
 80064c8:	e004      	b.n	80064d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	73fb      	strb	r3, [r7, #15]
 80064ce:	e001      	b.n	80064d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000028 	.word	0x20000028
 80064e4:	20000020 	.word	0x20000020
 80064e8:	20000024 	.word	0x20000024

080064ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80064f0:	4b06      	ldr	r3, [pc, #24]	@ (800650c <HAL_IncTick+0x20>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <HAL_IncTick+0x24>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4413      	add	r3, r2
 80064fc:	4a04      	ldr	r2, [pc, #16]	@ (8006510 <HAL_IncTick+0x24>)
 80064fe:	6013      	str	r3, [r2, #0]
}
 8006500:	bf00      	nop
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	20000028 	.word	0x20000028
 8006510:	20000aa4 	.word	0x20000aa4

08006514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return uwTick;
 8006518:	4b03      	ldr	r3, [pc, #12]	@ (8006528 <HAL_GetTick+0x14>)
 800651a:	681b      	ldr	r3, [r3, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000aa4 	.word	0x20000aa4

0800652c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006534:	f7ff ffee 	bl	8006514 <HAL_GetTick>
 8006538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d005      	beq.n	8006552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006546:	4b0a      	ldr	r3, [pc, #40]	@ (8006570 <HAL_Delay+0x44>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006552:	bf00      	nop
 8006554:	f7ff ffde 	bl	8006514 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	429a      	cmp	r2, r3
 8006562:	d8f7      	bhi.n	8006554 <HAL_Delay+0x28>
  {
  }
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000028 	.word	0x20000028

08006574 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	609a      	str	r2, [r3, #8]
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	609a      	str	r2, [r3, #8]
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3360      	adds	r3, #96	@ 0x60
 80065ee:	461a      	mov	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b08      	ldr	r3, [pc, #32]	@ (8006620 <LL_ADC_SetOffset+0x44>)
 80065fe:	4013      	ands	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	03fff000 	.word	0x03fff000

08006624 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3360      	adds	r3, #96	@ 0x60
 8006632:	461a      	mov	r2, r3
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3360      	adds	r3, #96	@ 0x60
 8006660:	461a      	mov	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	431a      	orrs	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	615a      	str	r2, [r3, #20]
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3330      	adds	r3, #48	@ 0x30
 80066bc:	461a      	mov	r2, r3
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	0a1b      	lsrs	r3, r3, #8
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	f003 030c 	and.w	r3, r3, #12
 80066c8:	4413      	add	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	211f      	movs	r1, #31
 80066d8:	fa01 f303 	lsl.w	r3, r1, r3
 80066dc:	43db      	mvns	r3, r3
 80066de:	401a      	ands	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	0e9b      	lsrs	r3, r3, #26
 80066e4:	f003 011f 	and.w	r1, r3, #31
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	fa01 f303 	lsl.w	r3, r1, r3
 80066f2:	431a      	orrs	r2, r3
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3314      	adds	r3, #20
 8006714:	461a      	mov	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	0e5b      	lsrs	r3, r3, #25
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	4413      	add	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	0d1b      	lsrs	r3, r3, #20
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2107      	movs	r1, #7
 8006732:	fa01 f303 	lsl.w	r3, r1, r3
 8006736:	43db      	mvns	r3, r3
 8006738:	401a      	ands	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	0d1b      	lsrs	r3, r3, #20
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	431a      	orrs	r2, r3
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006774:	43db      	mvns	r3, r3
 8006776:	401a      	ands	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f003 0318 	and.w	r3, r3, #24
 800677e:	4908      	ldr	r1, [pc, #32]	@ (80067a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006780:	40d9      	lsrs	r1, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	400b      	ands	r3, r1
 8006786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800678a:	431a      	orrs	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	0007ffff 	.word	0x0007ffff

080067a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80067b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6093      	str	r3, [r2, #8]
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067dc:	d101      	bne.n	80067e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006800:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006804:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800682c:	d101      	bne.n	8006832 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <LL_ADC_IsEnabled+0x18>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <LL_ADC_IsEnabled+0x1a>
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b04      	cmp	r3, #4
 8006878:	d101      	bne.n	800687e <LL_ADC_REG_IsConversionOngoing+0x18>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b08      	cmp	r3, #8
 800689e:	d101      	bne.n	80068a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e129      	b.n	8006b22 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fd f8cb 	bl	8003a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff ff67 	bl	80067c8 <LL_ADC_IsDeepPowerDownEnabled>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff ff4d 	bl	80067a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ff82 	bl	8006818 <LL_ADC_IsInternalRegulatorEnabled>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d115      	bne.n	8006946 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff ff66 	bl	80067f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006924:	4b81      	ldr	r3, [pc, #516]	@ (8006b2c <HAL_ADC_Init+0x278>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	099b      	lsrs	r3, r3, #6
 800692a:	4a81      	ldr	r2, [pc, #516]	@ (8006b30 <HAL_ADC_Init+0x27c>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	099b      	lsrs	r3, r3, #6
 8006932:	3301      	adds	r3, #1
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006938:	e002      	b.n	8006940 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b01      	subs	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f9      	bne.n	800693a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff ff64 	bl	8006818 <LL_ADC_IsInternalRegulatorEnabled>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695a:	f043 0210 	orr.w	r2, r3, #16
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006966:	f043 0201 	orr.w	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ff75 	bl	8006866 <LL_ADC_REG_IsConversionOngoing>
 800697c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	f040 80c2 	bne.w	8006b10 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80be 	bne.w	8006b10 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006998:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800699c:	f043 0202 	orr.w	r2, r3, #2
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff ff49 	bl	8006840 <LL_ADC_IsEnabled>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069b4:	485f      	ldr	r0, [pc, #380]	@ (8006b34 <HAL_ADC_Init+0x280>)
 80069b6:	f7ff ff43 	bl	8006840 <LL_ADC_IsEnabled>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4619      	mov	r1, r3
 80069c6:	485c      	ldr	r0, [pc, #368]	@ (8006b38 <HAL_ADC_Init+0x284>)
 80069c8:	f7ff fdd4 	bl	8006574 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7e5b      	ldrb	r3, [r3, #25]
 80069d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80069dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80069e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d106      	bne.n	8006a08 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	3b01      	subs	r3, #1
 8006a00:	045b      	lsls	r3, r3, #17
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	4b44      	ldr	r3, [pc, #272]	@ (8006b3c <HAL_ADC_Init+0x288>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	69b9      	ldr	r1, [r7, #24]
 8006a34:	430b      	orrs	r3, r1
 8006a36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff ff25 	bl	800688c <LL_ADC_INJ_IsConversionOngoing>
 8006a42:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d140      	bne.n	8006acc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d13d      	bne.n	8006acc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7e1b      	ldrb	r3, [r3, #24]
 8006a58:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a5a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a62:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a64:	4313      	orrs	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a72:	f023 0306 	bic.w	r3, r3, #6
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6812      	ldr	r2, [r2, #0]
 8006a7a:	69b9      	ldr	r1, [r7, #24]
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d118      	bne.n	8006abc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a94:	f023 0304 	bic.w	r3, r3, #4
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006aa0:	4311      	orrs	r1, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006aa6:	4311      	orrs	r1, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006aac:	430a      	orrs	r2, r1
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	611a      	str	r2, [r3, #16]
 8006aba:	e007      	b.n	8006acc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0201 	bic.w	r2, r2, #1
 8006aca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d10c      	bne.n	8006aee <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	f023 010f 	bic.w	r1, r3, #15
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	1e5a      	subs	r2, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	631a      	str	r2, [r3, #48]	@ 0x30
 8006aec:	e007      	b.n	8006afe <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 020f 	bic.w	r2, r2, #15
 8006afc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	f043 0201 	orr.w	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b0e:	e007      	b.n	8006b20 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b14:	f043 0210 	orr.w	r2, r3, #16
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000020 	.word	0x20000020
 8006b30:	053e2d63 	.word	0x053e2d63
 8006b34:	50040000 	.word	0x50040000
 8006b38:	50040300 	.word	0x50040300
 8006b3c:	fff0c007 	.word	0xfff0c007

08006b40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b0b6      	sub	sp, #216	@ 0xd8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_ADC_ConfigChannel+0x22>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e3d5      	b.n	800730e <HAL_ADC_ConfigChannel+0x7ce>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fe79 	bl	8006866 <LL_ADC_REG_IsConversionOngoing>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 83ba 	bne.w	80072f0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b05      	cmp	r3, #5
 8006b8a:	d824      	bhi.n	8006bd6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	3b02      	subs	r3, #2
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d81b      	bhi.n	8006bce <HAL_ADC_ConfigChannel+0x8e>
 8006b96:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <HAL_ADC_ConfigChannel+0x5c>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006bad 	.word	0x08006bad
 8006ba0:	08006bb5 	.word	0x08006bb5
 8006ba4:	08006bbd 	.word	0x08006bbd
 8006ba8:	08006bc5 	.word	0x08006bc5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006bac:	230c      	movs	r3, #12
 8006bae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006bb2:	e010      	b.n	8006bd6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006bb4:	2312      	movs	r3, #18
 8006bb6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006bba:	e00c      	b.n	8006bd6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006bbc:	2318      	movs	r3, #24
 8006bbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006bc2:	e008      	b.n	8006bd6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006bcc:	e003      	b.n	8006bd6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006bce:	2306      	movs	r3, #6
 8006bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006bd4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8006be4:	f7ff fd62 	bl	80066ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fe3a 	bl	8006866 <LL_ADC_REG_IsConversionOngoing>
 8006bf2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fe46 	bl	800688c <LL_ADC_INJ_IsConversionOngoing>
 8006c00:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f040 81bf 	bne.w	8006f8c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f040 81ba 	bne.w	8006f8c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c20:	d10f      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7ff fd69 	bl	8006704 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fd23 	bl	8006686 <LL_ADC_SetSamplingTimeCommonConfig>
 8006c40:	e00e      	b.n	8006c60 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6819      	ldr	r1, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7ff fd58 	bl	8006704 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff fd13 	bl	8006686 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695a      	ldr	r2, [r3, #20]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	08db      	lsrs	r3, r3, #3
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d00a      	beq.n	8006c98 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	6919      	ldr	r1, [r3, #16]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c92:	f7ff fca3 	bl	80065dc <LL_ADC_SetOffset>
 8006c96:	e179      	b.n	8006f8c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff fcc0 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x184>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fcb5 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	0e9b      	lsrs	r3, r3, #26
 8006cbe:	f003 021f 	and.w	r2, r3, #31
 8006cc2:	e01e      	b.n	8006d02 <HAL_ADC_ConfigChannel+0x1c2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff fcaa 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cda:	fa93 f3a3 	rbit	r3, r3
 8006cde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	e004      	b.n	8006d00 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8006cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006cfa:	fab3 f383 	clz	r3, r3
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d105      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x1da>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	0e9b      	lsrs	r3, r3, #26
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	e018      	b.n	8006d4c <HAL_ADC_ConfigChannel+0x20c>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d26:	fa93 f3a3 	rbit	r3, r3
 8006d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006d36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8006d3e:	2320      	movs	r3, #32
 8006d40:	e004      	b.n	8006d4c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8006d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006d46:	fab3 f383 	clz	r3, r3
 8006d4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d106      	bne.n	8006d5e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2200      	movs	r2, #0
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff fc79 	bl	8006650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2101      	movs	r1, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fc5d 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <HAL_ADC_ConfigChannel+0x24a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2101      	movs	r1, #1
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff fc52 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006d80:	4603      	mov	r3, r0
 8006d82:	0e9b      	lsrs	r3, r3, #26
 8006d84:	f003 021f 	and.w	r2, r3, #31
 8006d88:	e01e      	b.n	8006dc8 <HAL_ADC_ConfigChannel+0x288>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2101      	movs	r1, #1
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fc47 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006da0:	fa93 f3a3 	rbit	r3, r3
 8006da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8006db8:	2320      	movs	r3, #32
 8006dba:	e004      	b.n	8006dc6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8006dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006dc0:	fab3 f383 	clz	r3, r3
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <HAL_ADC_ConfigChannel+0x2a0>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	0e9b      	lsrs	r3, r3, #26
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	e018      	b.n	8006e12 <HAL_ADC_ConfigChannel+0x2d2>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006dec:	fa93 f3a3 	rbit	r3, r3
 8006df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8006e04:	2320      	movs	r3, #32
 8006e06:	e004      	b.n	8006e12 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8006e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e0c:	fab3 f383 	clz	r3, r3
 8006e10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d106      	bne.n	8006e24 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fc16 	bl	8006650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2102      	movs	r1, #2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fbfa 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <HAL_ADC_ConfigChannel+0x310>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2102      	movs	r1, #2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff fbef 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006e46:	4603      	mov	r3, r0
 8006e48:	0e9b      	lsrs	r3, r3, #26
 8006e4a:	f003 021f 	and.w	r2, r3, #31
 8006e4e:	e01e      	b.n	8006e8e <HAL_ADC_ConfigChannel+0x34e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2102      	movs	r1, #2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff fbe4 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e66:	fa93 f3a3 	rbit	r3, r3
 8006e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8006e7e:	2320      	movs	r3, #32
 8006e80:	e004      	b.n	8006e8c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8006e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e86:	fab3 f383 	clz	r3, r3
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <HAL_ADC_ConfigChannel+0x366>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	0e9b      	lsrs	r3, r3, #26
 8006ea0:	f003 031f 	and.w	r3, r3, #31
 8006ea4:	e014      	b.n	8006ed0 <HAL_ADC_ConfigChannel+0x390>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006eae:	fa93 f3a3 	rbit	r3, r3
 8006eb2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8006ec2:	2320      	movs	r3, #32
 8006ec4:	e004      	b.n	8006ed0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8006ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006eca:	fab3 f383 	clz	r3, r3
 8006ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d106      	bne.n	8006ee2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2102      	movs	r1, #2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff fbb7 	bl	8006650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2103      	movs	r1, #3
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff fb9b 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <HAL_ADC_ConfigChannel+0x3ce>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2103      	movs	r1, #3
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff fb90 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006f04:	4603      	mov	r3, r0
 8006f06:	0e9b      	lsrs	r3, r3, #26
 8006f08:	f003 021f 	and.w	r2, r3, #31
 8006f0c:	e017      	b.n	8006f3e <HAL_ADC_ConfigChannel+0x3fe>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2103      	movs	r1, #3
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fb85 	bl	8006624 <LL_ADC_GetOffsetChannel>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f20:	fa93 f3a3 	rbit	r3, r3
 8006f24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006f30:	2320      	movs	r3, #32
 8006f32:	e003      	b.n	8006f3c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f36:	fab3 f383 	clz	r3, r3
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <HAL_ADC_ConfigChannel+0x416>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	0e9b      	lsrs	r3, r3, #26
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	e011      	b.n	8006f7a <HAL_ADC_ConfigChannel+0x43a>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f5e:	fa93 f3a3 	rbit	r3, r3
 8006f62:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006f64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f66:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8006f6e:	2320      	movs	r3, #32
 8006f70:	e003      	b.n	8006f7a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8006f72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f74:	fab3 f383 	clz	r3, r3
 8006f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d106      	bne.n	8006f8c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	2103      	movs	r1, #3
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff fb62 	bl	8006650 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff fc55 	bl	8006840 <LL_ADC_IsEnabled>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 813f 	bne.w	800721c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6819      	ldr	r1, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7ff fbd6 	bl	800675c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4a8e      	ldr	r2, [pc, #568]	@ (80071f0 <HAL_ADC_ConfigChannel+0x6b0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	f040 8130 	bne.w	800721c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <HAL_ADC_ConfigChannel+0x4a4>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	0e9b      	lsrs	r3, r3, #26
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	2b09      	cmp	r3, #9
 8006fda:	bf94      	ite	ls
 8006fdc:	2301      	movls	r3, #1
 8006fde:	2300      	movhi	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e019      	b.n	8007018 <HAL_ADC_ConfigChannel+0x4d8>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fec:	fa93 f3a3 	rbit	r3, r3
 8006ff0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	e003      	b.n	8007008 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8007000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007002:	fab3 f383 	clz	r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	3301      	adds	r3, #1
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2b09      	cmp	r3, #9
 8007010:	bf94      	ite	ls
 8007012:	2301      	movls	r3, #1
 8007014:	2300      	movhi	r3, #0
 8007016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007018:	2b00      	cmp	r3, #0
 800701a:	d079      	beq.n	8007110 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007024:	2b00      	cmp	r3, #0
 8007026:	d107      	bne.n	8007038 <HAL_ADC_ConfigChannel+0x4f8>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	0e9b      	lsrs	r3, r3, #26
 800702e:	3301      	adds	r3, #1
 8007030:	069b      	lsls	r3, r3, #26
 8007032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007036:	e015      	b.n	8007064 <HAL_ADC_ConfigChannel+0x524>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007040:	fa93 f3a3 	rbit	r3, r3
 8007044:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8007046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007048:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800704a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8007050:	2320      	movs	r3, #32
 8007052:	e003      	b.n	800705c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8007054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007056:	fab3 f383 	clz	r3, r3
 800705a:	b2db      	uxtb	r3, r3
 800705c:	3301      	adds	r3, #1
 800705e:	069b      	lsls	r3, r3, #26
 8007060:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <HAL_ADC_ConfigChannel+0x544>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	0e9b      	lsrs	r3, r3, #26
 8007076:	3301      	adds	r3, #1
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f303 	lsl.w	r3, r1, r3
 8007082:	e017      	b.n	80070b4 <HAL_ADC_ConfigChannel+0x574>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708c:	fa93 f3a3 	rbit	r3, r3
 8007090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8007092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007094:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800709c:	2320      	movs	r3, #32
 800709e:	e003      	b.n	80070a8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80070a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070a2:	fab3 f383 	clz	r3, r3
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	3301      	adds	r3, #1
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2101      	movs	r1, #1
 80070b0:	fa01 f303 	lsl.w	r3, r1, r3
 80070b4:	ea42 0103 	orr.w	r1, r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <HAL_ADC_ConfigChannel+0x59a>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	0e9b      	lsrs	r3, r3, #26
 80070ca:	3301      	adds	r3, #1
 80070cc:	f003 021f 	and.w	r2, r3, #31
 80070d0:	4613      	mov	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4413      	add	r3, r2
 80070d6:	051b      	lsls	r3, r3, #20
 80070d8:	e018      	b.n	800710c <HAL_ADC_ConfigChannel+0x5cc>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e2:	fa93 f3a3 	rbit	r3, r3
 80070e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80070e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80070ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80070f2:	2320      	movs	r3, #32
 80070f4:	e003      	b.n	80070fe <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80070f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f8:	fab3 f383 	clz	r3, r3
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	3301      	adds	r3, #1
 8007100:	f003 021f 	and.w	r2, r3, #31
 8007104:	4613      	mov	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	4413      	add	r3, r2
 800710a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800710c:	430b      	orrs	r3, r1
 800710e:	e080      	b.n	8007212 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <HAL_ADC_ConfigChannel+0x5ec>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	0e9b      	lsrs	r3, r3, #26
 8007122:	3301      	adds	r3, #1
 8007124:	069b      	lsls	r3, r3, #26
 8007126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800712a:	e015      	b.n	8007158 <HAL_ADC_ConfigChannel+0x618>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	fa93 f3a3 	rbit	r3, r3
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8007144:	2320      	movs	r3, #32
 8007146:	e003      	b.n	8007150 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8007148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714a:	fab3 f383 	clz	r3, r3
 800714e:	b2db      	uxtb	r3, r3
 8007150:	3301      	adds	r3, #1
 8007152:	069b      	lsls	r3, r3, #26
 8007154:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <HAL_ADC_ConfigChannel+0x638>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0e9b      	lsrs	r3, r3, #26
 800716a:	3301      	adds	r3, #1
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2101      	movs	r1, #1
 8007172:	fa01 f303 	lsl.w	r3, r1, r3
 8007176:	e017      	b.n	80071a8 <HAL_ADC_ConfigChannel+0x668>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	fa93 f3a3 	rbit	r3, r3
 8007184:	61bb      	str	r3, [r7, #24]
  return result;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8007190:	2320      	movs	r3, #32
 8007192:	e003      	b.n	800719c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	fab3 f383 	clz	r3, r3
 800719a:	b2db      	uxtb	r3, r3
 800719c:	3301      	adds	r3, #1
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2101      	movs	r1, #1
 80071a4:	fa01 f303 	lsl.w	r3, r1, r3
 80071a8:	ea42 0103 	orr.w	r1, r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10d      	bne.n	80071d4 <HAL_ADC_ConfigChannel+0x694>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	0e9b      	lsrs	r3, r3, #26
 80071be:	3301      	adds	r3, #1
 80071c0:	f003 021f 	and.w	r2, r3, #31
 80071c4:	4613      	mov	r3, r2
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	4413      	add	r3, r2
 80071ca:	3b1e      	subs	r3, #30
 80071cc:	051b      	lsls	r3, r3, #20
 80071ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80071d2:	e01d      	b.n	8007210 <HAL_ADC_ConfigChannel+0x6d0>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	fa93 f3a3 	rbit	r3, r3
 80071e0:	60fb      	str	r3, [r7, #12]
  return result;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80071ec:	2320      	movs	r3, #32
 80071ee:	e005      	b.n	80071fc <HAL_ADC_ConfigChannel+0x6bc>
 80071f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	fab3 f383 	clz	r3, r3
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	3301      	adds	r3, #1
 80071fe:	f003 021f 	and.w	r2, r3, #31
 8007202:	4613      	mov	r3, r2
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	4413      	add	r3, r2
 8007208:	3b1e      	subs	r3, #30
 800720a:	051b      	lsls	r3, r3, #20
 800720c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007210:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007216:	4619      	mov	r1, r3
 8007218:	f7ff fa74 	bl	8006704 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	4b3d      	ldr	r3, [pc, #244]	@ (8007318 <HAL_ADC_ConfigChannel+0x7d8>)
 8007222:	4013      	ands	r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d06c      	beq.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007228:	483c      	ldr	r0, [pc, #240]	@ (800731c <HAL_ADC_ConfigChannel+0x7dc>)
 800722a:	f7ff f9c9 	bl	80065c0 <LL_ADC_GetCommonPathInternalCh>
 800722e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a3a      	ldr	r2, [pc, #232]	@ (8007320 <HAL_ADC_ConfigChannel+0x7e0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d127      	bne.n	800728c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800723c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d121      	bne.n	800728c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a35      	ldr	r2, [pc, #212]	@ (8007324 <HAL_ADC_ConfigChannel+0x7e4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d157      	bne.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007256:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800725a:	4619      	mov	r1, r3
 800725c:	482f      	ldr	r0, [pc, #188]	@ (800731c <HAL_ADC_ConfigChannel+0x7dc>)
 800725e:	f7ff f99c 	bl	800659a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007262:	4b31      	ldr	r3, [pc, #196]	@ (8007328 <HAL_ADC_ConfigChannel+0x7e8>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	4a30      	ldr	r2, [pc, #192]	@ (800732c <HAL_ADC_ConfigChannel+0x7ec>)
 800726a:	fba2 2303 	umull	r2, r3, r2, r3
 800726e:	099b      	lsrs	r3, r3, #6
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	4613      	mov	r3, r2
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800727c:	e002      	b.n	8007284 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3b01      	subs	r3, #1
 8007282:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f9      	bne.n	800727e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800728a:	e03a      	b.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a27      	ldr	r2, [pc, #156]	@ (8007330 <HAL_ADC_ConfigChannel+0x7f0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d113      	bne.n	80072be <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800729a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10d      	bne.n	80072be <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007324 <HAL_ADC_ConfigChannel+0x7e4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d12a      	bne.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072b4:	4619      	mov	r1, r3
 80072b6:	4819      	ldr	r0, [pc, #100]	@ (800731c <HAL_ADC_ConfigChannel+0x7dc>)
 80072b8:	f7ff f96f 	bl	800659a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072bc:	e021      	b.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007334 <HAL_ADC_ConfigChannel+0x7f4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d11c      	bne.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80072c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d116      	bne.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a12      	ldr	r2, [pc, #72]	@ (8007324 <HAL_ADC_ConfigChannel+0x7e4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d111      	bne.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072e6:	4619      	mov	r1, r3
 80072e8:	480c      	ldr	r0, [pc, #48]	@ (800731c <HAL_ADC_ConfigChannel+0x7dc>)
 80072ea:	f7ff f956 	bl	800659a <LL_ADC_SetCommonPathInternalCh>
 80072ee:	e008      	b.n	8007302 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f4:	f043 0220 	orr.w	r2, r3, #32
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800730a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800730e:	4618      	mov	r0, r3
 8007310:	37d8      	adds	r7, #216	@ 0xd8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	80080000 	.word	0x80080000
 800731c:	50040300 	.word	0x50040300
 8007320:	c7520000 	.word	0xc7520000
 8007324:	50040000 	.word	0x50040000
 8007328:	20000020 	.word	0x20000020
 800732c:	053e2d63 	.word	0x053e2d63
 8007330:	cb840000 	.word	0xcb840000
 8007334:	80000001 	.word	0x80000001

08007338 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007340:	4b05      	ldr	r3, [pc, #20]	@ (8007358 <LL_EXTI_EnableIT_0_31+0x20>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4904      	ldr	r1, [pc, #16]	@ (8007358 <LL_EXTI_EnableIT_0_31+0x20>)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4313      	orrs	r3, r2
 800734a:	600b      	str	r3, [r1, #0]
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	40010400 	.word	0x40010400

0800735c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007364:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <LL_EXTI_DisableIT_0_31+0x24>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	43db      	mvns	r3, r3
 800736c:	4904      	ldr	r1, [pc, #16]	@ (8007380 <LL_EXTI_DisableIT_0_31+0x24>)
 800736e:	4013      	ands	r3, r2
 8007370:	600b      	str	r3, [r1, #0]
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40010400 	.word	0x40010400

08007384 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800738c:	4b05      	ldr	r3, [pc, #20]	@ (80073a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	4904      	ldr	r1, [pc, #16]	@ (80073a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4313      	orrs	r3, r2
 8007396:	604b      	str	r3, [r1, #4]

}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40010400 	.word	0x40010400

080073a8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80073b0:	4b06      	ldr	r3, [pc, #24]	@ (80073cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	43db      	mvns	r3, r3
 80073b8:	4904      	ldr	r1, [pc, #16]	@ (80073cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	604b      	str	r3, [r1, #4]
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40010400 	.word	0x40010400

080073d0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80073d8:	4b05      	ldr	r3, [pc, #20]	@ (80073f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	4904      	ldr	r1, [pc, #16]	@ (80073f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	608b      	str	r3, [r1, #8]

}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40010400 	.word	0x40010400

080073f4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80073fc:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	43db      	mvns	r3, r3
 8007404:	4904      	ldr	r1, [pc, #16]	@ (8007418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007406:	4013      	ands	r3, r2
 8007408:	608b      	str	r3, [r1, #8]

}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	40010400 	.word	0x40010400

0800741c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007424:	4b05      	ldr	r3, [pc, #20]	@ (800743c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	4904      	ldr	r1, [pc, #16]	@ (800743c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4313      	orrs	r3, r2
 800742e:	60cb      	str	r3, [r1, #12]
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	40010400 	.word	0x40010400

08007440 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007448:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	43db      	mvns	r3, r3
 8007450:	4904      	ldr	r1, [pc, #16]	@ (8007464 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007452:	4013      	ands	r3, r2
 8007454:	60cb      	str	r3, [r1, #12]
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40010400 	.word	0x40010400

08007468 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007470:	4a04      	ldr	r2, [pc, #16]	@ (8007484 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6153      	str	r3, [r2, #20]
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40010400 	.word	0x40010400

08007488 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d102      	bne.n	80074a4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	77fb      	strb	r3, [r7, #31]
 80074a2:	e0d1      	b.n	8007648 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b2:	d102      	bne.n	80074ba <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e0c6      	b.n	8007648 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d115      	bne.n	80074f2 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074d4:	4b5f      	ldr	r3, [pc, #380]	@ (8007654 <HAL_COMP_Init+0x1cc>)
 80074d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007654 <HAL_COMP_Init+0x1cc>)
 80074da:	f043 0301 	orr.w	r3, r3, #1
 80074de:	6613      	str	r3, [r2, #96]	@ 0x60
 80074e0:	4b5c      	ldr	r3, [pc, #368]	@ (8007654 <HAL_COMP_Init+0x1cc>)
 80074e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	60bb      	str	r3, [r7, #8]
 80074ea:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7fc fb35 	bl	8003b5c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074fc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4b4b      	ldr	r3, [pc, #300]	@ (8007658 <HAL_COMP_Init+0x1d0>)
 800752a:	4013      	ands	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6812      	ldr	r2, [r2, #0]
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	430b      	orrs	r3, r1
 8007534:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800753e:	d106      	bne.n	800754e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007540:	4b46      	ldr	r3, [pc, #280]	@ (800765c <HAL_COMP_Init+0x1d4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a45      	ldr	r2, [pc, #276]	@ (800765c <HAL_COMP_Init+0x1d4>)
 8007546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	e005      	b.n	800755a <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800754e:	4b43      	ldr	r3, [pc, #268]	@ (800765c <HAL_COMP_Init+0x1d4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a42      	ldr	r2, [pc, #264]	@ (800765c <HAL_COMP_Init+0x1d4>)
 8007554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007558:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d016      	beq.n	8007596 <HAL_COMP_Init+0x10e>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d113      	bne.n	8007596 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800756e:	4b3c      	ldr	r3, [pc, #240]	@ (8007660 <HAL_COMP_Init+0x1d8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	099b      	lsrs	r3, r3, #6
 8007574:	4a3b      	ldr	r2, [pc, #236]	@ (8007664 <HAL_COMP_Init+0x1dc>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	099b      	lsrs	r3, r3, #6
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007588:	e002      	b.n	8007590 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3b01      	subs	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f9      	bne.n	800758a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a33      	ldr	r2, [pc, #204]	@ (8007668 <HAL_COMP_Init+0x1e0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d102      	bne.n	80075a6 <HAL_COMP_Init+0x11e>
 80075a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80075a4:	e001      	b.n	80075aa <HAL_COMP_Init+0x122>
 80075a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80075aa:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d037      	beq.n	8007628 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80075c4:	6938      	ldr	r0, [r7, #16]
 80075c6:	f7ff ff03 	bl	80073d0 <LL_EXTI_EnableRisingTrig_0_31>
 80075ca:	e002      	b.n	80075d2 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80075cc:	6938      	ldr	r0, [r7, #16]
 80075ce:	f7ff ff11 	bl	80073f4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80075de:	6938      	ldr	r0, [r7, #16]
 80075e0:	f7ff ff1c 	bl	800741c <LL_EXTI_EnableFallingTrig_0_31>
 80075e4:	e002      	b.n	80075ec <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80075e6:	6938      	ldr	r0, [r7, #16]
 80075e8:	f7ff ff2a 	bl	8007440 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80075ec:	6938      	ldr	r0, [r7, #16]
 80075ee:	f7ff ff3b 	bl	8007468 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80075fe:	6938      	ldr	r0, [r7, #16]
 8007600:	f7ff fec0 	bl	8007384 <LL_EXTI_EnableEvent_0_31>
 8007604:	e002      	b.n	800760c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007606:	6938      	ldr	r0, [r7, #16]
 8007608:	f7ff fece 	bl	80073a8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007618:	6938      	ldr	r0, [r7, #16]
 800761a:	f7ff fe8d 	bl	8007338 <LL_EXTI_EnableIT_0_31>
 800761e:	e009      	b.n	8007634 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007620:	6938      	ldr	r0, [r7, #16]
 8007622:	f7ff fe9b 	bl	800735c <LL_EXTI_DisableIT_0_31>
 8007626:	e005      	b.n	8007634 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007628:	6938      	ldr	r0, [r7, #16]
 800762a:	f7ff febd 	bl	80073a8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800762e:	6938      	ldr	r0, [r7, #16]
 8007630:	f7ff fe94 	bl	800735c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8007648:	7ffb      	ldrb	r3, [r7, #31]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	40021000 	.word	0x40021000
 8007658:	ff207d03 	.word	0xff207d03
 800765c:	40010204 	.word	0x40010204
 8007660:	20000020 	.word	0x20000020
 8007664:	053e2d63 	.word	0x053e2d63
 8007668:	40010200 	.word	0x40010200

0800766c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800767c:	4b0c      	ldr	r3, [pc, #48]	@ (80076b0 <__NVIC_SetPriorityGrouping+0x44>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007688:	4013      	ands	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800769c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800769e:	4a04      	ldr	r2, [pc, #16]	@ (80076b0 <__NVIC_SetPriorityGrouping+0x44>)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	60d3      	str	r3, [r2, #12]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	e000ed00 	.word	0xe000ed00

080076b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076b8:	4b04      	ldr	r3, [pc, #16]	@ (80076cc <__NVIC_GetPriorityGrouping+0x18>)
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	0a1b      	lsrs	r3, r3, #8
 80076be:	f003 0307 	and.w	r3, r3, #7
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	e000ed00 	.word	0xe000ed00

080076d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	db0b      	blt.n	80076fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	f003 021f 	and.w	r2, r3, #31
 80076e8:	4907      	ldr	r1, [pc, #28]	@ (8007708 <__NVIC_EnableIRQ+0x38>)
 80076ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	2001      	movs	r0, #1
 80076f2:	fa00 f202 	lsl.w	r2, r0, r2
 80076f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	e000e100 	.word	0xe000e100

0800770c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800771c:	2b00      	cmp	r3, #0
 800771e:	db0a      	blt.n	8007736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	b2da      	uxtb	r2, r3
 8007724:	490c      	ldr	r1, [pc, #48]	@ (8007758 <__NVIC_SetPriority+0x4c>)
 8007726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800772a:	0112      	lsls	r2, r2, #4
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	440b      	add	r3, r1
 8007730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007734:	e00a      	b.n	800774c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4908      	ldr	r1, [pc, #32]	@ (800775c <__NVIC_SetPriority+0x50>)
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	3b04      	subs	r3, #4
 8007744:	0112      	lsls	r2, r2, #4
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	440b      	add	r3, r1
 800774a:	761a      	strb	r2, [r3, #24]
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	e000e100 	.word	0xe000e100
 800775c:	e000ed00 	.word	0xe000ed00

08007760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007760:	b480      	push	{r7}
 8007762:	b089      	sub	sp, #36	@ 0x24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f1c3 0307 	rsb	r3, r3, #7
 800777a:	2b04      	cmp	r3, #4
 800777c:	bf28      	it	cs
 800777e:	2304      	movcs	r3, #4
 8007780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	3304      	adds	r3, #4
 8007786:	2b06      	cmp	r3, #6
 8007788:	d902      	bls.n	8007790 <NVIC_EncodePriority+0x30>
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	3b03      	subs	r3, #3
 800778e:	e000      	b.n	8007792 <NVIC_EncodePriority+0x32>
 8007790:	2300      	movs	r3, #0
 8007792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	43da      	mvns	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	401a      	ands	r2, r3
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077a8:	f04f 31ff 	mov.w	r1, #4294967295
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	fa01 f303 	lsl.w	r3, r1, r3
 80077b2:	43d9      	mvns	r1, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077b8:	4313      	orrs	r3, r2
         );
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3724      	adds	r7, #36	@ 0x24
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077d8:	d301      	bcc.n	80077de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077da:	2301      	movs	r3, #1
 80077dc:	e00f      	b.n	80077fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077de:	4a0a      	ldr	r2, [pc, #40]	@ (8007808 <SysTick_Config+0x40>)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077e6:	210f      	movs	r1, #15
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	f7ff ff8e 	bl	800770c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077f0:	4b05      	ldr	r3, [pc, #20]	@ (8007808 <SysTick_Config+0x40>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077f6:	4b04      	ldr	r3, [pc, #16]	@ (8007808 <SysTick_Config+0x40>)
 80077f8:	2207      	movs	r2, #7
 80077fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	e000e010 	.word	0xe000e010

0800780c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff ff29 	bl	800766c <__NVIC_SetPriorityGrouping>
}
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	4603      	mov	r3, r0
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
 800782e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007830:	2300      	movs	r3, #0
 8007832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007834:	f7ff ff3e 	bl	80076b4 <__NVIC_GetPriorityGrouping>
 8007838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	6978      	ldr	r0, [r7, #20]
 8007840:	f7ff ff8e 	bl	8007760 <NVIC_EncodePriority>
 8007844:	4602      	mov	r2, r0
 8007846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800784a:	4611      	mov	r1, r2
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff ff5d 	bl	800770c <__NVIC_SetPriority>
}
 8007852:	bf00      	nop
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	4603      	mov	r3, r0
 8007862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff ff31 	bl	80076d0 <__NVIC_EnableIRQ>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff ffa2 	bl	80077c8 <SysTick_Config>
 8007884:	4603      	mov	r3, r0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_DMA_Start_IT+0x20>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e066      	b.n	800797c <HAL_DMA_Start_IT+0xee>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d155      	bne.n	800796e <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f84c 	bl	8007984 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 020e 	orr.w	r2, r2, #14
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	e00f      	b.n	8007926 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0204 	bic.w	r2, r2, #4
 8007914:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 020a 	orr.w	r2, r2, #10
 8007924:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800793e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007942:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800795a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	e005      	b.n	800797a <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007976:	2302      	movs	r3, #2
 8007978:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800799a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80079ac:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b2:	f003 021c 	and.w	r2, r3, #28
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	2101      	movs	r1, #1
 80079bc:	fa01 f202 	lsl.w	r2, r1, r2
 80079c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b10      	cmp	r3, #16
 80079d0:	d108      	bne.n	80079e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80079e2:	e007      	b.n	80079f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	60da      	str	r2, [r3, #12]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a0e:	e166      	b.n	8007cde <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	2101      	movs	r1, #1
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8158 	beq.w	8007cd8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d005      	beq.n	8007a40 <HAL_GPIO_Init+0x40>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f003 0303 	and.w	r3, r3, #3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d130      	bne.n	8007aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a50:	43db      	mvns	r3, r3
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4013      	ands	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a76:	2201      	movs	r2, #1
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	43db      	mvns	r3, r3
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4013      	ands	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	091b      	lsrs	r3, r3, #4
 8007a8c:	f003 0201 	and.w	r2, r3, #1
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	fa02 f303 	lsl.w	r3, r2, r3
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d017      	beq.n	8007ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	2203      	movs	r2, #3
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d123      	bne.n	8007b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	08da      	lsrs	r2, r3, #3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3208      	adds	r2, #8
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	220f      	movs	r2, #15
 8007b02:	fa02 f303 	lsl.w	r3, r2, r3
 8007b06:	43db      	mvns	r3, r3
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	691a      	ldr	r2, [r3, #16]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	08da      	lsrs	r2, r3, #3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3208      	adds	r2, #8
 8007b2c:	6939      	ldr	r1, [r7, #16]
 8007b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b42:	43db      	mvns	r3, r3
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	4013      	ands	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f003 0203 	and.w	r2, r3, #3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 80b2 	beq.w	8007cd8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b74:	4b61      	ldr	r3, [pc, #388]	@ (8007cfc <HAL_GPIO_Init+0x2fc>)
 8007b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b78:	4a60      	ldr	r2, [pc, #384]	@ (8007cfc <HAL_GPIO_Init+0x2fc>)
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8007b80:	4b5e      	ldr	r3, [pc, #376]	@ (8007cfc <HAL_GPIO_Init+0x2fc>)
 8007b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	60bb      	str	r3, [r7, #8]
 8007b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007b8c:	4a5c      	ldr	r2, [pc, #368]	@ (8007d00 <HAL_GPIO_Init+0x300>)
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	089b      	lsrs	r3, r3, #2
 8007b92:	3302      	adds	r3, #2
 8007b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f003 0303 	and.w	r3, r3, #3
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	220f      	movs	r2, #15
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4013      	ands	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007bb6:	d02b      	beq.n	8007c10 <HAL_GPIO_Init+0x210>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a52      	ldr	r2, [pc, #328]	@ (8007d04 <HAL_GPIO_Init+0x304>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d025      	beq.n	8007c0c <HAL_GPIO_Init+0x20c>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a51      	ldr	r2, [pc, #324]	@ (8007d08 <HAL_GPIO_Init+0x308>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d01f      	beq.n	8007c08 <HAL_GPIO_Init+0x208>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a50      	ldr	r2, [pc, #320]	@ (8007d0c <HAL_GPIO_Init+0x30c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d019      	beq.n	8007c04 <HAL_GPIO_Init+0x204>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a4f      	ldr	r2, [pc, #316]	@ (8007d10 <HAL_GPIO_Init+0x310>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d013      	beq.n	8007c00 <HAL_GPIO_Init+0x200>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a4e      	ldr	r2, [pc, #312]	@ (8007d14 <HAL_GPIO_Init+0x314>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00d      	beq.n	8007bfc <HAL_GPIO_Init+0x1fc>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a4d      	ldr	r2, [pc, #308]	@ (8007d18 <HAL_GPIO_Init+0x318>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d007      	beq.n	8007bf8 <HAL_GPIO_Init+0x1f8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a4c      	ldr	r2, [pc, #304]	@ (8007d1c <HAL_GPIO_Init+0x31c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d101      	bne.n	8007bf4 <HAL_GPIO_Init+0x1f4>
 8007bf0:	2307      	movs	r3, #7
 8007bf2:	e00e      	b.n	8007c12 <HAL_GPIO_Init+0x212>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	e00c      	b.n	8007c12 <HAL_GPIO_Init+0x212>
 8007bf8:	2306      	movs	r3, #6
 8007bfa:	e00a      	b.n	8007c12 <HAL_GPIO_Init+0x212>
 8007bfc:	2305      	movs	r3, #5
 8007bfe:	e008      	b.n	8007c12 <HAL_GPIO_Init+0x212>
 8007c00:	2304      	movs	r3, #4
 8007c02:	e006      	b.n	8007c12 <HAL_GPIO_Init+0x212>
 8007c04:	2303      	movs	r3, #3
 8007c06:	e004      	b.n	8007c12 <HAL_GPIO_Init+0x212>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e002      	b.n	8007c12 <HAL_GPIO_Init+0x212>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <HAL_GPIO_Init+0x212>
 8007c10:	2300      	movs	r3, #0
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	f002 0203 	and.w	r2, r2, #3
 8007c18:	0092      	lsls	r2, r2, #2
 8007c1a:	4093      	lsls	r3, r2
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007c22:	4937      	ldr	r1, [pc, #220]	@ (8007d00 <HAL_GPIO_Init+0x300>)
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	089b      	lsrs	r3, r3, #2
 8007c28:	3302      	adds	r3, #2
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c30:	4b3b      	ldr	r3, [pc, #236]	@ (8007d20 <HAL_GPIO_Init+0x320>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007c54:	4a32      	ldr	r2, [pc, #200]	@ (8007d20 <HAL_GPIO_Init+0x320>)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007c5a:	4b31      	ldr	r3, [pc, #196]	@ (8007d20 <HAL_GPIO_Init+0x320>)
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	43db      	mvns	r3, r3
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4013      	ands	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c7e:	4a28      	ldr	r2, [pc, #160]	@ (8007d20 <HAL_GPIO_Init+0x320>)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007c84:	4b26      	ldr	r3, [pc, #152]	@ (8007d20 <HAL_GPIO_Init+0x320>)
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4013      	ands	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d20 <HAL_GPIO_Init+0x320>)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007cae:	4b1c      	ldr	r3, [pc, #112]	@ (8007d20 <HAL_GPIO_Init+0x320>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007cd2:	4a13      	ldr	r2, [pc, #76]	@ (8007d20 <HAL_GPIO_Init+0x320>)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f ae91 	bne.w	8007a10 <HAL_GPIO_Init+0x10>
  }
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	40021000 	.word	0x40021000
 8007d00:	40010000 	.word	0x40010000
 8007d04:	48000400 	.word	0x48000400
 8007d08:	48000800 	.word	0x48000800
 8007d0c:	48000c00 	.word	0x48000c00
 8007d10:	48001000 	.word	0x48001000
 8007d14:	48001400 	.word	0x48001400
 8007d18:	48001800 	.word	0x48001800
 8007d1c:	48001c00 	.word	0x48001c00
 8007d20:	40010400 	.word	0x40010400

08007d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691a      	ldr	r2, [r3, #16]
 8007d34:	887b      	ldrh	r3, [r7, #2]
 8007d36:	4013      	ands	r3, r2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]
 8007d40:	e001      	b.n	8007d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	807b      	strh	r3, [r7, #2]
 8007d60:	4613      	mov	r3, r2
 8007d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d64:	787b      	ldrb	r3, [r7, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d6a:	887a      	ldrh	r2, [r7, #2]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007d70:	e002      	b.n	8007d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007d72:	887a      	ldrh	r2, [r7, #2]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007d8e:	4b08      	ldr	r3, [pc, #32]	@ (8007db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d90:	695a      	ldr	r2, [r3, #20]
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	4013      	ands	r3, r2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d006      	beq.n	8007da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d9a:	4a05      	ldr	r2, [pc, #20]	@ (8007db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007da0:	88fb      	ldrh	r3, [r7, #6]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f806 	bl	8007db4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	40010400 	.word	0x40010400

08007db4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e08d      	b.n	8007ef8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fb ff07 	bl	8003c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2224      	movs	r2, #36	@ 0x24
 8007dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007e1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d107      	bne.n	8007e44 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e40:	609a      	str	r2, [r3, #8]
 8007e42:	e006      	b.n	8007e52 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007e50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d108      	bne.n	8007e6c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	e007      	b.n	8007e7c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6812      	ldr	r2, [r2, #0]
 8007e86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e8e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69d9      	ldr	r1, [r3, #28]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	817b      	strh	r3, [r7, #10]
 8007f10:	4613      	mov	r3, r2
 8007f12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	f040 80fd 	bne.w	800811c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_I2C_Master_Transmit+0x30>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e0f6      	b.n	800811e <HAL_I2C_Master_Transmit+0x21e>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f38:	f7fe faec 	bl	8006514 <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	2319      	movs	r3, #25
 8007f44:	2201      	movs	r2, #1
 8007f46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fa0a 	bl	8008364 <I2C_WaitOnFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e0e1      	b.n	800811e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2221      	movs	r2, #33	@ 0x21
 8007f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2210      	movs	r2, #16
 8007f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	893a      	ldrh	r2, [r7, #8]
 8007f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2bff      	cmp	r3, #255	@ 0xff
 8007f8a:	d906      	bls.n	8007f9a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	22ff      	movs	r2, #255	@ 0xff
 8007f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007f92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	e007      	b.n	8007faa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007fa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007fa8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d024      	beq.n	8007ffc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	781a      	ldrb	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	3301      	adds	r3, #1
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	8979      	ldrh	r1, [r7, #10]
 8007fee:	4b4e      	ldr	r3, [pc, #312]	@ (8008128 <HAL_I2C_Master_Transmit+0x228>)
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fbf1 	bl	80087dc <I2C_TransferConfig>
 8007ffa:	e066      	b.n	80080ca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008000:	b2da      	uxtb	r2, r3
 8008002:	8979      	ldrh	r1, [r7, #10]
 8008004:	4b48      	ldr	r3, [pc, #288]	@ (8008128 <HAL_I2C_Master_Transmit+0x228>)
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fbe6 	bl	80087dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008010:	e05b      	b.n	80080ca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	6a39      	ldr	r1, [r7, #32]
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 f9f3 	bl	8008402 <I2C_WaitOnTXISFlagUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e07b      	b.n	800811e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800804e:	3b01      	subs	r3, #1
 8008050:	b29a      	uxth	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d034      	beq.n	80080ca <HAL_I2C_Master_Transmit+0x1ca>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008064:	2b00      	cmp	r3, #0
 8008066:	d130      	bne.n	80080ca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	2200      	movs	r2, #0
 8008070:	2180      	movs	r1, #128	@ 0x80
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 f976 	bl	8008364 <I2C_WaitOnFlagUntilTimeout>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e04d      	b.n	800811e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008086:	b29b      	uxth	r3, r3
 8008088:	2bff      	cmp	r3, #255	@ 0xff
 800808a:	d90e      	bls.n	80080aa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	22ff      	movs	r2, #255	@ 0xff
 8008090:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008096:	b2da      	uxtb	r2, r3
 8008098:	8979      	ldrh	r1, [r7, #10]
 800809a:	2300      	movs	r3, #0
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 fb9a 	bl	80087dc <I2C_TransferConfig>
 80080a8:	e00f      	b.n	80080ca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	8979      	ldrh	r1, [r7, #10]
 80080bc:	2300      	movs	r3, #0
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fb89 	bl	80087dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d19e      	bne.n	8008012 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	6a39      	ldr	r1, [r7, #32]
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f9d9 	bl	8008490 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e01a      	b.n	800811e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2220      	movs	r2, #32
 80080ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6859      	ldr	r1, [r3, #4]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b0c      	ldr	r3, [pc, #48]	@ (800812c <HAL_I2C_Master_Transmit+0x22c>)
 80080fc:	400b      	ands	r3, r1
 80080fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e000      	b.n	800811e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800811c:	2302      	movs	r3, #2
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	80002000 	.word	0x80002000
 800812c:	fe00e800 	.word	0xfe00e800

08008130 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	607a      	str	r2, [r7, #4]
 800813a:	461a      	mov	r2, r3
 800813c:	460b      	mov	r3, r1
 800813e:	817b      	strh	r3, [r7, #10]
 8008140:	4613      	mov	r3, r2
 8008142:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b20      	cmp	r3, #32
 800814e:	f040 80db 	bne.w	8008308 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008158:	2b01      	cmp	r3, #1
 800815a:	d101      	bne.n	8008160 <HAL_I2C_Master_Receive+0x30>
 800815c:	2302      	movs	r3, #2
 800815e:	e0d4      	b.n	800830a <HAL_I2C_Master_Receive+0x1da>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008168:	f7fe f9d4 	bl	8006514 <HAL_GetTick>
 800816c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	2319      	movs	r3, #25
 8008174:	2201      	movs	r2, #1
 8008176:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 f8f2 	bl	8008364 <I2C_WaitOnFlagUntilTimeout>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e0bf      	b.n	800830a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2222      	movs	r2, #34	@ 0x22
 800818e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2210      	movs	r2, #16
 8008196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	893a      	ldrh	r2, [r7, #8]
 80081aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	2bff      	cmp	r3, #255	@ 0xff
 80081ba:	d90e      	bls.n	80081da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	22ff      	movs	r2, #255	@ 0xff
 80081c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	8979      	ldrh	r1, [r7, #10]
 80081ca:	4b52      	ldr	r3, [pc, #328]	@ (8008314 <HAL_I2C_Master_Receive+0x1e4>)
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fb02 	bl	80087dc <I2C_TransferConfig>
 80081d8:	e06d      	b.n	80082b6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	8979      	ldrh	r1, [r7, #10]
 80081ec:	4b49      	ldr	r3, [pc, #292]	@ (8008314 <HAL_I2C_Master_Receive+0x1e4>)
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 faf1 	bl	80087dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80081fa:	e05c      	b.n	80082b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	6a39      	ldr	r1, [r7, #32]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f989 	bl	8008518 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e07c      	b.n	800830a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800822c:	3b01      	subs	r3, #1
 800822e:	b29a      	uxth	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008246:	b29b      	uxth	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d034      	beq.n	80082b6 <HAL_I2C_Master_Receive+0x186>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008250:	2b00      	cmp	r3, #0
 8008252:	d130      	bne.n	80082b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	2200      	movs	r2, #0
 800825c:	2180      	movs	r1, #128	@ 0x80
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 f880 	bl	8008364 <I2C_WaitOnFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e04d      	b.n	800830a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008272:	b29b      	uxth	r3, r3
 8008274:	2bff      	cmp	r3, #255	@ 0xff
 8008276:	d90e      	bls.n	8008296 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	22ff      	movs	r2, #255	@ 0xff
 800827c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008282:	b2da      	uxtb	r2, r3
 8008284:	8979      	ldrh	r1, [r7, #10]
 8008286:	2300      	movs	r3, #0
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 faa4 	bl	80087dc <I2C_TransferConfig>
 8008294:	e00f      	b.n	80082b6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	8979      	ldrh	r1, [r7, #10]
 80082a8:	2300      	movs	r3, #0
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 fa93 	bl	80087dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d19d      	bne.n	80081fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	6a39      	ldr	r1, [r7, #32]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 f8e3 	bl	8008490 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e01a      	b.n	800830a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2220      	movs	r2, #32
 80082da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008318 <HAL_I2C_Master_Receive+0x1e8>)
 80082e8:	400b      	ands	r3, r1
 80082ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	e000      	b.n	800830a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008308:	2302      	movs	r3, #2
  }
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	80002400 	.word	0x80002400
 8008318:	fe00e800 	.word	0xfe00e800

0800831c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b02      	cmp	r3, #2
 8008330:	d103      	bne.n	800833a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b01      	cmp	r3, #1
 8008346:	d007      	beq.n	8008358 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	619a      	str	r2, [r3, #24]
  }
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008374:	e031      	b.n	80083da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d02d      	beq.n	80083da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837e:	f7fe f8c9 	bl	8006514 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d302      	bcc.n	8008394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d122      	bne.n	80083da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4013      	ands	r3, r2
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	bf0c      	ite	eq
 80083a4:	2301      	moveq	r3, #1
 80083a6:	2300      	movne	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	461a      	mov	r2, r3
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d113      	bne.n	80083da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b6:	f043 0220 	orr.w	r2, r3, #32
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e00f      	b.n	80083fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4013      	ands	r3, r2
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	bf0c      	ite	eq
 80083ea:	2301      	moveq	r3, #1
 80083ec:	2300      	movne	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	461a      	mov	r2, r3
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d0be      	beq.n	8008376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800840e:	e033      	b.n	8008478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f901 	bl	800861c <I2C_IsErrorOccurred>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e031      	b.n	8008488 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d025      	beq.n	8008478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800842c:	f7fe f872 	bl	8006514 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	d302      	bcc.n	8008442 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d11a      	bne.n	8008478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b02      	cmp	r3, #2
 800844e:	d013      	beq.n	8008478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008454:	f043 0220 	orr.w	r2, r3, #32
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e007      	b.n	8008488 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d1c4      	bne.n	8008410 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800849c:	e02f      	b.n	80084fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f8ba 	bl	800861c <I2C_IsErrorOccurred>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e02d      	b.n	800850e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b2:	f7fe f82f 	bl	8006514 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d302      	bcc.n	80084c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d11a      	bne.n	80084fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d013      	beq.n	80084fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084da:	f043 0220 	orr.w	r2, r3, #32
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e007      	b.n	800850e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b20      	cmp	r3, #32
 800850a:	d1c8      	bne.n	800849e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008524:	e06b      	b.n	80085fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f876 	bl	800861c <I2C_IsErrorOccurred>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e069      	b.n	800860e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b20      	cmp	r3, #32
 8008546:	d138      	bne.n	80085ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	f003 0304 	and.w	r3, r3, #4
 8008552:	2b04      	cmp	r3, #4
 8008554:	d105      	bne.n	8008562 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	e055      	b.n	800860e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	2b10      	cmp	r3, #16
 800856e:	d107      	bne.n	8008580 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2210      	movs	r2, #16
 8008576:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2204      	movs	r2, #4
 800857c:	645a      	str	r2, [r3, #68]	@ 0x44
 800857e:	e002      	b.n	8008586 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2220      	movs	r2, #32
 800858c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6859      	ldr	r1, [r3, #4]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	4b1f      	ldr	r3, [pc, #124]	@ (8008618 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800859a:	400b      	ands	r3, r1
 800859c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e029      	b.n	800860e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ba:	f7fd ffab 	bl	8006514 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d302      	bcc.n	80085d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d116      	bne.n	80085fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d00f      	beq.n	80085fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e2:	f043 0220 	orr.w	r2, r3, #32
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2220      	movs	r2, #32
 80085ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e007      	b.n	800860e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b04      	cmp	r3, #4
 800860a:	d18c      	bne.n	8008526 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	fe00e800 	.word	0xfe00e800

0800861c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	@ 0x28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d068      	beq.n	800871a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2210      	movs	r2, #16
 800864e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008650:	e049      	b.n	80086e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d045      	beq.n	80086e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800865a:	f7fd ff5b 	bl	8006514 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	429a      	cmp	r2, r3
 8008668:	d302      	bcc.n	8008670 <I2C_IsErrorOccurred+0x54>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d13a      	bne.n	80086e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800867a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008682:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800868e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008692:	d121      	bne.n	80086d8 <I2C_IsErrorOccurred+0xbc>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800869a:	d01d      	beq.n	80086d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800869c:	7cfb      	ldrb	r3, [r7, #19]
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d01a      	beq.n	80086d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80086b2:	f7fd ff2f 	bl	8006514 <HAL_GetTick>
 80086b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086b8:	e00e      	b.n	80086d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80086ba:	f7fd ff2b 	bl	8006514 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b19      	cmp	r3, #25
 80086c6:	d907      	bls.n	80086d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	f043 0320 	orr.w	r3, r3, #32
 80086ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80086d6:	e006      	b.n	80086e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	d1e9      	bne.n	80086ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d003      	beq.n	80086fc <I2C_IsErrorOccurred+0xe0>
 80086f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0aa      	beq.n	8008652 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80086fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008700:	2b00      	cmp	r3, #0
 8008702:	d103      	bne.n	800870c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2220      	movs	r2, #32
 800870a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	f043 0304 	orr.w	r3, r3, #4
 8008712:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800873c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	f043 0308 	orr.w	r3, r3, #8
 8008754:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800875e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00b      	beq.n	8008788 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	f043 0302 	orr.w	r3, r3, #2
 8008776:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01c      	beq.n	80087ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7ff fdc3 	bl	800831c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6859      	ldr	r1, [r3, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <I2C_IsErrorOccurred+0x1bc>)
 80087a2:	400b      	ands	r3, r1
 80087a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	431a      	orrs	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80087ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3728      	adds	r7, #40	@ 0x28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	fe00e800 	.word	0xfe00e800

080087dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	607b      	str	r3, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	817b      	strh	r3, [r7, #10]
 80087ea:	4613      	mov	r3, r2
 80087ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087ee:	897b      	ldrh	r3, [r7, #10]
 80087f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087f4:	7a7b      	ldrb	r3, [r7, #9]
 80087f6:	041b      	lsls	r3, r3, #16
 80087f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	4313      	orrs	r3, r2
 8008806:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800880a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	0d5b      	lsrs	r3, r3, #21
 8008816:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800881a:	4b08      	ldr	r3, [pc, #32]	@ (800883c <I2C_TransferConfig+0x60>)
 800881c:	430b      	orrs	r3, r1
 800881e:	43db      	mvns	r3, r3
 8008820:	ea02 0103 	and.w	r1, r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	430a      	orrs	r2, r1
 800882c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800882e:	bf00      	nop
 8008830:	371c      	adds	r7, #28
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	03ff63ff 	.word	0x03ff63ff

08008840 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b20      	cmp	r3, #32
 8008854:	d138      	bne.n	80088c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008860:	2302      	movs	r3, #2
 8008862:	e032      	b.n	80088ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2224      	movs	r2, #36	@ 0x24
 8008870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 0201 	bic.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008892:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6819      	ldr	r1, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0201 	orr.w	r2, r2, #1
 80088b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	e000      	b.n	80088ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80088c8:	2302      	movs	r3, #2
  }
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	d139      	bne.n	8008960 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80088f6:	2302      	movs	r3, #2
 80088f8:	e033      	b.n	8008962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2224      	movs	r2, #36	@ 0x24
 8008906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0201 	bic.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008928:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	e000      	b.n	8008962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008960:	2302      	movs	r3, #2
  }
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
	...

08008970 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008974:	4b05      	ldr	r3, [pc, #20]	@ (800898c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a04      	ldr	r2, [pc, #16]	@ (800898c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800897a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800897e:	6013      	str	r3, [r2, #0]
}
 8008980:	bf00      	nop
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	40007000 	.word	0x40007000

08008990 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008990:	b480      	push	{r7}
 8008992:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008994:	4b0d      	ldr	r3, [pc, #52]	@ (80089cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800899c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a0:	d102      	bne.n	80089a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80089a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089a6:	e00b      	b.n	80089c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80089a8:	4b08      	ldr	r3, [pc, #32]	@ (80089cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80089aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b6:	d102      	bne.n	80089be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80089b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089bc:	e000      	b.n	80089c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80089be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40007000 	.word	0x40007000

080089d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d141      	bne.n	8008a62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80089de:	4b4b      	ldr	r3, [pc, #300]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ea:	d131      	bne.n	8008a50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089ec:	4b47      	ldr	r3, [pc, #284]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f2:	4a46      	ldr	r2, [pc, #280]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80089fc:	4b43      	ldr	r3, [pc, #268]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a04:	4a41      	ldr	r2, [pc, #260]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008a0c:	4b40      	ldr	r3, [pc, #256]	@ (8008b10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2232      	movs	r2, #50	@ 0x32
 8008a12:	fb02 f303 	mul.w	r3, r2, r3
 8008a16:	4a3f      	ldr	r2, [pc, #252]	@ (8008b14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a18:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1c:	0c9b      	lsrs	r3, r3, #18
 8008a1e:	3301      	adds	r3, #1
 8008a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a22:	e002      	b.n	8008a2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a2a:	4b38      	ldr	r3, [pc, #224]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a36:	d102      	bne.n	8008a3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f2      	bne.n	8008a24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a3e:	4b33      	ldr	r3, [pc, #204]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a4a:	d158      	bne.n	8008afe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e057      	b.n	8008b00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a50:	4b2e      	ldr	r3, [pc, #184]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a56:	4a2d      	ldr	r2, [pc, #180]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008a60:	e04d      	b.n	8008afe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a68:	d141      	bne.n	8008aee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a6a:	4b28      	ldr	r3, [pc, #160]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a76:	d131      	bne.n	8008adc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a78:	4b24      	ldr	r3, [pc, #144]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a7e:	4a23      	ldr	r2, [pc, #140]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a88:	4b20      	ldr	r3, [pc, #128]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a90:	4a1e      	ldr	r2, [pc, #120]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008a98:	4b1d      	ldr	r3, [pc, #116]	@ (8008b10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2232      	movs	r2, #50	@ 0x32
 8008a9e:	fb02 f303 	mul.w	r3, r2, r3
 8008aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8008b14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	0c9b      	lsrs	r3, r3, #18
 8008aaa:	3301      	adds	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008aae:	e002      	b.n	8008ab6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ab6:	4b15      	ldr	r3, [pc, #84]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ac2:	d102      	bne.n	8008aca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1f2      	bne.n	8008ab0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008aca:	4b10      	ldr	r3, [pc, #64]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ad6:	d112      	bne.n	8008afe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e011      	b.n	8008b00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008adc:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ae8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008aec:	e007      	b.n	8008afe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008aee:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008af6:	4a05      	ldr	r2, [pc, #20]	@ (8008b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008af8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008afc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	40007000 	.word	0x40007000
 8008b10:	20000020 	.word	0x20000020
 8008b14:	431bde83 	.word	0x431bde83

08008b18 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008b1c:	4b05      	ldr	r3, [pc, #20]	@ (8008b34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	4a04      	ldr	r2, [pc, #16]	@ (8008b34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b26:	6053      	str	r3, [r2, #4]
}
 8008b28:	bf00      	nop
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40007000 	.word	0x40007000

08008b38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d102      	bne.n	8008b4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	f000 bc08 	b.w	800935c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b4c:	4b96      	ldr	r3, [pc, #600]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 030c 	and.w	r3, r3, #12
 8008b54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b56:	4b94      	ldr	r3, [pc, #592]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0310 	and.w	r3, r3, #16
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80e4 	beq.w	8008d36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d007      	beq.n	8008b84 <HAL_RCC_OscConfig+0x4c>
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2b0c      	cmp	r3, #12
 8008b78:	f040 808b 	bne.w	8008c92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	f040 8087 	bne.w	8008c92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008b84:	4b88      	ldr	r3, [pc, #544]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_RCC_OscConfig+0x64>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e3df      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1a      	ldr	r2, [r3, #32]
 8008ba0:	4b81      	ldr	r3, [pc, #516]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x7e>
 8008bac:	4b7e      	ldr	r3, [pc, #504]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008bb4:	e005      	b.n	8008bc2 <HAL_RCC_OscConfig+0x8a>
 8008bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bbc:	091b      	lsrs	r3, r3, #4
 8008bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d223      	bcs.n	8008c0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fdcc 	bl	8009768 <RCC_SetFlashLatencyFromMSIRange>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e3c0      	b.n	800935c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008bda:	4b73      	ldr	r3, [pc, #460]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a72      	ldr	r2, [pc, #456]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008be0:	f043 0308 	orr.w	r3, r3, #8
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	4b70      	ldr	r3, [pc, #448]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	496d      	ldr	r1, [pc, #436]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	4968      	ldr	r1, [pc, #416]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	604b      	str	r3, [r1, #4]
 8008c0c:	e025      	b.n	8008c5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c0e:	4b66      	ldr	r3, [pc, #408]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a65      	ldr	r2, [pc, #404]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c14:	f043 0308 	orr.w	r3, r3, #8
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	4b63      	ldr	r3, [pc, #396]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	4960      	ldr	r1, [pc, #384]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	495b      	ldr	r1, [pc, #364]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fd8c 	bl	8009768 <RCC_SetFlashLatencyFromMSIRange>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e380      	b.n	800935c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c5a:	f000 fcc1 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	4b51      	ldr	r3, [pc, #324]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	091b      	lsrs	r3, r3, #4
 8008c66:	f003 030f 	and.w	r3, r3, #15
 8008c6a:	4950      	ldr	r1, [pc, #320]	@ (8008dac <HAL_RCC_OscConfig+0x274>)
 8008c6c:	5ccb      	ldrb	r3, [r1, r3]
 8008c6e:	f003 031f 	and.w	r3, r3, #31
 8008c72:	fa22 f303 	lsr.w	r3, r2, r3
 8008c76:	4a4e      	ldr	r2, [pc, #312]	@ (8008db0 <HAL_RCC_OscConfig+0x278>)
 8008c78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8008db4 <HAL_RCC_OscConfig+0x27c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fd fbf8 	bl	8006474 <HAL_InitTick>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d052      	beq.n	8008d34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	e364      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d032      	beq.n	8008d00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008c9a:	4b43      	ldr	r3, [pc, #268]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a42      	ldr	r2, [pc, #264]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008ca0:	f043 0301 	orr.w	r3, r3, #1
 8008ca4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ca6:	f7fd fc35 	bl	8006514 <HAL_GetTick>
 8008caa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cac:	e008      	b.n	8008cc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008cae:	f7fd fc31 	bl	8006514 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d901      	bls.n	8008cc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e34d      	b.n	800935c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cc0:	4b39      	ldr	r3, [pc, #228]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0f0      	beq.n	8008cae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ccc:	4b36      	ldr	r3, [pc, #216]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a35      	ldr	r2, [pc, #212]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008cd2:	f043 0308 	orr.w	r3, r3, #8
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	4b33      	ldr	r3, [pc, #204]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	4930      	ldr	r1, [pc, #192]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008cea:	4b2f      	ldr	r3, [pc, #188]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	492b      	ldr	r1, [pc, #172]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	604b      	str	r3, [r1, #4]
 8008cfe:	e01a      	b.n	8008d36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008d00:	4b29      	ldr	r3, [pc, #164]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a28      	ldr	r2, [pc, #160]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d06:	f023 0301 	bic.w	r3, r3, #1
 8008d0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008d0c:	f7fd fc02 	bl	8006514 <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d14:	f7fd fbfe 	bl	8006514 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e31a      	b.n	800935c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008d26:	4b20      	ldr	r3, [pc, #128]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1f0      	bne.n	8008d14 <HAL_RCC_OscConfig+0x1dc>
 8008d32:	e000      	b.n	8008d36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d073      	beq.n	8008e2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d005      	beq.n	8008d54 <HAL_RCC_OscConfig+0x21c>
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b0c      	cmp	r3, #12
 8008d4c:	d10e      	bne.n	8008d6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d10b      	bne.n	8008d6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d54:	4b14      	ldr	r3, [pc, #80]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d063      	beq.n	8008e28 <HAL_RCC_OscConfig+0x2f0>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d15f      	bne.n	8008e28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e2f7      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d74:	d106      	bne.n	8008d84 <HAL_RCC_OscConfig+0x24c>
 8008d76:	4b0c      	ldr	r3, [pc, #48]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	e025      	b.n	8008dd0 <HAL_RCC_OscConfig+0x298>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d8c:	d114      	bne.n	8008db8 <HAL_RCC_OscConfig+0x280>
 8008d8e:	4b06      	ldr	r3, [pc, #24]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a05      	ldr	r2, [pc, #20]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	4b03      	ldr	r3, [pc, #12]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a02      	ldr	r2, [pc, #8]	@ (8008da8 <HAL_RCC_OscConfig+0x270>)
 8008da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	e013      	b.n	8008dd0 <HAL_RCC_OscConfig+0x298>
 8008da8:	40021000 	.word	0x40021000
 8008dac:	080175b0 	.word	0x080175b0
 8008db0:	20000020 	.word	0x20000020
 8008db4:	20000024 	.word	0x20000024
 8008db8:	4ba0      	ldr	r3, [pc, #640]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a9f      	ldr	r2, [pc, #636]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	4b9d      	ldr	r3, [pc, #628]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a9c      	ldr	r2, [pc, #624]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d013      	beq.n	8008e00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd8:	f7fd fb9c 	bl	8006514 <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008de0:	f7fd fb98 	bl	8006514 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b64      	cmp	r3, #100	@ 0x64
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e2b4      	b.n	800935c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008df2:	4b92      	ldr	r3, [pc, #584]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f0      	beq.n	8008de0 <HAL_RCC_OscConfig+0x2a8>
 8008dfe:	e014      	b.n	8008e2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e00:	f7fd fb88 	bl	8006514 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e08:	f7fd fb84 	bl	8006514 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b64      	cmp	r3, #100	@ 0x64
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e2a0      	b.n	800935c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e1a:	4b88      	ldr	r3, [pc, #544]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f0      	bne.n	8008e08 <HAL_RCC_OscConfig+0x2d0>
 8008e26:	e000      	b.n	8008e2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d060      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d005      	beq.n	8008e48 <HAL_RCC_OscConfig+0x310>
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b0c      	cmp	r3, #12
 8008e40:	d119      	bne.n	8008e76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d116      	bne.n	8008e76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e48:	4b7c      	ldr	r3, [pc, #496]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d005      	beq.n	8008e60 <HAL_RCC_OscConfig+0x328>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e27d      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e60:	4b76      	ldr	r3, [pc, #472]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	4973      	ldr	r1, [pc, #460]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e74:	e040      	b.n	8008ef8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d023      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a6e      	ldr	r2, [pc, #440]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e8a:	f7fd fb43 	bl	8006514 <HAL_GetTick>
 8008e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e90:	e008      	b.n	8008ea4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e92:	f7fd fb3f 	bl	8006514 <HAL_GetTick>
 8008e96:	4602      	mov	r2, r0
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d901      	bls.n	8008ea4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e25b      	b.n	800935c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ea4:	4b65      	ldr	r3, [pc, #404]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0f0      	beq.n	8008e92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eb0:	4b62      	ldr	r3, [pc, #392]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	061b      	lsls	r3, r3, #24
 8008ebe:	495f      	ldr	r1, [pc, #380]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	604b      	str	r3, [r1, #4]
 8008ec4:	e018      	b.n	8008ef8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a5c      	ldr	r2, [pc, #368]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed2:	f7fd fb1f 	bl	8006514 <HAL_GetTick>
 8008ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ed8:	e008      	b.n	8008eec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eda:	f7fd fb1b 	bl	8006514 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e237      	b.n	800935c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008eec:	4b53      	ldr	r3, [pc, #332]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1f0      	bne.n	8008eda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d03c      	beq.n	8008f7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01c      	beq.n	8008f46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f0c:	4b4b      	ldr	r3, [pc, #300]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f12:	4a4a      	ldr	r2, [pc, #296]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008f14:	f043 0301 	orr.w	r3, r3, #1
 8008f18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f1c:	f7fd fafa 	bl	8006514 <HAL_GetTick>
 8008f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f22:	e008      	b.n	8008f36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f24:	f7fd faf6 	bl	8006514 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d901      	bls.n	8008f36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e212      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f36:	4b41      	ldr	r3, [pc, #260]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0ef      	beq.n	8008f24 <HAL_RCC_OscConfig+0x3ec>
 8008f44:	e01b      	b.n	8008f7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f46:	4b3d      	ldr	r3, [pc, #244]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008f4e:	f023 0301 	bic.w	r3, r3, #1
 8008f52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f56:	f7fd fadd 	bl	8006514 <HAL_GetTick>
 8008f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f5c:	e008      	b.n	8008f70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f5e:	f7fd fad9 	bl	8006514 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d901      	bls.n	8008f70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e1f5      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f70:	4b32      	ldr	r3, [pc, #200]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1ef      	bne.n	8008f5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0304 	and.w	r3, r3, #4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 80a6 	beq.w	80090d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008f90:	4b2a      	ldr	r3, [pc, #168]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10d      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f9c:	4b27      	ldr	r3, [pc, #156]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa0:	4a26      	ldr	r2, [pc, #152]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fa8:	4b24      	ldr	r3, [pc, #144]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8008faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fb0:	60bb      	str	r3, [r7, #8]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fb8:	4b21      	ldr	r3, [pc, #132]	@ (8009040 <HAL_RCC_OscConfig+0x508>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d118      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8009040 <HAL_RCC_OscConfig+0x508>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009040 <HAL_RCC_OscConfig+0x508>)
 8008fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fd0:	f7fd faa0 	bl	8006514 <HAL_GetTick>
 8008fd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fd6:	e008      	b.n	8008fea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fd8:	f7fd fa9c 	bl	8006514 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d901      	bls.n	8008fea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e1b8      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fea:	4b15      	ldr	r3, [pc, #84]	@ (8009040 <HAL_RCC_OscConfig+0x508>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0f0      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d108      	bne.n	8009010 <HAL_RCC_OscConfig+0x4d8>
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009004:	4a0d      	ldr	r2, [pc, #52]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8009006:	f043 0301 	orr.w	r3, r3, #1
 800900a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800900e:	e029      	b.n	8009064 <HAL_RCC_OscConfig+0x52c>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b05      	cmp	r3, #5
 8009016:	d115      	bne.n	8009044 <HAL_RCC_OscConfig+0x50c>
 8009018:	4b08      	ldr	r3, [pc, #32]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 800901a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800901e:	4a07      	ldr	r2, [pc, #28]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8009020:	f043 0304 	orr.w	r3, r3, #4
 8009024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009028:	4b04      	ldr	r3, [pc, #16]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 800902a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800902e:	4a03      	ldr	r2, [pc, #12]	@ (800903c <HAL_RCC_OscConfig+0x504>)
 8009030:	f043 0301 	orr.w	r3, r3, #1
 8009034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009038:	e014      	b.n	8009064 <HAL_RCC_OscConfig+0x52c>
 800903a:	bf00      	nop
 800903c:	40021000 	.word	0x40021000
 8009040:	40007000 	.word	0x40007000
 8009044:	4b9d      	ldr	r3, [pc, #628]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904a:	4a9c      	ldr	r2, [pc, #624]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 800904c:	f023 0301 	bic.w	r3, r3, #1
 8009050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009054:	4b99      	ldr	r3, [pc, #612]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905a:	4a98      	ldr	r2, [pc, #608]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 800905c:	f023 0304 	bic.w	r3, r3, #4
 8009060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d016      	beq.n	800909a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800906c:	f7fd fa52 	bl	8006514 <HAL_GetTick>
 8009070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009072:	e00a      	b.n	800908a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009074:	f7fd fa4e 	bl	8006514 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009082:	4293      	cmp	r3, r2
 8009084:	d901      	bls.n	800908a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e168      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800908a:	4b8c      	ldr	r3, [pc, #560]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 800908c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0ed      	beq.n	8009074 <HAL_RCC_OscConfig+0x53c>
 8009098:	e015      	b.n	80090c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800909a:	f7fd fa3b 	bl	8006514 <HAL_GetTick>
 800909e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090a0:	e00a      	b.n	80090b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090a2:	f7fd fa37 	bl	8006514 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d901      	bls.n	80090b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e151      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090b8:	4b80      	ldr	r3, [pc, #512]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 80090ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090be:	f003 0302 	and.w	r3, r3, #2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1ed      	bne.n	80090a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090c6:	7ffb      	ldrb	r3, [r7, #31]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d105      	bne.n	80090d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090cc:	4b7b      	ldr	r3, [pc, #492]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 80090ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d0:	4a7a      	ldr	r2, [pc, #488]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 80090d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d03c      	beq.n	800915e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01c      	beq.n	8009126 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80090ec:	4b73      	ldr	r3, [pc, #460]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 80090ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80090f2:	4a72      	ldr	r2, [pc, #456]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 80090f4:	f043 0301 	orr.w	r3, r3, #1
 80090f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090fc:	f7fd fa0a 	bl	8006514 <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009104:	f7fd fa06 	bl	8006514 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b02      	cmp	r3, #2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e122      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009116:	4b69      	ldr	r3, [pc, #420]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009118:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0ef      	beq.n	8009104 <HAL_RCC_OscConfig+0x5cc>
 8009124:	e01b      	b.n	800915e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009126:	4b65      	ldr	r3, [pc, #404]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009128:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800912c:	4a63      	ldr	r2, [pc, #396]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 800912e:	f023 0301 	bic.w	r3, r3, #1
 8009132:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009136:	f7fd f9ed 	bl	8006514 <HAL_GetTick>
 800913a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800913c:	e008      	b.n	8009150 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800913e:	f7fd f9e9 	bl	8006514 <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	2b02      	cmp	r3, #2
 800914a:	d901      	bls.n	8009150 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e105      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009150:	4b5a      	ldr	r3, [pc, #360]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009152:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1ef      	bne.n	800913e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80f9 	beq.w	800935a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916c:	2b02      	cmp	r3, #2
 800916e:	f040 80cf 	bne.w	8009310 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009172:	4b52      	ldr	r3, [pc, #328]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f003 0203 	and.w	r2, r3, #3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009182:	429a      	cmp	r2, r3
 8009184:	d12c      	bne.n	80091e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009190:	3b01      	subs	r3, #1
 8009192:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009194:	429a      	cmp	r2, r3
 8009196:	d123      	bne.n	80091e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d11b      	bne.n	80091e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d113      	bne.n	80091e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c2:	085b      	lsrs	r3, r3, #1
 80091c4:	3b01      	subs	r3, #1
 80091c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d109      	bne.n	80091e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d6:	085b      	lsrs	r3, r3, #1
 80091d8:	3b01      	subs	r3, #1
 80091da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091dc:	429a      	cmp	r2, r3
 80091de:	d071      	beq.n	80092c4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	2b0c      	cmp	r3, #12
 80091e4:	d068      	beq.n	80092b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80091e6:	4b35      	ldr	r3, [pc, #212]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d105      	bne.n	80091fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80091f2:	4b32      	ldr	r3, [pc, #200]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e0ac      	b.n	800935c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009202:	4b2e      	ldr	r3, [pc, #184]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a2d      	ldr	r2, [pc, #180]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009208:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800920c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800920e:	f7fd f981 	bl	8006514 <HAL_GetTick>
 8009212:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009214:	e008      	b.n	8009228 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009216:	f7fd f97d 	bl	8006514 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	2b02      	cmp	r3, #2
 8009222:	d901      	bls.n	8009228 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e099      	b.n	800935c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009228:	4b24      	ldr	r3, [pc, #144]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f0      	bne.n	8009216 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009234:	4b21      	ldr	r3, [pc, #132]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	4b21      	ldr	r3, [pc, #132]	@ (80092c0 <HAL_RCC_OscConfig+0x788>)
 800923a:	4013      	ands	r3, r2
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009244:	3a01      	subs	r2, #1
 8009246:	0112      	lsls	r2, r2, #4
 8009248:	4311      	orrs	r1, r2
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800924e:	0212      	lsls	r2, r2, #8
 8009250:	4311      	orrs	r1, r2
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009256:	0852      	lsrs	r2, r2, #1
 8009258:	3a01      	subs	r2, #1
 800925a:	0552      	lsls	r2, r2, #21
 800925c:	4311      	orrs	r1, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009262:	0852      	lsrs	r2, r2, #1
 8009264:	3a01      	subs	r2, #1
 8009266:	0652      	lsls	r2, r2, #25
 8009268:	4311      	orrs	r1, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800926e:	06d2      	lsls	r2, r2, #27
 8009270:	430a      	orrs	r2, r1
 8009272:	4912      	ldr	r1, [pc, #72]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009274:	4313      	orrs	r3, r2
 8009276:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009278:	4b10      	ldr	r3, [pc, #64]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a0f      	ldr	r2, [pc, #60]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 800927e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009282:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009284:	4b0d      	ldr	r3, [pc, #52]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	4a0c      	ldr	r2, [pc, #48]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 800928a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800928e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009290:	f7fd f940 	bl	8006514 <HAL_GetTick>
 8009294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009296:	e008      	b.n	80092aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009298:	f7fd f93c 	bl	8006514 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d901      	bls.n	80092aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e058      	b.n	800935c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092aa:	4b04      	ldr	r3, [pc, #16]	@ (80092bc <HAL_RCC_OscConfig+0x784>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0f0      	beq.n	8009298 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092b6:	e050      	b.n	800935a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e04f      	b.n	800935c <HAL_RCC_OscConfig+0x824>
 80092bc:	40021000 	.word	0x40021000
 80092c0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092c4:	4b27      	ldr	r3, [pc, #156]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d144      	bne.n	800935a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80092d0:	4b24      	ldr	r3, [pc, #144]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a23      	ldr	r2, [pc, #140]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 80092d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092dc:	4b21      	ldr	r3, [pc, #132]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	4a20      	ldr	r2, [pc, #128]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 80092e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092e8:	f7fd f914 	bl	8006514 <HAL_GetTick>
 80092ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092ee:	e008      	b.n	8009302 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092f0:	f7fd f910 	bl	8006514 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e02c      	b.n	800935c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009302:	4b18      	ldr	r3, [pc, #96]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0f0      	beq.n	80092f0 <HAL_RCC_OscConfig+0x7b8>
 800930e:	e024      	b.n	800935a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	2b0c      	cmp	r3, #12
 8009314:	d01f      	beq.n	8009356 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009316:	4b13      	ldr	r3, [pc, #76]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a12      	ldr	r2, [pc, #72]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 800931c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009322:	f7fd f8f7 	bl	8006514 <HAL_GetTick>
 8009326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009328:	e008      	b.n	800933c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800932a:	f7fd f8f3 	bl	8006514 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d901      	bls.n	800933c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e00f      	b.n	800935c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800933c:	4b09      	ldr	r3, [pc, #36]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1f0      	bne.n	800932a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009348:	4b06      	ldr	r3, [pc, #24]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	4905      	ldr	r1, [pc, #20]	@ (8009364 <HAL_RCC_OscConfig+0x82c>)
 800934e:	4b06      	ldr	r3, [pc, #24]	@ (8009368 <HAL_RCC_OscConfig+0x830>)
 8009350:	4013      	ands	r3, r2
 8009352:	60cb      	str	r3, [r1, #12]
 8009354:	e001      	b.n	800935a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e000      	b.n	800935c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3720      	adds	r7, #32
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	40021000 	.word	0x40021000
 8009368:	feeefffc 	.word	0xfeeefffc

0800936c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009376:	2300      	movs	r3, #0
 8009378:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e11d      	b.n	80095c0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009384:	4b90      	ldr	r3, [pc, #576]	@ (80095c8 <HAL_RCC_ClockConfig+0x25c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 030f 	and.w	r3, r3, #15
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	429a      	cmp	r2, r3
 8009390:	d910      	bls.n	80093b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009392:	4b8d      	ldr	r3, [pc, #564]	@ (80095c8 <HAL_RCC_ClockConfig+0x25c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f023 020f 	bic.w	r2, r3, #15
 800939a:	498b      	ldr	r1, [pc, #556]	@ (80095c8 <HAL_RCC_ClockConfig+0x25c>)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	4313      	orrs	r3, r2
 80093a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093a2:	4b89      	ldr	r3, [pc, #548]	@ (80095c8 <HAL_RCC_ClockConfig+0x25c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d001      	beq.n	80093b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e105      	b.n	80095c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d010      	beq.n	80093e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	4b81      	ldr	r3, [pc, #516]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d908      	bls.n	80093e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093d0:	4b7e      	ldr	r3, [pc, #504]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	497b      	ldr	r1, [pc, #492]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d079      	beq.n	80094e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d11e      	bne.n	8009434 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093f6:	4b75      	ldr	r3, [pc, #468]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e0dc      	b.n	80095c0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009406:	f000 fa09 	bl	800981c <RCC_GetSysClockFreqFromPLLSource>
 800940a:	4603      	mov	r3, r0
 800940c:	4a70      	ldr	r2, [pc, #448]	@ (80095d0 <HAL_RCC_ClockConfig+0x264>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d946      	bls.n	80094a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009412:	4b6e      	ldr	r3, [pc, #440]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d140      	bne.n	80094a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800941e:	4b6b      	ldr	r3, [pc, #428]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009426:	4a69      	ldr	r2, [pc, #420]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800942c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800942e:	2380      	movs	r3, #128	@ 0x80
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e035      	b.n	80094a0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d107      	bne.n	800944c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800943c:	4b63      	ldr	r3, [pc, #396]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d115      	bne.n	8009474 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e0b9      	b.n	80095c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d107      	bne.n	8009464 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009454:	4b5d      	ldr	r3, [pc, #372]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d109      	bne.n	8009474 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e0ad      	b.n	80095c0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009464:	4b59      	ldr	r3, [pc, #356]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e0a5      	b.n	80095c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009474:	f000 f8b4 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 8009478:	4603      	mov	r3, r0
 800947a:	4a55      	ldr	r2, [pc, #340]	@ (80095d0 <HAL_RCC_ClockConfig+0x264>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d90f      	bls.n	80094a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009480:	4b52      	ldr	r3, [pc, #328]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d109      	bne.n	80094a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800948c:	4b4f      	ldr	r3, [pc, #316]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009494:	4a4d      	ldr	r2, [pc, #308]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800949a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800949c:	2380      	movs	r3, #128	@ 0x80
 800949e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094a0:	4b4a      	ldr	r3, [pc, #296]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f023 0203 	bic.w	r2, r3, #3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	4947      	ldr	r1, [pc, #284]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094b2:	f7fd f82f 	bl	8006514 <HAL_GetTick>
 80094b6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094b8:	e00a      	b.n	80094d0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094ba:	f7fd f82b 	bl	8006514 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d901      	bls.n	80094d0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e077      	b.n	80095c0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094d0:	4b3e      	ldr	r3, [pc, #248]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 020c 	and.w	r2, r3, #12
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	429a      	cmp	r2, r3
 80094e0:	d1eb      	bne.n	80094ba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2b80      	cmp	r3, #128	@ 0x80
 80094e6:	d105      	bne.n	80094f4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80094e8:	4b38      	ldr	r3, [pc, #224]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	4a37      	ldr	r2, [pc, #220]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 80094ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094f2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d010      	beq.n	8009522 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	4b31      	ldr	r3, [pc, #196]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800950c:	429a      	cmp	r2, r3
 800950e:	d208      	bcs.n	8009522 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009510:	4b2e      	ldr	r3, [pc, #184]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	492b      	ldr	r1, [pc, #172]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 800951e:	4313      	orrs	r3, r2
 8009520:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009522:	4b29      	ldr	r3, [pc, #164]	@ (80095c8 <HAL_RCC_ClockConfig+0x25c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d210      	bcs.n	8009552 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009530:	4b25      	ldr	r3, [pc, #148]	@ (80095c8 <HAL_RCC_ClockConfig+0x25c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f023 020f 	bic.w	r2, r3, #15
 8009538:	4923      	ldr	r1, [pc, #140]	@ (80095c8 <HAL_RCC_ClockConfig+0x25c>)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	4313      	orrs	r3, r2
 800953e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009540:	4b21      	ldr	r3, [pc, #132]	@ (80095c8 <HAL_RCC_ClockConfig+0x25c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	429a      	cmp	r2, r3
 800954c:	d001      	beq.n	8009552 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e036      	b.n	80095c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800955e:	4b1b      	ldr	r3, [pc, #108]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	4918      	ldr	r1, [pc, #96]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 800956c:	4313      	orrs	r3, r2
 800956e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800957c:	4b13      	ldr	r3, [pc, #76]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	4910      	ldr	r1, [pc, #64]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 800958c:	4313      	orrs	r3, r2
 800958e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009590:	f000 f826 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 8009594:	4602      	mov	r2, r0
 8009596:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <HAL_RCC_ClockConfig+0x260>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	091b      	lsrs	r3, r3, #4
 800959c:	f003 030f 	and.w	r3, r3, #15
 80095a0:	490c      	ldr	r1, [pc, #48]	@ (80095d4 <HAL_RCC_ClockConfig+0x268>)
 80095a2:	5ccb      	ldrb	r3, [r1, r3]
 80095a4:	f003 031f 	and.w	r3, r3, #31
 80095a8:	fa22 f303 	lsr.w	r3, r2, r3
 80095ac:	4a0a      	ldr	r2, [pc, #40]	@ (80095d8 <HAL_RCC_ClockConfig+0x26c>)
 80095ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80095b0:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <HAL_RCC_ClockConfig+0x270>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fc ff5d 	bl	8006474 <HAL_InitTick>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40022000 	.word	0x40022000
 80095cc:	40021000 	.word	0x40021000
 80095d0:	04c4b400 	.word	0x04c4b400
 80095d4:	080175b0 	.word	0x080175b0
 80095d8:	20000020 	.word	0x20000020
 80095dc:	20000024 	.word	0x20000024

080095e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b089      	sub	sp, #36	@ 0x24
 80095e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	2300      	movs	r3, #0
 80095ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095ee:	4b3e      	ldr	r3, [pc, #248]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f003 030c 	and.w	r3, r3, #12
 80095f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095f8:	4b3b      	ldr	r3, [pc, #236]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_RCC_GetSysClockFreq+0x34>
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2b0c      	cmp	r3, #12
 800960c:	d121      	bne.n	8009652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d11e      	bne.n	8009652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009614:	4b34      	ldr	r3, [pc, #208]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0308 	and.w	r3, r3, #8
 800961c:	2b00      	cmp	r3, #0
 800961e:	d107      	bne.n	8009630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009620:	4b31      	ldr	r3, [pc, #196]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009626:	0a1b      	lsrs	r3, r3, #8
 8009628:	f003 030f 	and.w	r3, r3, #15
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	e005      	b.n	800963c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009630:	4b2d      	ldr	r3, [pc, #180]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	091b      	lsrs	r3, r3, #4
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800963c:	4a2b      	ldr	r2, [pc, #172]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10d      	bne.n	8009668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009650:	e00a      	b.n	8009668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b04      	cmp	r3, #4
 8009656:	d102      	bne.n	800965e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009658:	4b25      	ldr	r3, [pc, #148]	@ (80096f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800965a:	61bb      	str	r3, [r7, #24]
 800965c:	e004      	b.n	8009668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b08      	cmp	r3, #8
 8009662:	d101      	bne.n	8009668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009664:	4b23      	ldr	r3, [pc, #140]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2b0c      	cmp	r3, #12
 800966c:	d134      	bne.n	80096d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800966e:	4b1e      	ldr	r3, [pc, #120]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d003      	beq.n	8009686 <HAL_RCC_GetSysClockFreq+0xa6>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b03      	cmp	r3, #3
 8009682:	d003      	beq.n	800968c <HAL_RCC_GetSysClockFreq+0xac>
 8009684:	e005      	b.n	8009692 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009686:	4b1a      	ldr	r3, [pc, #104]	@ (80096f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009688:	617b      	str	r3, [r7, #20]
      break;
 800968a:	e005      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800968c:	4b19      	ldr	r3, [pc, #100]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800968e:	617b      	str	r3, [r7, #20]
      break;
 8009690:	e002      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	617b      	str	r3, [r7, #20]
      break;
 8009696:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009698:	4b13      	ldr	r3, [pc, #76]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	091b      	lsrs	r3, r3, #4
 800969e:	f003 030f 	and.w	r3, r3, #15
 80096a2:	3301      	adds	r3, #1
 80096a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80096a6:	4b10      	ldr	r3, [pc, #64]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	0a1b      	lsrs	r3, r3, #8
 80096ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	fb03 f202 	mul.w	r2, r3, r2
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80096be:	4b0a      	ldr	r3, [pc, #40]	@ (80096e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	0e5b      	lsrs	r3, r3, #25
 80096c4:	f003 0303 	and.w	r3, r3, #3
 80096c8:	3301      	adds	r3, #1
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80096d8:	69bb      	ldr	r3, [r7, #24]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3724      	adds	r7, #36	@ 0x24
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	40021000 	.word	0x40021000
 80096ec:	080175c8 	.word	0x080175c8
 80096f0:	00f42400 	.word	0x00f42400
 80096f4:	007a1200 	.word	0x007a1200

080096f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096fc:	4b03      	ldr	r3, [pc, #12]	@ (800970c <HAL_RCC_GetHCLKFreq+0x14>)
 80096fe:	681b      	ldr	r3, [r3, #0]
}
 8009700:	4618      	mov	r0, r3
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000020 	.word	0x20000020

08009710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009714:	f7ff fff0 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 8009718:	4602      	mov	r2, r0
 800971a:	4b06      	ldr	r3, [pc, #24]	@ (8009734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	0a1b      	lsrs	r3, r3, #8
 8009720:	f003 0307 	and.w	r3, r3, #7
 8009724:	4904      	ldr	r1, [pc, #16]	@ (8009738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009726:	5ccb      	ldrb	r3, [r1, r3]
 8009728:	f003 031f 	and.w	r3, r3, #31
 800972c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009730:	4618      	mov	r0, r3
 8009732:	bd80      	pop	{r7, pc}
 8009734:	40021000 	.word	0x40021000
 8009738:	080175c0 	.word	0x080175c0

0800973c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009740:	f7ff ffda 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 8009744:	4602      	mov	r2, r0
 8009746:	4b06      	ldr	r3, [pc, #24]	@ (8009760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	0adb      	lsrs	r3, r3, #11
 800974c:	f003 0307 	and.w	r3, r3, #7
 8009750:	4904      	ldr	r1, [pc, #16]	@ (8009764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009752:	5ccb      	ldrb	r3, [r1, r3]
 8009754:	f003 031f 	and.w	r3, r3, #31
 8009758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800975c:	4618      	mov	r0, r3
 800975e:	bd80      	pop	{r7, pc}
 8009760:	40021000 	.word	0x40021000
 8009764:	080175c0 	.word	0x080175c0

08009768 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009770:	2300      	movs	r3, #0
 8009772:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009774:	4b27      	ldr	r3, [pc, #156]	@ (8009814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009780:	f7ff f906 	bl	8008990 <HAL_PWREx_GetVoltageRange>
 8009784:	6178      	str	r0, [r7, #20]
 8009786:	e014      	b.n	80097b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009788:	4b22      	ldr	r3, [pc, #136]	@ (8009814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800978a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800978c:	4a21      	ldr	r2, [pc, #132]	@ (8009814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800978e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009792:	6593      	str	r3, [r2, #88]	@ 0x58
 8009794:	4b1f      	ldr	r3, [pc, #124]	@ (8009814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80097a0:	f7ff f8f6 	bl	8008990 <HAL_PWREx_GetVoltageRange>
 80097a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80097a6:	4b1b      	ldr	r3, [pc, #108]	@ (8009814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80097a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097aa:	4a1a      	ldr	r2, [pc, #104]	@ (8009814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80097ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097b8:	d10b      	bne.n	80097d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b80      	cmp	r3, #128	@ 0x80
 80097be:	d913      	bls.n	80097e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80097c4:	d902      	bls.n	80097cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80097c6:	2302      	movs	r3, #2
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	e00d      	b.n	80097e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80097cc:	2301      	movs	r3, #1
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	e00a      	b.n	80097e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80097d6:	d902      	bls.n	80097de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80097d8:	2302      	movs	r3, #2
 80097da:	613b      	str	r3, [r7, #16]
 80097dc:	e004      	b.n	80097e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b70      	cmp	r3, #112	@ 0x70
 80097e2:	d101      	bne.n	80097e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80097e4:	2301      	movs	r3, #1
 80097e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80097e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009818 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f023 020f 	bic.w	r2, r3, #15
 80097f0:	4909      	ldr	r1, [pc, #36]	@ (8009818 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80097f8:	4b07      	ldr	r3, [pc, #28]	@ (8009818 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	429a      	cmp	r2, r3
 8009804:	d001      	beq.n	800980a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	40021000 	.word	0x40021000
 8009818:	40022000 	.word	0x40022000

0800981c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009822:	4b2d      	ldr	r3, [pc, #180]	@ (80098d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b03      	cmp	r3, #3
 8009830:	d00b      	beq.n	800984a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b03      	cmp	r3, #3
 8009836:	d825      	bhi.n	8009884 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d008      	beq.n	8009850 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b02      	cmp	r3, #2
 8009842:	d11f      	bne.n	8009884 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009844:	4b25      	ldr	r3, [pc, #148]	@ (80098dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009846:	613b      	str	r3, [r7, #16]
    break;
 8009848:	e01f      	b.n	800988a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800984a:	4b25      	ldr	r3, [pc, #148]	@ (80098e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800984c:	613b      	str	r3, [r7, #16]
    break;
 800984e:	e01c      	b.n	800988a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009850:	4b21      	ldr	r3, [pc, #132]	@ (80098d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b00      	cmp	r3, #0
 800985a:	d107      	bne.n	800986c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800985c:	4b1e      	ldr	r3, [pc, #120]	@ (80098d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800985e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009862:	0a1b      	lsrs	r3, r3, #8
 8009864:	f003 030f 	and.w	r3, r3, #15
 8009868:	617b      	str	r3, [r7, #20]
 800986a:	e005      	b.n	8009878 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800986c:	4b1a      	ldr	r3, [pc, #104]	@ (80098d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	091b      	lsrs	r3, r3, #4
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009878:	4a1a      	ldr	r2, [pc, #104]	@ (80098e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009880:	613b      	str	r3, [r7, #16]
    break;
 8009882:	e002      	b.n	800988a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009884:	2300      	movs	r3, #0
 8009886:	613b      	str	r3, [r7, #16]
    break;
 8009888:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800988a:	4b13      	ldr	r3, [pc, #76]	@ (80098d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	091b      	lsrs	r3, r3, #4
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	3301      	adds	r3, #1
 8009896:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009898:	4b0f      	ldr	r3, [pc, #60]	@ (80098d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	0a1b      	lsrs	r3, r3, #8
 800989e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	fb03 f202 	mul.w	r2, r3, r2
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ae:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098b0:	4b09      	ldr	r3, [pc, #36]	@ (80098d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	0e5b      	lsrs	r3, r3, #25
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	3301      	adds	r3, #1
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80098ca:	683b      	ldr	r3, [r7, #0]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	371c      	adds	r7, #28
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	40021000 	.word	0x40021000
 80098dc:	00f42400 	.word	0x00f42400
 80098e0:	007a1200 	.word	0x007a1200
 80098e4:	080175c8 	.word	0x080175c8

080098e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098f0:	2300      	movs	r3, #0
 80098f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098f4:	2300      	movs	r3, #0
 80098f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009900:	2b00      	cmp	r3, #0
 8009902:	d040      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009908:	2b80      	cmp	r3, #128	@ 0x80
 800990a:	d02a      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800990c:	2b80      	cmp	r3, #128	@ 0x80
 800990e:	d825      	bhi.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009910:	2b60      	cmp	r3, #96	@ 0x60
 8009912:	d026      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009914:	2b60      	cmp	r3, #96	@ 0x60
 8009916:	d821      	bhi.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009918:	2b40      	cmp	r3, #64	@ 0x40
 800991a:	d006      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800991c:	2b40      	cmp	r3, #64	@ 0x40
 800991e:	d81d      	bhi.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009920:	2b00      	cmp	r3, #0
 8009922:	d009      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009924:	2b20      	cmp	r3, #32
 8009926:	d010      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009928:	e018      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800992a:	4b89      	ldr	r3, [pc, #548]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	4a88      	ldr	r2, [pc, #544]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009934:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009936:	e015      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3304      	adds	r3, #4
 800993c:	2100      	movs	r1, #0
 800993e:	4618      	mov	r0, r3
 8009940:	f001 fa34 	bl	800adac <RCCEx_PLLSAI1_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009948:	e00c      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3320      	adds	r3, #32
 800994e:	2100      	movs	r1, #0
 8009950:	4618      	mov	r0, r3
 8009952:	f001 fb1f 	bl	800af94 <RCCEx_PLLSAI2_Config>
 8009956:	4603      	mov	r3, r0
 8009958:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800995a:	e003      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	74fb      	strb	r3, [r7, #19]
      break;
 8009960:	e000      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009964:	7cfb      	ldrb	r3, [r7, #19]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10b      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800996a:	4b79      	ldr	r3, [pc, #484]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800996c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009970:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009978:	4975      	ldr	r1, [pc, #468]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800997a:	4313      	orrs	r3, r2
 800997c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8009980:	e001      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009982:	7cfb      	ldrb	r3, [r7, #19]
 8009984:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d047      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800999a:	d030      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 800999c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a0:	d82a      	bhi.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80099a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099a6:	d02a      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 80099a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099ac:	d824      	bhi.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80099ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b2:	d008      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80099b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b8:	d81e      	bhi.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00a      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80099be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099c2:	d010      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80099c4:	e018      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80099c6:	4b62      	ldr	r3, [pc, #392]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	4a61      	ldr	r2, [pc, #388]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099d0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099d2:	e015      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3304      	adds	r3, #4
 80099d8:	2100      	movs	r1, #0
 80099da:	4618      	mov	r0, r3
 80099dc:	f001 f9e6 	bl	800adac <RCCEx_PLLSAI1_Config>
 80099e0:	4603      	mov	r3, r0
 80099e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099e4:	e00c      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3320      	adds	r3, #32
 80099ea:	2100      	movs	r1, #0
 80099ec:	4618      	mov	r0, r3
 80099ee:	f001 fad1 	bl	800af94 <RCCEx_PLLSAI2_Config>
 80099f2:	4603      	mov	r3, r0
 80099f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099f6:	e003      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	74fb      	strb	r3, [r7, #19]
      break;
 80099fc:	e000      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80099fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a00:	7cfb      	ldrb	r3, [r7, #19]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10b      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009a06:	4b52      	ldr	r3, [pc, #328]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a14:	494e      	ldr	r1, [pc, #312]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8009a1c:	e001      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1e:	7cfb      	ldrb	r3, [r7, #19]
 8009a20:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 809f 	beq.w	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a30:	2300      	movs	r3, #0
 8009a32:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009a34:	4b46      	ldr	r3, [pc, #280]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e000      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009a44:	2300      	movs	r3, #0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00d      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a4a:	4b41      	ldr	r3, [pc, #260]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a4e:	4a40      	ldr	r2, [pc, #256]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a56:	4b3e      	ldr	r3, [pc, #248]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a5e:	60bb      	str	r3, [r7, #8]
 8009a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a62:	2301      	movs	r3, #1
 8009a64:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a66:	4b3b      	ldr	r3, [pc, #236]	@ (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a3a      	ldr	r2, [pc, #232]	@ (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a72:	f7fc fd4f 	bl	8006514 <HAL_GetTick>
 8009a76:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a78:	e009      	b.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a7a:	f7fc fd4b 	bl	8006514 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d902      	bls.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	74fb      	strb	r3, [r7, #19]
        break;
 8009a8c:	e005      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a8e:	4b31      	ldr	r3, [pc, #196]	@ (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0ef      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009a9a:	7cfb      	ldrb	r3, [r7, #19]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d15b      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009aaa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d01f      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d019      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009abe:	4b24      	ldr	r3, [pc, #144]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ac8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009aca:	4b21      	ldr	r3, [pc, #132]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ad6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ada:	4b1d      	ldr	r3, [pc, #116]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009aea:	4a19      	ldr	r2, [pc, #100]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d016      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afc:	f7fc fd0a 	bl	8006514 <HAL_GetTick>
 8009b00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b02:	e00b      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b04:	f7fc fd06 	bl	8006514 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d902      	bls.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	74fb      	strb	r3, [r7, #19]
            break;
 8009b1a:	e006      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0ec      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009b2a:	7cfb      	ldrb	r3, [r7, #19]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10c      	bne.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b30:	4b07      	ldr	r3, [pc, #28]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b40:	4903      	ldr	r1, [pc, #12]	@ (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009b48:	e008      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b4a:	7cfb      	ldrb	r3, [r7, #19]
 8009b4c:	74bb      	strb	r3, [r7, #18]
 8009b4e:	e005      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009b50:	40021000 	.word	0x40021000
 8009b54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b58:	7cfb      	ldrb	r3, [r7, #19]
 8009b5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b5c:	7c7b      	ldrb	r3, [r7, #17]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d105      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b62:	4ba0      	ldr	r3, [pc, #640]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b66:	4a9f      	ldr	r2, [pc, #636]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b7a:	4b9a      	ldr	r3, [pc, #616]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b80:	f023 0203 	bic.w	r2, r3, #3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b88:	4996      	ldr	r1, [pc, #600]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00a      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b9c:	4b91      	ldr	r3, [pc, #580]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ba2:	f023 020c 	bic.w	r2, r3, #12
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009baa:	498e      	ldr	r1, [pc, #568]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0304 	and.w	r3, r3, #4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009bbe:	4b89      	ldr	r3, [pc, #548]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bcc:	4985      	ldr	r1, [pc, #532]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0308 	and.w	r3, r3, #8
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009be0:	4b80      	ldr	r3, [pc, #512]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bee:	497d      	ldr	r1, [pc, #500]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0310 	and.w	r3, r3, #16
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009c02:	4b78      	ldr	r3, [pc, #480]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c10:	4974      	ldr	r1, [pc, #464]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0320 	and.w	r3, r3, #32
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c24:	4b6f      	ldr	r3, [pc, #444]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c32:	496c      	ldr	r1, [pc, #432]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c46:	4b67      	ldr	r3, [pc, #412]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c54:	4963      	ldr	r1, [pc, #396]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c68:	4b5e      	ldr	r3, [pc, #376]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c76:	495b      	ldr	r1, [pc, #364]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c8a:	4b56      	ldr	r3, [pc, #344]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c98:	4952      	ldr	r1, [pc, #328]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00a      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009cac:	4b4d      	ldr	r3, [pc, #308]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cba:	494a      	ldr	r1, [pc, #296]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00a      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009cce:	4b45      	ldr	r3, [pc, #276]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cdc:	4941      	ldr	r1, [pc, #260]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00a      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009cf6:	f023 0203 	bic.w	r2, r3, #3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cfe:	4939      	ldr	r1, [pc, #228]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d00:	4313      	orrs	r3, r2
 8009d02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d028      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d12:	4b34      	ldr	r3, [pc, #208]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d20:	4930      	ldr	r1, [pc, #192]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d30:	d106      	bne.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d32:	4b2c      	ldr	r3, [pc, #176]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	4a2b      	ldr	r2, [pc, #172]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d3c:	60d3      	str	r3, [r2, #12]
 8009d3e:	e011      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d48:	d10c      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 f82b 	bl	800adac <RCCEx_PLLSAI1_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009d5a:	7cfb      	ldrb	r3, [r7, #19]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009d60:	7cfb      	ldrb	r3, [r7, #19]
 8009d62:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d04d      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d78:	d108      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d80:	4a18      	ldr	r2, [pc, #96]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d86:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8009d8a:	e012      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009d8c:	4b15      	ldr	r3, [pc, #84]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d92:	4a14      	ldr	r2, [pc, #80]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d98:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8009d9c:	4b11      	ldr	r3, [pc, #68]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009daa:	490e      	ldr	r1, [pc, #56]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dba:	d106      	bne.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dbc:	4b09      	ldr	r3, [pc, #36]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	4a08      	ldr	r2, [pc, #32]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dc6:	60d3      	str	r3, [r2, #12]
 8009dc8:	e020      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dd2:	d109      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009dd4:	4b03      	ldr	r3, [pc, #12]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	4a02      	ldr	r2, [pc, #8]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dde:	60d3      	str	r3, [r2, #12]
 8009de0:	e014      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009de2:	bf00      	nop
 8009de4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009df0:	d10c      	bne.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3304      	adds	r3, #4
 8009df6:	2101      	movs	r1, #1
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 ffd7 	bl	800adac <RCCEx_PLLSAI1_Config>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e02:	7cfb      	ldrb	r3, [r7, #19]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009e08:	7cfb      	ldrb	r3, [r7, #19]
 8009e0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d028      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e18:	4b4a      	ldr	r3, [pc, #296]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e26:	4947      	ldr	r1, [pc, #284]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e36:	d106      	bne.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e38:	4b42      	ldr	r3, [pc, #264]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	4a41      	ldr	r2, [pc, #260]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e42:	60d3      	str	r3, [r2, #12]
 8009e44:	e011      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e4e:	d10c      	bne.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3304      	adds	r3, #4
 8009e54:	2101      	movs	r1, #1
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 ffa8 	bl	800adac <RCCEx_PLLSAI1_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e60:	7cfb      	ldrb	r3, [r7, #19]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8009e66:	7cfb      	ldrb	r3, [r7, #19]
 8009e68:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01e      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e76:	4b33      	ldr	r3, [pc, #204]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e7c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e86:	492f      	ldr	r1, [pc, #188]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e98:	d10c      	bne.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	2102      	movs	r1, #2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 ff83 	bl	800adac <RCCEx_PLLSAI1_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009eaa:	7cfb      	ldrb	r3, [r7, #19]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009eb0:	7cfb      	ldrb	r3, [r7, #19]
 8009eb2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ec0:	4b20      	ldr	r3, [pc, #128]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ec6:	f023 0204 	bic.w	r2, r3, #4
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ed0:	491c      	ldr	r1, [pc, #112]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00b      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009ee4:	4b17      	ldr	r3, [pc, #92]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009eea:	f023 0218 	bic.w	r2, r3, #24
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ef4:	4913      	ldr	r1, [pc, #76]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d017      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009f08:	4b0e      	ldr	r3, [pc, #56]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f18:	490a      	ldr	r1, [pc, #40]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f2a:	d105      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f2c:	4b05      	ldr	r3, [pc, #20]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	4a04      	ldr	r2, [pc, #16]	@ (8009f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009f38:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	40021000 	.word	0x40021000

08009f48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009f50:	2300      	movs	r3, #0
 8009f52:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f5a:	d13e      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009f5c:	4bb6      	ldr	r3, [pc, #728]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f66:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f6e:	d028      	beq.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f76:	f200 86f4 	bhi.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f80:	d005      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f88:	d00e      	beq.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009f8a:	f000 beea 	b.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f8e:	4baa      	ldr	r3, [pc, #680]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f94:	f003 0302 	and.w	r3, r3, #2
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	f040 86e4 	bne.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8009f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fa2:	61fb      	str	r3, [r7, #28]
      break;
 8009fa4:	f000 bedf 	b.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009fa8:	4ba3      	ldr	r3, [pc, #652]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	f040 86d9 	bne.w	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8009fb8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009fbc:	61fb      	str	r3, [r7, #28]
      break;
 8009fbe:	f000 bed4 	b.w	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fc2:	4b9d      	ldr	r3, [pc, #628]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fce:	f040 86ce 	bne.w	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8009fd2:	4b9a      	ldr	r3, [pc, #616]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009fd4:	61fb      	str	r3, [r7, #28]
      break;
 8009fd6:	f000 beca 	b.w	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fda:	4b97      	ldr	r3, [pc, #604]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f003 0303 	and.w	r3, r3, #3
 8009fe2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d036      	beq.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d840      	bhi.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d003      	beq.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d020      	beq.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009ffc:	e039      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009ffe:	4b8e      	ldr	r3, [pc, #568]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0302 	and.w	r3, r3, #2
 800a006:	2b02      	cmp	r3, #2
 800a008:	d116      	bne.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a00a:	4b8b      	ldr	r3, [pc, #556]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d005      	beq.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a016:	4b88      	ldr	r3, [pc, #544]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	091b      	lsrs	r3, r3, #4
 800a01c:	f003 030f 	and.w	r3, r3, #15
 800a020:	e005      	b.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a022:	4b85      	ldr	r3, [pc, #532]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a028:	0a1b      	lsrs	r3, r3, #8
 800a02a:	f003 030f 	and.w	r3, r3, #15
 800a02e:	4a84      	ldr	r2, [pc, #528]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a034:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a036:	e01f      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	61bb      	str	r3, [r7, #24]
      break;
 800a03c:	e01c      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a03e:	4b7e      	ldr	r3, [pc, #504]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a04a:	d102      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a04c:	4b7d      	ldr	r3, [pc, #500]	@ (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a04e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a050:	e012      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	61bb      	str	r3, [r7, #24]
      break;
 800a056:	e00f      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a058:	4b77      	ldr	r3, [pc, #476]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a064:	d102      	bne.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a066:	4b78      	ldr	r3, [pc, #480]	@ (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a068:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a06a:	e005      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	61bb      	str	r3, [r7, #24]
      break;
 800a070:	e002      	b.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	61bb      	str	r3, [r7, #24]
      break;
 800a076:	bf00      	nop
    }

    switch(PeriphClk)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a07e:	f000 8606 	beq.w	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a088:	f200 8673 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a092:	f000 8469 	beq.w	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a09c:	f200 8669 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0a6:	f000 8531 	beq.w	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0b0:	f200 865f 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a0ba:	f000 8187 	beq.w	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a0c4:	f200 8655 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0ce:	f000 80cd 	beq.w	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0d8:	f200 864b 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0e2:	f000 8430 	beq.w	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ec:	f200 8641 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0f6:	f000 83e4 	beq.w	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a100:	f200 8637 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a10a:	f000 80af 	beq.w	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a114:	f200 862d 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a11e:	f000 809d 	beq.w	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a128:	f200 8623 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a132:	f000 808b 	beq.w	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a13c:	f200 8619 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a146:	f000 8554 	beq.w	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a150:	f200 860f 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a15a:	f000 8500 	beq.w	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a164:	f200 8605 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a16e:	f000 84a1 	beq.w	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a178:	f200 85fb 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b80      	cmp	r3, #128	@ 0x80
 800a180:	f000 846c 	beq.w	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b80      	cmp	r3, #128	@ 0x80
 800a188:	f200 85f3 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b20      	cmp	r3, #32
 800a190:	d84c      	bhi.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 85ec 	beq.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	2b1f      	cmp	r3, #31
 800a1a0:	f200 85e7 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1aa:	bf00      	nop
 800a1ac:	0800a5c1 	.word	0x0800a5c1
 800a1b0:	0800a62f 	.word	0x0800a62f
 800a1b4:	0800ad73 	.word	0x0800ad73
 800a1b8:	0800a6c3 	.word	0x0800a6c3
 800a1bc:	0800ad73 	.word	0x0800ad73
 800a1c0:	0800ad73 	.word	0x0800ad73
 800a1c4:	0800ad73 	.word	0x0800ad73
 800a1c8:	0800a73b 	.word	0x0800a73b
 800a1cc:	0800ad73 	.word	0x0800ad73
 800a1d0:	0800ad73 	.word	0x0800ad73
 800a1d4:	0800ad73 	.word	0x0800ad73
 800a1d8:	0800ad73 	.word	0x0800ad73
 800a1dc:	0800ad73 	.word	0x0800ad73
 800a1e0:	0800ad73 	.word	0x0800ad73
 800a1e4:	0800ad73 	.word	0x0800ad73
 800a1e8:	0800a7bf 	.word	0x0800a7bf
 800a1ec:	0800ad73 	.word	0x0800ad73
 800a1f0:	0800ad73 	.word	0x0800ad73
 800a1f4:	0800ad73 	.word	0x0800ad73
 800a1f8:	0800ad73 	.word	0x0800ad73
 800a1fc:	0800ad73 	.word	0x0800ad73
 800a200:	0800ad73 	.word	0x0800ad73
 800a204:	0800ad73 	.word	0x0800ad73
 800a208:	0800ad73 	.word	0x0800ad73
 800a20c:	0800ad73 	.word	0x0800ad73
 800a210:	0800ad73 	.word	0x0800ad73
 800a214:	0800ad73 	.word	0x0800ad73
 800a218:	0800ad73 	.word	0x0800ad73
 800a21c:	0800ad73 	.word	0x0800ad73
 800a220:	0800ad73 	.word	0x0800ad73
 800a224:	0800ad73 	.word	0x0800ad73
 800a228:	0800a841 	.word	0x0800a841
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b40      	cmp	r3, #64	@ 0x40
 800a230:	f000 83e8 	beq.w	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a234:	f000 bd9d 	b.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a238:	40021000 	.word	0x40021000
 800a23c:	0003d090 	.word	0x0003d090
 800a240:	080175c8 	.word	0x080175c8
 800a244:	00f42400 	.word	0x00f42400
 800a248:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a24c:	69b9      	ldr	r1, [r7, #24]
 800a24e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a252:	f000 ff93 	bl	800b17c <RCCEx_GetSAIxPeriphCLKFreq>
 800a256:	61f8      	str	r0, [r7, #28]
      break;
 800a258:	f000 bd8e 	b.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a25c:	69b9      	ldr	r1, [r7, #24]
 800a25e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a262:	f000 ff8b 	bl	800b17c <RCCEx_GetSAIxPeriphCLKFreq>
 800a266:	61f8      	str	r0, [r7, #28]
      break;
 800a268:	f000 bd86 	b.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a26c:	4b9a      	ldr	r3, [pc, #616]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a272:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a27e:	d015      	beq.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a286:	f200 8092 	bhi.w	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a290:	d029      	beq.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a298:	f200 8089 	bhi.w	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d07b      	beq.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2a8:	d04a      	beq.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800a2aa:	e080      	b.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a2ac:	4b8a      	ldr	r3, [pc, #552]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0302 	and.w	r3, r3, #2
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d17d      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a2b8:	4b87      	ldr	r3, [pc, #540]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0308 	and.w	r3, r3, #8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800a2c4:	4b84      	ldr	r3, [pc, #528]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	091b      	lsrs	r3, r3, #4
 800a2ca:	f003 030f 	and.w	r3, r3, #15
 800a2ce:	e005      	b.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800a2d0:	4b81      	ldr	r3, [pc, #516]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2d6:	0a1b      	lsrs	r3, r3, #8
 800a2d8:	f003 030f 	and.w	r3, r3, #15
 800a2dc:	4a7f      	ldr	r2, [pc, #508]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2e2:	61fb      	str	r3, [r7, #28]
          break;
 800a2e4:	e066      	b.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a2e6:	4b7c      	ldr	r3, [pc, #496]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2f2:	d162      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a2f4:	4b78      	ldr	r3, [pc, #480]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a300:	d15b      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a302:	4b75      	ldr	r3, [pc, #468]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	0a1b      	lsrs	r3, r3, #8
 800a308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a30c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	fb03 f202 	mul.w	r2, r3, r2
 800a316:	4b70      	ldr	r3, [pc, #448]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	091b      	lsrs	r3, r3, #4
 800a31c:	f003 030f 	and.w	r3, r3, #15
 800a320:	3301      	adds	r3, #1
 800a322:	fbb2 f3f3 	udiv	r3, r2, r3
 800a326:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a328:	4b6b      	ldr	r3, [pc, #428]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	0d5b      	lsrs	r3, r3, #21
 800a32e:	f003 0303 	and.w	r3, r3, #3
 800a332:	3301      	adds	r3, #1
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	fbb2 f3f3 	udiv	r3, r2, r3
 800a33c:	61fb      	str	r3, [r7, #28]
          break;
 800a33e:	e03c      	b.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a340:	4b65      	ldr	r3, [pc, #404]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a34c:	d138      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a34e:	4b62      	ldr	r3, [pc, #392]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a35a:	d131      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a35c:	4b5e      	ldr	r3, [pc, #376]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	0a1b      	lsrs	r3, r3, #8
 800a362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a366:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	fb03 f202 	mul.w	r2, r3, r2
 800a370:	4b59      	ldr	r3, [pc, #356]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	091b      	lsrs	r3, r3, #4
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	3301      	adds	r3, #1
 800a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a380:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a382:	4b55      	ldr	r3, [pc, #340]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	0d5b      	lsrs	r3, r3, #21
 800a388:	f003 0303 	and.w	r3, r3, #3
 800a38c:	3301      	adds	r3, #1
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	fbb2 f3f3 	udiv	r3, r2, r3
 800a396:	61fb      	str	r3, [r7, #28]
          break;
 800a398:	e012      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a39a:	4b4f      	ldr	r3, [pc, #316]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a39c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d10e      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800a3a8:	4b4d      	ldr	r3, [pc, #308]	@ (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a3aa:	61fb      	str	r3, [r7, #28]
          break;
 800a3ac:	e00b      	b.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800a3ae:	bf00      	nop
 800a3b0:	f000 bce2 	b.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a3b4:	bf00      	nop
 800a3b6:	f000 bcdf 	b.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a3ba:	bf00      	nop
 800a3bc:	f000 bcdc 	b.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a3c0:	bf00      	nop
 800a3c2:	f000 bcd9 	b.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a3c6:	bf00      	nop
        break;
 800a3c8:	f000 bcd6 	b.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800a3cc:	4b42      	ldr	r3, [pc, #264]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3da:	d13d      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a3dc:	4b3e      	ldr	r3, [pc, #248]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3e8:	f040 84c5 	bne.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800a3ec:	4b3a      	ldr	r3, [pc, #232]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3f8:	f040 84bd 	bne.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a3fc:	4b36      	ldr	r3, [pc, #216]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	0a1b      	lsrs	r3, r3, #8
 800a402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a406:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	fb03 f202 	mul.w	r2, r3, r2
 800a410:	4b31      	ldr	r3, [pc, #196]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	091b      	lsrs	r3, r3, #4
 800a416:	f003 030f 	and.w	r3, r3, #15
 800a41a:	3301      	adds	r3, #1
 800a41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a420:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a422:	4b2d      	ldr	r3, [pc, #180]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	0edb      	lsrs	r3, r3, #27
 800a428:	f003 031f 	and.w	r3, r3, #31
 800a42c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a434:	4b28      	ldr	r3, [pc, #160]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800a440:	2311      	movs	r3, #17
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	e001      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800a446:	2307      	movs	r3, #7
 800a448:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a452:	61fb      	str	r3, [r7, #28]
      break;
 800a454:	f000 bc8f 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a458:	4b1f      	ldr	r3, [pc, #124]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a45e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a46a:	d016      	beq.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a472:	f200 809b 	bhi.w	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a47c:	d032      	beq.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a484:	f200 8092 	bhi.w	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 8084 	beq.w	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a496:	d052      	beq.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800a498:	e088      	b.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a49a:	4b0f      	ldr	r3, [pc, #60]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	f040 8084 	bne.w	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0308 	and.w	r3, r3, #8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a4b4:	4b08      	ldr	r3, [pc, #32]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	091b      	lsrs	r3, r3, #4
 800a4ba:	f003 030f 	and.w	r3, r3, #15
 800a4be:	e005      	b.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800a4c0:	4b05      	ldr	r3, [pc, #20]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a4c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4c6:	0a1b      	lsrs	r3, r3, #8
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	4a03      	ldr	r2, [pc, #12]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d2:	61fb      	str	r3, [r7, #28]
          break;
 800a4d4:	e06c      	b.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800a4d6:	bf00      	nop
 800a4d8:	40021000 	.word	0x40021000
 800a4dc:	080175c8 	.word	0x080175c8
 800a4e0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a4e4:	4ba5      	ldr	r3, [pc, #660]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4f0:	d160      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a4f2:	4ba2      	ldr	r3, [pc, #648]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4fe:	d159      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a500:	4b9e      	ldr	r3, [pc, #632]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	0a1b      	lsrs	r3, r3, #8
 800a506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a50a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	fb03 f202 	mul.w	r2, r3, r2
 800a514:	4b99      	ldr	r3, [pc, #612]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	091b      	lsrs	r3, r3, #4
 800a51a:	f003 030f 	and.w	r3, r3, #15
 800a51e:	3301      	adds	r3, #1
 800a520:	fbb2 f3f3 	udiv	r3, r2, r3
 800a524:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a526:	4b95      	ldr	r3, [pc, #596]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	0d5b      	lsrs	r3, r3, #21
 800a52c:	f003 0303 	and.w	r3, r3, #3
 800a530:	3301      	adds	r3, #1
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	fbb2 f3f3 	udiv	r3, r2, r3
 800a53a:	61fb      	str	r3, [r7, #28]
          break;
 800a53c:	e03a      	b.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a53e:	4b8f      	ldr	r3, [pc, #572]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a54a:	d135      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a54c:	4b8b      	ldr	r3, [pc, #556]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a558:	d12e      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a55a:	4b88      	ldr	r3, [pc, #544]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	0a1b      	lsrs	r3, r3, #8
 800a560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a564:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	fb03 f202 	mul.w	r2, r3, r2
 800a56e:	4b83      	ldr	r3, [pc, #524]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	091b      	lsrs	r3, r3, #4
 800a574:	f003 030f 	and.w	r3, r3, #15
 800a578:	3301      	adds	r3, #1
 800a57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a580:	4b7e      	ldr	r3, [pc, #504]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	0d5b      	lsrs	r3, r3, #21
 800a586:	f003 0303 	and.w	r3, r3, #3
 800a58a:	3301      	adds	r3, #1
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	69ba      	ldr	r2, [r7, #24]
 800a590:	fbb2 f3f3 	udiv	r3, r2, r3
 800a594:	61fb      	str	r3, [r7, #28]
          break;
 800a596:	e00f      	b.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a598:	4b78      	ldr	r3, [pc, #480]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a59a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d10a      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800a5a6:	4b76      	ldr	r3, [pc, #472]	@ (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a5a8:	61fb      	str	r3, [r7, #28]
          break;
 800a5aa:	e007      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800a5ac:	bf00      	nop
 800a5ae:	e3e2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a5b0:	bf00      	nop
 800a5b2:	e3e0      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a5b4:	bf00      	nop
 800a5b6:	e3de      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a5b8:	bf00      	nop
 800a5ba:	e3dc      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a5bc:	bf00      	nop
      break;
 800a5be:	e3da      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a5c0:	4b6e      	ldr	r3, [pc, #440]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d827      	bhi.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800a5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d8:	0800a5e9 	.word	0x0800a5e9
 800a5dc:	0800a5f1 	.word	0x0800a5f1
 800a5e0:	0800a5f9 	.word	0x0800a5f9
 800a5e4:	0800a60d 	.word	0x0800a60d
          frequency = HAL_RCC_GetPCLK2Freq();
 800a5e8:	f7ff f8a8 	bl	800973c <HAL_RCC_GetPCLK2Freq>
 800a5ec:	61f8      	str	r0, [r7, #28]
          break;
 800a5ee:	e01d      	b.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800a5f0:	f7fe fff6 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800a5f4:	61f8      	str	r0, [r7, #28]
          break;
 800a5f6:	e019      	b.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5f8:	4b60      	ldr	r3, [pc, #384]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a604:	d10f      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800a606:	4b5f      	ldr	r3, [pc, #380]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a608:	61fb      	str	r3, [r7, #28]
          break;
 800a60a:	e00c      	b.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a60c:	4b5b      	ldr	r3, [pc, #364]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b02      	cmp	r3, #2
 800a618:	d107      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800a61a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a61e:	61fb      	str	r3, [r7, #28]
          break;
 800a620:	e003      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800a622:	bf00      	nop
 800a624:	e3a8      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a626:	bf00      	nop
 800a628:	e3a6      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a62a:	bf00      	nop
        break;
 800a62c:	e3a4      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a62e:	4b53      	ldr	r3, [pc, #332]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a634:	f003 030c 	and.w	r3, r3, #12
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b0c      	cmp	r3, #12
 800a63e:	d83a      	bhi.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a640:	a201      	add	r2, pc, #4	@ (adr r2, 800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a67d 	.word	0x0800a67d
 800a64c:	0800a6b7 	.word	0x0800a6b7
 800a650:	0800a6b7 	.word	0x0800a6b7
 800a654:	0800a6b7 	.word	0x0800a6b7
 800a658:	0800a685 	.word	0x0800a685
 800a65c:	0800a6b7 	.word	0x0800a6b7
 800a660:	0800a6b7 	.word	0x0800a6b7
 800a664:	0800a6b7 	.word	0x0800a6b7
 800a668:	0800a68d 	.word	0x0800a68d
 800a66c:	0800a6b7 	.word	0x0800a6b7
 800a670:	0800a6b7 	.word	0x0800a6b7
 800a674:	0800a6b7 	.word	0x0800a6b7
 800a678:	0800a6a1 	.word	0x0800a6a1
          frequency = HAL_RCC_GetPCLK1Freq();
 800a67c:	f7ff f848 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800a680:	61f8      	str	r0, [r7, #28]
          break;
 800a682:	e01d      	b.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800a684:	f7fe ffac 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800a688:	61f8      	str	r0, [r7, #28]
          break;
 800a68a:	e019      	b.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a68c:	4b3b      	ldr	r3, [pc, #236]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a698:	d10f      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800a69a:	4b3a      	ldr	r3, [pc, #232]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a69c:	61fb      	str	r3, [r7, #28]
          break;
 800a69e:	e00c      	b.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a6a0:	4b36      	ldr	r3, [pc, #216]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d107      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800a6ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6b2:	61fb      	str	r3, [r7, #28]
          break;
 800a6b4:	e003      	b.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800a6b6:	bf00      	nop
 800a6b8:	e35e      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a6ba:	bf00      	nop
 800a6bc:	e35c      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a6be:	bf00      	nop
        break;
 800a6c0:	e35a      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a6c2:	4b2e      	ldr	r3, [pc, #184]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b30      	cmp	r3, #48	@ 0x30
 800a6d2:	d021      	beq.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b30      	cmp	r3, #48	@ 0x30
 800a6d8:	d829      	bhi.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d011      	beq.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	d823      	bhi.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b10      	cmp	r3, #16
 800a6f0:	d004      	beq.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800a6f2:	e01c      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6f4:	f7ff f80c 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800a6f8:	61f8      	str	r0, [r7, #28]
          break;
 800a6fa:	e01d      	b.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a6fc:	f7fe ff70 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800a700:	61f8      	str	r0, [r7, #28]
          break;
 800a702:	e019      	b.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a704:	4b1d      	ldr	r3, [pc, #116]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a70c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a710:	d10f      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800a712:	4b1c      	ldr	r3, [pc, #112]	@ (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a714:	61fb      	str	r3, [r7, #28]
          break;
 800a716:	e00c      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a718:	4b18      	ldr	r3, [pc, #96]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b02      	cmp	r3, #2
 800a724:	d107      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800a726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a72a:	61fb      	str	r3, [r7, #28]
          break;
 800a72c:	e003      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800a72e:	bf00      	nop
 800a730:	e322      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a732:	bf00      	nop
 800a734:	e320      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a736:	bf00      	nop
        break;
 800a738:	e31e      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a73a:	4b10      	ldr	r3, [pc, #64]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a740:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a744:	60fb      	str	r3, [r7, #12]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2bc0      	cmp	r3, #192	@ 0xc0
 800a74a:	d027      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a750:	d82f      	bhi.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b80      	cmp	r3, #128	@ 0x80
 800a756:	d017      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b80      	cmp	r3, #128	@ 0x80
 800a75c:	d829      	bhi.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b40      	cmp	r3, #64	@ 0x40
 800a768:	d004      	beq.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800a76a:	e022      	b.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a76c:	f7fe ffd0 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800a770:	61f8      	str	r0, [r7, #28]
          break;
 800a772:	e023      	b.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800a774:	f7fe ff34 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800a778:	61f8      	str	r0, [r7, #28]
          break;
 800a77a:	e01f      	b.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800a77c:	40021000 	.word	0x40021000
 800a780:	02dc6c00 	.word	0x02dc6c00
 800a784:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a788:	4b9b      	ldr	r3, [pc, #620]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a794:	d10f      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800a796:	4b99      	ldr	r3, [pc, #612]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a798:	61fb      	str	r3, [r7, #28]
          break;
 800a79a:	e00c      	b.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a79c:	4b96      	ldr	r3, [pc, #600]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7a2:	f003 0302 	and.w	r3, r3, #2
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d107      	bne.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800a7aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7ae:	61fb      	str	r3, [r7, #28]
          break;
 800a7b0:	e003      	b.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800a7b2:	bf00      	nop
 800a7b4:	e2e0      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a7b6:	bf00      	nop
 800a7b8:	e2de      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a7ba:	bf00      	nop
        break;
 800a7bc:	e2dc      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a7be:	4b8e      	ldr	r3, [pc, #568]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7c8:	60fb      	str	r3, [r7, #12]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7d0:	d025      	beq.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7d8:	d82c      	bhi.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e0:	d013      	beq.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e8:	d824      	bhi.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d004      	beq.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7f6:	d004      	beq.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800a7f8:	e01c      	b.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a7fa:	f7fe ff89 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800a7fe:	61f8      	str	r0, [r7, #28]
          break;
 800a800:	e01d      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800a802:	f7fe feed 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800a806:	61f8      	str	r0, [r7, #28]
          break;
 800a808:	e019      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a80a:	4b7b      	ldr	r3, [pc, #492]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a816:	d10f      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800a818:	4b78      	ldr	r3, [pc, #480]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a81a:	61fb      	str	r3, [r7, #28]
          break;
 800a81c:	e00c      	b.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a81e:	4b76      	ldr	r3, [pc, #472]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d107      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800a82c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a830:	61fb      	str	r3, [r7, #28]
          break;
 800a832:	e003      	b.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800a834:	bf00      	nop
 800a836:	e29f      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a838:	bf00      	nop
 800a83a:	e29d      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a83c:	bf00      	nop
        break;
 800a83e:	e29b      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a840:	4b6d      	ldr	r3, [pc, #436]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a846:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a852:	d025      	beq.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a85a:	d82c      	bhi.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a862:	d013      	beq.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a86a:	d824      	bhi.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d004      	beq.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a878:	d004      	beq.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800a87a:	e01c      	b.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a87c:	f7fe ff48 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800a880:	61f8      	str	r0, [r7, #28]
          break;
 800a882:	e01d      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800a884:	f7fe feac 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800a888:	61f8      	str	r0, [r7, #28]
          break;
 800a88a:	e019      	b.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a88c:	4b5a      	ldr	r3, [pc, #360]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a898:	d10f      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800a89a:	4b58      	ldr	r3, [pc, #352]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a89c:	61fb      	str	r3, [r7, #28]
          break;
 800a89e:	e00c      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a8a0:	4b55      	ldr	r3, [pc, #340]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a8a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d107      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800a8ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8b2:	61fb      	str	r3, [r7, #28]
          break;
 800a8b4:	e003      	b.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800a8b6:	bf00      	nop
 800a8b8:	e25e      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8ba:	bf00      	nop
 800a8bc:	e25c      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8be:	bf00      	nop
        break;
 800a8c0:	e25a      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a8c2:	4b4d      	ldr	r3, [pc, #308]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8cc:	60fb      	str	r3, [r7, #12]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8d4:	d007      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a8dc:	d12f      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800a8de:	f7fe fe7f 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800a8e2:	61f8      	str	r0, [r7, #28]
          break;
 800a8e4:	e02e      	b.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a8e6:	4b44      	ldr	r3, [pc, #272]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8f2:	d126      	bne.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800a8f4:	4b40      	ldr	r3, [pc, #256]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d020      	beq.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a900:	4b3d      	ldr	r3, [pc, #244]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	0a1b      	lsrs	r3, r3, #8
 800a906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a90a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	fb03 f202 	mul.w	r2, r3, r2
 800a914:	4b38      	ldr	r3, [pc, #224]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	091b      	lsrs	r3, r3, #4
 800a91a:	f003 030f 	and.w	r3, r3, #15
 800a91e:	3301      	adds	r3, #1
 800a920:	fbb2 f3f3 	udiv	r3, r2, r3
 800a924:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a926:	4b34      	ldr	r3, [pc, #208]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	0e5b      	lsrs	r3, r3, #25
 800a92c:	f003 0303 	and.w	r3, r3, #3
 800a930:	3301      	adds	r3, #1
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	69ba      	ldr	r2, [r7, #24]
 800a936:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93a:	61fb      	str	r3, [r7, #28]
          break;
 800a93c:	e001      	b.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800a93e:	bf00      	nop
 800a940:	e21a      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a942:	bf00      	nop
        break;
 800a944:	e218      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a946:	4b2c      	ldr	r3, [pc, #176]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a948:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d103      	bne.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a958:	f7fe fef0 	bl	800973c <HAL_RCC_GetPCLK2Freq>
 800a95c:	61f8      	str	r0, [r7, #28]
        break;
 800a95e:	e20b      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800a960:	f7fe fe3e 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800a964:	61f8      	str	r0, [r7, #28]
        break;
 800a966:	e207      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800a968:	4b23      	ldr	r3, [pc, #140]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a96a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a96e:	f003 0318 	and.w	r3, r3, #24
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b10      	cmp	r3, #16
 800a978:	d010      	beq.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b10      	cmp	r3, #16
 800a97e:	d834      	bhi.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b08      	cmp	r3, #8
 800a98a:	d024      	beq.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800a98c:	e02d      	b.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a98e:	69b9      	ldr	r1, [r7, #24]
 800a990:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a994:	f000 fbf2 	bl	800b17c <RCCEx_GetSAIxPeriphCLKFreq>
 800a998:	61f8      	str	r0, [r7, #28]
          break;
 800a99a:	e02b      	b.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a99c:	4b16      	ldr	r3, [pc, #88]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d122      	bne.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a9a8:	4b13      	ldr	r3, [pc, #76]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0308 	and.w	r3, r3, #8
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d005      	beq.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800a9b4:	4b10      	ldr	r3, [pc, #64]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	091b      	lsrs	r3, r3, #4
 800a9ba:	f003 030f 	and.w	r3, r3, #15
 800a9be:	e005      	b.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800a9c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a9c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9c6:	0a1b      	lsrs	r3, r3, #8
 800a9c8:	f003 030f 	and.w	r3, r3, #15
 800a9cc:	4a0c      	ldr	r2, [pc, #48]	@ (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800a9ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d2:	61fb      	str	r3, [r7, #28]
          break;
 800a9d4:	e00b      	b.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9d6:	4b08      	ldr	r3, [pc, #32]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9e2:	d106      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800a9e4:	4b05      	ldr	r3, [pc, #20]	@ (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a9e6:	61fb      	str	r3, [r7, #28]
          break;
 800a9e8:	e003      	b.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800a9ea:	bf00      	nop
 800a9ec:	e1c4      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a9ee:	bf00      	nop
 800a9f0:	e1c2      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a9f2:	bf00      	nop
        break;
 800a9f4:	e1c0      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800a9f6:	bf00      	nop
 800a9f8:	40021000 	.word	0x40021000
 800a9fc:	00f42400 	.word	0x00f42400
 800aa00:	080175c8 	.word	0x080175c8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800aa04:	4b96      	ldr	r3, [pc, #600]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa0a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800aa0e:	60fb      	str	r3, [r7, #12]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa16:	d013      	beq.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa1e:	d819      	bhi.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d004      	beq.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa2c:	d004      	beq.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800aa2e:	e011      	b.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aa30:	f7fe fe6e 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800aa34:	61f8      	str	r0, [r7, #28]
          break;
 800aa36:	e010      	b.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800aa38:	f7fe fdd2 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800aa3c:	61f8      	str	r0, [r7, #28]
          break;
 800aa3e:	e00c      	b.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa40:	4b87      	ldr	r3, [pc, #540]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa4c:	d104      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800aa4e:	4b85      	ldr	r3, [pc, #532]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800aa50:	61fb      	str	r3, [r7, #28]
          break;
 800aa52:	e001      	b.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800aa54:	bf00      	nop
 800aa56:	e18f      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aa58:	bf00      	nop
        break;
 800aa5a:	e18d      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800aa5c:	4b80      	ldr	r3, [pc, #512]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aa5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa6e:	d013      	beq.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa76:	d819      	bhi.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d004      	beq.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa84:	d004      	beq.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800aa86:	e011      	b.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aa88:	f7fe fe42 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800aa8c:	61f8      	str	r0, [r7, #28]
          break;
 800aa8e:	e010      	b.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800aa90:	f7fe fda6 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800aa94:	61f8      	str	r0, [r7, #28]
          break;
 800aa96:	e00c      	b.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa98:	4b71      	ldr	r3, [pc, #452]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aaa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaa4:	d104      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800aaa6:	4b6f      	ldr	r3, [pc, #444]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800aaa8:	61fb      	str	r3, [r7, #28]
          break;
 800aaaa:	e001      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800aaac:	bf00      	nop
 800aaae:	e163      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aab0:	bf00      	nop
        break;
 800aab2:	e161      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800aab4:	4b6a      	ldr	r3, [pc, #424]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aac6:	d013      	beq.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aace:	d819      	bhi.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aadc:	d004      	beq.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800aade:	e011      	b.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aae0:	f7fe fe16 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800aae4:	61f8      	str	r0, [r7, #28]
          break;
 800aae6:	e010      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800aae8:	f7fe fd7a 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800aaec:	61f8      	str	r0, [r7, #28]
          break;
 800aaee:	e00c      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aaf0:	4b5b      	ldr	r3, [pc, #364]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aaf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aafc:	d104      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800aafe:	4b59      	ldr	r3, [pc, #356]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800ab00:	61fb      	str	r3, [r7, #28]
          break;
 800ab02:	e001      	b.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800ab04:	bf00      	nop
 800ab06:	e137      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab08:	bf00      	nop
        break;
 800ab0a:	e135      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ab0c:	4b54      	ldr	r3, [pc, #336]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ab0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d011      	beq.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d818      	bhi.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d004      	beq.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800ab30:	e011      	b.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab32:	f7fe fded 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800ab36:	61f8      	str	r0, [r7, #28]
          break;
 800ab38:	e010      	b.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800ab3a:	f7fe fd51 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800ab3e:	61f8      	str	r0, [r7, #28]
          break;
 800ab40:	e00c      	b.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab42:	4b47      	ldr	r3, [pc, #284]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab4e:	d104      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800ab50:	4b44      	ldr	r3, [pc, #272]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800ab52:	61fb      	str	r3, [r7, #28]
          break;
 800ab54:	e001      	b.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800ab56:	bf00      	nop
 800ab58:	e10e      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab5a:	bf00      	nop
        break;
 800ab5c:	e10c      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ab5e:	4b40      	ldr	r3, [pc, #256]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ab60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab64:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800ab68:	60fb      	str	r3, [r7, #12]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ab70:	d02c      	beq.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ab78:	d833      	bhi.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ab80:	d01a      	beq.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ab88:	d82b      	bhi.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d004      	beq.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab96:	d004      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800ab98:	e023      	b.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab9a:	f7fe fdb9 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800ab9e:	61f8      	str	r0, [r7, #28]
          break;
 800aba0:	e026      	b.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800aba2:	4b2f      	ldr	r3, [pc, #188]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b02      	cmp	r3, #2
 800abae:	d11a      	bne.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800abb0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800abb4:	61fb      	str	r3, [r7, #28]
          break;
 800abb6:	e016      	b.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abb8:	4b29      	ldr	r3, [pc, #164]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abc4:	d111      	bne.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800abc6:	4b27      	ldr	r3, [pc, #156]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800abc8:	61fb      	str	r3, [r7, #28]
          break;
 800abca:	e00e      	b.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800abcc:	4b24      	ldr	r3, [pc, #144]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800abce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd2:	f003 0302 	and.w	r3, r3, #2
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d109      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800abda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abde:	61fb      	str	r3, [r7, #28]
          break;
 800abe0:	e005      	b.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800abe2:	bf00      	nop
 800abe4:	e0c8      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abe6:	bf00      	nop
 800abe8:	e0c6      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abea:	bf00      	nop
 800abec:	e0c4      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abee:	bf00      	nop
        break;
 800abf0:	e0c2      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800abf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800abf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abf8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800abfc:	60fb      	str	r3, [r7, #12]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac04:	d030      	beq.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac0c:	d837      	bhi.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac14:	d01a      	beq.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac1c:	d82f      	bhi.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d004      	beq.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac2a:	d004      	beq.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800ac2c:	e027      	b.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac2e:	f7fe fd6f 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800ac32:	61f8      	str	r0, [r7, #28]
          break;
 800ac34:	e02a      	b.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ac36:	4b0a      	ldr	r3, [pc, #40]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ac38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac3c:	f003 0302 	and.w	r3, r3, #2
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d11e      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800ac44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac48:	61fb      	str	r3, [r7, #28]
          break;
 800ac4a:	e01a      	b.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac4c:	4b04      	ldr	r3, [pc, #16]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac58:	d115      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800ac5a:	4b02      	ldr	r3, [pc, #8]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800ac5c:	61fb      	str	r3, [r7, #28]
          break;
 800ac5e:	e012      	b.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800ac60:	40021000 	.word	0x40021000
 800ac64:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac68:	4b46      	ldr	r3, [pc, #280]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ac6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac6e:	f003 0302 	and.w	r3, r3, #2
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d109      	bne.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800ac76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac7a:	61fb      	str	r3, [r7, #28]
          break;
 800ac7c:	e005      	b.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800ac7e:	bf00      	nop
 800ac80:	e07a      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac82:	bf00      	nop
 800ac84:	e078      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac86:	bf00      	nop
 800ac88:	e076      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac8a:	bf00      	nop
        break;
 800ac8c:	e074      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ac8e:	4b3d      	ldr	r3, [pc, #244]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ac90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aca0:	d02c      	beq.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aca8:	d855      	bhi.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d004      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acb6:	d004      	beq.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800acb8:	e04d      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800acba:	f7fe fc91 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800acbe:	61f8      	str	r0, [r7, #28]
          break;
 800acc0:	e04e      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800acc2:	4b30      	ldr	r3, [pc, #192]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	2b02      	cmp	r3, #2
 800accc:	d145      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800acce:	4b2d      	ldr	r3, [pc, #180]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0308 	and.w	r3, r3, #8
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d005      	beq.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800acda:	4b2a      	ldr	r3, [pc, #168]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	091b      	lsrs	r3, r3, #4
 800ace0:	f003 030f 	and.w	r3, r3, #15
 800ace4:	e005      	b.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800ace6:	4b27      	ldr	r3, [pc, #156]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ace8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acec:	0a1b      	lsrs	r3, r3, #8
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	4a25      	ldr	r2, [pc, #148]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800acf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf8:	61fb      	str	r3, [r7, #28]
          break;
 800acfa:	e02e      	b.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800acfc:	4b21      	ldr	r3, [pc, #132]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad08:	d129      	bne.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800ad0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad16:	d122      	bne.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad18:	4b1a      	ldr	r3, [pc, #104]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	0a1b      	lsrs	r3, r3, #8
 800ad1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad22:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	fb03 f202 	mul.w	r2, r3, r2
 800ad2c:	4b15      	ldr	r3, [pc, #84]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	091b      	lsrs	r3, r3, #4
 800ad32:	f003 030f 	and.w	r3, r3, #15
 800ad36:	3301      	adds	r3, #1
 800ad38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ad3e:	4b11      	ldr	r3, [pc, #68]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	0d5b      	lsrs	r3, r3, #21
 800ad44:	f003 0303 	and.w	r3, r3, #3
 800ad48:	3301      	adds	r3, #1
 800ad4a:	005b      	lsls	r3, r3, #1
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad52:	61fb      	str	r3, [r7, #28]
          break;
 800ad54:	e003      	b.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800ad56:	bf00      	nop
 800ad58:	e00e      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad5a:	bf00      	nop
 800ad5c:	e00c      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad5e:	bf00      	nop
        break;
 800ad60:	e00a      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad62:	bf00      	nop
 800ad64:	e008      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad66:	bf00      	nop
 800ad68:	e006      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad6a:	bf00      	nop
 800ad6c:	e004      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad6e:	bf00      	nop
 800ad70:	e002      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad72:	bf00      	nop
 800ad74:	e000      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad76:	bf00      	nop
    }
  }

  return(frequency);
 800ad78:	69fb      	ldr	r3, [r7, #28]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3720      	adds	r7, #32
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	40021000 	.word	0x40021000
 800ad88:	080175c8 	.word	0x080175c8

0800ad8c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800ad90:	4b05      	ldr	r3, [pc, #20]	@ (800ada8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a04      	ldr	r2, [pc, #16]	@ (800ada8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ad96:	f043 0304 	orr.w	r3, r3, #4
 800ad9a:	6013      	str	r3, [r2, #0]
}
 800ad9c:	bf00      	nop
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	40021000 	.word	0x40021000

0800adac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800adba:	4b72      	ldr	r3, [pc, #456]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	f003 0303 	and.w	r3, r3, #3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00e      	beq.n	800ade4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800adc6:	4b6f      	ldr	r3, [pc, #444]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	f003 0203 	and.w	r2, r3, #3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	d103      	bne.n	800adde <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
       ||
 800adda:	2b00      	cmp	r3, #0
 800addc:	d142      	bne.n	800ae64 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	73fb      	strb	r3, [r7, #15]
 800ade2:	e03f      	b.n	800ae64 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b03      	cmp	r3, #3
 800adea:	d018      	beq.n	800ae1e <RCCEx_PLLSAI1_Config+0x72>
 800adec:	2b03      	cmp	r3, #3
 800adee:	d825      	bhi.n	800ae3c <RCCEx_PLLSAI1_Config+0x90>
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d002      	beq.n	800adfa <RCCEx_PLLSAI1_Config+0x4e>
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d009      	beq.n	800ae0c <RCCEx_PLLSAI1_Config+0x60>
 800adf8:	e020      	b.n	800ae3c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800adfa:	4b62      	ldr	r3, [pc, #392]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0302 	and.w	r3, r3, #2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d11d      	bne.n	800ae42 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae0a:	e01a      	b.n	800ae42 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ae0c:	4b5d      	ldr	r3, [pc, #372]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d116      	bne.n	800ae46 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae1c:	e013      	b.n	800ae46 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ae1e:	4b59      	ldr	r3, [pc, #356]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10f      	bne.n	800ae4a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ae2a:	4b56      	ldr	r3, [pc, #344]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae3a:	e006      	b.n	800ae4a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae40:	e004      	b.n	800ae4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ae42:	bf00      	nop
 800ae44:	e002      	b.n	800ae4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ae46:	bf00      	nop
 800ae48:	e000      	b.n	800ae4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ae4a:	bf00      	nop
    }

    if(status == HAL_OK)
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d108      	bne.n	800ae64 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800ae52:	4b4c      	ldr	r3, [pc, #304]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	f023 0203 	bic.w	r2, r3, #3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4949      	ldr	r1, [pc, #292]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f040 8086 	bne.w	800af78 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ae6c:	4b45      	ldr	r3, [pc, #276]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a44      	ldr	r2, [pc, #272]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae78:	f7fb fb4c 	bl	8006514 <HAL_GetTick>
 800ae7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ae7e:	e009      	b.n	800ae94 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ae80:	f7fb fb48 	bl	8006514 <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d902      	bls.n	800ae94 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	73fb      	strb	r3, [r7, #15]
        break;
 800ae92:	e005      	b.n	800aea0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ae94:	4b3b      	ldr	r3, [pc, #236]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1ef      	bne.n	800ae80 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d168      	bne.n	800af78 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d113      	bne.n	800aed4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aeac:	4b35      	ldr	r3, [pc, #212]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aeae:	691a      	ldr	r2, [r3, #16]
 800aeb0:	4b35      	ldr	r3, [pc, #212]	@ (800af88 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6892      	ldr	r2, [r2, #8]
 800aeb8:	0211      	lsls	r1, r2, #8
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	68d2      	ldr	r2, [r2, #12]
 800aebe:	06d2      	lsls	r2, r2, #27
 800aec0:	4311      	orrs	r1, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6852      	ldr	r2, [r2, #4]
 800aec6:	3a01      	subs	r2, #1
 800aec8:	0112      	lsls	r2, r2, #4
 800aeca:	430a      	orrs	r2, r1
 800aecc:	492d      	ldr	r1, [pc, #180]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	610b      	str	r3, [r1, #16]
 800aed2:	e02d      	b.n	800af30 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d115      	bne.n	800af06 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aeda:	4b2a      	ldr	r3, [pc, #168]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aedc:	691a      	ldr	r2, [r3, #16]
 800aede:	4b2b      	ldr	r3, [pc, #172]	@ (800af8c <RCCEx_PLLSAI1_Config+0x1e0>)
 800aee0:	4013      	ands	r3, r2
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	6892      	ldr	r2, [r2, #8]
 800aee6:	0211      	lsls	r1, r2, #8
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6912      	ldr	r2, [r2, #16]
 800aeec:	0852      	lsrs	r2, r2, #1
 800aeee:	3a01      	subs	r2, #1
 800aef0:	0552      	lsls	r2, r2, #21
 800aef2:	4311      	orrs	r1, r2
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	6852      	ldr	r2, [r2, #4]
 800aef8:	3a01      	subs	r2, #1
 800aefa:	0112      	lsls	r2, r2, #4
 800aefc:	430a      	orrs	r2, r1
 800aefe:	4921      	ldr	r1, [pc, #132]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af00:	4313      	orrs	r3, r2
 800af02:	610b      	str	r3, [r1, #16]
 800af04:	e014      	b.n	800af30 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af06:	4b1f      	ldr	r3, [pc, #124]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af08:	691a      	ldr	r2, [r3, #16]
 800af0a:	4b21      	ldr	r3, [pc, #132]	@ (800af90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af0c:	4013      	ands	r3, r2
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6892      	ldr	r2, [r2, #8]
 800af12:	0211      	lsls	r1, r2, #8
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	6952      	ldr	r2, [r2, #20]
 800af18:	0852      	lsrs	r2, r2, #1
 800af1a:	3a01      	subs	r2, #1
 800af1c:	0652      	lsls	r2, r2, #25
 800af1e:	4311      	orrs	r1, r2
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	6852      	ldr	r2, [r2, #4]
 800af24:	3a01      	subs	r2, #1
 800af26:	0112      	lsls	r2, r2, #4
 800af28:	430a      	orrs	r2, r1
 800af2a:	4916      	ldr	r1, [pc, #88]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af2c:	4313      	orrs	r3, r2
 800af2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800af30:	4b14      	ldr	r3, [pc, #80]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a13      	ldr	r2, [pc, #76]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af3c:	f7fb faea 	bl	8006514 <HAL_GetTick>
 800af40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800af42:	e009      	b.n	800af58 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af44:	f7fb fae6 	bl	8006514 <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d902      	bls.n	800af58 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	73fb      	strb	r3, [r7, #15]
          break;
 800af56:	e005      	b.n	800af64 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800af58:	4b0a      	ldr	r3, [pc, #40]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d0ef      	beq.n	800af44 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800af6a:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af6c:	691a      	ldr	r2, [r3, #16]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	4904      	ldr	r1, [pc, #16]	@ (800af84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af74:	4313      	orrs	r3, r2
 800af76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800af78:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	40021000 	.word	0x40021000
 800af88:	07ff800f 	.word	0x07ff800f
 800af8c:	ff9f800f 	.word	0xff9f800f
 800af90:	f9ff800f 	.word	0xf9ff800f

0800af94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800afa2:	4b72      	ldr	r3, [pc, #456]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	f003 0303 	and.w	r3, r3, #3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00e      	beq.n	800afcc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800afae:	4b6f      	ldr	r3, [pc, #444]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	f003 0203 	and.w	r2, r3, #3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d103      	bne.n	800afc6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
       ||
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d142      	bne.n	800b04c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	73fb      	strb	r3, [r7, #15]
 800afca:	e03f      	b.n	800b04c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d018      	beq.n	800b006 <RCCEx_PLLSAI2_Config+0x72>
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d825      	bhi.n	800b024 <RCCEx_PLLSAI2_Config+0x90>
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d002      	beq.n	800afe2 <RCCEx_PLLSAI2_Config+0x4e>
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d009      	beq.n	800aff4 <RCCEx_PLLSAI2_Config+0x60>
 800afe0:	e020      	b.n	800b024 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800afe2:	4b62      	ldr	r3, [pc, #392]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d11d      	bne.n	800b02a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aff2:	e01a      	b.n	800b02a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800aff4:	4b5d      	ldr	r3, [pc, #372]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800affc:	2b00      	cmp	r3, #0
 800affe:	d116      	bne.n	800b02e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b004:	e013      	b.n	800b02e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b006:	4b59      	ldr	r3, [pc, #356]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10f      	bne.n	800b032 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b012:	4b56      	ldr	r3, [pc, #344]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d109      	bne.n	800b032 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b022:	e006      	b.n	800b032 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	73fb      	strb	r3, [r7, #15]
      break;
 800b028:	e004      	b.n	800b034 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b02a:	bf00      	nop
 800b02c:	e002      	b.n	800b034 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b02e:	bf00      	nop
 800b030:	e000      	b.n	800b034 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b032:	bf00      	nop
    }

    if(status == HAL_OK)
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d108      	bne.n	800b04c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b03a:	4b4c      	ldr	r3, [pc, #304]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f023 0203 	bic.w	r2, r3, #3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4949      	ldr	r1, [pc, #292]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f040 8086 	bne.w	800b160 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b054:	4b45      	ldr	r3, [pc, #276]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a44      	ldr	r2, [pc, #272]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b05a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b05e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b060:	f7fb fa58 	bl	8006514 <HAL_GetTick>
 800b064:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b066:	e009      	b.n	800b07c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b068:	f7fb fa54 	bl	8006514 <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d902      	bls.n	800b07c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	73fb      	strb	r3, [r7, #15]
        break;
 800b07a:	e005      	b.n	800b088 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b07c:	4b3b      	ldr	r3, [pc, #236]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1ef      	bne.n	800b068 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d168      	bne.n	800b160 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d113      	bne.n	800b0bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b094:	4b35      	ldr	r3, [pc, #212]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b096:	695a      	ldr	r2, [r3, #20]
 800b098:	4b35      	ldr	r3, [pc, #212]	@ (800b170 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b09a:	4013      	ands	r3, r2
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	6892      	ldr	r2, [r2, #8]
 800b0a0:	0211      	lsls	r1, r2, #8
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	68d2      	ldr	r2, [r2, #12]
 800b0a6:	06d2      	lsls	r2, r2, #27
 800b0a8:	4311      	orrs	r1, r2
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	6852      	ldr	r2, [r2, #4]
 800b0ae:	3a01      	subs	r2, #1
 800b0b0:	0112      	lsls	r2, r2, #4
 800b0b2:	430a      	orrs	r2, r1
 800b0b4:	492d      	ldr	r1, [pc, #180]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	614b      	str	r3, [r1, #20]
 800b0ba:	e02d      	b.n	800b118 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d115      	bne.n	800b0ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b0c2:	4b2a      	ldr	r3, [pc, #168]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0c4:	695a      	ldr	r2, [r3, #20]
 800b0c6:	4b2b      	ldr	r3, [pc, #172]	@ (800b174 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	6892      	ldr	r2, [r2, #8]
 800b0ce:	0211      	lsls	r1, r2, #8
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	6912      	ldr	r2, [r2, #16]
 800b0d4:	0852      	lsrs	r2, r2, #1
 800b0d6:	3a01      	subs	r2, #1
 800b0d8:	0552      	lsls	r2, r2, #21
 800b0da:	4311      	orrs	r1, r2
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	6852      	ldr	r2, [r2, #4]
 800b0e0:	3a01      	subs	r2, #1
 800b0e2:	0112      	lsls	r2, r2, #4
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	4921      	ldr	r1, [pc, #132]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	614b      	str	r3, [r1, #20]
 800b0ec:	e014      	b.n	800b118 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b0ee:	4b1f      	ldr	r3, [pc, #124]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0f0:	695a      	ldr	r2, [r3, #20]
 800b0f2:	4b21      	ldr	r3, [pc, #132]	@ (800b178 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6892      	ldr	r2, [r2, #8]
 800b0fa:	0211      	lsls	r1, r2, #8
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6952      	ldr	r2, [r2, #20]
 800b100:	0852      	lsrs	r2, r2, #1
 800b102:	3a01      	subs	r2, #1
 800b104:	0652      	lsls	r2, r2, #25
 800b106:	4311      	orrs	r1, r2
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6852      	ldr	r2, [r2, #4]
 800b10c:	3a01      	subs	r2, #1
 800b10e:	0112      	lsls	r2, r2, #4
 800b110:	430a      	orrs	r2, r1
 800b112:	4916      	ldr	r1, [pc, #88]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b114:	4313      	orrs	r3, r2
 800b116:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b118:	4b14      	ldr	r3, [pc, #80]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a13      	ldr	r2, [pc, #76]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b11e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b122:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b124:	f7fb f9f6 	bl	8006514 <HAL_GetTick>
 800b128:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b12a:	e009      	b.n	800b140 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b12c:	f7fb f9f2 	bl	8006514 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2b02      	cmp	r3, #2
 800b138:	d902      	bls.n	800b140 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b13a:	2303      	movs	r3, #3
 800b13c:	73fb      	strb	r3, [r7, #15]
          break;
 800b13e:	e005      	b.n	800b14c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b140:	4b0a      	ldr	r3, [pc, #40]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0ef      	beq.n	800b12c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d106      	bne.n	800b160 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b152:	4b06      	ldr	r3, [pc, #24]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b154:	695a      	ldr	r2, [r3, #20]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	4904      	ldr	r1, [pc, #16]	@ (800b16c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b15c:	4313      	orrs	r3, r2
 800b15e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b160:	7bfb      	ldrb	r3, [r7, #15]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	40021000 	.word	0x40021000
 800b170:	07ff800f 	.word	0x07ff800f
 800b174:	ff9f800f 	.word	0xff9f800f
 800b178:	f9ff800f 	.word	0xf9ff800f

0800b17c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b089      	sub	sp, #36	@ 0x24
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b18e:	2300      	movs	r3, #0
 800b190:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b198:	d10b      	bne.n	800b1b2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b19a:	4b7e      	ldr	r3, [pc, #504]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b19c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1a0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b1a4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	2b60      	cmp	r3, #96	@ 0x60
 800b1aa:	d112      	bne.n	800b1d2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b1ac:	4b7a      	ldr	r3, [pc, #488]	@ (800b398 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b1ae:	61fb      	str	r3, [r7, #28]
 800b1b0:	e00f      	b.n	800b1d2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1b8:	d10b      	bne.n	800b1d2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b1ba:	4b76      	ldr	r3, [pc, #472]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b1bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1c4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1cc:	d101      	bne.n	800b1d2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b1ce:	4b72      	ldr	r3, [pc, #456]	@ (800b398 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b1d0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f040 80d6 	bne.w	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b40      	cmp	r3, #64	@ 0x40
 800b1e2:	d003      	beq.n	800b1ec <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1ea:	d13b      	bne.n	800b264 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b1ec:	4b69      	ldr	r3, [pc, #420]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1f8:	f040 80c4 	bne.w	800b384 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800b1fc:	4b65      	ldr	r3, [pc, #404]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 80bd 	beq.w	800b384 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b20a:	4b62      	ldr	r3, [pc, #392]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	091b      	lsrs	r3, r3, #4
 800b210:	f003 030f 	and.w	r3, r3, #15
 800b214:	3301      	adds	r3, #1
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	fbb2 f3f3 	udiv	r3, r2, r3
 800b21c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b21e:	4b5d      	ldr	r3, [pc, #372]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b228:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b22a:	4b5a      	ldr	r3, [pc, #360]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	0edb      	lsrs	r3, r3, #27
 800b230:	f003 031f 	and.w	r3, r3, #31
 800b234:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10a      	bne.n	800b252 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b23c:	4b55      	ldr	r3, [pc, #340]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800b248:	2311      	movs	r3, #17
 800b24a:	617b      	str	r3, [r7, #20]
 800b24c:	e001      	b.n	800b252 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800b24e:	2307      	movs	r3, #7
 800b250:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	fb03 f202 	mul.w	r2, r3, r2
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b260:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b262:	e08f      	b.n	800b384 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d13a      	bne.n	800b2e0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800b26a:	4b4a      	ldr	r3, [pc, #296]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b276:	f040 8086 	bne.w	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b27a:	4b46      	ldr	r3, [pc, #280]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d07f      	beq.n	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b286:	4b43      	ldr	r3, [pc, #268]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	091b      	lsrs	r3, r3, #4
 800b28c:	f003 030f 	and.w	r3, r3, #15
 800b290:	3301      	adds	r3, #1
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	fbb2 f3f3 	udiv	r3, r2, r3
 800b298:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b29a:	4b3e      	ldr	r3, [pc, #248]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2a4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800b2a6:	4b3b      	ldr	r3, [pc, #236]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	0edb      	lsrs	r3, r3, #27
 800b2ac:	f003 031f 	and.w	r3, r3, #31
 800b2b0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800b2b8:	4b36      	ldr	r3, [pc, #216]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800b2c4:	2311      	movs	r3, #17
 800b2c6:	617b      	str	r3, [r7, #20]
 800b2c8:	e001      	b.n	800b2ce <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800b2ca:	2307      	movs	r3, #7
 800b2cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	fb03 f202 	mul.w	r2, r3, r2
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2dc:	61fb      	str	r3, [r7, #28]
 800b2de:	e052      	b.n	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	2b80      	cmp	r3, #128	@ 0x80
 800b2e4:	d003      	beq.n	800b2ee <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2ec:	d109      	bne.n	800b302 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2ee:	4b29      	ldr	r3, [pc, #164]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2fa:	d144      	bne.n	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800b2fc:	4b27      	ldr	r3, [pc, #156]	@ (800b39c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800b2fe:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b300:	e041      	b.n	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	2b20      	cmp	r3, #32
 800b306:	d003      	beq.n	800b310 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b30e:	d13a      	bne.n	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800b310:	4b20      	ldr	r3, [pc, #128]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b31c:	d133      	bne.n	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b31e:	4b1d      	ldr	r3, [pc, #116]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d02d      	beq.n	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800b32a:	4b1a      	ldr	r3, [pc, #104]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	091b      	lsrs	r3, r3, #4
 800b330:	f003 030f 	and.w	r3, r3, #15
 800b334:	3301      	adds	r3, #1
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	fbb2 f3f3 	udiv	r3, r2, r3
 800b33c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b33e:	4b15      	ldr	r3, [pc, #84]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b348:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800b34a:	4b12      	ldr	r3, [pc, #72]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	0edb      	lsrs	r3, r3, #27
 800b350:	f003 031f 	and.w	r3, r3, #31
 800b354:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10a      	bne.n	800b372 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800b35c:	4b0d      	ldr	r3, [pc, #52]	@ (800b394 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800b368:	2311      	movs	r3, #17
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	e001      	b.n	800b372 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800b36e:	2307      	movs	r3, #7
 800b370:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	fb03 f202 	mul.w	r2, r3, r2
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b380:	61fb      	str	r3, [r7, #28]
 800b382:	e000      	b.n	800b386 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b384:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800b386:	69fb      	ldr	r3, [r7, #28]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3724      	adds	r7, #36	@ 0x24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	40021000 	.word	0x40021000
 800b398:	001fff68 	.word	0x001fff68
 800b39c:	00f42400 	.word	0x00f42400

0800b3a0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d904      	bls.n	800b3be <HAL_SAI_InitProtocol+0x1e>
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	3b03      	subs	r3, #3
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d812      	bhi.n	800b3e2 <HAL_SAI_InitProtocol+0x42>
 800b3bc:	e008      	b.n	800b3d0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	68b9      	ldr	r1, [r7, #8]
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 f9fb 	bl	800b7c0 <SAI_InitI2S>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ce:	e00b      	b.n	800b3e8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	68b9      	ldr	r1, [r7, #8]
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 faa4 	bl	800b924 <SAI_InitPCM>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e0:	e002      	b.n	800b3e8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e6:	bf00      	nop
  }

  if (status == HAL_OK)
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d104      	bne.n	800b3f8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 f808 	bl	800b404 <HAL_SAI_Init>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b08a      	sub	sp, #40	@ 0x28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e1c7      	b.n	800b7a6 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d10e      	bne.n	800b43e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a81      	ldr	r2, [pc, #516]	@ (800b62c <HAL_SAI_Init+0x228>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d107      	bne.n	800b43a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d103      	bne.n	800b43a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e1b3      	b.n	800b7a6 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7f8 ffee 	bl	8004434 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fae5 	bl	800ba28 <SAI_Disable>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e19e      	b.n	800b7a6 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d00c      	beq.n	800b492 <HAL_SAI_Init+0x8e>
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d80d      	bhi.n	800b498 <HAL_SAI_Init+0x94>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <HAL_SAI_Init+0x82>
 800b480:	2b01      	cmp	r3, #1
 800b482:	d003      	beq.n	800b48c <HAL_SAI_Init+0x88>
 800b484:	e008      	b.n	800b498 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b48a:	e008      	b.n	800b49e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b48c:	2310      	movs	r3, #16
 800b48e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b490:	e005      	b.n	800b49e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b492:	2320      	movs	r3, #32
 800b494:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b496:	e002      	b.n	800b49e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b49c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	2b03      	cmp	r3, #3
 800b4a4:	d81d      	bhi.n	800b4e2 <HAL_SAI_Init+0xde>
 800b4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4ac <HAL_SAI_Init+0xa8>)
 800b4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ac:	0800b4bd 	.word	0x0800b4bd
 800b4b0:	0800b4c3 	.word	0x0800b4c3
 800b4b4:	0800b4cb 	.word	0x0800b4cb
 800b4b8:	0800b4d3 	.word	0x0800b4d3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	61fb      	str	r3, [r7, #28]
      break;
 800b4c0:	e012      	b.n	800b4e8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b4c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4c6:	61fb      	str	r3, [r7, #28]
      break;
 800b4c8:	e00e      	b.n	800b4e8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4ce:	61fb      	str	r3, [r7, #28]
      break;
 800b4d0:	e00a      	b.n	800b4e8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4d6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4da:	f043 0301 	orr.w	r3, r3, #1
 800b4de:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b4e0:	e002      	b.n	800b4e8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61fb      	str	r3, [r7, #28]
      break;
 800b4e6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a4f      	ldr	r2, [pc, #316]	@ (800b62c <HAL_SAI_Init+0x228>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d004      	beq.n	800b4fc <HAL_SAI_Init+0xf8>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a4e      	ldr	r2, [pc, #312]	@ (800b630 <HAL_SAI_Init+0x22c>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d103      	bne.n	800b504 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800b4fc:	4a4d      	ldr	r2, [pc, #308]	@ (800b634 <HAL_SAI_Init+0x230>)
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	e002      	b.n	800b50a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b504:	4a4c      	ldr	r2, [pc, #304]	@ (800b638 <HAL_SAI_Init+0x234>)
 800b506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b508:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d073      	beq.n	800b5fa <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a45      	ldr	r2, [pc, #276]	@ (800b62c <HAL_SAI_Init+0x228>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d004      	beq.n	800b526 <HAL_SAI_Init+0x122>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a43      	ldr	r2, [pc, #268]	@ (800b630 <HAL_SAI_Init+0x22c>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d105      	bne.n	800b532 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b526:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b52a:	f7fe fd0d 	bl	8009f48 <HAL_RCCEx_GetPeriphCLKFreq>
 800b52e:	61b8      	str	r0, [r7, #24]
 800b530:	e004      	b.n	800b53c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b532:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b536:	f7fe fd07 	bl	8009f48 <HAL_RCCEx_GetPeriphCLKFreq>
 800b53a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b544:	d120      	bne.n	800b588 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	d102      	bne.n	800b554 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b54e:	2340      	movs	r3, #64	@ 0x40
 800b550:	613b      	str	r3, [r7, #16]
 800b552:	e00a      	b.n	800b56a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b558:	2b08      	cmp	r3, #8
 800b55a:	d103      	bne.n	800b564 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b55c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b560:	613b      	str	r3, [r7, #16]
 800b562:	e002      	b.n	800b56a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b568:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	4619      	mov	r1, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	fb02 f303 	mul.w	r3, r2, r3
 800b580:	fbb1 f3f3 	udiv	r3, r1, r3
 800b584:	617b      	str	r3, [r7, #20]
 800b586:	e017      	b.n	800b5b8 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b590:	d101      	bne.n	800b596 <HAL_SAI_Init+0x192>
 800b592:	2302      	movs	r3, #2
 800b594:	e000      	b.n	800b598 <HAL_SAI_Init+0x194>
 800b596:	2301      	movs	r3, #1
 800b598:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b59a:	69ba      	ldr	r2, [r7, #24]
 800b59c:	4613      	mov	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	69db      	ldr	r3, [r3, #28]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	fb02 f303 	mul.w	r3, r2, r3
 800b5b0:	021b      	lsls	r3, r3, #8
 800b5b2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5b6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	4a20      	ldr	r2, [pc, #128]	@ (800b63c <HAL_SAI_Init+0x238>)
 800b5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c0:	08da      	lsrs	r2, r3, #3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b5c6:	6979      	ldr	r1, [r7, #20]
 800b5c8:	4b1c      	ldr	r3, [pc, #112]	@ (800b63c <HAL_SAI_Init+0x238>)
 800b5ca:	fba3 2301 	umull	r2, r3, r3, r1
 800b5ce:	08da      	lsrs	r2, r3, #3
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	1aca      	subs	r2, r1, r3
 800b5da:	2a08      	cmp	r2, #8
 800b5dc:	d904      	bls.n	800b5e8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	d104      	bne.n	800b5fa <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	085a      	lsrs	r2, r3, #1
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_SAI_Init+0x206>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	2b02      	cmp	r3, #2
 800b608:	d109      	bne.n	800b61e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d101      	bne.n	800b616 <HAL_SAI_Init+0x212>
 800b612:	2300      	movs	r3, #0
 800b614:	e001      	b.n	800b61a <HAL_SAI_Init+0x216>
 800b616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b61a:	623b      	str	r3, [r7, #32]
 800b61c:	e012      	b.n	800b644 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b622:	2b01      	cmp	r3, #1
 800b624:	d10c      	bne.n	800b640 <HAL_SAI_Init+0x23c>
 800b626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b62a:	e00a      	b.n	800b642 <HAL_SAI_Init+0x23e>
 800b62c:	40015404 	.word	0x40015404
 800b630:	40015424 	.word	0x40015424
 800b634:	40015400 	.word	0x40015400
 800b638:	40015800 	.word	0x40015800
 800b63c:	cccccccd 	.word	0xcccccccd
 800b640:	2300      	movs	r3, #0
 800b642:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6819      	ldr	r1, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	4b58      	ldr	r3, [pc, #352]	@ (800b7b0 <HAL_SAI_Init+0x3ac>)
 800b650:	400b      	ands	r3, r1
 800b652:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6819      	ldr	r1, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b662:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b668:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b66e:	431a      	orrs	r2, r3
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800b67c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b688:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	051b      	lsls	r3, r3, #20
 800b690:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b696:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	430a      	orrs	r2, r1
 800b69e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	6812      	ldr	r2, [r2, #0]
 800b6aa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b6ae:	f023 030f 	bic.w	r3, r3, #15
 800b6b2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6859      	ldr	r1, [r3, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	699a      	ldr	r2, [r3, #24]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c2:	431a      	orrs	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c8:	431a      	orrs	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6899      	ldr	r1, [r3, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	4b35      	ldr	r3, [pc, #212]	@ (800b7b4 <HAL_SAI_Init+0x3b0>)
 800b6de:	400b      	ands	r3, r1
 800b6e0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	6899      	ldr	r1, [r3, #8]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6ec:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b6f2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800b6f8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800b6fe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b704:	3b01      	subs	r3, #1
 800b706:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b708:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	430a      	orrs	r2, r1
 800b710:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68d9      	ldr	r1, [r3, #12]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b720:	400b      	ands	r3, r1
 800b722:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68d9      	ldr	r1, [r3, #12]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b732:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b738:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b73a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b740:	3b01      	subs	r3, #1
 800b742:	021b      	lsls	r3, r3, #8
 800b744:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a19      	ldr	r2, [pc, #100]	@ (800b7b8 <HAL_SAI_Init+0x3b4>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d119      	bne.n	800b78c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b758:	4b18      	ldr	r3, [pc, #96]	@ (800b7bc <HAL_SAI_Init+0x3b8>)
 800b75a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b75c:	4a17      	ldr	r2, [pc, #92]	@ (800b7bc <HAL_SAI_Init+0x3b8>)
 800b75e:	f023 0301 	bic.w	r3, r3, #1
 800b762:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d10e      	bne.n	800b78c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b776:	3b01      	subs	r3, #1
 800b778:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b77a:	4910      	ldr	r1, [pc, #64]	@ (800b7bc <HAL_SAI_Init+0x3b8>)
 800b77c:	4313      	orrs	r3, r2
 800b77e:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800b780:	4b0e      	ldr	r3, [pc, #56]	@ (800b7bc <HAL_SAI_Init+0x3b8>)
 800b782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b784:	4a0d      	ldr	r2, [pc, #52]	@ (800b7bc <HAL_SAI_Init+0x3b8>)
 800b786:	f043 0301 	orr.w	r3, r3, #1
 800b78a:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3728      	adds	r7, #40	@ 0x28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	f805c010 	.word	0xf805c010
 800b7b4:	fff88000 	.word	0xfff88000
 800b7b8:	40015404 	.word	0x40015404
 800b7bc:	40015400 	.word	0x40015400

0800b7c0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <SAI_InitI2S+0x2e>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d103      	bne.n	800b7f6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b7f4:	e002      	b.n	800b7fc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b802:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b80a:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	f003 0301 	and.w	r3, r3, #1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e077      	b.n	800b916 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d107      	bne.n	800b83c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b838:	661a      	str	r2, [r3, #96]	@ 0x60
 800b83a:	e006      	b.n	800b84a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b842:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d84f      	bhi.n	800b8f0 <SAI_InitI2S+0x130>
 800b850:	a201      	add	r2, pc, #4	@ (adr r2, 800b858 <SAI_InitI2S+0x98>)
 800b852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b856:	bf00      	nop
 800b858:	0800b869 	.word	0x0800b869
 800b85c:	0800b88b 	.word	0x0800b88b
 800b860:	0800b8ad 	.word	0x0800b8ad
 800b864:	0800b8cf 	.word	0x0800b8cf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2280      	movs	r2, #128	@ 0x80
 800b86c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	085b      	lsrs	r3, r3, #1
 800b872:	015a      	lsls	r2, r3, #5
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	085b      	lsrs	r3, r3, #1
 800b87c:	011a      	lsls	r2, r3, #4
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2240      	movs	r2, #64	@ 0x40
 800b886:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800b888:	e035      	b.n	800b8f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2280      	movs	r2, #128	@ 0x80
 800b88e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	085b      	lsrs	r3, r3, #1
 800b894:	019a      	lsls	r2, r3, #6
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	085b      	lsrs	r3, r3, #1
 800b89e:	015a      	lsls	r2, r3, #5
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2280      	movs	r2, #128	@ 0x80
 800b8a8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800b8aa:	e024      	b.n	800b8f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	22c0      	movs	r2, #192	@ 0xc0
 800b8b0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	085b      	lsrs	r3, r3, #1
 800b8b6:	019a      	lsls	r2, r3, #6
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	085b      	lsrs	r3, r3, #1
 800b8c0:	015a      	lsls	r2, r3, #5
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2280      	movs	r2, #128	@ 0x80
 800b8ca:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800b8cc:	e013      	b.n	800b8f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	22e0      	movs	r2, #224	@ 0xe0
 800b8d2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	085b      	lsrs	r3, r3, #1
 800b8d8:	019a      	lsls	r2, r3, #6
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	085b      	lsrs	r3, r3, #1
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2280      	movs	r2, #128	@ 0x80
 800b8ec:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800b8ee:	e002      	b.n	800b8f6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b8f4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d10b      	bne.n	800b914 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d102      	bne.n	800b908 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2210      	movs	r2, #16
 800b906:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d102      	bne.n	800b914 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2208      	movs	r2, #8
 800b912:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 800b914:	7dfb      	ldrb	r3, [r7, #23]
}
 800b916:	4618      	mov	r0, r3
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop

0800b924 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b924:	b480      	push	{r7}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <SAI_InitPCM+0x2e>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d103      	bne.n	800b95a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b958:	e002      	b.n	800b960 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b96c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b974:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b988:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d103      	bne.n	800b998 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2201      	movs	r2, #1
 800b994:	655a      	str	r2, [r3, #84]	@ 0x54
 800b996:	e002      	b.n	800b99e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	220d      	movs	r2, #13
 800b99c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b03      	cmp	r3, #3
 800b9a2:	d837      	bhi.n	800ba14 <SAI_InitPCM+0xf0>
 800b9a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b9ac <SAI_InitPCM+0x88>)
 800b9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9aa:	bf00      	nop
 800b9ac:	0800b9bd 	.word	0x0800b9bd
 800b9b0:	0800b9d3 	.word	0x0800b9d3
 800b9b4:	0800b9e9 	.word	0x0800b9e9
 800b9b8:	0800b9ff 	.word	0x0800b9ff
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2280      	movs	r2, #128	@ 0x80
 800b9c0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	011a      	lsls	r2, r3, #4
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2240      	movs	r2, #64	@ 0x40
 800b9ce:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800b9d0:	e023      	b.n	800ba1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2280      	movs	r2, #128	@ 0x80
 800b9d6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	015a      	lsls	r2, r3, #5
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2280      	movs	r2, #128	@ 0x80
 800b9e4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800b9e6:	e018      	b.n	800ba1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	22c0      	movs	r2, #192	@ 0xc0
 800b9ec:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2280      	movs	r2, #128	@ 0x80
 800b9fa:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800b9fc:	e00d      	b.n	800ba1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	22e0      	movs	r2, #224	@ 0xe0
 800ba02:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2280      	movs	r2, #128	@ 0x80
 800ba10:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800ba12:	e002      	b.n	800ba1a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	75fb      	strb	r3, [r7, #23]
      break;
 800ba18:	bf00      	nop
  }

  return status;
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	371c      	adds	r7, #28
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ba30:	4b18      	ldr	r3, [pc, #96]	@ (800ba94 <SAI_Disable+0x6c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a18      	ldr	r2, [pc, #96]	@ (800ba98 <SAI_Disable+0x70>)
 800ba36:	fba2 2303 	umull	r2, r3, r2, r3
 800ba3a:	0b1b      	lsrs	r3, r3, #12
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ba52:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10a      	bne.n	800ba70 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	72fb      	strb	r3, [r7, #11]
      break;
 800ba6e:	e009      	b.n	800ba84 <SAI_Disable+0x5c>
    }
    count--;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3b01      	subs	r3, #1
 800ba74:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e7      	bne.n	800ba54 <SAI_Disable+0x2c>

  return status;
 800ba84:	7afb      	ldrb	r3, [r7, #11]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	20000020 	.word	0x20000020
 800ba98:	95cbec1b 	.word	0x95cbec1b

0800ba9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e095      	b.n	800bbda <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d108      	bne.n	800bac8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800babe:	d009      	beq.n	800bad4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	61da      	str	r2, [r3, #28]
 800bac6:	e005      	b.n	800bad4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d106      	bne.n	800baf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7f8 fa2a 	bl	8003f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2202      	movs	r2, #2
 800baf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bb0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bb14:	d902      	bls.n	800bb1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	e002      	b.n	800bb22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800bb2a:	d007      	beq.n	800bb3c <HAL_SPI_Init+0xa0>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bb34:	d002      	beq.n	800bb3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800bb4c:	431a      	orrs	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	f003 0302 	and.w	r3, r3, #2
 800bb56:	431a      	orrs	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	f003 0301 	and.w	r3, r3, #1
 800bb60:	431a      	orrs	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb6a:	431a      	orrs	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	69db      	ldr	r3, [r3, #28]
 800bb70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb74:	431a      	orrs	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb7e:	ea42 0103 	orr.w	r1, r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	0c1b      	lsrs	r3, r3, #16
 800bb98:	f003 0204 	and.w	r2, r3, #4
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bba0:	f003 0310 	and.w	r3, r3, #16
 800bba4:	431a      	orrs	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbaa:	f003 0308 	and.w	r3, r3, #8
 800bbae:	431a      	orrs	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bbb8:	ea42 0103 	orr.w	r1, r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b088      	sub	sp, #32
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	603b      	str	r3, [r7, #0]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d101      	bne.n	800bc04 <HAL_SPI_Transmit+0x22>
 800bc00:	2302      	movs	r3, #2
 800bc02:	e15f      	b.n	800bec4 <HAL_SPI_Transmit+0x2e2>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc0c:	f7fa fc82 	bl	8006514 <HAL_GetTick>
 800bc10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bc12:	88fb      	ldrh	r3, [r7, #6]
 800bc14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d002      	beq.n	800bc28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bc22:	2302      	movs	r3, #2
 800bc24:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc26:	e148      	b.n	800beba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <HAL_SPI_Transmit+0x52>
 800bc2e:	88fb      	ldrh	r3, [r7, #6]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d102      	bne.n	800bc3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc38:	e13f      	b.n	800beba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2203      	movs	r2, #3
 800bc3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	88fa      	ldrh	r2, [r7, #6]
 800bc52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc84:	d10f      	bne.n	800bca6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bca4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcb0:	2b40      	cmp	r3, #64	@ 0x40
 800bcb2:	d007      	beq.n	800bcc4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bccc:	d94f      	bls.n	800bd6e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d002      	beq.n	800bcdc <HAL_SPI_Transmit+0xfa>
 800bcd6:	8afb      	ldrh	r3, [r7, #22]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d142      	bne.n	800bd62 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bce0:	881a      	ldrh	r2, [r3, #0]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcec:	1c9a      	adds	r2, r3, #2
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bd00:	e02f      	b.n	800bd62 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	f003 0302 	and.w	r3, r3, #2
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d112      	bne.n	800bd36 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd14:	881a      	ldrh	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd20:	1c9a      	adds	r2, r3, #2
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bd34:	e015      	b.n	800bd62 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd36:	f7fa fbed 	bl	8006514 <HAL_GetTick>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d803      	bhi.n	800bd4e <HAL_SPI_Transmit+0x16c>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4c:	d102      	bne.n	800bd54 <HAL_SPI_Transmit+0x172>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d106      	bne.n	800bd62 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800bd60:	e0ab      	b.n	800beba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1ca      	bne.n	800bd02 <HAL_SPI_Transmit+0x120>
 800bd6c:	e080      	b.n	800be70 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <HAL_SPI_Transmit+0x19a>
 800bd76:	8afb      	ldrh	r3, [r7, #22]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d174      	bne.n	800be66 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d912      	bls.n	800bdac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd8a:	881a      	ldrh	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd96:	1c9a      	adds	r2, r3, #2
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	3b02      	subs	r3, #2
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bdaa:	e05c      	b.n	800be66 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	330c      	adds	r3, #12
 800bdb6:	7812      	ldrb	r2, [r2, #0]
 800bdb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdbe:	1c5a      	adds	r2, r3, #1
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bdd2:	e048      	b.n	800be66 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d12b      	bne.n	800be3a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d912      	bls.n	800be12 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf0:	881a      	ldrh	r2, [r3, #0]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdfc:	1c9a      	adds	r2, r3, #2
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be06:	b29b      	uxth	r3, r3
 800be08:	3b02      	subs	r3, #2
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800be10:	e029      	b.n	800be66 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	330c      	adds	r3, #12
 800be1c:	7812      	ldrb	r2, [r2, #0]
 800be1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be2e:	b29b      	uxth	r3, r3
 800be30:	3b01      	subs	r3, #1
 800be32:	b29a      	uxth	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800be38:	e015      	b.n	800be66 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be3a:	f7fa fb6b 	bl	8006514 <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	429a      	cmp	r2, r3
 800be48:	d803      	bhi.n	800be52 <HAL_SPI_Transmit+0x270>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be50:	d102      	bne.n	800be58 <HAL_SPI_Transmit+0x276>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d106      	bne.n	800be66 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800be58:	2303      	movs	r3, #3
 800be5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800be64:	e029      	b.n	800beba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1b1      	bne.n	800bdd4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be70:	69ba      	ldr	r2, [r7, #24]
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f001 fa0d 	bl	800d294 <SPI_EndRxTxTransaction>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2220      	movs	r2, #32
 800be84:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be8e:	2300      	movs	r3, #0
 800be90:	613b      	str	r3, [r7, #16]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	613b      	str	r3, [r7, #16]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	613b      	str	r3, [r7, #16]
 800bea2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	77fb      	strb	r3, [r7, #31]
 800beb0:	e003      	b.n	800beba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800bec2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3720      	adds	r7, #32
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	603b      	str	r3, [r7, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d002      	beq.n	800bef2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800beec:	2302      	movs	r3, #2
 800beee:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bef0:	e11a      	b.n	800c128 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800befa:	d112      	bne.n	800bf22 <HAL_SPI_Receive+0x56>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10e      	bne.n	800bf22 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2204      	movs	r2, #4
 800bf08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bf0c:	88fa      	ldrh	r2, [r7, #6]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	4613      	mov	r3, r2
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	68b9      	ldr	r1, [r7, #8]
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f90e 	bl	800c13a <HAL_SPI_TransmitReceive>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	e107      	b.n	800c132 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d101      	bne.n	800bf30 <HAL_SPI_Receive+0x64>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e100      	b.n	800c132 <HAL_SPI_Receive+0x266>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf38:	f7fa faec 	bl	8006514 <HAL_GetTick>
 800bf3c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <HAL_SPI_Receive+0x7e>
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d102      	bne.n	800bf50 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf4e:	e0eb      	b.n	800c128 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2204      	movs	r2, #4
 800bf54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	88fa      	ldrh	r2, [r7, #6]
 800bf68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	88fa      	ldrh	r2, [r7, #6]
 800bf70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bf9a:	d908      	bls.n	800bfae <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bfaa:	605a      	str	r2, [r3, #4]
 800bfac:	e007      	b.n	800bfbe <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bfbc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfc6:	d10f      	bne.n	800bfe8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bfd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bfe6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff2:	2b40      	cmp	r3, #64	@ 0x40
 800bff4:	d007      	beq.n	800c006 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c004:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c00e:	d86f      	bhi.n	800c0f0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c010:	e034      	b.n	800c07c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d117      	bne.n	800c050 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f103 020c 	add.w	r2, r3, #12
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c02c:	7812      	ldrb	r2, [r2, #0]
 800c02e:	b2d2      	uxtb	r2, r2
 800c030:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c036:	1c5a      	adds	r2, r3, #1
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c042:	b29b      	uxth	r3, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	b29a      	uxth	r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c04e:	e015      	b.n	800c07c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c050:	f7fa fa60 	bl	8006514 <HAL_GetTick>
 800c054:	4602      	mov	r2, r0
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d803      	bhi.n	800c068 <HAL_SPI_Receive+0x19c>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c066:	d102      	bne.n	800c06e <HAL_SPI_Receive+0x1a2>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d106      	bne.n	800c07c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c07a:	e055      	b.n	800c128 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c082:	b29b      	uxth	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1c4      	bne.n	800c012 <HAL_SPI_Receive+0x146>
 800c088:	e038      	b.n	800c0fc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b01      	cmp	r3, #1
 800c096:	d115      	bne.n	800c0c4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68da      	ldr	r2, [r3, #12]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a2:	b292      	uxth	r2, r2
 800c0a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0aa:	1c9a      	adds	r2, r3, #2
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c0c2:	e015      	b.n	800c0f0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0c4:	f7fa fa26 	bl	8006514 <HAL_GetTick>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d803      	bhi.n	800c0dc <HAL_SPI_Receive+0x210>
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0da:	d102      	bne.n	800c0e2 <HAL_SPI_Receive+0x216>
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c0ee:	e01b      	b.n	800c128 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1c6      	bne.n	800c08a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0fc:	693a      	ldr	r2, [r7, #16]
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f001 f86f 	bl	800d1e4 <SPI_EndRxTransaction>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d002      	beq.n	800c112 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2220      	movs	r2, #32
 800c110:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	75fb      	strb	r3, [r7, #23]
 800c11e:	e003      	b.n	800c128 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c130:	7dfb      	ldrb	r3, [r7, #23]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b08a      	sub	sp, #40	@ 0x28
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c148:	2301      	movs	r3, #1
 800c14a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d101      	bne.n	800c160 <HAL_SPI_TransmitReceive+0x26>
 800c15c:	2302      	movs	r3, #2
 800c15e:	e20a      	b.n	800c576 <HAL_SPI_TransmitReceive+0x43c>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c168:	f7fa f9d4 	bl	8006514 <HAL_GetTick>
 800c16c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c174:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c17c:	887b      	ldrh	r3, [r7, #2]
 800c17e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c180:	887b      	ldrh	r3, [r7, #2]
 800c182:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c184:	7efb      	ldrb	r3, [r7, #27]
 800c186:	2b01      	cmp	r3, #1
 800c188:	d00e      	beq.n	800c1a8 <HAL_SPI_TransmitReceive+0x6e>
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c190:	d106      	bne.n	800c1a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d102      	bne.n	800c1a0 <HAL_SPI_TransmitReceive+0x66>
 800c19a:	7efb      	ldrb	r3, [r7, #27]
 800c19c:	2b04      	cmp	r3, #4
 800c19e:	d003      	beq.n	800c1a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c1a6:	e1e0      	b.n	800c56a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d005      	beq.n	800c1ba <HAL_SPI_TransmitReceive+0x80>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <HAL_SPI_TransmitReceive+0x80>
 800c1b4:	887b      	ldrh	r3, [r7, #2]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d103      	bne.n	800c1c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c1c0:	e1d3      	b.n	800c56a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	d003      	beq.n	800c1d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2205      	movs	r2, #5
 800c1d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	887a      	ldrh	r2, [r7, #2]
 800c1e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	887a      	ldrh	r2, [r7, #2]
 800c1ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	887a      	ldrh	r2, [r7, #2]
 800c1fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	887a      	ldrh	r2, [r7, #2]
 800c202:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c218:	d802      	bhi.n	800c220 <HAL_SPI_TransmitReceive+0xe6>
 800c21a:	8a3b      	ldrh	r3, [r7, #16]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d908      	bls.n	800c232 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c22e:	605a      	str	r2, [r3, #4]
 800c230:	e007      	b.n	800c242 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c240:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c24c:	2b40      	cmp	r3, #64	@ 0x40
 800c24e:	d007      	beq.n	800c260 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c25e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c268:	f240 8081 	bls.w	800c36e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <HAL_SPI_TransmitReceive+0x140>
 800c274:	8a7b      	ldrh	r3, [r7, #18]
 800c276:	2b01      	cmp	r3, #1
 800c278:	d16d      	bne.n	800c356 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c27e:	881a      	ldrh	r2, [r3, #0]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c28a:	1c9a      	adds	r2, r3, #2
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c294:	b29b      	uxth	r3, r3
 800c296:	3b01      	subs	r3, #1
 800c298:	b29a      	uxth	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c29e:	e05a      	b.n	800c356 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d11b      	bne.n	800c2e6 <HAL_SPI_TransmitReceive+0x1ac>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d016      	beq.n	800c2e6 <HAL_SPI_TransmitReceive+0x1ac>
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d113      	bne.n	800c2e6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2c2:	881a      	ldrh	r2, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ce:	1c9a      	adds	r2, r3, #2
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f003 0301 	and.w	r3, r3, #1
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d11c      	bne.n	800c32e <HAL_SPI_TransmitReceive+0x1f4>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d016      	beq.n	800c32e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68da      	ldr	r2, [r3, #12]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c30a:	b292      	uxth	r2, r2
 800c30c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c312:	1c9a      	adds	r2, r3, #2
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c31e:	b29b      	uxth	r3, r3
 800c320:	3b01      	subs	r3, #1
 800c322:	b29a      	uxth	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c32a:	2301      	movs	r3, #1
 800c32c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c32e:	f7fa f8f1 	bl	8006514 <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d80b      	bhi.n	800c356 <HAL_SPI_TransmitReceive+0x21c>
 800c33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c344:	d007      	beq.n	800c356 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800c354:	e109      	b.n	800c56a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d19f      	bne.n	800c2a0 <HAL_SPI_TransmitReceive+0x166>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c366:	b29b      	uxth	r3, r3
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d199      	bne.n	800c2a0 <HAL_SPI_TransmitReceive+0x166>
 800c36c:	e0e3      	b.n	800c536 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d003      	beq.n	800c37e <HAL_SPI_TransmitReceive+0x244>
 800c376:	8a7b      	ldrh	r3, [r7, #18]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	f040 80cf 	bne.w	800c51c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c382:	b29b      	uxth	r3, r3
 800c384:	2b01      	cmp	r3, #1
 800c386:	d912      	bls.n	800c3ae <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c38c:	881a      	ldrh	r2, [r3, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c398:	1c9a      	adds	r2, r3, #2
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	3b02      	subs	r3, #2
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c3ac:	e0b6      	b.n	800c51c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	330c      	adds	r3, #12
 800c3b8:	7812      	ldrb	r2, [r2, #0]
 800c3ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c3d4:	e0a2      	b.n	800c51c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	f003 0302 	and.w	r3, r3, #2
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d134      	bne.n	800c44e <HAL_SPI_TransmitReceive+0x314>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d02f      	beq.n	800c44e <HAL_SPI_TransmitReceive+0x314>
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d12c      	bne.n	800c44e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d912      	bls.n	800c424 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c402:	881a      	ldrh	r2, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c40e:	1c9a      	adds	r2, r3, #2
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c418:	b29b      	uxth	r3, r3
 800c41a:	3b02      	subs	r3, #2
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c422:	e012      	b.n	800c44a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	330c      	adds	r3, #12
 800c42e:	7812      	ldrb	r2, [r2, #0]
 800c430:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c436:	1c5a      	adds	r2, r3, #1
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c440:	b29b      	uxth	r3, r3
 800c442:	3b01      	subs	r3, #1
 800c444:	b29a      	uxth	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c44a:	2300      	movs	r3, #0
 800c44c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d148      	bne.n	800c4ee <HAL_SPI_TransmitReceive+0x3b4>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c462:	b29b      	uxth	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d042      	beq.n	800c4ee <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c46e:	b29b      	uxth	r3, r3
 800c470:	2b01      	cmp	r3, #1
 800c472:	d923      	bls.n	800c4bc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68da      	ldr	r2, [r3, #12]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c47e:	b292      	uxth	r2, r2
 800c480:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c486:	1c9a      	adds	r2, r3, #2
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c492:	b29b      	uxth	r3, r3
 800c494:	3b02      	subs	r3, #2
 800c496:	b29a      	uxth	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d81f      	bhi.n	800c4ea <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c4b8:	605a      	str	r2, [r3, #4]
 800c4ba:	e016      	b.n	800c4ea <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f103 020c 	add.w	r2, r3, #12
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c8:	7812      	ldrb	r2, [r2, #0]
 800c4ca:	b2d2      	uxtb	r2, r2
 800c4cc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c4ee:	f7fa f811 	bl	8006514 <HAL_GetTick>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d803      	bhi.n	800c506 <HAL_SPI_TransmitReceive+0x3cc>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c504:	d102      	bne.n	800c50c <HAL_SPI_TransmitReceive+0x3d2>
 800c506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d107      	bne.n	800c51c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800c51a:	e026      	b.n	800c56a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c520:	b29b      	uxth	r3, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	f47f af57 	bne.w	800c3d6 <HAL_SPI_TransmitReceive+0x29c>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c52e:	b29b      	uxth	r3, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	f47f af50 	bne.w	800c3d6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c536:	69fa      	ldr	r2, [r7, #28]
 800c538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f000 feaa 	bl	800d294 <SPI_EndRxTxTransaction>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d005      	beq.n	800c552 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2220      	movs	r2, #32
 800c550:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c556:	2b00      	cmp	r3, #0
 800c558:	d003      	beq.n	800c562 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c560:	e003      	b.n	800c56a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2201      	movs	r2, #1
 800c566:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c572:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800c576:	4618      	mov	r0, r3
 800c578:	3728      	adds	r7, #40	@ 0x28
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d101      	bne.n	800c5a0 <HAL_SPI_Transmit_DMA+0x20>
 800c59c:	2302      	movs	r3, #2
 800c59e:	e0d4      	b.n	800c74a <HAL_SPI_Transmit_DMA+0x1ca>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d002      	beq.n	800c5ba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c5b8:	e0c2      	b.n	800c740 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <HAL_SPI_Transmit_DMA+0x46>
 800c5c0:	88fb      	ldrh	r3, [r7, #6]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d102      	bne.n	800c5cc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c5ca:	e0b9      	b.n	800c740 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2203      	movs	r2, #3
 800c5d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	88fa      	ldrh	r2, [r7, #6]
 800c5e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	88fa      	ldrh	r2, [r7, #6]
 800c5ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c616:	d10f      	bne.n	800c638 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c626:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c636:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c63c:	4a45      	ldr	r2, [pc, #276]	@ (800c754 <HAL_SPI_Transmit_DMA+0x1d4>)
 800c63e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c644:	4a44      	ldr	r2, [pc, #272]	@ (800c758 <HAL_SPI_Transmit_DMA+0x1d8>)
 800c646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c64c:	4a43      	ldr	r2, [pc, #268]	@ (800c75c <HAL_SPI_Transmit_DMA+0x1dc>)
 800c64e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c654:	2200      	movs	r2, #0
 800c656:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c666:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c670:	d82d      	bhi.n	800c6ce <HAL_SPI_Transmit_DMA+0x14e>
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c67c:	d127      	bne.n	800c6ce <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c682:	b29b      	uxth	r3, r3
 800c684:	f003 0301 	and.w	r3, r3, #1
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10f      	bne.n	800c6ac <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c69a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	085b      	lsrs	r3, r3, #1
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c6aa:	e010      	b.n	800c6ce <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	685a      	ldr	r2, [r3, #4]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c6ba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	085b      	lsrs	r3, r3, #1
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	330c      	adds	r3, #12
 800c6de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c6e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c6e6:	f7fb f8d2 	bl	800788e <HAL_DMA_Start_IT>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d008      	beq.n	800c702 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6f4:	f043 0210 	orr.w	r2, r3, #16
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c700:	e01e      	b.n	800c740 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c70c:	2b40      	cmp	r3, #64	@ 0x40
 800c70e:	d007      	beq.n	800c720 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c71e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	685a      	ldr	r2, [r3, #4]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f042 0220 	orr.w	r2, r2, #32
 800c72e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f042 0202 	orr.w	r2, r2, #2
 800c73e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c748:	7dfb      	ldrb	r3, [r7, #23]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	0800cf13 	.word	0x0800cf13
 800c758:	0800cd35 	.word	0x0800cd35
 800c75c:	0800cf67 	.word	0x0800cf67

0800c760 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	4613      	mov	r3, r2
 800c76c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c76e:	2300      	movs	r3, #0
 800c770:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d002      	beq.n	800c784 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800c77e:	2302      	movs	r3, #2
 800c780:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c782:	e0fe      	b.n	800c982 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d110      	bne.n	800c7ae <HAL_SPI_Receive_DMA+0x4e>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c794:	d10b      	bne.n	800c7ae <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2204      	movs	r2, #4
 800c79a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800c79e:	88fb      	ldrh	r3, [r7, #6]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f000 f8fb 	bl	800c9a0 <HAL_SPI_TransmitReceive_DMA>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	e0ee      	b.n	800c98c <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d101      	bne.n	800c7bc <HAL_SPI_Receive_DMA+0x5c>
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	e0e7      	b.n	800c98c <HAL_SPI_Receive_DMA+0x22c>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d002      	beq.n	800c7d0 <HAL_SPI_Receive_DMA+0x70>
 800c7ca:	88fb      	ldrh	r3, [r7, #6]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d102      	bne.n	800c7d6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c7d4:	e0d5      	b.n	800c982 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2204      	movs	r2, #4
 800c7da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	88fa      	ldrh	r2, [r7, #6]
 800c7ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	88fa      	ldrh	r2, [r7, #6]
 800c7f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2200      	movs	r2, #0
 800c80a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2200      	movs	r2, #0
 800c810:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c81a:	d10f      	bne.n	800c83c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c82a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c83a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c84a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c854:	d908      	bls.n	800c868 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c864:	605a      	str	r2, [r3, #4]
 800c866:	e042      	b.n	800c8ee <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c876:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c882:	d134      	bne.n	800c8ee <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	685a      	ldr	r2, [r3, #4]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c892:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d111      	bne.n	800c8c8 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c8b2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	085b      	lsrs	r3, r3, #1
 800c8be:	b29a      	uxth	r2, r3
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c8c6:	e012      	b.n	800c8ee <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c8d6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	085b      	lsrs	r3, r3, #1
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8f2:	4a28      	ldr	r2, [pc, #160]	@ (800c994 <HAL_SPI_Receive_DMA+0x234>)
 800c8f4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8fa:	4a27      	ldr	r2, [pc, #156]	@ (800c998 <HAL_SPI_Receive_DMA+0x238>)
 800c8fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c902:	4a26      	ldr	r2, [pc, #152]	@ (800c99c <HAL_SPI_Receive_DMA+0x23c>)
 800c904:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c90a:	2200      	movs	r2, #0
 800c90c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	330c      	adds	r3, #12
 800c918:	4619      	mov	r1, r3
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c91e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c926:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c928:	f7fa ffb1 	bl	800788e <HAL_DMA_Start_IT>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d008      	beq.n	800c944 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c936:	f043 0210 	orr.w	r2, r3, #16
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c942:	e01e      	b.n	800c982 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c94e:	2b40      	cmp	r3, #64	@ 0x40
 800c950:	d007      	beq.n	800c962 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c960:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	685a      	ldr	r2, [r3, #4]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f042 0220 	orr.w	r2, r2, #32
 800c970:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f042 0201 	orr.w	r2, r2, #1
 800c980:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	0800cf2f 	.word	0x0800cf2f
 800c998:	0800cddb 	.word	0x0800cddb
 800c99c:	0800cf67 	.word	0x0800cf67

0800c9a0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d101      	bne.n	800c9c0 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c9bc:	2302      	movs	r3, #2
 800c9be:	e164      	b.n	800cc8a <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c9ce:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c9d6:	7dbb      	ldrb	r3, [r7, #22]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d00d      	beq.n	800c9f8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c9e2:	d106      	bne.n	800c9f2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d102      	bne.n	800c9f2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800c9ec:	7dbb      	ldrb	r3, [r7, #22]
 800c9ee:	2b04      	cmp	r3, #4
 800c9f0:	d002      	beq.n	800c9f8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c9f6:	e143      	b.n	800cc80 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d005      	beq.n	800ca0a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ca04:	887b      	ldrh	r3, [r7, #2]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca0e:	e137      	b.n	800cc80 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b04      	cmp	r3, #4
 800ca1a:	d003      	beq.n	800ca24 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2205      	movs	r2, #5
 800ca20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	887a      	ldrh	r2, [r7, #2]
 800ca34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	887a      	ldrh	r2, [r7, #2]
 800ca3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	887a      	ldrh	r2, [r7, #2]
 800ca46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	887a      	ldrh	r2, [r7, #2]
 800ca4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2200      	movs	r2, #0
 800ca56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	685a      	ldr	r2, [r3, #4]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800ca6c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca76:	d908      	bls.n	800ca8a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ca86:	605a      	str	r2, [r3, #4]
 800ca88:	e06f      	b.n	800cb6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ca98:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caa4:	d126      	bne.n	800caf4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10f      	bne.n	800cad2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	685a      	ldr	r2, [r3, #4]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cac0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	085b      	lsrs	r3, r3, #1
 800caca:	b29a      	uxth	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cad0:	e010      	b.n	800caf4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cae0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	085b      	lsrs	r3, r3, #1
 800caea:	b29b      	uxth	r3, r3
 800caec:	3301      	adds	r3, #1
 800caee:	b29a      	uxth	r2, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cafe:	d134      	bne.n	800cb6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cb0e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	f003 0301 	and.w	r3, r3, #1
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d111      	bne.n	800cb44 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cb2e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	085b      	lsrs	r3, r3, #1
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800cb42:	e012      	b.n	800cb6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cb52:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	085b      	lsrs	r3, r3, #1
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	3301      	adds	r3, #1
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b04      	cmp	r3, #4
 800cb74:	d108      	bne.n	800cb88 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb7a:	4a46      	ldr	r2, [pc, #280]	@ (800cc94 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800cb7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb82:	4a45      	ldr	r2, [pc, #276]	@ (800cc98 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800cb84:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cb86:	e007      	b.n	800cb98 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb8c:	4a43      	ldr	r2, [pc, #268]	@ (800cc9c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800cb8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb94:	4a42      	ldr	r2, [pc, #264]	@ (800cca0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800cb96:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb9c:	4a41      	ldr	r2, [pc, #260]	@ (800cca4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cb9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cba4:	2200      	movs	r2, #0
 800cba6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	330c      	adds	r3, #12
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbb8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cbc0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cbc2:	f7fa fe64 	bl	800788e <HAL_DMA_Start_IT>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d008      	beq.n	800cbde <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cbd0:	f043 0210 	orr.w	r2, r3, #16
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cbdc:	e050      	b.n	800cc80 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f042 0201 	orr.w	r2, r2, #1
 800cbec:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc02:	2200      	movs	r2, #0
 800cc04:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc16:	4619      	mov	r1, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	330c      	adds	r3, #12
 800cc1e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc26:	f7fa fe32 	bl	800788e <HAL_DMA_Start_IT>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d008      	beq.n	800cc42 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc34:	f043 0210 	orr.w	r2, r3, #16
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cc40:	e01e      	b.n	800cc80 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc4c:	2b40      	cmp	r3, #64	@ 0x40
 800cc4e:	d007      	beq.n	800cc60 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc5e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	685a      	ldr	r2, [r3, #4]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f042 0220 	orr.w	r2, r2, #32
 800cc6e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f042 0202 	orr.w	r2, r2, #2
 800cc7e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	0800cf2f 	.word	0x0800cf2f
 800cc98:	0800cddb 	.word	0x0800cddb
 800cc9c:	0800cf4b 	.word	0x0800cf4b
 800cca0:	0800ce83 	.word	0x0800ce83
 800cca4:	0800cf67 	.word	0x0800cf67

0800cca8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd42:	f7f9 fbe7 	bl	8006514 <HAL_GetTick>
 800cd46:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 0320 	and.w	r3, r3, #32
 800cd52:	2b20      	cmp	r3, #32
 800cd54:	d03b      	beq.n	800cdce <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f022 0220 	bic.w	r2, r2, #32
 800cd64:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f022 0202 	bic.w	r2, r2, #2
 800cd74:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cd76:	693a      	ldr	r2, [r7, #16]
 800cd78:	2164      	movs	r1, #100	@ 0x64
 800cd7a:	6978      	ldr	r0, [r7, #20]
 800cd7c:	f000 fa8a 	bl	800d294 <SPI_EndRxTxTransaction>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd8a:	f043 0220 	orr.w	r2, r3, #32
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10a      	bne.n	800cdb0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	60fb      	str	r3, [r7, #12]
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	60fb      	str	r3, [r7, #12]
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	60fb      	str	r3, [r7, #12]
 800cdae:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d003      	beq.n	800cdce <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cdc6:	6978      	ldr	r0, [r7, #20]
 800cdc8:	f7ff ffaa 	bl	800cd20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cdcc:	e002      	b.n	800cdd4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cdce:	6978      	ldr	r0, [r7, #20]
 800cdd0:	f7ff ff6a 	bl	800cca8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cdd4:	3718      	adds	r7, #24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b084      	sub	sp, #16
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cde8:	f7f9 fb94 	bl	8006514 <HAL_GetTick>
 800cdec:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 0320 	and.w	r3, r3, #32
 800cdf8:	2b20      	cmp	r3, #32
 800cdfa:	d03c      	beq.n	800ce76 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f022 0220 	bic.w	r2, r2, #32
 800ce0a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10d      	bne.n	800ce30 <SPI_DMAReceiveCplt+0x56>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ce1c:	d108      	bne.n	800ce30 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f022 0203 	bic.w	r2, r2, #3
 800ce2c:	605a      	str	r2, [r3, #4]
 800ce2e:	e007      	b.n	800ce40 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f022 0201 	bic.w	r2, r2, #1
 800ce3e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	2164      	movs	r1, #100	@ 0x64
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f000 f9cd 	bl	800d1e4 <SPI_EndRxTransaction>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2220      	movs	r2, #32
 800ce54:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2201      	movs	r2, #1
 800ce62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f7ff ff56 	bl	800cd20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ce74:	e002      	b.n	800ce7c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	f7ff ff20 	bl	800ccbc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce8e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce90:	f7f9 fb40 	bl	8006514 <HAL_GetTick>
 800ce94:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 0320 	and.w	r3, r3, #32
 800cea0:	2b20      	cmp	r3, #32
 800cea2:	d030      	beq.n	800cf06 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685a      	ldr	r2, [r3, #4]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f022 0220 	bic.w	r2, r2, #32
 800ceb2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	2164      	movs	r1, #100	@ 0x64
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f000 f9eb 	bl	800d294 <SPI_EndRxTxTransaction>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d005      	beq.n	800ced0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cec8:	f043 0220 	orr.w	r2, r3, #32
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f022 0203 	bic.w	r2, r2, #3
 800cede:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d003      	beq.n	800cf06 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f7ff ff0e 	bl	800cd20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cf04:	e002      	b.n	800cf0c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	f7ff fee2 	bl	800ccd0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b084      	sub	sp, #16
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f7ff fedf 	bl	800cce4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf26:	bf00      	nop
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b084      	sub	sp, #16
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf3a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f7ff fedb 	bl	800ccf8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf56:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7ff fed7 	bl	800cd0c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf5e:	bf00      	nop
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b084      	sub	sp, #16
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf72:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	685a      	ldr	r2, [r3, #4]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 0203 	bic.w	r2, r2, #3
 800cf82:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf88:	f043 0210 	orr.w	r2, r3, #16
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f7ff fec1 	bl	800cd20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf9e:	bf00      	nop
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cfb8:	f7f9 faac 	bl	8006514 <HAL_GetTick>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc0:	1a9b      	subs	r3, r3, r2
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cfc8:	f7f9 faa4 	bl	8006514 <HAL_GetTick>
 800cfcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cfce:	4b39      	ldr	r3, [pc, #228]	@ (800d0b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	015b      	lsls	r3, r3, #5
 800cfd4:	0d1b      	lsrs	r3, r3, #20
 800cfd6:	69fa      	ldr	r2, [r7, #28]
 800cfd8:	fb02 f303 	mul.w	r3, r2, r3
 800cfdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cfde:	e054      	b.n	800d08a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe6:	d050      	beq.n	800d08a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cfe8:	f7f9 fa94 	bl	8006514 <HAL_GetTick>
 800cfec:	4602      	mov	r2, r0
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	69fa      	ldr	r2, [r7, #28]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d902      	bls.n	800cffe <SPI_WaitFlagStateUntilTimeout+0x56>
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d13d      	bne.n	800d07a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	685a      	ldr	r2, [r3, #4]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d00c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d016:	d111      	bne.n	800d03c <SPI_WaitFlagStateUntilTimeout+0x94>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d020:	d004      	beq.n	800d02c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d02a:	d107      	bne.n	800d03c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d03a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d044:	d10f      	bne.n	800d066 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d064:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d076:	2303      	movs	r3, #3
 800d078:	e017      	b.n	800d0aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d080:	2300      	movs	r3, #0
 800d082:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	3b01      	subs	r3, #1
 800d088:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	689a      	ldr	r2, [r3, #8]
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	4013      	ands	r3, r2
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	429a      	cmp	r2, r3
 800d098:	bf0c      	ite	eq
 800d09a:	2301      	moveq	r3, #1
 800d09c:	2300      	movne	r3, #0
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d19b      	bne.n	800cfe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3720      	adds	r7, #32
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000020 	.word	0x20000020

0800d0b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08a      	sub	sp, #40	@ 0x28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d0ca:	f7f9 fa23 	bl	8006514 <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d2:	1a9b      	subs	r3, r3, r2
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d0da:	f7f9 fa1b 	bl	8006514 <HAL_GetTick>
 800d0de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	330c      	adds	r3, #12
 800d0e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d0e8:	4b3d      	ldr	r3, [pc, #244]	@ (800d1e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	00da      	lsls	r2, r3, #3
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	0d1b      	lsrs	r3, r3, #20
 800d0f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0fa:	fb02 f303 	mul.w	r3, r2, r3
 800d0fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d100:	e060      	b.n	800d1c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d108:	d107      	bne.n	800d11a <SPI_WaitFifoStateUntilTimeout+0x62>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d104      	bne.n	800d11a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	b2db      	uxtb	r3, r3
 800d116:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d118:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d120:	d050      	beq.n	800d1c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d122:	f7f9 f9f7 	bl	8006514 <HAL_GetTick>
 800d126:	4602      	mov	r2, r0
 800d128:	6a3b      	ldr	r3, [r7, #32]
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d12e:	429a      	cmp	r2, r3
 800d130:	d902      	bls.n	800d138 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d134:	2b00      	cmp	r3, #0
 800d136:	d13d      	bne.n	800d1b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	685a      	ldr	r2, [r3, #4]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d146:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d150:	d111      	bne.n	800d176 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d15a:	d004      	beq.n	800d166 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d164:	d107      	bne.n	800d176 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d174:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d17a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d17e:	d10f      	bne.n	800d1a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d19e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	e010      	b.n	800d1d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	689a      	ldr	r2, [r3, #8]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d196      	bne.n	800d102 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3728      	adds	r7, #40	@ 0x28
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20000020 	.word	0x20000020

0800d1e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af02      	add	r7, sp, #8
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d1f8:	d111      	bne.n	800d21e <SPI_EndRxTransaction+0x3a>
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d202:	d004      	beq.n	800d20e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d20c:	d107      	bne.n	800d21e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d21c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	9300      	str	r3, [sp, #0]
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2200      	movs	r2, #0
 800d226:	2180      	movs	r1, #128	@ 0x80
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f7ff febd 	bl	800cfa8 <SPI_WaitFlagStateUntilTimeout>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d007      	beq.n	800d244 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d238:	f043 0220 	orr.w	r2, r3, #32
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d240:	2303      	movs	r3, #3
 800d242:	e023      	b.n	800d28c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d24c:	d11d      	bne.n	800d28a <SPI_EndRxTransaction+0xa6>
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d256:	d004      	beq.n	800d262 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d260:	d113      	bne.n	800d28a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2200      	movs	r2, #0
 800d26a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7ff ff22 	bl	800d0b8 <SPI_WaitFifoStateUntilTimeout>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d007      	beq.n	800d28a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d27e:	f043 0220 	orr.w	r2, r3, #32
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800d286:	2303      	movs	r3, #3
 800d288:	e000      	b.n	800d28c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b086      	sub	sp, #24
 800d298:	af02      	add	r7, sp, #8
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7ff ff03 	bl	800d0b8 <SPI_WaitFifoStateUntilTimeout>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d007      	beq.n	800d2c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2bc:	f043 0220 	orr.w	r2, r3, #32
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d2c4:	2303      	movs	r3, #3
 800d2c6:	e027      	b.n	800d318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	2180      	movs	r1, #128	@ 0x80
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff fe68 	bl	800cfa8 <SPI_WaitFlagStateUntilTimeout>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d007      	beq.n	800d2ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2e2:	f043 0220 	orr.w	r2, r3, #32
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	e014      	b.n	800d318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f7ff fedc 	bl	800d0b8 <SPI_WaitFifoStateUntilTimeout>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d007      	beq.n	800d316 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d30a:	f043 0220 	orr.w	r2, r3, #32
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d312:	2303      	movs	r3, #3
 800d314:	e000      	b.n	800d318 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	e049      	b.n	800d3c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d106      	bne.n	800d34c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7f6 ff46 	bl	80041d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2202      	movs	r2, #2
 800d350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	3304      	adds	r3, #4
 800d35c:	4619      	mov	r1, r3
 800d35e:	4610      	mov	r0, r2
 800d360:	f000 fc16 	bl	800db90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d001      	beq.n	800d3e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e04f      	b.n	800d488 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68da      	ldr	r2, [r3, #12]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f042 0201 	orr.w	r2, r2, #1
 800d3fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a23      	ldr	r2, [pc, #140]	@ (800d494 <HAL_TIM_Base_Start_IT+0xc4>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d01d      	beq.n	800d446 <HAL_TIM_Base_Start_IT+0x76>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d412:	d018      	beq.n	800d446 <HAL_TIM_Base_Start_IT+0x76>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a1f      	ldr	r2, [pc, #124]	@ (800d498 <HAL_TIM_Base_Start_IT+0xc8>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d013      	beq.n	800d446 <HAL_TIM_Base_Start_IT+0x76>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a1e      	ldr	r2, [pc, #120]	@ (800d49c <HAL_TIM_Base_Start_IT+0xcc>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d00e      	beq.n	800d446 <HAL_TIM_Base_Start_IT+0x76>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a1c      	ldr	r2, [pc, #112]	@ (800d4a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d009      	beq.n	800d446 <HAL_TIM_Base_Start_IT+0x76>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a1b      	ldr	r2, [pc, #108]	@ (800d4a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d004      	beq.n	800d446 <HAL_TIM_Base_Start_IT+0x76>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a19      	ldr	r2, [pc, #100]	@ (800d4a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d115      	bne.n	800d472 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	689a      	ldr	r2, [r3, #8]
 800d44c:	4b17      	ldr	r3, [pc, #92]	@ (800d4ac <HAL_TIM_Base_Start_IT+0xdc>)
 800d44e:	4013      	ands	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b06      	cmp	r3, #6
 800d456:	d015      	beq.n	800d484 <HAL_TIM_Base_Start_IT+0xb4>
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d45e:	d011      	beq.n	800d484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f042 0201 	orr.w	r2, r2, #1
 800d46e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d470:	e008      	b.n	800d484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f042 0201 	orr.w	r2, r2, #1
 800d480:	601a      	str	r2, [r3, #0]
 800d482:	e000      	b.n	800d486 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr
 800d494:	40012c00 	.word	0x40012c00
 800d498:	40000400 	.word	0x40000400
 800d49c:	40000800 	.word	0x40000800
 800d4a0:	40000c00 	.word	0x40000c00
 800d4a4:	40013400 	.word	0x40013400
 800d4a8:	40014000 	.word	0x40014000
 800d4ac:	00010007 	.word	0x00010007

0800d4b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e049      	b.n	800d556 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d106      	bne.n	800d4dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 f841 	bl	800d55e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2202      	movs	r2, #2
 800d4e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	4610      	mov	r0, r2
 800d4f0:	f000 fb4e 	bl	800db90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2201      	movs	r2, #1
 800d538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d55e:	b480      	push	{r7}
 800d560:	b083      	sub	sp, #12
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b082      	sub	sp, #8
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d101      	bne.n	800d584 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e049      	b.n	800d618 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d106      	bne.n	800d59e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7f6 fd67 	bl	800406c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	f000 faed 	bl	800db90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	f003 0302 	and.w	r3, r3, #2
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d020      	beq.n	800d684 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f003 0302 	and.w	r3, r3, #2
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d01b      	beq.n	800d684 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f06f 0202 	mvn.w	r2, #2
 800d654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	699b      	ldr	r3, [r3, #24]
 800d662:	f003 0303 	and.w	r3, r3, #3
 800d666:	2b00      	cmp	r3, #0
 800d668:	d003      	beq.n	800d672 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fa72 	bl	800db54 <HAL_TIM_IC_CaptureCallback>
 800d670:	e005      	b.n	800d67e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fa64 	bl	800db40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fa75 	bl	800db68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	f003 0304 	and.w	r3, r3, #4
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d020      	beq.n	800d6d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f003 0304 	and.w	r3, r3, #4
 800d694:	2b00      	cmp	r3, #0
 800d696:	d01b      	beq.n	800d6d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f06f 0204 	mvn.w	r2, #4
 800d6a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2202      	movs	r2, #2
 800d6a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fa4c 	bl	800db54 <HAL_TIM_IC_CaptureCallback>
 800d6bc:	e005      	b.n	800d6ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fa3e 	bl	800db40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fa4f 	bl	800db68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	f003 0308 	and.w	r3, r3, #8
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d020      	beq.n	800d71c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f003 0308 	and.w	r3, r3, #8
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d01b      	beq.n	800d71c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f06f 0208 	mvn.w	r2, #8
 800d6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2204      	movs	r2, #4
 800d6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	f003 0303 	and.w	r3, r3, #3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d003      	beq.n	800d70a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fa26 	bl	800db54 <HAL_TIM_IC_CaptureCallback>
 800d708:	e005      	b.n	800d716 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 fa18 	bl	800db40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fa29 	bl	800db68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	f003 0310 	and.w	r3, r3, #16
 800d722:	2b00      	cmp	r3, #0
 800d724:	d020      	beq.n	800d768 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f003 0310 	and.w	r3, r3, #16
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d01b      	beq.n	800d768 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f06f 0210 	mvn.w	r2, #16
 800d738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2208      	movs	r2, #8
 800d73e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	69db      	ldr	r3, [r3, #28]
 800d746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d003      	beq.n	800d756 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 fa00 	bl	800db54 <HAL_TIM_IC_CaptureCallback>
 800d754:	e005      	b.n	800d762 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f9f2 	bl	800db40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fa03 	bl	800db68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	f003 0301 	and.w	r3, r3, #1
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00c      	beq.n	800d78c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f003 0301 	and.w	r3, r3, #1
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d007      	beq.n	800d78c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f06f 0201 	mvn.w	r2, #1
 800d784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7f6 f924 	bl	80039d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00c      	beq.n	800d7b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d007      	beq.n	800d7b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d7a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 ff36 	bl	800e61c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00c      	beq.n	800d7d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d007      	beq.n	800d7d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d7cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 ff2e 	bl	800e630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00c      	beq.n	800d7f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d007      	beq.n	800d7f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d7f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f9c2 	bl	800db7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	f003 0320 	and.w	r3, r3, #32
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00c      	beq.n	800d81c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f003 0320 	and.w	r3, r3, #32
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d007      	beq.n	800d81c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f06f 0220 	mvn.w	r2, #32
 800d814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fef6 	bl	800e608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d81c:	bf00      	nop
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d101      	bne.n	800d842 <HAL_TIM_OC_ConfigChannel+0x1e>
 800d83e:	2302      	movs	r3, #2
 800d840:	e066      	b.n	800d910 <HAL_TIM_OC_ConfigChannel+0xec>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2b14      	cmp	r3, #20
 800d84e:	d857      	bhi.n	800d900 <HAL_TIM_OC_ConfigChannel+0xdc>
 800d850:	a201      	add	r2, pc, #4	@ (adr r2, 800d858 <HAL_TIM_OC_ConfigChannel+0x34>)
 800d852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d856:	bf00      	nop
 800d858:	0800d8ad 	.word	0x0800d8ad
 800d85c:	0800d901 	.word	0x0800d901
 800d860:	0800d901 	.word	0x0800d901
 800d864:	0800d901 	.word	0x0800d901
 800d868:	0800d8bb 	.word	0x0800d8bb
 800d86c:	0800d901 	.word	0x0800d901
 800d870:	0800d901 	.word	0x0800d901
 800d874:	0800d901 	.word	0x0800d901
 800d878:	0800d8c9 	.word	0x0800d8c9
 800d87c:	0800d901 	.word	0x0800d901
 800d880:	0800d901 	.word	0x0800d901
 800d884:	0800d901 	.word	0x0800d901
 800d888:	0800d8d7 	.word	0x0800d8d7
 800d88c:	0800d901 	.word	0x0800d901
 800d890:	0800d901 	.word	0x0800d901
 800d894:	0800d901 	.word	0x0800d901
 800d898:	0800d8e5 	.word	0x0800d8e5
 800d89c:	0800d901 	.word	0x0800d901
 800d8a0:	0800d901 	.word	0x0800d901
 800d8a4:	0800d901 	.word	0x0800d901
 800d8a8:	0800d8f3 	.word	0x0800d8f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68b9      	ldr	r1, [r7, #8]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 fa06 	bl	800dcc4 <TIM_OC1_SetConfig>
      break;
 800d8b8:	e025      	b.n	800d906 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	68b9      	ldr	r1, [r7, #8]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f000 fa8f 	bl	800dde4 <TIM_OC2_SetConfig>
      break;
 800d8c6:	e01e      	b.n	800d906 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68b9      	ldr	r1, [r7, #8]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 fb12 	bl	800def8 <TIM_OC3_SetConfig>
      break;
 800d8d4:	e017      	b.n	800d906 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68b9      	ldr	r1, [r7, #8]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 fb93 	bl	800e008 <TIM_OC4_SetConfig>
      break;
 800d8e2:	e010      	b.n	800d906 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 fbf6 	bl	800e0dc <TIM_OC5_SetConfig>
      break;
 800d8f0:	e009      	b.n	800d906 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68b9      	ldr	r1, [r7, #8]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fc53 	bl	800e1a4 <TIM_OC6_SetConfig>
      break;
 800d8fe:	e002      	b.n	800d906 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	75fb      	strb	r3, [r7, #23]
      break;
 800d904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d101      	bne.n	800d936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d932:	2302      	movs	r3, #2
 800d934:	e0ff      	b.n	800db36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b14      	cmp	r3, #20
 800d942:	f200 80f0 	bhi.w	800db26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d946:	a201      	add	r2, pc, #4	@ (adr r2, 800d94c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94c:	0800d9a1 	.word	0x0800d9a1
 800d950:	0800db27 	.word	0x0800db27
 800d954:	0800db27 	.word	0x0800db27
 800d958:	0800db27 	.word	0x0800db27
 800d95c:	0800d9e1 	.word	0x0800d9e1
 800d960:	0800db27 	.word	0x0800db27
 800d964:	0800db27 	.word	0x0800db27
 800d968:	0800db27 	.word	0x0800db27
 800d96c:	0800da23 	.word	0x0800da23
 800d970:	0800db27 	.word	0x0800db27
 800d974:	0800db27 	.word	0x0800db27
 800d978:	0800db27 	.word	0x0800db27
 800d97c:	0800da63 	.word	0x0800da63
 800d980:	0800db27 	.word	0x0800db27
 800d984:	0800db27 	.word	0x0800db27
 800d988:	0800db27 	.word	0x0800db27
 800d98c:	0800daa5 	.word	0x0800daa5
 800d990:	0800db27 	.word	0x0800db27
 800d994:	0800db27 	.word	0x0800db27
 800d998:	0800db27 	.word	0x0800db27
 800d99c:	0800dae5 	.word	0x0800dae5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	68b9      	ldr	r1, [r7, #8]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 f98c 	bl	800dcc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	699a      	ldr	r2, [r3, #24]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f042 0208 	orr.w	r2, r2, #8
 800d9ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	699a      	ldr	r2, [r3, #24]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f022 0204 	bic.w	r2, r2, #4
 800d9ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6999      	ldr	r1, [r3, #24]
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	691a      	ldr	r2, [r3, #16]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	430a      	orrs	r2, r1
 800d9dc:	619a      	str	r2, [r3, #24]
      break;
 800d9de:	e0a5      	b.n	800db2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	68b9      	ldr	r1, [r7, #8]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 f9fc 	bl	800dde4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	699a      	ldr	r2, [r3, #24]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	699a      	ldr	r2, [r3, #24]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6999      	ldr	r1, [r3, #24]
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	021a      	lsls	r2, r3, #8
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	430a      	orrs	r2, r1
 800da1e:	619a      	str	r2, [r3, #24]
      break;
 800da20:	e084      	b.n	800db2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68b9      	ldr	r1, [r7, #8]
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 fa65 	bl	800def8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	69da      	ldr	r2, [r3, #28]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f042 0208 	orr.w	r2, r2, #8
 800da3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	69da      	ldr	r2, [r3, #28]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f022 0204 	bic.w	r2, r2, #4
 800da4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	69d9      	ldr	r1, [r3, #28]
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	691a      	ldr	r2, [r3, #16]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	430a      	orrs	r2, r1
 800da5e:	61da      	str	r2, [r3, #28]
      break;
 800da60:	e064      	b.n	800db2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68b9      	ldr	r1, [r7, #8]
 800da68:	4618      	mov	r0, r3
 800da6a:	f000 facd 	bl	800e008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	69da      	ldr	r2, [r3, #28]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	69da      	ldr	r2, [r3, #28]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	69d9      	ldr	r1, [r3, #28]
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	021a      	lsls	r2, r3, #8
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	430a      	orrs	r2, r1
 800daa0:	61da      	str	r2, [r3, #28]
      break;
 800daa2:	e043      	b.n	800db2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68b9      	ldr	r1, [r7, #8]
 800daaa:	4618      	mov	r0, r3
 800daac:	f000 fb16 	bl	800e0dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f042 0208 	orr.w	r2, r2, #8
 800dabe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f022 0204 	bic.w	r2, r2, #4
 800dace:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	691a      	ldr	r2, [r3, #16]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	430a      	orrs	r2, r1
 800dae0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dae2:	e023      	b.n	800db2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68b9      	ldr	r1, [r7, #8]
 800daea:	4618      	mov	r0, r3
 800daec:	f000 fb5a 	bl	800e1a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dafe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	021a      	lsls	r2, r3, #8
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	430a      	orrs	r2, r1
 800db22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800db24:	e002      	b.n	800db2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	75fb      	strb	r3, [r7, #23]
      break;
 800db2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800db34:	7dfb      	ldrb	r3, [r7, #23]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop

0800db40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db48:	bf00      	nop
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db5c:	bf00      	nop
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db70:	bf00      	nop
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db84:	bf00      	nop
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4a40      	ldr	r2, [pc, #256]	@ (800dca4 <TIM_Base_SetConfig+0x114>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d013      	beq.n	800dbd0 <TIM_Base_SetConfig+0x40>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbae:	d00f      	beq.n	800dbd0 <TIM_Base_SetConfig+0x40>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a3d      	ldr	r2, [pc, #244]	@ (800dca8 <TIM_Base_SetConfig+0x118>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d00b      	beq.n	800dbd0 <TIM_Base_SetConfig+0x40>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a3c      	ldr	r2, [pc, #240]	@ (800dcac <TIM_Base_SetConfig+0x11c>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d007      	beq.n	800dbd0 <TIM_Base_SetConfig+0x40>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a3b      	ldr	r2, [pc, #236]	@ (800dcb0 <TIM_Base_SetConfig+0x120>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d003      	beq.n	800dbd0 <TIM_Base_SetConfig+0x40>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a3a      	ldr	r2, [pc, #232]	@ (800dcb4 <TIM_Base_SetConfig+0x124>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d108      	bne.n	800dbe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4a2f      	ldr	r2, [pc, #188]	@ (800dca4 <TIM_Base_SetConfig+0x114>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d01f      	beq.n	800dc2a <TIM_Base_SetConfig+0x9a>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbf0:	d01b      	beq.n	800dc2a <TIM_Base_SetConfig+0x9a>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4a2c      	ldr	r2, [pc, #176]	@ (800dca8 <TIM_Base_SetConfig+0x118>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d017      	beq.n	800dc2a <TIM_Base_SetConfig+0x9a>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a2b      	ldr	r2, [pc, #172]	@ (800dcac <TIM_Base_SetConfig+0x11c>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d013      	beq.n	800dc2a <TIM_Base_SetConfig+0x9a>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a2a      	ldr	r2, [pc, #168]	@ (800dcb0 <TIM_Base_SetConfig+0x120>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d00f      	beq.n	800dc2a <TIM_Base_SetConfig+0x9a>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a29      	ldr	r2, [pc, #164]	@ (800dcb4 <TIM_Base_SetConfig+0x124>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d00b      	beq.n	800dc2a <TIM_Base_SetConfig+0x9a>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a28      	ldr	r2, [pc, #160]	@ (800dcb8 <TIM_Base_SetConfig+0x128>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d007      	beq.n	800dc2a <TIM_Base_SetConfig+0x9a>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a27      	ldr	r2, [pc, #156]	@ (800dcbc <TIM_Base_SetConfig+0x12c>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d003      	beq.n	800dc2a <TIM_Base_SetConfig+0x9a>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a26      	ldr	r2, [pc, #152]	@ (800dcc0 <TIM_Base_SetConfig+0x130>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d108      	bne.n	800dc3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	689a      	ldr	r2, [r3, #8]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	4a10      	ldr	r2, [pc, #64]	@ (800dca4 <TIM_Base_SetConfig+0x114>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d00f      	beq.n	800dc88 <TIM_Base_SetConfig+0xf8>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4a12      	ldr	r2, [pc, #72]	@ (800dcb4 <TIM_Base_SetConfig+0x124>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d00b      	beq.n	800dc88 <TIM_Base_SetConfig+0xf8>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4a11      	ldr	r2, [pc, #68]	@ (800dcb8 <TIM_Base_SetConfig+0x128>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d007      	beq.n	800dc88 <TIM_Base_SetConfig+0xf8>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4a10      	ldr	r2, [pc, #64]	@ (800dcbc <TIM_Base_SetConfig+0x12c>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d003      	beq.n	800dc88 <TIM_Base_SetConfig+0xf8>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	4a0f      	ldr	r2, [pc, #60]	@ (800dcc0 <TIM_Base_SetConfig+0x130>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d103      	bne.n	800dc90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	691a      	ldr	r2, [r3, #16]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	615a      	str	r2, [r3, #20]
}
 800dc96:	bf00      	nop
 800dc98:	3714      	adds	r7, #20
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	40012c00 	.word	0x40012c00
 800dca8:	40000400 	.word	0x40000400
 800dcac:	40000800 	.word	0x40000800
 800dcb0:	40000c00 	.word	0x40000c00
 800dcb4:	40013400 	.word	0x40013400
 800dcb8:	40014000 	.word	0x40014000
 800dcbc:	40014400 	.word	0x40014400
 800dcc0:	40014800 	.word	0x40014800

0800dcc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a1b      	ldr	r3, [r3, #32]
 800dcd8:	f023 0201 	bic.w	r2, r3, #1
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	699b      	ldr	r3, [r3, #24]
 800dcea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dcf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f023 0303 	bic.w	r3, r3, #3
 800dcfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	68fa      	ldr	r2, [r7, #12]
 800dd06:	4313      	orrs	r3, r2
 800dd08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	f023 0302 	bic.w	r3, r3, #2
 800dd10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a2c      	ldr	r2, [pc, #176]	@ (800ddd0 <TIM_OC1_SetConfig+0x10c>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d00f      	beq.n	800dd44 <TIM_OC1_SetConfig+0x80>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a2b      	ldr	r2, [pc, #172]	@ (800ddd4 <TIM_OC1_SetConfig+0x110>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d00b      	beq.n	800dd44 <TIM_OC1_SetConfig+0x80>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a2a      	ldr	r2, [pc, #168]	@ (800ddd8 <TIM_OC1_SetConfig+0x114>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d007      	beq.n	800dd44 <TIM_OC1_SetConfig+0x80>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a29      	ldr	r2, [pc, #164]	@ (800dddc <TIM_OC1_SetConfig+0x118>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d003      	beq.n	800dd44 <TIM_OC1_SetConfig+0x80>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a28      	ldr	r2, [pc, #160]	@ (800dde0 <TIM_OC1_SetConfig+0x11c>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d10c      	bne.n	800dd5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	f023 0308 	bic.w	r3, r3, #8
 800dd4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f023 0304 	bic.w	r3, r3, #4
 800dd5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a1b      	ldr	r2, [pc, #108]	@ (800ddd0 <TIM_OC1_SetConfig+0x10c>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d00f      	beq.n	800dd86 <TIM_OC1_SetConfig+0xc2>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a1a      	ldr	r2, [pc, #104]	@ (800ddd4 <TIM_OC1_SetConfig+0x110>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d00b      	beq.n	800dd86 <TIM_OC1_SetConfig+0xc2>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a19      	ldr	r2, [pc, #100]	@ (800ddd8 <TIM_OC1_SetConfig+0x114>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d007      	beq.n	800dd86 <TIM_OC1_SetConfig+0xc2>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a18      	ldr	r2, [pc, #96]	@ (800dddc <TIM_OC1_SetConfig+0x118>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d003      	beq.n	800dd86 <TIM_OC1_SetConfig+0xc2>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a17      	ldr	r2, [pc, #92]	@ (800dde0 <TIM_OC1_SetConfig+0x11c>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d111      	bne.n	800ddaa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dd94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	693a      	ldr	r2, [r7, #16]
 800ddae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	685a      	ldr	r2, [r3, #4]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	697a      	ldr	r2, [r7, #20]
 800ddc2:	621a      	str	r2, [r3, #32]
}
 800ddc4:	bf00      	nop
 800ddc6:	371c      	adds	r7, #28
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	40012c00 	.word	0x40012c00
 800ddd4:	40013400 	.word	0x40013400
 800ddd8:	40014000 	.word	0x40014000
 800dddc:	40014400 	.word	0x40014400
 800dde0:	40014800 	.word	0x40014800

0800dde4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b087      	sub	sp, #28
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a1b      	ldr	r3, [r3, #32]
 800ddf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a1b      	ldr	r3, [r3, #32]
 800ddf8:	f023 0210 	bic.w	r2, r3, #16
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800de12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	021b      	lsls	r3, r3, #8
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	4313      	orrs	r3, r2
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	f023 0320 	bic.w	r3, r3, #32
 800de32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	011b      	lsls	r3, r3, #4
 800de3a:	697a      	ldr	r2, [r7, #20]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4a28      	ldr	r2, [pc, #160]	@ (800dee4 <TIM_OC2_SetConfig+0x100>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d003      	beq.n	800de50 <TIM_OC2_SetConfig+0x6c>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a27      	ldr	r2, [pc, #156]	@ (800dee8 <TIM_OC2_SetConfig+0x104>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d10d      	bne.n	800de6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	011b      	lsls	r3, r3, #4
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	4313      	orrs	r3, r2
 800de62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	4a1d      	ldr	r2, [pc, #116]	@ (800dee4 <TIM_OC2_SetConfig+0x100>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d00f      	beq.n	800de94 <TIM_OC2_SetConfig+0xb0>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	4a1c      	ldr	r2, [pc, #112]	@ (800dee8 <TIM_OC2_SetConfig+0x104>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00b      	beq.n	800de94 <TIM_OC2_SetConfig+0xb0>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a1b      	ldr	r2, [pc, #108]	@ (800deec <TIM_OC2_SetConfig+0x108>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d007      	beq.n	800de94 <TIM_OC2_SetConfig+0xb0>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a1a      	ldr	r2, [pc, #104]	@ (800def0 <TIM_OC2_SetConfig+0x10c>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d003      	beq.n	800de94 <TIM_OC2_SetConfig+0xb0>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a19      	ldr	r2, [pc, #100]	@ (800def4 <TIM_OC2_SetConfig+0x110>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d113      	bne.n	800debc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800de9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	695b      	ldr	r3, [r3, #20]
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	4313      	orrs	r3, r2
 800deae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	693a      	ldr	r2, [r7, #16]
 800deb8:	4313      	orrs	r3, r2
 800deba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	693a      	ldr	r2, [r7, #16]
 800dec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	697a      	ldr	r2, [r7, #20]
 800ded4:	621a      	str	r2, [r3, #32]
}
 800ded6:	bf00      	nop
 800ded8:	371c      	adds	r7, #28
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	40012c00 	.word	0x40012c00
 800dee8:	40013400 	.word	0x40013400
 800deec:	40014000 	.word	0x40014000
 800def0:	40014400 	.word	0x40014400
 800def4:	40014800 	.word	0x40014800

0800def8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800def8:	b480      	push	{r7}
 800defa:	b087      	sub	sp, #28
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a1b      	ldr	r3, [r3, #32]
 800df06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a1b      	ldr	r3, [r3, #32]
 800df0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	69db      	ldr	r3, [r3, #28]
 800df1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f023 0303 	bic.w	r3, r3, #3
 800df32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800df44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	021b      	lsls	r3, r3, #8
 800df4c:	697a      	ldr	r2, [r7, #20]
 800df4e:	4313      	orrs	r3, r2
 800df50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	4a27      	ldr	r2, [pc, #156]	@ (800dff4 <TIM_OC3_SetConfig+0xfc>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d003      	beq.n	800df62 <TIM_OC3_SetConfig+0x6a>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4a26      	ldr	r2, [pc, #152]	@ (800dff8 <TIM_OC3_SetConfig+0x100>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d10d      	bne.n	800df7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800df68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	021b      	lsls	r3, r3, #8
 800df70:	697a      	ldr	r2, [r7, #20]
 800df72:	4313      	orrs	r3, r2
 800df74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800df7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4a1c      	ldr	r2, [pc, #112]	@ (800dff4 <TIM_OC3_SetConfig+0xfc>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d00f      	beq.n	800dfa6 <TIM_OC3_SetConfig+0xae>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4a1b      	ldr	r2, [pc, #108]	@ (800dff8 <TIM_OC3_SetConfig+0x100>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d00b      	beq.n	800dfa6 <TIM_OC3_SetConfig+0xae>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4a1a      	ldr	r2, [pc, #104]	@ (800dffc <TIM_OC3_SetConfig+0x104>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d007      	beq.n	800dfa6 <TIM_OC3_SetConfig+0xae>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4a19      	ldr	r2, [pc, #100]	@ (800e000 <TIM_OC3_SetConfig+0x108>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d003      	beq.n	800dfa6 <TIM_OC3_SetConfig+0xae>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4a18      	ldr	r2, [pc, #96]	@ (800e004 <TIM_OC3_SetConfig+0x10c>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d113      	bne.n	800dfce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dfac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dfb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	011b      	lsls	r3, r3, #4
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	699b      	ldr	r3, [r3, #24]
 800dfc6:	011b      	lsls	r3, r3, #4
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	685a      	ldr	r2, [r3, #4]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	697a      	ldr	r2, [r7, #20]
 800dfe6:	621a      	str	r2, [r3, #32]
}
 800dfe8:	bf00      	nop
 800dfea:	371c      	adds	r7, #28
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr
 800dff4:	40012c00 	.word	0x40012c00
 800dff8:	40013400 	.word	0x40013400
 800dffc:	40014000 	.word	0x40014000
 800e000:	40014400 	.word	0x40014400
 800e004:	40014800 	.word	0x40014800

0800e008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e008:	b480      	push	{r7}
 800e00a:	b087      	sub	sp, #28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	021b      	lsls	r3, r3, #8
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	031b      	lsls	r3, r3, #12
 800e05e:	693a      	ldr	r2, [r7, #16]
 800e060:	4313      	orrs	r3, r2
 800e062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a18      	ldr	r2, [pc, #96]	@ (800e0c8 <TIM_OC4_SetConfig+0xc0>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d00f      	beq.n	800e08c <TIM_OC4_SetConfig+0x84>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4a17      	ldr	r2, [pc, #92]	@ (800e0cc <TIM_OC4_SetConfig+0xc4>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d00b      	beq.n	800e08c <TIM_OC4_SetConfig+0x84>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4a16      	ldr	r2, [pc, #88]	@ (800e0d0 <TIM_OC4_SetConfig+0xc8>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d007      	beq.n	800e08c <TIM_OC4_SetConfig+0x84>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4a15      	ldr	r2, [pc, #84]	@ (800e0d4 <TIM_OC4_SetConfig+0xcc>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d003      	beq.n	800e08c <TIM_OC4_SetConfig+0x84>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4a14      	ldr	r2, [pc, #80]	@ (800e0d8 <TIM_OC4_SetConfig+0xd0>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d109      	bne.n	800e0a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	695b      	ldr	r3, [r3, #20]
 800e098:	019b      	lsls	r3, r3, #6
 800e09a:	697a      	ldr	r2, [r7, #20]
 800e09c:	4313      	orrs	r3, r2
 800e09e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	685a      	ldr	r2, [r3, #4]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	621a      	str	r2, [r3, #32]
}
 800e0ba:	bf00      	nop
 800e0bc:	371c      	adds	r7, #28
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop
 800e0c8:	40012c00 	.word	0x40012c00
 800e0cc:	40013400 	.word	0x40013400
 800e0d0:	40014000 	.word	0x40014000
 800e0d4:	40014400 	.word	0x40014400
 800e0d8:	40014800 	.word	0x40014800

0800e0dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b087      	sub	sp, #28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6a1b      	ldr	r3, [r3, #32]
 800e0ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6a1b      	ldr	r3, [r3, #32]
 800e0f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e10a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e10e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	4313      	orrs	r3, r2
 800e118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	689b      	ldr	r3, [r3, #8]
 800e126:	041b      	lsls	r3, r3, #16
 800e128:	693a      	ldr	r2, [r7, #16]
 800e12a:	4313      	orrs	r3, r2
 800e12c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4a17      	ldr	r2, [pc, #92]	@ (800e190 <TIM_OC5_SetConfig+0xb4>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d00f      	beq.n	800e156 <TIM_OC5_SetConfig+0x7a>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	4a16      	ldr	r2, [pc, #88]	@ (800e194 <TIM_OC5_SetConfig+0xb8>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d00b      	beq.n	800e156 <TIM_OC5_SetConfig+0x7a>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4a15      	ldr	r2, [pc, #84]	@ (800e198 <TIM_OC5_SetConfig+0xbc>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d007      	beq.n	800e156 <TIM_OC5_SetConfig+0x7a>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a14      	ldr	r2, [pc, #80]	@ (800e19c <TIM_OC5_SetConfig+0xc0>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d003      	beq.n	800e156 <TIM_OC5_SetConfig+0x7a>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a13      	ldr	r2, [pc, #76]	@ (800e1a0 <TIM_OC5_SetConfig+0xc4>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d109      	bne.n	800e16a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e15c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	695b      	ldr	r3, [r3, #20]
 800e162:	021b      	lsls	r3, r3, #8
 800e164:	697a      	ldr	r2, [r7, #20]
 800e166:	4313      	orrs	r3, r2
 800e168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	697a      	ldr	r2, [r7, #20]
 800e16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	685a      	ldr	r2, [r3, #4]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	693a      	ldr	r2, [r7, #16]
 800e182:	621a      	str	r2, [r3, #32]
}
 800e184:	bf00      	nop
 800e186:	371c      	adds	r7, #28
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	40012c00 	.word	0x40012c00
 800e194:	40013400 	.word	0x40013400
 800e198:	40014000 	.word	0x40014000
 800e19c:	40014400 	.word	0x40014400
 800e1a0:	40014800 	.word	0x40014800

0800e1a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b087      	sub	sp, #28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a1b      	ldr	r3, [r3, #32]
 800e1b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6a1b      	ldr	r3, [r3, #32]
 800e1b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e1d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	021b      	lsls	r3, r3, #8
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e1ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	051b      	lsls	r3, r3, #20
 800e1f2:	693a      	ldr	r2, [r7, #16]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4a18      	ldr	r2, [pc, #96]	@ (800e25c <TIM_OC6_SetConfig+0xb8>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d00f      	beq.n	800e220 <TIM_OC6_SetConfig+0x7c>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4a17      	ldr	r2, [pc, #92]	@ (800e260 <TIM_OC6_SetConfig+0xbc>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d00b      	beq.n	800e220 <TIM_OC6_SetConfig+0x7c>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4a16      	ldr	r2, [pc, #88]	@ (800e264 <TIM_OC6_SetConfig+0xc0>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d007      	beq.n	800e220 <TIM_OC6_SetConfig+0x7c>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4a15      	ldr	r2, [pc, #84]	@ (800e268 <TIM_OC6_SetConfig+0xc4>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d003      	beq.n	800e220 <TIM_OC6_SetConfig+0x7c>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4a14      	ldr	r2, [pc, #80]	@ (800e26c <TIM_OC6_SetConfig+0xc8>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d109      	bne.n	800e234 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	029b      	lsls	r3, r3, #10
 800e22e:	697a      	ldr	r2, [r7, #20]
 800e230:	4313      	orrs	r3, r2
 800e232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	697a      	ldr	r2, [r7, #20]
 800e238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	685a      	ldr	r2, [r3, #4]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	693a      	ldr	r2, [r7, #16]
 800e24c:	621a      	str	r2, [r3, #32]
}
 800e24e:	bf00      	nop
 800e250:	371c      	adds	r7, #28
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	40012c00 	.word	0x40012c00
 800e260:	40013400 	.word	0x40013400
 800e264:	40014000 	.word	0x40014000
 800e268:	40014400 	.word	0x40014400
 800e26c:	40014800 	.word	0x40014800

0800e270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e280:	2b01      	cmp	r3, #1
 800e282:	d101      	bne.n	800e288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e284:	2302      	movs	r3, #2
 800e286:	e068      	b.n	800e35a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2202      	movs	r2, #2
 800e294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a2e      	ldr	r2, [pc, #184]	@ (800e368 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d004      	beq.n	800e2bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a2d      	ldr	r2, [pc, #180]	@ (800e36c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d108      	bne.n	800e2ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e2c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a1e      	ldr	r2, [pc, #120]	@ (800e368 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d01d      	beq.n	800e32e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2fa:	d018      	beq.n	800e32e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a1b      	ldr	r2, [pc, #108]	@ (800e370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d013      	beq.n	800e32e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a1a      	ldr	r2, [pc, #104]	@ (800e374 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d00e      	beq.n	800e32e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a18      	ldr	r2, [pc, #96]	@ (800e378 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d009      	beq.n	800e32e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a13      	ldr	r2, [pc, #76]	@ (800e36c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d004      	beq.n	800e32e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a14      	ldr	r2, [pc, #80]	@ (800e37c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d10c      	bne.n	800e348 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3714      	adds	r7, #20
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop
 800e368:	40012c00 	.word	0x40012c00
 800e36c:	40013400 	.word	0x40013400
 800e370:	40000400 	.word	0x40000400
 800e374:	40000800 	.word	0x40000800
 800e378:	40000c00 	.word	0x40000c00
 800e37c:	40014000 	.word	0x40014000

0800e380 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e38a:	2300      	movs	r3, #0
 800e38c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e394:	2b01      	cmp	r3, #1
 800e396:	d101      	bne.n	800e39c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e398:	2302      	movs	r3, #2
 800e39a:	e065      	b.n	800e468 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	691b      	ldr	r3, [r3, #16]
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e402:	4313      	orrs	r3, r2
 800e404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	699b      	ldr	r3, [r3, #24]
 800e410:	041b      	lsls	r3, r3, #16
 800e412:	4313      	orrs	r3, r2
 800e414:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4a16      	ldr	r2, [pc, #88]	@ (800e474 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d004      	beq.n	800e42a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a14      	ldr	r2, [pc, #80]	@ (800e478 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d115      	bne.n	800e456 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e434:	051b      	lsls	r3, r3, #20
 800e436:	4313      	orrs	r3, r2
 800e438:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	69db      	ldr	r3, [r3, #28]
 800e444:	4313      	orrs	r3, r2
 800e446:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	6a1b      	ldr	r3, [r3, #32]
 800e452:	4313      	orrs	r3, r2
 800e454:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2200      	movs	r2, #0
 800e462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e466:	2300      	movs	r3, #0
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr
 800e474:	40012c00 	.word	0x40012c00
 800e478:	40013400 	.word	0x40013400

0800e47c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800e47c:	b480      	push	{r7}
 800e47e:	b08b      	sub	sp, #44	@ 0x2c
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e488:	2300      	movs	r3, #0
 800e48a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e494:	2b01      	cmp	r3, #1
 800e496:	d101      	bne.n	800e49c <HAL_TIMEx_ConfigBreakInput+0x20>
 800e498:	2302      	movs	r3, #2
 800e49a:	e0af      	b.n	800e5fc <HAL_TIMEx_ConfigBreakInput+0x180>
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	2b07      	cmp	r3, #7
 800e4ac:	d83a      	bhi.n	800e524 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800e4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e4b4 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800e4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b4:	0800e4d5 	.word	0x0800e4d5
 800e4b8:	0800e4e9 	.word	0x0800e4e9
 800e4bc:	0800e525 	.word	0x0800e525
 800e4c0:	0800e4fd 	.word	0x0800e4fd
 800e4c4:	0800e525 	.word	0x0800e525
 800e4c8:	0800e525 	.word	0x0800e525
 800e4cc:	0800e525 	.word	0x0800e525
 800e4d0:	0800e511 	.word	0x0800e511
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800e4dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4e0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800e4e2:	2309      	movs	r3, #9
 800e4e4:	613b      	str	r3, [r7, #16]
      break;
 800e4e6:	e026      	b.n	800e536 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800e4e8:	2302      	movs	r3, #2
 800e4ea:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800e4f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4f4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800e4f6:	230a      	movs	r3, #10
 800e4f8:	613b      	str	r3, [r7, #16]
      break;
 800e4fa:	e01c      	b.n	800e536 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800e4fc:	2304      	movs	r3, #4
 800e4fe:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800e500:	2302      	movs	r3, #2
 800e502:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800e504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e508:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800e50a:	230b      	movs	r3, #11
 800e50c:	613b      	str	r3, [r7, #16]
      break;
 800e50e:	e012      	b.n	800e536 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800e510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e514:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800e516:	2308      	movs	r3, #8
 800e518:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800e51a:	2300      	movs	r3, #0
 800e51c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800e51e:	2300      	movs	r3, #0
 800e520:	613b      	str	r3, [r7, #16]
      break;
 800e522:	e008      	b.n	800e536 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800e524:	2300      	movs	r3, #0
 800e526:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800e528:	2300      	movs	r3, #0
 800e52a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800e52c:	2300      	movs	r3, #0
 800e52e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800e530:	2300      	movs	r3, #0
 800e532:	613b      	str	r3, [r7, #16]
      break;
 800e534:	bf00      	nop
    }
  }

  switch (BreakInput)
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d003      	beq.n	800e544 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	2b02      	cmp	r3, #2
 800e540:	d029      	beq.n	800e596 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800e542:	e051      	b.n	800e5e8 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e54a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	43db      	mvns	r3, r3
 800e550:	6a3a      	ldr	r2, [r7, #32]
 800e552:	4013      	ands	r3, r2
 800e554:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	685a      	ldr	r2, [r3, #4]
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	409a      	lsls	r2, r3
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	4013      	ands	r3, r2
 800e562:	6a3a      	ldr	r2, [r7, #32]
 800e564:	4313      	orrs	r3, r2
 800e566:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b08      	cmp	r3, #8
 800e56e:	d00d      	beq.n	800e58c <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	43db      	mvns	r3, r3
 800e574:	6a3a      	ldr	r2, [r7, #32]
 800e576:	4013      	ands	r3, r2
 800e578:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	689a      	ldr	r2, [r3, #8]
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	409a      	lsls	r2, r3
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	4013      	ands	r3, r2
 800e586:	6a3a      	ldr	r2, [r7, #32]
 800e588:	4313      	orrs	r3, r2
 800e58a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6a3a      	ldr	r2, [r7, #32]
 800e592:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800e594:	e02c      	b.n	800e5f0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e59c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	43db      	mvns	r3, r3
 800e5a2:	6a3a      	ldr	r2, [r7, #32]
 800e5a4:	4013      	ands	r3, r2
 800e5a6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	409a      	lsls	r2, r3
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	4013      	ands	r3, r2
 800e5b4:	6a3a      	ldr	r2, [r7, #32]
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b08      	cmp	r3, #8
 800e5c0:	d00d      	beq.n	800e5de <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	43db      	mvns	r3, r3
 800e5c6:	6a3a      	ldr	r2, [r7, #32]
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	689a      	ldr	r2, [r3, #8]
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	409a      	lsls	r2, r3
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	4013      	ands	r3, r2
 800e5d8:	6a3a      	ldr	r2, [r7, #32]
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6a3a      	ldr	r2, [r7, #32]
 800e5e4:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800e5e6:	e003      	b.n	800e5f0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e5ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	372c      	adds	r7, #44	@ 0x2c
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e624:	bf00      	nop
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e638:	bf00      	nop
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d101      	bne.n	800e656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	e042      	b.n	800e6dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d106      	bne.n	800e66e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7f5 fb83 	bl	8003d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2224      	movs	r2, #36	@ 0x24
 800e672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f022 0201 	bic.w	r2, r2, #1
 800e684:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 fbb2 	bl	800edf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 f8b3 	bl	800e800 <UART_SetConfig>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d101      	bne.n	800e6a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e01b      	b.n	800e6dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	685a      	ldr	r2, [r3, #4]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e6b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	689a      	ldr	r2, [r3, #8]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e6c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f042 0201 	orr.w	r2, r2, #1
 800e6d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 fc31 	bl	800ef3c <UART_CheckIdleState>
 800e6da:	4603      	mov	r3, r0
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b08a      	sub	sp, #40	@ 0x28
 800e6e8:	af02      	add	r7, sp, #8
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	603b      	str	r3, [r7, #0]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6fa:	2b20      	cmp	r3, #32
 800e6fc:	d17b      	bne.n	800e7f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d002      	beq.n	800e70a <HAL_UART_Transmit+0x26>
 800e704:	88fb      	ldrh	r3, [r7, #6]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d101      	bne.n	800e70e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e074      	b.n	800e7f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2221      	movs	r2, #33	@ 0x21
 800e71a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e71e:	f7f7 fef9 	bl	8006514 <HAL_GetTick>
 800e722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	88fa      	ldrh	r2, [r7, #6]
 800e728:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	88fa      	ldrh	r2, [r7, #6]
 800e730:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e73c:	d108      	bne.n	800e750 <HAL_UART_Transmit+0x6c>
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d104      	bne.n	800e750 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e746:	2300      	movs	r3, #0
 800e748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	61bb      	str	r3, [r7, #24]
 800e74e:	e003      	b.n	800e758 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e754:	2300      	movs	r3, #0
 800e756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e758:	e030      	b.n	800e7bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	9300      	str	r3, [sp, #0]
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	2200      	movs	r2, #0
 800e762:	2180      	movs	r1, #128	@ 0x80
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f000 fc93 	bl	800f090 <UART_WaitOnFlagUntilTimeout>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d005      	beq.n	800e77c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2220      	movs	r2, #32
 800e774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e778:	2303      	movs	r3, #3
 800e77a:	e03d      	b.n	800e7f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d10b      	bne.n	800e79a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	881a      	ldrh	r2, [r3, #0]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e78e:	b292      	uxth	r2, r2
 800e790:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	3302      	adds	r3, #2
 800e796:	61bb      	str	r3, [r7, #24]
 800e798:	e007      	b.n	800e7aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	781a      	ldrb	r2, [r3, #0]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d1c8      	bne.n	800e75a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	2140      	movs	r1, #64	@ 0x40
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f000 fc5c 	bl	800f090 <UART_WaitOnFlagUntilTimeout>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d005      	beq.n	800e7ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2220      	movs	r2, #32
 800e7e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e006      	b.n	800e7f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2220      	movs	r2, #32
 800e7ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	e000      	b.n	800e7f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e7f6:	2302      	movs	r3, #2
  }
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3720      	adds	r7, #32
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e804:	b08c      	sub	sp, #48	@ 0x30
 800e806:	af00      	add	r7, sp, #0
 800e808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e80a:	2300      	movs	r3, #0
 800e80c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	689a      	ldr	r2, [r3, #8]
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	431a      	orrs	r2, r3
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	431a      	orrs	r2, r3
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	69db      	ldr	r3, [r3, #28]
 800e824:	4313      	orrs	r3, r2
 800e826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	4baa      	ldr	r3, [pc, #680]	@ (800ead8 <UART_SetConfig+0x2d8>)
 800e830:	4013      	ands	r3, r2
 800e832:	697a      	ldr	r2, [r7, #20]
 800e834:	6812      	ldr	r2, [r2, #0]
 800e836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e838:	430b      	orrs	r3, r1
 800e83a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	68da      	ldr	r2, [r3, #12]
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	430a      	orrs	r2, r1
 800e850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a9f      	ldr	r2, [pc, #636]	@ (800eadc <UART_SetConfig+0x2dc>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d004      	beq.n	800e86c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e868:	4313      	orrs	r3, r2
 800e86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800e876:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800e87a:	697a      	ldr	r2, [r7, #20]
 800e87c:	6812      	ldr	r2, [r2, #0]
 800e87e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e880:	430b      	orrs	r3, r1
 800e882:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e88a:	f023 010f 	bic.w	r1, r3, #15
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	430a      	orrs	r2, r1
 800e898:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a90      	ldr	r2, [pc, #576]	@ (800eae0 <UART_SetConfig+0x2e0>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d125      	bne.n	800e8f0 <UART_SetConfig+0xf0>
 800e8a4:	4b8f      	ldr	r3, [pc, #572]	@ (800eae4 <UART_SetConfig+0x2e4>)
 800e8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8aa:	f003 0303 	and.w	r3, r3, #3
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d81a      	bhi.n	800e8e8 <UART_SetConfig+0xe8>
 800e8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e8b8 <UART_SetConfig+0xb8>)
 800e8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b8:	0800e8c9 	.word	0x0800e8c9
 800e8bc:	0800e8d9 	.word	0x0800e8d9
 800e8c0:	0800e8d1 	.word	0x0800e8d1
 800e8c4:	0800e8e1 	.word	0x0800e8e1
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e8ce:	e116      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e8d6:	e112      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e8d8:	2304      	movs	r3, #4
 800e8da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e8de:	e10e      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e8e0:	2308      	movs	r3, #8
 800e8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e8e6:	e10a      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e8e8:	2310      	movs	r3, #16
 800e8ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e8ee:	e106      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a7c      	ldr	r2, [pc, #496]	@ (800eae8 <UART_SetConfig+0x2e8>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d138      	bne.n	800e96c <UART_SetConfig+0x16c>
 800e8fa:	4b7a      	ldr	r3, [pc, #488]	@ (800eae4 <UART_SetConfig+0x2e4>)
 800e8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e900:	f003 030c 	and.w	r3, r3, #12
 800e904:	2b0c      	cmp	r3, #12
 800e906:	d82d      	bhi.n	800e964 <UART_SetConfig+0x164>
 800e908:	a201      	add	r2, pc, #4	@ (adr r2, 800e910 <UART_SetConfig+0x110>)
 800e90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90e:	bf00      	nop
 800e910:	0800e945 	.word	0x0800e945
 800e914:	0800e965 	.word	0x0800e965
 800e918:	0800e965 	.word	0x0800e965
 800e91c:	0800e965 	.word	0x0800e965
 800e920:	0800e955 	.word	0x0800e955
 800e924:	0800e965 	.word	0x0800e965
 800e928:	0800e965 	.word	0x0800e965
 800e92c:	0800e965 	.word	0x0800e965
 800e930:	0800e94d 	.word	0x0800e94d
 800e934:	0800e965 	.word	0x0800e965
 800e938:	0800e965 	.word	0x0800e965
 800e93c:	0800e965 	.word	0x0800e965
 800e940:	0800e95d 	.word	0x0800e95d
 800e944:	2300      	movs	r3, #0
 800e946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e94a:	e0d8      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e94c:	2302      	movs	r3, #2
 800e94e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e952:	e0d4      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e954:	2304      	movs	r3, #4
 800e956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e95a:	e0d0      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e95c:	2308      	movs	r3, #8
 800e95e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e962:	e0cc      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e964:	2310      	movs	r3, #16
 800e966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e96a:	e0c8      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a5e      	ldr	r2, [pc, #376]	@ (800eaec <UART_SetConfig+0x2ec>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d125      	bne.n	800e9c2 <UART_SetConfig+0x1c2>
 800e976:	4b5b      	ldr	r3, [pc, #364]	@ (800eae4 <UART_SetConfig+0x2e4>)
 800e978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e97c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e980:	2b30      	cmp	r3, #48	@ 0x30
 800e982:	d016      	beq.n	800e9b2 <UART_SetConfig+0x1b2>
 800e984:	2b30      	cmp	r3, #48	@ 0x30
 800e986:	d818      	bhi.n	800e9ba <UART_SetConfig+0x1ba>
 800e988:	2b20      	cmp	r3, #32
 800e98a:	d00a      	beq.n	800e9a2 <UART_SetConfig+0x1a2>
 800e98c:	2b20      	cmp	r3, #32
 800e98e:	d814      	bhi.n	800e9ba <UART_SetConfig+0x1ba>
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <UART_SetConfig+0x19a>
 800e994:	2b10      	cmp	r3, #16
 800e996:	d008      	beq.n	800e9aa <UART_SetConfig+0x1aa>
 800e998:	e00f      	b.n	800e9ba <UART_SetConfig+0x1ba>
 800e99a:	2300      	movs	r3, #0
 800e99c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e9a0:	e0ad      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e9a2:	2302      	movs	r3, #2
 800e9a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e9a8:	e0a9      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e9aa:	2304      	movs	r3, #4
 800e9ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e9b0:	e0a5      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e9b2:	2308      	movs	r3, #8
 800e9b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e9b8:	e0a1      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e9ba:	2310      	movs	r3, #16
 800e9bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e9c0:	e09d      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4a4a      	ldr	r2, [pc, #296]	@ (800eaf0 <UART_SetConfig+0x2f0>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d125      	bne.n	800ea18 <UART_SetConfig+0x218>
 800e9cc:	4b45      	ldr	r3, [pc, #276]	@ (800eae4 <UART_SetConfig+0x2e4>)
 800e9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e9d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800e9d8:	d016      	beq.n	800ea08 <UART_SetConfig+0x208>
 800e9da:	2bc0      	cmp	r3, #192	@ 0xc0
 800e9dc:	d818      	bhi.n	800ea10 <UART_SetConfig+0x210>
 800e9de:	2b80      	cmp	r3, #128	@ 0x80
 800e9e0:	d00a      	beq.n	800e9f8 <UART_SetConfig+0x1f8>
 800e9e2:	2b80      	cmp	r3, #128	@ 0x80
 800e9e4:	d814      	bhi.n	800ea10 <UART_SetConfig+0x210>
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d002      	beq.n	800e9f0 <UART_SetConfig+0x1f0>
 800e9ea:	2b40      	cmp	r3, #64	@ 0x40
 800e9ec:	d008      	beq.n	800ea00 <UART_SetConfig+0x200>
 800e9ee:	e00f      	b.n	800ea10 <UART_SetConfig+0x210>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e9f6:	e082      	b.n	800eafe <UART_SetConfig+0x2fe>
 800e9f8:	2302      	movs	r3, #2
 800e9fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e9fe:	e07e      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea00:	2304      	movs	r3, #4
 800ea02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea06:	e07a      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea08:	2308      	movs	r3, #8
 800ea0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea0e:	e076      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea10:	2310      	movs	r3, #16
 800ea12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea16:	e072      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a35      	ldr	r2, [pc, #212]	@ (800eaf4 <UART_SetConfig+0x2f4>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d12a      	bne.n	800ea78 <UART_SetConfig+0x278>
 800ea22:	4b30      	ldr	r3, [pc, #192]	@ (800eae4 <UART_SetConfig+0x2e4>)
 800ea24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ea30:	d01a      	beq.n	800ea68 <UART_SetConfig+0x268>
 800ea32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ea36:	d81b      	bhi.n	800ea70 <UART_SetConfig+0x270>
 800ea38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea3c:	d00c      	beq.n	800ea58 <UART_SetConfig+0x258>
 800ea3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea42:	d815      	bhi.n	800ea70 <UART_SetConfig+0x270>
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d003      	beq.n	800ea50 <UART_SetConfig+0x250>
 800ea48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea4c:	d008      	beq.n	800ea60 <UART_SetConfig+0x260>
 800ea4e:	e00f      	b.n	800ea70 <UART_SetConfig+0x270>
 800ea50:	2300      	movs	r3, #0
 800ea52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea56:	e052      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea58:	2302      	movs	r3, #2
 800ea5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea5e:	e04e      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea60:	2304      	movs	r3, #4
 800ea62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea66:	e04a      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea68:	2308      	movs	r3, #8
 800ea6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea6e:	e046      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea70:	2310      	movs	r3, #16
 800ea72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea76:	e042      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a17      	ldr	r2, [pc, #92]	@ (800eadc <UART_SetConfig+0x2dc>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d13a      	bne.n	800eaf8 <UART_SetConfig+0x2f8>
 800ea82:	4b18      	ldr	r3, [pc, #96]	@ (800eae4 <UART_SetConfig+0x2e4>)
 800ea84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ea8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ea90:	d01a      	beq.n	800eac8 <UART_SetConfig+0x2c8>
 800ea92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ea96:	d81b      	bhi.n	800ead0 <UART_SetConfig+0x2d0>
 800ea98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea9c:	d00c      	beq.n	800eab8 <UART_SetConfig+0x2b8>
 800ea9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eaa2:	d815      	bhi.n	800ead0 <UART_SetConfig+0x2d0>
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <UART_SetConfig+0x2b0>
 800eaa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eaac:	d008      	beq.n	800eac0 <UART_SetConfig+0x2c0>
 800eaae:	e00f      	b.n	800ead0 <UART_SetConfig+0x2d0>
 800eab0:	2300      	movs	r3, #0
 800eab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eab6:	e022      	b.n	800eafe <UART_SetConfig+0x2fe>
 800eab8:	2302      	movs	r3, #2
 800eaba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eabe:	e01e      	b.n	800eafe <UART_SetConfig+0x2fe>
 800eac0:	2304      	movs	r3, #4
 800eac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eac6:	e01a      	b.n	800eafe <UART_SetConfig+0x2fe>
 800eac8:	2308      	movs	r3, #8
 800eaca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eace:	e016      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ead0:	2310      	movs	r3, #16
 800ead2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ead6:	e012      	b.n	800eafe <UART_SetConfig+0x2fe>
 800ead8:	cfff69f3 	.word	0xcfff69f3
 800eadc:	40008000 	.word	0x40008000
 800eae0:	40013800 	.word	0x40013800
 800eae4:	40021000 	.word	0x40021000
 800eae8:	40004400 	.word	0x40004400
 800eaec:	40004800 	.word	0x40004800
 800eaf0:	40004c00 	.word	0x40004c00
 800eaf4:	40005000 	.word	0x40005000
 800eaf8:	2310      	movs	r3, #16
 800eafa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4aae      	ldr	r2, [pc, #696]	@ (800edbc <UART_SetConfig+0x5bc>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	f040 8097 	bne.w	800ec38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800eb0e:	2b08      	cmp	r3, #8
 800eb10:	d823      	bhi.n	800eb5a <UART_SetConfig+0x35a>
 800eb12:	a201      	add	r2, pc, #4	@ (adr r2, 800eb18 <UART_SetConfig+0x318>)
 800eb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb18:	0800eb3d 	.word	0x0800eb3d
 800eb1c:	0800eb5b 	.word	0x0800eb5b
 800eb20:	0800eb45 	.word	0x0800eb45
 800eb24:	0800eb5b 	.word	0x0800eb5b
 800eb28:	0800eb4b 	.word	0x0800eb4b
 800eb2c:	0800eb5b 	.word	0x0800eb5b
 800eb30:	0800eb5b 	.word	0x0800eb5b
 800eb34:	0800eb5b 	.word	0x0800eb5b
 800eb38:	0800eb53 	.word	0x0800eb53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb3c:	f7fa fde8 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800eb40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800eb42:	e010      	b.n	800eb66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb44:	4b9e      	ldr	r3, [pc, #632]	@ (800edc0 <UART_SetConfig+0x5c0>)
 800eb46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800eb48:	e00d      	b.n	800eb66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb4a:	f7fa fd49 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800eb4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800eb50:	e009      	b.n	800eb66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800eb58:	e005      	b.n	800eb66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800eb64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f000 8130 	beq.w	800edce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb72:	4a94      	ldr	r2, [pc, #592]	@ (800edc4 <UART_SetConfig+0x5c4>)
 800eb74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	685a      	ldr	r2, [r3, #4]
 800eb86:	4613      	mov	r3, r2
 800eb88:	005b      	lsls	r3, r3, #1
 800eb8a:	4413      	add	r3, r2
 800eb8c:	69ba      	ldr	r2, [r7, #24]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d305      	bcc.n	800eb9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb98:	69ba      	ldr	r2, [r7, #24]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d903      	bls.n	800eba6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800eba4:	e113      	b.n	800edce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba8:	2200      	movs	r2, #0
 800ebaa:	60bb      	str	r3, [r7, #8]
 800ebac:	60fa      	str	r2, [r7, #12]
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb2:	4a84      	ldr	r2, [pc, #528]	@ (800edc4 <UART_SetConfig+0x5c4>)
 800ebb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	2200      	movs	r2, #0
 800ebbc:	603b      	str	r3, [r7, #0]
 800ebbe:	607a      	str	r2, [r7, #4]
 800ebc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ebc8:	f7f2 f806 	bl	8000bd8 <__aeabi_uldivmod>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	4610      	mov	r0, r2
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	f04f 0200 	mov.w	r2, #0
 800ebd8:	f04f 0300 	mov.w	r3, #0
 800ebdc:	020b      	lsls	r3, r1, #8
 800ebde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ebe2:	0202      	lsls	r2, r0, #8
 800ebe4:	6979      	ldr	r1, [r7, #20]
 800ebe6:	6849      	ldr	r1, [r1, #4]
 800ebe8:	0849      	lsrs	r1, r1, #1
 800ebea:	2000      	movs	r0, #0
 800ebec:	460c      	mov	r4, r1
 800ebee:	4605      	mov	r5, r0
 800ebf0:	eb12 0804 	adds.w	r8, r2, r4
 800ebf4:	eb43 0905 	adc.w	r9, r3, r5
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	469a      	mov	sl, r3
 800ec00:	4693      	mov	fp, r2
 800ec02:	4652      	mov	r2, sl
 800ec04:	465b      	mov	r3, fp
 800ec06:	4640      	mov	r0, r8
 800ec08:	4649      	mov	r1, r9
 800ec0a:	f7f1 ffe5 	bl	8000bd8 <__aeabi_uldivmod>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	460b      	mov	r3, r1
 800ec12:	4613      	mov	r3, r2
 800ec14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec1c:	d308      	bcc.n	800ec30 <UART_SetConfig+0x430>
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec24:	d204      	bcs.n	800ec30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6a3a      	ldr	r2, [r7, #32]
 800ec2c:	60da      	str	r2, [r3, #12]
 800ec2e:	e0ce      	b.n	800edce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ec30:	2301      	movs	r3, #1
 800ec32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ec36:	e0ca      	b.n	800edce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	69db      	ldr	r3, [r3, #28]
 800ec3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec40:	d166      	bne.n	800ed10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ec42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ec46:	2b08      	cmp	r3, #8
 800ec48:	d827      	bhi.n	800ec9a <UART_SetConfig+0x49a>
 800ec4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec50 <UART_SetConfig+0x450>)
 800ec4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec50:	0800ec75 	.word	0x0800ec75
 800ec54:	0800ec7d 	.word	0x0800ec7d
 800ec58:	0800ec85 	.word	0x0800ec85
 800ec5c:	0800ec9b 	.word	0x0800ec9b
 800ec60:	0800ec8b 	.word	0x0800ec8b
 800ec64:	0800ec9b 	.word	0x0800ec9b
 800ec68:	0800ec9b 	.word	0x0800ec9b
 800ec6c:	0800ec9b 	.word	0x0800ec9b
 800ec70:	0800ec93 	.word	0x0800ec93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec74:	f7fa fd4c 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800ec78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ec7a:	e014      	b.n	800eca6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec7c:	f7fa fd5e 	bl	800973c <HAL_RCC_GetPCLK2Freq>
 800ec80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ec82:	e010      	b.n	800eca6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec84:	4b4e      	ldr	r3, [pc, #312]	@ (800edc0 <UART_SetConfig+0x5c0>)
 800ec86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ec88:	e00d      	b.n	800eca6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec8a:	f7fa fca9 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800ec8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ec90:	e009      	b.n	800eca6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ec98:	e005      	b.n	800eca6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800eca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f000 8090 	beq.w	800edce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb2:	4a44      	ldr	r2, [pc, #272]	@ (800edc4 <UART_SetConfig+0x5c4>)
 800ecb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecc0:	005a      	lsls	r2, r3, #1
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	085b      	lsrs	r3, r3, #1
 800ecc8:	441a      	add	r2, r3
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecd2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	2b0f      	cmp	r3, #15
 800ecd8:	d916      	bls.n	800ed08 <UART_SetConfig+0x508>
 800ecda:	6a3b      	ldr	r3, [r7, #32]
 800ecdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ece0:	d212      	bcs.n	800ed08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ece2:	6a3b      	ldr	r3, [r7, #32]
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	f023 030f 	bic.w	r3, r3, #15
 800ecea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ecec:	6a3b      	ldr	r3, [r7, #32]
 800ecee:	085b      	lsrs	r3, r3, #1
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	f003 0307 	and.w	r3, r3, #7
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	8bfb      	ldrh	r3, [r7, #30]
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	8bfa      	ldrh	r2, [r7, #30]
 800ed04:	60da      	str	r2, [r3, #12]
 800ed06:	e062      	b.n	800edce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ed0e:	e05e      	b.n	800edce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ed14:	2b08      	cmp	r3, #8
 800ed16:	d828      	bhi.n	800ed6a <UART_SetConfig+0x56a>
 800ed18:	a201      	add	r2, pc, #4	@ (adr r2, 800ed20 <UART_SetConfig+0x520>)
 800ed1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1e:	bf00      	nop
 800ed20:	0800ed45 	.word	0x0800ed45
 800ed24:	0800ed4d 	.word	0x0800ed4d
 800ed28:	0800ed55 	.word	0x0800ed55
 800ed2c:	0800ed6b 	.word	0x0800ed6b
 800ed30:	0800ed5b 	.word	0x0800ed5b
 800ed34:	0800ed6b 	.word	0x0800ed6b
 800ed38:	0800ed6b 	.word	0x0800ed6b
 800ed3c:	0800ed6b 	.word	0x0800ed6b
 800ed40:	0800ed63 	.word	0x0800ed63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed44:	f7fa fce4 	bl	8009710 <HAL_RCC_GetPCLK1Freq>
 800ed48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ed4a:	e014      	b.n	800ed76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed4c:	f7fa fcf6 	bl	800973c <HAL_RCC_GetPCLK2Freq>
 800ed50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ed52:	e010      	b.n	800ed76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ed54:	4b1a      	ldr	r3, [pc, #104]	@ (800edc0 <UART_SetConfig+0x5c0>)
 800ed56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ed58:	e00d      	b.n	800ed76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ed5a:	f7fa fc41 	bl	80095e0 <HAL_RCC_GetSysClockFreq>
 800ed5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ed60:	e009      	b.n	800ed76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ed68:	e005      	b.n	800ed76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ed74:	bf00      	nop
    }

    if (pclk != 0U)
 800ed76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d028      	beq.n	800edce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed80:	4a10      	ldr	r2, [pc, #64]	@ (800edc4 <UART_SetConfig+0x5c4>)
 800ed82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed86:	461a      	mov	r2, r3
 800ed88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	085b      	lsrs	r3, r3, #1
 800ed94:	441a      	add	r2, r3
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed9e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eda0:	6a3b      	ldr	r3, [r7, #32]
 800eda2:	2b0f      	cmp	r3, #15
 800eda4:	d910      	bls.n	800edc8 <UART_SetConfig+0x5c8>
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edac:	d20c      	bcs.n	800edc8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800edae:	6a3b      	ldr	r3, [r7, #32]
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	60da      	str	r2, [r3, #12]
 800edb8:	e009      	b.n	800edce <UART_SetConfig+0x5ce>
 800edba:	bf00      	nop
 800edbc:	40008000 	.word	0x40008000
 800edc0:	00f42400 	.word	0x00f42400
 800edc4:	08017610 	.word	0x08017610
      }
      else
      {
        ret = HAL_ERROR;
 800edc8:	2301      	movs	r3, #1
 800edca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	2201      	movs	r2, #1
 800edd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2201      	movs	r2, #1
 800edda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	2200      	movs	r2, #0
 800ede2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	2200      	movs	r2, #0
 800ede8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800edea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3730      	adds	r7, #48	@ 0x30
 800edf2:	46bd      	mov	sp, r7
 800edf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800edf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee04:	f003 0308 	and.w	r3, r3, #8
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00a      	beq.n	800ee22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	430a      	orrs	r2, r1
 800ee20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee26:	f003 0301 	and.w	r3, r3, #1
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00a      	beq.n	800ee44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	430a      	orrs	r2, r1
 800ee42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee48:	f003 0302 	and.w	r3, r3, #2
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00a      	beq.n	800ee66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	430a      	orrs	r2, r1
 800ee64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee6a:	f003 0304 	and.w	r3, r3, #4
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00a      	beq.n	800ee88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	430a      	orrs	r2, r1
 800ee86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee8c:	f003 0310 	and.w	r3, r3, #16
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00a      	beq.n	800eeaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	430a      	orrs	r2, r1
 800eea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeae:	f003 0320 	and.w	r3, r3, #32
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00a      	beq.n	800eecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	430a      	orrs	r2, r1
 800eeca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d01a      	beq.n	800ef0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	430a      	orrs	r2, r1
 800eeec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eef6:	d10a      	bne.n	800ef0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	430a      	orrs	r2, r1
 800ef0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00a      	beq.n	800ef30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	430a      	orrs	r2, r1
 800ef2e:	605a      	str	r2, [r3, #4]
  }
}
 800ef30:	bf00      	nop
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b098      	sub	sp, #96	@ 0x60
 800ef40:	af02      	add	r7, sp, #8
 800ef42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef4c:	f7f7 fae2 	bl	8006514 <HAL_GetTick>
 800ef50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f003 0308 	and.w	r3, r3, #8
 800ef5c:	2b08      	cmp	r3, #8
 800ef5e:	d12f      	bne.n	800efc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f88e 	bl	800f090 <UART_WaitOnFlagUntilTimeout>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d022      	beq.n	800efc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef82:	e853 3f00 	ldrex	r3, [r3]
 800ef86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ef88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	461a      	mov	r2, r3
 800ef96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef98:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ef9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800efa0:	e841 2300 	strex	r3, r2, [r1]
 800efa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800efa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1e6      	bne.n	800ef7a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2220      	movs	r2, #32
 800efb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800efbc:	2303      	movs	r3, #3
 800efbe:	e063      	b.n	800f088 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f003 0304 	and.w	r3, r3, #4
 800efca:	2b04      	cmp	r3, #4
 800efcc:	d149      	bne.n	800f062 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efd6:	2200      	movs	r2, #0
 800efd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 f857 	bl	800f090 <UART_WaitOnFlagUntilTimeout>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d03c      	beq.n	800f062 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff0:	e853 3f00 	ldrex	r3, [r3]
 800eff4:	623b      	str	r3, [r7, #32]
   return(result);
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800effc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	461a      	mov	r2, r3
 800f004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f006:	633b      	str	r3, [r7, #48]	@ 0x30
 800f008:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f00c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f00e:	e841 2300 	strex	r3, r2, [r1]
 800f012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1e6      	bne.n	800efe8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	3308      	adds	r3, #8
 800f020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	e853 3f00 	ldrex	r3, [r3]
 800f028:	60fb      	str	r3, [r7, #12]
   return(result);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f023 0301 	bic.w	r3, r3, #1
 800f030:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	3308      	adds	r3, #8
 800f038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f03a:	61fa      	str	r2, [r7, #28]
 800f03c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03e:	69b9      	ldr	r1, [r7, #24]
 800f040:	69fa      	ldr	r2, [r7, #28]
 800f042:	e841 2300 	strex	r3, r2, [r1]
 800f046:	617b      	str	r3, [r7, #20]
   return(result);
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d1e5      	bne.n	800f01a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2220      	movs	r2, #32
 800f052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2200      	movs	r2, #0
 800f05a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f05e:	2303      	movs	r3, #3
 800f060:	e012      	b.n	800f088 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2220      	movs	r2, #32
 800f066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2220      	movs	r2, #32
 800f06e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2200      	movs	r2, #0
 800f076:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3758      	adds	r7, #88	@ 0x58
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	603b      	str	r3, [r7, #0]
 800f09c:	4613      	mov	r3, r2
 800f09e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0a0:	e049      	b.n	800f136 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a8:	d045      	beq.n	800f136 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0aa:	f7f7 fa33 	bl	8006514 <HAL_GetTick>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	69ba      	ldr	r2, [r7, #24]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d302      	bcc.n	800f0c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	e048      	b.n	800f156 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f003 0304 	and.w	r3, r3, #4
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d031      	beq.n	800f136 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	69db      	ldr	r3, [r3, #28]
 800f0d8:	f003 0308 	and.w	r3, r3, #8
 800f0dc:	2b08      	cmp	r3, #8
 800f0de:	d110      	bne.n	800f102 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2208      	movs	r2, #8
 800f0e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f000 f838 	bl	800f15e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2208      	movs	r2, #8
 800f0f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f0fe:	2301      	movs	r3, #1
 800f100:	e029      	b.n	800f156 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	69db      	ldr	r3, [r3, #28]
 800f108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f10c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f110:	d111      	bne.n	800f136 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f11a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f000 f81e 	bl	800f15e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2220      	movs	r2, #32
 800f126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f132:	2303      	movs	r3, #3
 800f134:	e00f      	b.n	800f156 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	69da      	ldr	r2, [r3, #28]
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	4013      	ands	r3, r2
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	429a      	cmp	r2, r3
 800f144:	bf0c      	ite	eq
 800f146:	2301      	moveq	r3, #1
 800f148:	2300      	movne	r3, #0
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	461a      	mov	r2, r3
 800f14e:	79fb      	ldrb	r3, [r7, #7]
 800f150:	429a      	cmp	r2, r3
 800f152:	d0a6      	beq.n	800f0a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f15e:	b480      	push	{r7}
 800f160:	b095      	sub	sp, #84	@ 0x54
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f16e:	e853 3f00 	ldrex	r3, [r3]
 800f172:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f17a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	461a      	mov	r2, r3
 800f182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f184:	643b      	str	r3, [r7, #64]	@ 0x40
 800f186:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f188:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f18a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f18c:	e841 2300 	strex	r3, r2, [r1]
 800f190:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1e6      	bne.n	800f166 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	3308      	adds	r3, #8
 800f19e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a0:	6a3b      	ldr	r3, [r7, #32]
 800f1a2:	e853 3f00 	ldrex	r3, [r3]
 800f1a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1a8:	69fb      	ldr	r3, [r7, #28]
 800f1aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f1ae:	f023 0301 	bic.w	r3, r3, #1
 800f1b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	3308      	adds	r3, #8
 800f1ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f1bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f1be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1c4:	e841 2300 	strex	r3, r2, [r1]
 800f1c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1e3      	bne.n	800f198 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d118      	bne.n	800f20a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	e853 3f00 	ldrex	r3, [r3]
 800f1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f023 0310 	bic.w	r3, r3, #16
 800f1ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1f6:	61bb      	str	r3, [r7, #24]
 800f1f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fa:	6979      	ldr	r1, [r7, #20]
 800f1fc:	69ba      	ldr	r2, [r7, #24]
 800f1fe:	e841 2300 	strex	r3, r2, [r1]
 800f202:	613b      	str	r3, [r7, #16]
   return(result);
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1e6      	bne.n	800f1d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2220      	movs	r2, #32
 800f20e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2200      	movs	r2, #0
 800f216:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f21e:	bf00      	nop
 800f220:	3754      	adds	r7, #84	@ 0x54
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f22a:	b480      	push	{r7}
 800f22c:	b085      	sub	sp, #20
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d101      	bne.n	800f240 <HAL_UARTEx_DisableFifoMode+0x16>
 800f23c:	2302      	movs	r3, #2
 800f23e:	e027      	b.n	800f290 <HAL_UARTEx_DisableFifoMode+0x66>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2201      	movs	r2, #1
 800f244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2224      	movs	r2, #36	@ 0x24
 800f24c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f022 0201 	bic.w	r2, r2, #1
 800f266:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f26e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2220      	movs	r2, #32
 800f282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3714      	adds	r7, #20
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d101      	bne.n	800f2b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	e02d      	b.n	800f310 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2224      	movs	r2, #36	@ 0x24
 800f2c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f022 0201 	bic.w	r2, r2, #1
 800f2da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	430a      	orrs	r2, r1
 800f2ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 f84f 	bl	800f394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2220      	movs	r2, #32
 800f302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	4618      	mov	r0, r3
 800f312:	3710      	adds	r7, #16
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d101      	bne.n	800f330 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f32c:	2302      	movs	r3, #2
 800f32e:	e02d      	b.n	800f38c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2201      	movs	r2, #1
 800f334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2224      	movs	r2, #36	@ 0x24
 800f33c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f022 0201 	bic.w	r2, r2, #1
 800f356:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	689b      	ldr	r3, [r3, #8]
 800f35e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	683a      	ldr	r2, [r7, #0]
 800f368:	430a      	orrs	r2, r1
 800f36a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f811 	bl	800f394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2220      	movs	r2, #32
 800f37e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3710      	adds	r7, #16
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d108      	bne.n	800f3b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f3b4:	e031      	b.n	800f41a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f3b6:	2308      	movs	r3, #8
 800f3b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f3ba:	2308      	movs	r3, #8
 800f3bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	0e5b      	lsrs	r3, r3, #25
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	f003 0307 	and.w	r3, r3, #7
 800f3cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	0f5b      	lsrs	r3, r3, #29
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	f003 0307 	and.w	r3, r3, #7
 800f3dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3de:	7bbb      	ldrb	r3, [r7, #14]
 800f3e0:	7b3a      	ldrb	r2, [r7, #12]
 800f3e2:	4911      	ldr	r1, [pc, #68]	@ (800f428 <UARTEx_SetNbDataToProcess+0x94>)
 800f3e4:	5c8a      	ldrb	r2, [r1, r2]
 800f3e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f3ea:	7b3a      	ldrb	r2, [r7, #12]
 800f3ec:	490f      	ldr	r1, [pc, #60]	@ (800f42c <UARTEx_SetNbDataToProcess+0x98>)
 800f3ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3fc:	7bfb      	ldrb	r3, [r7, #15]
 800f3fe:	7b7a      	ldrb	r2, [r7, #13]
 800f400:	4909      	ldr	r1, [pc, #36]	@ (800f428 <UARTEx_SetNbDataToProcess+0x94>)
 800f402:	5c8a      	ldrb	r2, [r1, r2]
 800f404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f408:	7b7a      	ldrb	r2, [r7, #13]
 800f40a:	4908      	ldr	r1, [pc, #32]	@ (800f42c <UARTEx_SetNbDataToProcess+0x98>)
 800f40c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f40e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f412:	b29a      	uxth	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f41a:	bf00      	nop
 800f41c:	3714      	adds	r7, #20
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	08017628 	.word	0x08017628
 800f42c:	08017630 	.word	0x08017630

0800f430 <malloc>:
 800f430:	4b02      	ldr	r3, [pc, #8]	@ (800f43c <malloc+0xc>)
 800f432:	4601      	mov	r1, r0
 800f434:	6818      	ldr	r0, [r3, #0]
 800f436:	f000 b825 	b.w	800f484 <_malloc_r>
 800f43a:	bf00      	nop
 800f43c:	20000038 	.word	0x20000038

0800f440 <sbrk_aligned>:
 800f440:	b570      	push	{r4, r5, r6, lr}
 800f442:	4e0f      	ldr	r6, [pc, #60]	@ (800f480 <sbrk_aligned+0x40>)
 800f444:	460c      	mov	r4, r1
 800f446:	6831      	ldr	r1, [r6, #0]
 800f448:	4605      	mov	r5, r0
 800f44a:	b911      	cbnz	r1, 800f452 <sbrk_aligned+0x12>
 800f44c:	f000 fe78 	bl	8010140 <_sbrk_r>
 800f450:	6030      	str	r0, [r6, #0]
 800f452:	4621      	mov	r1, r4
 800f454:	4628      	mov	r0, r5
 800f456:	f000 fe73 	bl	8010140 <_sbrk_r>
 800f45a:	1c43      	adds	r3, r0, #1
 800f45c:	d103      	bne.n	800f466 <sbrk_aligned+0x26>
 800f45e:	f04f 34ff 	mov.w	r4, #4294967295
 800f462:	4620      	mov	r0, r4
 800f464:	bd70      	pop	{r4, r5, r6, pc}
 800f466:	1cc4      	adds	r4, r0, #3
 800f468:	f024 0403 	bic.w	r4, r4, #3
 800f46c:	42a0      	cmp	r0, r4
 800f46e:	d0f8      	beq.n	800f462 <sbrk_aligned+0x22>
 800f470:	1a21      	subs	r1, r4, r0
 800f472:	4628      	mov	r0, r5
 800f474:	f000 fe64 	bl	8010140 <_sbrk_r>
 800f478:	3001      	adds	r0, #1
 800f47a:	d1f2      	bne.n	800f462 <sbrk_aligned+0x22>
 800f47c:	e7ef      	b.n	800f45e <sbrk_aligned+0x1e>
 800f47e:	bf00      	nop
 800f480:	20000aa8 	.word	0x20000aa8

0800f484 <_malloc_r>:
 800f484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f488:	1ccd      	adds	r5, r1, #3
 800f48a:	f025 0503 	bic.w	r5, r5, #3
 800f48e:	3508      	adds	r5, #8
 800f490:	2d0c      	cmp	r5, #12
 800f492:	bf38      	it	cc
 800f494:	250c      	movcc	r5, #12
 800f496:	2d00      	cmp	r5, #0
 800f498:	4606      	mov	r6, r0
 800f49a:	db01      	blt.n	800f4a0 <_malloc_r+0x1c>
 800f49c:	42a9      	cmp	r1, r5
 800f49e:	d904      	bls.n	800f4aa <_malloc_r+0x26>
 800f4a0:	230c      	movs	r3, #12
 800f4a2:	6033      	str	r3, [r6, #0]
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f580 <_malloc_r+0xfc>
 800f4ae:	f000 f869 	bl	800f584 <__malloc_lock>
 800f4b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f4b6:	461c      	mov	r4, r3
 800f4b8:	bb44      	cbnz	r4, 800f50c <_malloc_r+0x88>
 800f4ba:	4629      	mov	r1, r5
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f7ff ffbf 	bl	800f440 <sbrk_aligned>
 800f4c2:	1c43      	adds	r3, r0, #1
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	d158      	bne.n	800f57a <_malloc_r+0xf6>
 800f4c8:	f8d8 4000 	ldr.w	r4, [r8]
 800f4cc:	4627      	mov	r7, r4
 800f4ce:	2f00      	cmp	r7, #0
 800f4d0:	d143      	bne.n	800f55a <_malloc_r+0xd6>
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	d04b      	beq.n	800f56e <_malloc_r+0xea>
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	4639      	mov	r1, r7
 800f4da:	4630      	mov	r0, r6
 800f4dc:	eb04 0903 	add.w	r9, r4, r3
 800f4e0:	f000 fe2e 	bl	8010140 <_sbrk_r>
 800f4e4:	4581      	cmp	r9, r0
 800f4e6:	d142      	bne.n	800f56e <_malloc_r+0xea>
 800f4e8:	6821      	ldr	r1, [r4, #0]
 800f4ea:	1a6d      	subs	r5, r5, r1
 800f4ec:	4629      	mov	r1, r5
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f7ff ffa6 	bl	800f440 <sbrk_aligned>
 800f4f4:	3001      	adds	r0, #1
 800f4f6:	d03a      	beq.n	800f56e <_malloc_r+0xea>
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	442b      	add	r3, r5
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	f8d8 3000 	ldr.w	r3, [r8]
 800f502:	685a      	ldr	r2, [r3, #4]
 800f504:	bb62      	cbnz	r2, 800f560 <_malloc_r+0xdc>
 800f506:	f8c8 7000 	str.w	r7, [r8]
 800f50a:	e00f      	b.n	800f52c <_malloc_r+0xa8>
 800f50c:	6822      	ldr	r2, [r4, #0]
 800f50e:	1b52      	subs	r2, r2, r5
 800f510:	d420      	bmi.n	800f554 <_malloc_r+0xd0>
 800f512:	2a0b      	cmp	r2, #11
 800f514:	d917      	bls.n	800f546 <_malloc_r+0xc2>
 800f516:	1961      	adds	r1, r4, r5
 800f518:	42a3      	cmp	r3, r4
 800f51a:	6025      	str	r5, [r4, #0]
 800f51c:	bf18      	it	ne
 800f51e:	6059      	strne	r1, [r3, #4]
 800f520:	6863      	ldr	r3, [r4, #4]
 800f522:	bf08      	it	eq
 800f524:	f8c8 1000 	streq.w	r1, [r8]
 800f528:	5162      	str	r2, [r4, r5]
 800f52a:	604b      	str	r3, [r1, #4]
 800f52c:	4630      	mov	r0, r6
 800f52e:	f000 f82f 	bl	800f590 <__malloc_unlock>
 800f532:	f104 000b 	add.w	r0, r4, #11
 800f536:	1d23      	adds	r3, r4, #4
 800f538:	f020 0007 	bic.w	r0, r0, #7
 800f53c:	1ac2      	subs	r2, r0, r3
 800f53e:	bf1c      	itt	ne
 800f540:	1a1b      	subne	r3, r3, r0
 800f542:	50a3      	strne	r3, [r4, r2]
 800f544:	e7af      	b.n	800f4a6 <_malloc_r+0x22>
 800f546:	6862      	ldr	r2, [r4, #4]
 800f548:	42a3      	cmp	r3, r4
 800f54a:	bf0c      	ite	eq
 800f54c:	f8c8 2000 	streq.w	r2, [r8]
 800f550:	605a      	strne	r2, [r3, #4]
 800f552:	e7eb      	b.n	800f52c <_malloc_r+0xa8>
 800f554:	4623      	mov	r3, r4
 800f556:	6864      	ldr	r4, [r4, #4]
 800f558:	e7ae      	b.n	800f4b8 <_malloc_r+0x34>
 800f55a:	463c      	mov	r4, r7
 800f55c:	687f      	ldr	r7, [r7, #4]
 800f55e:	e7b6      	b.n	800f4ce <_malloc_r+0x4a>
 800f560:	461a      	mov	r2, r3
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	42a3      	cmp	r3, r4
 800f566:	d1fb      	bne.n	800f560 <_malloc_r+0xdc>
 800f568:	2300      	movs	r3, #0
 800f56a:	6053      	str	r3, [r2, #4]
 800f56c:	e7de      	b.n	800f52c <_malloc_r+0xa8>
 800f56e:	230c      	movs	r3, #12
 800f570:	6033      	str	r3, [r6, #0]
 800f572:	4630      	mov	r0, r6
 800f574:	f000 f80c 	bl	800f590 <__malloc_unlock>
 800f578:	e794      	b.n	800f4a4 <_malloc_r+0x20>
 800f57a:	6005      	str	r5, [r0, #0]
 800f57c:	e7d6      	b.n	800f52c <_malloc_r+0xa8>
 800f57e:	bf00      	nop
 800f580:	20000aac 	.word	0x20000aac

0800f584 <__malloc_lock>:
 800f584:	4801      	ldr	r0, [pc, #4]	@ (800f58c <__malloc_lock+0x8>)
 800f586:	f000 be28 	b.w	80101da <__retarget_lock_acquire_recursive>
 800f58a:	bf00      	nop
 800f58c:	20000bf0 	.word	0x20000bf0

0800f590 <__malloc_unlock>:
 800f590:	4801      	ldr	r0, [pc, #4]	@ (800f598 <__malloc_unlock+0x8>)
 800f592:	f000 be23 	b.w	80101dc <__retarget_lock_release_recursive>
 800f596:	bf00      	nop
 800f598:	20000bf0 	.word	0x20000bf0

0800f59c <__cvt>:
 800f59c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a0:	ec57 6b10 	vmov	r6, r7, d0
 800f5a4:	2f00      	cmp	r7, #0
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	463b      	mov	r3, r7
 800f5ac:	bfbb      	ittet	lt
 800f5ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f5b2:	461f      	movlt	r7, r3
 800f5b4:	2300      	movge	r3, #0
 800f5b6:	232d      	movlt	r3, #45	@ 0x2d
 800f5b8:	700b      	strb	r3, [r1, #0]
 800f5ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f5c0:	4691      	mov	r9, r2
 800f5c2:	f023 0820 	bic.w	r8, r3, #32
 800f5c6:	bfbc      	itt	lt
 800f5c8:	4632      	movlt	r2, r6
 800f5ca:	4616      	movlt	r6, r2
 800f5cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f5d0:	d005      	beq.n	800f5de <__cvt+0x42>
 800f5d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f5d6:	d100      	bne.n	800f5da <__cvt+0x3e>
 800f5d8:	3401      	adds	r4, #1
 800f5da:	2102      	movs	r1, #2
 800f5dc:	e000      	b.n	800f5e0 <__cvt+0x44>
 800f5de:	2103      	movs	r1, #3
 800f5e0:	ab03      	add	r3, sp, #12
 800f5e2:	9301      	str	r3, [sp, #4]
 800f5e4:	ab02      	add	r3, sp, #8
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	ec47 6b10 	vmov	d0, r6, r7
 800f5ec:	4653      	mov	r3, sl
 800f5ee:	4622      	mov	r2, r4
 800f5f0:	f000 fe8e 	bl	8010310 <_dtoa_r>
 800f5f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	d119      	bne.n	800f630 <__cvt+0x94>
 800f5fc:	f019 0f01 	tst.w	r9, #1
 800f600:	d00e      	beq.n	800f620 <__cvt+0x84>
 800f602:	eb00 0904 	add.w	r9, r0, r4
 800f606:	2200      	movs	r2, #0
 800f608:	2300      	movs	r3, #0
 800f60a:	4630      	mov	r0, r6
 800f60c:	4639      	mov	r1, r7
 800f60e:	f7f1 fa73 	bl	8000af8 <__aeabi_dcmpeq>
 800f612:	b108      	cbz	r0, 800f618 <__cvt+0x7c>
 800f614:	f8cd 900c 	str.w	r9, [sp, #12]
 800f618:	2230      	movs	r2, #48	@ 0x30
 800f61a:	9b03      	ldr	r3, [sp, #12]
 800f61c:	454b      	cmp	r3, r9
 800f61e:	d31e      	bcc.n	800f65e <__cvt+0xc2>
 800f620:	9b03      	ldr	r3, [sp, #12]
 800f622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f624:	1b5b      	subs	r3, r3, r5
 800f626:	4628      	mov	r0, r5
 800f628:	6013      	str	r3, [r2, #0]
 800f62a:	b004      	add	sp, #16
 800f62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f630:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f634:	eb00 0904 	add.w	r9, r0, r4
 800f638:	d1e5      	bne.n	800f606 <__cvt+0x6a>
 800f63a:	7803      	ldrb	r3, [r0, #0]
 800f63c:	2b30      	cmp	r3, #48	@ 0x30
 800f63e:	d10a      	bne.n	800f656 <__cvt+0xba>
 800f640:	2200      	movs	r2, #0
 800f642:	2300      	movs	r3, #0
 800f644:	4630      	mov	r0, r6
 800f646:	4639      	mov	r1, r7
 800f648:	f7f1 fa56 	bl	8000af8 <__aeabi_dcmpeq>
 800f64c:	b918      	cbnz	r0, 800f656 <__cvt+0xba>
 800f64e:	f1c4 0401 	rsb	r4, r4, #1
 800f652:	f8ca 4000 	str.w	r4, [sl]
 800f656:	f8da 3000 	ldr.w	r3, [sl]
 800f65a:	4499      	add	r9, r3
 800f65c:	e7d3      	b.n	800f606 <__cvt+0x6a>
 800f65e:	1c59      	adds	r1, r3, #1
 800f660:	9103      	str	r1, [sp, #12]
 800f662:	701a      	strb	r2, [r3, #0]
 800f664:	e7d9      	b.n	800f61a <__cvt+0x7e>

0800f666 <__exponent>:
 800f666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f668:	2900      	cmp	r1, #0
 800f66a:	bfba      	itte	lt
 800f66c:	4249      	neglt	r1, r1
 800f66e:	232d      	movlt	r3, #45	@ 0x2d
 800f670:	232b      	movge	r3, #43	@ 0x2b
 800f672:	2909      	cmp	r1, #9
 800f674:	7002      	strb	r2, [r0, #0]
 800f676:	7043      	strb	r3, [r0, #1]
 800f678:	dd29      	ble.n	800f6ce <__exponent+0x68>
 800f67a:	f10d 0307 	add.w	r3, sp, #7
 800f67e:	461d      	mov	r5, r3
 800f680:	270a      	movs	r7, #10
 800f682:	461a      	mov	r2, r3
 800f684:	fbb1 f6f7 	udiv	r6, r1, r7
 800f688:	fb07 1416 	mls	r4, r7, r6, r1
 800f68c:	3430      	adds	r4, #48	@ 0x30
 800f68e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f692:	460c      	mov	r4, r1
 800f694:	2c63      	cmp	r4, #99	@ 0x63
 800f696:	f103 33ff 	add.w	r3, r3, #4294967295
 800f69a:	4631      	mov	r1, r6
 800f69c:	dcf1      	bgt.n	800f682 <__exponent+0x1c>
 800f69e:	3130      	adds	r1, #48	@ 0x30
 800f6a0:	1e94      	subs	r4, r2, #2
 800f6a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f6a6:	1c41      	adds	r1, r0, #1
 800f6a8:	4623      	mov	r3, r4
 800f6aa:	42ab      	cmp	r3, r5
 800f6ac:	d30a      	bcc.n	800f6c4 <__exponent+0x5e>
 800f6ae:	f10d 0309 	add.w	r3, sp, #9
 800f6b2:	1a9b      	subs	r3, r3, r2
 800f6b4:	42ac      	cmp	r4, r5
 800f6b6:	bf88      	it	hi
 800f6b8:	2300      	movhi	r3, #0
 800f6ba:	3302      	adds	r3, #2
 800f6bc:	4403      	add	r3, r0
 800f6be:	1a18      	subs	r0, r3, r0
 800f6c0:	b003      	add	sp, #12
 800f6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f6c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f6cc:	e7ed      	b.n	800f6aa <__exponent+0x44>
 800f6ce:	2330      	movs	r3, #48	@ 0x30
 800f6d0:	3130      	adds	r1, #48	@ 0x30
 800f6d2:	7083      	strb	r3, [r0, #2]
 800f6d4:	70c1      	strb	r1, [r0, #3]
 800f6d6:	1d03      	adds	r3, r0, #4
 800f6d8:	e7f1      	b.n	800f6be <__exponent+0x58>
	...

0800f6dc <_printf_float>:
 800f6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e0:	b08d      	sub	sp, #52	@ 0x34
 800f6e2:	460c      	mov	r4, r1
 800f6e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f6e8:	4616      	mov	r6, r2
 800f6ea:	461f      	mov	r7, r3
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	f000 fcef 	bl	80100d0 <_localeconv_r>
 800f6f2:	6803      	ldr	r3, [r0, #0]
 800f6f4:	9304      	str	r3, [sp, #16]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7f0 fdd2 	bl	80002a0 <strlen>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800f700:	f8d8 3000 	ldr.w	r3, [r8]
 800f704:	9005      	str	r0, [sp, #20]
 800f706:	3307      	adds	r3, #7
 800f708:	f023 0307 	bic.w	r3, r3, #7
 800f70c:	f103 0208 	add.w	r2, r3, #8
 800f710:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f714:	f8d4 b000 	ldr.w	fp, [r4]
 800f718:	f8c8 2000 	str.w	r2, [r8]
 800f71c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f720:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f724:	9307      	str	r3, [sp, #28]
 800f726:	f8cd 8018 	str.w	r8, [sp, #24]
 800f72a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f72e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f732:	4b9c      	ldr	r3, [pc, #624]	@ (800f9a4 <_printf_float+0x2c8>)
 800f734:	f04f 32ff 	mov.w	r2, #4294967295
 800f738:	f7f1 fa10 	bl	8000b5c <__aeabi_dcmpun>
 800f73c:	bb70      	cbnz	r0, 800f79c <_printf_float+0xc0>
 800f73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f742:	4b98      	ldr	r3, [pc, #608]	@ (800f9a4 <_printf_float+0x2c8>)
 800f744:	f04f 32ff 	mov.w	r2, #4294967295
 800f748:	f7f1 f9ea 	bl	8000b20 <__aeabi_dcmple>
 800f74c:	bb30      	cbnz	r0, 800f79c <_printf_float+0xc0>
 800f74e:	2200      	movs	r2, #0
 800f750:	2300      	movs	r3, #0
 800f752:	4640      	mov	r0, r8
 800f754:	4649      	mov	r1, r9
 800f756:	f7f1 f9d9 	bl	8000b0c <__aeabi_dcmplt>
 800f75a:	b110      	cbz	r0, 800f762 <_printf_float+0x86>
 800f75c:	232d      	movs	r3, #45	@ 0x2d
 800f75e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f762:	4a91      	ldr	r2, [pc, #580]	@ (800f9a8 <_printf_float+0x2cc>)
 800f764:	4b91      	ldr	r3, [pc, #580]	@ (800f9ac <_printf_float+0x2d0>)
 800f766:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f76a:	bf94      	ite	ls
 800f76c:	4690      	movls	r8, r2
 800f76e:	4698      	movhi	r8, r3
 800f770:	2303      	movs	r3, #3
 800f772:	6123      	str	r3, [r4, #16]
 800f774:	f02b 0304 	bic.w	r3, fp, #4
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	f04f 0900 	mov.w	r9, #0
 800f77e:	9700      	str	r7, [sp, #0]
 800f780:	4633      	mov	r3, r6
 800f782:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f784:	4621      	mov	r1, r4
 800f786:	4628      	mov	r0, r5
 800f788:	f000 f9d2 	bl	800fb30 <_printf_common>
 800f78c:	3001      	adds	r0, #1
 800f78e:	f040 808d 	bne.w	800f8ac <_printf_float+0x1d0>
 800f792:	f04f 30ff 	mov.w	r0, #4294967295
 800f796:	b00d      	add	sp, #52	@ 0x34
 800f798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79c:	4642      	mov	r2, r8
 800f79e:	464b      	mov	r3, r9
 800f7a0:	4640      	mov	r0, r8
 800f7a2:	4649      	mov	r1, r9
 800f7a4:	f7f1 f9da 	bl	8000b5c <__aeabi_dcmpun>
 800f7a8:	b140      	cbz	r0, 800f7bc <_printf_float+0xe0>
 800f7aa:	464b      	mov	r3, r9
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	bfbc      	itt	lt
 800f7b0:	232d      	movlt	r3, #45	@ 0x2d
 800f7b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f7b6:	4a7e      	ldr	r2, [pc, #504]	@ (800f9b0 <_printf_float+0x2d4>)
 800f7b8:	4b7e      	ldr	r3, [pc, #504]	@ (800f9b4 <_printf_float+0x2d8>)
 800f7ba:	e7d4      	b.n	800f766 <_printf_float+0x8a>
 800f7bc:	6863      	ldr	r3, [r4, #4]
 800f7be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f7c2:	9206      	str	r2, [sp, #24]
 800f7c4:	1c5a      	adds	r2, r3, #1
 800f7c6:	d13b      	bne.n	800f840 <_printf_float+0x164>
 800f7c8:	2306      	movs	r3, #6
 800f7ca:	6063      	str	r3, [r4, #4]
 800f7cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	6022      	str	r2, [r4, #0]
 800f7d4:	9303      	str	r3, [sp, #12]
 800f7d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f7d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f7dc:	ab09      	add	r3, sp, #36	@ 0x24
 800f7de:	9300      	str	r3, [sp, #0]
 800f7e0:	6861      	ldr	r1, [r4, #4]
 800f7e2:	ec49 8b10 	vmov	d0, r8, r9
 800f7e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	f7ff fed6 	bl	800f59c <__cvt>
 800f7f0:	9b06      	ldr	r3, [sp, #24]
 800f7f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f7f4:	2b47      	cmp	r3, #71	@ 0x47
 800f7f6:	4680      	mov	r8, r0
 800f7f8:	d129      	bne.n	800f84e <_printf_float+0x172>
 800f7fa:	1cc8      	adds	r0, r1, #3
 800f7fc:	db02      	blt.n	800f804 <_printf_float+0x128>
 800f7fe:	6863      	ldr	r3, [r4, #4]
 800f800:	4299      	cmp	r1, r3
 800f802:	dd41      	ble.n	800f888 <_printf_float+0x1ac>
 800f804:	f1aa 0a02 	sub.w	sl, sl, #2
 800f808:	fa5f fa8a 	uxtb.w	sl, sl
 800f80c:	3901      	subs	r1, #1
 800f80e:	4652      	mov	r2, sl
 800f810:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f814:	9109      	str	r1, [sp, #36]	@ 0x24
 800f816:	f7ff ff26 	bl	800f666 <__exponent>
 800f81a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f81c:	1813      	adds	r3, r2, r0
 800f81e:	2a01      	cmp	r2, #1
 800f820:	4681      	mov	r9, r0
 800f822:	6123      	str	r3, [r4, #16]
 800f824:	dc02      	bgt.n	800f82c <_printf_float+0x150>
 800f826:	6822      	ldr	r2, [r4, #0]
 800f828:	07d2      	lsls	r2, r2, #31
 800f82a:	d501      	bpl.n	800f830 <_printf_float+0x154>
 800f82c:	3301      	adds	r3, #1
 800f82e:	6123      	str	r3, [r4, #16]
 800f830:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f834:	2b00      	cmp	r3, #0
 800f836:	d0a2      	beq.n	800f77e <_printf_float+0xa2>
 800f838:	232d      	movs	r3, #45	@ 0x2d
 800f83a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f83e:	e79e      	b.n	800f77e <_printf_float+0xa2>
 800f840:	9a06      	ldr	r2, [sp, #24]
 800f842:	2a47      	cmp	r2, #71	@ 0x47
 800f844:	d1c2      	bne.n	800f7cc <_printf_float+0xf0>
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1c0      	bne.n	800f7cc <_printf_float+0xf0>
 800f84a:	2301      	movs	r3, #1
 800f84c:	e7bd      	b.n	800f7ca <_printf_float+0xee>
 800f84e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f852:	d9db      	bls.n	800f80c <_printf_float+0x130>
 800f854:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f858:	d118      	bne.n	800f88c <_printf_float+0x1b0>
 800f85a:	2900      	cmp	r1, #0
 800f85c:	6863      	ldr	r3, [r4, #4]
 800f85e:	dd0b      	ble.n	800f878 <_printf_float+0x19c>
 800f860:	6121      	str	r1, [r4, #16]
 800f862:	b913      	cbnz	r3, 800f86a <_printf_float+0x18e>
 800f864:	6822      	ldr	r2, [r4, #0]
 800f866:	07d0      	lsls	r0, r2, #31
 800f868:	d502      	bpl.n	800f870 <_printf_float+0x194>
 800f86a:	3301      	adds	r3, #1
 800f86c:	440b      	add	r3, r1
 800f86e:	6123      	str	r3, [r4, #16]
 800f870:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f872:	f04f 0900 	mov.w	r9, #0
 800f876:	e7db      	b.n	800f830 <_printf_float+0x154>
 800f878:	b913      	cbnz	r3, 800f880 <_printf_float+0x1a4>
 800f87a:	6822      	ldr	r2, [r4, #0]
 800f87c:	07d2      	lsls	r2, r2, #31
 800f87e:	d501      	bpl.n	800f884 <_printf_float+0x1a8>
 800f880:	3302      	adds	r3, #2
 800f882:	e7f4      	b.n	800f86e <_printf_float+0x192>
 800f884:	2301      	movs	r3, #1
 800f886:	e7f2      	b.n	800f86e <_printf_float+0x192>
 800f888:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f88e:	4299      	cmp	r1, r3
 800f890:	db05      	blt.n	800f89e <_printf_float+0x1c2>
 800f892:	6823      	ldr	r3, [r4, #0]
 800f894:	6121      	str	r1, [r4, #16]
 800f896:	07d8      	lsls	r0, r3, #31
 800f898:	d5ea      	bpl.n	800f870 <_printf_float+0x194>
 800f89a:	1c4b      	adds	r3, r1, #1
 800f89c:	e7e7      	b.n	800f86e <_printf_float+0x192>
 800f89e:	2900      	cmp	r1, #0
 800f8a0:	bfd4      	ite	le
 800f8a2:	f1c1 0202 	rsble	r2, r1, #2
 800f8a6:	2201      	movgt	r2, #1
 800f8a8:	4413      	add	r3, r2
 800f8aa:	e7e0      	b.n	800f86e <_printf_float+0x192>
 800f8ac:	6823      	ldr	r3, [r4, #0]
 800f8ae:	055a      	lsls	r2, r3, #21
 800f8b0:	d407      	bmi.n	800f8c2 <_printf_float+0x1e6>
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	4642      	mov	r2, r8
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	47b8      	blx	r7
 800f8bc:	3001      	adds	r0, #1
 800f8be:	d12b      	bne.n	800f918 <_printf_float+0x23c>
 800f8c0:	e767      	b.n	800f792 <_printf_float+0xb6>
 800f8c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f8c6:	f240 80dd 	bls.w	800fa84 <_printf_float+0x3a8>
 800f8ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	f7f1 f911 	bl	8000af8 <__aeabi_dcmpeq>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d033      	beq.n	800f942 <_printf_float+0x266>
 800f8da:	4a37      	ldr	r2, [pc, #220]	@ (800f9b8 <_printf_float+0x2dc>)
 800f8dc:	2301      	movs	r3, #1
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	47b8      	blx	r7
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	f43f af54 	beq.w	800f792 <_printf_float+0xb6>
 800f8ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f8ee:	4543      	cmp	r3, r8
 800f8f0:	db02      	blt.n	800f8f8 <_printf_float+0x21c>
 800f8f2:	6823      	ldr	r3, [r4, #0]
 800f8f4:	07d8      	lsls	r0, r3, #31
 800f8f6:	d50f      	bpl.n	800f918 <_printf_float+0x23c>
 800f8f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8fc:	4631      	mov	r1, r6
 800f8fe:	4628      	mov	r0, r5
 800f900:	47b8      	blx	r7
 800f902:	3001      	adds	r0, #1
 800f904:	f43f af45 	beq.w	800f792 <_printf_float+0xb6>
 800f908:	f04f 0900 	mov.w	r9, #0
 800f90c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f910:	f104 0a1a 	add.w	sl, r4, #26
 800f914:	45c8      	cmp	r8, r9
 800f916:	dc09      	bgt.n	800f92c <_printf_float+0x250>
 800f918:	6823      	ldr	r3, [r4, #0]
 800f91a:	079b      	lsls	r3, r3, #30
 800f91c:	f100 8103 	bmi.w	800fb26 <_printf_float+0x44a>
 800f920:	68e0      	ldr	r0, [r4, #12]
 800f922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f924:	4298      	cmp	r0, r3
 800f926:	bfb8      	it	lt
 800f928:	4618      	movlt	r0, r3
 800f92a:	e734      	b.n	800f796 <_printf_float+0xba>
 800f92c:	2301      	movs	r3, #1
 800f92e:	4652      	mov	r2, sl
 800f930:	4631      	mov	r1, r6
 800f932:	4628      	mov	r0, r5
 800f934:	47b8      	blx	r7
 800f936:	3001      	adds	r0, #1
 800f938:	f43f af2b 	beq.w	800f792 <_printf_float+0xb6>
 800f93c:	f109 0901 	add.w	r9, r9, #1
 800f940:	e7e8      	b.n	800f914 <_printf_float+0x238>
 800f942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f944:	2b00      	cmp	r3, #0
 800f946:	dc39      	bgt.n	800f9bc <_printf_float+0x2e0>
 800f948:	4a1b      	ldr	r2, [pc, #108]	@ (800f9b8 <_printf_float+0x2dc>)
 800f94a:	2301      	movs	r3, #1
 800f94c:	4631      	mov	r1, r6
 800f94e:	4628      	mov	r0, r5
 800f950:	47b8      	blx	r7
 800f952:	3001      	adds	r0, #1
 800f954:	f43f af1d 	beq.w	800f792 <_printf_float+0xb6>
 800f958:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f95c:	ea59 0303 	orrs.w	r3, r9, r3
 800f960:	d102      	bne.n	800f968 <_printf_float+0x28c>
 800f962:	6823      	ldr	r3, [r4, #0]
 800f964:	07d9      	lsls	r1, r3, #31
 800f966:	d5d7      	bpl.n	800f918 <_printf_float+0x23c>
 800f968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f96c:	4631      	mov	r1, r6
 800f96e:	4628      	mov	r0, r5
 800f970:	47b8      	blx	r7
 800f972:	3001      	adds	r0, #1
 800f974:	f43f af0d 	beq.w	800f792 <_printf_float+0xb6>
 800f978:	f04f 0a00 	mov.w	sl, #0
 800f97c:	f104 0b1a 	add.w	fp, r4, #26
 800f980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f982:	425b      	negs	r3, r3
 800f984:	4553      	cmp	r3, sl
 800f986:	dc01      	bgt.n	800f98c <_printf_float+0x2b0>
 800f988:	464b      	mov	r3, r9
 800f98a:	e793      	b.n	800f8b4 <_printf_float+0x1d8>
 800f98c:	2301      	movs	r3, #1
 800f98e:	465a      	mov	r2, fp
 800f990:	4631      	mov	r1, r6
 800f992:	4628      	mov	r0, r5
 800f994:	47b8      	blx	r7
 800f996:	3001      	adds	r0, #1
 800f998:	f43f aefb 	beq.w	800f792 <_printf_float+0xb6>
 800f99c:	f10a 0a01 	add.w	sl, sl, #1
 800f9a0:	e7ee      	b.n	800f980 <_printf_float+0x2a4>
 800f9a2:	bf00      	nop
 800f9a4:	7fefffff 	.word	0x7fefffff
 800f9a8:	08017638 	.word	0x08017638
 800f9ac:	0801763c 	.word	0x0801763c
 800f9b0:	08017640 	.word	0x08017640
 800f9b4:	08017644 	.word	0x08017644
 800f9b8:	08017648 	.word	0x08017648
 800f9bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f9be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f9c2:	4553      	cmp	r3, sl
 800f9c4:	bfa8      	it	ge
 800f9c6:	4653      	movge	r3, sl
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	4699      	mov	r9, r3
 800f9cc:	dc36      	bgt.n	800fa3c <_printf_float+0x360>
 800f9ce:	f04f 0b00 	mov.w	fp, #0
 800f9d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9d6:	f104 021a 	add.w	r2, r4, #26
 800f9da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f9dc:	9306      	str	r3, [sp, #24]
 800f9de:	eba3 0309 	sub.w	r3, r3, r9
 800f9e2:	455b      	cmp	r3, fp
 800f9e4:	dc31      	bgt.n	800fa4a <_printf_float+0x36e>
 800f9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9e8:	459a      	cmp	sl, r3
 800f9ea:	dc3a      	bgt.n	800fa62 <_printf_float+0x386>
 800f9ec:	6823      	ldr	r3, [r4, #0]
 800f9ee:	07da      	lsls	r2, r3, #31
 800f9f0:	d437      	bmi.n	800fa62 <_printf_float+0x386>
 800f9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9f4:	ebaa 0903 	sub.w	r9, sl, r3
 800f9f8:	9b06      	ldr	r3, [sp, #24]
 800f9fa:	ebaa 0303 	sub.w	r3, sl, r3
 800f9fe:	4599      	cmp	r9, r3
 800fa00:	bfa8      	it	ge
 800fa02:	4699      	movge	r9, r3
 800fa04:	f1b9 0f00 	cmp.w	r9, #0
 800fa08:	dc33      	bgt.n	800fa72 <_printf_float+0x396>
 800fa0a:	f04f 0800 	mov.w	r8, #0
 800fa0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa12:	f104 0b1a 	add.w	fp, r4, #26
 800fa16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa18:	ebaa 0303 	sub.w	r3, sl, r3
 800fa1c:	eba3 0309 	sub.w	r3, r3, r9
 800fa20:	4543      	cmp	r3, r8
 800fa22:	f77f af79 	ble.w	800f918 <_printf_float+0x23c>
 800fa26:	2301      	movs	r3, #1
 800fa28:	465a      	mov	r2, fp
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	47b8      	blx	r7
 800fa30:	3001      	adds	r0, #1
 800fa32:	f43f aeae 	beq.w	800f792 <_printf_float+0xb6>
 800fa36:	f108 0801 	add.w	r8, r8, #1
 800fa3a:	e7ec      	b.n	800fa16 <_printf_float+0x33a>
 800fa3c:	4642      	mov	r2, r8
 800fa3e:	4631      	mov	r1, r6
 800fa40:	4628      	mov	r0, r5
 800fa42:	47b8      	blx	r7
 800fa44:	3001      	adds	r0, #1
 800fa46:	d1c2      	bne.n	800f9ce <_printf_float+0x2f2>
 800fa48:	e6a3      	b.n	800f792 <_printf_float+0xb6>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	4631      	mov	r1, r6
 800fa4e:	4628      	mov	r0, r5
 800fa50:	9206      	str	r2, [sp, #24]
 800fa52:	47b8      	blx	r7
 800fa54:	3001      	adds	r0, #1
 800fa56:	f43f ae9c 	beq.w	800f792 <_printf_float+0xb6>
 800fa5a:	9a06      	ldr	r2, [sp, #24]
 800fa5c:	f10b 0b01 	add.w	fp, fp, #1
 800fa60:	e7bb      	b.n	800f9da <_printf_float+0x2fe>
 800fa62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa66:	4631      	mov	r1, r6
 800fa68:	4628      	mov	r0, r5
 800fa6a:	47b8      	blx	r7
 800fa6c:	3001      	adds	r0, #1
 800fa6e:	d1c0      	bne.n	800f9f2 <_printf_float+0x316>
 800fa70:	e68f      	b.n	800f792 <_printf_float+0xb6>
 800fa72:	9a06      	ldr	r2, [sp, #24]
 800fa74:	464b      	mov	r3, r9
 800fa76:	4442      	add	r2, r8
 800fa78:	4631      	mov	r1, r6
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	47b8      	blx	r7
 800fa7e:	3001      	adds	r0, #1
 800fa80:	d1c3      	bne.n	800fa0a <_printf_float+0x32e>
 800fa82:	e686      	b.n	800f792 <_printf_float+0xb6>
 800fa84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fa88:	f1ba 0f01 	cmp.w	sl, #1
 800fa8c:	dc01      	bgt.n	800fa92 <_printf_float+0x3b6>
 800fa8e:	07db      	lsls	r3, r3, #31
 800fa90:	d536      	bpl.n	800fb00 <_printf_float+0x424>
 800fa92:	2301      	movs	r3, #1
 800fa94:	4642      	mov	r2, r8
 800fa96:	4631      	mov	r1, r6
 800fa98:	4628      	mov	r0, r5
 800fa9a:	47b8      	blx	r7
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	f43f ae78 	beq.w	800f792 <_printf_float+0xb6>
 800faa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faa6:	4631      	mov	r1, r6
 800faa8:	4628      	mov	r0, r5
 800faaa:	47b8      	blx	r7
 800faac:	3001      	adds	r0, #1
 800faae:	f43f ae70 	beq.w	800f792 <_printf_float+0xb6>
 800fab2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fab6:	2200      	movs	r2, #0
 800fab8:	2300      	movs	r3, #0
 800faba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fabe:	f7f1 f81b 	bl	8000af8 <__aeabi_dcmpeq>
 800fac2:	b9c0      	cbnz	r0, 800faf6 <_printf_float+0x41a>
 800fac4:	4653      	mov	r3, sl
 800fac6:	f108 0201 	add.w	r2, r8, #1
 800faca:	4631      	mov	r1, r6
 800facc:	4628      	mov	r0, r5
 800face:	47b8      	blx	r7
 800fad0:	3001      	adds	r0, #1
 800fad2:	d10c      	bne.n	800faee <_printf_float+0x412>
 800fad4:	e65d      	b.n	800f792 <_printf_float+0xb6>
 800fad6:	2301      	movs	r3, #1
 800fad8:	465a      	mov	r2, fp
 800fada:	4631      	mov	r1, r6
 800fadc:	4628      	mov	r0, r5
 800fade:	47b8      	blx	r7
 800fae0:	3001      	adds	r0, #1
 800fae2:	f43f ae56 	beq.w	800f792 <_printf_float+0xb6>
 800fae6:	f108 0801 	add.w	r8, r8, #1
 800faea:	45d0      	cmp	r8, sl
 800faec:	dbf3      	blt.n	800fad6 <_printf_float+0x3fa>
 800faee:	464b      	mov	r3, r9
 800faf0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800faf4:	e6df      	b.n	800f8b6 <_printf_float+0x1da>
 800faf6:	f04f 0800 	mov.w	r8, #0
 800fafa:	f104 0b1a 	add.w	fp, r4, #26
 800fafe:	e7f4      	b.n	800faea <_printf_float+0x40e>
 800fb00:	2301      	movs	r3, #1
 800fb02:	4642      	mov	r2, r8
 800fb04:	e7e1      	b.n	800faca <_printf_float+0x3ee>
 800fb06:	2301      	movs	r3, #1
 800fb08:	464a      	mov	r2, r9
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	47b8      	blx	r7
 800fb10:	3001      	adds	r0, #1
 800fb12:	f43f ae3e 	beq.w	800f792 <_printf_float+0xb6>
 800fb16:	f108 0801 	add.w	r8, r8, #1
 800fb1a:	68e3      	ldr	r3, [r4, #12]
 800fb1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fb1e:	1a5b      	subs	r3, r3, r1
 800fb20:	4543      	cmp	r3, r8
 800fb22:	dcf0      	bgt.n	800fb06 <_printf_float+0x42a>
 800fb24:	e6fc      	b.n	800f920 <_printf_float+0x244>
 800fb26:	f04f 0800 	mov.w	r8, #0
 800fb2a:	f104 0919 	add.w	r9, r4, #25
 800fb2e:	e7f4      	b.n	800fb1a <_printf_float+0x43e>

0800fb30 <_printf_common>:
 800fb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb34:	4616      	mov	r6, r2
 800fb36:	4698      	mov	r8, r3
 800fb38:	688a      	ldr	r2, [r1, #8]
 800fb3a:	690b      	ldr	r3, [r1, #16]
 800fb3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb40:	4293      	cmp	r3, r2
 800fb42:	bfb8      	it	lt
 800fb44:	4613      	movlt	r3, r2
 800fb46:	6033      	str	r3, [r6, #0]
 800fb48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fb4c:	4607      	mov	r7, r0
 800fb4e:	460c      	mov	r4, r1
 800fb50:	b10a      	cbz	r2, 800fb56 <_printf_common+0x26>
 800fb52:	3301      	adds	r3, #1
 800fb54:	6033      	str	r3, [r6, #0]
 800fb56:	6823      	ldr	r3, [r4, #0]
 800fb58:	0699      	lsls	r1, r3, #26
 800fb5a:	bf42      	ittt	mi
 800fb5c:	6833      	ldrmi	r3, [r6, #0]
 800fb5e:	3302      	addmi	r3, #2
 800fb60:	6033      	strmi	r3, [r6, #0]
 800fb62:	6825      	ldr	r5, [r4, #0]
 800fb64:	f015 0506 	ands.w	r5, r5, #6
 800fb68:	d106      	bne.n	800fb78 <_printf_common+0x48>
 800fb6a:	f104 0a19 	add.w	sl, r4, #25
 800fb6e:	68e3      	ldr	r3, [r4, #12]
 800fb70:	6832      	ldr	r2, [r6, #0]
 800fb72:	1a9b      	subs	r3, r3, r2
 800fb74:	42ab      	cmp	r3, r5
 800fb76:	dc26      	bgt.n	800fbc6 <_printf_common+0x96>
 800fb78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fb7c:	6822      	ldr	r2, [r4, #0]
 800fb7e:	3b00      	subs	r3, #0
 800fb80:	bf18      	it	ne
 800fb82:	2301      	movne	r3, #1
 800fb84:	0692      	lsls	r2, r2, #26
 800fb86:	d42b      	bmi.n	800fbe0 <_printf_common+0xb0>
 800fb88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fb8c:	4641      	mov	r1, r8
 800fb8e:	4638      	mov	r0, r7
 800fb90:	47c8      	blx	r9
 800fb92:	3001      	adds	r0, #1
 800fb94:	d01e      	beq.n	800fbd4 <_printf_common+0xa4>
 800fb96:	6823      	ldr	r3, [r4, #0]
 800fb98:	6922      	ldr	r2, [r4, #16]
 800fb9a:	f003 0306 	and.w	r3, r3, #6
 800fb9e:	2b04      	cmp	r3, #4
 800fba0:	bf02      	ittt	eq
 800fba2:	68e5      	ldreq	r5, [r4, #12]
 800fba4:	6833      	ldreq	r3, [r6, #0]
 800fba6:	1aed      	subeq	r5, r5, r3
 800fba8:	68a3      	ldr	r3, [r4, #8]
 800fbaa:	bf0c      	ite	eq
 800fbac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbb0:	2500      	movne	r5, #0
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	bfc4      	itt	gt
 800fbb6:	1a9b      	subgt	r3, r3, r2
 800fbb8:	18ed      	addgt	r5, r5, r3
 800fbba:	2600      	movs	r6, #0
 800fbbc:	341a      	adds	r4, #26
 800fbbe:	42b5      	cmp	r5, r6
 800fbc0:	d11a      	bne.n	800fbf8 <_printf_common+0xc8>
 800fbc2:	2000      	movs	r0, #0
 800fbc4:	e008      	b.n	800fbd8 <_printf_common+0xa8>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	4652      	mov	r2, sl
 800fbca:	4641      	mov	r1, r8
 800fbcc:	4638      	mov	r0, r7
 800fbce:	47c8      	blx	r9
 800fbd0:	3001      	adds	r0, #1
 800fbd2:	d103      	bne.n	800fbdc <_printf_common+0xac>
 800fbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbdc:	3501      	adds	r5, #1
 800fbde:	e7c6      	b.n	800fb6e <_printf_common+0x3e>
 800fbe0:	18e1      	adds	r1, r4, r3
 800fbe2:	1c5a      	adds	r2, r3, #1
 800fbe4:	2030      	movs	r0, #48	@ 0x30
 800fbe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fbea:	4422      	add	r2, r4
 800fbec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fbf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fbf4:	3302      	adds	r3, #2
 800fbf6:	e7c7      	b.n	800fb88 <_printf_common+0x58>
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	4622      	mov	r2, r4
 800fbfc:	4641      	mov	r1, r8
 800fbfe:	4638      	mov	r0, r7
 800fc00:	47c8      	blx	r9
 800fc02:	3001      	adds	r0, #1
 800fc04:	d0e6      	beq.n	800fbd4 <_printf_common+0xa4>
 800fc06:	3601      	adds	r6, #1
 800fc08:	e7d9      	b.n	800fbbe <_printf_common+0x8e>
	...

0800fc0c <_printf_i>:
 800fc0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc10:	7e0f      	ldrb	r7, [r1, #24]
 800fc12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc14:	2f78      	cmp	r7, #120	@ 0x78
 800fc16:	4691      	mov	r9, r2
 800fc18:	4680      	mov	r8, r0
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	469a      	mov	sl, r3
 800fc1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fc22:	d807      	bhi.n	800fc34 <_printf_i+0x28>
 800fc24:	2f62      	cmp	r7, #98	@ 0x62
 800fc26:	d80a      	bhi.n	800fc3e <_printf_i+0x32>
 800fc28:	2f00      	cmp	r7, #0
 800fc2a:	f000 80d2 	beq.w	800fdd2 <_printf_i+0x1c6>
 800fc2e:	2f58      	cmp	r7, #88	@ 0x58
 800fc30:	f000 80b9 	beq.w	800fda6 <_printf_i+0x19a>
 800fc34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fc3c:	e03a      	b.n	800fcb4 <_printf_i+0xa8>
 800fc3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fc42:	2b15      	cmp	r3, #21
 800fc44:	d8f6      	bhi.n	800fc34 <_printf_i+0x28>
 800fc46:	a101      	add	r1, pc, #4	@ (adr r1, 800fc4c <_printf_i+0x40>)
 800fc48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc4c:	0800fca5 	.word	0x0800fca5
 800fc50:	0800fcb9 	.word	0x0800fcb9
 800fc54:	0800fc35 	.word	0x0800fc35
 800fc58:	0800fc35 	.word	0x0800fc35
 800fc5c:	0800fc35 	.word	0x0800fc35
 800fc60:	0800fc35 	.word	0x0800fc35
 800fc64:	0800fcb9 	.word	0x0800fcb9
 800fc68:	0800fc35 	.word	0x0800fc35
 800fc6c:	0800fc35 	.word	0x0800fc35
 800fc70:	0800fc35 	.word	0x0800fc35
 800fc74:	0800fc35 	.word	0x0800fc35
 800fc78:	0800fdb9 	.word	0x0800fdb9
 800fc7c:	0800fce3 	.word	0x0800fce3
 800fc80:	0800fd73 	.word	0x0800fd73
 800fc84:	0800fc35 	.word	0x0800fc35
 800fc88:	0800fc35 	.word	0x0800fc35
 800fc8c:	0800fddb 	.word	0x0800fddb
 800fc90:	0800fc35 	.word	0x0800fc35
 800fc94:	0800fce3 	.word	0x0800fce3
 800fc98:	0800fc35 	.word	0x0800fc35
 800fc9c:	0800fc35 	.word	0x0800fc35
 800fca0:	0800fd7b 	.word	0x0800fd7b
 800fca4:	6833      	ldr	r3, [r6, #0]
 800fca6:	1d1a      	adds	r2, r3, #4
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	6032      	str	r2, [r6, #0]
 800fcac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e09d      	b.n	800fdf4 <_printf_i+0x1e8>
 800fcb8:	6833      	ldr	r3, [r6, #0]
 800fcba:	6820      	ldr	r0, [r4, #0]
 800fcbc:	1d19      	adds	r1, r3, #4
 800fcbe:	6031      	str	r1, [r6, #0]
 800fcc0:	0606      	lsls	r6, r0, #24
 800fcc2:	d501      	bpl.n	800fcc8 <_printf_i+0xbc>
 800fcc4:	681d      	ldr	r5, [r3, #0]
 800fcc6:	e003      	b.n	800fcd0 <_printf_i+0xc4>
 800fcc8:	0645      	lsls	r5, r0, #25
 800fcca:	d5fb      	bpl.n	800fcc4 <_printf_i+0xb8>
 800fccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fcd0:	2d00      	cmp	r5, #0
 800fcd2:	da03      	bge.n	800fcdc <_printf_i+0xd0>
 800fcd4:	232d      	movs	r3, #45	@ 0x2d
 800fcd6:	426d      	negs	r5, r5
 800fcd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcdc:	4859      	ldr	r0, [pc, #356]	@ (800fe44 <_printf_i+0x238>)
 800fcde:	230a      	movs	r3, #10
 800fce0:	e011      	b.n	800fd06 <_printf_i+0xfa>
 800fce2:	6821      	ldr	r1, [r4, #0]
 800fce4:	6833      	ldr	r3, [r6, #0]
 800fce6:	0608      	lsls	r0, r1, #24
 800fce8:	f853 5b04 	ldr.w	r5, [r3], #4
 800fcec:	d402      	bmi.n	800fcf4 <_printf_i+0xe8>
 800fcee:	0649      	lsls	r1, r1, #25
 800fcf0:	bf48      	it	mi
 800fcf2:	b2ad      	uxthmi	r5, r5
 800fcf4:	2f6f      	cmp	r7, #111	@ 0x6f
 800fcf6:	4853      	ldr	r0, [pc, #332]	@ (800fe44 <_printf_i+0x238>)
 800fcf8:	6033      	str	r3, [r6, #0]
 800fcfa:	bf14      	ite	ne
 800fcfc:	230a      	movne	r3, #10
 800fcfe:	2308      	moveq	r3, #8
 800fd00:	2100      	movs	r1, #0
 800fd02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd06:	6866      	ldr	r6, [r4, #4]
 800fd08:	60a6      	str	r6, [r4, #8]
 800fd0a:	2e00      	cmp	r6, #0
 800fd0c:	bfa2      	ittt	ge
 800fd0e:	6821      	ldrge	r1, [r4, #0]
 800fd10:	f021 0104 	bicge.w	r1, r1, #4
 800fd14:	6021      	strge	r1, [r4, #0]
 800fd16:	b90d      	cbnz	r5, 800fd1c <_printf_i+0x110>
 800fd18:	2e00      	cmp	r6, #0
 800fd1a:	d04b      	beq.n	800fdb4 <_printf_i+0x1a8>
 800fd1c:	4616      	mov	r6, r2
 800fd1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd22:	fb03 5711 	mls	r7, r3, r1, r5
 800fd26:	5dc7      	ldrb	r7, [r0, r7]
 800fd28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fd2c:	462f      	mov	r7, r5
 800fd2e:	42bb      	cmp	r3, r7
 800fd30:	460d      	mov	r5, r1
 800fd32:	d9f4      	bls.n	800fd1e <_printf_i+0x112>
 800fd34:	2b08      	cmp	r3, #8
 800fd36:	d10b      	bne.n	800fd50 <_printf_i+0x144>
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	07df      	lsls	r7, r3, #31
 800fd3c:	d508      	bpl.n	800fd50 <_printf_i+0x144>
 800fd3e:	6923      	ldr	r3, [r4, #16]
 800fd40:	6861      	ldr	r1, [r4, #4]
 800fd42:	4299      	cmp	r1, r3
 800fd44:	bfde      	ittt	le
 800fd46:	2330      	movle	r3, #48	@ 0x30
 800fd48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fd4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fd50:	1b92      	subs	r2, r2, r6
 800fd52:	6122      	str	r2, [r4, #16]
 800fd54:	f8cd a000 	str.w	sl, [sp]
 800fd58:	464b      	mov	r3, r9
 800fd5a:	aa03      	add	r2, sp, #12
 800fd5c:	4621      	mov	r1, r4
 800fd5e:	4640      	mov	r0, r8
 800fd60:	f7ff fee6 	bl	800fb30 <_printf_common>
 800fd64:	3001      	adds	r0, #1
 800fd66:	d14a      	bne.n	800fdfe <_printf_i+0x1f2>
 800fd68:	f04f 30ff 	mov.w	r0, #4294967295
 800fd6c:	b004      	add	sp, #16
 800fd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	f043 0320 	orr.w	r3, r3, #32
 800fd78:	6023      	str	r3, [r4, #0]
 800fd7a:	4833      	ldr	r0, [pc, #204]	@ (800fe48 <_printf_i+0x23c>)
 800fd7c:	2778      	movs	r7, #120	@ 0x78
 800fd7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fd82:	6823      	ldr	r3, [r4, #0]
 800fd84:	6831      	ldr	r1, [r6, #0]
 800fd86:	061f      	lsls	r7, r3, #24
 800fd88:	f851 5b04 	ldr.w	r5, [r1], #4
 800fd8c:	d402      	bmi.n	800fd94 <_printf_i+0x188>
 800fd8e:	065f      	lsls	r7, r3, #25
 800fd90:	bf48      	it	mi
 800fd92:	b2ad      	uxthmi	r5, r5
 800fd94:	6031      	str	r1, [r6, #0]
 800fd96:	07d9      	lsls	r1, r3, #31
 800fd98:	bf44      	itt	mi
 800fd9a:	f043 0320 	orrmi.w	r3, r3, #32
 800fd9e:	6023      	strmi	r3, [r4, #0]
 800fda0:	b11d      	cbz	r5, 800fdaa <_printf_i+0x19e>
 800fda2:	2310      	movs	r3, #16
 800fda4:	e7ac      	b.n	800fd00 <_printf_i+0xf4>
 800fda6:	4827      	ldr	r0, [pc, #156]	@ (800fe44 <_printf_i+0x238>)
 800fda8:	e7e9      	b.n	800fd7e <_printf_i+0x172>
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	f023 0320 	bic.w	r3, r3, #32
 800fdb0:	6023      	str	r3, [r4, #0]
 800fdb2:	e7f6      	b.n	800fda2 <_printf_i+0x196>
 800fdb4:	4616      	mov	r6, r2
 800fdb6:	e7bd      	b.n	800fd34 <_printf_i+0x128>
 800fdb8:	6833      	ldr	r3, [r6, #0]
 800fdba:	6825      	ldr	r5, [r4, #0]
 800fdbc:	6961      	ldr	r1, [r4, #20]
 800fdbe:	1d18      	adds	r0, r3, #4
 800fdc0:	6030      	str	r0, [r6, #0]
 800fdc2:	062e      	lsls	r6, r5, #24
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	d501      	bpl.n	800fdcc <_printf_i+0x1c0>
 800fdc8:	6019      	str	r1, [r3, #0]
 800fdca:	e002      	b.n	800fdd2 <_printf_i+0x1c6>
 800fdcc:	0668      	lsls	r0, r5, #25
 800fdce:	d5fb      	bpl.n	800fdc8 <_printf_i+0x1bc>
 800fdd0:	8019      	strh	r1, [r3, #0]
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	6123      	str	r3, [r4, #16]
 800fdd6:	4616      	mov	r6, r2
 800fdd8:	e7bc      	b.n	800fd54 <_printf_i+0x148>
 800fdda:	6833      	ldr	r3, [r6, #0]
 800fddc:	1d1a      	adds	r2, r3, #4
 800fdde:	6032      	str	r2, [r6, #0]
 800fde0:	681e      	ldr	r6, [r3, #0]
 800fde2:	6862      	ldr	r2, [r4, #4]
 800fde4:	2100      	movs	r1, #0
 800fde6:	4630      	mov	r0, r6
 800fde8:	f7f0 fa0a 	bl	8000200 <memchr>
 800fdec:	b108      	cbz	r0, 800fdf2 <_printf_i+0x1e6>
 800fdee:	1b80      	subs	r0, r0, r6
 800fdf0:	6060      	str	r0, [r4, #4]
 800fdf2:	6863      	ldr	r3, [r4, #4]
 800fdf4:	6123      	str	r3, [r4, #16]
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdfc:	e7aa      	b.n	800fd54 <_printf_i+0x148>
 800fdfe:	6923      	ldr	r3, [r4, #16]
 800fe00:	4632      	mov	r2, r6
 800fe02:	4649      	mov	r1, r9
 800fe04:	4640      	mov	r0, r8
 800fe06:	47d0      	blx	sl
 800fe08:	3001      	adds	r0, #1
 800fe0a:	d0ad      	beq.n	800fd68 <_printf_i+0x15c>
 800fe0c:	6823      	ldr	r3, [r4, #0]
 800fe0e:	079b      	lsls	r3, r3, #30
 800fe10:	d413      	bmi.n	800fe3a <_printf_i+0x22e>
 800fe12:	68e0      	ldr	r0, [r4, #12]
 800fe14:	9b03      	ldr	r3, [sp, #12]
 800fe16:	4298      	cmp	r0, r3
 800fe18:	bfb8      	it	lt
 800fe1a:	4618      	movlt	r0, r3
 800fe1c:	e7a6      	b.n	800fd6c <_printf_i+0x160>
 800fe1e:	2301      	movs	r3, #1
 800fe20:	4632      	mov	r2, r6
 800fe22:	4649      	mov	r1, r9
 800fe24:	4640      	mov	r0, r8
 800fe26:	47d0      	blx	sl
 800fe28:	3001      	adds	r0, #1
 800fe2a:	d09d      	beq.n	800fd68 <_printf_i+0x15c>
 800fe2c:	3501      	adds	r5, #1
 800fe2e:	68e3      	ldr	r3, [r4, #12]
 800fe30:	9903      	ldr	r1, [sp, #12]
 800fe32:	1a5b      	subs	r3, r3, r1
 800fe34:	42ab      	cmp	r3, r5
 800fe36:	dcf2      	bgt.n	800fe1e <_printf_i+0x212>
 800fe38:	e7eb      	b.n	800fe12 <_printf_i+0x206>
 800fe3a:	2500      	movs	r5, #0
 800fe3c:	f104 0619 	add.w	r6, r4, #25
 800fe40:	e7f5      	b.n	800fe2e <_printf_i+0x222>
 800fe42:	bf00      	nop
 800fe44:	0801764a 	.word	0x0801764a
 800fe48:	0801765b 	.word	0x0801765b

0800fe4c <std>:
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	b510      	push	{r4, lr}
 800fe50:	4604      	mov	r4, r0
 800fe52:	e9c0 3300 	strd	r3, r3, [r0]
 800fe56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe5a:	6083      	str	r3, [r0, #8]
 800fe5c:	8181      	strh	r1, [r0, #12]
 800fe5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe60:	81c2      	strh	r2, [r0, #14]
 800fe62:	6183      	str	r3, [r0, #24]
 800fe64:	4619      	mov	r1, r3
 800fe66:	2208      	movs	r2, #8
 800fe68:	305c      	adds	r0, #92	@ 0x5c
 800fe6a:	f000 f928 	bl	80100be <memset>
 800fe6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fea4 <std+0x58>)
 800fe70:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe72:	4b0d      	ldr	r3, [pc, #52]	@ (800fea8 <std+0x5c>)
 800fe74:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe76:	4b0d      	ldr	r3, [pc, #52]	@ (800feac <std+0x60>)
 800fe78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe7a:	4b0d      	ldr	r3, [pc, #52]	@ (800feb0 <std+0x64>)
 800fe7c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	@ (800feb4 <std+0x68>)
 800fe80:	6224      	str	r4, [r4, #32]
 800fe82:	429c      	cmp	r4, r3
 800fe84:	d006      	beq.n	800fe94 <std+0x48>
 800fe86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe8a:	4294      	cmp	r4, r2
 800fe8c:	d002      	beq.n	800fe94 <std+0x48>
 800fe8e:	33d0      	adds	r3, #208	@ 0xd0
 800fe90:	429c      	cmp	r4, r3
 800fe92:	d105      	bne.n	800fea0 <std+0x54>
 800fe94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe9c:	f000 b99c 	b.w	80101d8 <__retarget_lock_init_recursive>
 800fea0:	bd10      	pop	{r4, pc}
 800fea2:	bf00      	nop
 800fea4:	08010039 	.word	0x08010039
 800fea8:	0801005b 	.word	0x0801005b
 800feac:	08010093 	.word	0x08010093
 800feb0:	080100b7 	.word	0x080100b7
 800feb4:	20000ab0 	.word	0x20000ab0

0800feb8 <stdio_exit_handler>:
 800feb8:	4a02      	ldr	r2, [pc, #8]	@ (800fec4 <stdio_exit_handler+0xc>)
 800feba:	4903      	ldr	r1, [pc, #12]	@ (800fec8 <stdio_exit_handler+0x10>)
 800febc:	4803      	ldr	r0, [pc, #12]	@ (800fecc <stdio_exit_handler+0x14>)
 800febe:	f000 b869 	b.w	800ff94 <_fwalk_sglue>
 800fec2:	bf00      	nop
 800fec4:	2000002c 	.word	0x2000002c
 800fec8:	08011c6d 	.word	0x08011c6d
 800fecc:	2000003c 	.word	0x2000003c

0800fed0 <cleanup_stdio>:
 800fed0:	6841      	ldr	r1, [r0, #4]
 800fed2:	4b0c      	ldr	r3, [pc, #48]	@ (800ff04 <cleanup_stdio+0x34>)
 800fed4:	4299      	cmp	r1, r3
 800fed6:	b510      	push	{r4, lr}
 800fed8:	4604      	mov	r4, r0
 800feda:	d001      	beq.n	800fee0 <cleanup_stdio+0x10>
 800fedc:	f001 fec6 	bl	8011c6c <_fflush_r>
 800fee0:	68a1      	ldr	r1, [r4, #8]
 800fee2:	4b09      	ldr	r3, [pc, #36]	@ (800ff08 <cleanup_stdio+0x38>)
 800fee4:	4299      	cmp	r1, r3
 800fee6:	d002      	beq.n	800feee <cleanup_stdio+0x1e>
 800fee8:	4620      	mov	r0, r4
 800feea:	f001 febf 	bl	8011c6c <_fflush_r>
 800feee:	68e1      	ldr	r1, [r4, #12]
 800fef0:	4b06      	ldr	r3, [pc, #24]	@ (800ff0c <cleanup_stdio+0x3c>)
 800fef2:	4299      	cmp	r1, r3
 800fef4:	d004      	beq.n	800ff00 <cleanup_stdio+0x30>
 800fef6:	4620      	mov	r0, r4
 800fef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fefc:	f001 beb6 	b.w	8011c6c <_fflush_r>
 800ff00:	bd10      	pop	{r4, pc}
 800ff02:	bf00      	nop
 800ff04:	20000ab0 	.word	0x20000ab0
 800ff08:	20000b18 	.word	0x20000b18
 800ff0c:	20000b80 	.word	0x20000b80

0800ff10 <global_stdio_init.part.0>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	4b0b      	ldr	r3, [pc, #44]	@ (800ff40 <global_stdio_init.part.0+0x30>)
 800ff14:	4c0b      	ldr	r4, [pc, #44]	@ (800ff44 <global_stdio_init.part.0+0x34>)
 800ff16:	4a0c      	ldr	r2, [pc, #48]	@ (800ff48 <global_stdio_init.part.0+0x38>)
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	2104      	movs	r1, #4
 800ff20:	f7ff ff94 	bl	800fe4c <std>
 800ff24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ff28:	2201      	movs	r2, #1
 800ff2a:	2109      	movs	r1, #9
 800ff2c:	f7ff ff8e 	bl	800fe4c <std>
 800ff30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ff34:	2202      	movs	r2, #2
 800ff36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff3a:	2112      	movs	r1, #18
 800ff3c:	f7ff bf86 	b.w	800fe4c <std>
 800ff40:	20000be8 	.word	0x20000be8
 800ff44:	20000ab0 	.word	0x20000ab0
 800ff48:	0800feb9 	.word	0x0800feb9

0800ff4c <__sfp_lock_acquire>:
 800ff4c:	4801      	ldr	r0, [pc, #4]	@ (800ff54 <__sfp_lock_acquire+0x8>)
 800ff4e:	f000 b944 	b.w	80101da <__retarget_lock_acquire_recursive>
 800ff52:	bf00      	nop
 800ff54:	20000bf1 	.word	0x20000bf1

0800ff58 <__sfp_lock_release>:
 800ff58:	4801      	ldr	r0, [pc, #4]	@ (800ff60 <__sfp_lock_release+0x8>)
 800ff5a:	f000 b93f 	b.w	80101dc <__retarget_lock_release_recursive>
 800ff5e:	bf00      	nop
 800ff60:	20000bf1 	.word	0x20000bf1

0800ff64 <__sinit>:
 800ff64:	b510      	push	{r4, lr}
 800ff66:	4604      	mov	r4, r0
 800ff68:	f7ff fff0 	bl	800ff4c <__sfp_lock_acquire>
 800ff6c:	6a23      	ldr	r3, [r4, #32]
 800ff6e:	b11b      	cbz	r3, 800ff78 <__sinit+0x14>
 800ff70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff74:	f7ff bff0 	b.w	800ff58 <__sfp_lock_release>
 800ff78:	4b04      	ldr	r3, [pc, #16]	@ (800ff8c <__sinit+0x28>)
 800ff7a:	6223      	str	r3, [r4, #32]
 800ff7c:	4b04      	ldr	r3, [pc, #16]	@ (800ff90 <__sinit+0x2c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d1f5      	bne.n	800ff70 <__sinit+0xc>
 800ff84:	f7ff ffc4 	bl	800ff10 <global_stdio_init.part.0>
 800ff88:	e7f2      	b.n	800ff70 <__sinit+0xc>
 800ff8a:	bf00      	nop
 800ff8c:	0800fed1 	.word	0x0800fed1
 800ff90:	20000be8 	.word	0x20000be8

0800ff94 <_fwalk_sglue>:
 800ff94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff98:	4607      	mov	r7, r0
 800ff9a:	4688      	mov	r8, r1
 800ff9c:	4614      	mov	r4, r2
 800ff9e:	2600      	movs	r6, #0
 800ffa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffa4:	f1b9 0901 	subs.w	r9, r9, #1
 800ffa8:	d505      	bpl.n	800ffb6 <_fwalk_sglue+0x22>
 800ffaa:	6824      	ldr	r4, [r4, #0]
 800ffac:	2c00      	cmp	r4, #0
 800ffae:	d1f7      	bne.n	800ffa0 <_fwalk_sglue+0xc>
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb6:	89ab      	ldrh	r3, [r5, #12]
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d907      	bls.n	800ffcc <_fwalk_sglue+0x38>
 800ffbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	d003      	beq.n	800ffcc <_fwalk_sglue+0x38>
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	47c0      	blx	r8
 800ffca:	4306      	orrs	r6, r0
 800ffcc:	3568      	adds	r5, #104	@ 0x68
 800ffce:	e7e9      	b.n	800ffa4 <_fwalk_sglue+0x10>

0800ffd0 <sniprintf>:
 800ffd0:	b40c      	push	{r2, r3}
 800ffd2:	b530      	push	{r4, r5, lr}
 800ffd4:	4b17      	ldr	r3, [pc, #92]	@ (8010034 <sniprintf+0x64>)
 800ffd6:	1e0c      	subs	r4, r1, #0
 800ffd8:	681d      	ldr	r5, [r3, #0]
 800ffda:	b09d      	sub	sp, #116	@ 0x74
 800ffdc:	da08      	bge.n	800fff0 <sniprintf+0x20>
 800ffde:	238b      	movs	r3, #139	@ 0x8b
 800ffe0:	602b      	str	r3, [r5, #0]
 800ffe2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe6:	b01d      	add	sp, #116	@ 0x74
 800ffe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffec:	b002      	add	sp, #8
 800ffee:	4770      	bx	lr
 800fff0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fff4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fff8:	bf14      	ite	ne
 800fffa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fffe:	4623      	moveq	r3, r4
 8010000:	9304      	str	r3, [sp, #16]
 8010002:	9307      	str	r3, [sp, #28]
 8010004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010008:	9002      	str	r0, [sp, #8]
 801000a:	9006      	str	r0, [sp, #24]
 801000c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010010:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010012:	ab21      	add	r3, sp, #132	@ 0x84
 8010014:	a902      	add	r1, sp, #8
 8010016:	4628      	mov	r0, r5
 8010018:	9301      	str	r3, [sp, #4]
 801001a:	f001 fb65 	bl	80116e8 <_svfiprintf_r>
 801001e:	1c43      	adds	r3, r0, #1
 8010020:	bfbc      	itt	lt
 8010022:	238b      	movlt	r3, #139	@ 0x8b
 8010024:	602b      	strlt	r3, [r5, #0]
 8010026:	2c00      	cmp	r4, #0
 8010028:	d0dd      	beq.n	800ffe6 <sniprintf+0x16>
 801002a:	9b02      	ldr	r3, [sp, #8]
 801002c:	2200      	movs	r2, #0
 801002e:	701a      	strb	r2, [r3, #0]
 8010030:	e7d9      	b.n	800ffe6 <sniprintf+0x16>
 8010032:	bf00      	nop
 8010034:	20000038 	.word	0x20000038

08010038 <__sread>:
 8010038:	b510      	push	{r4, lr}
 801003a:	460c      	mov	r4, r1
 801003c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010040:	f000 f86c 	bl	801011c <_read_r>
 8010044:	2800      	cmp	r0, #0
 8010046:	bfab      	itete	ge
 8010048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801004a:	89a3      	ldrhlt	r3, [r4, #12]
 801004c:	181b      	addge	r3, r3, r0
 801004e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010052:	bfac      	ite	ge
 8010054:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010056:	81a3      	strhlt	r3, [r4, #12]
 8010058:	bd10      	pop	{r4, pc}

0801005a <__swrite>:
 801005a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005e:	461f      	mov	r7, r3
 8010060:	898b      	ldrh	r3, [r1, #12]
 8010062:	05db      	lsls	r3, r3, #23
 8010064:	4605      	mov	r5, r0
 8010066:	460c      	mov	r4, r1
 8010068:	4616      	mov	r6, r2
 801006a:	d505      	bpl.n	8010078 <__swrite+0x1e>
 801006c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010070:	2302      	movs	r3, #2
 8010072:	2200      	movs	r2, #0
 8010074:	f000 f840 	bl	80100f8 <_lseek_r>
 8010078:	89a3      	ldrh	r3, [r4, #12]
 801007a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801007e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010082:	81a3      	strh	r3, [r4, #12]
 8010084:	4632      	mov	r2, r6
 8010086:	463b      	mov	r3, r7
 8010088:	4628      	mov	r0, r5
 801008a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801008e:	f000 b867 	b.w	8010160 <_write_r>

08010092 <__sseek>:
 8010092:	b510      	push	{r4, lr}
 8010094:	460c      	mov	r4, r1
 8010096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801009a:	f000 f82d 	bl	80100f8 <_lseek_r>
 801009e:	1c43      	adds	r3, r0, #1
 80100a0:	89a3      	ldrh	r3, [r4, #12]
 80100a2:	bf15      	itete	ne
 80100a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80100a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80100aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80100ae:	81a3      	strheq	r3, [r4, #12]
 80100b0:	bf18      	it	ne
 80100b2:	81a3      	strhne	r3, [r4, #12]
 80100b4:	bd10      	pop	{r4, pc}

080100b6 <__sclose>:
 80100b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ba:	f000 b80d 	b.w	80100d8 <_close_r>

080100be <memset>:
 80100be:	4402      	add	r2, r0
 80100c0:	4603      	mov	r3, r0
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d100      	bne.n	80100c8 <memset+0xa>
 80100c6:	4770      	bx	lr
 80100c8:	f803 1b01 	strb.w	r1, [r3], #1
 80100cc:	e7f9      	b.n	80100c2 <memset+0x4>
	...

080100d0 <_localeconv_r>:
 80100d0:	4800      	ldr	r0, [pc, #0]	@ (80100d4 <_localeconv_r+0x4>)
 80100d2:	4770      	bx	lr
 80100d4:	20000178 	.word	0x20000178

080100d8 <_close_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4d06      	ldr	r5, [pc, #24]	@ (80100f4 <_close_r+0x1c>)
 80100dc:	2300      	movs	r3, #0
 80100de:	4604      	mov	r4, r0
 80100e0:	4608      	mov	r0, r1
 80100e2:	602b      	str	r3, [r5, #0]
 80100e4:	f7f4 fb16 	bl	8004714 <_close>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	d102      	bne.n	80100f2 <_close_r+0x1a>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	b103      	cbz	r3, 80100f2 <_close_r+0x1a>
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	bd38      	pop	{r3, r4, r5, pc}
 80100f4:	20000bec 	.word	0x20000bec

080100f8 <_lseek_r>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	4d07      	ldr	r5, [pc, #28]	@ (8010118 <_lseek_r+0x20>)
 80100fc:	4604      	mov	r4, r0
 80100fe:	4608      	mov	r0, r1
 8010100:	4611      	mov	r1, r2
 8010102:	2200      	movs	r2, #0
 8010104:	602a      	str	r2, [r5, #0]
 8010106:	461a      	mov	r2, r3
 8010108:	f7f4 fb2b 	bl	8004762 <_lseek>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	d102      	bne.n	8010116 <_lseek_r+0x1e>
 8010110:	682b      	ldr	r3, [r5, #0]
 8010112:	b103      	cbz	r3, 8010116 <_lseek_r+0x1e>
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	20000bec 	.word	0x20000bec

0801011c <_read_r>:
 801011c:	b538      	push	{r3, r4, r5, lr}
 801011e:	4d07      	ldr	r5, [pc, #28]	@ (801013c <_read_r+0x20>)
 8010120:	4604      	mov	r4, r0
 8010122:	4608      	mov	r0, r1
 8010124:	4611      	mov	r1, r2
 8010126:	2200      	movs	r2, #0
 8010128:	602a      	str	r2, [r5, #0]
 801012a:	461a      	mov	r2, r3
 801012c:	f7f4 fab9 	bl	80046a2 <_read>
 8010130:	1c43      	adds	r3, r0, #1
 8010132:	d102      	bne.n	801013a <_read_r+0x1e>
 8010134:	682b      	ldr	r3, [r5, #0]
 8010136:	b103      	cbz	r3, 801013a <_read_r+0x1e>
 8010138:	6023      	str	r3, [r4, #0]
 801013a:	bd38      	pop	{r3, r4, r5, pc}
 801013c:	20000bec 	.word	0x20000bec

08010140 <_sbrk_r>:
 8010140:	b538      	push	{r3, r4, r5, lr}
 8010142:	4d06      	ldr	r5, [pc, #24]	@ (801015c <_sbrk_r+0x1c>)
 8010144:	2300      	movs	r3, #0
 8010146:	4604      	mov	r4, r0
 8010148:	4608      	mov	r0, r1
 801014a:	602b      	str	r3, [r5, #0]
 801014c:	f7f4 fb16 	bl	800477c <_sbrk>
 8010150:	1c43      	adds	r3, r0, #1
 8010152:	d102      	bne.n	801015a <_sbrk_r+0x1a>
 8010154:	682b      	ldr	r3, [r5, #0]
 8010156:	b103      	cbz	r3, 801015a <_sbrk_r+0x1a>
 8010158:	6023      	str	r3, [r4, #0]
 801015a:	bd38      	pop	{r3, r4, r5, pc}
 801015c:	20000bec 	.word	0x20000bec

08010160 <_write_r>:
 8010160:	b538      	push	{r3, r4, r5, lr}
 8010162:	4d07      	ldr	r5, [pc, #28]	@ (8010180 <_write_r+0x20>)
 8010164:	4604      	mov	r4, r0
 8010166:	4608      	mov	r0, r1
 8010168:	4611      	mov	r1, r2
 801016a:	2200      	movs	r2, #0
 801016c:	602a      	str	r2, [r5, #0]
 801016e:	461a      	mov	r2, r3
 8010170:	f7f4 fab4 	bl	80046dc <_write>
 8010174:	1c43      	adds	r3, r0, #1
 8010176:	d102      	bne.n	801017e <_write_r+0x1e>
 8010178:	682b      	ldr	r3, [r5, #0]
 801017a:	b103      	cbz	r3, 801017e <_write_r+0x1e>
 801017c:	6023      	str	r3, [r4, #0]
 801017e:	bd38      	pop	{r3, r4, r5, pc}
 8010180:	20000bec 	.word	0x20000bec

08010184 <__errno>:
 8010184:	4b01      	ldr	r3, [pc, #4]	@ (801018c <__errno+0x8>)
 8010186:	6818      	ldr	r0, [r3, #0]
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	20000038 	.word	0x20000038

08010190 <__libc_init_array>:
 8010190:	b570      	push	{r4, r5, r6, lr}
 8010192:	4d0d      	ldr	r5, [pc, #52]	@ (80101c8 <__libc_init_array+0x38>)
 8010194:	4c0d      	ldr	r4, [pc, #52]	@ (80101cc <__libc_init_array+0x3c>)
 8010196:	1b64      	subs	r4, r4, r5
 8010198:	10a4      	asrs	r4, r4, #2
 801019a:	2600      	movs	r6, #0
 801019c:	42a6      	cmp	r6, r4
 801019e:	d109      	bne.n	80101b4 <__libc_init_array+0x24>
 80101a0:	4d0b      	ldr	r5, [pc, #44]	@ (80101d0 <__libc_init_array+0x40>)
 80101a2:	4c0c      	ldr	r4, [pc, #48]	@ (80101d4 <__libc_init_array+0x44>)
 80101a4:	f001 ffa2 	bl	80120ec <_init>
 80101a8:	1b64      	subs	r4, r4, r5
 80101aa:	10a4      	asrs	r4, r4, #2
 80101ac:	2600      	movs	r6, #0
 80101ae:	42a6      	cmp	r6, r4
 80101b0:	d105      	bne.n	80101be <__libc_init_array+0x2e>
 80101b2:	bd70      	pop	{r4, r5, r6, pc}
 80101b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80101b8:	4798      	blx	r3
 80101ba:	3601      	adds	r6, #1
 80101bc:	e7ee      	b.n	801019c <__libc_init_array+0xc>
 80101be:	f855 3b04 	ldr.w	r3, [r5], #4
 80101c2:	4798      	blx	r3
 80101c4:	3601      	adds	r6, #1
 80101c6:	e7f2      	b.n	80101ae <__libc_init_array+0x1e>
 80101c8:	080179b0 	.word	0x080179b0
 80101cc:	080179b0 	.word	0x080179b0
 80101d0:	080179b0 	.word	0x080179b0
 80101d4:	080179b4 	.word	0x080179b4

080101d8 <__retarget_lock_init_recursive>:
 80101d8:	4770      	bx	lr

080101da <__retarget_lock_acquire_recursive>:
 80101da:	4770      	bx	lr

080101dc <__retarget_lock_release_recursive>:
 80101dc:	4770      	bx	lr

080101de <memcpy>:
 80101de:	440a      	add	r2, r1
 80101e0:	4291      	cmp	r1, r2
 80101e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e6:	d100      	bne.n	80101ea <memcpy+0xc>
 80101e8:	4770      	bx	lr
 80101ea:	b510      	push	{r4, lr}
 80101ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101f4:	4291      	cmp	r1, r2
 80101f6:	d1f9      	bne.n	80101ec <memcpy+0xe>
 80101f8:	bd10      	pop	{r4, pc}

080101fa <quorem>:
 80101fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fe:	6903      	ldr	r3, [r0, #16]
 8010200:	690c      	ldr	r4, [r1, #16]
 8010202:	42a3      	cmp	r3, r4
 8010204:	4607      	mov	r7, r0
 8010206:	db7e      	blt.n	8010306 <quorem+0x10c>
 8010208:	3c01      	subs	r4, #1
 801020a:	f101 0814 	add.w	r8, r1, #20
 801020e:	00a3      	lsls	r3, r4, #2
 8010210:	f100 0514 	add.w	r5, r0, #20
 8010214:	9300      	str	r3, [sp, #0]
 8010216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801021a:	9301      	str	r3, [sp, #4]
 801021c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010220:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010224:	3301      	adds	r3, #1
 8010226:	429a      	cmp	r2, r3
 8010228:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801022c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010230:	d32e      	bcc.n	8010290 <quorem+0x96>
 8010232:	f04f 0a00 	mov.w	sl, #0
 8010236:	46c4      	mov	ip, r8
 8010238:	46ae      	mov	lr, r5
 801023a:	46d3      	mov	fp, sl
 801023c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010240:	b298      	uxth	r0, r3
 8010242:	fb06 a000 	mla	r0, r6, r0, sl
 8010246:	0c02      	lsrs	r2, r0, #16
 8010248:	0c1b      	lsrs	r3, r3, #16
 801024a:	fb06 2303 	mla	r3, r6, r3, r2
 801024e:	f8de 2000 	ldr.w	r2, [lr]
 8010252:	b280      	uxth	r0, r0
 8010254:	b292      	uxth	r2, r2
 8010256:	1a12      	subs	r2, r2, r0
 8010258:	445a      	add	r2, fp
 801025a:	f8de 0000 	ldr.w	r0, [lr]
 801025e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010262:	b29b      	uxth	r3, r3
 8010264:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010268:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801026c:	b292      	uxth	r2, r2
 801026e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010272:	45e1      	cmp	r9, ip
 8010274:	f84e 2b04 	str.w	r2, [lr], #4
 8010278:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801027c:	d2de      	bcs.n	801023c <quorem+0x42>
 801027e:	9b00      	ldr	r3, [sp, #0]
 8010280:	58eb      	ldr	r3, [r5, r3]
 8010282:	b92b      	cbnz	r3, 8010290 <quorem+0x96>
 8010284:	9b01      	ldr	r3, [sp, #4]
 8010286:	3b04      	subs	r3, #4
 8010288:	429d      	cmp	r5, r3
 801028a:	461a      	mov	r2, r3
 801028c:	d32f      	bcc.n	80102ee <quorem+0xf4>
 801028e:	613c      	str	r4, [r7, #16]
 8010290:	4638      	mov	r0, r7
 8010292:	f001 f8c5 	bl	8011420 <__mcmp>
 8010296:	2800      	cmp	r0, #0
 8010298:	db25      	blt.n	80102e6 <quorem+0xec>
 801029a:	4629      	mov	r1, r5
 801029c:	2000      	movs	r0, #0
 801029e:	f858 2b04 	ldr.w	r2, [r8], #4
 80102a2:	f8d1 c000 	ldr.w	ip, [r1]
 80102a6:	fa1f fe82 	uxth.w	lr, r2
 80102aa:	fa1f f38c 	uxth.w	r3, ip
 80102ae:	eba3 030e 	sub.w	r3, r3, lr
 80102b2:	4403      	add	r3, r0
 80102b4:	0c12      	lsrs	r2, r2, #16
 80102b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80102ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80102be:	b29b      	uxth	r3, r3
 80102c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102c4:	45c1      	cmp	r9, r8
 80102c6:	f841 3b04 	str.w	r3, [r1], #4
 80102ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80102ce:	d2e6      	bcs.n	801029e <quorem+0xa4>
 80102d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102d8:	b922      	cbnz	r2, 80102e4 <quorem+0xea>
 80102da:	3b04      	subs	r3, #4
 80102dc:	429d      	cmp	r5, r3
 80102de:	461a      	mov	r2, r3
 80102e0:	d30b      	bcc.n	80102fa <quorem+0x100>
 80102e2:	613c      	str	r4, [r7, #16]
 80102e4:	3601      	adds	r6, #1
 80102e6:	4630      	mov	r0, r6
 80102e8:	b003      	add	sp, #12
 80102ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ee:	6812      	ldr	r2, [r2, #0]
 80102f0:	3b04      	subs	r3, #4
 80102f2:	2a00      	cmp	r2, #0
 80102f4:	d1cb      	bne.n	801028e <quorem+0x94>
 80102f6:	3c01      	subs	r4, #1
 80102f8:	e7c6      	b.n	8010288 <quorem+0x8e>
 80102fa:	6812      	ldr	r2, [r2, #0]
 80102fc:	3b04      	subs	r3, #4
 80102fe:	2a00      	cmp	r2, #0
 8010300:	d1ef      	bne.n	80102e2 <quorem+0xe8>
 8010302:	3c01      	subs	r4, #1
 8010304:	e7ea      	b.n	80102dc <quorem+0xe2>
 8010306:	2000      	movs	r0, #0
 8010308:	e7ee      	b.n	80102e8 <quorem+0xee>
 801030a:	0000      	movs	r0, r0
 801030c:	0000      	movs	r0, r0
	...

08010310 <_dtoa_r>:
 8010310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010314:	69c7      	ldr	r7, [r0, #28]
 8010316:	b099      	sub	sp, #100	@ 0x64
 8010318:	ed8d 0b02 	vstr	d0, [sp, #8]
 801031c:	ec55 4b10 	vmov	r4, r5, d0
 8010320:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010322:	9109      	str	r1, [sp, #36]	@ 0x24
 8010324:	4683      	mov	fp, r0
 8010326:	920e      	str	r2, [sp, #56]	@ 0x38
 8010328:	9313      	str	r3, [sp, #76]	@ 0x4c
 801032a:	b97f      	cbnz	r7, 801034c <_dtoa_r+0x3c>
 801032c:	2010      	movs	r0, #16
 801032e:	f7ff f87f 	bl	800f430 <malloc>
 8010332:	4602      	mov	r2, r0
 8010334:	f8cb 001c 	str.w	r0, [fp, #28]
 8010338:	b920      	cbnz	r0, 8010344 <_dtoa_r+0x34>
 801033a:	4ba7      	ldr	r3, [pc, #668]	@ (80105d8 <_dtoa_r+0x2c8>)
 801033c:	21ef      	movs	r1, #239	@ 0xef
 801033e:	48a7      	ldr	r0, [pc, #668]	@ (80105dc <_dtoa_r+0x2cc>)
 8010340:	f001 fd6a 	bl	8011e18 <__assert_func>
 8010344:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010348:	6007      	str	r7, [r0, #0]
 801034a:	60c7      	str	r7, [r0, #12]
 801034c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010350:	6819      	ldr	r1, [r3, #0]
 8010352:	b159      	cbz	r1, 801036c <_dtoa_r+0x5c>
 8010354:	685a      	ldr	r2, [r3, #4]
 8010356:	604a      	str	r2, [r1, #4]
 8010358:	2301      	movs	r3, #1
 801035a:	4093      	lsls	r3, r2
 801035c:	608b      	str	r3, [r1, #8]
 801035e:	4658      	mov	r0, fp
 8010360:	f000 fe24 	bl	8010fac <_Bfree>
 8010364:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010368:	2200      	movs	r2, #0
 801036a:	601a      	str	r2, [r3, #0]
 801036c:	1e2b      	subs	r3, r5, #0
 801036e:	bfb9      	ittee	lt
 8010370:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010374:	9303      	strlt	r3, [sp, #12]
 8010376:	2300      	movge	r3, #0
 8010378:	6033      	strge	r3, [r6, #0]
 801037a:	9f03      	ldr	r7, [sp, #12]
 801037c:	4b98      	ldr	r3, [pc, #608]	@ (80105e0 <_dtoa_r+0x2d0>)
 801037e:	bfbc      	itt	lt
 8010380:	2201      	movlt	r2, #1
 8010382:	6032      	strlt	r2, [r6, #0]
 8010384:	43bb      	bics	r3, r7
 8010386:	d112      	bne.n	80103ae <_dtoa_r+0x9e>
 8010388:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801038a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801038e:	6013      	str	r3, [r2, #0]
 8010390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010394:	4323      	orrs	r3, r4
 8010396:	f000 854d 	beq.w	8010e34 <_dtoa_r+0xb24>
 801039a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801039c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80105f4 <_dtoa_r+0x2e4>
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f000 854f 	beq.w	8010e44 <_dtoa_r+0xb34>
 80103a6:	f10a 0303 	add.w	r3, sl, #3
 80103aa:	f000 bd49 	b.w	8010e40 <_dtoa_r+0xb30>
 80103ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103b2:	2200      	movs	r2, #0
 80103b4:	ec51 0b17 	vmov	r0, r1, d7
 80103b8:	2300      	movs	r3, #0
 80103ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80103be:	f7f0 fb9b 	bl	8000af8 <__aeabi_dcmpeq>
 80103c2:	4680      	mov	r8, r0
 80103c4:	b158      	cbz	r0, 80103de <_dtoa_r+0xce>
 80103c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80103c8:	2301      	movs	r3, #1
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80103ce:	b113      	cbz	r3, 80103d6 <_dtoa_r+0xc6>
 80103d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80103d2:	4b84      	ldr	r3, [pc, #528]	@ (80105e4 <_dtoa_r+0x2d4>)
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80105f8 <_dtoa_r+0x2e8>
 80103da:	f000 bd33 	b.w	8010e44 <_dtoa_r+0xb34>
 80103de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80103e2:	aa16      	add	r2, sp, #88	@ 0x58
 80103e4:	a917      	add	r1, sp, #92	@ 0x5c
 80103e6:	4658      	mov	r0, fp
 80103e8:	f001 f8ca 	bl	8011580 <__d2b>
 80103ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80103f0:	4681      	mov	r9, r0
 80103f2:	2e00      	cmp	r6, #0
 80103f4:	d077      	beq.n	80104e6 <_dtoa_r+0x1d6>
 80103f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80103f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80103fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010404:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010408:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801040c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010410:	4619      	mov	r1, r3
 8010412:	2200      	movs	r2, #0
 8010414:	4b74      	ldr	r3, [pc, #464]	@ (80105e8 <_dtoa_r+0x2d8>)
 8010416:	f7ef ff4f 	bl	80002b8 <__aeabi_dsub>
 801041a:	a369      	add	r3, pc, #420	@ (adr r3, 80105c0 <_dtoa_r+0x2b0>)
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	f7f0 f902 	bl	8000628 <__aeabi_dmul>
 8010424:	a368      	add	r3, pc, #416	@ (adr r3, 80105c8 <_dtoa_r+0x2b8>)
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	f7ef ff47 	bl	80002bc <__adddf3>
 801042e:	4604      	mov	r4, r0
 8010430:	4630      	mov	r0, r6
 8010432:	460d      	mov	r5, r1
 8010434:	f7f0 f88e 	bl	8000554 <__aeabi_i2d>
 8010438:	a365      	add	r3, pc, #404	@ (adr r3, 80105d0 <_dtoa_r+0x2c0>)
 801043a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043e:	f7f0 f8f3 	bl	8000628 <__aeabi_dmul>
 8010442:	4602      	mov	r2, r0
 8010444:	460b      	mov	r3, r1
 8010446:	4620      	mov	r0, r4
 8010448:	4629      	mov	r1, r5
 801044a:	f7ef ff37 	bl	80002bc <__adddf3>
 801044e:	4604      	mov	r4, r0
 8010450:	460d      	mov	r5, r1
 8010452:	f7f0 fb99 	bl	8000b88 <__aeabi_d2iz>
 8010456:	2200      	movs	r2, #0
 8010458:	4607      	mov	r7, r0
 801045a:	2300      	movs	r3, #0
 801045c:	4620      	mov	r0, r4
 801045e:	4629      	mov	r1, r5
 8010460:	f7f0 fb54 	bl	8000b0c <__aeabi_dcmplt>
 8010464:	b140      	cbz	r0, 8010478 <_dtoa_r+0x168>
 8010466:	4638      	mov	r0, r7
 8010468:	f7f0 f874 	bl	8000554 <__aeabi_i2d>
 801046c:	4622      	mov	r2, r4
 801046e:	462b      	mov	r3, r5
 8010470:	f7f0 fb42 	bl	8000af8 <__aeabi_dcmpeq>
 8010474:	b900      	cbnz	r0, 8010478 <_dtoa_r+0x168>
 8010476:	3f01      	subs	r7, #1
 8010478:	2f16      	cmp	r7, #22
 801047a:	d851      	bhi.n	8010520 <_dtoa_r+0x210>
 801047c:	4b5b      	ldr	r3, [pc, #364]	@ (80105ec <_dtoa_r+0x2dc>)
 801047e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801048a:	f7f0 fb3f 	bl	8000b0c <__aeabi_dcmplt>
 801048e:	2800      	cmp	r0, #0
 8010490:	d048      	beq.n	8010524 <_dtoa_r+0x214>
 8010492:	3f01      	subs	r7, #1
 8010494:	2300      	movs	r3, #0
 8010496:	9312      	str	r3, [sp, #72]	@ 0x48
 8010498:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801049a:	1b9b      	subs	r3, r3, r6
 801049c:	1e5a      	subs	r2, r3, #1
 801049e:	bf44      	itt	mi
 80104a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80104a4:	2300      	movmi	r3, #0
 80104a6:	9208      	str	r2, [sp, #32]
 80104a8:	bf54      	ite	pl
 80104aa:	f04f 0800 	movpl.w	r8, #0
 80104ae:	9308      	strmi	r3, [sp, #32]
 80104b0:	2f00      	cmp	r7, #0
 80104b2:	db39      	blt.n	8010528 <_dtoa_r+0x218>
 80104b4:	9b08      	ldr	r3, [sp, #32]
 80104b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80104b8:	443b      	add	r3, r7
 80104ba:	9308      	str	r3, [sp, #32]
 80104bc:	2300      	movs	r3, #0
 80104be:	930a      	str	r3, [sp, #40]	@ 0x28
 80104c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104c2:	2b09      	cmp	r3, #9
 80104c4:	d864      	bhi.n	8010590 <_dtoa_r+0x280>
 80104c6:	2b05      	cmp	r3, #5
 80104c8:	bfc4      	itt	gt
 80104ca:	3b04      	subgt	r3, #4
 80104cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80104ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104d0:	f1a3 0302 	sub.w	r3, r3, #2
 80104d4:	bfcc      	ite	gt
 80104d6:	2400      	movgt	r4, #0
 80104d8:	2401      	movle	r4, #1
 80104da:	2b03      	cmp	r3, #3
 80104dc:	d863      	bhi.n	80105a6 <_dtoa_r+0x296>
 80104de:	e8df f003 	tbb	[pc, r3]
 80104e2:	372a      	.short	0x372a
 80104e4:	5535      	.short	0x5535
 80104e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80104ea:	441e      	add	r6, r3
 80104ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80104f0:	2b20      	cmp	r3, #32
 80104f2:	bfc1      	itttt	gt
 80104f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80104f8:	409f      	lslgt	r7, r3
 80104fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80104fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010502:	bfd6      	itet	le
 8010504:	f1c3 0320 	rsble	r3, r3, #32
 8010508:	ea47 0003 	orrgt.w	r0, r7, r3
 801050c:	fa04 f003 	lslle.w	r0, r4, r3
 8010510:	f7f0 f810 	bl	8000534 <__aeabi_ui2d>
 8010514:	2201      	movs	r2, #1
 8010516:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801051a:	3e01      	subs	r6, #1
 801051c:	9214      	str	r2, [sp, #80]	@ 0x50
 801051e:	e777      	b.n	8010410 <_dtoa_r+0x100>
 8010520:	2301      	movs	r3, #1
 8010522:	e7b8      	b.n	8010496 <_dtoa_r+0x186>
 8010524:	9012      	str	r0, [sp, #72]	@ 0x48
 8010526:	e7b7      	b.n	8010498 <_dtoa_r+0x188>
 8010528:	427b      	negs	r3, r7
 801052a:	930a      	str	r3, [sp, #40]	@ 0x28
 801052c:	2300      	movs	r3, #0
 801052e:	eba8 0807 	sub.w	r8, r8, r7
 8010532:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010534:	e7c4      	b.n	80104c0 <_dtoa_r+0x1b0>
 8010536:	2300      	movs	r3, #0
 8010538:	930b      	str	r3, [sp, #44]	@ 0x2c
 801053a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801053c:	2b00      	cmp	r3, #0
 801053e:	dc35      	bgt.n	80105ac <_dtoa_r+0x29c>
 8010540:	2301      	movs	r3, #1
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	9307      	str	r3, [sp, #28]
 8010546:	461a      	mov	r2, r3
 8010548:	920e      	str	r2, [sp, #56]	@ 0x38
 801054a:	e00b      	b.n	8010564 <_dtoa_r+0x254>
 801054c:	2301      	movs	r3, #1
 801054e:	e7f3      	b.n	8010538 <_dtoa_r+0x228>
 8010550:	2300      	movs	r3, #0
 8010552:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010556:	18fb      	adds	r3, r7, r3
 8010558:	9300      	str	r3, [sp, #0]
 801055a:	3301      	adds	r3, #1
 801055c:	2b01      	cmp	r3, #1
 801055e:	9307      	str	r3, [sp, #28]
 8010560:	bfb8      	it	lt
 8010562:	2301      	movlt	r3, #1
 8010564:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010568:	2100      	movs	r1, #0
 801056a:	2204      	movs	r2, #4
 801056c:	f102 0514 	add.w	r5, r2, #20
 8010570:	429d      	cmp	r5, r3
 8010572:	d91f      	bls.n	80105b4 <_dtoa_r+0x2a4>
 8010574:	6041      	str	r1, [r0, #4]
 8010576:	4658      	mov	r0, fp
 8010578:	f000 fcd8 	bl	8010f2c <_Balloc>
 801057c:	4682      	mov	sl, r0
 801057e:	2800      	cmp	r0, #0
 8010580:	d13c      	bne.n	80105fc <_dtoa_r+0x2ec>
 8010582:	4b1b      	ldr	r3, [pc, #108]	@ (80105f0 <_dtoa_r+0x2e0>)
 8010584:	4602      	mov	r2, r0
 8010586:	f240 11af 	movw	r1, #431	@ 0x1af
 801058a:	e6d8      	b.n	801033e <_dtoa_r+0x2e>
 801058c:	2301      	movs	r3, #1
 801058e:	e7e0      	b.n	8010552 <_dtoa_r+0x242>
 8010590:	2401      	movs	r4, #1
 8010592:	2300      	movs	r3, #0
 8010594:	9309      	str	r3, [sp, #36]	@ 0x24
 8010596:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010598:	f04f 33ff 	mov.w	r3, #4294967295
 801059c:	9300      	str	r3, [sp, #0]
 801059e:	9307      	str	r3, [sp, #28]
 80105a0:	2200      	movs	r2, #0
 80105a2:	2312      	movs	r3, #18
 80105a4:	e7d0      	b.n	8010548 <_dtoa_r+0x238>
 80105a6:	2301      	movs	r3, #1
 80105a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105aa:	e7f5      	b.n	8010598 <_dtoa_r+0x288>
 80105ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	9307      	str	r3, [sp, #28]
 80105b2:	e7d7      	b.n	8010564 <_dtoa_r+0x254>
 80105b4:	3101      	adds	r1, #1
 80105b6:	0052      	lsls	r2, r2, #1
 80105b8:	e7d8      	b.n	801056c <_dtoa_r+0x25c>
 80105ba:	bf00      	nop
 80105bc:	f3af 8000 	nop.w
 80105c0:	636f4361 	.word	0x636f4361
 80105c4:	3fd287a7 	.word	0x3fd287a7
 80105c8:	8b60c8b3 	.word	0x8b60c8b3
 80105cc:	3fc68a28 	.word	0x3fc68a28
 80105d0:	509f79fb 	.word	0x509f79fb
 80105d4:	3fd34413 	.word	0x3fd34413
 80105d8:	08017679 	.word	0x08017679
 80105dc:	08017690 	.word	0x08017690
 80105e0:	7ff00000 	.word	0x7ff00000
 80105e4:	08017649 	.word	0x08017649
 80105e8:	3ff80000 	.word	0x3ff80000
 80105ec:	08017788 	.word	0x08017788
 80105f0:	080176e8 	.word	0x080176e8
 80105f4:	08017675 	.word	0x08017675
 80105f8:	08017648 	.word	0x08017648
 80105fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010600:	6018      	str	r0, [r3, #0]
 8010602:	9b07      	ldr	r3, [sp, #28]
 8010604:	2b0e      	cmp	r3, #14
 8010606:	f200 80a4 	bhi.w	8010752 <_dtoa_r+0x442>
 801060a:	2c00      	cmp	r4, #0
 801060c:	f000 80a1 	beq.w	8010752 <_dtoa_r+0x442>
 8010610:	2f00      	cmp	r7, #0
 8010612:	dd33      	ble.n	801067c <_dtoa_r+0x36c>
 8010614:	4bad      	ldr	r3, [pc, #692]	@ (80108cc <_dtoa_r+0x5bc>)
 8010616:	f007 020f 	and.w	r2, r7, #15
 801061a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801061e:	ed93 7b00 	vldr	d7, [r3]
 8010622:	05f8      	lsls	r0, r7, #23
 8010624:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010628:	ea4f 1427 	mov.w	r4, r7, asr #4
 801062c:	d516      	bpl.n	801065c <_dtoa_r+0x34c>
 801062e:	4ba8      	ldr	r3, [pc, #672]	@ (80108d0 <_dtoa_r+0x5c0>)
 8010630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010638:	f7f0 f920 	bl	800087c <__aeabi_ddiv>
 801063c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010640:	f004 040f 	and.w	r4, r4, #15
 8010644:	2603      	movs	r6, #3
 8010646:	4da2      	ldr	r5, [pc, #648]	@ (80108d0 <_dtoa_r+0x5c0>)
 8010648:	b954      	cbnz	r4, 8010660 <_dtoa_r+0x350>
 801064a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801064e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010652:	f7f0 f913 	bl	800087c <__aeabi_ddiv>
 8010656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801065a:	e028      	b.n	80106ae <_dtoa_r+0x39e>
 801065c:	2602      	movs	r6, #2
 801065e:	e7f2      	b.n	8010646 <_dtoa_r+0x336>
 8010660:	07e1      	lsls	r1, r4, #31
 8010662:	d508      	bpl.n	8010676 <_dtoa_r+0x366>
 8010664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010668:	e9d5 2300 	ldrd	r2, r3, [r5]
 801066c:	f7ef ffdc 	bl	8000628 <__aeabi_dmul>
 8010670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010674:	3601      	adds	r6, #1
 8010676:	1064      	asrs	r4, r4, #1
 8010678:	3508      	adds	r5, #8
 801067a:	e7e5      	b.n	8010648 <_dtoa_r+0x338>
 801067c:	f000 80d2 	beq.w	8010824 <_dtoa_r+0x514>
 8010680:	427c      	negs	r4, r7
 8010682:	4b92      	ldr	r3, [pc, #584]	@ (80108cc <_dtoa_r+0x5bc>)
 8010684:	4d92      	ldr	r5, [pc, #584]	@ (80108d0 <_dtoa_r+0x5c0>)
 8010686:	f004 020f 	and.w	r2, r4, #15
 801068a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010696:	f7ef ffc7 	bl	8000628 <__aeabi_dmul>
 801069a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801069e:	1124      	asrs	r4, r4, #4
 80106a0:	2300      	movs	r3, #0
 80106a2:	2602      	movs	r6, #2
 80106a4:	2c00      	cmp	r4, #0
 80106a6:	f040 80b2 	bne.w	801080e <_dtoa_r+0x4fe>
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1d3      	bne.n	8010656 <_dtoa_r+0x346>
 80106ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80106b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f000 80b7 	beq.w	8010828 <_dtoa_r+0x518>
 80106ba:	4b86      	ldr	r3, [pc, #536]	@ (80108d4 <_dtoa_r+0x5c4>)
 80106bc:	2200      	movs	r2, #0
 80106be:	4620      	mov	r0, r4
 80106c0:	4629      	mov	r1, r5
 80106c2:	f7f0 fa23 	bl	8000b0c <__aeabi_dcmplt>
 80106c6:	2800      	cmp	r0, #0
 80106c8:	f000 80ae 	beq.w	8010828 <_dtoa_r+0x518>
 80106cc:	9b07      	ldr	r3, [sp, #28]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f000 80aa 	beq.w	8010828 <_dtoa_r+0x518>
 80106d4:	9b00      	ldr	r3, [sp, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	dd37      	ble.n	801074a <_dtoa_r+0x43a>
 80106da:	1e7b      	subs	r3, r7, #1
 80106dc:	9304      	str	r3, [sp, #16]
 80106de:	4620      	mov	r0, r4
 80106e0:	4b7d      	ldr	r3, [pc, #500]	@ (80108d8 <_dtoa_r+0x5c8>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	4629      	mov	r1, r5
 80106e6:	f7ef ff9f 	bl	8000628 <__aeabi_dmul>
 80106ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106ee:	9c00      	ldr	r4, [sp, #0]
 80106f0:	3601      	adds	r6, #1
 80106f2:	4630      	mov	r0, r6
 80106f4:	f7ef ff2e 	bl	8000554 <__aeabi_i2d>
 80106f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106fc:	f7ef ff94 	bl	8000628 <__aeabi_dmul>
 8010700:	4b76      	ldr	r3, [pc, #472]	@ (80108dc <_dtoa_r+0x5cc>)
 8010702:	2200      	movs	r2, #0
 8010704:	f7ef fdda 	bl	80002bc <__adddf3>
 8010708:	4605      	mov	r5, r0
 801070a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801070e:	2c00      	cmp	r4, #0
 8010710:	f040 808d 	bne.w	801082e <_dtoa_r+0x51e>
 8010714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010718:	4b71      	ldr	r3, [pc, #452]	@ (80108e0 <_dtoa_r+0x5d0>)
 801071a:	2200      	movs	r2, #0
 801071c:	f7ef fdcc 	bl	80002b8 <__aeabi_dsub>
 8010720:	4602      	mov	r2, r0
 8010722:	460b      	mov	r3, r1
 8010724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010728:	462a      	mov	r2, r5
 801072a:	4633      	mov	r3, r6
 801072c:	f7f0 fa0c 	bl	8000b48 <__aeabi_dcmpgt>
 8010730:	2800      	cmp	r0, #0
 8010732:	f040 828b 	bne.w	8010c4c <_dtoa_r+0x93c>
 8010736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801073a:	462a      	mov	r2, r5
 801073c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010740:	f7f0 f9e4 	bl	8000b0c <__aeabi_dcmplt>
 8010744:	2800      	cmp	r0, #0
 8010746:	f040 8128 	bne.w	801099a <_dtoa_r+0x68a>
 801074a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801074e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010754:	2b00      	cmp	r3, #0
 8010756:	f2c0 815a 	blt.w	8010a0e <_dtoa_r+0x6fe>
 801075a:	2f0e      	cmp	r7, #14
 801075c:	f300 8157 	bgt.w	8010a0e <_dtoa_r+0x6fe>
 8010760:	4b5a      	ldr	r3, [pc, #360]	@ (80108cc <_dtoa_r+0x5bc>)
 8010762:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010766:	ed93 7b00 	vldr	d7, [r3]
 801076a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801076c:	2b00      	cmp	r3, #0
 801076e:	ed8d 7b00 	vstr	d7, [sp]
 8010772:	da03      	bge.n	801077c <_dtoa_r+0x46c>
 8010774:	9b07      	ldr	r3, [sp, #28]
 8010776:	2b00      	cmp	r3, #0
 8010778:	f340 8101 	ble.w	801097e <_dtoa_r+0x66e>
 801077c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010780:	4656      	mov	r6, sl
 8010782:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010786:	4620      	mov	r0, r4
 8010788:	4629      	mov	r1, r5
 801078a:	f7f0 f877 	bl	800087c <__aeabi_ddiv>
 801078e:	f7f0 f9fb 	bl	8000b88 <__aeabi_d2iz>
 8010792:	4680      	mov	r8, r0
 8010794:	f7ef fede 	bl	8000554 <__aeabi_i2d>
 8010798:	e9dd 2300 	ldrd	r2, r3, [sp]
 801079c:	f7ef ff44 	bl	8000628 <__aeabi_dmul>
 80107a0:	4602      	mov	r2, r0
 80107a2:	460b      	mov	r3, r1
 80107a4:	4620      	mov	r0, r4
 80107a6:	4629      	mov	r1, r5
 80107a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80107ac:	f7ef fd84 	bl	80002b8 <__aeabi_dsub>
 80107b0:	f806 4b01 	strb.w	r4, [r6], #1
 80107b4:	9d07      	ldr	r5, [sp, #28]
 80107b6:	eba6 040a 	sub.w	r4, r6, sl
 80107ba:	42a5      	cmp	r5, r4
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	f040 8117 	bne.w	80109f2 <_dtoa_r+0x6e2>
 80107c4:	f7ef fd7a 	bl	80002bc <__adddf3>
 80107c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107cc:	4604      	mov	r4, r0
 80107ce:	460d      	mov	r5, r1
 80107d0:	f7f0 f9ba 	bl	8000b48 <__aeabi_dcmpgt>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	f040 80f9 	bne.w	80109cc <_dtoa_r+0x6bc>
 80107da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107de:	4620      	mov	r0, r4
 80107e0:	4629      	mov	r1, r5
 80107e2:	f7f0 f989 	bl	8000af8 <__aeabi_dcmpeq>
 80107e6:	b118      	cbz	r0, 80107f0 <_dtoa_r+0x4e0>
 80107e8:	f018 0f01 	tst.w	r8, #1
 80107ec:	f040 80ee 	bne.w	80109cc <_dtoa_r+0x6bc>
 80107f0:	4649      	mov	r1, r9
 80107f2:	4658      	mov	r0, fp
 80107f4:	f000 fbda 	bl	8010fac <_Bfree>
 80107f8:	2300      	movs	r3, #0
 80107fa:	7033      	strb	r3, [r6, #0]
 80107fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80107fe:	3701      	adds	r7, #1
 8010800:	601f      	str	r7, [r3, #0]
 8010802:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 831d 	beq.w	8010e44 <_dtoa_r+0xb34>
 801080a:	601e      	str	r6, [r3, #0]
 801080c:	e31a      	b.n	8010e44 <_dtoa_r+0xb34>
 801080e:	07e2      	lsls	r2, r4, #31
 8010810:	d505      	bpl.n	801081e <_dtoa_r+0x50e>
 8010812:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010816:	f7ef ff07 	bl	8000628 <__aeabi_dmul>
 801081a:	3601      	adds	r6, #1
 801081c:	2301      	movs	r3, #1
 801081e:	1064      	asrs	r4, r4, #1
 8010820:	3508      	adds	r5, #8
 8010822:	e73f      	b.n	80106a4 <_dtoa_r+0x394>
 8010824:	2602      	movs	r6, #2
 8010826:	e742      	b.n	80106ae <_dtoa_r+0x39e>
 8010828:	9c07      	ldr	r4, [sp, #28]
 801082a:	9704      	str	r7, [sp, #16]
 801082c:	e761      	b.n	80106f2 <_dtoa_r+0x3e2>
 801082e:	4b27      	ldr	r3, [pc, #156]	@ (80108cc <_dtoa_r+0x5bc>)
 8010830:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010836:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801083a:	4454      	add	r4, sl
 801083c:	2900      	cmp	r1, #0
 801083e:	d053      	beq.n	80108e8 <_dtoa_r+0x5d8>
 8010840:	4928      	ldr	r1, [pc, #160]	@ (80108e4 <_dtoa_r+0x5d4>)
 8010842:	2000      	movs	r0, #0
 8010844:	f7f0 f81a 	bl	800087c <__aeabi_ddiv>
 8010848:	4633      	mov	r3, r6
 801084a:	462a      	mov	r2, r5
 801084c:	f7ef fd34 	bl	80002b8 <__aeabi_dsub>
 8010850:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010854:	4656      	mov	r6, sl
 8010856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801085a:	f7f0 f995 	bl	8000b88 <__aeabi_d2iz>
 801085e:	4605      	mov	r5, r0
 8010860:	f7ef fe78 	bl	8000554 <__aeabi_i2d>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801086c:	f7ef fd24 	bl	80002b8 <__aeabi_dsub>
 8010870:	3530      	adds	r5, #48	@ 0x30
 8010872:	4602      	mov	r2, r0
 8010874:	460b      	mov	r3, r1
 8010876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801087a:	f806 5b01 	strb.w	r5, [r6], #1
 801087e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010882:	f7f0 f943 	bl	8000b0c <__aeabi_dcmplt>
 8010886:	2800      	cmp	r0, #0
 8010888:	d171      	bne.n	801096e <_dtoa_r+0x65e>
 801088a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801088e:	4911      	ldr	r1, [pc, #68]	@ (80108d4 <_dtoa_r+0x5c4>)
 8010890:	2000      	movs	r0, #0
 8010892:	f7ef fd11 	bl	80002b8 <__aeabi_dsub>
 8010896:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801089a:	f7f0 f937 	bl	8000b0c <__aeabi_dcmplt>
 801089e:	2800      	cmp	r0, #0
 80108a0:	f040 8095 	bne.w	80109ce <_dtoa_r+0x6be>
 80108a4:	42a6      	cmp	r6, r4
 80108a6:	f43f af50 	beq.w	801074a <_dtoa_r+0x43a>
 80108aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80108ae:	4b0a      	ldr	r3, [pc, #40]	@ (80108d8 <_dtoa_r+0x5c8>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	f7ef feb9 	bl	8000628 <__aeabi_dmul>
 80108b6:	4b08      	ldr	r3, [pc, #32]	@ (80108d8 <_dtoa_r+0x5c8>)
 80108b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80108bc:	2200      	movs	r2, #0
 80108be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108c2:	f7ef feb1 	bl	8000628 <__aeabi_dmul>
 80108c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108ca:	e7c4      	b.n	8010856 <_dtoa_r+0x546>
 80108cc:	08017788 	.word	0x08017788
 80108d0:	08017760 	.word	0x08017760
 80108d4:	3ff00000 	.word	0x3ff00000
 80108d8:	40240000 	.word	0x40240000
 80108dc:	401c0000 	.word	0x401c0000
 80108e0:	40140000 	.word	0x40140000
 80108e4:	3fe00000 	.word	0x3fe00000
 80108e8:	4631      	mov	r1, r6
 80108ea:	4628      	mov	r0, r5
 80108ec:	f7ef fe9c 	bl	8000628 <__aeabi_dmul>
 80108f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80108f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80108f6:	4656      	mov	r6, sl
 80108f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108fc:	f7f0 f944 	bl	8000b88 <__aeabi_d2iz>
 8010900:	4605      	mov	r5, r0
 8010902:	f7ef fe27 	bl	8000554 <__aeabi_i2d>
 8010906:	4602      	mov	r2, r0
 8010908:	460b      	mov	r3, r1
 801090a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801090e:	f7ef fcd3 	bl	80002b8 <__aeabi_dsub>
 8010912:	3530      	adds	r5, #48	@ 0x30
 8010914:	f806 5b01 	strb.w	r5, [r6], #1
 8010918:	4602      	mov	r2, r0
 801091a:	460b      	mov	r3, r1
 801091c:	42a6      	cmp	r6, r4
 801091e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010922:	f04f 0200 	mov.w	r2, #0
 8010926:	d124      	bne.n	8010972 <_dtoa_r+0x662>
 8010928:	4bac      	ldr	r3, [pc, #688]	@ (8010bdc <_dtoa_r+0x8cc>)
 801092a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801092e:	f7ef fcc5 	bl	80002bc <__adddf3>
 8010932:	4602      	mov	r2, r0
 8010934:	460b      	mov	r3, r1
 8010936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801093a:	f7f0 f905 	bl	8000b48 <__aeabi_dcmpgt>
 801093e:	2800      	cmp	r0, #0
 8010940:	d145      	bne.n	80109ce <_dtoa_r+0x6be>
 8010942:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010946:	49a5      	ldr	r1, [pc, #660]	@ (8010bdc <_dtoa_r+0x8cc>)
 8010948:	2000      	movs	r0, #0
 801094a:	f7ef fcb5 	bl	80002b8 <__aeabi_dsub>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010956:	f7f0 f8d9 	bl	8000b0c <__aeabi_dcmplt>
 801095a:	2800      	cmp	r0, #0
 801095c:	f43f aef5 	beq.w	801074a <_dtoa_r+0x43a>
 8010960:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010962:	1e73      	subs	r3, r6, #1
 8010964:	9315      	str	r3, [sp, #84]	@ 0x54
 8010966:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801096a:	2b30      	cmp	r3, #48	@ 0x30
 801096c:	d0f8      	beq.n	8010960 <_dtoa_r+0x650>
 801096e:	9f04      	ldr	r7, [sp, #16]
 8010970:	e73e      	b.n	80107f0 <_dtoa_r+0x4e0>
 8010972:	4b9b      	ldr	r3, [pc, #620]	@ (8010be0 <_dtoa_r+0x8d0>)
 8010974:	f7ef fe58 	bl	8000628 <__aeabi_dmul>
 8010978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801097c:	e7bc      	b.n	80108f8 <_dtoa_r+0x5e8>
 801097e:	d10c      	bne.n	801099a <_dtoa_r+0x68a>
 8010980:	4b98      	ldr	r3, [pc, #608]	@ (8010be4 <_dtoa_r+0x8d4>)
 8010982:	2200      	movs	r2, #0
 8010984:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010988:	f7ef fe4e 	bl	8000628 <__aeabi_dmul>
 801098c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010990:	f7f0 f8d0 	bl	8000b34 <__aeabi_dcmpge>
 8010994:	2800      	cmp	r0, #0
 8010996:	f000 8157 	beq.w	8010c48 <_dtoa_r+0x938>
 801099a:	2400      	movs	r4, #0
 801099c:	4625      	mov	r5, r4
 801099e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109a0:	43db      	mvns	r3, r3
 80109a2:	9304      	str	r3, [sp, #16]
 80109a4:	4656      	mov	r6, sl
 80109a6:	2700      	movs	r7, #0
 80109a8:	4621      	mov	r1, r4
 80109aa:	4658      	mov	r0, fp
 80109ac:	f000 fafe 	bl	8010fac <_Bfree>
 80109b0:	2d00      	cmp	r5, #0
 80109b2:	d0dc      	beq.n	801096e <_dtoa_r+0x65e>
 80109b4:	b12f      	cbz	r7, 80109c2 <_dtoa_r+0x6b2>
 80109b6:	42af      	cmp	r7, r5
 80109b8:	d003      	beq.n	80109c2 <_dtoa_r+0x6b2>
 80109ba:	4639      	mov	r1, r7
 80109bc:	4658      	mov	r0, fp
 80109be:	f000 faf5 	bl	8010fac <_Bfree>
 80109c2:	4629      	mov	r1, r5
 80109c4:	4658      	mov	r0, fp
 80109c6:	f000 faf1 	bl	8010fac <_Bfree>
 80109ca:	e7d0      	b.n	801096e <_dtoa_r+0x65e>
 80109cc:	9704      	str	r7, [sp, #16]
 80109ce:	4633      	mov	r3, r6
 80109d0:	461e      	mov	r6, r3
 80109d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109d6:	2a39      	cmp	r2, #57	@ 0x39
 80109d8:	d107      	bne.n	80109ea <_dtoa_r+0x6da>
 80109da:	459a      	cmp	sl, r3
 80109dc:	d1f8      	bne.n	80109d0 <_dtoa_r+0x6c0>
 80109de:	9a04      	ldr	r2, [sp, #16]
 80109e0:	3201      	adds	r2, #1
 80109e2:	9204      	str	r2, [sp, #16]
 80109e4:	2230      	movs	r2, #48	@ 0x30
 80109e6:	f88a 2000 	strb.w	r2, [sl]
 80109ea:	781a      	ldrb	r2, [r3, #0]
 80109ec:	3201      	adds	r2, #1
 80109ee:	701a      	strb	r2, [r3, #0]
 80109f0:	e7bd      	b.n	801096e <_dtoa_r+0x65e>
 80109f2:	4b7b      	ldr	r3, [pc, #492]	@ (8010be0 <_dtoa_r+0x8d0>)
 80109f4:	2200      	movs	r2, #0
 80109f6:	f7ef fe17 	bl	8000628 <__aeabi_dmul>
 80109fa:	2200      	movs	r2, #0
 80109fc:	2300      	movs	r3, #0
 80109fe:	4604      	mov	r4, r0
 8010a00:	460d      	mov	r5, r1
 8010a02:	f7f0 f879 	bl	8000af8 <__aeabi_dcmpeq>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	f43f aebb 	beq.w	8010782 <_dtoa_r+0x472>
 8010a0c:	e6f0      	b.n	80107f0 <_dtoa_r+0x4e0>
 8010a0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010a10:	2a00      	cmp	r2, #0
 8010a12:	f000 80db 	beq.w	8010bcc <_dtoa_r+0x8bc>
 8010a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a18:	2a01      	cmp	r2, #1
 8010a1a:	f300 80bf 	bgt.w	8010b9c <_dtoa_r+0x88c>
 8010a1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010a20:	2a00      	cmp	r2, #0
 8010a22:	f000 80b7 	beq.w	8010b94 <_dtoa_r+0x884>
 8010a26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010a2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010a2c:	4646      	mov	r6, r8
 8010a2e:	9a08      	ldr	r2, [sp, #32]
 8010a30:	2101      	movs	r1, #1
 8010a32:	441a      	add	r2, r3
 8010a34:	4658      	mov	r0, fp
 8010a36:	4498      	add	r8, r3
 8010a38:	9208      	str	r2, [sp, #32]
 8010a3a:	f000 fb6b 	bl	8011114 <__i2b>
 8010a3e:	4605      	mov	r5, r0
 8010a40:	b15e      	cbz	r6, 8010a5a <_dtoa_r+0x74a>
 8010a42:	9b08      	ldr	r3, [sp, #32]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	dd08      	ble.n	8010a5a <_dtoa_r+0x74a>
 8010a48:	42b3      	cmp	r3, r6
 8010a4a:	9a08      	ldr	r2, [sp, #32]
 8010a4c:	bfa8      	it	ge
 8010a4e:	4633      	movge	r3, r6
 8010a50:	eba8 0803 	sub.w	r8, r8, r3
 8010a54:	1af6      	subs	r6, r6, r3
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	9308      	str	r3, [sp, #32]
 8010a5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a5c:	b1f3      	cbz	r3, 8010a9c <_dtoa_r+0x78c>
 8010a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f000 80b7 	beq.w	8010bd4 <_dtoa_r+0x8c4>
 8010a66:	b18c      	cbz	r4, 8010a8c <_dtoa_r+0x77c>
 8010a68:	4629      	mov	r1, r5
 8010a6a:	4622      	mov	r2, r4
 8010a6c:	4658      	mov	r0, fp
 8010a6e:	f000 fc11 	bl	8011294 <__pow5mult>
 8010a72:	464a      	mov	r2, r9
 8010a74:	4601      	mov	r1, r0
 8010a76:	4605      	mov	r5, r0
 8010a78:	4658      	mov	r0, fp
 8010a7a:	f000 fb61 	bl	8011140 <__multiply>
 8010a7e:	4649      	mov	r1, r9
 8010a80:	9004      	str	r0, [sp, #16]
 8010a82:	4658      	mov	r0, fp
 8010a84:	f000 fa92 	bl	8010fac <_Bfree>
 8010a88:	9b04      	ldr	r3, [sp, #16]
 8010a8a:	4699      	mov	r9, r3
 8010a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a8e:	1b1a      	subs	r2, r3, r4
 8010a90:	d004      	beq.n	8010a9c <_dtoa_r+0x78c>
 8010a92:	4649      	mov	r1, r9
 8010a94:	4658      	mov	r0, fp
 8010a96:	f000 fbfd 	bl	8011294 <__pow5mult>
 8010a9a:	4681      	mov	r9, r0
 8010a9c:	2101      	movs	r1, #1
 8010a9e:	4658      	mov	r0, fp
 8010aa0:	f000 fb38 	bl	8011114 <__i2b>
 8010aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aa6:	4604      	mov	r4, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	f000 81cf 	beq.w	8010e4c <_dtoa_r+0xb3c>
 8010aae:	461a      	mov	r2, r3
 8010ab0:	4601      	mov	r1, r0
 8010ab2:	4658      	mov	r0, fp
 8010ab4:	f000 fbee 	bl	8011294 <__pow5mult>
 8010ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	4604      	mov	r4, r0
 8010abe:	f300 8095 	bgt.w	8010bec <_dtoa_r+0x8dc>
 8010ac2:	9b02      	ldr	r3, [sp, #8]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f040 8087 	bne.w	8010bd8 <_dtoa_r+0x8c8>
 8010aca:	9b03      	ldr	r3, [sp, #12]
 8010acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f040 8089 	bne.w	8010be8 <_dtoa_r+0x8d8>
 8010ad6:	9b03      	ldr	r3, [sp, #12]
 8010ad8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010adc:	0d1b      	lsrs	r3, r3, #20
 8010ade:	051b      	lsls	r3, r3, #20
 8010ae0:	b12b      	cbz	r3, 8010aee <_dtoa_r+0x7de>
 8010ae2:	9b08      	ldr	r3, [sp, #32]
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	9308      	str	r3, [sp, #32]
 8010ae8:	f108 0801 	add.w	r8, r8, #1
 8010aec:	2301      	movs	r3, #1
 8010aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8010af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f000 81b0 	beq.w	8010e58 <_dtoa_r+0xb48>
 8010af8:	6923      	ldr	r3, [r4, #16]
 8010afa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010afe:	6918      	ldr	r0, [r3, #16]
 8010b00:	f000 fabc 	bl	801107c <__hi0bits>
 8010b04:	f1c0 0020 	rsb	r0, r0, #32
 8010b08:	9b08      	ldr	r3, [sp, #32]
 8010b0a:	4418      	add	r0, r3
 8010b0c:	f010 001f 	ands.w	r0, r0, #31
 8010b10:	d077      	beq.n	8010c02 <_dtoa_r+0x8f2>
 8010b12:	f1c0 0320 	rsb	r3, r0, #32
 8010b16:	2b04      	cmp	r3, #4
 8010b18:	dd6b      	ble.n	8010bf2 <_dtoa_r+0x8e2>
 8010b1a:	9b08      	ldr	r3, [sp, #32]
 8010b1c:	f1c0 001c 	rsb	r0, r0, #28
 8010b20:	4403      	add	r3, r0
 8010b22:	4480      	add	r8, r0
 8010b24:	4406      	add	r6, r0
 8010b26:	9308      	str	r3, [sp, #32]
 8010b28:	f1b8 0f00 	cmp.w	r8, #0
 8010b2c:	dd05      	ble.n	8010b3a <_dtoa_r+0x82a>
 8010b2e:	4649      	mov	r1, r9
 8010b30:	4642      	mov	r2, r8
 8010b32:	4658      	mov	r0, fp
 8010b34:	f000 fc08 	bl	8011348 <__lshift>
 8010b38:	4681      	mov	r9, r0
 8010b3a:	9b08      	ldr	r3, [sp, #32]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	dd05      	ble.n	8010b4c <_dtoa_r+0x83c>
 8010b40:	4621      	mov	r1, r4
 8010b42:	461a      	mov	r2, r3
 8010b44:	4658      	mov	r0, fp
 8010b46:	f000 fbff 	bl	8011348 <__lshift>
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d059      	beq.n	8010c06 <_dtoa_r+0x8f6>
 8010b52:	4621      	mov	r1, r4
 8010b54:	4648      	mov	r0, r9
 8010b56:	f000 fc63 	bl	8011420 <__mcmp>
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	da53      	bge.n	8010c06 <_dtoa_r+0x8f6>
 8010b5e:	1e7b      	subs	r3, r7, #1
 8010b60:	9304      	str	r3, [sp, #16]
 8010b62:	4649      	mov	r1, r9
 8010b64:	2300      	movs	r3, #0
 8010b66:	220a      	movs	r2, #10
 8010b68:	4658      	mov	r0, fp
 8010b6a:	f000 fa41 	bl	8010ff0 <__multadd>
 8010b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b70:	4681      	mov	r9, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f000 8172 	beq.w	8010e5c <_dtoa_r+0xb4c>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	4629      	mov	r1, r5
 8010b7c:	220a      	movs	r2, #10
 8010b7e:	4658      	mov	r0, fp
 8010b80:	f000 fa36 	bl	8010ff0 <__multadd>
 8010b84:	9b00      	ldr	r3, [sp, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	4605      	mov	r5, r0
 8010b8a:	dc67      	bgt.n	8010c5c <_dtoa_r+0x94c>
 8010b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b8e:	2b02      	cmp	r3, #2
 8010b90:	dc41      	bgt.n	8010c16 <_dtoa_r+0x906>
 8010b92:	e063      	b.n	8010c5c <_dtoa_r+0x94c>
 8010b94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010b96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010b9a:	e746      	b.n	8010a2a <_dtoa_r+0x71a>
 8010b9c:	9b07      	ldr	r3, [sp, #28]
 8010b9e:	1e5c      	subs	r4, r3, #1
 8010ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ba2:	42a3      	cmp	r3, r4
 8010ba4:	bfbf      	itttt	lt
 8010ba6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010ba8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010baa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010bac:	1ae3      	sublt	r3, r4, r3
 8010bae:	bfb4      	ite	lt
 8010bb0:	18d2      	addlt	r2, r2, r3
 8010bb2:	1b1c      	subge	r4, r3, r4
 8010bb4:	9b07      	ldr	r3, [sp, #28]
 8010bb6:	bfbc      	itt	lt
 8010bb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010bba:	2400      	movlt	r4, #0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	bfb5      	itete	lt
 8010bc0:	eba8 0603 	sublt.w	r6, r8, r3
 8010bc4:	9b07      	ldrge	r3, [sp, #28]
 8010bc6:	2300      	movlt	r3, #0
 8010bc8:	4646      	movge	r6, r8
 8010bca:	e730      	b.n	8010a2e <_dtoa_r+0x71e>
 8010bcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010bce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010bd0:	4646      	mov	r6, r8
 8010bd2:	e735      	b.n	8010a40 <_dtoa_r+0x730>
 8010bd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bd6:	e75c      	b.n	8010a92 <_dtoa_r+0x782>
 8010bd8:	2300      	movs	r3, #0
 8010bda:	e788      	b.n	8010aee <_dtoa_r+0x7de>
 8010bdc:	3fe00000 	.word	0x3fe00000
 8010be0:	40240000 	.word	0x40240000
 8010be4:	40140000 	.word	0x40140000
 8010be8:	9b02      	ldr	r3, [sp, #8]
 8010bea:	e780      	b.n	8010aee <_dtoa_r+0x7de>
 8010bec:	2300      	movs	r3, #0
 8010bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bf0:	e782      	b.n	8010af8 <_dtoa_r+0x7e8>
 8010bf2:	d099      	beq.n	8010b28 <_dtoa_r+0x818>
 8010bf4:	9a08      	ldr	r2, [sp, #32]
 8010bf6:	331c      	adds	r3, #28
 8010bf8:	441a      	add	r2, r3
 8010bfa:	4498      	add	r8, r3
 8010bfc:	441e      	add	r6, r3
 8010bfe:	9208      	str	r2, [sp, #32]
 8010c00:	e792      	b.n	8010b28 <_dtoa_r+0x818>
 8010c02:	4603      	mov	r3, r0
 8010c04:	e7f6      	b.n	8010bf4 <_dtoa_r+0x8e4>
 8010c06:	9b07      	ldr	r3, [sp, #28]
 8010c08:	9704      	str	r7, [sp, #16]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	dc20      	bgt.n	8010c50 <_dtoa_r+0x940>
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c12:	2b02      	cmp	r3, #2
 8010c14:	dd1e      	ble.n	8010c54 <_dtoa_r+0x944>
 8010c16:	9b00      	ldr	r3, [sp, #0]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f47f aec0 	bne.w	801099e <_dtoa_r+0x68e>
 8010c1e:	4621      	mov	r1, r4
 8010c20:	2205      	movs	r2, #5
 8010c22:	4658      	mov	r0, fp
 8010c24:	f000 f9e4 	bl	8010ff0 <__multadd>
 8010c28:	4601      	mov	r1, r0
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	4648      	mov	r0, r9
 8010c2e:	f000 fbf7 	bl	8011420 <__mcmp>
 8010c32:	2800      	cmp	r0, #0
 8010c34:	f77f aeb3 	ble.w	801099e <_dtoa_r+0x68e>
 8010c38:	4656      	mov	r6, sl
 8010c3a:	2331      	movs	r3, #49	@ 0x31
 8010c3c:	f806 3b01 	strb.w	r3, [r6], #1
 8010c40:	9b04      	ldr	r3, [sp, #16]
 8010c42:	3301      	adds	r3, #1
 8010c44:	9304      	str	r3, [sp, #16]
 8010c46:	e6ae      	b.n	80109a6 <_dtoa_r+0x696>
 8010c48:	9c07      	ldr	r4, [sp, #28]
 8010c4a:	9704      	str	r7, [sp, #16]
 8010c4c:	4625      	mov	r5, r4
 8010c4e:	e7f3      	b.n	8010c38 <_dtoa_r+0x928>
 8010c50:	9b07      	ldr	r3, [sp, #28]
 8010c52:	9300      	str	r3, [sp, #0]
 8010c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	f000 8104 	beq.w	8010e64 <_dtoa_r+0xb54>
 8010c5c:	2e00      	cmp	r6, #0
 8010c5e:	dd05      	ble.n	8010c6c <_dtoa_r+0x95c>
 8010c60:	4629      	mov	r1, r5
 8010c62:	4632      	mov	r2, r6
 8010c64:	4658      	mov	r0, fp
 8010c66:	f000 fb6f 	bl	8011348 <__lshift>
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d05a      	beq.n	8010d28 <_dtoa_r+0xa18>
 8010c72:	6869      	ldr	r1, [r5, #4]
 8010c74:	4658      	mov	r0, fp
 8010c76:	f000 f959 	bl	8010f2c <_Balloc>
 8010c7a:	4606      	mov	r6, r0
 8010c7c:	b928      	cbnz	r0, 8010c8a <_dtoa_r+0x97a>
 8010c7e:	4b84      	ldr	r3, [pc, #528]	@ (8010e90 <_dtoa_r+0xb80>)
 8010c80:	4602      	mov	r2, r0
 8010c82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010c86:	f7ff bb5a 	b.w	801033e <_dtoa_r+0x2e>
 8010c8a:	692a      	ldr	r2, [r5, #16]
 8010c8c:	3202      	adds	r2, #2
 8010c8e:	0092      	lsls	r2, r2, #2
 8010c90:	f105 010c 	add.w	r1, r5, #12
 8010c94:	300c      	adds	r0, #12
 8010c96:	f7ff faa2 	bl	80101de <memcpy>
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	4631      	mov	r1, r6
 8010c9e:	4658      	mov	r0, fp
 8010ca0:	f000 fb52 	bl	8011348 <__lshift>
 8010ca4:	f10a 0301 	add.w	r3, sl, #1
 8010ca8:	9307      	str	r3, [sp, #28]
 8010caa:	9b00      	ldr	r3, [sp, #0]
 8010cac:	4453      	add	r3, sl
 8010cae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010cb0:	9b02      	ldr	r3, [sp, #8]
 8010cb2:	f003 0301 	and.w	r3, r3, #1
 8010cb6:	462f      	mov	r7, r5
 8010cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cba:	4605      	mov	r5, r0
 8010cbc:	9b07      	ldr	r3, [sp, #28]
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	3b01      	subs	r3, #1
 8010cc2:	4648      	mov	r0, r9
 8010cc4:	9300      	str	r3, [sp, #0]
 8010cc6:	f7ff fa98 	bl	80101fa <quorem>
 8010cca:	4639      	mov	r1, r7
 8010ccc:	9002      	str	r0, [sp, #8]
 8010cce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010cd2:	4648      	mov	r0, r9
 8010cd4:	f000 fba4 	bl	8011420 <__mcmp>
 8010cd8:	462a      	mov	r2, r5
 8010cda:	9008      	str	r0, [sp, #32]
 8010cdc:	4621      	mov	r1, r4
 8010cde:	4658      	mov	r0, fp
 8010ce0:	f000 fbba 	bl	8011458 <__mdiff>
 8010ce4:	68c2      	ldr	r2, [r0, #12]
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	bb02      	cbnz	r2, 8010d2c <_dtoa_r+0xa1c>
 8010cea:	4601      	mov	r1, r0
 8010cec:	4648      	mov	r0, r9
 8010cee:	f000 fb97 	bl	8011420 <__mcmp>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	4631      	mov	r1, r6
 8010cf6:	4658      	mov	r0, fp
 8010cf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8010cfa:	f000 f957 	bl	8010fac <_Bfree>
 8010cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d02:	9e07      	ldr	r6, [sp, #28]
 8010d04:	ea43 0102 	orr.w	r1, r3, r2
 8010d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d0a:	4319      	orrs	r1, r3
 8010d0c:	d110      	bne.n	8010d30 <_dtoa_r+0xa20>
 8010d0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010d12:	d029      	beq.n	8010d68 <_dtoa_r+0xa58>
 8010d14:	9b08      	ldr	r3, [sp, #32]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	dd02      	ble.n	8010d20 <_dtoa_r+0xa10>
 8010d1a:	9b02      	ldr	r3, [sp, #8]
 8010d1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010d20:	9b00      	ldr	r3, [sp, #0]
 8010d22:	f883 8000 	strb.w	r8, [r3]
 8010d26:	e63f      	b.n	80109a8 <_dtoa_r+0x698>
 8010d28:	4628      	mov	r0, r5
 8010d2a:	e7bb      	b.n	8010ca4 <_dtoa_r+0x994>
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	e7e1      	b.n	8010cf4 <_dtoa_r+0x9e4>
 8010d30:	9b08      	ldr	r3, [sp, #32]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	db04      	blt.n	8010d40 <_dtoa_r+0xa30>
 8010d36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d38:	430b      	orrs	r3, r1
 8010d3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010d3c:	430b      	orrs	r3, r1
 8010d3e:	d120      	bne.n	8010d82 <_dtoa_r+0xa72>
 8010d40:	2a00      	cmp	r2, #0
 8010d42:	dded      	ble.n	8010d20 <_dtoa_r+0xa10>
 8010d44:	4649      	mov	r1, r9
 8010d46:	2201      	movs	r2, #1
 8010d48:	4658      	mov	r0, fp
 8010d4a:	f000 fafd 	bl	8011348 <__lshift>
 8010d4e:	4621      	mov	r1, r4
 8010d50:	4681      	mov	r9, r0
 8010d52:	f000 fb65 	bl	8011420 <__mcmp>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	dc03      	bgt.n	8010d62 <_dtoa_r+0xa52>
 8010d5a:	d1e1      	bne.n	8010d20 <_dtoa_r+0xa10>
 8010d5c:	f018 0f01 	tst.w	r8, #1
 8010d60:	d0de      	beq.n	8010d20 <_dtoa_r+0xa10>
 8010d62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010d66:	d1d8      	bne.n	8010d1a <_dtoa_r+0xa0a>
 8010d68:	9a00      	ldr	r2, [sp, #0]
 8010d6a:	2339      	movs	r3, #57	@ 0x39
 8010d6c:	7013      	strb	r3, [r2, #0]
 8010d6e:	4633      	mov	r3, r6
 8010d70:	461e      	mov	r6, r3
 8010d72:	3b01      	subs	r3, #1
 8010d74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010d78:	2a39      	cmp	r2, #57	@ 0x39
 8010d7a:	d052      	beq.n	8010e22 <_dtoa_r+0xb12>
 8010d7c:	3201      	adds	r2, #1
 8010d7e:	701a      	strb	r2, [r3, #0]
 8010d80:	e612      	b.n	80109a8 <_dtoa_r+0x698>
 8010d82:	2a00      	cmp	r2, #0
 8010d84:	dd07      	ble.n	8010d96 <_dtoa_r+0xa86>
 8010d86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010d8a:	d0ed      	beq.n	8010d68 <_dtoa_r+0xa58>
 8010d8c:	9a00      	ldr	r2, [sp, #0]
 8010d8e:	f108 0301 	add.w	r3, r8, #1
 8010d92:	7013      	strb	r3, [r2, #0]
 8010d94:	e608      	b.n	80109a8 <_dtoa_r+0x698>
 8010d96:	9b07      	ldr	r3, [sp, #28]
 8010d98:	9a07      	ldr	r2, [sp, #28]
 8010d9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d028      	beq.n	8010df6 <_dtoa_r+0xae6>
 8010da4:	4649      	mov	r1, r9
 8010da6:	2300      	movs	r3, #0
 8010da8:	220a      	movs	r2, #10
 8010daa:	4658      	mov	r0, fp
 8010dac:	f000 f920 	bl	8010ff0 <__multadd>
 8010db0:	42af      	cmp	r7, r5
 8010db2:	4681      	mov	r9, r0
 8010db4:	f04f 0300 	mov.w	r3, #0
 8010db8:	f04f 020a 	mov.w	r2, #10
 8010dbc:	4639      	mov	r1, r7
 8010dbe:	4658      	mov	r0, fp
 8010dc0:	d107      	bne.n	8010dd2 <_dtoa_r+0xac2>
 8010dc2:	f000 f915 	bl	8010ff0 <__multadd>
 8010dc6:	4607      	mov	r7, r0
 8010dc8:	4605      	mov	r5, r0
 8010dca:	9b07      	ldr	r3, [sp, #28]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	9307      	str	r3, [sp, #28]
 8010dd0:	e774      	b.n	8010cbc <_dtoa_r+0x9ac>
 8010dd2:	f000 f90d 	bl	8010ff0 <__multadd>
 8010dd6:	4629      	mov	r1, r5
 8010dd8:	4607      	mov	r7, r0
 8010dda:	2300      	movs	r3, #0
 8010ddc:	220a      	movs	r2, #10
 8010dde:	4658      	mov	r0, fp
 8010de0:	f000 f906 	bl	8010ff0 <__multadd>
 8010de4:	4605      	mov	r5, r0
 8010de6:	e7f0      	b.n	8010dca <_dtoa_r+0xaba>
 8010de8:	9b00      	ldr	r3, [sp, #0]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	bfcc      	ite	gt
 8010dee:	461e      	movgt	r6, r3
 8010df0:	2601      	movle	r6, #1
 8010df2:	4456      	add	r6, sl
 8010df4:	2700      	movs	r7, #0
 8010df6:	4649      	mov	r1, r9
 8010df8:	2201      	movs	r2, #1
 8010dfa:	4658      	mov	r0, fp
 8010dfc:	f000 faa4 	bl	8011348 <__lshift>
 8010e00:	4621      	mov	r1, r4
 8010e02:	4681      	mov	r9, r0
 8010e04:	f000 fb0c 	bl	8011420 <__mcmp>
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	dcb0      	bgt.n	8010d6e <_dtoa_r+0xa5e>
 8010e0c:	d102      	bne.n	8010e14 <_dtoa_r+0xb04>
 8010e0e:	f018 0f01 	tst.w	r8, #1
 8010e12:	d1ac      	bne.n	8010d6e <_dtoa_r+0xa5e>
 8010e14:	4633      	mov	r3, r6
 8010e16:	461e      	mov	r6, r3
 8010e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e1c:	2a30      	cmp	r2, #48	@ 0x30
 8010e1e:	d0fa      	beq.n	8010e16 <_dtoa_r+0xb06>
 8010e20:	e5c2      	b.n	80109a8 <_dtoa_r+0x698>
 8010e22:	459a      	cmp	sl, r3
 8010e24:	d1a4      	bne.n	8010d70 <_dtoa_r+0xa60>
 8010e26:	9b04      	ldr	r3, [sp, #16]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	9304      	str	r3, [sp, #16]
 8010e2c:	2331      	movs	r3, #49	@ 0x31
 8010e2e:	f88a 3000 	strb.w	r3, [sl]
 8010e32:	e5b9      	b.n	80109a8 <_dtoa_r+0x698>
 8010e34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010e94 <_dtoa_r+0xb84>
 8010e3a:	b11b      	cbz	r3, 8010e44 <_dtoa_r+0xb34>
 8010e3c:	f10a 0308 	add.w	r3, sl, #8
 8010e40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010e42:	6013      	str	r3, [r2, #0]
 8010e44:	4650      	mov	r0, sl
 8010e46:	b019      	add	sp, #100	@ 0x64
 8010e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	f77f ae37 	ble.w	8010ac2 <_dtoa_r+0x7b2>
 8010e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e58:	2001      	movs	r0, #1
 8010e5a:	e655      	b.n	8010b08 <_dtoa_r+0x7f8>
 8010e5c:	9b00      	ldr	r3, [sp, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f77f aed6 	ble.w	8010c10 <_dtoa_r+0x900>
 8010e64:	4656      	mov	r6, sl
 8010e66:	4621      	mov	r1, r4
 8010e68:	4648      	mov	r0, r9
 8010e6a:	f7ff f9c6 	bl	80101fa <quorem>
 8010e6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010e72:	f806 8b01 	strb.w	r8, [r6], #1
 8010e76:	9b00      	ldr	r3, [sp, #0]
 8010e78:	eba6 020a 	sub.w	r2, r6, sl
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	ddb3      	ble.n	8010de8 <_dtoa_r+0xad8>
 8010e80:	4649      	mov	r1, r9
 8010e82:	2300      	movs	r3, #0
 8010e84:	220a      	movs	r2, #10
 8010e86:	4658      	mov	r0, fp
 8010e88:	f000 f8b2 	bl	8010ff0 <__multadd>
 8010e8c:	4681      	mov	r9, r0
 8010e8e:	e7ea      	b.n	8010e66 <_dtoa_r+0xb56>
 8010e90:	080176e8 	.word	0x080176e8
 8010e94:	0801766c 	.word	0x0801766c

08010e98 <_free_r>:
 8010e98:	b538      	push	{r3, r4, r5, lr}
 8010e9a:	4605      	mov	r5, r0
 8010e9c:	2900      	cmp	r1, #0
 8010e9e:	d041      	beq.n	8010f24 <_free_r+0x8c>
 8010ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ea4:	1f0c      	subs	r4, r1, #4
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	bfb8      	it	lt
 8010eaa:	18e4      	addlt	r4, r4, r3
 8010eac:	f7fe fb6a 	bl	800f584 <__malloc_lock>
 8010eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8010f28 <_free_r+0x90>)
 8010eb2:	6813      	ldr	r3, [r2, #0]
 8010eb4:	b933      	cbnz	r3, 8010ec4 <_free_r+0x2c>
 8010eb6:	6063      	str	r3, [r4, #4]
 8010eb8:	6014      	str	r4, [r2, #0]
 8010eba:	4628      	mov	r0, r5
 8010ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ec0:	f7fe bb66 	b.w	800f590 <__malloc_unlock>
 8010ec4:	42a3      	cmp	r3, r4
 8010ec6:	d908      	bls.n	8010eda <_free_r+0x42>
 8010ec8:	6820      	ldr	r0, [r4, #0]
 8010eca:	1821      	adds	r1, r4, r0
 8010ecc:	428b      	cmp	r3, r1
 8010ece:	bf01      	itttt	eq
 8010ed0:	6819      	ldreq	r1, [r3, #0]
 8010ed2:	685b      	ldreq	r3, [r3, #4]
 8010ed4:	1809      	addeq	r1, r1, r0
 8010ed6:	6021      	streq	r1, [r4, #0]
 8010ed8:	e7ed      	b.n	8010eb6 <_free_r+0x1e>
 8010eda:	461a      	mov	r2, r3
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	b10b      	cbz	r3, 8010ee4 <_free_r+0x4c>
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	d9fa      	bls.n	8010eda <_free_r+0x42>
 8010ee4:	6811      	ldr	r1, [r2, #0]
 8010ee6:	1850      	adds	r0, r2, r1
 8010ee8:	42a0      	cmp	r0, r4
 8010eea:	d10b      	bne.n	8010f04 <_free_r+0x6c>
 8010eec:	6820      	ldr	r0, [r4, #0]
 8010eee:	4401      	add	r1, r0
 8010ef0:	1850      	adds	r0, r2, r1
 8010ef2:	4283      	cmp	r3, r0
 8010ef4:	6011      	str	r1, [r2, #0]
 8010ef6:	d1e0      	bne.n	8010eba <_free_r+0x22>
 8010ef8:	6818      	ldr	r0, [r3, #0]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	6053      	str	r3, [r2, #4]
 8010efe:	4408      	add	r0, r1
 8010f00:	6010      	str	r0, [r2, #0]
 8010f02:	e7da      	b.n	8010eba <_free_r+0x22>
 8010f04:	d902      	bls.n	8010f0c <_free_r+0x74>
 8010f06:	230c      	movs	r3, #12
 8010f08:	602b      	str	r3, [r5, #0]
 8010f0a:	e7d6      	b.n	8010eba <_free_r+0x22>
 8010f0c:	6820      	ldr	r0, [r4, #0]
 8010f0e:	1821      	adds	r1, r4, r0
 8010f10:	428b      	cmp	r3, r1
 8010f12:	bf04      	itt	eq
 8010f14:	6819      	ldreq	r1, [r3, #0]
 8010f16:	685b      	ldreq	r3, [r3, #4]
 8010f18:	6063      	str	r3, [r4, #4]
 8010f1a:	bf04      	itt	eq
 8010f1c:	1809      	addeq	r1, r1, r0
 8010f1e:	6021      	streq	r1, [r4, #0]
 8010f20:	6054      	str	r4, [r2, #4]
 8010f22:	e7ca      	b.n	8010eba <_free_r+0x22>
 8010f24:	bd38      	pop	{r3, r4, r5, pc}
 8010f26:	bf00      	nop
 8010f28:	20000aac 	.word	0x20000aac

08010f2c <_Balloc>:
 8010f2c:	b570      	push	{r4, r5, r6, lr}
 8010f2e:	69c6      	ldr	r6, [r0, #28]
 8010f30:	4604      	mov	r4, r0
 8010f32:	460d      	mov	r5, r1
 8010f34:	b976      	cbnz	r6, 8010f54 <_Balloc+0x28>
 8010f36:	2010      	movs	r0, #16
 8010f38:	f7fe fa7a 	bl	800f430 <malloc>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	61e0      	str	r0, [r4, #28]
 8010f40:	b920      	cbnz	r0, 8010f4c <_Balloc+0x20>
 8010f42:	4b18      	ldr	r3, [pc, #96]	@ (8010fa4 <_Balloc+0x78>)
 8010f44:	4818      	ldr	r0, [pc, #96]	@ (8010fa8 <_Balloc+0x7c>)
 8010f46:	216b      	movs	r1, #107	@ 0x6b
 8010f48:	f000 ff66 	bl	8011e18 <__assert_func>
 8010f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f50:	6006      	str	r6, [r0, #0]
 8010f52:	60c6      	str	r6, [r0, #12]
 8010f54:	69e6      	ldr	r6, [r4, #28]
 8010f56:	68f3      	ldr	r3, [r6, #12]
 8010f58:	b183      	cbz	r3, 8010f7c <_Balloc+0x50>
 8010f5a:	69e3      	ldr	r3, [r4, #28]
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f62:	b9b8      	cbnz	r0, 8010f94 <_Balloc+0x68>
 8010f64:	2101      	movs	r1, #1
 8010f66:	fa01 f605 	lsl.w	r6, r1, r5
 8010f6a:	1d72      	adds	r2, r6, #5
 8010f6c:	0092      	lsls	r2, r2, #2
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f000 ff70 	bl	8011e54 <_calloc_r>
 8010f74:	b160      	cbz	r0, 8010f90 <_Balloc+0x64>
 8010f76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f7a:	e00e      	b.n	8010f9a <_Balloc+0x6e>
 8010f7c:	2221      	movs	r2, #33	@ 0x21
 8010f7e:	2104      	movs	r1, #4
 8010f80:	4620      	mov	r0, r4
 8010f82:	f000 ff67 	bl	8011e54 <_calloc_r>
 8010f86:	69e3      	ldr	r3, [r4, #28]
 8010f88:	60f0      	str	r0, [r6, #12]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d1e4      	bne.n	8010f5a <_Balloc+0x2e>
 8010f90:	2000      	movs	r0, #0
 8010f92:	bd70      	pop	{r4, r5, r6, pc}
 8010f94:	6802      	ldr	r2, [r0, #0]
 8010f96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fa0:	e7f7      	b.n	8010f92 <_Balloc+0x66>
 8010fa2:	bf00      	nop
 8010fa4:	08017679 	.word	0x08017679
 8010fa8:	080176f9 	.word	0x080176f9

08010fac <_Bfree>:
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	69c6      	ldr	r6, [r0, #28]
 8010fb0:	4605      	mov	r5, r0
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	b976      	cbnz	r6, 8010fd4 <_Bfree+0x28>
 8010fb6:	2010      	movs	r0, #16
 8010fb8:	f7fe fa3a 	bl	800f430 <malloc>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	61e8      	str	r0, [r5, #28]
 8010fc0:	b920      	cbnz	r0, 8010fcc <_Bfree+0x20>
 8010fc2:	4b09      	ldr	r3, [pc, #36]	@ (8010fe8 <_Bfree+0x3c>)
 8010fc4:	4809      	ldr	r0, [pc, #36]	@ (8010fec <_Bfree+0x40>)
 8010fc6:	218f      	movs	r1, #143	@ 0x8f
 8010fc8:	f000 ff26 	bl	8011e18 <__assert_func>
 8010fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fd0:	6006      	str	r6, [r0, #0]
 8010fd2:	60c6      	str	r6, [r0, #12]
 8010fd4:	b13c      	cbz	r4, 8010fe6 <_Bfree+0x3a>
 8010fd6:	69eb      	ldr	r3, [r5, #28]
 8010fd8:	6862      	ldr	r2, [r4, #4]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010fe0:	6021      	str	r1, [r4, #0]
 8010fe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	08017679 	.word	0x08017679
 8010fec:	080176f9 	.word	0x080176f9

08010ff0 <__multadd>:
 8010ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff4:	690d      	ldr	r5, [r1, #16]
 8010ff6:	4607      	mov	r7, r0
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	461e      	mov	r6, r3
 8010ffc:	f101 0c14 	add.w	ip, r1, #20
 8011000:	2000      	movs	r0, #0
 8011002:	f8dc 3000 	ldr.w	r3, [ip]
 8011006:	b299      	uxth	r1, r3
 8011008:	fb02 6101 	mla	r1, r2, r1, r6
 801100c:	0c1e      	lsrs	r6, r3, #16
 801100e:	0c0b      	lsrs	r3, r1, #16
 8011010:	fb02 3306 	mla	r3, r2, r6, r3
 8011014:	b289      	uxth	r1, r1
 8011016:	3001      	adds	r0, #1
 8011018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801101c:	4285      	cmp	r5, r0
 801101e:	f84c 1b04 	str.w	r1, [ip], #4
 8011022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011026:	dcec      	bgt.n	8011002 <__multadd+0x12>
 8011028:	b30e      	cbz	r6, 801106e <__multadd+0x7e>
 801102a:	68a3      	ldr	r3, [r4, #8]
 801102c:	42ab      	cmp	r3, r5
 801102e:	dc19      	bgt.n	8011064 <__multadd+0x74>
 8011030:	6861      	ldr	r1, [r4, #4]
 8011032:	4638      	mov	r0, r7
 8011034:	3101      	adds	r1, #1
 8011036:	f7ff ff79 	bl	8010f2c <_Balloc>
 801103a:	4680      	mov	r8, r0
 801103c:	b928      	cbnz	r0, 801104a <__multadd+0x5a>
 801103e:	4602      	mov	r2, r0
 8011040:	4b0c      	ldr	r3, [pc, #48]	@ (8011074 <__multadd+0x84>)
 8011042:	480d      	ldr	r0, [pc, #52]	@ (8011078 <__multadd+0x88>)
 8011044:	21ba      	movs	r1, #186	@ 0xba
 8011046:	f000 fee7 	bl	8011e18 <__assert_func>
 801104a:	6922      	ldr	r2, [r4, #16]
 801104c:	3202      	adds	r2, #2
 801104e:	f104 010c 	add.w	r1, r4, #12
 8011052:	0092      	lsls	r2, r2, #2
 8011054:	300c      	adds	r0, #12
 8011056:	f7ff f8c2 	bl	80101de <memcpy>
 801105a:	4621      	mov	r1, r4
 801105c:	4638      	mov	r0, r7
 801105e:	f7ff ffa5 	bl	8010fac <_Bfree>
 8011062:	4644      	mov	r4, r8
 8011064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011068:	3501      	adds	r5, #1
 801106a:	615e      	str	r6, [r3, #20]
 801106c:	6125      	str	r5, [r4, #16]
 801106e:	4620      	mov	r0, r4
 8011070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011074:	080176e8 	.word	0x080176e8
 8011078:	080176f9 	.word	0x080176f9

0801107c <__hi0bits>:
 801107c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011080:	4603      	mov	r3, r0
 8011082:	bf36      	itet	cc
 8011084:	0403      	lslcc	r3, r0, #16
 8011086:	2000      	movcs	r0, #0
 8011088:	2010      	movcc	r0, #16
 801108a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801108e:	bf3c      	itt	cc
 8011090:	021b      	lslcc	r3, r3, #8
 8011092:	3008      	addcc	r0, #8
 8011094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011098:	bf3c      	itt	cc
 801109a:	011b      	lslcc	r3, r3, #4
 801109c:	3004      	addcc	r0, #4
 801109e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110a2:	bf3c      	itt	cc
 80110a4:	009b      	lslcc	r3, r3, #2
 80110a6:	3002      	addcc	r0, #2
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	db05      	blt.n	80110b8 <__hi0bits+0x3c>
 80110ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80110b0:	f100 0001 	add.w	r0, r0, #1
 80110b4:	bf08      	it	eq
 80110b6:	2020      	moveq	r0, #32
 80110b8:	4770      	bx	lr

080110ba <__lo0bits>:
 80110ba:	6803      	ldr	r3, [r0, #0]
 80110bc:	4602      	mov	r2, r0
 80110be:	f013 0007 	ands.w	r0, r3, #7
 80110c2:	d00b      	beq.n	80110dc <__lo0bits+0x22>
 80110c4:	07d9      	lsls	r1, r3, #31
 80110c6:	d421      	bmi.n	801110c <__lo0bits+0x52>
 80110c8:	0798      	lsls	r0, r3, #30
 80110ca:	bf49      	itett	mi
 80110cc:	085b      	lsrmi	r3, r3, #1
 80110ce:	089b      	lsrpl	r3, r3, #2
 80110d0:	2001      	movmi	r0, #1
 80110d2:	6013      	strmi	r3, [r2, #0]
 80110d4:	bf5c      	itt	pl
 80110d6:	6013      	strpl	r3, [r2, #0]
 80110d8:	2002      	movpl	r0, #2
 80110da:	4770      	bx	lr
 80110dc:	b299      	uxth	r1, r3
 80110de:	b909      	cbnz	r1, 80110e4 <__lo0bits+0x2a>
 80110e0:	0c1b      	lsrs	r3, r3, #16
 80110e2:	2010      	movs	r0, #16
 80110e4:	b2d9      	uxtb	r1, r3
 80110e6:	b909      	cbnz	r1, 80110ec <__lo0bits+0x32>
 80110e8:	3008      	adds	r0, #8
 80110ea:	0a1b      	lsrs	r3, r3, #8
 80110ec:	0719      	lsls	r1, r3, #28
 80110ee:	bf04      	itt	eq
 80110f0:	091b      	lsreq	r3, r3, #4
 80110f2:	3004      	addeq	r0, #4
 80110f4:	0799      	lsls	r1, r3, #30
 80110f6:	bf04      	itt	eq
 80110f8:	089b      	lsreq	r3, r3, #2
 80110fa:	3002      	addeq	r0, #2
 80110fc:	07d9      	lsls	r1, r3, #31
 80110fe:	d403      	bmi.n	8011108 <__lo0bits+0x4e>
 8011100:	085b      	lsrs	r3, r3, #1
 8011102:	f100 0001 	add.w	r0, r0, #1
 8011106:	d003      	beq.n	8011110 <__lo0bits+0x56>
 8011108:	6013      	str	r3, [r2, #0]
 801110a:	4770      	bx	lr
 801110c:	2000      	movs	r0, #0
 801110e:	4770      	bx	lr
 8011110:	2020      	movs	r0, #32
 8011112:	4770      	bx	lr

08011114 <__i2b>:
 8011114:	b510      	push	{r4, lr}
 8011116:	460c      	mov	r4, r1
 8011118:	2101      	movs	r1, #1
 801111a:	f7ff ff07 	bl	8010f2c <_Balloc>
 801111e:	4602      	mov	r2, r0
 8011120:	b928      	cbnz	r0, 801112e <__i2b+0x1a>
 8011122:	4b05      	ldr	r3, [pc, #20]	@ (8011138 <__i2b+0x24>)
 8011124:	4805      	ldr	r0, [pc, #20]	@ (801113c <__i2b+0x28>)
 8011126:	f240 1145 	movw	r1, #325	@ 0x145
 801112a:	f000 fe75 	bl	8011e18 <__assert_func>
 801112e:	2301      	movs	r3, #1
 8011130:	6144      	str	r4, [r0, #20]
 8011132:	6103      	str	r3, [r0, #16]
 8011134:	bd10      	pop	{r4, pc}
 8011136:	bf00      	nop
 8011138:	080176e8 	.word	0x080176e8
 801113c:	080176f9 	.word	0x080176f9

08011140 <__multiply>:
 8011140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011144:	4614      	mov	r4, r2
 8011146:	690a      	ldr	r2, [r1, #16]
 8011148:	6923      	ldr	r3, [r4, #16]
 801114a:	429a      	cmp	r2, r3
 801114c:	bfa8      	it	ge
 801114e:	4623      	movge	r3, r4
 8011150:	460f      	mov	r7, r1
 8011152:	bfa4      	itt	ge
 8011154:	460c      	movge	r4, r1
 8011156:	461f      	movge	r7, r3
 8011158:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801115c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011160:	68a3      	ldr	r3, [r4, #8]
 8011162:	6861      	ldr	r1, [r4, #4]
 8011164:	eb0a 0609 	add.w	r6, sl, r9
 8011168:	42b3      	cmp	r3, r6
 801116a:	b085      	sub	sp, #20
 801116c:	bfb8      	it	lt
 801116e:	3101      	addlt	r1, #1
 8011170:	f7ff fedc 	bl	8010f2c <_Balloc>
 8011174:	b930      	cbnz	r0, 8011184 <__multiply+0x44>
 8011176:	4602      	mov	r2, r0
 8011178:	4b44      	ldr	r3, [pc, #272]	@ (801128c <__multiply+0x14c>)
 801117a:	4845      	ldr	r0, [pc, #276]	@ (8011290 <__multiply+0x150>)
 801117c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011180:	f000 fe4a 	bl	8011e18 <__assert_func>
 8011184:	f100 0514 	add.w	r5, r0, #20
 8011188:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801118c:	462b      	mov	r3, r5
 801118e:	2200      	movs	r2, #0
 8011190:	4543      	cmp	r3, r8
 8011192:	d321      	bcc.n	80111d8 <__multiply+0x98>
 8011194:	f107 0114 	add.w	r1, r7, #20
 8011198:	f104 0214 	add.w	r2, r4, #20
 801119c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80111a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80111a4:	9302      	str	r3, [sp, #8]
 80111a6:	1b13      	subs	r3, r2, r4
 80111a8:	3b15      	subs	r3, #21
 80111aa:	f023 0303 	bic.w	r3, r3, #3
 80111ae:	3304      	adds	r3, #4
 80111b0:	f104 0715 	add.w	r7, r4, #21
 80111b4:	42ba      	cmp	r2, r7
 80111b6:	bf38      	it	cc
 80111b8:	2304      	movcc	r3, #4
 80111ba:	9301      	str	r3, [sp, #4]
 80111bc:	9b02      	ldr	r3, [sp, #8]
 80111be:	9103      	str	r1, [sp, #12]
 80111c0:	428b      	cmp	r3, r1
 80111c2:	d80c      	bhi.n	80111de <__multiply+0x9e>
 80111c4:	2e00      	cmp	r6, #0
 80111c6:	dd03      	ble.n	80111d0 <__multiply+0x90>
 80111c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d05b      	beq.n	8011288 <__multiply+0x148>
 80111d0:	6106      	str	r6, [r0, #16]
 80111d2:	b005      	add	sp, #20
 80111d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d8:	f843 2b04 	str.w	r2, [r3], #4
 80111dc:	e7d8      	b.n	8011190 <__multiply+0x50>
 80111de:	f8b1 a000 	ldrh.w	sl, [r1]
 80111e2:	f1ba 0f00 	cmp.w	sl, #0
 80111e6:	d024      	beq.n	8011232 <__multiply+0xf2>
 80111e8:	f104 0e14 	add.w	lr, r4, #20
 80111ec:	46a9      	mov	r9, r5
 80111ee:	f04f 0c00 	mov.w	ip, #0
 80111f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80111f6:	f8d9 3000 	ldr.w	r3, [r9]
 80111fa:	fa1f fb87 	uxth.w	fp, r7
 80111fe:	b29b      	uxth	r3, r3
 8011200:	fb0a 330b 	mla	r3, sl, fp, r3
 8011204:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011208:	f8d9 7000 	ldr.w	r7, [r9]
 801120c:	4463      	add	r3, ip
 801120e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011212:	fb0a c70b 	mla	r7, sl, fp, ip
 8011216:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801121a:	b29b      	uxth	r3, r3
 801121c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011220:	4572      	cmp	r2, lr
 8011222:	f849 3b04 	str.w	r3, [r9], #4
 8011226:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801122a:	d8e2      	bhi.n	80111f2 <__multiply+0xb2>
 801122c:	9b01      	ldr	r3, [sp, #4]
 801122e:	f845 c003 	str.w	ip, [r5, r3]
 8011232:	9b03      	ldr	r3, [sp, #12]
 8011234:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011238:	3104      	adds	r1, #4
 801123a:	f1b9 0f00 	cmp.w	r9, #0
 801123e:	d021      	beq.n	8011284 <__multiply+0x144>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	f104 0c14 	add.w	ip, r4, #20
 8011246:	46ae      	mov	lr, r5
 8011248:	f04f 0a00 	mov.w	sl, #0
 801124c:	f8bc b000 	ldrh.w	fp, [ip]
 8011250:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011254:	fb09 770b 	mla	r7, r9, fp, r7
 8011258:	4457      	add	r7, sl
 801125a:	b29b      	uxth	r3, r3
 801125c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011260:	f84e 3b04 	str.w	r3, [lr], #4
 8011264:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011268:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801126c:	f8be 3000 	ldrh.w	r3, [lr]
 8011270:	fb09 330a 	mla	r3, r9, sl, r3
 8011274:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011278:	4562      	cmp	r2, ip
 801127a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801127e:	d8e5      	bhi.n	801124c <__multiply+0x10c>
 8011280:	9f01      	ldr	r7, [sp, #4]
 8011282:	51eb      	str	r3, [r5, r7]
 8011284:	3504      	adds	r5, #4
 8011286:	e799      	b.n	80111bc <__multiply+0x7c>
 8011288:	3e01      	subs	r6, #1
 801128a:	e79b      	b.n	80111c4 <__multiply+0x84>
 801128c:	080176e8 	.word	0x080176e8
 8011290:	080176f9 	.word	0x080176f9

08011294 <__pow5mult>:
 8011294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011298:	4615      	mov	r5, r2
 801129a:	f012 0203 	ands.w	r2, r2, #3
 801129e:	4607      	mov	r7, r0
 80112a0:	460e      	mov	r6, r1
 80112a2:	d007      	beq.n	80112b4 <__pow5mult+0x20>
 80112a4:	4c25      	ldr	r4, [pc, #148]	@ (801133c <__pow5mult+0xa8>)
 80112a6:	3a01      	subs	r2, #1
 80112a8:	2300      	movs	r3, #0
 80112aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112ae:	f7ff fe9f 	bl	8010ff0 <__multadd>
 80112b2:	4606      	mov	r6, r0
 80112b4:	10ad      	asrs	r5, r5, #2
 80112b6:	d03d      	beq.n	8011334 <__pow5mult+0xa0>
 80112b8:	69fc      	ldr	r4, [r7, #28]
 80112ba:	b97c      	cbnz	r4, 80112dc <__pow5mult+0x48>
 80112bc:	2010      	movs	r0, #16
 80112be:	f7fe f8b7 	bl	800f430 <malloc>
 80112c2:	4602      	mov	r2, r0
 80112c4:	61f8      	str	r0, [r7, #28]
 80112c6:	b928      	cbnz	r0, 80112d4 <__pow5mult+0x40>
 80112c8:	4b1d      	ldr	r3, [pc, #116]	@ (8011340 <__pow5mult+0xac>)
 80112ca:	481e      	ldr	r0, [pc, #120]	@ (8011344 <__pow5mult+0xb0>)
 80112cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80112d0:	f000 fda2 	bl	8011e18 <__assert_func>
 80112d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112d8:	6004      	str	r4, [r0, #0]
 80112da:	60c4      	str	r4, [r0, #12]
 80112dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80112e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112e4:	b94c      	cbnz	r4, 80112fa <__pow5mult+0x66>
 80112e6:	f240 2171 	movw	r1, #625	@ 0x271
 80112ea:	4638      	mov	r0, r7
 80112ec:	f7ff ff12 	bl	8011114 <__i2b>
 80112f0:	2300      	movs	r3, #0
 80112f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80112f6:	4604      	mov	r4, r0
 80112f8:	6003      	str	r3, [r0, #0]
 80112fa:	f04f 0900 	mov.w	r9, #0
 80112fe:	07eb      	lsls	r3, r5, #31
 8011300:	d50a      	bpl.n	8011318 <__pow5mult+0x84>
 8011302:	4631      	mov	r1, r6
 8011304:	4622      	mov	r2, r4
 8011306:	4638      	mov	r0, r7
 8011308:	f7ff ff1a 	bl	8011140 <__multiply>
 801130c:	4631      	mov	r1, r6
 801130e:	4680      	mov	r8, r0
 8011310:	4638      	mov	r0, r7
 8011312:	f7ff fe4b 	bl	8010fac <_Bfree>
 8011316:	4646      	mov	r6, r8
 8011318:	106d      	asrs	r5, r5, #1
 801131a:	d00b      	beq.n	8011334 <__pow5mult+0xa0>
 801131c:	6820      	ldr	r0, [r4, #0]
 801131e:	b938      	cbnz	r0, 8011330 <__pow5mult+0x9c>
 8011320:	4622      	mov	r2, r4
 8011322:	4621      	mov	r1, r4
 8011324:	4638      	mov	r0, r7
 8011326:	f7ff ff0b 	bl	8011140 <__multiply>
 801132a:	6020      	str	r0, [r4, #0]
 801132c:	f8c0 9000 	str.w	r9, [r0]
 8011330:	4604      	mov	r4, r0
 8011332:	e7e4      	b.n	80112fe <__pow5mult+0x6a>
 8011334:	4630      	mov	r0, r6
 8011336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801133a:	bf00      	nop
 801133c:	08017754 	.word	0x08017754
 8011340:	08017679 	.word	0x08017679
 8011344:	080176f9 	.word	0x080176f9

08011348 <__lshift>:
 8011348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801134c:	460c      	mov	r4, r1
 801134e:	6849      	ldr	r1, [r1, #4]
 8011350:	6923      	ldr	r3, [r4, #16]
 8011352:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011356:	68a3      	ldr	r3, [r4, #8]
 8011358:	4607      	mov	r7, r0
 801135a:	4691      	mov	r9, r2
 801135c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011360:	f108 0601 	add.w	r6, r8, #1
 8011364:	42b3      	cmp	r3, r6
 8011366:	db0b      	blt.n	8011380 <__lshift+0x38>
 8011368:	4638      	mov	r0, r7
 801136a:	f7ff fddf 	bl	8010f2c <_Balloc>
 801136e:	4605      	mov	r5, r0
 8011370:	b948      	cbnz	r0, 8011386 <__lshift+0x3e>
 8011372:	4602      	mov	r2, r0
 8011374:	4b28      	ldr	r3, [pc, #160]	@ (8011418 <__lshift+0xd0>)
 8011376:	4829      	ldr	r0, [pc, #164]	@ (801141c <__lshift+0xd4>)
 8011378:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801137c:	f000 fd4c 	bl	8011e18 <__assert_func>
 8011380:	3101      	adds	r1, #1
 8011382:	005b      	lsls	r3, r3, #1
 8011384:	e7ee      	b.n	8011364 <__lshift+0x1c>
 8011386:	2300      	movs	r3, #0
 8011388:	f100 0114 	add.w	r1, r0, #20
 801138c:	f100 0210 	add.w	r2, r0, #16
 8011390:	4618      	mov	r0, r3
 8011392:	4553      	cmp	r3, sl
 8011394:	db33      	blt.n	80113fe <__lshift+0xb6>
 8011396:	6920      	ldr	r0, [r4, #16]
 8011398:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801139c:	f104 0314 	add.w	r3, r4, #20
 80113a0:	f019 091f 	ands.w	r9, r9, #31
 80113a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80113a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80113ac:	d02b      	beq.n	8011406 <__lshift+0xbe>
 80113ae:	f1c9 0e20 	rsb	lr, r9, #32
 80113b2:	468a      	mov	sl, r1
 80113b4:	2200      	movs	r2, #0
 80113b6:	6818      	ldr	r0, [r3, #0]
 80113b8:	fa00 f009 	lsl.w	r0, r0, r9
 80113bc:	4310      	orrs	r0, r2
 80113be:	f84a 0b04 	str.w	r0, [sl], #4
 80113c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80113c6:	459c      	cmp	ip, r3
 80113c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80113cc:	d8f3      	bhi.n	80113b6 <__lshift+0x6e>
 80113ce:	ebac 0304 	sub.w	r3, ip, r4
 80113d2:	3b15      	subs	r3, #21
 80113d4:	f023 0303 	bic.w	r3, r3, #3
 80113d8:	3304      	adds	r3, #4
 80113da:	f104 0015 	add.w	r0, r4, #21
 80113de:	4584      	cmp	ip, r0
 80113e0:	bf38      	it	cc
 80113e2:	2304      	movcc	r3, #4
 80113e4:	50ca      	str	r2, [r1, r3]
 80113e6:	b10a      	cbz	r2, 80113ec <__lshift+0xa4>
 80113e8:	f108 0602 	add.w	r6, r8, #2
 80113ec:	3e01      	subs	r6, #1
 80113ee:	4638      	mov	r0, r7
 80113f0:	612e      	str	r6, [r5, #16]
 80113f2:	4621      	mov	r1, r4
 80113f4:	f7ff fdda 	bl	8010fac <_Bfree>
 80113f8:	4628      	mov	r0, r5
 80113fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8011402:	3301      	adds	r3, #1
 8011404:	e7c5      	b.n	8011392 <__lshift+0x4a>
 8011406:	3904      	subs	r1, #4
 8011408:	f853 2b04 	ldr.w	r2, [r3], #4
 801140c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011410:	459c      	cmp	ip, r3
 8011412:	d8f9      	bhi.n	8011408 <__lshift+0xc0>
 8011414:	e7ea      	b.n	80113ec <__lshift+0xa4>
 8011416:	bf00      	nop
 8011418:	080176e8 	.word	0x080176e8
 801141c:	080176f9 	.word	0x080176f9

08011420 <__mcmp>:
 8011420:	690a      	ldr	r2, [r1, #16]
 8011422:	4603      	mov	r3, r0
 8011424:	6900      	ldr	r0, [r0, #16]
 8011426:	1a80      	subs	r0, r0, r2
 8011428:	b530      	push	{r4, r5, lr}
 801142a:	d10e      	bne.n	801144a <__mcmp+0x2a>
 801142c:	3314      	adds	r3, #20
 801142e:	3114      	adds	r1, #20
 8011430:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011434:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801143c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011440:	4295      	cmp	r5, r2
 8011442:	d003      	beq.n	801144c <__mcmp+0x2c>
 8011444:	d205      	bcs.n	8011452 <__mcmp+0x32>
 8011446:	f04f 30ff 	mov.w	r0, #4294967295
 801144a:	bd30      	pop	{r4, r5, pc}
 801144c:	42a3      	cmp	r3, r4
 801144e:	d3f3      	bcc.n	8011438 <__mcmp+0x18>
 8011450:	e7fb      	b.n	801144a <__mcmp+0x2a>
 8011452:	2001      	movs	r0, #1
 8011454:	e7f9      	b.n	801144a <__mcmp+0x2a>
	...

08011458 <__mdiff>:
 8011458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145c:	4689      	mov	r9, r1
 801145e:	4606      	mov	r6, r0
 8011460:	4611      	mov	r1, r2
 8011462:	4648      	mov	r0, r9
 8011464:	4614      	mov	r4, r2
 8011466:	f7ff ffdb 	bl	8011420 <__mcmp>
 801146a:	1e05      	subs	r5, r0, #0
 801146c:	d112      	bne.n	8011494 <__mdiff+0x3c>
 801146e:	4629      	mov	r1, r5
 8011470:	4630      	mov	r0, r6
 8011472:	f7ff fd5b 	bl	8010f2c <_Balloc>
 8011476:	4602      	mov	r2, r0
 8011478:	b928      	cbnz	r0, 8011486 <__mdiff+0x2e>
 801147a:	4b3f      	ldr	r3, [pc, #252]	@ (8011578 <__mdiff+0x120>)
 801147c:	f240 2137 	movw	r1, #567	@ 0x237
 8011480:	483e      	ldr	r0, [pc, #248]	@ (801157c <__mdiff+0x124>)
 8011482:	f000 fcc9 	bl	8011e18 <__assert_func>
 8011486:	2301      	movs	r3, #1
 8011488:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801148c:	4610      	mov	r0, r2
 801148e:	b003      	add	sp, #12
 8011490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011494:	bfbc      	itt	lt
 8011496:	464b      	movlt	r3, r9
 8011498:	46a1      	movlt	r9, r4
 801149a:	4630      	mov	r0, r6
 801149c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80114a0:	bfba      	itte	lt
 80114a2:	461c      	movlt	r4, r3
 80114a4:	2501      	movlt	r5, #1
 80114a6:	2500      	movge	r5, #0
 80114a8:	f7ff fd40 	bl	8010f2c <_Balloc>
 80114ac:	4602      	mov	r2, r0
 80114ae:	b918      	cbnz	r0, 80114b8 <__mdiff+0x60>
 80114b0:	4b31      	ldr	r3, [pc, #196]	@ (8011578 <__mdiff+0x120>)
 80114b2:	f240 2145 	movw	r1, #581	@ 0x245
 80114b6:	e7e3      	b.n	8011480 <__mdiff+0x28>
 80114b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80114bc:	6926      	ldr	r6, [r4, #16]
 80114be:	60c5      	str	r5, [r0, #12]
 80114c0:	f109 0310 	add.w	r3, r9, #16
 80114c4:	f109 0514 	add.w	r5, r9, #20
 80114c8:	f104 0e14 	add.w	lr, r4, #20
 80114cc:	f100 0b14 	add.w	fp, r0, #20
 80114d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80114d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80114d8:	9301      	str	r3, [sp, #4]
 80114da:	46d9      	mov	r9, fp
 80114dc:	f04f 0c00 	mov.w	ip, #0
 80114e0:	9b01      	ldr	r3, [sp, #4]
 80114e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80114e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80114ea:	9301      	str	r3, [sp, #4]
 80114ec:	fa1f f38a 	uxth.w	r3, sl
 80114f0:	4619      	mov	r1, r3
 80114f2:	b283      	uxth	r3, r0
 80114f4:	1acb      	subs	r3, r1, r3
 80114f6:	0c00      	lsrs	r0, r0, #16
 80114f8:	4463      	add	r3, ip
 80114fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80114fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011502:	b29b      	uxth	r3, r3
 8011504:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011508:	4576      	cmp	r6, lr
 801150a:	f849 3b04 	str.w	r3, [r9], #4
 801150e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011512:	d8e5      	bhi.n	80114e0 <__mdiff+0x88>
 8011514:	1b33      	subs	r3, r6, r4
 8011516:	3b15      	subs	r3, #21
 8011518:	f023 0303 	bic.w	r3, r3, #3
 801151c:	3415      	adds	r4, #21
 801151e:	3304      	adds	r3, #4
 8011520:	42a6      	cmp	r6, r4
 8011522:	bf38      	it	cc
 8011524:	2304      	movcc	r3, #4
 8011526:	441d      	add	r5, r3
 8011528:	445b      	add	r3, fp
 801152a:	461e      	mov	r6, r3
 801152c:	462c      	mov	r4, r5
 801152e:	4544      	cmp	r4, r8
 8011530:	d30e      	bcc.n	8011550 <__mdiff+0xf8>
 8011532:	f108 0103 	add.w	r1, r8, #3
 8011536:	1b49      	subs	r1, r1, r5
 8011538:	f021 0103 	bic.w	r1, r1, #3
 801153c:	3d03      	subs	r5, #3
 801153e:	45a8      	cmp	r8, r5
 8011540:	bf38      	it	cc
 8011542:	2100      	movcc	r1, #0
 8011544:	440b      	add	r3, r1
 8011546:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801154a:	b191      	cbz	r1, 8011572 <__mdiff+0x11a>
 801154c:	6117      	str	r7, [r2, #16]
 801154e:	e79d      	b.n	801148c <__mdiff+0x34>
 8011550:	f854 1b04 	ldr.w	r1, [r4], #4
 8011554:	46e6      	mov	lr, ip
 8011556:	0c08      	lsrs	r0, r1, #16
 8011558:	fa1c fc81 	uxtah	ip, ip, r1
 801155c:	4471      	add	r1, lr
 801155e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011562:	b289      	uxth	r1, r1
 8011564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011568:	f846 1b04 	str.w	r1, [r6], #4
 801156c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011570:	e7dd      	b.n	801152e <__mdiff+0xd6>
 8011572:	3f01      	subs	r7, #1
 8011574:	e7e7      	b.n	8011546 <__mdiff+0xee>
 8011576:	bf00      	nop
 8011578:	080176e8 	.word	0x080176e8
 801157c:	080176f9 	.word	0x080176f9

08011580 <__d2b>:
 8011580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011584:	460f      	mov	r7, r1
 8011586:	2101      	movs	r1, #1
 8011588:	ec59 8b10 	vmov	r8, r9, d0
 801158c:	4616      	mov	r6, r2
 801158e:	f7ff fccd 	bl	8010f2c <_Balloc>
 8011592:	4604      	mov	r4, r0
 8011594:	b930      	cbnz	r0, 80115a4 <__d2b+0x24>
 8011596:	4602      	mov	r2, r0
 8011598:	4b23      	ldr	r3, [pc, #140]	@ (8011628 <__d2b+0xa8>)
 801159a:	4824      	ldr	r0, [pc, #144]	@ (801162c <__d2b+0xac>)
 801159c:	f240 310f 	movw	r1, #783	@ 0x30f
 80115a0:	f000 fc3a 	bl	8011e18 <__assert_func>
 80115a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80115a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115ac:	b10d      	cbz	r5, 80115b2 <__d2b+0x32>
 80115ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80115b2:	9301      	str	r3, [sp, #4]
 80115b4:	f1b8 0300 	subs.w	r3, r8, #0
 80115b8:	d023      	beq.n	8011602 <__d2b+0x82>
 80115ba:	4668      	mov	r0, sp
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	f7ff fd7c 	bl	80110ba <__lo0bits>
 80115c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80115c6:	b1d0      	cbz	r0, 80115fe <__d2b+0x7e>
 80115c8:	f1c0 0320 	rsb	r3, r0, #32
 80115cc:	fa02 f303 	lsl.w	r3, r2, r3
 80115d0:	430b      	orrs	r3, r1
 80115d2:	40c2      	lsrs	r2, r0
 80115d4:	6163      	str	r3, [r4, #20]
 80115d6:	9201      	str	r2, [sp, #4]
 80115d8:	9b01      	ldr	r3, [sp, #4]
 80115da:	61a3      	str	r3, [r4, #24]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	bf0c      	ite	eq
 80115e0:	2201      	moveq	r2, #1
 80115e2:	2202      	movne	r2, #2
 80115e4:	6122      	str	r2, [r4, #16]
 80115e6:	b1a5      	cbz	r5, 8011612 <__d2b+0x92>
 80115e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80115ec:	4405      	add	r5, r0
 80115ee:	603d      	str	r5, [r7, #0]
 80115f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80115f4:	6030      	str	r0, [r6, #0]
 80115f6:	4620      	mov	r0, r4
 80115f8:	b003      	add	sp, #12
 80115fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115fe:	6161      	str	r1, [r4, #20]
 8011600:	e7ea      	b.n	80115d8 <__d2b+0x58>
 8011602:	a801      	add	r0, sp, #4
 8011604:	f7ff fd59 	bl	80110ba <__lo0bits>
 8011608:	9b01      	ldr	r3, [sp, #4]
 801160a:	6163      	str	r3, [r4, #20]
 801160c:	3020      	adds	r0, #32
 801160e:	2201      	movs	r2, #1
 8011610:	e7e8      	b.n	80115e4 <__d2b+0x64>
 8011612:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011616:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801161a:	6038      	str	r0, [r7, #0]
 801161c:	6918      	ldr	r0, [r3, #16]
 801161e:	f7ff fd2d 	bl	801107c <__hi0bits>
 8011622:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011626:	e7e5      	b.n	80115f4 <__d2b+0x74>
 8011628:	080176e8 	.word	0x080176e8
 801162c:	080176f9 	.word	0x080176f9

08011630 <__ssputs_r>:
 8011630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011634:	688e      	ldr	r6, [r1, #8]
 8011636:	461f      	mov	r7, r3
 8011638:	42be      	cmp	r6, r7
 801163a:	680b      	ldr	r3, [r1, #0]
 801163c:	4682      	mov	sl, r0
 801163e:	460c      	mov	r4, r1
 8011640:	4690      	mov	r8, r2
 8011642:	d82d      	bhi.n	80116a0 <__ssputs_r+0x70>
 8011644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011648:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801164c:	d026      	beq.n	801169c <__ssputs_r+0x6c>
 801164e:	6965      	ldr	r5, [r4, #20]
 8011650:	6909      	ldr	r1, [r1, #16]
 8011652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011656:	eba3 0901 	sub.w	r9, r3, r1
 801165a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801165e:	1c7b      	adds	r3, r7, #1
 8011660:	444b      	add	r3, r9
 8011662:	106d      	asrs	r5, r5, #1
 8011664:	429d      	cmp	r5, r3
 8011666:	bf38      	it	cc
 8011668:	461d      	movcc	r5, r3
 801166a:	0553      	lsls	r3, r2, #21
 801166c:	d527      	bpl.n	80116be <__ssputs_r+0x8e>
 801166e:	4629      	mov	r1, r5
 8011670:	f7fd ff08 	bl	800f484 <_malloc_r>
 8011674:	4606      	mov	r6, r0
 8011676:	b360      	cbz	r0, 80116d2 <__ssputs_r+0xa2>
 8011678:	6921      	ldr	r1, [r4, #16]
 801167a:	464a      	mov	r2, r9
 801167c:	f7fe fdaf 	bl	80101de <memcpy>
 8011680:	89a3      	ldrh	r3, [r4, #12]
 8011682:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801168a:	81a3      	strh	r3, [r4, #12]
 801168c:	6126      	str	r6, [r4, #16]
 801168e:	6165      	str	r5, [r4, #20]
 8011690:	444e      	add	r6, r9
 8011692:	eba5 0509 	sub.w	r5, r5, r9
 8011696:	6026      	str	r6, [r4, #0]
 8011698:	60a5      	str	r5, [r4, #8]
 801169a:	463e      	mov	r6, r7
 801169c:	42be      	cmp	r6, r7
 801169e:	d900      	bls.n	80116a2 <__ssputs_r+0x72>
 80116a0:	463e      	mov	r6, r7
 80116a2:	6820      	ldr	r0, [r4, #0]
 80116a4:	4632      	mov	r2, r6
 80116a6:	4641      	mov	r1, r8
 80116a8:	f000 fb9c 	bl	8011de4 <memmove>
 80116ac:	68a3      	ldr	r3, [r4, #8]
 80116ae:	1b9b      	subs	r3, r3, r6
 80116b0:	60a3      	str	r3, [r4, #8]
 80116b2:	6823      	ldr	r3, [r4, #0]
 80116b4:	4433      	add	r3, r6
 80116b6:	6023      	str	r3, [r4, #0]
 80116b8:	2000      	movs	r0, #0
 80116ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116be:	462a      	mov	r2, r5
 80116c0:	f000 fbee 	bl	8011ea0 <_realloc_r>
 80116c4:	4606      	mov	r6, r0
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d1e0      	bne.n	801168c <__ssputs_r+0x5c>
 80116ca:	6921      	ldr	r1, [r4, #16]
 80116cc:	4650      	mov	r0, sl
 80116ce:	f7ff fbe3 	bl	8010e98 <_free_r>
 80116d2:	230c      	movs	r3, #12
 80116d4:	f8ca 3000 	str.w	r3, [sl]
 80116d8:	89a3      	ldrh	r3, [r4, #12]
 80116da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116de:	81a3      	strh	r3, [r4, #12]
 80116e0:	f04f 30ff 	mov.w	r0, #4294967295
 80116e4:	e7e9      	b.n	80116ba <__ssputs_r+0x8a>
	...

080116e8 <_svfiprintf_r>:
 80116e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ec:	4698      	mov	r8, r3
 80116ee:	898b      	ldrh	r3, [r1, #12]
 80116f0:	061b      	lsls	r3, r3, #24
 80116f2:	b09d      	sub	sp, #116	@ 0x74
 80116f4:	4607      	mov	r7, r0
 80116f6:	460d      	mov	r5, r1
 80116f8:	4614      	mov	r4, r2
 80116fa:	d510      	bpl.n	801171e <_svfiprintf_r+0x36>
 80116fc:	690b      	ldr	r3, [r1, #16]
 80116fe:	b973      	cbnz	r3, 801171e <_svfiprintf_r+0x36>
 8011700:	2140      	movs	r1, #64	@ 0x40
 8011702:	f7fd febf 	bl	800f484 <_malloc_r>
 8011706:	6028      	str	r0, [r5, #0]
 8011708:	6128      	str	r0, [r5, #16]
 801170a:	b930      	cbnz	r0, 801171a <_svfiprintf_r+0x32>
 801170c:	230c      	movs	r3, #12
 801170e:	603b      	str	r3, [r7, #0]
 8011710:	f04f 30ff 	mov.w	r0, #4294967295
 8011714:	b01d      	add	sp, #116	@ 0x74
 8011716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171a:	2340      	movs	r3, #64	@ 0x40
 801171c:	616b      	str	r3, [r5, #20]
 801171e:	2300      	movs	r3, #0
 8011720:	9309      	str	r3, [sp, #36]	@ 0x24
 8011722:	2320      	movs	r3, #32
 8011724:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011728:	f8cd 800c 	str.w	r8, [sp, #12]
 801172c:	2330      	movs	r3, #48	@ 0x30
 801172e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80118cc <_svfiprintf_r+0x1e4>
 8011732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011736:	f04f 0901 	mov.w	r9, #1
 801173a:	4623      	mov	r3, r4
 801173c:	469a      	mov	sl, r3
 801173e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011742:	b10a      	cbz	r2, 8011748 <_svfiprintf_r+0x60>
 8011744:	2a25      	cmp	r2, #37	@ 0x25
 8011746:	d1f9      	bne.n	801173c <_svfiprintf_r+0x54>
 8011748:	ebba 0b04 	subs.w	fp, sl, r4
 801174c:	d00b      	beq.n	8011766 <_svfiprintf_r+0x7e>
 801174e:	465b      	mov	r3, fp
 8011750:	4622      	mov	r2, r4
 8011752:	4629      	mov	r1, r5
 8011754:	4638      	mov	r0, r7
 8011756:	f7ff ff6b 	bl	8011630 <__ssputs_r>
 801175a:	3001      	adds	r0, #1
 801175c:	f000 80a7 	beq.w	80118ae <_svfiprintf_r+0x1c6>
 8011760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011762:	445a      	add	r2, fp
 8011764:	9209      	str	r2, [sp, #36]	@ 0x24
 8011766:	f89a 3000 	ldrb.w	r3, [sl]
 801176a:	2b00      	cmp	r3, #0
 801176c:	f000 809f 	beq.w	80118ae <_svfiprintf_r+0x1c6>
 8011770:	2300      	movs	r3, #0
 8011772:	f04f 32ff 	mov.w	r2, #4294967295
 8011776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801177a:	f10a 0a01 	add.w	sl, sl, #1
 801177e:	9304      	str	r3, [sp, #16]
 8011780:	9307      	str	r3, [sp, #28]
 8011782:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011786:	931a      	str	r3, [sp, #104]	@ 0x68
 8011788:	4654      	mov	r4, sl
 801178a:	2205      	movs	r2, #5
 801178c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011790:	484e      	ldr	r0, [pc, #312]	@ (80118cc <_svfiprintf_r+0x1e4>)
 8011792:	f7ee fd35 	bl	8000200 <memchr>
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	b9d8      	cbnz	r0, 80117d2 <_svfiprintf_r+0xea>
 801179a:	06d0      	lsls	r0, r2, #27
 801179c:	bf44      	itt	mi
 801179e:	2320      	movmi	r3, #32
 80117a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117a4:	0711      	lsls	r1, r2, #28
 80117a6:	bf44      	itt	mi
 80117a8:	232b      	movmi	r3, #43	@ 0x2b
 80117aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117ae:	f89a 3000 	ldrb.w	r3, [sl]
 80117b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80117b4:	d015      	beq.n	80117e2 <_svfiprintf_r+0xfa>
 80117b6:	9a07      	ldr	r2, [sp, #28]
 80117b8:	4654      	mov	r4, sl
 80117ba:	2000      	movs	r0, #0
 80117bc:	f04f 0c0a 	mov.w	ip, #10
 80117c0:	4621      	mov	r1, r4
 80117c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117c6:	3b30      	subs	r3, #48	@ 0x30
 80117c8:	2b09      	cmp	r3, #9
 80117ca:	d94b      	bls.n	8011864 <_svfiprintf_r+0x17c>
 80117cc:	b1b0      	cbz	r0, 80117fc <_svfiprintf_r+0x114>
 80117ce:	9207      	str	r2, [sp, #28]
 80117d0:	e014      	b.n	80117fc <_svfiprintf_r+0x114>
 80117d2:	eba0 0308 	sub.w	r3, r0, r8
 80117d6:	fa09 f303 	lsl.w	r3, r9, r3
 80117da:	4313      	orrs	r3, r2
 80117dc:	9304      	str	r3, [sp, #16]
 80117de:	46a2      	mov	sl, r4
 80117e0:	e7d2      	b.n	8011788 <_svfiprintf_r+0xa0>
 80117e2:	9b03      	ldr	r3, [sp, #12]
 80117e4:	1d19      	adds	r1, r3, #4
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	9103      	str	r1, [sp, #12]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	bfbb      	ittet	lt
 80117ee:	425b      	neglt	r3, r3
 80117f0:	f042 0202 	orrlt.w	r2, r2, #2
 80117f4:	9307      	strge	r3, [sp, #28]
 80117f6:	9307      	strlt	r3, [sp, #28]
 80117f8:	bfb8      	it	lt
 80117fa:	9204      	strlt	r2, [sp, #16]
 80117fc:	7823      	ldrb	r3, [r4, #0]
 80117fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8011800:	d10a      	bne.n	8011818 <_svfiprintf_r+0x130>
 8011802:	7863      	ldrb	r3, [r4, #1]
 8011804:	2b2a      	cmp	r3, #42	@ 0x2a
 8011806:	d132      	bne.n	801186e <_svfiprintf_r+0x186>
 8011808:	9b03      	ldr	r3, [sp, #12]
 801180a:	1d1a      	adds	r2, r3, #4
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	9203      	str	r2, [sp, #12]
 8011810:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011814:	3402      	adds	r4, #2
 8011816:	9305      	str	r3, [sp, #20]
 8011818:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80118dc <_svfiprintf_r+0x1f4>
 801181c:	7821      	ldrb	r1, [r4, #0]
 801181e:	2203      	movs	r2, #3
 8011820:	4650      	mov	r0, sl
 8011822:	f7ee fced 	bl	8000200 <memchr>
 8011826:	b138      	cbz	r0, 8011838 <_svfiprintf_r+0x150>
 8011828:	9b04      	ldr	r3, [sp, #16]
 801182a:	eba0 000a 	sub.w	r0, r0, sl
 801182e:	2240      	movs	r2, #64	@ 0x40
 8011830:	4082      	lsls	r2, r0
 8011832:	4313      	orrs	r3, r2
 8011834:	3401      	adds	r4, #1
 8011836:	9304      	str	r3, [sp, #16]
 8011838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801183c:	4824      	ldr	r0, [pc, #144]	@ (80118d0 <_svfiprintf_r+0x1e8>)
 801183e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011842:	2206      	movs	r2, #6
 8011844:	f7ee fcdc 	bl	8000200 <memchr>
 8011848:	2800      	cmp	r0, #0
 801184a:	d036      	beq.n	80118ba <_svfiprintf_r+0x1d2>
 801184c:	4b21      	ldr	r3, [pc, #132]	@ (80118d4 <_svfiprintf_r+0x1ec>)
 801184e:	bb1b      	cbnz	r3, 8011898 <_svfiprintf_r+0x1b0>
 8011850:	9b03      	ldr	r3, [sp, #12]
 8011852:	3307      	adds	r3, #7
 8011854:	f023 0307 	bic.w	r3, r3, #7
 8011858:	3308      	adds	r3, #8
 801185a:	9303      	str	r3, [sp, #12]
 801185c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801185e:	4433      	add	r3, r6
 8011860:	9309      	str	r3, [sp, #36]	@ 0x24
 8011862:	e76a      	b.n	801173a <_svfiprintf_r+0x52>
 8011864:	fb0c 3202 	mla	r2, ip, r2, r3
 8011868:	460c      	mov	r4, r1
 801186a:	2001      	movs	r0, #1
 801186c:	e7a8      	b.n	80117c0 <_svfiprintf_r+0xd8>
 801186e:	2300      	movs	r3, #0
 8011870:	3401      	adds	r4, #1
 8011872:	9305      	str	r3, [sp, #20]
 8011874:	4619      	mov	r1, r3
 8011876:	f04f 0c0a 	mov.w	ip, #10
 801187a:	4620      	mov	r0, r4
 801187c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011880:	3a30      	subs	r2, #48	@ 0x30
 8011882:	2a09      	cmp	r2, #9
 8011884:	d903      	bls.n	801188e <_svfiprintf_r+0x1a6>
 8011886:	2b00      	cmp	r3, #0
 8011888:	d0c6      	beq.n	8011818 <_svfiprintf_r+0x130>
 801188a:	9105      	str	r1, [sp, #20]
 801188c:	e7c4      	b.n	8011818 <_svfiprintf_r+0x130>
 801188e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011892:	4604      	mov	r4, r0
 8011894:	2301      	movs	r3, #1
 8011896:	e7f0      	b.n	801187a <_svfiprintf_r+0x192>
 8011898:	ab03      	add	r3, sp, #12
 801189a:	9300      	str	r3, [sp, #0]
 801189c:	462a      	mov	r2, r5
 801189e:	4b0e      	ldr	r3, [pc, #56]	@ (80118d8 <_svfiprintf_r+0x1f0>)
 80118a0:	a904      	add	r1, sp, #16
 80118a2:	4638      	mov	r0, r7
 80118a4:	f7fd ff1a 	bl	800f6dc <_printf_float>
 80118a8:	1c42      	adds	r2, r0, #1
 80118aa:	4606      	mov	r6, r0
 80118ac:	d1d6      	bne.n	801185c <_svfiprintf_r+0x174>
 80118ae:	89ab      	ldrh	r3, [r5, #12]
 80118b0:	065b      	lsls	r3, r3, #25
 80118b2:	f53f af2d 	bmi.w	8011710 <_svfiprintf_r+0x28>
 80118b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80118b8:	e72c      	b.n	8011714 <_svfiprintf_r+0x2c>
 80118ba:	ab03      	add	r3, sp, #12
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	462a      	mov	r2, r5
 80118c0:	4b05      	ldr	r3, [pc, #20]	@ (80118d8 <_svfiprintf_r+0x1f0>)
 80118c2:	a904      	add	r1, sp, #16
 80118c4:	4638      	mov	r0, r7
 80118c6:	f7fe f9a1 	bl	800fc0c <_printf_i>
 80118ca:	e7ed      	b.n	80118a8 <_svfiprintf_r+0x1c0>
 80118cc:	08017850 	.word	0x08017850
 80118d0:	0801785a 	.word	0x0801785a
 80118d4:	0800f6dd 	.word	0x0800f6dd
 80118d8:	08011631 	.word	0x08011631
 80118dc:	08017856 	.word	0x08017856

080118e0 <__sfputc_r>:
 80118e0:	6893      	ldr	r3, [r2, #8]
 80118e2:	3b01      	subs	r3, #1
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	b410      	push	{r4}
 80118e8:	6093      	str	r3, [r2, #8]
 80118ea:	da08      	bge.n	80118fe <__sfputc_r+0x1e>
 80118ec:	6994      	ldr	r4, [r2, #24]
 80118ee:	42a3      	cmp	r3, r4
 80118f0:	db01      	blt.n	80118f6 <__sfputc_r+0x16>
 80118f2:	290a      	cmp	r1, #10
 80118f4:	d103      	bne.n	80118fe <__sfputc_r+0x1e>
 80118f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118fa:	f000 b9df 	b.w	8011cbc <__swbuf_r>
 80118fe:	6813      	ldr	r3, [r2, #0]
 8011900:	1c58      	adds	r0, r3, #1
 8011902:	6010      	str	r0, [r2, #0]
 8011904:	7019      	strb	r1, [r3, #0]
 8011906:	4608      	mov	r0, r1
 8011908:	f85d 4b04 	ldr.w	r4, [sp], #4
 801190c:	4770      	bx	lr

0801190e <__sfputs_r>:
 801190e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011910:	4606      	mov	r6, r0
 8011912:	460f      	mov	r7, r1
 8011914:	4614      	mov	r4, r2
 8011916:	18d5      	adds	r5, r2, r3
 8011918:	42ac      	cmp	r4, r5
 801191a:	d101      	bne.n	8011920 <__sfputs_r+0x12>
 801191c:	2000      	movs	r0, #0
 801191e:	e007      	b.n	8011930 <__sfputs_r+0x22>
 8011920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011924:	463a      	mov	r2, r7
 8011926:	4630      	mov	r0, r6
 8011928:	f7ff ffda 	bl	80118e0 <__sfputc_r>
 801192c:	1c43      	adds	r3, r0, #1
 801192e:	d1f3      	bne.n	8011918 <__sfputs_r+0xa>
 8011930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011934 <_vfiprintf_r>:
 8011934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011938:	460d      	mov	r5, r1
 801193a:	b09d      	sub	sp, #116	@ 0x74
 801193c:	4614      	mov	r4, r2
 801193e:	4698      	mov	r8, r3
 8011940:	4606      	mov	r6, r0
 8011942:	b118      	cbz	r0, 801194c <_vfiprintf_r+0x18>
 8011944:	6a03      	ldr	r3, [r0, #32]
 8011946:	b90b      	cbnz	r3, 801194c <_vfiprintf_r+0x18>
 8011948:	f7fe fb0c 	bl	800ff64 <__sinit>
 801194c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801194e:	07d9      	lsls	r1, r3, #31
 8011950:	d405      	bmi.n	801195e <_vfiprintf_r+0x2a>
 8011952:	89ab      	ldrh	r3, [r5, #12]
 8011954:	059a      	lsls	r2, r3, #22
 8011956:	d402      	bmi.n	801195e <_vfiprintf_r+0x2a>
 8011958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801195a:	f7fe fc3e 	bl	80101da <__retarget_lock_acquire_recursive>
 801195e:	89ab      	ldrh	r3, [r5, #12]
 8011960:	071b      	lsls	r3, r3, #28
 8011962:	d501      	bpl.n	8011968 <_vfiprintf_r+0x34>
 8011964:	692b      	ldr	r3, [r5, #16]
 8011966:	b99b      	cbnz	r3, 8011990 <_vfiprintf_r+0x5c>
 8011968:	4629      	mov	r1, r5
 801196a:	4630      	mov	r0, r6
 801196c:	f000 f9e4 	bl	8011d38 <__swsetup_r>
 8011970:	b170      	cbz	r0, 8011990 <_vfiprintf_r+0x5c>
 8011972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011974:	07dc      	lsls	r4, r3, #31
 8011976:	d504      	bpl.n	8011982 <_vfiprintf_r+0x4e>
 8011978:	f04f 30ff 	mov.w	r0, #4294967295
 801197c:	b01d      	add	sp, #116	@ 0x74
 801197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011982:	89ab      	ldrh	r3, [r5, #12]
 8011984:	0598      	lsls	r0, r3, #22
 8011986:	d4f7      	bmi.n	8011978 <_vfiprintf_r+0x44>
 8011988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801198a:	f7fe fc27 	bl	80101dc <__retarget_lock_release_recursive>
 801198e:	e7f3      	b.n	8011978 <_vfiprintf_r+0x44>
 8011990:	2300      	movs	r3, #0
 8011992:	9309      	str	r3, [sp, #36]	@ 0x24
 8011994:	2320      	movs	r3, #32
 8011996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801199a:	f8cd 800c 	str.w	r8, [sp, #12]
 801199e:	2330      	movs	r3, #48	@ 0x30
 80119a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011b50 <_vfiprintf_r+0x21c>
 80119a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119a8:	f04f 0901 	mov.w	r9, #1
 80119ac:	4623      	mov	r3, r4
 80119ae:	469a      	mov	sl, r3
 80119b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119b4:	b10a      	cbz	r2, 80119ba <_vfiprintf_r+0x86>
 80119b6:	2a25      	cmp	r2, #37	@ 0x25
 80119b8:	d1f9      	bne.n	80119ae <_vfiprintf_r+0x7a>
 80119ba:	ebba 0b04 	subs.w	fp, sl, r4
 80119be:	d00b      	beq.n	80119d8 <_vfiprintf_r+0xa4>
 80119c0:	465b      	mov	r3, fp
 80119c2:	4622      	mov	r2, r4
 80119c4:	4629      	mov	r1, r5
 80119c6:	4630      	mov	r0, r6
 80119c8:	f7ff ffa1 	bl	801190e <__sfputs_r>
 80119cc:	3001      	adds	r0, #1
 80119ce:	f000 80a7 	beq.w	8011b20 <_vfiprintf_r+0x1ec>
 80119d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119d4:	445a      	add	r2, fp
 80119d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80119d8:	f89a 3000 	ldrb.w	r3, [sl]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f000 809f 	beq.w	8011b20 <_vfiprintf_r+0x1ec>
 80119e2:	2300      	movs	r3, #0
 80119e4:	f04f 32ff 	mov.w	r2, #4294967295
 80119e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119ec:	f10a 0a01 	add.w	sl, sl, #1
 80119f0:	9304      	str	r3, [sp, #16]
 80119f2:	9307      	str	r3, [sp, #28]
 80119f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80119f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80119fa:	4654      	mov	r4, sl
 80119fc:	2205      	movs	r2, #5
 80119fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a02:	4853      	ldr	r0, [pc, #332]	@ (8011b50 <_vfiprintf_r+0x21c>)
 8011a04:	f7ee fbfc 	bl	8000200 <memchr>
 8011a08:	9a04      	ldr	r2, [sp, #16]
 8011a0a:	b9d8      	cbnz	r0, 8011a44 <_vfiprintf_r+0x110>
 8011a0c:	06d1      	lsls	r1, r2, #27
 8011a0e:	bf44      	itt	mi
 8011a10:	2320      	movmi	r3, #32
 8011a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a16:	0713      	lsls	r3, r2, #28
 8011a18:	bf44      	itt	mi
 8011a1a:	232b      	movmi	r3, #43	@ 0x2b
 8011a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a20:	f89a 3000 	ldrb.w	r3, [sl]
 8011a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a26:	d015      	beq.n	8011a54 <_vfiprintf_r+0x120>
 8011a28:	9a07      	ldr	r2, [sp, #28]
 8011a2a:	4654      	mov	r4, sl
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	f04f 0c0a 	mov.w	ip, #10
 8011a32:	4621      	mov	r1, r4
 8011a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a38:	3b30      	subs	r3, #48	@ 0x30
 8011a3a:	2b09      	cmp	r3, #9
 8011a3c:	d94b      	bls.n	8011ad6 <_vfiprintf_r+0x1a2>
 8011a3e:	b1b0      	cbz	r0, 8011a6e <_vfiprintf_r+0x13a>
 8011a40:	9207      	str	r2, [sp, #28]
 8011a42:	e014      	b.n	8011a6e <_vfiprintf_r+0x13a>
 8011a44:	eba0 0308 	sub.w	r3, r0, r8
 8011a48:	fa09 f303 	lsl.w	r3, r9, r3
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	9304      	str	r3, [sp, #16]
 8011a50:	46a2      	mov	sl, r4
 8011a52:	e7d2      	b.n	80119fa <_vfiprintf_r+0xc6>
 8011a54:	9b03      	ldr	r3, [sp, #12]
 8011a56:	1d19      	adds	r1, r3, #4
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	9103      	str	r1, [sp, #12]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	bfbb      	ittet	lt
 8011a60:	425b      	neglt	r3, r3
 8011a62:	f042 0202 	orrlt.w	r2, r2, #2
 8011a66:	9307      	strge	r3, [sp, #28]
 8011a68:	9307      	strlt	r3, [sp, #28]
 8011a6a:	bfb8      	it	lt
 8011a6c:	9204      	strlt	r2, [sp, #16]
 8011a6e:	7823      	ldrb	r3, [r4, #0]
 8011a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a72:	d10a      	bne.n	8011a8a <_vfiprintf_r+0x156>
 8011a74:	7863      	ldrb	r3, [r4, #1]
 8011a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a78:	d132      	bne.n	8011ae0 <_vfiprintf_r+0x1ac>
 8011a7a:	9b03      	ldr	r3, [sp, #12]
 8011a7c:	1d1a      	adds	r2, r3, #4
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	9203      	str	r2, [sp, #12]
 8011a82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a86:	3402      	adds	r4, #2
 8011a88:	9305      	str	r3, [sp, #20]
 8011a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011b60 <_vfiprintf_r+0x22c>
 8011a8e:	7821      	ldrb	r1, [r4, #0]
 8011a90:	2203      	movs	r2, #3
 8011a92:	4650      	mov	r0, sl
 8011a94:	f7ee fbb4 	bl	8000200 <memchr>
 8011a98:	b138      	cbz	r0, 8011aaa <_vfiprintf_r+0x176>
 8011a9a:	9b04      	ldr	r3, [sp, #16]
 8011a9c:	eba0 000a 	sub.w	r0, r0, sl
 8011aa0:	2240      	movs	r2, #64	@ 0x40
 8011aa2:	4082      	lsls	r2, r0
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	3401      	adds	r4, #1
 8011aa8:	9304      	str	r3, [sp, #16]
 8011aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aae:	4829      	ldr	r0, [pc, #164]	@ (8011b54 <_vfiprintf_r+0x220>)
 8011ab0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ab4:	2206      	movs	r2, #6
 8011ab6:	f7ee fba3 	bl	8000200 <memchr>
 8011aba:	2800      	cmp	r0, #0
 8011abc:	d03f      	beq.n	8011b3e <_vfiprintf_r+0x20a>
 8011abe:	4b26      	ldr	r3, [pc, #152]	@ (8011b58 <_vfiprintf_r+0x224>)
 8011ac0:	bb1b      	cbnz	r3, 8011b0a <_vfiprintf_r+0x1d6>
 8011ac2:	9b03      	ldr	r3, [sp, #12]
 8011ac4:	3307      	adds	r3, #7
 8011ac6:	f023 0307 	bic.w	r3, r3, #7
 8011aca:	3308      	adds	r3, #8
 8011acc:	9303      	str	r3, [sp, #12]
 8011ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ad0:	443b      	add	r3, r7
 8011ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ad4:	e76a      	b.n	80119ac <_vfiprintf_r+0x78>
 8011ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ada:	460c      	mov	r4, r1
 8011adc:	2001      	movs	r0, #1
 8011ade:	e7a8      	b.n	8011a32 <_vfiprintf_r+0xfe>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	3401      	adds	r4, #1
 8011ae4:	9305      	str	r3, [sp, #20]
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	f04f 0c0a 	mov.w	ip, #10
 8011aec:	4620      	mov	r0, r4
 8011aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011af2:	3a30      	subs	r2, #48	@ 0x30
 8011af4:	2a09      	cmp	r2, #9
 8011af6:	d903      	bls.n	8011b00 <_vfiprintf_r+0x1cc>
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d0c6      	beq.n	8011a8a <_vfiprintf_r+0x156>
 8011afc:	9105      	str	r1, [sp, #20]
 8011afe:	e7c4      	b.n	8011a8a <_vfiprintf_r+0x156>
 8011b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b04:	4604      	mov	r4, r0
 8011b06:	2301      	movs	r3, #1
 8011b08:	e7f0      	b.n	8011aec <_vfiprintf_r+0x1b8>
 8011b0a:	ab03      	add	r3, sp, #12
 8011b0c:	9300      	str	r3, [sp, #0]
 8011b0e:	462a      	mov	r2, r5
 8011b10:	4b12      	ldr	r3, [pc, #72]	@ (8011b5c <_vfiprintf_r+0x228>)
 8011b12:	a904      	add	r1, sp, #16
 8011b14:	4630      	mov	r0, r6
 8011b16:	f7fd fde1 	bl	800f6dc <_printf_float>
 8011b1a:	4607      	mov	r7, r0
 8011b1c:	1c78      	adds	r0, r7, #1
 8011b1e:	d1d6      	bne.n	8011ace <_vfiprintf_r+0x19a>
 8011b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b22:	07d9      	lsls	r1, r3, #31
 8011b24:	d405      	bmi.n	8011b32 <_vfiprintf_r+0x1fe>
 8011b26:	89ab      	ldrh	r3, [r5, #12]
 8011b28:	059a      	lsls	r2, r3, #22
 8011b2a:	d402      	bmi.n	8011b32 <_vfiprintf_r+0x1fe>
 8011b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b2e:	f7fe fb55 	bl	80101dc <__retarget_lock_release_recursive>
 8011b32:	89ab      	ldrh	r3, [r5, #12]
 8011b34:	065b      	lsls	r3, r3, #25
 8011b36:	f53f af1f 	bmi.w	8011978 <_vfiprintf_r+0x44>
 8011b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b3c:	e71e      	b.n	801197c <_vfiprintf_r+0x48>
 8011b3e:	ab03      	add	r3, sp, #12
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	462a      	mov	r2, r5
 8011b44:	4b05      	ldr	r3, [pc, #20]	@ (8011b5c <_vfiprintf_r+0x228>)
 8011b46:	a904      	add	r1, sp, #16
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f7fe f85f 	bl	800fc0c <_printf_i>
 8011b4e:	e7e4      	b.n	8011b1a <_vfiprintf_r+0x1e6>
 8011b50:	08017850 	.word	0x08017850
 8011b54:	0801785a 	.word	0x0801785a
 8011b58:	0800f6dd 	.word	0x0800f6dd
 8011b5c:	0801190f 	.word	0x0801190f
 8011b60:	08017856 	.word	0x08017856

08011b64 <__sflush_r>:
 8011b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b6c:	0716      	lsls	r6, r2, #28
 8011b6e:	4605      	mov	r5, r0
 8011b70:	460c      	mov	r4, r1
 8011b72:	d454      	bmi.n	8011c1e <__sflush_r+0xba>
 8011b74:	684b      	ldr	r3, [r1, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	dc02      	bgt.n	8011b80 <__sflush_r+0x1c>
 8011b7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	dd48      	ble.n	8011c12 <__sflush_r+0xae>
 8011b80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b82:	2e00      	cmp	r6, #0
 8011b84:	d045      	beq.n	8011c12 <__sflush_r+0xae>
 8011b86:	2300      	movs	r3, #0
 8011b88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b8c:	682f      	ldr	r7, [r5, #0]
 8011b8e:	6a21      	ldr	r1, [r4, #32]
 8011b90:	602b      	str	r3, [r5, #0]
 8011b92:	d030      	beq.n	8011bf6 <__sflush_r+0x92>
 8011b94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	0759      	lsls	r1, r3, #29
 8011b9a:	d505      	bpl.n	8011ba8 <__sflush_r+0x44>
 8011b9c:	6863      	ldr	r3, [r4, #4]
 8011b9e:	1ad2      	subs	r2, r2, r3
 8011ba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ba2:	b10b      	cbz	r3, 8011ba8 <__sflush_r+0x44>
 8011ba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ba6:	1ad2      	subs	r2, r2, r3
 8011ba8:	2300      	movs	r3, #0
 8011baa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bac:	6a21      	ldr	r1, [r4, #32]
 8011bae:	4628      	mov	r0, r5
 8011bb0:	47b0      	blx	r6
 8011bb2:	1c43      	adds	r3, r0, #1
 8011bb4:	89a3      	ldrh	r3, [r4, #12]
 8011bb6:	d106      	bne.n	8011bc6 <__sflush_r+0x62>
 8011bb8:	6829      	ldr	r1, [r5, #0]
 8011bba:	291d      	cmp	r1, #29
 8011bbc:	d82b      	bhi.n	8011c16 <__sflush_r+0xb2>
 8011bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8011c68 <__sflush_r+0x104>)
 8011bc0:	410a      	asrs	r2, r1
 8011bc2:	07d6      	lsls	r6, r2, #31
 8011bc4:	d427      	bmi.n	8011c16 <__sflush_r+0xb2>
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	6062      	str	r2, [r4, #4]
 8011bca:	04d9      	lsls	r1, r3, #19
 8011bcc:	6922      	ldr	r2, [r4, #16]
 8011bce:	6022      	str	r2, [r4, #0]
 8011bd0:	d504      	bpl.n	8011bdc <__sflush_r+0x78>
 8011bd2:	1c42      	adds	r2, r0, #1
 8011bd4:	d101      	bne.n	8011bda <__sflush_r+0x76>
 8011bd6:	682b      	ldr	r3, [r5, #0]
 8011bd8:	b903      	cbnz	r3, 8011bdc <__sflush_r+0x78>
 8011bda:	6560      	str	r0, [r4, #84]	@ 0x54
 8011bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bde:	602f      	str	r7, [r5, #0]
 8011be0:	b1b9      	cbz	r1, 8011c12 <__sflush_r+0xae>
 8011be2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011be6:	4299      	cmp	r1, r3
 8011be8:	d002      	beq.n	8011bf0 <__sflush_r+0x8c>
 8011bea:	4628      	mov	r0, r5
 8011bec:	f7ff f954 	bl	8010e98 <_free_r>
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bf4:	e00d      	b.n	8011c12 <__sflush_r+0xae>
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	47b0      	blx	r6
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	1c50      	adds	r0, r2, #1
 8011c00:	d1c9      	bne.n	8011b96 <__sflush_r+0x32>
 8011c02:	682b      	ldr	r3, [r5, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d0c6      	beq.n	8011b96 <__sflush_r+0x32>
 8011c08:	2b1d      	cmp	r3, #29
 8011c0a:	d001      	beq.n	8011c10 <__sflush_r+0xac>
 8011c0c:	2b16      	cmp	r3, #22
 8011c0e:	d11e      	bne.n	8011c4e <__sflush_r+0xea>
 8011c10:	602f      	str	r7, [r5, #0]
 8011c12:	2000      	movs	r0, #0
 8011c14:	e022      	b.n	8011c5c <__sflush_r+0xf8>
 8011c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c1a:	b21b      	sxth	r3, r3
 8011c1c:	e01b      	b.n	8011c56 <__sflush_r+0xf2>
 8011c1e:	690f      	ldr	r7, [r1, #16]
 8011c20:	2f00      	cmp	r7, #0
 8011c22:	d0f6      	beq.n	8011c12 <__sflush_r+0xae>
 8011c24:	0793      	lsls	r3, r2, #30
 8011c26:	680e      	ldr	r6, [r1, #0]
 8011c28:	bf08      	it	eq
 8011c2a:	694b      	ldreq	r3, [r1, #20]
 8011c2c:	600f      	str	r7, [r1, #0]
 8011c2e:	bf18      	it	ne
 8011c30:	2300      	movne	r3, #0
 8011c32:	eba6 0807 	sub.w	r8, r6, r7
 8011c36:	608b      	str	r3, [r1, #8]
 8011c38:	f1b8 0f00 	cmp.w	r8, #0
 8011c3c:	dde9      	ble.n	8011c12 <__sflush_r+0xae>
 8011c3e:	6a21      	ldr	r1, [r4, #32]
 8011c40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011c42:	4643      	mov	r3, r8
 8011c44:	463a      	mov	r2, r7
 8011c46:	4628      	mov	r0, r5
 8011c48:	47b0      	blx	r6
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	dc08      	bgt.n	8011c60 <__sflush_r+0xfc>
 8011c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c56:	81a3      	strh	r3, [r4, #12]
 8011c58:	f04f 30ff 	mov.w	r0, #4294967295
 8011c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c60:	4407      	add	r7, r0
 8011c62:	eba8 0800 	sub.w	r8, r8, r0
 8011c66:	e7e7      	b.n	8011c38 <__sflush_r+0xd4>
 8011c68:	dfbffffe 	.word	0xdfbffffe

08011c6c <_fflush_r>:
 8011c6c:	b538      	push	{r3, r4, r5, lr}
 8011c6e:	690b      	ldr	r3, [r1, #16]
 8011c70:	4605      	mov	r5, r0
 8011c72:	460c      	mov	r4, r1
 8011c74:	b913      	cbnz	r3, 8011c7c <_fflush_r+0x10>
 8011c76:	2500      	movs	r5, #0
 8011c78:	4628      	mov	r0, r5
 8011c7a:	bd38      	pop	{r3, r4, r5, pc}
 8011c7c:	b118      	cbz	r0, 8011c86 <_fflush_r+0x1a>
 8011c7e:	6a03      	ldr	r3, [r0, #32]
 8011c80:	b90b      	cbnz	r3, 8011c86 <_fflush_r+0x1a>
 8011c82:	f7fe f96f 	bl	800ff64 <__sinit>
 8011c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d0f3      	beq.n	8011c76 <_fflush_r+0xa>
 8011c8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c90:	07d0      	lsls	r0, r2, #31
 8011c92:	d404      	bmi.n	8011c9e <_fflush_r+0x32>
 8011c94:	0599      	lsls	r1, r3, #22
 8011c96:	d402      	bmi.n	8011c9e <_fflush_r+0x32>
 8011c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c9a:	f7fe fa9e 	bl	80101da <__retarget_lock_acquire_recursive>
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	4621      	mov	r1, r4
 8011ca2:	f7ff ff5f 	bl	8011b64 <__sflush_r>
 8011ca6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ca8:	07da      	lsls	r2, r3, #31
 8011caa:	4605      	mov	r5, r0
 8011cac:	d4e4      	bmi.n	8011c78 <_fflush_r+0xc>
 8011cae:	89a3      	ldrh	r3, [r4, #12]
 8011cb0:	059b      	lsls	r3, r3, #22
 8011cb2:	d4e1      	bmi.n	8011c78 <_fflush_r+0xc>
 8011cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cb6:	f7fe fa91 	bl	80101dc <__retarget_lock_release_recursive>
 8011cba:	e7dd      	b.n	8011c78 <_fflush_r+0xc>

08011cbc <__swbuf_r>:
 8011cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cbe:	460e      	mov	r6, r1
 8011cc0:	4614      	mov	r4, r2
 8011cc2:	4605      	mov	r5, r0
 8011cc4:	b118      	cbz	r0, 8011cce <__swbuf_r+0x12>
 8011cc6:	6a03      	ldr	r3, [r0, #32]
 8011cc8:	b90b      	cbnz	r3, 8011cce <__swbuf_r+0x12>
 8011cca:	f7fe f94b 	bl	800ff64 <__sinit>
 8011cce:	69a3      	ldr	r3, [r4, #24]
 8011cd0:	60a3      	str	r3, [r4, #8]
 8011cd2:	89a3      	ldrh	r3, [r4, #12]
 8011cd4:	071a      	lsls	r2, r3, #28
 8011cd6:	d501      	bpl.n	8011cdc <__swbuf_r+0x20>
 8011cd8:	6923      	ldr	r3, [r4, #16]
 8011cda:	b943      	cbnz	r3, 8011cee <__swbuf_r+0x32>
 8011cdc:	4621      	mov	r1, r4
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f000 f82a 	bl	8011d38 <__swsetup_r>
 8011ce4:	b118      	cbz	r0, 8011cee <__swbuf_r+0x32>
 8011ce6:	f04f 37ff 	mov.w	r7, #4294967295
 8011cea:	4638      	mov	r0, r7
 8011cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cee:	6823      	ldr	r3, [r4, #0]
 8011cf0:	6922      	ldr	r2, [r4, #16]
 8011cf2:	1a98      	subs	r0, r3, r2
 8011cf4:	6963      	ldr	r3, [r4, #20]
 8011cf6:	b2f6      	uxtb	r6, r6
 8011cf8:	4283      	cmp	r3, r0
 8011cfa:	4637      	mov	r7, r6
 8011cfc:	dc05      	bgt.n	8011d0a <__swbuf_r+0x4e>
 8011cfe:	4621      	mov	r1, r4
 8011d00:	4628      	mov	r0, r5
 8011d02:	f7ff ffb3 	bl	8011c6c <_fflush_r>
 8011d06:	2800      	cmp	r0, #0
 8011d08:	d1ed      	bne.n	8011ce6 <__swbuf_r+0x2a>
 8011d0a:	68a3      	ldr	r3, [r4, #8]
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	60a3      	str	r3, [r4, #8]
 8011d10:	6823      	ldr	r3, [r4, #0]
 8011d12:	1c5a      	adds	r2, r3, #1
 8011d14:	6022      	str	r2, [r4, #0]
 8011d16:	701e      	strb	r6, [r3, #0]
 8011d18:	6962      	ldr	r2, [r4, #20]
 8011d1a:	1c43      	adds	r3, r0, #1
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d004      	beq.n	8011d2a <__swbuf_r+0x6e>
 8011d20:	89a3      	ldrh	r3, [r4, #12]
 8011d22:	07db      	lsls	r3, r3, #31
 8011d24:	d5e1      	bpl.n	8011cea <__swbuf_r+0x2e>
 8011d26:	2e0a      	cmp	r6, #10
 8011d28:	d1df      	bne.n	8011cea <__swbuf_r+0x2e>
 8011d2a:	4621      	mov	r1, r4
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	f7ff ff9d 	bl	8011c6c <_fflush_r>
 8011d32:	2800      	cmp	r0, #0
 8011d34:	d0d9      	beq.n	8011cea <__swbuf_r+0x2e>
 8011d36:	e7d6      	b.n	8011ce6 <__swbuf_r+0x2a>

08011d38 <__swsetup_r>:
 8011d38:	b538      	push	{r3, r4, r5, lr}
 8011d3a:	4b29      	ldr	r3, [pc, #164]	@ (8011de0 <__swsetup_r+0xa8>)
 8011d3c:	4605      	mov	r5, r0
 8011d3e:	6818      	ldr	r0, [r3, #0]
 8011d40:	460c      	mov	r4, r1
 8011d42:	b118      	cbz	r0, 8011d4c <__swsetup_r+0x14>
 8011d44:	6a03      	ldr	r3, [r0, #32]
 8011d46:	b90b      	cbnz	r3, 8011d4c <__swsetup_r+0x14>
 8011d48:	f7fe f90c 	bl	800ff64 <__sinit>
 8011d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d50:	0719      	lsls	r1, r3, #28
 8011d52:	d422      	bmi.n	8011d9a <__swsetup_r+0x62>
 8011d54:	06da      	lsls	r2, r3, #27
 8011d56:	d407      	bmi.n	8011d68 <__swsetup_r+0x30>
 8011d58:	2209      	movs	r2, #9
 8011d5a:	602a      	str	r2, [r5, #0]
 8011d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d60:	81a3      	strh	r3, [r4, #12]
 8011d62:	f04f 30ff 	mov.w	r0, #4294967295
 8011d66:	e033      	b.n	8011dd0 <__swsetup_r+0x98>
 8011d68:	0758      	lsls	r0, r3, #29
 8011d6a:	d512      	bpl.n	8011d92 <__swsetup_r+0x5a>
 8011d6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d6e:	b141      	cbz	r1, 8011d82 <__swsetup_r+0x4a>
 8011d70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d74:	4299      	cmp	r1, r3
 8011d76:	d002      	beq.n	8011d7e <__swsetup_r+0x46>
 8011d78:	4628      	mov	r0, r5
 8011d7a:	f7ff f88d 	bl	8010e98 <_free_r>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d82:	89a3      	ldrh	r3, [r4, #12]
 8011d84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d88:	81a3      	strh	r3, [r4, #12]
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	6063      	str	r3, [r4, #4]
 8011d8e:	6923      	ldr	r3, [r4, #16]
 8011d90:	6023      	str	r3, [r4, #0]
 8011d92:	89a3      	ldrh	r3, [r4, #12]
 8011d94:	f043 0308 	orr.w	r3, r3, #8
 8011d98:	81a3      	strh	r3, [r4, #12]
 8011d9a:	6923      	ldr	r3, [r4, #16]
 8011d9c:	b94b      	cbnz	r3, 8011db2 <__swsetup_r+0x7a>
 8011d9e:	89a3      	ldrh	r3, [r4, #12]
 8011da0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011da8:	d003      	beq.n	8011db2 <__swsetup_r+0x7a>
 8011daa:	4621      	mov	r1, r4
 8011dac:	4628      	mov	r0, r5
 8011dae:	f000 f8eb 	bl	8011f88 <__smakebuf_r>
 8011db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011db6:	f013 0201 	ands.w	r2, r3, #1
 8011dba:	d00a      	beq.n	8011dd2 <__swsetup_r+0x9a>
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	60a2      	str	r2, [r4, #8]
 8011dc0:	6962      	ldr	r2, [r4, #20]
 8011dc2:	4252      	negs	r2, r2
 8011dc4:	61a2      	str	r2, [r4, #24]
 8011dc6:	6922      	ldr	r2, [r4, #16]
 8011dc8:	b942      	cbnz	r2, 8011ddc <__swsetup_r+0xa4>
 8011dca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011dce:	d1c5      	bne.n	8011d5c <__swsetup_r+0x24>
 8011dd0:	bd38      	pop	{r3, r4, r5, pc}
 8011dd2:	0799      	lsls	r1, r3, #30
 8011dd4:	bf58      	it	pl
 8011dd6:	6962      	ldrpl	r2, [r4, #20]
 8011dd8:	60a2      	str	r2, [r4, #8]
 8011dda:	e7f4      	b.n	8011dc6 <__swsetup_r+0x8e>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	e7f7      	b.n	8011dd0 <__swsetup_r+0x98>
 8011de0:	20000038 	.word	0x20000038

08011de4 <memmove>:
 8011de4:	4288      	cmp	r0, r1
 8011de6:	b510      	push	{r4, lr}
 8011de8:	eb01 0402 	add.w	r4, r1, r2
 8011dec:	d902      	bls.n	8011df4 <memmove+0x10>
 8011dee:	4284      	cmp	r4, r0
 8011df0:	4623      	mov	r3, r4
 8011df2:	d807      	bhi.n	8011e04 <memmove+0x20>
 8011df4:	1e43      	subs	r3, r0, #1
 8011df6:	42a1      	cmp	r1, r4
 8011df8:	d008      	beq.n	8011e0c <memmove+0x28>
 8011dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e02:	e7f8      	b.n	8011df6 <memmove+0x12>
 8011e04:	4402      	add	r2, r0
 8011e06:	4601      	mov	r1, r0
 8011e08:	428a      	cmp	r2, r1
 8011e0a:	d100      	bne.n	8011e0e <memmove+0x2a>
 8011e0c:	bd10      	pop	{r4, pc}
 8011e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e16:	e7f7      	b.n	8011e08 <memmove+0x24>

08011e18 <__assert_func>:
 8011e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e1a:	4614      	mov	r4, r2
 8011e1c:	461a      	mov	r2, r3
 8011e1e:	4b09      	ldr	r3, [pc, #36]	@ (8011e44 <__assert_func+0x2c>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	4605      	mov	r5, r0
 8011e24:	68d8      	ldr	r0, [r3, #12]
 8011e26:	b954      	cbnz	r4, 8011e3e <__assert_func+0x26>
 8011e28:	4b07      	ldr	r3, [pc, #28]	@ (8011e48 <__assert_func+0x30>)
 8011e2a:	461c      	mov	r4, r3
 8011e2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e30:	9100      	str	r1, [sp, #0]
 8011e32:	462b      	mov	r3, r5
 8011e34:	4905      	ldr	r1, [pc, #20]	@ (8011e4c <__assert_func+0x34>)
 8011e36:	f000 f86f 	bl	8011f18 <fiprintf>
 8011e3a:	f000 f903 	bl	8012044 <abort>
 8011e3e:	4b04      	ldr	r3, [pc, #16]	@ (8011e50 <__assert_func+0x38>)
 8011e40:	e7f4      	b.n	8011e2c <__assert_func+0x14>
 8011e42:	bf00      	nop
 8011e44:	20000038 	.word	0x20000038
 8011e48:	080178a6 	.word	0x080178a6
 8011e4c:	08017878 	.word	0x08017878
 8011e50:	0801786b 	.word	0x0801786b

08011e54 <_calloc_r>:
 8011e54:	b570      	push	{r4, r5, r6, lr}
 8011e56:	fba1 5402 	umull	r5, r4, r1, r2
 8011e5a:	b93c      	cbnz	r4, 8011e6c <_calloc_r+0x18>
 8011e5c:	4629      	mov	r1, r5
 8011e5e:	f7fd fb11 	bl	800f484 <_malloc_r>
 8011e62:	4606      	mov	r6, r0
 8011e64:	b928      	cbnz	r0, 8011e72 <_calloc_r+0x1e>
 8011e66:	2600      	movs	r6, #0
 8011e68:	4630      	mov	r0, r6
 8011e6a:	bd70      	pop	{r4, r5, r6, pc}
 8011e6c:	220c      	movs	r2, #12
 8011e6e:	6002      	str	r2, [r0, #0]
 8011e70:	e7f9      	b.n	8011e66 <_calloc_r+0x12>
 8011e72:	462a      	mov	r2, r5
 8011e74:	4621      	mov	r1, r4
 8011e76:	f7fe f922 	bl	80100be <memset>
 8011e7a:	e7f5      	b.n	8011e68 <_calloc_r+0x14>

08011e7c <__ascii_mbtowc>:
 8011e7c:	b082      	sub	sp, #8
 8011e7e:	b901      	cbnz	r1, 8011e82 <__ascii_mbtowc+0x6>
 8011e80:	a901      	add	r1, sp, #4
 8011e82:	b142      	cbz	r2, 8011e96 <__ascii_mbtowc+0x1a>
 8011e84:	b14b      	cbz	r3, 8011e9a <__ascii_mbtowc+0x1e>
 8011e86:	7813      	ldrb	r3, [r2, #0]
 8011e88:	600b      	str	r3, [r1, #0]
 8011e8a:	7812      	ldrb	r2, [r2, #0]
 8011e8c:	1e10      	subs	r0, r2, #0
 8011e8e:	bf18      	it	ne
 8011e90:	2001      	movne	r0, #1
 8011e92:	b002      	add	sp, #8
 8011e94:	4770      	bx	lr
 8011e96:	4610      	mov	r0, r2
 8011e98:	e7fb      	b.n	8011e92 <__ascii_mbtowc+0x16>
 8011e9a:	f06f 0001 	mvn.w	r0, #1
 8011e9e:	e7f8      	b.n	8011e92 <__ascii_mbtowc+0x16>

08011ea0 <_realloc_r>:
 8011ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea4:	4680      	mov	r8, r0
 8011ea6:	4615      	mov	r5, r2
 8011ea8:	460c      	mov	r4, r1
 8011eaa:	b921      	cbnz	r1, 8011eb6 <_realloc_r+0x16>
 8011eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	f7fd bae7 	b.w	800f484 <_malloc_r>
 8011eb6:	b92a      	cbnz	r2, 8011ec4 <_realloc_r+0x24>
 8011eb8:	f7fe ffee 	bl	8010e98 <_free_r>
 8011ebc:	2400      	movs	r4, #0
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec4:	f000 f8c5 	bl	8012052 <_malloc_usable_size_r>
 8011ec8:	4285      	cmp	r5, r0
 8011eca:	4606      	mov	r6, r0
 8011ecc:	d802      	bhi.n	8011ed4 <_realloc_r+0x34>
 8011ece:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011ed2:	d8f4      	bhi.n	8011ebe <_realloc_r+0x1e>
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	4640      	mov	r0, r8
 8011ed8:	f7fd fad4 	bl	800f484 <_malloc_r>
 8011edc:	4607      	mov	r7, r0
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	d0ec      	beq.n	8011ebc <_realloc_r+0x1c>
 8011ee2:	42b5      	cmp	r5, r6
 8011ee4:	462a      	mov	r2, r5
 8011ee6:	4621      	mov	r1, r4
 8011ee8:	bf28      	it	cs
 8011eea:	4632      	movcs	r2, r6
 8011eec:	f7fe f977 	bl	80101de <memcpy>
 8011ef0:	4621      	mov	r1, r4
 8011ef2:	4640      	mov	r0, r8
 8011ef4:	f7fe ffd0 	bl	8010e98 <_free_r>
 8011ef8:	463c      	mov	r4, r7
 8011efa:	e7e0      	b.n	8011ebe <_realloc_r+0x1e>

08011efc <__ascii_wctomb>:
 8011efc:	4603      	mov	r3, r0
 8011efe:	4608      	mov	r0, r1
 8011f00:	b141      	cbz	r1, 8011f14 <__ascii_wctomb+0x18>
 8011f02:	2aff      	cmp	r2, #255	@ 0xff
 8011f04:	d904      	bls.n	8011f10 <__ascii_wctomb+0x14>
 8011f06:	228a      	movs	r2, #138	@ 0x8a
 8011f08:	601a      	str	r2, [r3, #0]
 8011f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f0e:	4770      	bx	lr
 8011f10:	700a      	strb	r2, [r1, #0]
 8011f12:	2001      	movs	r0, #1
 8011f14:	4770      	bx	lr
	...

08011f18 <fiprintf>:
 8011f18:	b40e      	push	{r1, r2, r3}
 8011f1a:	b503      	push	{r0, r1, lr}
 8011f1c:	4601      	mov	r1, r0
 8011f1e:	ab03      	add	r3, sp, #12
 8011f20:	4805      	ldr	r0, [pc, #20]	@ (8011f38 <fiprintf+0x20>)
 8011f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f26:	6800      	ldr	r0, [r0, #0]
 8011f28:	9301      	str	r3, [sp, #4]
 8011f2a:	f7ff fd03 	bl	8011934 <_vfiprintf_r>
 8011f2e:	b002      	add	sp, #8
 8011f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f34:	b003      	add	sp, #12
 8011f36:	4770      	bx	lr
 8011f38:	20000038 	.word	0x20000038

08011f3c <__swhatbuf_r>:
 8011f3c:	b570      	push	{r4, r5, r6, lr}
 8011f3e:	460c      	mov	r4, r1
 8011f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f44:	2900      	cmp	r1, #0
 8011f46:	b096      	sub	sp, #88	@ 0x58
 8011f48:	4615      	mov	r5, r2
 8011f4a:	461e      	mov	r6, r3
 8011f4c:	da0d      	bge.n	8011f6a <__swhatbuf_r+0x2e>
 8011f4e:	89a3      	ldrh	r3, [r4, #12]
 8011f50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011f54:	f04f 0100 	mov.w	r1, #0
 8011f58:	bf14      	ite	ne
 8011f5a:	2340      	movne	r3, #64	@ 0x40
 8011f5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011f60:	2000      	movs	r0, #0
 8011f62:	6031      	str	r1, [r6, #0]
 8011f64:	602b      	str	r3, [r5, #0]
 8011f66:	b016      	add	sp, #88	@ 0x58
 8011f68:	bd70      	pop	{r4, r5, r6, pc}
 8011f6a:	466a      	mov	r2, sp
 8011f6c:	f000 f848 	bl	8012000 <_fstat_r>
 8011f70:	2800      	cmp	r0, #0
 8011f72:	dbec      	blt.n	8011f4e <__swhatbuf_r+0x12>
 8011f74:	9901      	ldr	r1, [sp, #4]
 8011f76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f7e:	4259      	negs	r1, r3
 8011f80:	4159      	adcs	r1, r3
 8011f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f86:	e7eb      	b.n	8011f60 <__swhatbuf_r+0x24>

08011f88 <__smakebuf_r>:
 8011f88:	898b      	ldrh	r3, [r1, #12]
 8011f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f8c:	079d      	lsls	r5, r3, #30
 8011f8e:	4606      	mov	r6, r0
 8011f90:	460c      	mov	r4, r1
 8011f92:	d507      	bpl.n	8011fa4 <__smakebuf_r+0x1c>
 8011f94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f98:	6023      	str	r3, [r4, #0]
 8011f9a:	6123      	str	r3, [r4, #16]
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	6163      	str	r3, [r4, #20]
 8011fa0:	b003      	add	sp, #12
 8011fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fa4:	ab01      	add	r3, sp, #4
 8011fa6:	466a      	mov	r2, sp
 8011fa8:	f7ff ffc8 	bl	8011f3c <__swhatbuf_r>
 8011fac:	9f00      	ldr	r7, [sp, #0]
 8011fae:	4605      	mov	r5, r0
 8011fb0:	4639      	mov	r1, r7
 8011fb2:	4630      	mov	r0, r6
 8011fb4:	f7fd fa66 	bl	800f484 <_malloc_r>
 8011fb8:	b948      	cbnz	r0, 8011fce <__smakebuf_r+0x46>
 8011fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fbe:	059a      	lsls	r2, r3, #22
 8011fc0:	d4ee      	bmi.n	8011fa0 <__smakebuf_r+0x18>
 8011fc2:	f023 0303 	bic.w	r3, r3, #3
 8011fc6:	f043 0302 	orr.w	r3, r3, #2
 8011fca:	81a3      	strh	r3, [r4, #12]
 8011fcc:	e7e2      	b.n	8011f94 <__smakebuf_r+0xc>
 8011fce:	89a3      	ldrh	r3, [r4, #12]
 8011fd0:	6020      	str	r0, [r4, #0]
 8011fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fd6:	81a3      	strh	r3, [r4, #12]
 8011fd8:	9b01      	ldr	r3, [sp, #4]
 8011fda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011fde:	b15b      	cbz	r3, 8011ff8 <__smakebuf_r+0x70>
 8011fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	f000 f81d 	bl	8012024 <_isatty_r>
 8011fea:	b128      	cbz	r0, 8011ff8 <__smakebuf_r+0x70>
 8011fec:	89a3      	ldrh	r3, [r4, #12]
 8011fee:	f023 0303 	bic.w	r3, r3, #3
 8011ff2:	f043 0301 	orr.w	r3, r3, #1
 8011ff6:	81a3      	strh	r3, [r4, #12]
 8011ff8:	89a3      	ldrh	r3, [r4, #12]
 8011ffa:	431d      	orrs	r5, r3
 8011ffc:	81a5      	strh	r5, [r4, #12]
 8011ffe:	e7cf      	b.n	8011fa0 <__smakebuf_r+0x18>

08012000 <_fstat_r>:
 8012000:	b538      	push	{r3, r4, r5, lr}
 8012002:	4d07      	ldr	r5, [pc, #28]	@ (8012020 <_fstat_r+0x20>)
 8012004:	2300      	movs	r3, #0
 8012006:	4604      	mov	r4, r0
 8012008:	4608      	mov	r0, r1
 801200a:	4611      	mov	r1, r2
 801200c:	602b      	str	r3, [r5, #0]
 801200e:	f7f2 fb8d 	bl	800472c <_fstat>
 8012012:	1c43      	adds	r3, r0, #1
 8012014:	d102      	bne.n	801201c <_fstat_r+0x1c>
 8012016:	682b      	ldr	r3, [r5, #0]
 8012018:	b103      	cbz	r3, 801201c <_fstat_r+0x1c>
 801201a:	6023      	str	r3, [r4, #0]
 801201c:	bd38      	pop	{r3, r4, r5, pc}
 801201e:	bf00      	nop
 8012020:	20000bec 	.word	0x20000bec

08012024 <_isatty_r>:
 8012024:	b538      	push	{r3, r4, r5, lr}
 8012026:	4d06      	ldr	r5, [pc, #24]	@ (8012040 <_isatty_r+0x1c>)
 8012028:	2300      	movs	r3, #0
 801202a:	4604      	mov	r4, r0
 801202c:	4608      	mov	r0, r1
 801202e:	602b      	str	r3, [r5, #0]
 8012030:	f7f2 fb8c 	bl	800474c <_isatty>
 8012034:	1c43      	adds	r3, r0, #1
 8012036:	d102      	bne.n	801203e <_isatty_r+0x1a>
 8012038:	682b      	ldr	r3, [r5, #0]
 801203a:	b103      	cbz	r3, 801203e <_isatty_r+0x1a>
 801203c:	6023      	str	r3, [r4, #0]
 801203e:	bd38      	pop	{r3, r4, r5, pc}
 8012040:	20000bec 	.word	0x20000bec

08012044 <abort>:
 8012044:	b508      	push	{r3, lr}
 8012046:	2006      	movs	r0, #6
 8012048:	f000 f834 	bl	80120b4 <raise>
 801204c:	2001      	movs	r0, #1
 801204e:	f7f2 fb1d 	bl	800468c <_exit>

08012052 <_malloc_usable_size_r>:
 8012052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012056:	1f18      	subs	r0, r3, #4
 8012058:	2b00      	cmp	r3, #0
 801205a:	bfbc      	itt	lt
 801205c:	580b      	ldrlt	r3, [r1, r0]
 801205e:	18c0      	addlt	r0, r0, r3
 8012060:	4770      	bx	lr

08012062 <_raise_r>:
 8012062:	291f      	cmp	r1, #31
 8012064:	b538      	push	{r3, r4, r5, lr}
 8012066:	4605      	mov	r5, r0
 8012068:	460c      	mov	r4, r1
 801206a:	d904      	bls.n	8012076 <_raise_r+0x14>
 801206c:	2316      	movs	r3, #22
 801206e:	6003      	str	r3, [r0, #0]
 8012070:	f04f 30ff 	mov.w	r0, #4294967295
 8012074:	bd38      	pop	{r3, r4, r5, pc}
 8012076:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012078:	b112      	cbz	r2, 8012080 <_raise_r+0x1e>
 801207a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801207e:	b94b      	cbnz	r3, 8012094 <_raise_r+0x32>
 8012080:	4628      	mov	r0, r5
 8012082:	f000 f831 	bl	80120e8 <_getpid_r>
 8012086:	4622      	mov	r2, r4
 8012088:	4601      	mov	r1, r0
 801208a:	4628      	mov	r0, r5
 801208c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012090:	f000 b818 	b.w	80120c4 <_kill_r>
 8012094:	2b01      	cmp	r3, #1
 8012096:	d00a      	beq.n	80120ae <_raise_r+0x4c>
 8012098:	1c59      	adds	r1, r3, #1
 801209a:	d103      	bne.n	80120a4 <_raise_r+0x42>
 801209c:	2316      	movs	r3, #22
 801209e:	6003      	str	r3, [r0, #0]
 80120a0:	2001      	movs	r0, #1
 80120a2:	e7e7      	b.n	8012074 <_raise_r+0x12>
 80120a4:	2100      	movs	r1, #0
 80120a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80120aa:	4620      	mov	r0, r4
 80120ac:	4798      	blx	r3
 80120ae:	2000      	movs	r0, #0
 80120b0:	e7e0      	b.n	8012074 <_raise_r+0x12>
	...

080120b4 <raise>:
 80120b4:	4b02      	ldr	r3, [pc, #8]	@ (80120c0 <raise+0xc>)
 80120b6:	4601      	mov	r1, r0
 80120b8:	6818      	ldr	r0, [r3, #0]
 80120ba:	f7ff bfd2 	b.w	8012062 <_raise_r>
 80120be:	bf00      	nop
 80120c0:	20000038 	.word	0x20000038

080120c4 <_kill_r>:
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	4d07      	ldr	r5, [pc, #28]	@ (80120e4 <_kill_r+0x20>)
 80120c8:	2300      	movs	r3, #0
 80120ca:	4604      	mov	r4, r0
 80120cc:	4608      	mov	r0, r1
 80120ce:	4611      	mov	r1, r2
 80120d0:	602b      	str	r3, [r5, #0]
 80120d2:	f7f2 facb 	bl	800466c <_kill>
 80120d6:	1c43      	adds	r3, r0, #1
 80120d8:	d102      	bne.n	80120e0 <_kill_r+0x1c>
 80120da:	682b      	ldr	r3, [r5, #0]
 80120dc:	b103      	cbz	r3, 80120e0 <_kill_r+0x1c>
 80120de:	6023      	str	r3, [r4, #0]
 80120e0:	bd38      	pop	{r3, r4, r5, pc}
 80120e2:	bf00      	nop
 80120e4:	20000bec 	.word	0x20000bec

080120e8 <_getpid_r>:
 80120e8:	f7f2 bab8 	b.w	800465c <_getpid>

080120ec <_init>:
 80120ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ee:	bf00      	nop
 80120f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120f2:	bc08      	pop	{r3}
 80120f4:	469e      	mov	lr, r3
 80120f6:	4770      	bx	lr

080120f8 <_fini>:
 80120f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fa:	bf00      	nop
 80120fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120fe:	bc08      	pop	{r3}
 8012100:	469e      	mov	lr, r3
 8012102:	4770      	bx	lr

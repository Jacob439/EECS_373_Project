
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a8c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058d0  08012c50  08012c50  00013c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018520  08018520  0001a1f8  2**0
                  CONTENTS
  4 .ARM          00000008  08018520  08018520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018528  08018528  0001a1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018528  08018528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801852c  0801852c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08018530  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200001f8  08018728  0001a1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  08018728  0001acfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ea5  00000000  00000000  0001a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047bd  00000000  00000000  000400cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  00044890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a93  00000000  00000000  00046a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304bb  00000000  00000000  0004852b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000299d2  00000000  00000000  000789e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129c93  00000000  00000000  000a23b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cc04b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a434  00000000  00000000  001cc090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001d64c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012c34 	.word	0x08012c34

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	08012c34 	.word	0x08012c34

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <initTempHumSensor+0x1c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000214 	.word	0x20000214

08000f88 <req_measurements>:

// send command to sensor
void req_measurements() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000f8e:	f640 532c 	movw	r3, #3372	@ 0xd2c
 8000f92:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <req_measurements+0x28>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	1d3a      	adds	r2, r7, #4
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	2188      	movs	r1, #136	@ 0x88
 8000fa4:	f007 fac0 	bl	8008528 <HAL_I2C_Master_Transmit>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000214 	.word	0x20000214

08000fb4 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[6];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 6, 1000);
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <read_raw_measurements+0x58>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	463a      	mov	r2, r7
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	2189      	movs	r1, #137	@ 0x89
 8000fca:	f007 fbc5 	bl	8008758 <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000fce:	783b      	ldrb	r3, [r7, #0]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	813b      	strh	r3, [r7, #8]
	data.hum = buf[3] << 8 | buf[4];
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	817b      	strh	r3, [r7, #10]
	return data;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	89ba      	ldrh	r2, [r7, #12]
 8000ffa:	f362 030f 	bfi	r3, r2, #0, #16
 8000ffe:	89fa      	ldrh	r2, [r7, #14]
 8001000:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000214 	.word	0x20000214

08001010 <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 8001016:	f7ff ffb7 	bl	8000f88 <req_measurements>
	raw_data = read_raw_measurements();
 800101a:	f7ff ffcb 	bl	8000fb4 <read_raw_measurements>
 800101e:	4603      	mov	r3, r0
 8001020:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 8001022:	8abb      	ldrh	r3, [r7, #20]
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 8001026:	8afb      	ldrh	r3, [r7, #22]
 8001028:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001034:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001098 <get_temp_hum+0x88>
 8001038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800109c <get_temp_hum+0x8c>
 8001040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001044:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80010a0 <get_temp_hum+0x90>
 8001048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800104c:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001098 <get_temp_hum+0x88>
 800105e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001062:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80010a4 <get_temp_hum+0x94>
 8001066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106a:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107a:	e883 0003 	stmia.w	r3, {r0, r1}
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	ee07 2a10 	vmov	s14, r2
 8001086:	ee07 3a90 	vmov	s15, r3
}
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	3728      	adds	r7, #40	@ 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	477fff00 	.word	0x477fff00
 800109c:	439d8000 	.word	0x439d8000
 80010a0:	42340000 	.word	0x42340000
 80010a4:	42c80000 	.word	0x42c80000

080010a8 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 80010a8:	b084      	sub	sp, #16
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	f107 0c08 	add.w	ip, r7, #8
 80010b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <JOYSTICK_INIT+0x2c>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2254      	movs	r2, #84	@ 0x54
 80010c0:	4619      	mov	r1, r3
 80010c2:	f00f fe30 	bl	8010d26 <memcpy>
	}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ce:	b004      	add	sp, #16
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2000021c 	.word	0x2000021c

080010d8 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	811a      	strh	r2, [r3, #8]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 8001100:	f107 0214 	add.w	r2, r7, #20
 8001104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	2140      	movs	r1, #64	@ 0x40
 800110e:	4810      	ldr	r0, [pc, #64]	@ (8001150 <readRegister+0x78>)
 8001110:	f007 fa0a 	bl	8008528 <HAL_I2C_Master_Transmit>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <readRegister+0x7c>)
 800111a:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 800111c:	f107 0208 	add.w	r2, r7, #8
 8001120:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2140      	movs	r1, #64	@ 0x40
 800112a:	4809      	ldr	r0, [pc, #36]	@ (8001150 <readRegister+0x78>)
 800112c:	f007 fb14 	bl	8008758 <HAL_I2C_Master_Receive>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <readRegister+0x7c>)
 8001136:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <readRegister+0x7c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <readRegister+0x6e>
    }
    return buf0[0];
 8001144:	7a3b      	ldrb	r3, [r7, #8]
  }
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000021c 	.word	0x2000021c
 8001154:	20000218 	.word	0x20000218

08001158 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 800115e:	2003      	movs	r0, #3
 8001160:	f7ff ffba 	bl	80010d8 <readRegister>
 8001164:	4603      	mov	r3, r0
 8001166:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 8001168:	2004      	movs	r0, #4
 800116a:	f7ff ffb5 	bl	80010d8 <readRegister>
 800116e:	4603      	mov	r3, r0
 8001170:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	021a      	lsls	r2, r3, #8
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	119b      	asrs	r3, r3, #6
 800117c:	b29b      	uxth	r3, r3
  }
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 800118c:	2005      	movs	r0, #5
 800118e:	f7ff ffa3 	bl	80010d8 <readRegister>
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 8001196:	2006      	movs	r0, #6
 8001198:	f7ff ff9e 	bl	80010d8 <readRegister>
 800119c:	4603      	mov	r3, r0
 800119e:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	021a      	lsls	r2, r3, #8
 80011a4:	88bb      	ldrh	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	119b      	asrs	r3, r3, #6
 80011aa:	b29b      	uxth	r3, r3
  }
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 80011ba:	f7ff ffcd 	bl	8001158 <getHorizontal>
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 80011c2:	f7ff ffe0 	bl	8001186 <getVertical>
 80011c6:	4603      	mov	r3, r0
 80011c8:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	2bfa      	cmp	r3, #250	@ 0xfa
 80011ce:	d906      	bls.n	80011de <threshold+0x2a>
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d801      	bhi.n	80011de <threshold+0x2a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <threshold+0x2c>
 80011de:	2300      	movs	r3, #0
 80011e0:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2bf9      	cmp	r3, #249	@ 0xf9
 80011e6:	d804      	bhi.n	80011f2 <threshold+0x3e>
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <threshold+0x3e>
		  return 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00a      	b.n	8001208 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d904      	bls.n	8001206 <threshold+0x52>
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <threshold+0x52>
		  return 2;
 8001202:	2302      	movs	r3, #2
 8001204:	e000      	b.n	8001208 <threshold+0x54>
	  }
	  return 0;
 8001206:	2300      	movs	r3, #0
  }
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    int val = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 800121a:	2120      	movs	r1, #32
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f007 f894 	bl	800834c <HAL_GPIO_ReadPin>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <RowChecker+0x1e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	e000      	b.n	8001230 <RowChecker+0x20>
 800122e:	2301      	movs	r3, #1
 8001230:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 8001232:	2140      	movs	r1, #64	@ 0x40
 8001234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001238:	f007 f888 	bl	800834c <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <RowChecker+0x36>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	e000      	b.n	8001248 <RowChecker+0x38>
 8001246:	2302      	movs	r3, #2
 8001248:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 800124a:	2180      	movs	r1, #128	@ 0x80
 800124c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001250:	f007 f87c 	bl	800834c <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <RowChecker+0x4e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	e000      	b.n	8001260 <RowChecker+0x50>
 800125e:	2303      	movs	r3, #3
 8001260:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 8001262:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <RowChecker+0x74>)
 8001268:	f007 f870 	bl	800834c <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <RowChecker+0x66>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	e000      	b.n	8001278 <RowChecker+0x68>
 8001276:	2304      	movs	r3, #4
 8001278:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 800127a:	687b      	ldr	r3, [r7, #4]
  }
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000c00 	.word	0x48000c00

08001288 <keypad_init>:
//		}
//		return 0;
//	}


void keypad_init(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001292:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <keypad_init+0x38>)
 8001294:	f007 f872 	bl	800837c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <keypad_init+0x3c>)
 80012a0:	f007 f86c 	bl	800837c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <keypad_init+0x38>)
 80012ac:	f007 f866 	bl	800837c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <keypad_init+0x3c>)
 80012b8:	f007 f860 	bl	800837c <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	48001000 	.word	0x48001000
 80012c4:	48001400 	.word	0x48001400

080012c8 <KeyPadReturn>:


	//Processes the row (val) and col values to get the number associated with that row and col
	//weightSel is used to determine if Weight (1) or Age (0) is being input
  uint8_t KeyPadReturn(int row, int col, int weightSel) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
	// 1-based indexing, row 0 is nothing
	// col 4 are letters
    if (row == 0 || col == 4) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <KeyPadReturn+0x18>
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d101      	bne.n	80012e4 <KeyPadReturn+0x1c>
      return 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e0bc      	b.n	800145e <KeyPadReturn+0x196>
    }
    HAL_Delay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f005 fc35 	bl	8006b54 <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 80012ea:	bf00      	nop
 80012ec:	f7ff ff90 	bl	8001210 <RowChecker>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d0f9      	beq.n	80012ec <KeyPadReturn+0x24>
    }
    HAL_Delay(10);
 80012f8:	200a      	movs	r0, #10
 80012fa:	f005 fc2b 	bl	8006b54 <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3b01      	subs	r3, #1
 8001306:	4958      	ldr	r1, [pc, #352]	@ (8001468 <KeyPadReturn+0x1a0>)
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	440a      	add	r2, r1
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	74fb      	strb	r3, [r7, #19]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 8001312:	7cfb      	ldrb	r3, [r7, #19]
 8001314:	2b23      	cmp	r3, #35	@ 0x23
 8001316:	d13c      	bne.n	8001392 <KeyPadReturn+0xca>
    	// Go to main display
      if (weightCounter == 0) {
 8001318:	4b54      	ldr	r3, [pc, #336]	@ (800146c <KeyPadReturn+0x1a4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <KeyPadReturn+0x5c>
        // If there is no value for weight, just return
        return 0;
 8001320:	2300      	movs	r3, #0
 8001322:	e09c      	b.n	800145e <KeyPadReturn+0x196>
      for (uint8_t i = 0; i < weightCounter; i++) {
        // print the values here
        //printf("%x ", ASCII_Weight[i]);
      }
      printf("\n");*/
      if(weightSel){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <KeyPadReturn+0x70>
          	ASCII_Weight[weightCounter] = '\0';
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <KeyPadReturn+0x1a4>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4b4f      	ldr	r3, [pc, #316]	@ (8001470 <KeyPadReturn+0x1a8>)
 8001332:	2100      	movs	r1, #0
 8001334:	5499      	strb	r1, [r3, r2]
 8001336:	e027      	b.n	8001388 <KeyPadReturn+0xc0>
      }
      else{
    	  ASCII_Age[weightCounter] = '\0';
 8001338:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <KeyPadReturn+0x1a4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <KeyPadReturn+0x1ac>)
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]
    	  age = 0;
 8001344:	4b4c      	ldr	r3, [pc, #304]	@ (8001478 <KeyPadReturn+0x1b0>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
//    	  for (size_t i = weightCounter - 1; i <= 0; i++) {
//    		  age += ASCII_Age[i] * ;
//    	  }
    	  int i = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
    	  while (ASCII_Age[i] != '\0') {
 800134e:	e015      	b.n	800137c <KeyPadReturn+0xb4>
    		  age *= 10;
 8001350:	4b49      	ldr	r3, [pc, #292]	@ (8001478 <KeyPadReturn+0x1b0>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b46      	ldr	r3, [pc, #280]	@ (8001478 <KeyPadReturn+0x1b0>)
 8001360:	701a      	strb	r2, [r3, #0]
    		  age += ASCII_Age[i++] - 48;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	617a      	str	r2, [r7, #20]
 8001368:	4a42      	ldr	r2, [pc, #264]	@ (8001474 <KeyPadReturn+0x1ac>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	3b30      	subs	r3, #48	@ 0x30
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <KeyPadReturn+0x1b0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4413      	add	r3, r2
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <KeyPadReturn+0x1b0>)
 800137a:	701a      	strb	r2, [r3, #0]
    	  while (ASCII_Age[i] != '\0') {
 800137c:	4a3d      	ldr	r2, [pc, #244]	@ (8001474 <KeyPadReturn+0x1ac>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1e3      	bne.n	8001350 <KeyPadReturn+0x88>
    	  }
      }
      weightCounter = 0;
 8001388:	4b38      	ldr	r3, [pc, #224]	@ (800146c <KeyPadReturn+0x1a4>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      //LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
      return 1;
 800138e:	2301      	movs	r3, #1
 8001390:	e065      	b.n	800145e <KeyPadReturn+0x196>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 8001392:	7cfb      	ldrb	r3, [r7, #19]
 8001394:	2b2a      	cmp	r3, #42	@ 0x2a
 8001396:	d006      	beq.n	80013a6 <KeyPadReturn+0xde>
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <KeyPadReturn+0x1a4>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	2305      	movs	r3, #5
 80013a0:	3b02      	subs	r3, #2
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d118      	bne.n	80013d8 <KeyPadReturn+0x110>
    	// Wipe screen
    	if(weightSel){
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <KeyPadReturn+0xf6>
    		LCD_Fill(105, 5, 170, 5+28, C_BLACK);
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2321      	movs	r3, #33	@ 0x21
 80013b2:	22aa      	movs	r2, #170	@ 0xaa
 80013b4:	2105      	movs	r1, #5
 80013b6:	2069      	movs	r0, #105	@ 0x69
 80013b8:	f000 fb2c 	bl	8001a14 <LCD_Fill>
 80013bc:	e007      	b.n	80013ce <KeyPadReturn+0x106>
    	}
    	else{
    		LCD_Fill(80, 5, 170, 5+28, C_BLACK);
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2321      	movs	r3, #33	@ 0x21
 80013c4:	22aa      	movs	r2, #170	@ 0xaa
 80013c6:	2105      	movs	r1, #5
 80013c8:	2050      	movs	r0, #80	@ 0x50
 80013ca:	f000 fb23 	bl	8001a14 <LCD_Fill>
    	}
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <KeyPadReturn+0x1a4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
      return 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e042      	b.n	800145e <KeyPadReturn+0x196>
    }
    //printf("ASCII value: %x\n", ASCII_Value);


    if(weightSel){
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d01c      	beq.n	8001418 <KeyPadReturn+0x150>
    	ASCII_Weight[weightCounter] = ASCII_Value;
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <KeyPadReturn+0x1a4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <KeyPadReturn+0x1a8>)
 80013e6:	7cfb      	ldrb	r3, [r7, #19]
 80013e8:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(105 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 80013ea:	4b20      	ldr	r3, [pc, #128]	@ (800146c <KeyPadReturn+0x1a4>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3369      	adds	r3, #105	@ 0x69
 80013fa:	b298      	uxth	r0, r3
 80013fc:	7cfa      	ldrb	r2, [r7, #19]
 80013fe:	2300      	movs	r3, #0
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <KeyPadReturn+0x1b4>)
 800140a:	2105      	movs	r1, #5
 800140c:	f000 fbc8 	bl	8001ba0 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f004 f84b 	bl	80054ac <UG_FontSetTransparency>
 8001416:	e01b      	b.n	8001450 <KeyPadReturn+0x188>
    }
    else{
    	ASCII_Age[weightCounter] = ASCII_Value;
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <KeyPadReturn+0x1a4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <KeyPadReturn+0x1ac>)
 8001420:	7cfb      	ldrb	r3, [r7, #19]
 8001422:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(80 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <KeyPadReturn+0x1a4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	b29b      	uxth	r3, r3
 8001432:	3350      	adds	r3, #80	@ 0x50
 8001434:	b298      	uxth	r0, r3
 8001436:	7cfa      	ldrb	r2, [r7, #19]
 8001438:	2300      	movs	r3, #0
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <KeyPadReturn+0x1b4>)
 8001444:	2105      	movs	r1, #5
 8001446:	f000 fbab 	bl	8001ba0 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f004 f82e 	bl	80054ac <UG_FontSetTransparency>

    }

    weightCounter++;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <KeyPadReturn+0x1a4>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <KeyPadReturn+0x1a4>)
 800145a:	701a      	strb	r2, [r3, #0]
    return 0;
 800145c:	2300      	movs	r3, #0
  }
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000000 	.word	0x20000000
 800146c:	2000027e 	.word	0x2000027e
 8001470:	20000270 	.word	0x20000270
 8001474:	20000278 	.word	0x20000278
 8001478:	2000027d 	.word	0x2000027d
 800147c:	08012cec 	.word	0x08012cec

08001480 <running>:



  void running(){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af02      	add	r7, sp, #8
	  uint8_t finished = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
	  //Gathers Weight data
	  LCD_PutStr(5, 5, "Weight: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 800148e:	2300      	movs	r3, #0
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4b79      	ldr	r3, [pc, #484]	@ (8001680 <running+0x200>)
 800149a:	4a7a      	ldr	r2, [pc, #488]	@ (8001684 <running+0x204>)
 800149c:	2105      	movs	r1, #5
 800149e:	2005      	movs	r0, #5
 80014a0:	f000 fb9b 	bl	8001bda <LCD_PutStr>
  while (!finished) {
 80014a4:	e060      	b.n	8001568 <running+0xe8>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ac:	4876      	ldr	r0, [pc, #472]	@ (8001688 <running+0x208>)
 80014ae:	f006 ff65 	bl	800837c <HAL_GPIO_WritePin>
      val = RowChecker();
 80014b2:	f7ff fead 	bl	8001210 <RowChecker>
 80014b6:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4, 1);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2104      	movs	r1, #4
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f7ff ff03 	bl	80012c8 <KeyPadReturn>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014cc:	486e      	ldr	r0, [pc, #440]	@ (8001688 <running+0x208>)
 80014ce:	f006 ff55 	bl	800837c <HAL_GPIO_WritePin>
      if (finished) break;
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d14b      	bne.n	8001570 <running+0xf0>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014de:	486b      	ldr	r0, [pc, #428]	@ (800168c <running+0x20c>)
 80014e0:	f006 ff4c 	bl	800837c <HAL_GPIO_WritePin>
      val = RowChecker();
 80014e4:	f7ff fe94 	bl	8001210 <RowChecker>
 80014e8:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3, 1);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2103      	movs	r1, #3
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f7ff feea 	bl	80012c8 <KeyPadReturn>
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014fe:	4863      	ldr	r0, [pc, #396]	@ (800168c <running+0x20c>)
 8001500:	f006 ff3c 	bl	800837c <HAL_GPIO_WritePin>
      if (finished) break;
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d134      	bne.n	8001574 <running+0xf4>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001510:	485e      	ldr	r0, [pc, #376]	@ (800168c <running+0x20c>)
 8001512:	f006 ff33 	bl	800837c <HAL_GPIO_WritePin>
      val = RowChecker();
 8001516:	f7ff fe7b 	bl	8001210 <RowChecker>
 800151a:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	2102      	movs	r1, #2
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f7ff fed1 	bl	80012c8 <KeyPadReturn>
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001530:	4856      	ldr	r0, [pc, #344]	@ (800168c <running+0x20c>)
 8001532:	f006 ff23 	bl	800837c <HAL_GPIO_WritePin>
      if (finished) break;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d11d      	bne.n	8001578 <running+0xf8>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001542:	4851      	ldr	r0, [pc, #324]	@ (8001688 <running+0x208>)
 8001544:	f006 ff1a 	bl	800837c <HAL_GPIO_WritePin>
      val = RowChecker();
 8001548:	f7ff fe62 	bl	8001210 <RowChecker>
 800154c:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1, 1);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f7ff feb8 	bl	80012c8 <KeyPadReturn>
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001562:	4849      	ldr	r0, [pc, #292]	@ (8001688 <running+0x208>)
 8001564:	f006 ff0a 	bl	800837c <HAL_GPIO_WritePin>
  while (!finished) {
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d09b      	beq.n	80014a6 <running+0x26>
 800156e:	e004      	b.n	800157a <running+0xfa>
      if (finished) break;
 8001570:	bf00      	nop
 8001572:	e002      	b.n	800157a <running+0xfa>
      if (finished) break;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <running+0xfa>
      if (finished) break;
 8001578:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  	  finished = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]
  	  LCD_Fill(5, 5, 170, 5+28, C_BLACK);
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2321      	movs	r3, #33	@ 0x21
 8001584:	22aa      	movs	r2, #170	@ 0xaa
 8001586:	2105      	movs	r1, #5
 8001588:	2005      	movs	r0, #5
 800158a:	f000 fa43 	bl	8001a14 <LCD_Fill>
  	  //Gathers Age data
  	  LCD_PutStr(5, 5, "Age: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <running+0x200>)
 800159a:	4a3d      	ldr	r2, [pc, #244]	@ (8001690 <running+0x210>)
 800159c:	2105      	movs	r1, #5
 800159e:	2005      	movs	r0, #5
 80015a0:	f000 fb1b 	bl	8001bda <LCD_PutStr>
  	while (!finished) {
 80015a4:	e060      	b.n	8001668 <running+0x1e8>
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ac:	4836      	ldr	r0, [pc, #216]	@ (8001688 <running+0x208>)
 80015ae:	f006 fee5 	bl	800837c <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80015b2:	f7ff fe2d 	bl	8001210 <RowChecker>
 80015b6:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 4, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2104      	movs	r1, #4
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f7ff fe83 	bl	80012c8 <KeyPadReturn>
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015cc:	482e      	ldr	r0, [pc, #184]	@ (8001688 <running+0x208>)
 80015ce:	f006 fed5 	bl	800837c <HAL_GPIO_WritePin>
  	      if (finished) return;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d14b      	bne.n	8001670 <running+0x1f0>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015de:	482b      	ldr	r0, [pc, #172]	@ (800168c <running+0x20c>)
 80015e0:	f006 fecc 	bl	800837c <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80015e4:	f7ff fe14 	bl	8001210 <RowChecker>
 80015e8:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 3, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2103      	movs	r1, #3
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f7ff fe6a 	bl	80012c8 <KeyPadReturn>
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015fe:	4823      	ldr	r0, [pc, #140]	@ (800168c <running+0x20c>)
 8001600:	f006 febc 	bl	800837c <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d134      	bne.n	8001674 <running+0x1f4>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001610:	481e      	ldr	r0, [pc, #120]	@ (800168c <running+0x20c>)
 8001612:	f006 feb3 	bl	800837c <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001616:	f7ff fdfb 	bl	8001210 <RowChecker>
 800161a:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 2, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2102      	movs	r1, #2
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7ff fe51 	bl	80012c8 <KeyPadReturn>
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800162a:	2201      	movs	r2, #1
 800162c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001630:	4816      	ldr	r0, [pc, #88]	@ (800168c <running+0x20c>)
 8001632:	f006 fea3 	bl	800837c <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11d      	bne.n	8001678 <running+0x1f8>

  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001642:	4811      	ldr	r0, [pc, #68]	@ (8001688 <running+0x208>)
 8001644:	f006 fe9a 	bl	800837c <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001648:	f7ff fde2 	bl	8001210 <RowChecker>
 800164c:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 1, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2101      	movs	r1, #1
 8001652:	6838      	ldr	r0, [r7, #0]
 8001654:	f7ff fe38 	bl	80012c8 <KeyPadReturn>
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001662:	4809      	ldr	r0, [pc, #36]	@ (8001688 <running+0x208>)
 8001664:	f006 fe8a 	bl	800837c <HAL_GPIO_WritePin>
  	while (!finished) {
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d09b      	beq.n	80015a6 <running+0x126>
 800166e:	e004      	b.n	800167a <running+0x1fa>
  	      if (finished) return;
 8001670:	bf00      	nop
 8001672:	e002      	b.n	800167a <running+0x1fa>
  	      if (finished) return;
 8001674:	bf00      	nop
 8001676:	e000      	b.n	800167a <running+0x1fa>
  	      if (finished) return;
 8001678:	bf00      	nop
  	}

  }
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	08012cec 	.word	0x08012cec
 8001684:	08012c50 	.word	0x08012c50
 8001688:	48001400 	.word	0x48001400
 800168c:	48001000 	.word	0x48001000
 8001690:	08012c5c 	.word	0x08012c5c

08001694 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <setSPI_Size+0x74>)
 80016a0:	f993 3000 	ldrsb.w	r3, [r3]
 80016a4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d027      	beq.n	80016fc <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <setSPI_Size+0x78>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b16      	ldr	r3, [pc, #88]	@ (800170c <setSPI_Size+0x78>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016ba:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80016bc:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <setSPI_Size+0x74>)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10c      	bne.n	80016e4 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <setSPI_Size+0x78>)
 80016cc:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80016d0:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <setSPI_Size+0x78>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <setSPI_Size+0x78>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016e0:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 80016e2:	e00b      	b.n	80016fc <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <setSPI_Size+0x78>)
 80016e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80016ea:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <setSPI_Size+0x78>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <setSPI_Size+0x78>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000010 	.word	0x20000010
 800170c:	20000838 	.word	0x20000838

08001710 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ffb9 	bl	8001694 <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001728:	4815      	ldr	r0, [pc, #84]	@ (8001780 <LCD_WriteCommand+0x70>)
 800172a:	f006 fe27 	bl	800837c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001734:	4812      	ldr	r0, [pc, #72]	@ (8001780 <LCD_WriteCommand+0x70>)
 8001736:	f006 fe21 	bl	800837c <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	2201      	movs	r2, #1
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4810      	ldr	r0, [pc, #64]	@ (8001784 <LCD_WriteCommand+0x74>)
 8001744:	f00a fd61 	bl	800c20a <HAL_SPI_Transmit>
	  if (argc) {
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00e      	beq.n	800176c <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001754:	480a      	ldr	r0, [pc, #40]	@ (8001780 <LCD_WriteCommand+0x70>)
 8001756:	f006 fe11 	bl	800837c <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	1c59      	adds	r1, r3, #1
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	b29a      	uxth	r2, r3
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	4807      	ldr	r0, [pc, #28]	@ (8001784 <LCD_WriteCommand+0x74>)
 8001768:	f00a fd4f 	bl	800c20a <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001772:	4803      	ldr	r0, [pc, #12]	@ (8001780 <LCD_WriteCommand+0x70>)
 8001774:	f006 fe02 	bl	800837c <HAL_GPIO_WritePin>
	}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	48001000 	.word	0x48001000
 8001784:	20000838 	.word	0x20000838

08001788 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001798:	4814      	ldr	r0, [pc, #80]	@ (80017ec <LCD_WriteData+0x64>)
 800179a:	f006 fdef 	bl	800837c <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017a4:	4811      	ldr	r0, [pc, #68]	@ (80017ec <LCD_WriteData+0x64>)
 80017a6:	f006 fde9 	bl	800837c <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80017aa:	e011      	b.n	80017d0 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017b2:	4293      	cmp	r3, r2
 80017b4:	bf28      	it	cs
 80017b6:	4613      	movcs	r3, r2
 80017b8:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80017ba:	89fa      	ldrh	r2, [r7, #14]
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <LCD_WriteData+0x68>)
 80017c4:	f00a fd21 	bl	800c20a <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ea      	bne.n	80017ac <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017dc:	4803      	ldr	r0, [pc, #12]	@ (80017ec <LCD_WriteData+0x64>)
 80017de:	f006 fdcd 	bl	800837c <HAL_GPIO_WritePin>
#endif
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	48001000 	.word	0x48001000
 80017f0:	20000838 	.word	0x20000838

080017f4 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b08b      	sub	sp, #44	@ 0x2c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	4603      	mov	r3, r0
 8001808:	80bb      	strh	r3, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	84bb      	strh	r3, [r7, #36]	@ 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800181e:	883b      	ldrh	r3, [r7, #0]
 8001820:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001822:	232a      	movs	r3, #42	@ 0x2a
 8001824:	763b      	strb	r3, [r7, #24]
 8001826:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800182a:	121b      	asrs	r3, r3, #8
 800182c:	b21b      	sxth	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	767b      	strb	r3, [r7, #25]
 8001832:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001834:	b2db      	uxtb	r3, r3
 8001836:	76bb      	strb	r3, [r7, #26]
 8001838:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800183c:	121b      	asrs	r3, r3, #8
 800183e:	b21b      	sxth	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	76fb      	strb	r3, [r7, #27]
 8001844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001846:	b2db      	uxtb	r3, r3
 8001848:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800184a:	f107 0318 	add.w	r3, r7, #24
 800184e:	2104      	movs	r1, #4
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001856:	232b      	movs	r3, #43	@ 0x2b
 8001858:	743b      	strb	r3, [r7, #16]
 800185a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800185e:	121b      	asrs	r3, r3, #8
 8001860:	b21b      	sxth	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	747b      	strb	r3, [r7, #17]
 8001866:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001868:	b2db      	uxtb	r3, r3
 800186a:	74bb      	strb	r3, [r7, #18]
 800186c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001870:	121b      	asrs	r3, r3, #8
 8001872:	b21b      	sxth	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	74fb      	strb	r3, [r7, #19]
 8001878:	8c3b      	ldrh	r3, [r7, #32]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	2104      	movs	r1, #4
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff43 	bl	8001710 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800188a:	232c      	movs	r3, #44	@ 0x2c
 800188c:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff3b 	bl	8001710 <LCD_WriteCommand>
  }
}
 800189a:	bf00      	nop
 800189c:	372c      	adds	r7, #44	@ 0x2c
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
	...

080018a4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	460b      	mov	r3, r1
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80018b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db39      	blt.n	8001932 <LCD_DrawPixel+0x8e>
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	2bef      	cmp	r3, #239	@ 0xef
 80018c4:	dc35      	bgt.n	8001932 <LCD_DrawPixel+0x8e>
 80018c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db31      	blt.n	8001932 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80018ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018d6:	da2c      	bge.n	8001932 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	b29b      	uxth	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	733b      	strb	r3, [r7, #12]
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80018e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018f8:	f7ff ff7c 	bl	80017f4 <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001902:	480e      	ldr	r0, [pc, #56]	@ (800193c <LCD_DrawPixel+0x98>)
 8001904:	f006 fd3a 	bl	800837c <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800190e:	480b      	ldr	r0, [pc, #44]	@ (800193c <LCD_DrawPixel+0x98>)
 8001910:	f006 fd34 	bl	800837c <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001914:	f107 010c 	add.w	r1, r7, #12
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	2202      	movs	r2, #2
 800191e:	4808      	ldr	r0, [pc, #32]	@ (8001940 <LCD_DrawPixel+0x9c>)
 8001920:	f00a fc73 	bl	800c20a <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800192a:	4804      	ldr	r0, [pc, #16]	@ (800193c <LCD_DrawPixel+0x98>)
 800192c:	f006 fd26 	bl	800837c <HAL_GPIO_WritePin>
 8001930:	e000      	b.n	8001934 <LCD_DrawPixel+0x90>
    return;
 8001932:	bf00      	nop
#endif
}
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	48001000 	.word	0x48001000
 8001940:	20000838 	.word	0x20000838

08001944 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	@ 0x50
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001954:	e009      	b.n	800196a <LCD_FillPixels+0x26>
      fill[t]=color;
 8001956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	3350      	adds	r3, #80	@ 0x50
 800195c:	443b      	add	r3, r7
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001966:	3301      	adds	r3, #1
 8001968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b20      	cmp	r3, #32
 800196e:	bf28      	it	cs
 8001970:	2320      	movcs	r3, #32
 8001972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001974:	429a      	cmp	r2, r3
 8001976:	d3ee      	bcc.n	8001956 <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 8001978:	e00e      	b.n	8001998 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b20      	cmp	r3, #32
 800197e:	bf28      	it	cs
 8001980:	2320      	movcs	r3, #32
 8001982:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fefc 	bl	8001788 <LCD_WriteData>
      pixels-=sz;
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ed      	bne.n	800197a <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3750      	adds	r7, #80	@ 0x50
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	4603      	mov	r3, r0
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80019c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ce:	d104      	bne.n	80019da <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fe5f 	bl	8001694 <setSPI_Size>
#endif
    return NULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e013      	b.n	8001a02 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80019da:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019ea:	f7ff ff03 	bl	80017f4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fe50 	bl	8001694 <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019fa:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <LCD_FillArea+0x64>)
 80019fc:	f006 fcbe 	bl	800837c <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <LCD_FillArea+0x68>)
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	08001945 	.word	0x08001945

08001a14 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	4611      	mov	r1, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	80fb      	strh	r3, [r7, #6]
 8001a26:	4603      	mov	r3, r0
 8001a28:	80bb      	strh	r3, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	807b      	strh	r3, [r7, #2]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	883a      	ldrh	r2, [r7, #0]
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001a4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a52:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a5a:	f7ff fecb 	bl	80017f4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fe18 	bl	8001694 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 8001a64:	8c3b      	ldrh	r3, [r7, #32]
 8001a66:	4619      	mov	r1, r3
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff ff6b 	bl	8001944 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fe10 	bl	8001694 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}

08001a7e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001a7e:	b590      	push	{r4, r7, lr}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	603a      	str	r2, [r7, #0]
 8001a88:	80fb      	strh	r3, [r7, #6]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	889b      	ldrh	r3, [r3, #4]
 8001a92:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	88db      	ldrh	r3, [r3, #6]
 8001a98:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2bef      	cmp	r3, #239	@ 0xef
 8001a9e:	d837      	bhi.n	8001b10 <LCD_DrawImage+0x92>
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001aa6:	d233      	bcs.n	8001b10 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	89fb      	ldrh	r3, [r7, #14]
 8001aac:	4413      	add	r3, r2
 8001aae:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ab0:	dc30      	bgt.n	8001b14 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001ab2:	88ba      	ldrh	r2, [r7, #4]
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001abc:	dc2c      	bgt.n	8001b18 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	7a1b      	ldrb	r3, [r3, #8]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d12a      	bne.n	8001b1c <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001ac6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001aca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ace:	88fa      	ldrh	r2, [r7, #6]
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b21c      	sxth	r4, r3
 8001adc:	88ba      	ldrh	r2, [r7, #4]
 8001ade:	89bb      	ldrh	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4622      	mov	r2, r4
 8001aec:	f7ff fe82 	bl	80017f4 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff fdcf 	bl	8001694 <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	89ba      	ldrh	r2, [r7, #12]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff fe40 	bl	8001788 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fdc3 	bl	8001694 <setSPI_Size>
 8001b0e:	e006      	b.n	8001b1e <LCD_DrawImage+0xa0>
    return;
 8001b10:	bf00      	nop
 8001b12:	e004      	b.n	8001b1e <LCD_DrawImage+0xa0>
    return;
 8001b14:	bf00      	nop
 8001b16:	e002      	b.n	8001b1e <LCD_DrawImage+0xa0>
    return;
 8001b18:	bf00      	nop
 8001b1a:	e000      	b.n	8001b1e <LCD_DrawImage+0xa0>
    return;
 8001b1c:	bf00      	nop
#endif
  }
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}

08001b24 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4623      	mov	r3, r4
 8001b34:	80fb      	strh	r3, [r7, #6]
 8001b36:	4603      	mov	r3, r0
 8001b38:	80bb      	strh	r3, [r7, #4]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	807b      	strh	r3, [r7, #2]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001b42:	88fa      	ldrh	r2, [r7, #6]
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d10a      	bne.n	8001b60 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001b4a:	88ba      	ldrh	r2, [r7, #4]
 8001b4c:	883b      	ldrh	r3, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d918      	bls.n	8001b84 <LCD_DrawLine+0x60>
 8001b52:	88bb      	ldrh	r3, [r7, #4]
 8001b54:	81bb      	strh	r3, [r7, #12]
 8001b56:	883b      	ldrh	r3, [r7, #0]
 8001b58:	80bb      	strh	r3, [r7, #4]
 8001b5a:	89bb      	ldrh	r3, [r7, #12]
 8001b5c:	803b      	strh	r3, [r7, #0]
 8001b5e:	e011      	b.n	8001b84 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001b60:	88ba      	ldrh	r2, [r7, #4]
 8001b62:	883b      	ldrh	r3, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d10a      	bne.n	8001b7e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d909      	bls.n	8001b84 <LCD_DrawLine+0x60>
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	81fb      	strh	r3, [r7, #14]
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	80fb      	strh	r3, [r7, #6]
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	e002      	b.n	8001b84 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001b84:	883c      	ldrh	r4, [r7, #0]
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	88b9      	ldrh	r1, [r7, #4]
 8001b8a:	88f8      	ldrh	r0, [r7, #6]
 8001b8c:	8c3b      	ldrh	r3, [r7, #32]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4623      	mov	r3, r4
 8001b92:	f7ff ff3f 	bl	8001a14 <LCD_Fill>
  return UG_RESULT_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}

08001ba0 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	4603      	mov	r3, r0
 8001baa:	81fb      	strh	r3, [r7, #14]
 8001bac:	460b      	mov	r3, r1
 8001bae:	81bb      	strh	r3, [r7, #12]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f003 f9ef 	bl	8004f98 <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001bc2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bc6:	8c3c      	ldrh	r4, [r7, #32]
 8001bc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4623      	mov	r3, r4
 8001bce:	f003 fbe5 	bl	800539c <UG_PutChar>
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd90      	pop	{r4, r7, pc}

08001bda <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60ba      	str	r2, [r7, #8]
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	4603      	mov	r3, r0
 8001be6:	81fb      	strh	r3, [r7, #14]
 8001be8:	460b      	mov	r3, r1
 8001bea:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f003 f9d3 	bl	8004f98 <UG_FontSelect>
  UG_SetForecolor(color);
 8001bf2:	8b3b      	ldrh	r3, [r7, #24]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fc0d 	bl	8005414 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001bfa:	8bbb      	ldrh	r3, [r7, #28]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fc1b 	bl	8005438 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c06:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fb2d 	bl	800526c <UG_PutString>
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <LCD_setPower+0x14>
 8001c2a:	2329      	movs	r3, #41	@ 0x29
 8001c2c:	e000      	b.n	8001c30 <LCD_setPower+0x16>
 8001c2e:	2328      	movs	r3, #40	@ 0x28
 8001c30:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fd69 	bl	8001710 <LCD_WriteCommand>
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <LCD_Update>:

static void LCD_Update(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff fd22 	bl	8001694 <setSPI_Size>
  #endif
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c60:	4829      	ldr	r0, [pc, #164]	@ (8001d08 <LCD_init+0xb4>)
 8001c62:	f006 fb8b 	bl	800837c <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	4827      	ldr	r0, [pc, #156]	@ (8001d08 <LCD_init+0xb4>)
 8001c6c:	f006 fb86 	bl	800837c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f004 ff6f 	bl	8006b54 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	4823      	ldr	r0, [pc, #140]	@ (8001d08 <LCD_init+0xb4>)
 8001c7c:	f006 fb7e 	bl	800837c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001c80:	20c8      	movs	r0, #200	@ 0xc8
 8001c82:	f004 ff67 	bl	8006b54 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001c86:	4921      	ldr	r1, [pc, #132]	@ (8001d0c <LCD_init+0xb8>)
 8001c88:	4821      	ldr	r0, [pc, #132]	@ (8001d10 <LCD_init+0xbc>)
 8001c8a:	f003 f8eb 	bl	8004e64 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001c8e:	4921      	ldr	r1, [pc, #132]	@ (8001d14 <LCD_init+0xc0>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f004 fc77 	bl	8006584 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001c96:	4920      	ldr	r1, [pc, #128]	@ (8001d18 <LCD_init+0xc4>)
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f004 fc73 	bl	8006584 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001c9e:	491f      	ldr	r1, [pc, #124]	@ (8001d1c <LCD_init+0xc8>)
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f004 fc6f 	bl	8006584 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001ca6:	491e      	ldr	r1, [pc, #120]	@ (8001d20 <LCD_init+0xcc>)
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f004 fc6b 	bl	8006584 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f003 fbd4 	bl	800545c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f003 fbe5 	bl	8005484 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001cba:	2300      	movs	r3, #0
 8001cbc:	80fb      	strh	r3, [r7, #6]
 8001cbe:	e013      	b.n	8001ce8 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a17      	ldr	r2, [pc, #92]	@ (8001d24 <LCD_init+0xd0>)
 8001cc6:	441a      	add	r2, r3
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4916      	ldr	r1, [pc, #88]	@ (8001d24 <LCD_init+0xd0>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f7ff fd1d 	bl	8001710 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <LCD_init+0xd0>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b4b      	cmp	r3, #75	@ 0x4b
 8001cec:	d9e8      	bls.n	8001cc0 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f003 f962 	bl	8004fb8 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f7ff ff90 	bl	8001c1a <LCD_setPower>
  UG_Update();
 8001cfa:	f004 fc65 	bl	80065c8 <UG_Update>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	48001000 	.word	0x48001000
 8001d0c:	20000014 	.word	0x20000014
 8001d10:	20000280 	.word	0x20000280
 8001d14:	08001b25 	.word	0x08001b25
 8001d18:	08001a15 	.word	0x08001a15
 8001d1c:	080019a9 	.word	0x080019a9
 8001d20:	08001a7f 	.word	0x08001a7f
 8001d24:	080180dc 	.word	0x080180dc

08001d28 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6858      	ldr	r0, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8adb      	ldrh	r3, [r3, #22]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f006 fb15 	bl	800837c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	1cf9      	adds	r1, r7, #3
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f00a fa54 	bl	800c20a <HAL_SPI_Transmit>
 8001d62:	4603      	mov	r3, r0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f107 010f 	add.w	r1, r7, #15
 8001d72:	2201      	movs	r2, #1
 8001d74:	f00a fbbe 	bl	800c4f4 <HAL_SPI_Receive>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6858      	ldr	r0, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8adb      	ldrh	r3, [r3, #22]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4619      	mov	r1, r3
 8001d88:	f006 faf8 	bl	800837c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
 8001da2:	4613      	mov	r3, r2
 8001da4:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dac:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001dae:	78bb      	ldrb	r3, [r7, #2]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6858      	ldr	r0, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8adb      	ldrh	r3, [r3, #22]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f006 fad6 	bl	800837c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f107 010a 	add.w	r1, r7, #10
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f00a fa14 	bl	800c20a <HAL_SPI_Transmit>
 8001de2:	4603      	mov	r3, r0
 8001de4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6858      	ldr	r0, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8adb      	ldrh	r3, [r3, #22]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4619      	mov	r1, r3
 8001df2:	f006 fac3 	bl	800837c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b088      	sub	sp, #32
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6858      	ldr	r0, [r3, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8adb      	ldrh	r3, [r3, #22]
 8001e20:	2200      	movs	r2, #0
 8001e22:	4619      	mov	r1, r3
 8001e24:	f006 faaa 	bl	800837c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f107 0117 	add.w	r1, r7, #23
 8001e34:	2201      	movs	r2, #1
 8001e36:	f00a f9e8 	bl	800c20a <HAL_SPI_Transmit>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f00a feaa 	bl	800cba8 <HAL_SPI_Transmit_DMA>
 8001e54:	e012      	b.n	8001e7c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	f00a f9d1 	bl	800c20a <HAL_SPI_Transmit>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6858      	ldr	r0, [r3, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8adb      	ldrh	r3, [r3, #22]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4619      	mov	r1, r3
 8001e78:	f006 fa80 	bl	800837c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	460b      	mov	r3, r1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6858      	ldr	r0, [r3, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8adb      	ldrh	r3, [r3, #22]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f006 fa68 	bl	800837c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f107 0117 	add.w	r1, r7, #23
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f00a f9a6 	bl	800c20a <HAL_SPI_Transmit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10a      	bne.n	8001ede <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	79fa      	ldrb	r2, [r7, #7]
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00a ff58 	bl	800cd88 <HAL_SPI_Receive_DMA>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001edc:	e012      	b.n	8001f04 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	f00a fb02 	bl	800c4f4 <HAL_SPI_Receive>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6858      	ldr	r0, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8adb      	ldrh	r3, [r3, #22]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	f006 fa3c 	bl	800837c <HAL_GPIO_WritePin>
}
 8001f04:	bf00      	nop
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	2101      	movs	r1, #1
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff36 	bl	8001d96 <write_register>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f44:	d801      	bhi.n	8001f4a <set_OCP+0x16>
    imax = 45;
 8001f46:	232d      	movs	r3, #45	@ 0x2d
 8001f48:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001f4e:	d901      	bls.n	8001f54 <set_OCP+0x20>
    imax = 240;
 8001f50:	23f0      	movs	r3, #240	@ 0xf0
 8001f52:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	2b81      	cmp	r3, #129	@ 0x81
 8001f58:	d809      	bhi.n	8001f6e <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	3b2d      	subs	r3, #45	@ 0x2d
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f9c <set_OCP+0x68>)
 8001f60:	fb82 1203 	smull	r1, r2, r2, r3
 8001f64:	1052      	asrs	r2, r2, #1
 8001f66:	17db      	asrs	r3, r3, #31
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e008      	b.n	8001f80 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	331e      	adds	r3, #30
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <set_OCP+0x68>)
 8001f74:	fb82 1203 	smull	r1, r2, r2, r3
 8001f78:	1092      	asrs	r2, r2, #2
 8001f7a:	17db      	asrs	r3, r3, #31
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	f043 0320 	orr.w	r3, r3, #32
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	210b      	movs	r1, #11
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff02 	bl	8001d96 <write_register>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	66666667 	.word	0x66666667

08001fa0 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001fa8:	211d      	movs	r1, #29
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff febc 	bl	8001d28 <read_register>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	461c      	mov	r4, r3
 8001fbc:	4615      	mov	r5, r2
 8001fbe:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001fc2:	211e      	movs	r1, #30
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff feaf 	bl	8001d28 <read_register>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b0a      	cmp	r3, #10
 8001fd8:	d908      	bls.n	8001fec <set_low_data_rate_optimization+0x4c>
 8001fda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fde:	1fd1      	subs	r1, r2, #7
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	d103      	bne.n	8001fec <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2126      	movs	r1, #38	@ 0x26
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fecf 	bl	8001d96 <write_register>
}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}

08002000 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8002008:	2100      	movs	r1, #0
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff7e 	bl	8001f0c <set_mode>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7d5b      	ldrb	r3, [r3, #21]
 8002024:	461a      	mov	r2, r3
 8002026:	210f      	movs	r1, #15
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff feb4 	bl	8001d96 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800202e:	22f0      	movs	r2, #240	@ 0xf0
 8002030:	2112      	movs	r1, #18
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff feaf 	bl	8001d96 <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8002038:	2105      	movs	r1, #5
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ff66 	bl	8001f0c <set_mode>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8002050:	2101      	movs	r1, #1
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff5a 	bl	8001f0c <set_mode>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8002068:	211d      	movs	r1, #29
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fe5c 	bl	8001d28 <read_register>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	461a      	mov	r2, r3
 8002080:	211d      	movs	r1, #29
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fe87 	bl	8001d96 <write_register>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10e      	bne.n	80020c2 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	d901      	bls.n	80020ae <lora_set_tx_power+0x1e>
      level = 15;
 80020aa:	230f      	movs	r3, #15
 80020ac:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	2109      	movs	r1, #9
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fe6b 	bl	8001d96 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80020c0:	e02e      	b.n	8002120 <lora_set_tx_power+0x90>
    if (level > 20) {
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	2b14      	cmp	r3, #20
 80020c6:	d901      	bls.n	80020cc <lora_set_tx_power+0x3c>
      level = 20;
 80020c8:	2314      	movs	r3, #20
 80020ca:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d801      	bhi.n	80020d6 <lora_set_tx_power+0x46>
      level = 2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	2b11      	cmp	r3, #17
 80020da:	d90c      	bls.n	80020f6 <lora_set_tx_power+0x66>
      level -= 3;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	3b03      	subs	r3, #3
 80020e0:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80020e2:	2287      	movs	r2, #135	@ 0x87
 80020e4:	214d      	movs	r1, #77	@ 0x4d
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fe55 	bl	8001d96 <write_register>
      set_OCP(lora, 140);
 80020ec:	218c      	movs	r1, #140	@ 0x8c
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff20 	bl	8001f34 <set_OCP>
 80020f4:	e008      	b.n	8002108 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80020f6:	2284      	movs	r2, #132	@ 0x84
 80020f8:	214d      	movs	r1, #77	@ 0x4d
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fe4b 	bl	8001d96 <write_register>
      set_OCP(lora, 97);
 8002100:	2161      	movs	r1, #97	@ 0x61
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff16 	bl	8001f34 <set_OCP>
    level -= 2;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	3b02      	subs	r3, #2
 800210c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	2109      	movs	r1, #9
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fe3b 	bl	8001d96 <write_register>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8002134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002138:	f04f 0000 	mov.w	r0, #0
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	04d9      	lsls	r1, r3, #19
 8002142:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8002146:	04d0      	lsls	r0, r2, #19
 8002148:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <lora_set_frequency+0x88>)
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	f7fe fd93 	bl	8000c78 <__aeabi_uldivmod>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800215a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	0c02      	lsrs	r2, r0, #16
 8002168:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800216c:	0c0b      	lsrs	r3, r1, #16
 800216e:	b2d3      	uxtb	r3, r2
 8002170:	461a      	mov	r2, r3
 8002172:	2106      	movs	r1, #6
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff fe0e 	bl	8001d96 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800217a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	0a02      	lsrs	r2, r0, #8
 8002188:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800218c:	0a0b      	lsrs	r3, r1, #8
 800218e:	b2d3      	uxtb	r3, r2
 8002190:	461a      	mov	r2, r3
 8002192:	2107      	movs	r1, #7
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fdfe 	bl	8001d96 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800219a:	7c3b      	ldrb	r3, [r7, #16]
 800219c:	461a      	mov	r2, r3
 800219e:	2108      	movs	r1, #8
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff fdf8 	bl	8001d96 <write_register>
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	01e84800 	.word	0x01e84800

080021b4 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d802      	bhi.n	80021cc <lora_set_spreading_factor+0x18>
    sf = 6;
 80021c6:	2306      	movs	r3, #6
 80021c8:	70fb      	strb	r3, [r7, #3]
 80021ca:	e004      	b.n	80021d6 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d901      	bls.n	80021d6 <lora_set_spreading_factor+0x22>
    sf = 12;
 80021d2:	230c      	movs	r3, #12
 80021d4:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d10a      	bne.n	80021f2 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80021dc:	22c5      	movs	r2, #197	@ 0xc5
 80021de:	2131      	movs	r1, #49	@ 0x31
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fdd8 	bl	8001d96 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80021e6:	220c      	movs	r2, #12
 80021e8:	2137      	movs	r1, #55	@ 0x37
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fdd3 	bl	8001d96 <write_register>
 80021f0:	e009      	b.n	8002206 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80021f2:	22c3      	movs	r2, #195	@ 0xc3
 80021f4:	2131      	movs	r1, #49	@ 0x31
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fdcd 	bl	8001d96 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 80021fc:	220a      	movs	r2, #10
 80021fe:	2137      	movs	r1, #55	@ 0x37
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fdc8 	bl	8001d96 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8002206:	211e      	movs	r1, #30
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fd8d 	bl	8001d28 <read_register>
 800220e:	4603      	mov	r3, r0
 8002210:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	b25a      	sxtb	r2, r3
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	b25b      	sxtb	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b25b      	sxtb	r3, r3
 8002226:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	461a      	mov	r2, r3
 800222c:	211e      	movs	r1, #30
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fdb1 	bl	8001d96 <write_register>

  set_low_data_rate_optimization(lora);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff feb3 	bl	8001fa0 <set_low_data_rate_optimization>
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	b29b      	uxth	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	2120      	movs	r1, #32
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fd9b 	bl	8001d96 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	2121      	movs	r1, #33	@ 0x21
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fd91 	bl	8001d96 <write_register>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8002284:	2142      	movs	r1, #66	@ 0x42
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fd4e 	bl	8001d28 <read_register>
 800228c:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 800229e:	2101      	movs	r1, #1
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fd41 	bl	8001d28 <read_register>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d101      	bne.n	80022b8 <lora_is_transmitting+0x22>
 80022b4:	2305      	movs	r3, #5
 80022b6:	e000      	b.n	80022ba <lora_is_transmitting+0x24>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	4611      	mov	r1, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	460b      	mov	r3, r1
 80022d2:	71fb      	strb	r3, [r7, #7]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff ffdc 	bl	8002296 <lora_is_transmitting>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80022e4:	2305      	movs	r3, #5
 80022e6:	e02a      	b.n	800233e <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80022e8:	2101      	movs	r1, #1
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff fe0e 	bl	8001f0c <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f911 	bl	8002518 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	7d1b      	ldrb	r3, [r3, #20]
 80022fa:	461a      	mov	r2, r3
 80022fc:	210d      	movs	r1, #13
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff fd49 	bl	8001d96 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	7d1b      	ldrb	r3, [r3, #20]
 8002308:	461a      	mov	r2, r3
 800230a:	210e      	movs	r1, #14
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fd42 	bl	8001d96 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	461a      	mov	r2, r3
 8002316:	2122      	movs	r1, #34	@ 0x22
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff fd3c 	bl	8001d96 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	79fa      	ldrb	r2, [r7, #7]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff fd6a 	bl	8001dfe <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800232a:	79bb      	ldrb	r3, [r7, #6]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <lora_send_packet_base+0x72>
    return LORA_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e004      	b.n	800233e <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8002334:	2103      	movs	r1, #3
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff fde8 	bl	8001f0c <set_mode>
  return LORA_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	4613      	mov	r3, r2
 8002352:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8002354:	79fa      	ldrb	r2, [r7, #7]
 8002356:	2302      	movs	r3, #2
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff ffb1 	bl	80022c2 <lora_send_packet_base>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8002372:	2112      	movs	r1, #18
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fcd7 	bl	8001d28 <read_register>
 800237a:	4603      	mov	r3, r0
 800237c:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002384:	b2db      	uxtb	r3, r3
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8002396:	211d      	movs	r1, #29
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fcc5 	bl	8001d28 <read_register>
 800239e:	4603      	mov	r3, r0
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 80023a6:	7bbb      	ldrb	r3, [r7, #14]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 80023ac:	2122      	movs	r1, #34	@ 0x22
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fcba 	bl	8001d28 <read_register>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e005      	b.n	80023c6 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 80023ba:	2113      	movs	r1, #19
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff fcb3 	bl	8001d28 <read_register>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 80023e0:	2306      	movs	r3, #6
 80023e2:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 80023e8:	2112      	movs	r1, #18
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7ff fc9c 	bl	8001d28 <read_register>
 80023f0:	4603      	mov	r3, r0
 80023f2:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 80023f4:	22f0      	movs	r2, #240	@ 0xf0
 80023f6:	2112      	movs	r1, #18
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff fccc 	bl	8001d96 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 80023fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da02      	bge.n	800240c <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8002406:	2302      	movs	r3, #2
 8002408:	75fb      	strb	r3, [r7, #23]
    goto done;
 800240a:	e030      	b.n	800246e <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 800240c:	7d7b      	ldrb	r3, [r7, #21]
 800240e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02a      	beq.n	800246c <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8002416:	7d7b      	ldrb	r3, [r7, #21]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8002420:	2303      	movs	r3, #3
 8002422:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002424:	e023      	b.n	800246e <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8002426:	7d7b      	ldrb	r3, [r7, #21]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002434:	e01b      	b.n	800246e <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff ffa9 	bl	800238e <lora_pending_packet_length>
 800243c:	4603      	mov	r3, r0
 800243e:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8002440:	2110      	movs	r1, #16
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff fc70 	bl	8001d28 <read_register>
 8002448:	4603      	mov	r3, r0
 800244a:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 800244c:	7d3b      	ldrb	r3, [r7, #20]
 800244e:	461a      	mov	r2, r3
 8002450:	210d      	movs	r1, #13
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7ff fc9f 	bl	8001d96 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8002458:	f897 3020 	ldrb.w	r3, [r7, #32]
 800245c:	7dba      	ldrb	r2, [r7, #22]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff fd0e 	bl	8001e82 <read_fifo>
    res = LORA_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
 800246a:	e000      	b.n	800246e <lora_receive_packet_base+0x9e>
  }

done:
 800246c:	bf00      	nop
  if (error) {
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <lora_receive_packet_base+0xaa>
    *error = res;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7dfa      	ldrb	r2, [r7, #23]
 8002478:	701a      	strb	r2, [r3, #0]
  }

  return len;
 800247a:	7dbb      	ldrb	r3, [r7, #22]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	2302      	movs	r3, #2
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff96 	bl	80023d0 <lora_receive_packet_base>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 80024c2:	e00b      	b.n	80024dc <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff ff50 	bl	800236a <lora_is_packet_available>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f004 fb3f 	bl	8006b54 <HAL_Delay>
    elapsed++;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3ef      	bcc.n	80024c4 <lora_receive_packet_blocking+0x16>
 80024e4:	e000      	b.n	80024e8 <lora_receive_packet_blocking+0x3a>
      break;
 80024e6:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff ffc8 	bl	8002484 <lora_receive_packet>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <lora_enable_interrupt_rx_done>:

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fc43 	bl	8001d96 <write_register>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8002520:	2208      	movs	r2, #8
 8002522:	2112      	movs	r1, #18
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fc36 	bl	8001d96 <write_register>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002570:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fe82 	bl	800227c <lora_version>
 8002578:	4603      	mov	r3, r0
 800257a:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b12      	cmp	r3, #18
 8002580:	d001      	beq.n	8002586 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8002582:	2304      	movs	r3, #4
 8002584:	e031      	b.n	80025ea <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f7ff fd3a 	bl	8002000 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff fd37 	bl	8002000 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8002592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fdc6 	bl	8002128 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800259c:	2107      	movs	r1, #7
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f7ff fe08 	bl	80021b4 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80025a4:	210a      	movs	r1, #10
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7ff fe4b 	bl	8002242 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fd57 	bl	8002060 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80025b2:	210c      	movs	r1, #12
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff fbb7 	bl	8001d28 <read_register>
 80025ba:	4603      	mov	r3, r0
 80025bc:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80025be:	7dbb      	ldrb	r3, [r7, #22]
 80025c0:	f043 0303 	orr.w	r3, r3, #3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	210c      	movs	r1, #12
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff fbe3 	bl	8001d96 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80025d0:	2204      	movs	r2, #4
 80025d2:	2126      	movs	r1, #38	@ 0x26
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff fbde 	bl	8001d96 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80025da:	2111      	movs	r1, #17
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff fd57 	bl	8002090 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff fd30 	bl	8002048 <lora_mode_standby>

  return LORA_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	0000      	movs	r0, r0
 80025f4:	0000      	movs	r0, r0
	...

080025f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025fc:	b0e7      	sub	sp, #412	@ 0x19c
 80025fe:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 8002600:	4b6b      	ldr	r3, [pc, #428]	@ (80027b0 <main+0x1b8>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a6a      	ldr	r2, [pc, #424]	@ (80027b0 <main+0x1b8>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 800260c:	4b69      	ldr	r3, [pc, #420]	@ (80027b4 <main+0x1bc>)
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 8002612:	4b68      	ldr	r3, [pc, #416]	@ (80027b4 <main+0x1bc>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002618:	f004 fa27 	bl	8006a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800261c:	f000 facc 	bl	8002bb8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002620:	f000 fb2c 	bl	8002c7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002624:	f001 f9f6 	bl	8003a14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002628:	f000 fb5c 	bl	8002ce4 <MX_ADC1_Init>
  MX_COMP1_Init();
 800262c:	f000 fbbe 	bl	8002dac <MX_COMP1_Init>
  MX_COMP2_Init();
 8002630:	f000 fbea 	bl	8002e08 <MX_COMP2_Init>
  MX_I2C1_Init();
 8002634:	f000 fc14 	bl	8002e60 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002638:	f000 fc52 	bl	8002ee0 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800263c:	f000 fc90 	bl	8002f60 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8002640:	f000 fcda 	bl	8002ff8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002644:	f000 fd24 	bl	8003090 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8002648:	f000 fd6e 	bl	8003128 <MX_SAI1_Init>
  MX_SAI2_Init();
 800264c:	f000 fe04 	bl	8003258 <MX_SAI2_Init>
  MX_SPI3_Init();
 8002650:	f000 fea8 	bl	80033a4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002654:	f000 fee4 	bl	8003420 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002658:	f000 ff9a 	bl	8003590 <MX_TIM2_Init>
  MX_TIM3_Init();
 800265c:	f000 fffc 	bl	8003658 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002660:	f001 f87c 	bl	800375c <MX_TIM4_Init>
  MX_TIM15_Init();
 8002664:	f001 f8d4 	bl	8003810 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8002668:	f001 f9cc 	bl	8003a04 <MX_USB_OTG_FS_USB_Init>
  MX_TIM17_Init();
 800266c:	f001 f954 	bl	8003918 <MX_TIM17_Init>
  MX_SPI2_Init();
 8002670:	f000 fe5a 	bl	8003328 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002674:	2108      	movs	r1, #8
 8002676:	4850      	ldr	r0, [pc, #320]	@ (80027b8 <main+0x1c0>)
 8002678:	f00b fae6 	bl	800dc48 <HAL_TIM_PWM_Start>


//  ENABLE_LORA_REPEATEDLY(&lora);
  // IDK why, but the function causes a hard fault, while keeping the loop here is safe
  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 800267c:	a34a      	add	r3, pc, #296	@ (adr r3, 80027a8 <main+0x1b0>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	e9cd 2300 	strd	r2, r3, [sp]
 8002686:	2301      	movs	r3, #1
 8002688:	4a4c      	ldr	r2, [pc, #304]	@ (80027bc <main+0x1c4>)
 800268a:	494d      	ldr	r1, [pc, #308]	@ (80027c0 <main+0x1c8>)
 800268c:	484d      	ldr	r0, [pc, #308]	@ (80027c4 <main+0x1cc>)
 800268e:	f7ff ff50 	bl	8002532 <lora_init>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	 while (res != LORA_OK) {
 8002698:	e010      	b.n	80026bc <main+0xc4>
	   // Initialization failed
		 HAL_Delay(100);
 800269a:	2064      	movs	r0, #100	@ 0x64
 800269c:	f004 fa5a 	bl	8006b54 <HAL_Delay>
		 res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 80026a0:	a341      	add	r3, pc, #260	@ (adr r3, 80027a8 <main+0x1b0>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	e9cd 2300 	strd	r2, r3, [sp]
 80026aa:	2301      	movs	r3, #1
 80026ac:	4a43      	ldr	r2, [pc, #268]	@ (80027bc <main+0x1c4>)
 80026ae:	4944      	ldr	r1, [pc, #272]	@ (80027c0 <main+0x1c8>)
 80026b0:	4844      	ldr	r0, [pc, #272]	@ (80027c4 <main+0x1cc>)
 80026b2:	f7ff ff3e 	bl	8002532 <lora_init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	 while (res != LORA_OK) {
 80026bc:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ea      	bne.n	800269a <main+0xa2>
	 }
//  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
//  	     if (res != LORA_OK) {
//  	       // Initialization failed
//  	     }
LCD_init();
 80026c4:	f7ff fac6 	bl	8001c54 <LCD_init>
lora_enable_interrupt_rx_done(&lora);
 80026c8:	483e      	ldr	r0, [pc, #248]	@ (80027c4 <main+0x1cc>)
 80026ca:	f7ff ff18 	bl	80024fe <lora_enable_interrupt_rx_done>
lora_mode_receive_continuous(&lora);
 80026ce:	483d      	ldr	r0, [pc, #244]	@ (80027c4 <main+0x1cc>)
 80026d0:	f7ff fca2 	bl	8002018 <lora_mode_receive_continuous>
JOYSTICK_INIT(hi2c1);
 80026d4:	4c3c      	ldr	r4, [pc, #240]	@ (80027c8 <main+0x1d0>)
 80026d6:	4668      	mov	r0, sp
 80026d8:	f104 0310 	add.w	r3, r4, #16
 80026dc:	2244      	movs	r2, #68	@ 0x44
 80026de:	4619      	mov	r1, r3
 80026e0:	f00e fb21 	bl	8010d26 <memcpy>
 80026e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026e8:	f7fe fcde 	bl	80010a8 <JOYSTICK_INIT>
TempHum_t data;
initTempHumSensor(&hi2c2);
 80026ec:	4837      	ldr	r0, [pc, #220]	@ (80027cc <main+0x1d4>)
 80026ee:	f7fe fc3b 	bl	8000f68 <initTempHumSensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// 0 = runner view
// 1 = player 1 view
// 2 = weight and age input view
uint8_t current_viewport = 0; //determines what screen state you are on
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
DISPLAY_TIMER_TRIGGERED = 0;
 80026f8:	4b35      	ldr	r3, [pc, #212]	@ (80027d0 <main+0x1d8>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
HAL_TIM_Base_Start_IT(&htim17);
 80026fe:	4835      	ldr	r0, [pc, #212]	@ (80027d4 <main+0x1dc>)
 8002700:	f00b f97a 	bl	800d9f8 <HAL_TIM_Base_Start_IT>

// Set this pin ('D' on keypad) low for interrupt
 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800270a:	4833      	ldr	r0, [pc, #204]	@ (80027d8 <main+0x1e0>)
 800270c:	f005 fe36 	bl	800837c <HAL_GPIO_WritePin>


 // DUMMY DATA FOR TESTING DATA
   struct arm_to_base armband_data = {0,0,0,0};
 8002710:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
   struct base_to_arm buzzer = {0};
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3120 	strb.w	r3, [r7, #288]	@ 0x120

//   armband_data.velocity = 12.3;
//   armband_data.heartrate = 98.54;
//   armband_data.steps = 20000;
   uint16_t player_data_fill_height = 170;
 8002724:	23aa      	movs	r3, #170	@ 0xaa
 8002726:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
   uint16_t player_data_fill_bottom = 50;
 800272a:	2332      	movs	r3, #50	@ 0x32
 800272c:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
   char stamina_data_write_buffer[16];
   char buffer[128];
   int heartrate;
   int stepcount;

   uint8_t buzzing = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
   uint8_t wait = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
    /* USER CODE BEGIN 3 */
	  // STATE MACHINE HERE
	  // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
	  // Joystick allows user to switch between states

	  uint8_t lr = threshold();
 800273c:	f7fe fd3a 	bl	80011b4 <threshold>
 8002740:	4603      	mov	r3, r0
 8002742:	f887 3145 	strb.w	r3, [r7, #325]	@ 0x145
	  // Toggle current_viewport when joystick right
	  if (lr == 2) {
 8002746:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 800274a:	2b02      	cmp	r3, #2
 800274c:	d11f      	bne.n	800278e <main+0x196>
		  current_viewport = (current_viewport == 2) ? 2 : 1;
 800274e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8002752:	2b02      	cmp	r3, #2
 8002754:	d101      	bne.n	800275a <main+0x162>
 8002756:	2302      	movs	r3, #2
 8002758:	e000      	b.n	800275c <main+0x164>
 800275a:	2301      	movs	r3, #1
 800275c:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 8002760:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 8002764:	2200      	movs	r2, #0
 8002766:	9200      	str	r2, [sp, #0]
 8002768:	22f0      	movs	r2, #240	@ 0xf0
 800276a:	2105      	movs	r1, #5
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff f951 	bl	8001a14 <LCD_Fill>
		  LCD_Fill(0, player_data_fill_bottom, 240, 320, C_BLACK);
 8002772:	f8b7 1146 	ldrh.w	r1, [r7, #326]	@ 0x146
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800277e:	22f0      	movs	r2, #240	@ 0xf0
 8002780:	2000      	movs	r0, #0
 8002782:	f7ff f947 	bl	8001a14 <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <main+0x1d8>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e03f      	b.n	800280e <main+0x216>
	  }
	  // Toggle current_viewport when joystick left
	  else if(lr == 1){
 800278e:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 8002792:	2b01      	cmp	r3, #1
 8002794:	d13b      	bne.n	800280e <main+0x216>
		  current_viewport = (current_viewport == 2) ? 2 : 0;
 8002796:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800279a:	2b02      	cmp	r3, #2
 800279c:	d11e      	bne.n	80027dc <main+0x1e4>
 800279e:	2302      	movs	r3, #2
 80027a0:	e01d      	b.n	80027de <main+0x1e6>
 80027a2:	bf00      	nop
 80027a4:	f3af 8000 	nop.w
 80027a8:	36e55840 	.word	0x36e55840
 80027ac:	00000000 	.word	0x00000000
 80027b0:	e000edf0 	.word	0xe000edf0
 80027b4:	e0001000 	.word	0xe0001000
 80027b8:	20000934 	.word	0x20000934
 80027bc:	48000c00 	.word	0x48000c00
 80027c0:	200007d4 	.word	0x200007d4
 80027c4:	20000a64 	.word	0x20000a64
 80027c8:	200003b4 	.word	0x200003b4
 80027cc:	20000408 	.word	0x20000408
 80027d0:	20000a7c 	.word	0x20000a7c
 80027d4:	20000a18 	.word	0x20000a18
 80027d8:	48001400 	.word	0x48001400
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 80027e2:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 80027e6:	2200      	movs	r2, #0
 80027e8:	9200      	str	r2, [sp, #0]
 80027ea:	22f0      	movs	r2, #240	@ 0xf0
 80027ec:	2105      	movs	r1, #5
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7ff f910 	bl	8001a14 <LCD_Fill>
		  LCD_Fill(0, player_data_fill_bottom, 240, 320, C_BLACK);
 80027f4:	f8b7 1146 	ldrh.w	r1, [r7, #326]	@ 0x146
 80027f8:	2300      	movs	r3, #0
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002800:	22f0      	movs	r2, #240	@ 0xf0
 8002802:	2000      	movs	r0, #0
 8002804:	f7ff f906 	bl	8001a14 <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002808:	4bb3      	ldr	r3, [pc, #716]	@ (8002ad8 <main+0x4e0>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
	  }

	  if(LoRaRecieve == 1){
 800280e:	4bb3      	ldr	r3, [pc, #716]	@ (8002adc <main+0x4e4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d160      	bne.n	80028d8 <main+0x2e0>
		  //Get data
//		  	  lora_mode_receive_continuous(&lora);
		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 8002816:	4639      	mov	r1, r7
 8002818:	f207 133f 	addw	r3, r7, #319	@ 0x13f
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002822:	2280      	movs	r2, #128	@ 0x80
 8002824:	48ae      	ldr	r0, [pc, #696]	@ (8002ae0 <main+0x4e8>)
 8002826:	f7ff fe42 	bl	80024ae <lora_receive_packet_blocking>
		  	  memcpy(&armband_data, &buffer, sizeof(armband_data));
 800282a:	4639      	mov	r1, r7
 800282c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002830:	2210      	movs	r2, #16
 8002832:	4618      	mov	r0, r3
 8002834:	f00e fa77 	bl	8010d26 <memcpy>
//		  	  if (res != LORA_OK) {
//		  		  // Receive failed
//		  	  }

		  	  if (heartRateHigh(armband_data.heartrate, age) || heartRateLow(armband_data.heartrate, age)){
 8002838:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800283c:	4aa9      	ldr	r2, [pc, #676]	@ (8002ae4 <main+0x4ec>)
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f002 f888 	bl	8004958 <heartRateHigh>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <main+0x26c>
 800284e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002852:	4aa4      	ldr	r2, [pc, #656]	@ (8002ae4 <main+0x4ec>)
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f002 f8a9 	bl	80049b0 <heartRateLow>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <main+0x280>
		  		res = lora_send_packet(&lora, &buzzer, 1);
 8002864:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002868:	2201      	movs	r2, #1
 800286a:	4619      	mov	r1, r3
 800286c:	489c      	ldr	r0, [pc, #624]	@ (8002ae0 <main+0x4e8>)
 800286e:	f7ff fd6a 	bl	8002346 <lora_send_packet>
 8002872:	4603      	mov	r3, r0
 8002874:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
		  	  }

		  	  // Conditions to set buzz at base station
		  	  if (get_strain_factor() < 50 && get_strain_factor() > 0) {
 8002878:	f002 f936 	bl	8004ae8 <get_strain_factor>
 800287c:	eef0 7a40 	vmov.f32	s15, s0
 8002880:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8002ae8 <main+0x4f0>
 8002884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	d50f      	bpl.n	80028ae <main+0x2b6>
 800288e:	f002 f92b 	bl	8004ae8 <get_strain_factor>
 8002892:	eef0 7a40 	vmov.f32	s15, s0
 8002896:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	dd06      	ble.n	80028ae <main+0x2b6>

		  		// TEMP BUZZ DATA HERE
		  		TIM3->CCR3 = 15000;
 80028a0:	4b92      	ldr	r3, [pc, #584]	@ (8002aec <main+0x4f4>)
 80028a2:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80028a6:	63da      	str	r2, [r3, #60]	@ 0x3c
		  		buzzing = 1;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
		  	  }

		  	lora_mode_receive_continuous(&lora);
 80028ae:	488c      	ldr	r0, [pc, #560]	@ (8002ae0 <main+0x4e8>)
 80028b0:	f7ff fbb2 	bl	8002018 <lora_mode_receive_continuous>




		  	if (!lora_is_packet_available(&lora))
 80028b4:	488a      	ldr	r0, [pc, #552]	@ (8002ae0 <main+0x4e8>)
 80028b6:	f7ff fd58 	bl	800236a <lora_is_packet_available>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <main+0x2ce>
		  		LoRaRecieve = 0;
 80028c0:	4b86      	ldr	r3, [pc, #536]	@ (8002adc <main+0x4e4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
		  	input_data(armband_data.heartrate, armband_data.velocity);
 80028c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028ca:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 80028ce:	eeb0 0a67 	vmov.f32	s0, s15
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 f898 	bl	8004a08 <input_data>
	  }

	  // HOME SCREEN / RUNNER VIEW
	  if (current_viewport == 0 && DISPLAY_TIMER_TRIGGERED == 1) {
 80028d8:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d148      	bne.n	8002972 <main+0x37a>
 80028e0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad8 <main+0x4e0>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d144      	bne.n	8002972 <main+0x37a>
		  UG_FontSetTransparency(1);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f002 fddf 	bl	80054ac <UG_FontSetTransparency>
		  data = get_temp_hum();
 80028ee:	f7fe fb8f 	bl	8001010 <get_temp_hum>
 80028f2:	eeb0 7a40 	vmov.f32	s14, s0
 80028f6:	eef0 7a60 	vmov.f32	s15, s1
 80028fa:	ed87 7a4d 	vstr	s14, [r7, #308]	@ 0x134
 80028fe:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138

		  // DO THE BELOW ONLY ON TIME INTERVAL
		  LCD_Fill(80, 5, 240, 120, C_BLACK);
 8002902:	2300      	movs	r3, #0
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2378      	movs	r3, #120	@ 0x78
 8002908:	22f0      	movs	r2, #240	@ 0xf0
 800290a:	2105      	movs	r1, #5
 800290c:	2050      	movs	r0, #80	@ 0x50
 800290e:	f7ff f881 	bl	8001a14 <LCD_Fill>
		  snprintf(buffer, sizeof(buffer), "Temp: %.3f\nHumid: %.3f\nR1 Stamina: %.3f", data.temp, data.hum, get_strain_factor());
 8002912:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe2e 	bl	8000578 <__aeabi_f2d>
 800291c:	4604      	mov	r4, r0
 800291e:	460d      	mov	r5, r1
 8002920:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe27 	bl	8000578 <__aeabi_f2d>
 800292a:	4680      	mov	r8, r0
 800292c:	4689      	mov	r9, r1
 800292e:	f002 f8db 	bl	8004ae8 <get_strain_factor>
 8002932:	ee10 3a10 	vmov	r3, s0
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe1e 	bl	8000578 <__aeabi_f2d>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4638      	mov	r0, r7
 8002942:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002946:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800294a:	e9cd 4500 	strd	r4, r5, [sp]
 800294e:	4a68      	ldr	r2, [pc, #416]	@ (8002af0 <main+0x4f8>)
 8002950:	2180      	movs	r1, #128	@ 0x80
 8002952:	f00e f8e1 	bl	8010b18 <sniprintf>
		  // Blue = Green
		  // 0b1111100000000000 = Blue
		  // 0b0000011111100000 = Red
		  // 0b0000000000011111 = Green

		  LCD_PutStr(5, 5, buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002956:	463a      	mov	r2, r7
 8002958:	2300      	movs	r3, #0
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4b64      	ldr	r3, [pc, #400]	@ (8002af4 <main+0x4fc>)
 8002964:	2105      	movs	r1, #5
 8002966:	2005      	movs	r0, #5
 8002968:	f7ff f937 	bl	8001bda <LCD_PutStr>
//		  LCD_PutStr(50, 56, "Temp: " + data.temp + "\nHumid: " + data.hum, DEFAULT_FONT, C_GREEN, C_BLACK);
		  // Why the HAL_Delays? don't these only trigger on a timer anyway?
//		  HAL_Delay(100);
		  DISPLAY_TIMER_TRIGGERED = 0;
 800296c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ad8 <main+0x4e0>)
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
	  }
	  // We need an actual interrupt, otherwise can't listen for LoRa
	  if(current_viewport == 1 && KeyPadSelect){
 8002972:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8002976:	2b01      	cmp	r3, #1
 8002978:	d106      	bne.n	8002988 <main+0x390>
 800297a:	4b5f      	ldr	r3, [pc, #380]	@ (8002af8 <main+0x500>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <main+0x390>
		  current_viewport = 2;
 8002982:	2302      	movs	r3, #2
 8002984:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
//		  while(KeyPadSelect == 1){}
	  }
	  if (DISPLAY_TIMER_TRIGGERED == 1 && buzzing) {
 8002988:	4b53      	ldr	r3, [pc, #332]	@ (8002ad8 <main+0x4e0>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d114      	bne.n	80029ba <main+0x3c2>
 8002990:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 8002994:	2b00      	cmp	r3, #0
 8002996:	d010      	beq.n	80029ba <main+0x3c2>

	  		  if (wait == 0) {
 8002998:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <main+0x3bc>
	  			TIM3->CCR3 = 0;
 80029a0:	4b52      	ldr	r3, [pc, #328]	@ (8002aec <main+0x4f4>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	  			buzzing = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
	  			wait = 1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
 80029b2:	e002      	b.n	80029ba <main+0x3c2>
	  		  } else {
	  			  wait = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
	  		  }
	  	  }

	  if (current_viewport == 1 && DISPLAY_TIMER_TRIGGERED == 1) {
 80029ba:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80029be:	2b01      	cmp	r3, #1
 80029c0:	f040 80b6 	bne.w	8002b30 <main+0x538>
 80029c4:	4b44      	ldr	r3, [pc, #272]	@ (8002ad8 <main+0x4e0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	f040 80b1 	bne.w	8002b30 <main+0x538>
		  UG_FontSetTransparency(1);
 80029ce:	2001      	movs	r0, #1
 80029d0:	f002 fd6c 	bl	80054ac <UG_FontSetTransparency>
		  //Get the data that will be displayed by each player

//		  LCD_Fill(100, 5, 240, player_data_fill_height, C_BLACK);
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 80029d4:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80029d8:	2300      	movs	r3, #0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2300      	movs	r3, #0
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	4b44      	ldr	r3, [pc, #272]	@ (8002af4 <main+0x4fc>)
 80029e2:	2105      	movs	r1, #5
 80029e4:	2005      	movs	r0, #5
 80029e6:	f7ff f8f8 	bl	8001bda <LCD_PutStr>
		  LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 80029ea:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80029ee:	2300      	movs	r3, #0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2300      	movs	r3, #0
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4b3f      	ldr	r3, [pc, #252]	@ (8002af4 <main+0x4fc>)
 80029f8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80029fc:	2005      	movs	r0, #5
 80029fe:	f7ff f8ec 	bl	8001bda <LCD_PutStr>
		  LCD_PutStr(120, 288, stamina_data_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 8002a02:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	4b39      	ldr	r3, [pc, #228]	@ (8002af4 <main+0x4fc>)
 8002a10:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002a14:	2078      	movs	r0, #120	@ 0x78
 8002a16:	f7ff f8e0 	bl	8001bda <LCD_PutStr>
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
				  "R1 Statistics\nVelocity: %.3f\nHeart Rate: %d\nDistance: %.3f\nStep Count: %d",
				  armband_data.velocity, armband_data.heartrate,
 8002a1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fdaa 	bl	8000578 <__aeabi_f2d>
 8002a24:	4604      	mov	r4, r0
 8002a26:	460d      	mov	r5, r1
 8002a28:	f8d7 612c 	ldr.w	r6, [r7, #300]	@ 0x12c
				  armband_data.distance, armband_data.steps);
 8002a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
		  snprintf(player_write_buffer, sizeof(player_write_buffer),
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fda1 	bl	8000578 <__aeabi_f2d>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8002a3e:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8002a42:	9106      	str	r1, [sp, #24]
 8002a44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a48:	9602      	str	r6, [sp, #8]
 8002a4a:	e9cd 4500 	strd	r4, r5, [sp]
 8002a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8002afc <main+0x504>)
 8002a50:	2180      	movs	r1, #128	@ 0x80
 8002a52:	f00e f861 	bl	8010b18 <sniprintf>
		  // Green = Red
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002a56:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <main+0x4fc>)
 8002a66:	2105      	movs	r1, #5
 8002a68:	2005      	movs	r0, #5
 8002a6a:	f7ff f8b6 	bl	8001bda <LCD_PutStr>
		  snprintf(stamina_write_buffer, sizeof(stamina_write_buffer), "\nStamina: ");
 8002a6e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002a72:	4a23      	ldr	r2, [pc, #140]	@ (8002b00 <main+0x508>)
 8002a74:	2110      	movs	r1, #16
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00e f84e 	bl	8010b18 <sniprintf>
		  float stamina = get_strain_factor();
 8002a7c:	f002 f834 	bl	8004ae8 <get_strain_factor>
 8002a80:	ed87 0a50 	vstr	s0, [r7, #320]	@ 0x140
		  snprintf(stamina_data_write_buffer, sizeof(stamina_data_write_buffer), "%.3f", stamina);
 8002a84:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 8002a88:	f7fd fd76 	bl	8000578 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8002a94:	e9cd 2300 	strd	r2, r3, [sp]
 8002a98:	4a1a      	ldr	r2, [pc, #104]	@ (8002b04 <main+0x50c>)
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	f00e f83c 	bl	8010b18 <sniprintf>
		  LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002aa0:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <main+0x4fc>)
 8002ab0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002ab4:	2005      	movs	r0, #5
 8002ab6:	f7ff f890 	bl	8001bda <LCD_PutStr>
		  uint16_t stamina_color;
		  if (stamina == -1 ){
 8002aba:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8002abe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002ac2:	eef4 7a47 	vcmp.f32	s15, s14
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	d11d      	bne.n	8002b08 <main+0x510>
			  stamina_color = 0b0000011111100000; // RED
 8002acc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ad0:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
 8002ad4:	e01c      	b.n	8002b10 <main+0x518>
 8002ad6:	bf00      	nop
 8002ad8:	20000a7c 	.word	0x20000a7c
 8002adc:	20000a7e 	.word	0x20000a7e
 8002ae0:	20000a64 	.word	0x20000a64
 8002ae4:	2000027d 	.word	0x2000027d
 8002ae8:	42480000 	.word	0x42480000
 8002aec:	40000400 	.word	0x40000400
 8002af0:	08012c64 	.word	0x08012c64
 8002af4:	08012cec 	.word	0x08012cec
 8002af8:	20000a7d 	.word	0x20000a7d
 8002afc:	08012c8c 	.word	0x08012c8c
 8002b00:	08012cd8 	.word	0x08012cd8
 8002b04:	08012ce4 	.word	0x08012ce4
		  } else {
			  stamina_color = C_WHITE;
 8002b08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b0c:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
		  }
		  LCD_PutStr(120, 288, stamina_data_write_buffer, DEFAULT_FONT, stamina_color, C_BLACK);
 8002b10:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002b14:	2300      	movs	r3, #0
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <main+0x5a8>)
 8002b20:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002b24:	2078      	movs	r0, #120	@ 0x78
 8002b26:	f7ff f858 	bl	8001bda <LCD_PutStr>
//		  HAL_Delay(100);
		  DISPLAY_TIMER_TRIGGERED = 0;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <main+0x5ac>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]




	  // WEIGHT AND AGE INPUT
	  if (current_viewport == 2) {
 8002b30:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f47f ae01 	bne.w	800273c <main+0x144>
		  LCD_Fill(5, 5, 240, player_data_fill_height, C_BLACK);
 8002b3a:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 8002b3e:	2200      	movs	r2, #0
 8002b40:	9200      	str	r2, [sp, #0]
 8002b42:	22f0      	movs	r2, #240	@ 0xf0
 8002b44:	2105      	movs	r1, #5
 8002b46:	2005      	movs	r0, #5
 8002b48:	f7fe ff64 	bl	8001a14 <LCD_Fill>
		  while ( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8002b4c:	bf00      	nop
 8002b4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b52:	4815      	ldr	r0, [pc, #84]	@ (8002ba8 <main+0x5b0>)
 8002b54:	f005 fbfa 	bl	800834c <HAL_GPIO_ReadPin>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f7      	beq.n	8002b4e <main+0x556>
		     }
		  keypad_init();
 8002b5e:	f7fe fb93 	bl	8001288 <keypad_init>
		  running();
 8002b62:	f7fe fc8d 	bl	8001480 <running>
		  init_analytics(age);
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <main+0x5b4>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fece 	bl	800490c <init_analytics>
		  KeyPadSelect = 0;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb0 <main+0x5b8>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
		  // Go back to runner screen
		  current_viewport = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
		  LCD_Fill(5, 5, 160, 40, C_BLACK);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2328      	movs	r3, #40	@ 0x28
 8002b82:	22a0      	movs	r2, #160	@ 0xa0
 8002b84:	2105      	movs	r1, #5
 8002b86:	2005      	movs	r0, #5
 8002b88:	f7fe ff44 	bl	8001a14 <LCD_Fill>
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <main+0x5ac>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
		  // Listen to 'D' again
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b98:	4806      	ldr	r0, [pc, #24]	@ (8002bb4 <main+0x5bc>)
 8002b9a:	f005 fbef 	bl	800837c <HAL_GPIO_WritePin>
  {
 8002b9e:	e5cd      	b.n	800273c <main+0x144>
 8002ba0:	08012cec 	.word	0x08012cec
 8002ba4:	20000a7c 	.word	0x20000a7c
 8002ba8:	48000c00 	.word	0x48000c00
 8002bac:	2000027d 	.word	0x2000027d
 8002bb0:	20000a7d 	.word	0x20000a7d
 8002bb4:	48001400 	.word	0x48001400

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b096      	sub	sp, #88	@ 0x58
 8002bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	2244      	movs	r2, #68	@ 0x44
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f00e f81d 	bl	8010c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bcc:	463b      	mov	r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002bda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002bde:	f006 fa0b 	bl	8008ff8 <HAL_PWREx_ControlVoltageScaling>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002be8:	f001 f88e 	bl	8003d08 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002bec:	f006 f9d4 	bl	8008f98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002bf0:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <SystemClock_Config+0xc0>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf6:	4a20      	ldr	r2, [pc, #128]	@ (8002c78 <SystemClock_Config+0xc0>)
 8002bf8:	f023 0318 	bic.w	r3, r3, #24
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002c00:	2314      	movs	r3, #20
 8002c02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c04:	2301      	movs	r3, #1
 8002c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c10:	2360      	movs	r3, #96	@ 0x60
 8002c12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c14:	2302      	movs	r3, #2
 8002c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002c20:	2310      	movs	r3, #16
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c24:	2302      	movs	r3, #2
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4618      	mov	r0, r3
 8002c36:	f006 fa93 	bl	8009160 <HAL_RCC_OscConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c40:	f001 f862 	bl	8003d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c44:	230f      	movs	r3, #15
 8002c46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c58:	463b      	mov	r3, r7
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f006 fe99 	bl	8009994 <HAL_RCC_ClockConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002c68:	f001 f84e 	bl	8003d08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002c6c:	f008 fba2 	bl	800b3b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002c70:	bf00      	nop
 8002c72:	3758      	adds	r7, #88	@ 0x58
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b0a6      	sub	sp, #152	@ 0x98
 8002c80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2294      	movs	r2, #148	@ 0x94
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00d ffbc 	bl	8010c06 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8002c8e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8002c92:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002c9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002ca4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002caa:	2301      	movs	r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002cb2:	2318      	movs	r3, #24
 8002cb4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002cc2:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <PeriphCommonClock_Config+0x64>)
 8002cc4:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f007 f921 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002cd4:	f001 f818 	bl	8003d08 <Error_Handler>
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3798      	adds	r7, #152	@ 0x98
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	01110000 	.word	0x01110000

08002ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cea:	463b      	mov	r3, r7
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
 8002cf8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002cfa:	4b29      	ldr	r3, [pc, #164]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002cfc:	4a29      	ldr	r2, [pc, #164]	@ (8002da4 <MX_ADC1_Init+0xc0>)
 8002cfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d00:	4b27      	ldr	r3, [pc, #156]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d06:	4b26      	ldr	r3, [pc, #152]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d0c:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d12:	4b23      	ldr	r3, [pc, #140]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d1e:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d24:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d38:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d3e:	4b18      	ldr	r3, [pc, #96]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d44:	4b16      	ldr	r3, [pc, #88]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d4c:	4b14      	ldr	r3, [pc, #80]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002d52:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d5a:	4811      	ldr	r0, [pc, #68]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d5c:	f004 f8be 	bl	8006edc <HAL_ADC_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002d66:	f000 ffcf 	bl	8003d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002da8 <MX_ADC1_Init+0xc4>)
 8002d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d6e:	2306      	movs	r3, #6
 8002d70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d76:	237f      	movs	r3, #127	@ 0x7f
 8002d78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	4619      	mov	r1, r3
 8002d86:	4806      	ldr	r0, [pc, #24]	@ (8002da0 <MX_ADC1_Init+0xbc>)
 8002d88:	f004 f9ee 	bl	8007168 <HAL_ADC_ConfigChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002d92:	f000 ffb9 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200002f4 	.word	0x200002f4
 8002da4:	50040000 	.word	0x50040000
 8002da8:	04300002 	.word	0x04300002

08002dac <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002db2:	4a13      	ldr	r2, [pc, #76]	@ (8002e00 <MX_COMP1_Init+0x54>)
 8002db4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002db8:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <MX_COMP1_Init+0x58>)
 8002dba:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002dbe:	2280      	movs	r2, #128	@ 0x80
 8002dc0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <MX_COMP1_Init+0x50>)
 8002de8:	f004 fe62 	bl	8007ab0 <HAL_COMP_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8002df2:	f000 ff89 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000035c 	.word	0x2000035c
 8002e00:	40010200 	.word	0x40010200
 8002e04:	00800030 	.word	0x00800030

08002e08 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002e0c:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e0e:	4a13      	ldr	r2, [pc, #76]	@ (8002e5c <MX_COMP2_Init+0x54>)
 8002e10:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002e12:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e14:	2270      	movs	r2, #112	@ 0x70
 8002e16:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002e18:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e1a:	2280      	movs	r2, #128	@ 0x80
 8002e1c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002e36:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	@ (8002e58 <MX_COMP2_Init+0x50>)
 8002e44:	f004 fe34 	bl	8007ab0 <HAL_COMP_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002e4e:	f000 ff5b 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000388 	.word	0x20000388
 8002e5c:	40010204 	.word	0x40010204

08002e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <MX_I2C1_Init+0x78>)
 8002e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002edc <MX_I2C1_Init+0x7c>)
 8002e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e70:	4b18      	ldr	r3, [pc, #96]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e76:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e82:	4b14      	ldr	r3, [pc, #80]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e88:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e9a:	480e      	ldr	r0, [pc, #56]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002e9c:	f005 faa9 	bl	80083f2 <HAL_I2C_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ea6:	f000 ff2f 	bl	8003d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4809      	ldr	r0, [pc, #36]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002eae:	f005 ffdb 	bl	8008e68 <HAL_I2CEx_ConfigAnalogFilter>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002eb8:	f000 ff26 	bl	8003d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4805      	ldr	r0, [pc, #20]	@ (8002ed4 <MX_I2C1_Init+0x74>)
 8002ec0:	f006 f81d 	bl	8008efe <HAL_I2CEx_ConfigDigitalFilter>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002eca:	f000 ff1d 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200003b4 	.word	0x200003b4
 8002ed8:	40005400 	.word	0x40005400
 8002edc:	00707cbb 	.word	0x00707cbb

08002ee0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f58 <MX_I2C2_Init+0x78>)
 8002ee8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8002eea:	4b1a      	ldr	r3, [pc, #104]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002eec:	4a1b      	ldr	r2, [pc, #108]	@ (8002f5c <MX_I2C2_Init+0x7c>)
 8002eee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ef0:	4b18      	ldr	r3, [pc, #96]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ef6:	4b17      	ldr	r3, [pc, #92]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002efc:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f02:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f08:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f14:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f1a:	480e      	ldr	r0, [pc, #56]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002f1c:	f005 fa69 	bl	80083f2 <HAL_I2C_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002f26:	f000 feef 	bl	8003d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4809      	ldr	r0, [pc, #36]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002f2e:	f005 ff9b 	bl	8008e68 <HAL_I2CEx_ConfigAnalogFilter>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002f38:	f000 fee6 	bl	8003d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4805      	ldr	r0, [pc, #20]	@ (8002f54 <MX_I2C2_Init+0x74>)
 8002f40:	f005 ffdd 	bl	8008efe <HAL_I2CEx_ConfigDigitalFilter>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002f4a:	f000 fedd 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000408 	.word	0x20000408
 8002f58:	40005800 	.word	0x40005800
 8002f5c:	00707cbb 	.word	0x00707cbb

08002f60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002f64:	4b22      	ldr	r3, [pc, #136]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f66:	4a23      	ldr	r2, [pc, #140]	@ (8002ff4 <MX_LPUART1_UART_Init+0x94>)
 8002f68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f70:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f86:	220c      	movs	r2, #12
 8002f88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f90:	4b17      	ldr	r3, [pc, #92]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f96:	4b16      	ldr	r3, [pc, #88]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002fa2:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002fa8:	4811      	ldr	r0, [pc, #68]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002faa:	f00c f8ef 	bl	800f18c <HAL_UART_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002fb4:	f000 fea8 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fb8:	2100      	movs	r1, #0
 8002fba:	480d      	ldr	r0, [pc, #52]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002fbc:	f00c ff12 	bl	800fde4 <HAL_UARTEx_SetTxFifoThreshold>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002fc6:	f000 fe9f 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4808      	ldr	r0, [pc, #32]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002fce:	f00c ff47 	bl	800fe60 <HAL_UARTEx_SetRxFifoThreshold>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002fd8:	f000 fe96 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002fdc:	4804      	ldr	r0, [pc, #16]	@ (8002ff0 <MX_LPUART1_UART_Init+0x90>)
 8002fde:	f00c fec8 	bl	800fd72 <HAL_UARTEx_DisableFifoMode>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002fe8:	f000 fe8e 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000045c 	.word	0x2000045c
 8002ff4:	40008000 	.word	0x40008000

08002ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ffc:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8002ffe:	4a23      	ldr	r2, [pc, #140]	@ (800308c <MX_USART2_UART_Init+0x94>)
 8003000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003002:	4b21      	ldr	r3, [pc, #132]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003004:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800300a:	4b1f      	ldr	r3, [pc, #124]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003010:	4b1d      	ldr	r3, [pc, #116]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003016:	4b1c      	ldr	r3, [pc, #112]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800301c:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 800301e:	220c      	movs	r2, #12
 8003020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003022:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003028:	4b17      	ldr	r3, [pc, #92]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800302e:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003030:	2200      	movs	r2, #0
 8003032:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003034:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003036:	2200      	movs	r2, #0
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800303a:	4b13      	ldr	r3, [pc, #76]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 800303c:	2200      	movs	r2, #0
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003040:	4811      	ldr	r0, [pc, #68]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003042:	f00c f8a3 	bl	800f18c <HAL_UART_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800304c:	f000 fe5c 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003050:	2100      	movs	r1, #0
 8003052:	480d      	ldr	r0, [pc, #52]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003054:	f00c fec6 	bl	800fde4 <HAL_UARTEx_SetTxFifoThreshold>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800305e:	f000 fe53 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003062:	2100      	movs	r1, #0
 8003064:	4808      	ldr	r0, [pc, #32]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003066:	f00c fefb 	bl	800fe60 <HAL_UARTEx_SetRxFifoThreshold>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003070:	f000 fe4a 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003074:	4804      	ldr	r0, [pc, #16]	@ (8003088 <MX_USART2_UART_Init+0x90>)
 8003076:	f00c fe7c 	bl	800fd72 <HAL_UARTEx_DisableFifoMode>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003080:	f000 fe42 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200004f0 	.word	0x200004f0
 800308c:	40004400 	.word	0x40004400

08003090 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003094:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 8003096:	4a23      	ldr	r2, [pc, #140]	@ (8003124 <MX_USART3_UART_Init+0x94>)
 8003098:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800309a:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 800309c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030b6:	220c      	movs	r2, #12
 80030b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ba:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c0:	4b17      	ldr	r3, [pc, #92]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030c6:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030cc:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d2:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030d8:	4811      	ldr	r0, [pc, #68]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030da:	f00c f857 	bl	800f18c <HAL_UART_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030e4:	f000 fe10 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030e8:	2100      	movs	r1, #0
 80030ea:	480d      	ldr	r0, [pc, #52]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030ec:	f00c fe7a 	bl	800fde4 <HAL_UARTEx_SetTxFifoThreshold>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030f6:	f000 fe07 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030fa:	2100      	movs	r1, #0
 80030fc:	4808      	ldr	r0, [pc, #32]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 80030fe:	f00c feaf 	bl	800fe60 <HAL_UARTEx_SetRxFifoThreshold>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003108:	f000 fdfe 	bl	8003d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800310c:	4804      	ldr	r0, [pc, #16]	@ (8003120 <MX_USART3_UART_Init+0x90>)
 800310e:	f00c fe30 	bl	800fd72 <HAL_UARTEx_DisableFifoMode>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003118:	f000 fdf6 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000584 	.word	0x20000584
 8003124:	40004800 	.word	0x40004800

08003128 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800312c:	4b45      	ldr	r3, [pc, #276]	@ (8003244 <MX_SAI1_Init+0x11c>)
 800312e:	4a46      	ldr	r2, [pc, #280]	@ (8003248 <MX_SAI1_Init+0x120>)
 8003130:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8003132:	4b44      	ldr	r3, [pc, #272]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003134:	2200      	movs	r2, #0
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003138:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <MX_SAI1_Init+0x11c>)
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800313e:	4b41      	ldr	r3, [pc, #260]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003140:	2240      	movs	r2, #64	@ 0x40
 8003142:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003144:	4b3f      	ldr	r3, [pc, #252]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003146:	2200      	movs	r2, #0
 8003148:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800314a:	4b3e      	ldr	r3, [pc, #248]	@ (8003244 <MX_SAI1_Init+0x11c>)
 800314c:	2200      	movs	r2, #0
 800314e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003150:	4b3c      	ldr	r3, [pc, #240]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003156:	4b3b      	ldr	r3, [pc, #236]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800315c:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <MX_SAI1_Init+0x11c>)
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8003162:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003168:	4b36      	ldr	r3, [pc, #216]	@ (8003244 <MX_SAI1_Init+0x11c>)
 800316a:	2200      	movs	r2, #0
 800316c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800316e:	4b35      	ldr	r3, [pc, #212]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003170:	4a36      	ldr	r2, [pc, #216]	@ (800324c <MX_SAI1_Init+0x124>)
 8003172:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003174:	4b33      	ldr	r3, [pc, #204]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800317a:	4b32      	ldr	r3, [pc, #200]	@ (8003244 <MX_SAI1_Init+0x11c>)
 800317c:	2200      	movs	r2, #0
 800317e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003180:	4b30      	ldr	r3, [pc, #192]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003182:	2200      	movs	r2, #0
 8003184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003186:	4b2f      	ldr	r3, [pc, #188]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 800318c:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <MX_SAI1_Init+0x11c>)
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8003194:	4b2b      	ldr	r3, [pc, #172]	@ (8003244 <MX_SAI1_Init+0x11c>)
 8003196:	2200      	movs	r2, #0
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800319a:	4b2a      	ldr	r3, [pc, #168]	@ (8003244 <MX_SAI1_Init+0x11c>)
 800319c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80031a2:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031a4:	2208      	movs	r2, #8
 80031a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80031a8:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80031ae:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80031b4:	4b23      	ldr	r3, [pc, #140]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80031ba:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80031c0:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80031c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80031cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80031d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80031d8:	481a      	ldr	r0, [pc, #104]	@ (8003244 <MX_SAI1_Init+0x11c>)
 80031da:	f008 fc27 	bl	800ba2c <HAL_SAI_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80031e4:	f000 fd90 	bl	8003d08 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <MX_SAI1_Init+0x128>)
 80031ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003254 <MX_SAI1_Init+0x12c>)
 80031ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80031ee:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <MX_SAI1_Init+0x128>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80031f4:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <MX_SAI1_Init+0x128>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <MX_SAI1_Init+0x128>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003200:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <MX_SAI1_Init+0x128>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003206:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <MX_SAI1_Init+0x128>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800320c:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <MX_SAI1_Init+0x128>)
 800320e:	4a0f      	ldr	r2, [pc, #60]	@ (800324c <MX_SAI1_Init+0x124>)
 8003210:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003212:	4b0f      	ldr	r3, [pc, #60]	@ (8003250 <MX_SAI1_Init+0x128>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003218:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <MX_SAI1_Init+0x128>)
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800321e:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <MX_SAI1_Init+0x128>)
 8003220:	2200      	movs	r2, #0
 8003222:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <MX_SAI1_Init+0x128>)
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800322a:	2302      	movs	r3, #2
 800322c:	2200      	movs	r2, #0
 800322e:	2100      	movs	r1, #0
 8003230:	4807      	ldr	r0, [pc, #28]	@ (8003250 <MX_SAI1_Init+0x128>)
 8003232:	f008 fbc9 	bl	800b9c8 <HAL_SAI_InitProtocol>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 800323c:	f000 fd64 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000618 	.word	0x20000618
 8003248:	40015424 	.word	0x40015424
 800324c:	0002ee00 	.word	0x0002ee00
 8003250:	200006ac 	.word	0x200006ac
 8003254:	40015404 	.word	0x40015404

08003258 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800325c:	4b2f      	ldr	r3, [pc, #188]	@ (800331c <MX_SAI2_Init+0xc4>)
 800325e:	4a30      	ldr	r2, [pc, #192]	@ (8003320 <MX_SAI2_Init+0xc8>)
 8003260:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003262:	4b2e      	ldr	r3, [pc, #184]	@ (800331c <MX_SAI2_Init+0xc4>)
 8003264:	2200      	movs	r2, #0
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003268:	4b2c      	ldr	r3, [pc, #176]	@ (800331c <MX_SAI2_Init+0xc4>)
 800326a:	2200      	movs	r2, #0
 800326c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800326e:	4b2b      	ldr	r3, [pc, #172]	@ (800331c <MX_SAI2_Init+0xc4>)
 8003270:	2240      	movs	r2, #64	@ 0x40
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003274:	4b29      	ldr	r3, [pc, #164]	@ (800331c <MX_SAI2_Init+0xc4>)
 8003276:	2200      	movs	r2, #0
 8003278:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800327a:	4b28      	ldr	r3, [pc, #160]	@ (800331c <MX_SAI2_Init+0xc4>)
 800327c:	2200      	movs	r2, #0
 800327e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003280:	4b26      	ldr	r3, [pc, #152]	@ (800331c <MX_SAI2_Init+0xc4>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003286:	4b25      	ldr	r3, [pc, #148]	@ (800331c <MX_SAI2_Init+0xc4>)
 8003288:	2200      	movs	r2, #0
 800328a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800328c:	4b23      	ldr	r3, [pc, #140]	@ (800331c <MX_SAI2_Init+0xc4>)
 800328e:	2200      	movs	r2, #0
 8003290:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8003292:	4b22      	ldr	r3, [pc, #136]	@ (800331c <MX_SAI2_Init+0xc4>)
 8003294:	2200      	movs	r2, #0
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003298:	4b20      	ldr	r3, [pc, #128]	@ (800331c <MX_SAI2_Init+0xc4>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800329e:	4b1f      	ldr	r3, [pc, #124]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032a0:	4a20      	ldr	r2, [pc, #128]	@ (8003324 <MX_SAI2_Init+0xcc>)
 80032a2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80032b0:	4b1a      	ldr	r3, [pc, #104]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80032b6:	4b19      	ldr	r3, [pc, #100]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80032bc:	4b17      	ldr	r3, [pc, #92]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80032c4:	4b15      	ldr	r3, [pc, #84]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80032ca:	4b14      	ldr	r3, [pc, #80]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80032d2:	4b12      	ldr	r3, [pc, #72]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032d4:	2208      	movs	r2, #8
 80032d6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80032d8:	4b10      	ldr	r3, [pc, #64]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032da:	2201      	movs	r2, #1
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80032e4:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80032f0:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80032f6:	4b09      	ldr	r3, [pc, #36]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80032fc:	4b07      	ldr	r3, [pc, #28]	@ (800331c <MX_SAI2_Init+0xc4>)
 80032fe:	2201      	movs	r2, #1
 8003300:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <MX_SAI2_Init+0xc4>)
 8003304:	2200      	movs	r2, #0
 8003306:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8003308:	4804      	ldr	r0, [pc, #16]	@ (800331c <MX_SAI2_Init+0xc4>)
 800330a:	f008 fb8f 	bl	800ba2c <HAL_SAI_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8003314:	f000 fcf8 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000740 	.word	0x20000740
 8003320:	40015804 	.word	0x40015804
 8003324:	0002ee00 	.word	0x0002ee00

08003328 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800332c:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <MX_SPI2_Init+0x74>)
 800332e:	4a1c      	ldr	r2, [pc, #112]	@ (80033a0 <MX_SPI2_Init+0x78>)
 8003330:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003332:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <MX_SPI2_Init+0x74>)
 8003334:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003338:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800333a:	4b18      	ldr	r3, [pc, #96]	@ (800339c <MX_SPI2_Init+0x74>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003340:	4b16      	ldr	r3, [pc, #88]	@ (800339c <MX_SPI2_Init+0x74>)
 8003342:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003346:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003348:	4b14      	ldr	r3, [pc, #80]	@ (800339c <MX_SPI2_Init+0x74>)
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800334e:	4b13      	ldr	r3, [pc, #76]	@ (800339c <MX_SPI2_Init+0x74>)
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003354:	4b11      	ldr	r3, [pc, #68]	@ (800339c <MX_SPI2_Init+0x74>)
 8003356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800335a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800335c:	4b0f      	ldr	r3, [pc, #60]	@ (800339c <MX_SPI2_Init+0x74>)
 800335e:	2218      	movs	r2, #24
 8003360:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <MX_SPI2_Init+0x74>)
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003368:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <MX_SPI2_Init+0x74>)
 800336a:	2200      	movs	r2, #0
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <MX_SPI2_Init+0x74>)
 8003370:	2200      	movs	r2, #0
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003374:	4b09      	ldr	r3, [pc, #36]	@ (800339c <MX_SPI2_Init+0x74>)
 8003376:	2207      	movs	r2, #7
 8003378:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <MX_SPI2_Init+0x74>)
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <MX_SPI2_Init+0x74>)
 8003382:	2208      	movs	r2, #8
 8003384:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003386:	4805      	ldr	r0, [pc, #20]	@ (800339c <MX_SPI2_Init+0x74>)
 8003388:	f008 fe9c 	bl	800c0c4 <HAL_SPI_Init>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003392:	f000 fcb9 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200007d4 	.word	0x200007d4
 80033a0:	40003800 	.word	0x40003800

080033a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033aa:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <MX_SPI3_Init+0x78>)
 80033ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80033b6:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80033bc:	4b16      	ldr	r3, [pc, #88]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80033c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c4:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033ca:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80033d0:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033de:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033f2:	2207      	movs	r2, #7
 80033f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033f6:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <MX_SPI3_Init+0x74>)
 80033fe:	2208      	movs	r2, #8
 8003400:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003402:	4805      	ldr	r0, [pc, #20]	@ (8003418 <MX_SPI3_Init+0x74>)
 8003404:	f008 fe5e 	bl	800c0c4 <HAL_SPI_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800340e:	f000 fc7b 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000838 	.word	0x20000838
 800341c:	40003c00 	.word	0x40003c00

08003420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b098      	sub	sp, #96	@ 0x60
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003426:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003432:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800343e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	60da      	str	r2, [r3, #12]
 800344c:	611a      	str	r2, [r3, #16]
 800344e:	615a      	str	r2, [r3, #20]
 8003450:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003452:	463b      	mov	r3, r7
 8003454:	222c      	movs	r2, #44	@ 0x2c
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f00d fbd4 	bl	8010c06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800345e:	4b4a      	ldr	r3, [pc, #296]	@ (8003588 <MX_TIM1_Init+0x168>)
 8003460:	4a4a      	ldr	r2, [pc, #296]	@ (800358c <MX_TIM1_Init+0x16c>)
 8003462:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003464:	4b48      	ldr	r3, [pc, #288]	@ (8003588 <MX_TIM1_Init+0x168>)
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <MX_TIM1_Init+0x168>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003470:	4b45      	ldr	r3, [pc, #276]	@ (8003588 <MX_TIM1_Init+0x168>)
 8003472:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003476:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003478:	4b43      	ldr	r3, [pc, #268]	@ (8003588 <MX_TIM1_Init+0x168>)
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800347e:	4b42      	ldr	r3, [pc, #264]	@ (8003588 <MX_TIM1_Init+0x168>)
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003484:	4b40      	ldr	r3, [pc, #256]	@ (8003588 <MX_TIM1_Init+0x168>)
 8003486:	2200      	movs	r2, #0
 8003488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800348a:	483f      	ldr	r0, [pc, #252]	@ (8003588 <MX_TIM1_Init+0x168>)
 800348c:	f00a fb85 	bl	800db9a <HAL_TIM_PWM_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003496:	f000 fc37 	bl	8003d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034aa:	4619      	mov	r1, r3
 80034ac:	4836      	ldr	r0, [pc, #216]	@ (8003588 <MX_TIM1_Init+0x168>)
 80034ae:	f00b fc83 	bl	800edb8 <HAL_TIMEx_MasterConfigSynchronization>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80034b8:	f000 fc26 	bl	8003d08 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80034bc:	2301      	movs	r3, #1
 80034be:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80034c4:	2300      	movs	r3, #0
 80034c6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80034c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80034cc:	461a      	mov	r2, r3
 80034ce:	2101      	movs	r1, #1
 80034d0:	482d      	ldr	r0, [pc, #180]	@ (8003588 <MX_TIM1_Init+0x168>)
 80034d2:	f00b fd77 	bl	800efc4 <HAL_TIMEx_ConfigBreakInput>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80034dc:	f000 fc14 	bl	8003d08 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80034e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80034e4:	461a      	mov	r2, r3
 80034e6:	2102      	movs	r1, #2
 80034e8:	4827      	ldr	r0, [pc, #156]	@ (8003588 <MX_TIM1_Init+0x168>)
 80034ea:	f00b fd6b 	bl	800efc4 <HAL_TIMEx_ConfigBreakInput>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80034f4:	f000 fc08 	bl	8003d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f8:	2360      	movs	r3, #96	@ 0x60
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003504:	2300      	movs	r3, #0
 8003506:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003510:	2300      	movs	r3, #0
 8003512:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003514:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003518:	2208      	movs	r2, #8
 800351a:	4619      	mov	r1, r3
 800351c:	481a      	ldr	r0, [pc, #104]	@ (8003588 <MX_TIM1_Init+0x168>)
 800351e:	f00a fe15 	bl	800e14c <HAL_TIM_PWM_ConfigChannel>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8003528:	f000 fbee 	bl	8003d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800352c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003530:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003536:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003544:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800354a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8003550:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003554:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003556:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800355a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003564:	463b      	mov	r3, r7
 8003566:	4619      	mov	r1, r3
 8003568:	4807      	ldr	r0, [pc, #28]	@ (8003588 <MX_TIM1_Init+0x168>)
 800356a:	f00b fcad 	bl	800eec8 <HAL_TIMEx_ConfigBreakDeadTime>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8003574:	f000 fbc8 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003578:	4803      	ldr	r0, [pc, #12]	@ (8003588 <MX_TIM1_Init+0x168>)
 800357a:	f000 ffc5 	bl	8004508 <HAL_TIM_MspPostInit>

}
 800357e:	bf00      	nop
 8003580:	3760      	adds	r7, #96	@ 0x60
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	2000089c 	.word	0x2000089c
 800358c:	40012c00 	.word	0x40012c00

08003590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	@ 0x28
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003596:	f107 031c 	add.w	r3, r7, #28
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035a2:	463b      	mov	r3, r7
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
 80035b0:	615a      	str	r2, [r3, #20]
 80035b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035b4:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <MX_TIM2_Init+0xc4>)
 80035b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80035bc:	4b25      	ldr	r3, [pc, #148]	@ (8003654 <MX_TIM2_Init+0xc4>)
 80035be:	2200      	movs	r2, #0
 80035c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c2:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <MX_TIM2_Init+0xc4>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80035c8:	4b22      	ldr	r3, [pc, #136]	@ (8003654 <MX_TIM2_Init+0xc4>)
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295
 80035ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d0:	4b20      	ldr	r3, [pc, #128]	@ (8003654 <MX_TIM2_Init+0xc4>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003654 <MX_TIM2_Init+0xc4>)
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80035dc:	481d      	ldr	r0, [pc, #116]	@ (8003654 <MX_TIM2_Init+0xc4>)
 80035de:	f00a fadc 	bl	800db9a <HAL_TIM_PWM_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80035e8:	f000 fb8e 	bl	8003d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035f4:	f107 031c 	add.w	r3, r7, #28
 80035f8:	4619      	mov	r1, r3
 80035fa:	4816      	ldr	r0, [pc, #88]	@ (8003654 <MX_TIM2_Init+0xc4>)
 80035fc:	f00b fbdc 	bl	800edb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003606:	f000 fb7f 	bl	8003d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360a:	2360      	movs	r3, #96	@ 0x60
 800360c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800361a:	463b      	mov	r3, r7
 800361c:	2200      	movs	r2, #0
 800361e:	4619      	mov	r1, r3
 8003620:	480c      	ldr	r0, [pc, #48]	@ (8003654 <MX_TIM2_Init+0xc4>)
 8003622:	f00a fd93 	bl	800e14c <HAL_TIM_PWM_ConfigChannel>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800362c:	f000 fb6c 	bl	8003d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003630:	463b      	mov	r3, r7
 8003632:	2208      	movs	r2, #8
 8003634:	4619      	mov	r1, r3
 8003636:	4807      	ldr	r0, [pc, #28]	@ (8003654 <MX_TIM2_Init+0xc4>)
 8003638:	f00a fd88 	bl	800e14c <HAL_TIM_PWM_ConfigChannel>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003642:	f000 fb61 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003646:	4803      	ldr	r0, [pc, #12]	@ (8003654 <MX_TIM2_Init+0xc4>)
 8003648:	f000 ff5e 	bl	8004508 <HAL_TIM_MspPostInit>

}
 800364c:	bf00      	nop
 800364e:	3728      	adds	r7, #40	@ 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	200008e8 	.word	0x200008e8

08003658 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08e      	sub	sp, #56	@ 0x38
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800365e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003678:	463b      	mov	r3, r7
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	611a      	str	r2, [r3, #16]
 8003686:	615a      	str	r2, [r3, #20]
 8003688:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800368a:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <MX_TIM3_Init+0xfc>)
 800368c:	4a32      	ldr	r2, [pc, #200]	@ (8003758 <MX_TIM3_Init+0x100>)
 800368e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003690:	4b30      	ldr	r3, [pc, #192]	@ (8003754 <MX_TIM3_Init+0xfc>)
 8003692:	2200      	movs	r2, #0
 8003694:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003696:	4b2f      	ldr	r3, [pc, #188]	@ (8003754 <MX_TIM3_Init+0xfc>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800369c:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <MX_TIM3_Init+0xfc>)
 800369e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003754 <MX_TIM3_Init+0xfc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003754 <MX_TIM3_Init+0xfc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036b0:	4828      	ldr	r0, [pc, #160]	@ (8003754 <MX_TIM3_Init+0xfc>)
 80036b2:	f00a f949 	bl	800d948 <HAL_TIM_Base_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80036bc:	f000 fb24 	bl	8003d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036ca:	4619      	mov	r1, r3
 80036cc:	4821      	ldr	r0, [pc, #132]	@ (8003754 <MX_TIM3_Init+0xfc>)
 80036ce:	f00a fe51 	bl	800e374 <HAL_TIM_ConfigClockSource>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80036d8:	f000 fb16 	bl	8003d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80036dc:	481d      	ldr	r0, [pc, #116]	@ (8003754 <MX_TIM3_Init+0xfc>)
 80036de:	f00a fa5c 	bl	800db9a <HAL_TIM_PWM_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80036e8:	f000 fb0e 	bl	8003d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036f4:	f107 031c 	add.w	r3, r7, #28
 80036f8:	4619      	mov	r1, r3
 80036fa:	4816      	ldr	r0, [pc, #88]	@ (8003754 <MX_TIM3_Init+0xfc>)
 80036fc:	f00b fb5c 	bl	800edb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003706:	f000 faff 	bl	8003d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800370a:	2360      	movs	r3, #96	@ 0x60
 800370c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800371a:	463b      	mov	r3, r7
 800371c:	2204      	movs	r2, #4
 800371e:	4619      	mov	r1, r3
 8003720:	480c      	ldr	r0, [pc, #48]	@ (8003754 <MX_TIM3_Init+0xfc>)
 8003722:	f00a fd13 	bl	800e14c <HAL_TIM_PWM_ConfigChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800372c:	f000 faec 	bl	8003d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003730:	463b      	mov	r3, r7
 8003732:	2208      	movs	r2, #8
 8003734:	4619      	mov	r1, r3
 8003736:	4807      	ldr	r0, [pc, #28]	@ (8003754 <MX_TIM3_Init+0xfc>)
 8003738:	f00a fd08 	bl	800e14c <HAL_TIM_PWM_ConfigChannel>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003742:	f000 fae1 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003746:	4803      	ldr	r0, [pc, #12]	@ (8003754 <MX_TIM3_Init+0xfc>)
 8003748:	f000 fede 	bl	8004508 <HAL_TIM_MspPostInit>

}
 800374c:	bf00      	nop
 800374e:	3738      	adds	r7, #56	@ 0x38
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000934 	.word	0x20000934
 8003758:	40000400 	.word	0x40000400

0800375c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800376e:	463b      	mov	r3, r7
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
 800377c:	615a      	str	r2, [r3, #20]
 800377e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003780:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <MX_TIM4_Init+0xac>)
 8003782:	4a22      	ldr	r2, [pc, #136]	@ (800380c <MX_TIM4_Init+0xb0>)
 8003784:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003786:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <MX_TIM4_Init+0xac>)
 8003788:	2200      	movs	r2, #0
 800378a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378c:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <MX_TIM4_Init+0xac>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003792:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <MX_TIM4_Init+0xac>)
 8003794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003798:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800379a:	4b1b      	ldr	r3, [pc, #108]	@ (8003808 <MX_TIM4_Init+0xac>)
 800379c:	2200      	movs	r2, #0
 800379e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a0:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <MX_TIM4_Init+0xac>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80037a6:	4818      	ldr	r0, [pc, #96]	@ (8003808 <MX_TIM4_Init+0xac>)
 80037a8:	f00a f9f7 	bl	800db9a <HAL_TIM_PWM_Init>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80037b2:	f000 faa9 	bl	8003d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037be:	f107 031c 	add.w	r3, r7, #28
 80037c2:	4619      	mov	r1, r3
 80037c4:	4810      	ldr	r0, [pc, #64]	@ (8003808 <MX_TIM4_Init+0xac>)
 80037c6:	f00b faf7 	bl	800edb8 <HAL_TIMEx_MasterConfigSynchronization>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80037d0:	f000 fa9a 	bl	8003d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037d4:	2360      	movs	r3, #96	@ 0x60
 80037d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037e4:	463b      	mov	r3, r7
 80037e6:	220c      	movs	r2, #12
 80037e8:	4619      	mov	r1, r3
 80037ea:	4807      	ldr	r0, [pc, #28]	@ (8003808 <MX_TIM4_Init+0xac>)
 80037ec:	f00a fcae 	bl	800e14c <HAL_TIM_PWM_ConfigChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80037f6:	f000 fa87 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80037fa:	4803      	ldr	r0, [pc, #12]	@ (8003808 <MX_TIM4_Init+0xac>)
 80037fc:	f000 fe84 	bl	8004508 <HAL_TIM_MspPostInit>

}
 8003800:	bf00      	nop
 8003802:	3728      	adds	r7, #40	@ 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000980 	.word	0x20000980
 800380c:	40000800 	.word	0x40000800

08003810 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b096      	sub	sp, #88	@ 0x58
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003816:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003822:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	609a      	str	r2, [r3, #8]
 800382e:	60da      	str	r2, [r3, #12]
 8003830:	611a      	str	r2, [r3, #16]
 8003832:	615a      	str	r2, [r3, #20]
 8003834:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	222c      	movs	r2, #44	@ 0x2c
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f00d f9e2 	bl	8010c06 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003842:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <MX_TIM15_Init+0x100>)
 8003844:	4a33      	ldr	r2, [pc, #204]	@ (8003914 <MX_TIM15_Init+0x104>)
 8003846:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003848:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <MX_TIM15_Init+0x100>)
 800384a:	2200      	movs	r2, #0
 800384c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384e:	4b30      	ldr	r3, [pc, #192]	@ (8003910 <MX_TIM15_Init+0x100>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003854:	4b2e      	ldr	r3, [pc, #184]	@ (8003910 <MX_TIM15_Init+0x100>)
 8003856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800385a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800385c:	4b2c      	ldr	r3, [pc, #176]	@ (8003910 <MX_TIM15_Init+0x100>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003862:	4b2b      	ldr	r3, [pc, #172]	@ (8003910 <MX_TIM15_Init+0x100>)
 8003864:	2200      	movs	r2, #0
 8003866:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003868:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <MX_TIM15_Init+0x100>)
 800386a:	2200      	movs	r2, #0
 800386c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800386e:	4828      	ldr	r0, [pc, #160]	@ (8003910 <MX_TIM15_Init+0x100>)
 8003870:	f00a f993 	bl	800db9a <HAL_TIM_PWM_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800387a:	f000 fa45 	bl	8003d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003886:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800388a:	4619      	mov	r1, r3
 800388c:	4820      	ldr	r0, [pc, #128]	@ (8003910 <MX_TIM15_Init+0x100>)
 800388e:	f00b fa93 	bl	800edb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8003898:	f000 fa36 	bl	8003d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800389c:	2360      	movs	r3, #96	@ 0x60
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038a4:	2300      	movs	r3, #0
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038a8:	2300      	movs	r3, #0
 80038aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038b4:	2300      	movs	r3, #0
 80038b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038bc:	2200      	movs	r2, #0
 80038be:	4619      	mov	r1, r3
 80038c0:	4813      	ldr	r0, [pc, #76]	@ (8003910 <MX_TIM15_Init+0x100>)
 80038c2:	f00a fc43 	bl	800e14c <HAL_TIM_PWM_ConfigChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80038cc:	f000 fa1c 	bl	8003d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4807      	ldr	r0, [pc, #28]	@ (8003910 <MX_TIM15_Init+0x100>)
 80038f4:	f00b fae8 	bl	800eec8 <HAL_TIMEx_ConfigBreakDeadTime>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80038fe:	f000 fa03 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003902:	4803      	ldr	r0, [pc, #12]	@ (8003910 <MX_TIM15_Init+0x100>)
 8003904:	f000 fe00 	bl	8004508 <HAL_TIM_MspPostInit>

}
 8003908:	bf00      	nop
 800390a:	3758      	adds	r7, #88	@ 0x58
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200009cc 	.word	0x200009cc
 8003914:	40014000 	.word	0x40014000

08003918 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b092      	sub	sp, #72	@ 0x48
 800391c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800391e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	611a      	str	r2, [r3, #16]
 800392e:	615a      	str	r2, [r3, #20]
 8003930:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003932:	463b      	mov	r3, r7
 8003934:	222c      	movs	r2, #44	@ 0x2c
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f00d f964 	bl	8010c06 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800393e:	4b2f      	ldr	r3, [pc, #188]	@ (80039fc <MX_TIM17_Init+0xe4>)
 8003940:	4a2f      	ldr	r2, [pc, #188]	@ (8003a00 <MX_TIM17_Init+0xe8>)
 8003942:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2441;
 8003944:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <MX_TIM17_Init+0xe4>)
 8003946:	f640 1289 	movw	r2, #2441	@ 0x989
 800394a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <MX_TIM17_Init+0xe4>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003952:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <MX_TIM17_Init+0xe4>)
 8003954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003958:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395a:	4b28      	ldr	r3, [pc, #160]	@ (80039fc <MX_TIM17_Init+0xe4>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003960:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <MX_TIM17_Init+0xe4>)
 8003962:	2200      	movs	r2, #0
 8003964:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003966:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <MX_TIM17_Init+0xe4>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800396c:	4823      	ldr	r0, [pc, #140]	@ (80039fc <MX_TIM17_Init+0xe4>)
 800396e:	f009 ffeb 	bl	800d948 <HAL_TIM_Base_Init>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8003978:	f000 f9c6 	bl	8003d08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800397c:	481f      	ldr	r0, [pc, #124]	@ (80039fc <MX_TIM17_Init+0xe4>)
 800397e:	f00a f8ab 	bl	800dad8 <HAL_TIM_OC_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8003988:	f000 f9be 	bl	8003d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003994:	2300      	movs	r3, #0
 8003996:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003998:	2300      	movs	r3, #0
 800399a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039ac:	2200      	movs	r2, #0
 80039ae:	4619      	mov	r1, r3
 80039b0:	4812      	ldr	r0, [pc, #72]	@ (80039fc <MX_TIM17_Init+0xe4>)
 80039b2:	f00a fb51 	bl	800e058 <HAL_TIM_OC_ConfigChannel>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80039bc:	f000 f9a4 	bl	8003d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039da:	2300      	movs	r3, #0
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80039de:	463b      	mov	r3, r7
 80039e0:	4619      	mov	r1, r3
 80039e2:	4806      	ldr	r0, [pc, #24]	@ (80039fc <MX_TIM17_Init+0xe4>)
 80039e4:	f00b fa70 	bl	800eec8 <HAL_TIMEx_ConfigBreakDeadTime>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80039ee:	f000 f98b 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80039f2:	bf00      	nop
 80039f4:	3748      	adds	r7, #72	@ 0x48
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000a18 	.word	0x20000a18
 8003a00:	40014800 	.word	0x40014800

08003a04 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	@ 0x38
 8003a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a2a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	4a9d      	ldr	r2, [pc, #628]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a30:	f043 0310 	orr.w	r3, r3, #16
 8003a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a36:	4b9b      	ldr	r3, [pc, #620]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a42:	4b98      	ldr	r3, [pc, #608]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	4a97      	ldr	r2, [pc, #604]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a4e:	4b95      	ldr	r3, [pc, #596]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a5a:	4b92      	ldr	r3, [pc, #584]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5e:	4a91      	ldr	r2, [pc, #580]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a60:	f043 0320 	orr.w	r3, r3, #32
 8003a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a66:	4b8f      	ldr	r3, [pc, #572]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a72:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a76:	4a8b      	ldr	r2, [pc, #556]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a7e:	4b89      	ldr	r3, [pc, #548]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8a:	4b86      	ldr	r3, [pc, #536]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8e:	4a85      	ldr	r2, [pc, #532]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a96:	4b83      	ldr	r3, [pc, #524]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa2:	4b80      	ldr	r3, [pc, #512]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aba:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	4a79      	ldr	r2, [pc, #484]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ac6:	4b77      	ldr	r3, [pc, #476]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ad2:	4b74      	ldr	r3, [pc, #464]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad6:	4a73      	ldr	r2, [pc, #460]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ade:	4b71      	ldr	r3, [pc, #452]	@ (8003ca4 <MX_GPIO_Init+0x290>)
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003aea:	f005 fb29 	bl	8009140 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003aee:	2200      	movs	r2, #0
 8003af0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003af4:	486c      	ldr	r0, [pc, #432]	@ (8003ca8 <MX_GPIO_Init+0x294>)
 8003af6:	f004 fc41 	bl	800837c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003afa:	2200      	movs	r2, #0
 8003afc:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8003b00:	486a      	ldr	r0, [pc, #424]	@ (8003cac <MX_GPIO_Init+0x298>)
 8003b02:	f004 fc3b 	bl	800837c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8003b06:	2201      	movs	r2, #1
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4869      	ldr	r0, [pc, #420]	@ (8003cb0 <MX_GPIO_Init+0x29c>)
 8003b0c:	f004 fc36 	bl	800837c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003b10:	2320      	movs	r3, #32
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b22:	4619      	mov	r1, r3
 8003b24:	4860      	ldr	r0, [pc, #384]	@ (8003ca8 <MX_GPIO_Init+0x294>)
 8003b26:	f004 fa7f 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b2a:	2310      	movs	r3, #16
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b3a:	2305      	movs	r3, #5
 8003b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b42:	4619      	mov	r1, r3
 8003b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b48:	f004 fa6e 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b4c:	23e0      	movs	r3, #224	@ 0xe0
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b62:	f004 fa61 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003b66:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003b6c:	2311      	movs	r3, #17
 8003b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b74:	2300      	movs	r3, #0
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	484a      	ldr	r0, [pc, #296]	@ (8003ca8 <MX_GPIO_Init+0x294>)
 8003b80:	f004 fa52 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8003b84:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2300      	movs	r3, #0
 8003b94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4843      	ldr	r0, [pc, #268]	@ (8003cac <MX_GPIO_Init+0x298>)
 8003b9e:	f004 fa43 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003ba2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003ba8:	2311      	movs	r3, #17
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	483c      	ldr	r0, [pc, #240]	@ (8003cac <MX_GPIO_Init+0x298>)
 8003bbc:	f004 fa34 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003bc6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4836      	ldr	r0, [pc, #216]	@ (8003cb0 <MX_GPIO_Init+0x29c>)
 8003bd8:	f004 fa26 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be2:	2302      	movs	r3, #2
 8003be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bea:	2303      	movs	r3, #3
 8003bec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003bee:	230c      	movs	r3, #12
 8003bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	482e      	ldr	r0, [pc, #184]	@ (8003cb4 <MX_GPIO_Init+0x2a0>)
 8003bfa:	f004 fa15 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003bfe:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c10:	230a      	movs	r3, #10
 8003c12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c1e:	f004 fa03 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c34:	4619      	mov	r1, r3
 8003c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c3a:	f004 f9f5 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c42:	2301      	movs	r3, #1
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c52:	4619      	mov	r1, r3
 8003c54:	4816      	ldr	r0, [pc, #88]	@ (8003cb0 <MX_GPIO_Init+0x29c>)
 8003c56:	f004 f9e7 	bl	8008028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c66:	2303      	movs	r3, #3
 8003c68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c72:	4619      	mov	r1, r3
 8003c74:	480e      	ldr	r0, [pc, #56]	@ (8003cb0 <MX_GPIO_Init+0x29c>)
 8003c76:	f004 f9d7 	bl	8008028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2017      	movs	r0, #23
 8003c80:	f004 f8e3 	bl	8007e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c84:	2017      	movs	r0, #23
 8003c86:	f004 f8fc 	bl	8007e82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	2028      	movs	r0, #40	@ 0x28
 8003c90:	f004 f8db 	bl	8007e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c94:	2028      	movs	r0, #40	@ 0x28
 8003c96:	f004 f8f4 	bl	8007e82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c9a:	bf00      	nop
 8003c9c:	3738      	adds	r7, #56	@ 0x38
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	48001400 	.word	0x48001400
 8003cac:	48001000 	.word	0x48001000
 8003cb0:	48000c00 	.word	0x48000c00
 8003cb4:	48000800 	.word	0x48000800

08003cb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	//check which version of the timer triggered this callback and toggle LED
	if(htim == &htim17){
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a06      	ldr	r2, [pc, #24]	@ (8003cdc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d102      	bne.n	8003cce <HAL_TIM_PeriodElapsedCallback+0x16>
		DISPLAY_TIMER_TRIGGERED = 1;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
	}
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000a18 	.word	0x20000a18
 8003ce0:	20000a7c 	.word	0x20000a7c

08003ce4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003cec:	1d39      	adds	r1, r7, #4
 8003cee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	4803      	ldr	r0, [pc, #12]	@ (8003d04 <__io_putchar+0x20>)
 8003cf6:	f00b fa99 	bl	800f22c <HAL_UART_Transmit>
  return ch;
 8003cfa:	687b      	ldr	r3, [r7, #4]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000045c 	.word	0x2000045c

08003d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0c:	b672      	cpsid	i
}
 8003d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <Error_Handler+0x8>

08003d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <HAL_MspInit+0x44>)
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d58 <HAL_MspInit+0x44>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d26:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <HAL_MspInit+0x44>)
 8003d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <HAL_MspInit+0x44>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	4a08      	ldr	r2, [pc, #32]	@ (8003d58 <HAL_MspInit+0x44>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_MspInit+0x44>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000

08003d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08c      	sub	sp, #48	@ 0x30
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	f107 031c 	add.w	r3, r7, #28
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <HAL_ADC_MspInit+0xd4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d154      	bne.n	8003e28 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d82:	4a2c      	ldr	r2, [pc, #176]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003d84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d96:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9a:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003da2:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dae:	4b21      	ldr	r3, [pc, #132]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db2:	4a20      	ldr	r2, [pc, #128]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dba:	4b1e      	ldr	r3, [pc, #120]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dca:	4a1a      	ldr	r2, [pc, #104]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dd2:	4b18      	ldr	r3, [pc, #96]	@ (8003e34 <HAL_ADC_MspInit+0xd8>)
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003dde:	233b      	movs	r3, #59	@ 0x3b
 8003de0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003de2:	230b      	movs	r3, #11
 8003de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dea:	f107 031c 	add.w	r3, r7, #28
 8003dee:	4619      	mov	r1, r3
 8003df0:	4811      	ldr	r0, [pc, #68]	@ (8003e38 <HAL_ADC_MspInit+0xdc>)
 8003df2:	f004 f919 	bl	8008028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003df6:	230a      	movs	r3, #10
 8003df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003dfa:	230b      	movs	r3, #11
 8003dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e02:	f107 031c 	add.w	r3, r7, #28
 8003e06:	4619      	mov	r1, r3
 8003e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e0c:	f004 f90c 	bl	8008028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e10:	2302      	movs	r3, #2
 8003e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003e14:	230b      	movs	r3, #11
 8003e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1c:	f107 031c 	add.w	r3, r7, #28
 8003e20:	4619      	mov	r1, r3
 8003e22:	4806      	ldr	r0, [pc, #24]	@ (8003e3c <HAL_ADC_MspInit+0xe0>)
 8003e24:	f004 f900 	bl	8008028 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e28:	bf00      	nop
 8003e2a:	3730      	adds	r7, #48	@ 0x30
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	50040000 	.word	0x50040000
 8003e34:	40021000 	.word	0x40021000
 8003e38:	48000800 	.word	0x48000800
 8003e3c:	48000400 	.word	0x48000400

08003e40 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	@ 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed8 <HAL_COMP_MspInit+0x98>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d118      	bne.n	8003e94 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e62:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <HAL_COMP_MspInit+0x9c>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	4a1d      	ldr	r2, [pc, #116]	@ (8003edc <HAL_COMP_MspInit+0x9c>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <HAL_COMP_MspInit+0x9c>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4814      	ldr	r0, [pc, #80]	@ (8003ee0 <HAL_COMP_MspInit+0xa0>)
 8003e8e:	f004 f8cb 	bl	8008028 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003e92:	e01c      	b.n	8003ece <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a12      	ldr	r2, [pc, #72]	@ (8003ee4 <HAL_COMP_MspInit+0xa4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d117      	bne.n	8003ece <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003edc <HAL_COMP_MspInit+0x9c>)
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8003edc <HAL_COMP_MspInit+0x9c>)
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <HAL_COMP_MspInit+0x9c>)
 8003eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003eb6:	23c0      	movs	r3, #192	@ 0xc0
 8003eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec2:	f107 0314 	add.w	r3, r7, #20
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4805      	ldr	r0, [pc, #20]	@ (8003ee0 <HAL_COMP_MspInit+0xa0>)
 8003eca:	f004 f8ad 	bl	8008028 <HAL_GPIO_Init>
}
 8003ece:	bf00      	nop
 8003ed0:	3728      	adds	r7, #40	@ 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40010200 	.word	0x40010200
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	48000400 	.word	0x48000400
 8003ee4:	40010204 	.word	0x40010204

08003ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0b0      	sub	sp, #192	@ 0xc0
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f00:	f107 0318 	add.w	r3, r7, #24
 8003f04:	2294      	movs	r2, #148	@ 0x94
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f00c fe7c 	bl	8010c06 <memset>
  if(hi2c->Instance==I2C1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a4c      	ldr	r2, [pc, #304]	@ (8004044 <HAL_I2C_MspInit+0x15c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d13c      	bne.n	8003f92 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003f18:	2340      	movs	r3, #64	@ 0x40
 8003f1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f20:	f107 0318 	add.w	r3, r7, #24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f005 fff3 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003f30:	f7ff feea 	bl	8003d08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f34:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f38:	4a43      	ldr	r2, [pc, #268]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003f3a:	f043 0302 	orr.w	r3, r3, #2
 8003f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f40:	4b41      	ldr	r3, [pc, #260]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f54:	2312      	movs	r3, #18
 8003f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f60:	2303      	movs	r3, #3
 8003f62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f66:	2304      	movs	r3, #4
 8003f68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f6c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003f70:	4619      	mov	r1, r3
 8003f72:	4836      	ldr	r0, [pc, #216]	@ (800404c <HAL_I2C_MspInit+0x164>)
 8003f74:	f004 f858 	bl	8008028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f78:	4b33      	ldr	r3, [pc, #204]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7c:	4a32      	ldr	r2, [pc, #200]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f84:	4b30      	ldr	r3, [pc, #192]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003f90:	e054      	b.n	800403c <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2e      	ldr	r2, [pc, #184]	@ (8004050 <HAL_I2C_MspInit+0x168>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d14f      	bne.n	800403c <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003f9c:	2380      	movs	r3, #128	@ 0x80
 8003f9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fa4:	f107 0318 	add.w	r3, r7, #24
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f005 ffb1 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003fb4:	f7ff fea8 	bl	8003d08 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fb8:	4b23      	ldr	r3, [pc, #140]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbc:	4a22      	ldr	r2, [pc, #136]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003fbe:	f043 0320 	orr.w	r3, r3, #32
 8003fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fc4:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fd6:	2312      	movs	r3, #18
 8003fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4817      	ldr	r0, [pc, #92]	@ (8004054 <HAL_I2C_MspInit+0x16c>)
 8003ff6:	f004 f817 	bl	8008028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004000:	2312      	movs	r3, #18
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004006:	2301      	movs	r3, #1
 8004008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400c:	2303      	movs	r3, #3
 800400e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004012:	2304      	movs	r3, #4
 8004014:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004018:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800401c:	4619      	mov	r1, r3
 800401e:	480d      	ldr	r0, [pc, #52]	@ (8004054 <HAL_I2C_MspInit+0x16c>)
 8004020:	f004 f802 	bl	8008028 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004024:	4b08      	ldr	r3, [pc, #32]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	4a07      	ldr	r2, [pc, #28]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 800402a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800402e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_I2C_MspInit+0x160>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]
}
 800403c:	bf00      	nop
 800403e:	37c0      	adds	r7, #192	@ 0xc0
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40005400 	.word	0x40005400
 8004048:	40021000 	.word	0x40021000
 800404c:	48000400 	.word	0x48000400
 8004050:	40005800 	.word	0x40005800
 8004054:	48001400 	.word	0x48001400

08004058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b0b2      	sub	sp, #200	@ 0xc8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004070:	f107 0320 	add.w	r3, r7, #32
 8004074:	2294      	movs	r2, #148	@ 0x94
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f00c fdc4 	bl	8010c06 <memset>
  if(huart->Instance==LPUART1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a64      	ldr	r2, [pc, #400]	@ (8004214 <HAL_UART_MspInit+0x1bc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d13e      	bne.n	8004106 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004088:	2320      	movs	r3, #32
 800408a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800408c:	2300      	movs	r3, #0
 800408e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004090:	f107 0320 	add.w	r3, r7, #32
 8004094:	4618      	mov	r0, r3
 8004096:	f005 ff3b 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80040a0:	f7ff fe32 	bl	8003d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80040a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80040a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a8:	4a5b      	ldr	r2, [pc, #364]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80040b0:	4b59      	ldr	r3, [pc, #356]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80040b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040bc:	4b56      	ldr	r3, [pc, #344]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80040be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c0:	4a55      	ldr	r2, [pc, #340]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80040c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040c8:	4b53      	ldr	r3, [pc, #332]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80040ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80040d4:	f005 f834 	bl	8009140 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80040d8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e0:	2302      	movs	r3, #2
 80040e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80040f2:	2308      	movs	r3, #8
 80040f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040f8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4847      	ldr	r0, [pc, #284]	@ (800421c <HAL_UART_MspInit+0x1c4>)
 8004100:	f003 ff92 	bl	8008028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004104:	e081      	b.n	800420a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a45      	ldr	r2, [pc, #276]	@ (8004220 <HAL_UART_MspInit+0x1c8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d13b      	bne.n	8004188 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004110:	2302      	movs	r3, #2
 8004112:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004114:	2300      	movs	r3, #0
 8004116:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004118:	f107 0320 	add.w	r3, r7, #32
 800411c:	4618      	mov	r0, r3
 800411e:	f005 fef7 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8004128:	f7ff fdee 	bl	8003d08 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800412c:	4b3a      	ldr	r3, [pc, #232]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	4a39      	ldr	r2, [pc, #228]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 8004132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004136:	6593      	str	r3, [r2, #88]	@ 0x58
 8004138:	4b37      	ldr	r3, [pc, #220]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004144:	4b34      	ldr	r3, [pc, #208]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 8004146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004148:	4a33      	ldr	r2, [pc, #204]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 800414a:	f043 0308 	orr.w	r3, r3, #8
 800414e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004150:	4b31      	ldr	r3, [pc, #196]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 8004152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800415c:	2360      	movs	r3, #96	@ 0x60
 800415e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004162:	2302      	movs	r3, #2
 8004164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416e:	2303      	movs	r3, #3
 8004170:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004174:	2307      	movs	r3, #7
 8004176:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800417a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800417e:	4619      	mov	r1, r3
 8004180:	4828      	ldr	r0, [pc, #160]	@ (8004224 <HAL_UART_MspInit+0x1cc>)
 8004182:	f003 ff51 	bl	8008028 <HAL_GPIO_Init>
}
 8004186:	e040      	b.n	800420a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <HAL_UART_MspInit+0x1d0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d13b      	bne.n	800420a <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004192:	2304      	movs	r3, #4
 8004194:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004196:	2300      	movs	r3, #0
 8004198:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800419a:	f107 0320 	add.w	r3, r7, #32
 800419e:	4618      	mov	r0, r3
 80041a0:	f005 feb6 	bl	8009f10 <HAL_RCCEx_PeriphCLKConfig>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_UART_MspInit+0x156>
      Error_Handler();
 80041aa:	f7ff fdad 	bl	8003d08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80041ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80041b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ba:	4b17      	ldr	r3, [pc, #92]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041c6:	4b14      	ldr	r3, [pc, #80]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80041c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ca:	4a13      	ldr	r2, [pc, #76]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80041cc:	f043 0308 	orr.w	r3, r3, #8
 80041d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041d2:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <HAL_UART_MspInit+0x1c0>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80041e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e6:	2302      	movs	r3, #2
 80041e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f2:	2303      	movs	r3, #3
 80041f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041f8:	2307      	movs	r3, #7
 80041fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041fe:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004202:	4619      	mov	r1, r3
 8004204:	4807      	ldr	r0, [pc, #28]	@ (8004224 <HAL_UART_MspInit+0x1cc>)
 8004206:	f003 ff0f 	bl	8008028 <HAL_GPIO_Init>
}
 800420a:	bf00      	nop
 800420c:	37c8      	adds	r7, #200	@ 0xc8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40008000 	.word	0x40008000
 8004218:	40021000 	.word	0x40021000
 800421c:	48001800 	.word	0x48001800
 8004220:	40004400 	.word	0x40004400
 8004224:	48000c00 	.word	0x48000c00
 8004228:	40004800 	.word	0x40004800

0800422c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	@ 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	f107 031c 	add.w	r3, r7, #28
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a3c      	ldr	r2, [pc, #240]	@ (800433c <HAL_SPI_MspInit+0x110>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d144      	bne.n	80042d8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800424e:	4b3c      	ldr	r3, [pc, #240]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	4a3b      	ldr	r2, [pc, #236]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 8004254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004258:	6593      	str	r3, [r2, #88]	@ 0x58
 800425a:	4b39      	ldr	r3, [pc, #228]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004266:	4b36      	ldr	r3, [pc, #216]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426a:	4a35      	ldr	r2, [pc, #212]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004272:	4b33      	ldr	r3, [pc, #204]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 8004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800427e:	4b30      	ldr	r3, [pc, #192]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 8004280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004282:	4a2f      	ldr	r2, [pc, #188]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 8004284:	f043 0308 	orr.w	r3, r3, #8
 8004288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800428a:	4b2d      	ldr	r3, [pc, #180]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004296:	2304      	movs	r3, #4
 8004298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429a:	2302      	movs	r3, #2
 800429c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a2:	2303      	movs	r3, #3
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042a6:	2305      	movs	r3, #5
 80042a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042aa:	f107 031c 	add.w	r3, r7, #28
 80042ae:	4619      	mov	r1, r3
 80042b0:	4824      	ldr	r0, [pc, #144]	@ (8004344 <HAL_SPI_MspInit+0x118>)
 80042b2:	f003 feb9 	bl	8008028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80042b6:	2312      	movs	r3, #18
 80042b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042c6:	2305      	movs	r3, #5
 80042c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042ca:	f107 031c 	add.w	r3, r7, #28
 80042ce:	4619      	mov	r1, r3
 80042d0:	481d      	ldr	r0, [pc, #116]	@ (8004348 <HAL_SPI_MspInit+0x11c>)
 80042d2:	f003 fea9 	bl	8008028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80042d6:	e02d      	b.n	8004334 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	@ (800434c <HAL_SPI_MspInit+0x120>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d128      	bne.n	8004334 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042e2:	4b17      	ldr	r3, [pc, #92]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e6:	4a16      	ldr	r2, [pc, #88]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 80042e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ee:	4b14      	ldr	r3, [pc, #80]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042fa:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fe:	4a10      	ldr	r2, [pc, #64]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004306:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <HAL_SPI_MspInit+0x114>)
 8004308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004312:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004318:	2302      	movs	r3, #2
 800431a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004320:	2303      	movs	r3, #3
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004324:	2306      	movs	r3, #6
 8004326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004328:	f107 031c 	add.w	r3, r7, #28
 800432c:	4619      	mov	r1, r3
 800432e:	4805      	ldr	r0, [pc, #20]	@ (8004344 <HAL_SPI_MspInit+0x118>)
 8004330:	f003 fe7a 	bl	8008028 <HAL_GPIO_Init>
}
 8004334:	bf00      	nop
 8004336:	3730      	adds	r7, #48	@ 0x30
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40003800 	.word	0x40003800
 8004340:	40021000 	.word	0x40021000
 8004344:	48000800 	.word	0x48000800
 8004348:	48000c00 	.word	0x48000c00
 800434c:	40003c00 	.word	0x40003c00

08004350 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	@ 0x38
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a44      	ldr	r2, [pc, #272]	@ (8004480 <HAL_TIM_PWM_MspInit+0x130>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d131      	bne.n	80043d6 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004372:	4b44      	ldr	r3, [pc, #272]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004376:	4a43      	ldr	r2, [pc, #268]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004378:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800437c:	6613      	str	r3, [r2, #96]	@ 0x60
 800437e:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800438a:	4b3e      	ldr	r3, [pc, #248]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 800438c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438e:	4a3d      	ldr	r2, [pc, #244]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004396:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80043a2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b0:	2300      	movs	r3, #0
 80043b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80043b4:	2303      	movs	r3, #3
 80043b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043bc:	4619      	mov	r1, r3
 80043be:	4832      	ldr	r0, [pc, #200]	@ (8004488 <HAL_TIM_PWM_MspInit+0x138>)
 80043c0:	f003 fe32 	bl	8008028 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2100      	movs	r1, #0
 80043c8:	201a      	movs	r0, #26
 80043ca:	f003 fd3e 	bl	8007e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80043ce:	201a      	movs	r0, #26
 80043d0:	f003 fd57 	bl	8007e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80043d4:	e050      	b.n	8004478 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043de:	d10c      	bne.n	80043fa <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043e0:	4b28      	ldr	r3, [pc, #160]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e4:	4a27      	ldr	r2, [pc, #156]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ec:	4b25      	ldr	r3, [pc, #148]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	69bb      	ldr	r3, [r7, #24]
}
 80043f8:	e03e      	b.n	8004478 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM4)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a23      	ldr	r2, [pc, #140]	@ (800448c <HAL_TIM_PWM_MspInit+0x13c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d128      	bne.n	8004456 <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004404:	4b1f      	ldr	r3, [pc, #124]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	4a1e      	ldr	r2, [pc, #120]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 800440a:	f043 0304 	orr.w	r3, r3, #4
 800440e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004410:	4b1c      	ldr	r3, [pc, #112]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800441c:	4b19      	ldr	r3, [pc, #100]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 800441e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004420:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004422:	f043 0310 	orr.w	r3, r3, #16
 8004426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004428:	4b16      	ldr	r3, [pc, #88]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 800442a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004434:	2301      	movs	r3, #1
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004440:	2300      	movs	r3, #0
 8004442:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004444:	2302      	movs	r3, #2
 8004446:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800444c:	4619      	mov	r1, r3
 800444e:	480e      	ldr	r0, [pc, #56]	@ (8004488 <HAL_TIM_PWM_MspInit+0x138>)
 8004450:	f003 fdea 	bl	8008028 <HAL_GPIO_Init>
}
 8004454:	e010      	b.n	8004478 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM15)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0d      	ldr	r2, [pc, #52]	@ (8004490 <HAL_TIM_PWM_MspInit+0x140>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10b      	bne.n	8004478 <HAL_TIM_PWM_MspInit+0x128>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004460:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004464:	4a07      	ldr	r2, [pc, #28]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446a:	6613      	str	r3, [r2, #96]	@ 0x60
 800446c:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <HAL_TIM_PWM_MspInit+0x134>)
 800446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	bf00      	nop
 800447a:	3738      	adds	r7, #56	@ 0x38
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40021000 	.word	0x40021000
 8004488:	48001000 	.word	0x48001000
 800448c:	40000800 	.word	0x40000800
 8004490:	40014000 	.word	0x40014000

08004494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <HAL_TIM_Base_MspInit+0x68>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10c      	bne.n	80044c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044a6:	4b16      	ldr	r3, [pc, #88]	@ (8004500 <HAL_TIM_Base_MspInit+0x6c>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	4a15      	ldr	r2, [pc, #84]	@ (8004500 <HAL_TIM_Base_MspInit+0x6c>)
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044b2:	4b13      	ldr	r3, [pc, #76]	@ (8004500 <HAL_TIM_Base_MspInit+0x6c>)
 80044b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80044be:	e018      	b.n	80044f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004504 <HAL_TIM_Base_MspInit+0x70>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d113      	bne.n	80044f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80044ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <HAL_TIM_Base_MspInit+0x6c>)
 80044cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004500 <HAL_TIM_Base_MspInit+0x6c>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80044d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004500 <HAL_TIM_Base_MspInit+0x6c>)
 80044d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80044e2:	2200      	movs	r2, #0
 80044e4:	2100      	movs	r1, #0
 80044e6:	201a      	movs	r0, #26
 80044e8:	f003 fcaf 	bl	8007e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80044ec:	201a      	movs	r0, #26
 80044ee:	f003 fcc8 	bl	8007e82 <HAL_NVIC_EnableIRQ>
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40000400 	.word	0x40000400
 8004500:	40021000 	.word	0x40021000
 8004504:	40014800 	.word	0x40014800

08004508 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	@ 0x38
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a66      	ldr	r2, [pc, #408]	@ (80046c0 <HAL_TIM_MspPostInit+0x1b8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d11d      	bne.n	8004566 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800452a:	4b66      	ldr	r3, [pc, #408]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 800452c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800452e:	4a65      	ldr	r2, [pc, #404]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 8004530:	f043 0310 	orr.w	r3, r3, #16
 8004534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004536:	4b63      	ldr	r3, [pc, #396]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004542:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004548:	2302      	movs	r3, #2
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2300      	movs	r3, #0
 8004552:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004554:	2301      	movs	r3, #1
 8004556:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800455c:	4619      	mov	r1, r3
 800455e:	485a      	ldr	r0, [pc, #360]	@ (80046c8 <HAL_TIM_MspPostInit+0x1c0>)
 8004560:	f003 fd62 	bl	8008028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004564:	e0a7      	b.n	80046b6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM2)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800456e:	d13a      	bne.n	80045e6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004570:	4b54      	ldr	r3, [pc, #336]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 8004572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004574:	4a53      	ldr	r2, [pc, #332]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800457c:	4b51      	ldr	r3, [pc, #324]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 800457e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004588:	4b4e      	ldr	r3, [pc, #312]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 800458a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458c:	4a4d      	ldr	r2, [pc, #308]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 800458e:	f043 0302 	orr.w	r3, r3, #2
 8004592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004594:	4b4b      	ldr	r3, [pc, #300]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 8004596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045a0:	2301      	movs	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a4:	2302      	movs	r3, #2
 80045a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ac:	2300      	movs	r3, #0
 80045ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80045b0:	2301      	movs	r3, #1
 80045b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045b8:	4619      	mov	r1, r3
 80045ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045be:	f003 fd33 	bl	8008028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c8:	2302      	movs	r3, #2
 80045ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d0:	2300      	movs	r3, #0
 80045d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80045d4:	2301      	movs	r3, #1
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045dc:	4619      	mov	r1, r3
 80045de:	483b      	ldr	r0, [pc, #236]	@ (80046cc <HAL_TIM_MspPostInit+0x1c4>)
 80045e0:	f003 fd22 	bl	8008028 <HAL_GPIO_Init>
}
 80045e4:	e067      	b.n	80046b6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM3)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a39      	ldr	r2, [pc, #228]	@ (80046d0 <HAL_TIM_MspPostInit+0x1c8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d11d      	bne.n	800462c <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045f0:	4b34      	ldr	r3, [pc, #208]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 80045f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f4:	4a33      	ldr	r2, [pc, #204]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 80045f6:	f043 0304 	orr.w	r3, r3, #4
 80045fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045fc:	4b31      	ldr	r3, [pc, #196]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 80045fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004608:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460e:	2302      	movs	r3, #2
 8004610:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2300      	movs	r3, #0
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004616:	2300      	movs	r3, #0
 8004618:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800461a:	2302      	movs	r3, #2
 800461c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800461e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004622:	4619      	mov	r1, r3
 8004624:	482b      	ldr	r0, [pc, #172]	@ (80046d4 <HAL_TIM_MspPostInit+0x1cc>)
 8004626:	f003 fcff 	bl	8008028 <HAL_GPIO_Init>
}
 800462a:	e044      	b.n	80046b6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM4)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a29      	ldr	r2, [pc, #164]	@ (80046d8 <HAL_TIM_MspPostInit+0x1d0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d11d      	bne.n	8004672 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004636:	4b23      	ldr	r3, [pc, #140]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463a:	4a22      	ldr	r2, [pc, #136]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 800463c:	f043 0308 	orr.w	r3, r3, #8
 8004640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004642:	4b20      	ldr	r3, [pc, #128]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 8004644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800464e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004654:	2302      	movs	r3, #2
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004658:	2300      	movs	r3, #0
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465c:	2300      	movs	r3, #0
 800465e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004660:	2302      	movs	r3, #2
 8004662:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004668:	4619      	mov	r1, r3
 800466a:	481c      	ldr	r0, [pc, #112]	@ (80046dc <HAL_TIM_MspPostInit+0x1d4>)
 800466c:	f003 fcdc 	bl	8008028 <HAL_GPIO_Init>
}
 8004670:	e021      	b.n	80046b6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM15)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1a      	ldr	r2, [pc, #104]	@ (80046e0 <HAL_TIM_MspPostInit+0x1d8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d11c      	bne.n	80046b6 <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800467c:	4b11      	ldr	r3, [pc, #68]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 800467e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004680:	4a10      	ldr	r2, [pc, #64]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 8004682:	f043 0302 	orr.w	r3, r3, #2
 8004686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004688:	4b0e      	ldr	r3, [pc, #56]	@ (80046c4 <HAL_TIM_MspPostInit+0x1bc>)
 800468a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004694:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a2:	2300      	movs	r3, #0
 80046a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80046a6:	230e      	movs	r3, #14
 80046a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046ae:	4619      	mov	r1, r3
 80046b0:	4806      	ldr	r0, [pc, #24]	@ (80046cc <HAL_TIM_MspPostInit+0x1c4>)
 80046b2:	f003 fcb9 	bl	8008028 <HAL_GPIO_Init>
}
 80046b6:	bf00      	nop
 80046b8:	3738      	adds	r7, #56	@ 0x38
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40021000 	.word	0x40021000
 80046c8:	48001000 	.word	0x48001000
 80046cc:	48000400 	.word	0x48000400
 80046d0:	40000400 	.word	0x40000400
 80046d4:	48000800 	.word	0x48000800
 80046d8:	40000800 	.word	0x40000800
 80046dc:	48000c00 	.word	0x48000c00
 80046e0:	40014000 	.word	0x40014000

080046e4 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	@ 0x28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a50      	ldr	r2, [pc, #320]	@ (8004834 <HAL_SAI_MspInit+0x150>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d124      	bne.n	8004740 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80046f6:	4b50      	ldr	r3, [pc, #320]	@ (8004838 <HAL_SAI_MspInit+0x154>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10b      	bne.n	8004716 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80046fe:	4b4f      	ldr	r3, [pc, #316]	@ (800483c <HAL_SAI_MspInit+0x158>)
 8004700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004702:	4a4e      	ldr	r2, [pc, #312]	@ (800483c <HAL_SAI_MspInit+0x158>)
 8004704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004708:	6613      	str	r3, [r2, #96]	@ 0x60
 800470a:	4b4c      	ldr	r3, [pc, #304]	@ (800483c <HAL_SAI_MspInit+0x158>)
 800470c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8004716:	4b48      	ldr	r3, [pc, #288]	@ (8004838 <HAL_SAI_MspInit+0x154>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a46      	ldr	r2, [pc, #280]	@ (8004838 <HAL_SAI_MspInit+0x154>)
 800471e:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004720:	2374      	movs	r3, #116	@ 0x74
 8004722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004724:	2302      	movs	r3, #2
 8004726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472c:	2300      	movs	r3, #0
 800472e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004730:	230d      	movs	r3, #13
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004734:	f107 0314 	add.w	r3, r7, #20
 8004738:	4619      	mov	r1, r3
 800473a:	4841      	ldr	r0, [pc, #260]	@ (8004840 <HAL_SAI_MspInit+0x15c>)
 800473c:	f003 fc74 	bl	8008028 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3f      	ldr	r2, [pc, #252]	@ (8004844 <HAL_SAI_MspInit+0x160>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d135      	bne.n	80047b6 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800474a:	4b3b      	ldr	r3, [pc, #236]	@ (8004838 <HAL_SAI_MspInit+0x154>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10b      	bne.n	800476a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004752:	4b3a      	ldr	r3, [pc, #232]	@ (800483c <HAL_SAI_MspInit+0x158>)
 8004754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004756:	4a39      	ldr	r2, [pc, #228]	@ (800483c <HAL_SAI_MspInit+0x158>)
 8004758:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800475c:	6613      	str	r3, [r2, #96]	@ 0x60
 800475e:	4b37      	ldr	r3, [pc, #220]	@ (800483c <HAL_SAI_MspInit+0x158>)
 8004760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800476a:	4b33      	ldr	r3, [pc, #204]	@ (8004838 <HAL_SAI_MspInit+0x154>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3301      	adds	r3, #1
 8004770:	4a31      	ldr	r2, [pc, #196]	@ (8004838 <HAL_SAI_MspInit+0x154>)
 8004772:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004774:	2308      	movs	r3, #8
 8004776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004780:	2300      	movs	r3, #0
 8004782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004784:	230d      	movs	r3, #13
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4619      	mov	r1, r3
 800478e:	482c      	ldr	r0, [pc, #176]	@ (8004840 <HAL_SAI_MspInit+0x15c>)
 8004790:	f003 fc4a 	bl	8008028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004794:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a2:	2300      	movs	r3, #0
 80047a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80047a6:	230d      	movs	r3, #13
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	4619      	mov	r1, r3
 80047b0:	4825      	ldr	r0, [pc, #148]	@ (8004848 <HAL_SAI_MspInit+0x164>)
 80047b2:	f003 fc39 	bl	8008028 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a24      	ldr	r2, [pc, #144]	@ (800484c <HAL_SAI_MspInit+0x168>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d135      	bne.n	800482c <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80047c0:	4b23      	ldr	r3, [pc, #140]	@ (8004850 <HAL_SAI_MspInit+0x16c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80047c8:	4b1c      	ldr	r3, [pc, #112]	@ (800483c <HAL_SAI_MspInit+0x158>)
 80047ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047cc:	4a1b      	ldr	r2, [pc, #108]	@ (800483c <HAL_SAI_MspInit+0x158>)
 80047ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80047d4:	4b19      	ldr	r3, [pc, #100]	@ (800483c <HAL_SAI_MspInit+0x158>)
 80047d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <HAL_SAI_MspInit+0x16c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004850 <HAL_SAI_MspInit+0x16c>)
 80047e8:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80047ea:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80047ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f0:	2302      	movs	r3, #2
 80047f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f8:	2300      	movs	r3, #0
 80047fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80047fc:	230d      	movs	r3, #13
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	4619      	mov	r1, r3
 8004806:	4813      	ldr	r0, [pc, #76]	@ (8004854 <HAL_SAI_MspInit+0x170>)
 8004808:	f003 fc0e 	bl	8008028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800480c:	2340      	movs	r3, #64	@ 0x40
 800480e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004810:	2302      	movs	r3, #2
 8004812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004818:	2300      	movs	r3, #0
 800481a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800481c:	230d      	movs	r3, #13
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	4619      	mov	r1, r3
 8004826:	480c      	ldr	r0, [pc, #48]	@ (8004858 <HAL_SAI_MspInit+0x174>)
 8004828:	f003 fbfe 	bl	8008028 <HAL_GPIO_Init>

    }
}
 800482c:	bf00      	nop
 800482e:	3728      	adds	r7, #40	@ 0x28
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40015404 	.word	0x40015404
 8004838:	20000a80 	.word	0x20000a80
 800483c:	40021000 	.word	0x40021000
 8004840:	48001000 	.word	0x48001000
 8004844:	40015424 	.word	0x40015424
 8004848:	48001400 	.word	0x48001400
 800484c:	40015804 	.word	0x40015804
 8004850:	20000a84 	.word	0x20000a84
 8004854:	48000400 	.word	0x48000400
 8004858:	48000800 	.word	0x48000800

0800485c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004860:	bf00      	nop
 8004862:	e7fd      	b.n	8004860 <NMI_Handler+0x4>

08004864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004868:	bf00      	nop
 800486a:	e7fd      	b.n	8004868 <HardFault_Handler+0x4>

0800486c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <MemManage_Handler+0x4>

08004874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004878:	bf00      	nop
 800487a:	e7fd      	b.n	8004878 <BusFault_Handler+0x4>

0800487c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <UsageFault_Handler+0x4>

08004884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048b2:	f002 f92f 	bl	8006b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80048c0:	2020      	movs	r0, #32
 80048c2:	f003 fd73 	bl	80083ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  LoRaRecieve = 1;
 80048c6:	4b02      	ldr	r3, [pc, #8]	@ (80048d0 <EXTI9_5_IRQHandler+0x14>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000a7e 	.word	0x20000a7e

080048d4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048d8:	4803      	ldr	r0, [pc, #12]	@ (80048e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80048da:	f009 fabb 	bl	800de54 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80048de:	4803      	ldr	r0, [pc, #12]	@ (80048ec <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80048e0:	f009 fab8 	bl	800de54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	2000089c 	.word	0x2000089c
 80048ec:	20000a18 	.word	0x20000a18

080048f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80048f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80048f8:	f003 fd58 	bl	80083ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  KeyPadSelect = 1;
 80048fc:	4b02      	ldr	r3, [pc, #8]	@ (8004908 <EXTI15_10_IRQHandler+0x18>)
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000a7d 	.word	0x20000a7d

0800490c <init_analytics>:
// (calculated from exercise baseline)
// ~80% of minimum optimal heart rate 0.8 * 0.64*(220-age)
static int age = 0;
static float heart_threshold = INT_MAX;

void init_analytics(int age) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  heart_threshold = (220-age)*0.5;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fe1a 	bl	8000554 <__aeabi_i2d>
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	4b09      	ldr	r3, [pc, #36]	@ (800494c <init_analytics+0x40>)
 8004926:	f7fb fe7f 	bl	8000628 <__aeabi_dmul>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	f7fc f951 	bl	8000bd8 <__aeabi_d2f>
 8004936:	4603      	mov	r3, r0
 8004938:	4a05      	ldr	r2, [pc, #20]	@ (8004950 <init_analytics+0x44>)
 800493a:	6013      	str	r3, [r2, #0]
  state = k_init_baseline;
 800493c:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <init_analytics+0x48>)
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	3fe00000 	.word	0x3fe00000
 8004950:	20000020 	.word	0x20000020
 8004954:	20000b80 	.word	0x20000b80

08004958 <heartRateHigh>:

// Heart Rate too High
uint8_t heartRateHigh(int bpm, int age) {
 8004958:	b5b0      	push	{r4, r5, r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
	int maxHR = 220 - age;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 8004968:	60fb      	str	r3, [r7, #12]
	if (maxHR*0.80 < bpm) return 1;
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7fb fdf2 	bl	8000554 <__aeabi_i2d>
 8004970:	a30d      	add	r3, pc, #52	@ (adr r3, 80049a8 <heartRateHigh+0x50>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fb fe57 	bl	8000628 <__aeabi_dmul>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4614      	mov	r4, r2
 8004980:	461d      	mov	r5, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fb fde6 	bl	8000554 <__aeabi_i2d>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	f7fc f8bc 	bl	8000b0c <__aeabi_dcmplt>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <heartRateHigh+0x46>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <heartRateHigh+0x48>
	return 0;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bdb0      	pop	{r4, r5, r7, pc}
 80049a8:	9999999a 	.word	0x9999999a
 80049ac:	3fe99999 	.word	0x3fe99999

080049b0 <heartRateLow>:

// Heart Rate too Low
uint8_t heartRateLow(int bpm, int age) {
 80049b0:	b5b0      	push	{r4, r5, r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	int maxHR = 220 - age;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 80049c0:	60fb      	str	r3, [r7, #12]
	if (maxHR*0.60 < bpm) return 1;
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7fb fdc6 	bl	8000554 <__aeabi_i2d>
 80049c8:	a30d      	add	r3, pc, #52	@ (adr r3, 8004a00 <heartRateLow+0x50>)
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f7fb fe2b 	bl	8000628 <__aeabi_dmul>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4614      	mov	r4, r2
 80049d8:	461d      	mov	r5, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fb fdba 	bl	8000554 <__aeabi_i2d>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4620      	mov	r0, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	f7fc f890 	bl	8000b0c <__aeabi_dcmplt>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <heartRateLow+0x46>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <heartRateLow+0x48>
	return 0;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004a00:	33333333 	.word	0x33333333
 8004a04:	3fe33333 	.word	0x3fe33333

08004a08 <input_data>:


// Requires: speed in meters/s
void input_data(int bpm, float speed) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	ed87 0a00 	vstr	s0, [r7]
  switch (state) {
 8004a14:	4b30      	ldr	r3, [pc, #192]	@ (8004ad8 <input_data+0xd0>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d857      	bhi.n	8004ace <input_data+0xc6>
 8004a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <input_data+0x1c>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a8f 	.word	0x08004a8f
 8004a30:	08004ab3 	.word	0x08004ab3
    case k_init_baseline:
      update_data(bpm, speed);
 8004a34:	ed97 0a00 	vldr	s0, [r7]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f893 	bl	8004b64 <update_data>
      if (data_index == TWO_MIN_NUM_DATAPOINTS) {
 8004a3e:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <input_data+0xd4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b12      	cmp	r3, #18
 8004a44:	d140      	bne.n	8004ac8 <input_data+0xc0>
        calculate_base_strain();
 8004a46:	f000 f8b5 	bl	8004bb4 <calculate_base_strain>
        data_index = 0;
 8004a4a:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <input_data+0xd4>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
        state = k_post_init;
 8004a50:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <input_data+0xd0>)
 8004a52:	2202      	movs	r2, #2
 8004a54:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004a56:	e037      	b.n	8004ac8 <input_data+0xc0>
    case k_post_init:
      // based only on speed now, maybe add HR threshold
      // based on standard baseline
      if (speed > SPEED_THRESHOLD || bpm > heart_threshold) {
 8004a58:	edd7 7a00 	vldr	s15, [r7]
 8004a5c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a68:	dc0d      	bgt.n	8004a86 <input_data+0x7e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <input_data+0xd8>)
 8004a76:	edd3 7a00 	vldr	s15, [r3]
 8004a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a82:	dc00      	bgt.n	8004a86 <input_data+0x7e>
        state = k_exercise_baseline;
      }
      break;
 8004a84:	e023      	b.n	8004ace <input_data+0xc6>
        state = k_exercise_baseline;
 8004a86:	4b14      	ldr	r3, [pc, #80]	@ (8004ad8 <input_data+0xd0>)
 8004a88:	2203      	movs	r2, #3
 8004a8a:	701a      	strb	r2, [r3, #0]
      break;
 8004a8c:	e01f      	b.n	8004ace <input_data+0xc6>
    case k_exercise_baseline:
      update_data(bpm, speed);
 8004a8e:	ed97 0a00 	vldr	s0, [r7]
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f866 	bl	8004b64 <update_data>
      if (data_index == TWO_MIN_NUM_DATAPOINTS) {
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <input_data+0xd4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b12      	cmp	r3, #18
 8004a9e:	d115      	bne.n	8004acc <input_data+0xc4>
        calculate_exercise_strain();
 8004aa0:	f000 f8bc 	bl	8004c1c <calculate_exercise_strain>
        data_index = 0;
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <input_data+0xd4>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
        state = k_exercise;
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <input_data+0xd0>)
 8004aac:	2204      	movs	r2, #4
 8004aae:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ab0:	e00c      	b.n	8004acc <input_data+0xc4>
    case k_exercise:
      current_strain = get_strain(bpm, speed);
 8004ab2:	ed97 0a00 	vldr	s0, [r7]
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f836 	bl	8004b28 <get_strain>
 8004abc:	eef0 7a40 	vmov.f32	s15, s0
 8004ac0:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <input_data+0xdc>)
 8004ac2:	edc3 7a00 	vstr	s15, [r3]
      break;
 8004ac6:	e002      	b.n	8004ace <input_data+0xc6>
      break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <input_data+0xc6>
      break;
 8004acc:	bf00      	nop
  }
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000b80 	.word	0x20000b80
 8004adc:	20000b78 	.word	0x20000b78
 8004ae0:	20000020 	.word	0x20000020
 8004ae4:	20000b7c 	.word	0x20000b7c

08004ae8 <get_strain_factor>:

float get_strain_factor() {
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  if (state != k_exercise) return -1;
 8004aec:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <get_strain_factor+0x34>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d002      	beq.n	8004afa <get_strain_factor+0x12>
 8004af4:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8004af8:	e007      	b.n	8004b0a <get_strain_factor+0x22>
  return (exercise_base_strain) / current_strain;
 8004afa:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <get_strain_factor+0x38>)
 8004afc:	ed93 7a00 	vldr	s14, [r3]
 8004b00:	4b08      	ldr	r3, [pc, #32]	@ (8004b24 <get_strain_factor+0x3c>)
 8004b02:	edd3 7a00 	vldr	s15, [r3]
 8004b06:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8004b0a:	eef0 7a66 	vmov.f32	s15, s13
 8004b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000b80 	.word	0x20000b80
 8004b20:	20000b88 	.word	0x20000b88
 8004b24:	20000b7c 	.word	0x20000b7c

08004b28 <get_strain>:

inline
float get_strain(int bpm, float speed) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	ed87 0a00 	vstr	s0, [r7]
  return bpm / (speed * 60.0f);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b3e:	edd7 7a00 	vldr	s15, [r7]
 8004b42:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8004b60 <get_strain+0x38>
 8004b46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004b52:	eeb0 0a67 	vmov.f32	s0, s15
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	42700000 	.word	0x42700000

08004b64 <update_data>:

void update_data(int bpm, float speed) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	ed87 0a00 	vstr	s0, [r7]
  current_strain = get_strain(bpm, speed);
 8004b70:	ed97 0a00 	vldr	s0, [r7]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ffd7 	bl	8004b28 <get_strain>
 8004b7a:	eef0 7a40 	vmov.f32	s15, s0
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <update_data+0x44>)
 8004b80:	edc3 7a00 	vstr	s15, [r3]
  data[data_index] = current_strain;
 8004b84:	4b09      	ldr	r3, [pc, #36]	@ (8004bac <update_data+0x48>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a07      	ldr	r2, [pc, #28]	@ (8004ba8 <update_data+0x44>)
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	4908      	ldr	r1, [pc, #32]	@ (8004bb0 <update_data+0x4c>)
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	601a      	str	r2, [r3, #0]
  ++data_index;
 8004b94:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <update_data+0x48>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <update_data+0x48>)
 8004b9c:	6013      	str	r3, [r2, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000b7c 	.word	0x20000b7c
 8004bac:	20000b78 	.word	0x20000b78
 8004bb0:	20000a88 	.word	0x20000a88

08004bb4 <calculate_base_strain>:

void calculate_base_strain(void) {
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
  standard_base_strain = 0;
 8004bba:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <calculate_base_strain+0x5c>)
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	e010      	b.n	8004bea <calculate_base_strain+0x36>
    standard_base_strain += data[i];
 8004bc8:	4a12      	ldr	r2, [pc, #72]	@ (8004c14 <calculate_base_strain+0x60>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	ed93 7a00 	vldr	s14, [r3]
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c10 <calculate_base_strain+0x5c>)
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bde:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <calculate_base_strain+0x5c>)
 8004be0:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3301      	adds	r3, #1
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b3b      	cmp	r3, #59	@ 0x3b
 8004bee:	ddeb      	ble.n	8004bc8 <calculate_base_strain+0x14>
  }
  standard_base_strain /= DATA_BUFFER_LENGTH;
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <calculate_base_strain+0x5c>)
 8004bf2:	ed93 7a00 	vldr	s14, [r3]
 8004bf6:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004c18 <calculate_base_strain+0x64>
 8004bfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bfe:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <calculate_base_strain+0x5c>)
 8004c00:	edc3 7a00 	vstr	s15, [r3]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20000b84 	.word	0x20000b84
 8004c14:	20000a88 	.word	0x20000a88
 8004c18:	42700000 	.word	0x42700000

08004c1c <calculate_exercise_strain>:

void calculate_exercise_strain(void) {
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
  exercise_base_strain = 0;
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <calculate_exercise_strain+0x5c>)
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	e010      	b.n	8004c52 <calculate_exercise_strain+0x36>
    exercise_base_strain += data[i];
 8004c30:	4a12      	ldr	r2, [pc, #72]	@ (8004c7c <calculate_exercise_strain+0x60>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	ed93 7a00 	vldr	s14, [r3]
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c78 <calculate_exercise_strain+0x5c>)
 8004c3e:	edd3 7a00 	vldr	s15, [r3]
 8004c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c46:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <calculate_exercise_strain+0x5c>)
 8004c48:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b3b      	cmp	r3, #59	@ 0x3b
 8004c56:	ddeb      	ble.n	8004c30 <calculate_exercise_strain+0x14>
  }
  exercise_base_strain /= DATA_BUFFER_LENGTH;
 8004c58:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <calculate_exercise_strain+0x5c>)
 8004c5a:	ed93 7a00 	vldr	s14, [r3]
 8004c5e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004c80 <calculate_exercise_strain+0x64>
 8004c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c66:	4b04      	ldr	r3, [pc, #16]	@ (8004c78 <calculate_exercise_strain+0x5c>)
 8004c68:	edc3 7a00 	vstr	s15, [r3]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000b88 	.word	0x20000b88
 8004c7c:	20000a88 	.word	0x20000a88
 8004c80:	42700000 	.word	0x42700000

08004c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return 1;
 8004c88:	2301      	movs	r3, #1
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <_kill>:

int _kill(int pid, int sig)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c9e:	f00c f815 	bl	8010ccc <__errno>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2216      	movs	r2, #22
 8004ca6:	601a      	str	r2, [r3, #0]
  return -1;
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_exit>:

void _exit (int status)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ffe7 	bl	8004c94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cc6:	bf00      	nop
 8004cc8:	e7fd      	b.n	8004cc6 <_exit+0x12>

08004cca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e00a      	b.n	8004cf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004cdc:	f3af 8000 	nop.w
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	60ba      	str	r2, [r7, #8]
 8004ce8:	b2ca      	uxtb	r2, r1
 8004cea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	dbf0      	blt.n	8004cdc <_read+0x12>
  }

  return len;
 8004cfa:	687b      	ldr	r3, [r7, #4]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e009      	b.n	8004d2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	60ba      	str	r2, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe ffe0 	bl	8003ce4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3301      	adds	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	dbf1      	blt.n	8004d16 <_write+0x12>
  }
  return len;
 8004d32:	687b      	ldr	r3, [r7, #4]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <_close>:

int _close(int file)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d64:	605a      	str	r2, [r3, #4]
  return 0;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <_isatty>:

int _isatty(int file)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d7c:	2301      	movs	r3, #1
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dac:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <_sbrk+0x5c>)
 8004dae:	4b15      	ldr	r3, [pc, #84]	@ (8004e04 <_sbrk+0x60>)
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004db8:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <_sbrk+0x64>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <_sbrk+0x64>)
 8004dc2:	4a12      	ldr	r2, [pc, #72]	@ (8004e0c <_sbrk+0x68>)
 8004dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <_sbrk+0x64>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4413      	add	r3, r2
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d207      	bcs.n	8004de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dd4:	f00b ff7a 	bl	8010ccc <__errno>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	220c      	movs	r2, #12
 8004ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	e009      	b.n	8004df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004de4:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <_sbrk+0x64>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dea:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <_sbrk+0x64>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	4a05      	ldr	r2, [pc, #20]	@ (8004e08 <_sbrk+0x64>)
 8004df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004df6:	68fb      	ldr	r3, [r7, #12]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	200a0000 	.word	0x200a0000
 8004e04:	00000400 	.word	0x00000400
 8004e08:	20000b8c 	.word	0x20000b8c
 8004e0c:	20000d00 	.word	0x20000d00

08004e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <SystemInit+0x20>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	4a05      	ldr	r2, [pc, #20]	@ (8004e30 <SystemInit+0x20>)
 8004e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	e000ed00 	.word	0xe000ed00

08004e34 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8004e46:	89fb      	ldrh	r3, [r7, #14]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	b21a      	sxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b21b      	sxth	r3, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	b21b      	sxth	r3, r3
 8004e56:	b29b      	uxth	r3, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2204      	movs	r2, #4
 8004e78:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	b21a      	sxth	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	b21a      	sxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 8004f2a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f34:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e010      	b.n	8004f7a <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	330a      	adds	r3, #10
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	330a      	adds	r3, #10
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	2200      	movs	r2, #0
 8004f72:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	3301      	adds	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d9eb      	bls.n	8004f58 <UG_Init+0xf4>
   }

   gui = g;
 8004f80:	4a04      	ldr	r2, [pc, #16]	@ (8004f94 <UG_Init+0x130>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6013      	str	r3, [r2, #0]
   return 1;
 8004f86:	2301      	movs	r3, #1
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000b90 	.word	0x20000b90

08004f98 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	@ (8004fb4 <UG_FontSelect+0x1c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000b90 	.word	0x20000b90

08004fb8 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <UG_FillScreen+0x44>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	b21a      	sxth	r2, r3
 8004fd4:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <UG_FillScreen+0x44>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	b219      	sxth	r1, r3
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	460b      	mov	r3, r1
 8004fec:	2100      	movs	r1, #0
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f000 f806 	bl	8005000 <UG_FillFrame>
}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000b90 	.word	0x20000b90

08005000 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	4604      	mov	r4, r0
 8005008:	4608      	mov	r0, r1
 800500a:	4611      	mov	r1, r2
 800500c:	461a      	mov	r2, r3
 800500e:	4623      	mov	r3, r4
 8005010:	80fb      	strh	r3, [r7, #6]
 8005012:	4603      	mov	r3, r0
 8005014:	80bb      	strh	r3, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	807b      	strh	r3, [r7, #2]
 800501a:	4613      	mov	r3, r2
 800501c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800501e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005026:	429a      	cmp	r2, r3
 8005028:	da05      	bge.n	8005036 <UG_FillFrame+0x36>
     swap(x1,x2);
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	817b      	strh	r3, [r7, #10]
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	80fb      	strh	r3, [r7, #6]
 8005032:	897b      	ldrh	r3, [r7, #10]
 8005034:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005036:	f9b7 2000 	ldrsh.w	r2, [r7]
 800503a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	da05      	bge.n	800504e <UG_FillFrame+0x4e>
     swap(y1,y2);
 8005042:	88bb      	ldrh	r3, [r7, #4]
 8005044:	813b      	strh	r3, [r7, #8]
 8005046:	883b      	ldrh	r3, [r7, #0]
 8005048:	80bb      	strh	r3, [r7, #4]
 800504a:	893b      	ldrh	r3, [r7, #8]
 800504c:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 800504e:	88bb      	ldrh	r3, [r7, #4]
 8005050:	81bb      	strh	r3, [r7, #12]
 8005052:	e01e      	b.n	8005092 <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	81fb      	strh	r3, [r7, #14]
 8005058:	e00f      	b.n	800507a <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 800505a:	4b13      	ldr	r3, [pc, #76]	@ (80050a8 <UG_FillFrame+0xa8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	8c3a      	ldrh	r2, [r7, #32]
 8005064:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005068:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800506c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800506e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005072:	b29b      	uxth	r3, r3
 8005074:	3301      	adds	r3, #1
 8005076:	b29b      	uxth	r3, r3
 8005078:	81fb      	strh	r3, [r7, #14]
 800507a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800507e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005082:	429a      	cmp	r2, r3
 8005084:	dde9      	ble.n	800505a <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 8005086:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800508a:	b29b      	uxth	r3, r3
 800508c:	3301      	adds	r3, #1
 800508e:	b29b      	uxth	r3, r3
 8005090:	81bb      	strh	r3, [r7, #12]
 8005092:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005096:	f9b7 3000 	ldrsh.w	r3, [r7]
 800509a:	429a      	cmp	r2, r3
 800509c:	ddda      	ble.n	8005054 <UG_FillFrame+0x54>
      }
   }
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd90      	pop	{r4, r7, pc}
 80050a8:	20000b90 	.word	0x20000b90

080050ac <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80050ac:	b5b0      	push	{r4, r5, r7, lr}
 80050ae:	b08a      	sub	sp, #40	@ 0x28
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	461a      	mov	r2, r3
 80050ba:	4623      	mov	r3, r4
 80050bc:	80fb      	strh	r3, [r7, #6]
 80050be:	4603      	mov	r3, r0
 80050c0:	80bb      	strh	r3, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	807b      	strh	r3, [r7, #2]
 80050c6:	4613      	mov	r3, r2
 80050c8:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80050ca:	4b67      	ldr	r3, [pc, #412]	@ (8005268 <UG_DrawLine+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d013      	beq.n	8005102 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80050da:	4b63      	ldr	r3, [pc, #396]	@ (8005268 <UG_DrawLine+0x1bc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e0:	461d      	mov	r5, r3
 80050e2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80050e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80050ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80050ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80050f2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	4623      	mov	r3, r4
 80050f8:	47a8      	blx	r5
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80ae 	beq.w	800525e <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	b29b      	uxth	r3, r3
 800510a:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800510c:	883a      	ldrh	r2, [r7, #0]
 800510e:	88bb      	ldrh	r3, [r7, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8005116:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	bfb8      	it	lt
 800511e:	425b      	neglt	r3, r3
 8005120:	b29b      	uxth	r3, r3
 8005122:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8005124:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005128:	2b00      	cmp	r3, #0
 800512a:	bfb8      	it	lt
 800512c:	425b      	neglt	r3, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8005132:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	dd01      	ble.n	800513e <UG_DrawLine+0x92>
 800513a:	2301      	movs	r3, #1
 800513c:	e001      	b.n	8005142 <UG_DrawLine+0x96>
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8005144:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005148:	2b00      	cmp	r3, #0
 800514a:	dd01      	ble.n	8005150 <UG_DrawLine+0xa4>
 800514c:	2301      	movs	r3, #1
 800514e:	e001      	b.n	8005154 <UG_DrawLine+0xa8>
 8005150:	f04f 33ff 	mov.w	r3, #4294967295
 8005154:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8005156:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800515a:	105b      	asrs	r3, r3, #1
 800515c:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800515e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005162:	105b      	asrs	r3, r3, #1
 8005164:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800516a:	88bb      	ldrh	r3, [r7, #4]
 800516c:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800516e:	4b3e      	ldr	r3, [pc, #248]	@ (8005268 <UG_DrawLine+0x1bc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005178:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800517c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005180:	4798      	blx	r3

   if( dxabs >= dyabs )
 8005182:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800518a:	429a      	cmp	r2, r3
 800518c:	db33      	blt.n	80051f6 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800518e:	2300      	movs	r3, #0
 8005190:	83fb      	strh	r3, [r7, #30]
 8005192:	e029      	b.n	80051e8 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8005194:	8b7a      	ldrh	r2, [r7, #26]
 8005196:	89fb      	ldrh	r3, [r7, #14]
 8005198:	4413      	add	r3, r2
 800519a:	b29b      	uxth	r3, r3
 800519c:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800519e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80051a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	db09      	blt.n	80051be <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80051aa:	8b7a      	ldrh	r2, [r7, #26]
 80051ac:	8a3b      	ldrh	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80051b4:	8afa      	ldrh	r2, [r7, #22]
 80051b6:	897b      	ldrh	r3, [r7, #10]
 80051b8:	4413      	add	r3, r2
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80051be:	8b3a      	ldrh	r2, [r7, #24]
 80051c0:	89bb      	ldrh	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80051c8:	4b27      	ldr	r3, [pc, #156]	@ (8005268 <UG_DrawLine+0x1bc>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80051d2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80051d6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80051da:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80051dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3301      	adds	r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	83fb      	strh	r3, [r7, #30]
 80051e8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80051ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	dbcf      	blt.n	8005194 <UG_DrawLine+0xe8>
 80051f4:	e034      	b.n	8005260 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80051f6:	2300      	movs	r3, #0
 80051f8:	83fb      	strh	r3, [r7, #30]
 80051fa:	e029      	b.n	8005250 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 80051fc:	8bba      	ldrh	r2, [r7, #28]
 80051fe:	8a3b      	ldrh	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8005206:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800520a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800520e:	429a      	cmp	r2, r3
 8005210:	db09      	blt.n	8005226 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8005212:	8bba      	ldrh	r2, [r7, #28]
 8005214:	89fb      	ldrh	r3, [r7, #14]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	b29b      	uxth	r3, r3
 800521a:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800521c:	8b3a      	ldrh	r2, [r7, #24]
 800521e:	89bb      	ldrh	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	b29b      	uxth	r3, r3
 8005224:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8005226:	8afa      	ldrh	r2, [r7, #22]
 8005228:	897b      	ldrh	r3, [r7, #10]
 800522a:	4413      	add	r3, r2
 800522c:	b29b      	uxth	r3, r3
 800522e:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8005230:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <UG_DrawLine+0x1bc>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800523a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800523e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005242:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8005244:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005248:	b29b      	uxth	r3, r3
 800524a:	3301      	adds	r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	83fb      	strh	r3, [r7, #30]
 8005250:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005258:	429a      	cmp	r2, r3
 800525a:	dbcf      	blt.n	80051fc <UG_DrawLine+0x150>
 800525c:	e000      	b.n	8005260 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800525e:	bf00      	nop
      }
   }  
}
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bdb0      	pop	{r4, r5, r7, pc}
 8005266:	bf00      	nop
 8005268:	20000b90 	.word	0x20000b90

0800526c <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b087      	sub	sp, #28
 8005270:	af02      	add	r7, sp, #8
 8005272:	4603      	mov	r3, r0
 8005274:	603a      	str	r2, [r7, #0]
 8005276:	80fb      	strh	r3, [r7, #6]
 8005278:	460b      	mov	r3, r1
 800527a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8005280:	88bb      	ldrh	r3, [r7, #4]
 8005282:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8005284:	4b44      	ldr	r3, [pc, #272]	@ (8005398 <UG_PutString+0x12c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fae4 	bl	8005858 <_UG_FontSelect>
   while ( *str != 0 )
 8005290:	e064      	b.n	800535c <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005292:	4b41      	ldr	r3, [pc, #260]	@ (8005398 <UG_PutString+0x12c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 800529e:	463b      	mov	r3, r7
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f915 	bl	80054d0 <_UG_DecodeUTF8>
 80052a6:	4603      	mov	r3, r0
 80052a8:	817b      	strh	r3, [r7, #10]
 80052aa:	e004      	b.n	80052b6 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	603a      	str	r2, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80052b6:	897b      	ldrh	r3, [r7, #10]
 80052b8:	2b0a      	cmp	r3, #10
 80052ba:	d105      	bne.n	80052c8 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80052bc:	4b36      	ldr	r3, [pc, #216]	@ (8005398 <UG_PutString+0x12c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	81fb      	strh	r3, [r7, #14]
         continue;
 80052c6:	e049      	b.n	800535c <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80052c8:	897b      	ldrh	r3, [r7, #10]
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f977 	bl	80055c0 <_UG_GetCharData>
 80052d2:	4603      	mov	r3, r0
 80052d4:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80052d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052de:	d03c      	beq.n	800535a <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 80052e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <UG_PutString+0x12c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052ea:	4619      	mov	r1, r3
 80052ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80052f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80052f4:	4413      	add	r3, r2
 80052f6:	4299      	cmp	r1, r3
 80052f8:	dc11      	bgt.n	800531e <UG_PutString+0xb2>
      {
         xp = x;
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80052fe:	4b26      	ldr	r3, [pc, #152]	@ (8005398 <UG_PutString+0x12c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005306:	b21b      	sxth	r3, r3
 8005308:	4a23      	ldr	r2, [pc, #140]	@ (8005398 <UG_PutString+0x12c>)
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 8005310:	4413      	add	r3, r2
 8005312:	b21b      	sxth	r3, r3
 8005314:	b29a      	uxth	r2, r3
 8005316:	89bb      	ldrh	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800531e:	4b1e      	ldr	r3, [pc, #120]	@ (8005398 <UG_PutString+0x12c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 8005326:	4b1c      	ldr	r3, [pc, #112]	@ (8005398 <UG_PutString+0x12c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800532e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005332:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8005336:	8978      	ldrh	r0, [r7, #10]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	4623      	mov	r3, r4
 800533c:	f000 fb0e 	bl	800595c <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8005340:	4b15      	ldr	r3, [pc, #84]	@ (8005398 <UG_PutString+0x12c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8005348:	b29a      	uxth	r2, r3
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	b29a      	uxth	r2, r3
 8005350:	89fb      	ldrh	r3, [r7, #14]
 8005352:	4413      	add	r3, r2
 8005354:	b29b      	uxth	r3, r3
 8005356:	81fb      	strh	r3, [r7, #14]
 8005358:	e000      	b.n	800535c <UG_PutString+0xf0>
      if(cw==-1) continue;
 800535a:	bf00      	nop
   while ( *str != 0 )
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d196      	bne.n	8005292 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8005364:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <UG_PutString+0x12c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8005374:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <UG_PutString+0x12c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800537a:	461c      	mov	r4, r3
 800537c:	f04f 33ff 	mov.w	r3, #4294967295
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	f04f 31ff 	mov.w	r1, #4294967295
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	47a0      	blx	r4
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	bd90      	pop	{r4, r7, pc}
 8005396:	bf00      	nop
 8005398:	20000b90 	.word	0x20000b90

0800539c <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b085      	sub	sp, #20
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	4604      	mov	r4, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	461a      	mov	r2, r3
 80053aa:	4623      	mov	r3, r4
 80053ac:	80fb      	strh	r3, [r7, #6]
 80053ae:	4603      	mov	r3, r0
 80053b0:	80bb      	strh	r3, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	807b      	strh	r3, [r7, #2]
 80053b6:	4613      	mov	r3, r2
 80053b8:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 80053ba:	4b15      	ldr	r3, [pc, #84]	@ (8005410 <UG_PutChar+0x74>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fa49 	bl	8005858 <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 80053c6:	883c      	ldrh	r4, [r7, #0]
 80053c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80053cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80053d0:	88f8      	ldrh	r0, [r7, #6]
 80053d2:	8b3b      	ldrh	r3, [r7, #24]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4623      	mov	r3, r4
 80053d8:	f000 fac0 	bl	800595c <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80053dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <UG_PutChar+0x74>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00c      	beq.n	8005406 <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80053ec:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <UG_PutChar+0x74>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f2:	461c      	mov	r4, r3
 80053f4:	f04f 33ff 	mov.w	r3, #4294967295
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295
 80053fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005400:	f04f 30ff 	mov.w	r0, #4294967295
 8005404:	47a0      	blx	r4
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bd90      	pop	{r4, r7, pc}
 800540e:	bf00      	nop
 8005410:	20000b90 	.word	0x20000b90

08005414 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800541e:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <UG_SetForecolor+0x20>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	20000b90 	.word	0x20000b90

08005438 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8005442:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <UG_SetBackcolor+0x20>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	20000b90 	.word	0x20000b90

0800545c <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <UG_FontSetHSpace+0x24>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	b252      	sxtb	r2, r2
 800546e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000b90 	.word	0x20000b90

08005484 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800548e:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <UG_FontSetVSpace+0x24>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	88fa      	ldrh	r2, [r7, #6]
 8005494:	b252      	sxtb	r2, r2
 8005496:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000b90 	.word	0x20000b90

080054ac <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 80054b6:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <UG_FontSetTransparency+0x20>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	79fa      	ldrb	r2, [r7, #7]
 80054bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	20000b90 	.word	0x20000b90

080054d0 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  char c=**str;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80054e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db07      	blt.n	80054f8 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
    return c;
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	e05c      	b.n	80055b2 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8005500:	e04f      	b.n	80055a2 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8005514:	7bbb      	ldrb	r3, [r7, #14]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d130      	bne.n	800557c <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2bdf      	cmp	r3, #223	@ 0xdf
 800551e:	d806      	bhi.n	800552e <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8005520:	2301      	movs	r3, #1
 8005522:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e023      	b.n	8005576 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2bef      	cmp	r3, #239	@ 0xef
 8005532:	d806      	bhi.n	8005542 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8005534:	2302      	movs	r3, #2
 8005536:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	73fb      	strb	r3, [r7, #15]
 8005540:	e019      	b.n	8005576 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2bf7      	cmp	r3, #247	@ 0xf7
 8005546:	d806      	bhi.n	8005556 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8005548:	2303      	movs	r3, #3
 800554a:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e00f      	b.n	8005576 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2bfb      	cmp	r3, #251	@ 0xfb
 800555a:	d806      	bhi.n	800556a <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 800555c:	2304      	movs	r3, #4
 800555e:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	73fb      	strb	r3, [r7, #15]
 8005568:	e005      	b.n	8005576 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800556a:	2305      	movs	r3, #5
 800556c:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	81bb      	strh	r3, [r7, #12]
 800557a:	e012      	b.n	80055a2 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 800557c:	89bb      	ldrh	r3, [r7, #12]
 800557e:	019b      	lsls	r3, r3, #6
 8005580:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	b21b      	sxth	r3, r3
 8005586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800558a:	b21a      	sxth	r2, r3
 800558c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	b21b      	sxth	r3, r3
 8005594:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8005596:	7bbb      	ldrb	r3, [r7, #14]
 8005598:	3b01      	subs	r3, #1
 800559a:	73bb      	strb	r3, [r7, #14]
 800559c:	7bbb      	ldrb	r3, [r7, #14]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <_UG_DecodeUTF8+0xde>
  while(**str)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1aa      	bne.n	8005502 <_UG_DecodeUTF8+0x32>
 80055ac:	e000      	b.n	80055b0 <_UG_DecodeUTF8+0xe0>
        break;
 80055ae:	bf00      	nop
    }
  }
  return encoding;
 80055b0:	89bb      	ldrh	r3, [r7, #12]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 80055d8:	2300      	movs	r3, #0
 80055da:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80055dc:	2300      	movs	r3, #0
 80055de:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80055e0:	4b98      	ldr	r3, [pc, #608]	@ (8005844 <_UG_GetCharData+0x284>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055e6:	4b98      	ldr	r3, [pc, #608]	@ (8005848 <_UG_GetCharData+0x288>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10f      	bne.n	800560e <_UG_GetCharData+0x4e>
 80055ee:	4b97      	ldr	r3, [pc, #604]	@ (800584c <_UG_GetCharData+0x28c>)
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d10a      	bne.n	800560e <_UG_GetCharData+0x4e>
    if(p){
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80055fe:	4b94      	ldr	r3, [pc, #592]	@ (8005850 <_UG_GetCharData+0x290>)
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8005606:	4b93      	ldr	r3, [pc, #588]	@ (8005854 <_UG_GetCharData+0x294>)
 8005608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800560c:	e116      	b.n	800583c <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800560e:	4b8d      	ldr	r3, [pc, #564]	@ (8005844 <_UG_GetCharData+0x284>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80cc 	beq.w	80057b4 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	2bfc      	cmp	r3, #252	@ 0xfc
 8005620:	f300 80c8 	bgt.w	80057b4 <_UG_GetCharData+0x1f4>
 8005624:	2bd6      	cmp	r3, #214	@ 0xd6
 8005626:	da09      	bge.n	800563c <_UG_GetCharData+0x7c>
 8005628:	2bc4      	cmp	r3, #196	@ 0xc4
 800562a:	d06c      	beq.n	8005706 <_UG_GetCharData+0x146>
 800562c:	2bc4      	cmp	r3, #196	@ 0xc4
 800562e:	f300 80c1 	bgt.w	80057b4 <_UG_GetCharData+0x1f4>
 8005632:	2bb0      	cmp	r3, #176	@ 0xb0
 8005634:	d06d      	beq.n	8005712 <_UG_GetCharData+0x152>
 8005636:	2bb5      	cmp	r3, #181	@ 0xb5
 8005638:	d068      	beq.n	800570c <_UG_GetCharData+0x14c>
 800563a:	e06e      	b.n	800571a <_UG_GetCharData+0x15a>
 800563c:	3bd6      	subs	r3, #214	@ 0xd6
 800563e:	2b26      	cmp	r3, #38	@ 0x26
 8005640:	f200 80b8 	bhi.w	80057b4 <_UG_GetCharData+0x1f4>
 8005644:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <_UG_GetCharData+0x8c>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	080056ef 	.word	0x080056ef
 8005650:	080057b5 	.word	0x080057b5
 8005654:	080057b5 	.word	0x080057b5
 8005658:	080057b5 	.word	0x080057b5
 800565c:	080057b5 	.word	0x080057b5
 8005660:	080057b5 	.word	0x080057b5
 8005664:	080056fb 	.word	0x080056fb
 8005668:	080057b5 	.word	0x080057b5
 800566c:	080057b5 	.word	0x080057b5
 8005670:	080057b5 	.word	0x080057b5
 8005674:	080057b5 	.word	0x080057b5
 8005678:	080057b5 	.word	0x080057b5
 800567c:	080057b5 	.word	0x080057b5
 8005680:	080057b5 	.word	0x080057b5
 8005684:	08005701 	.word	0x08005701
 8005688:	080057b5 	.word	0x080057b5
 800568c:	080057b5 	.word	0x080057b5
 8005690:	080057b5 	.word	0x080057b5
 8005694:	080057b5 	.word	0x080057b5
 8005698:	080057b5 	.word	0x080057b5
 800569c:	080057b5 	.word	0x080057b5
 80056a0:	080057b5 	.word	0x080057b5
 80056a4:	080057b5 	.word	0x080057b5
 80056a8:	080057b5 	.word	0x080057b5
 80056ac:	080057b5 	.word	0x080057b5
 80056b0:	080057b5 	.word	0x080057b5
 80056b4:	080057b5 	.word	0x080057b5
 80056b8:	080057b5 	.word	0x080057b5
 80056bc:	080057b5 	.word	0x080057b5
 80056c0:	080057b5 	.word	0x080057b5
 80056c4:	080057b5 	.word	0x080057b5
 80056c8:	080057b5 	.word	0x080057b5
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	080057b5 	.word	0x080057b5
 80056d4:	080057b5 	.word	0x080057b5
 80056d8:	080057b5 	.word	0x080057b5
 80056dc:	080057b5 	.word	0x080057b5
 80056e0:	080057b5 	.word	0x080057b5
 80056e4:	080056f5 	.word	0x080056f5
    {
       case 0xF6: encoding = 0x94; break; // ö
 80056e8:	2394      	movs	r3, #148	@ 0x94
 80056ea:	80fb      	strh	r3, [r7, #6]
 80056ec:	e015      	b.n	800571a <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80056ee:	2399      	movs	r3, #153	@ 0x99
 80056f0:	80fb      	strh	r3, [r7, #6]
 80056f2:	e012      	b.n	800571a <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 80056f4:	2381      	movs	r3, #129	@ 0x81
 80056f6:	80fb      	strh	r3, [r7, #6]
 80056f8:	e00f      	b.n	800571a <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 80056fa:	239a      	movs	r3, #154	@ 0x9a
 80056fc:	80fb      	strh	r3, [r7, #6]
 80056fe:	e00c      	b.n	800571a <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8005700:	2384      	movs	r3, #132	@ 0x84
 8005702:	80fb      	strh	r3, [r7, #6]
 8005704:	e009      	b.n	800571a <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8005706:	238e      	movs	r3, #142	@ 0x8e
 8005708:	80fb      	strh	r3, [r7, #6]
 800570a:	e006      	b.n	800571a <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 800570c:	23e6      	movs	r3, #230	@ 0xe6
 800570e:	80fb      	strh	r3, [r7, #6]
 8005710:	e003      	b.n	800571a <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8005712:	23f8      	movs	r3, #248	@ 0xf8
 8005714:	80fb      	strh	r3, [r7, #6]
 8005716:	bf00      	nop
 8005718:	e04c      	b.n	80057b4 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800571a:	e04b      	b.n	80057b4 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 800571c:	4b49      	ldr	r3, [pc, #292]	@ (8005844 <_UG_GetCharData+0x284>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005722:	8a7a      	ldrh	r2, [r7, #18]
 8005724:	0052      	lsls	r2, r2, #1
 8005726:	4413      	add	r3, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fb83 	bl	8004e34 <ptr_8to16>
 800572e:	4603      	mov	r3, r0
 8005730:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8005732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005736:	2b00      	cmp	r3, #0
 8005738:	da06      	bge.n	8005748 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 800573a:	89fb      	ldrh	r3, [r7, #14]
 800573c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005740:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8005742:	2301      	movs	r3, #1
 8005744:	747b      	strb	r3, [r7, #17]
 8005746:	e032      	b.n	80057ae <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8005748:	7c7b      	ldrb	r3, [r7, #17]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d021      	beq.n	8005792 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	8afb      	ldrh	r3, [r7, #22]
 8005752:	429a      	cmp	r2, r3
 8005754:	d30d      	bcc.n	8005772 <_UG_GetCharData+0x1b2>
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	89fb      	ldrh	r3, [r7, #14]
 800575a:	429a      	cmp	r2, r3
 800575c:	d809      	bhi.n	8005772 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	8afb      	ldrh	r3, [r7, #22]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	b29a      	uxth	r2, r3
 8005766:	8abb      	ldrh	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	82bb      	strh	r3, [r7, #20]
        found=1;
 800576c:	2301      	movs	r3, #1
 800576e:	743b      	strb	r3, [r7, #16]
        break;
 8005770:	e02a      	b.n	80057c8 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	8afb      	ldrh	r3, [r7, #22]
 8005776:	429a      	cmp	r2, r3
 8005778:	d323      	bcc.n	80057c2 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 800577a:	89fa      	ldrh	r2, [r7, #14]
 800577c:	8afb      	ldrh	r3, [r7, #22]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	b29a      	uxth	r2, r3
 8005782:	8abb      	ldrh	r3, [r7, #20]
 8005784:	4413      	add	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	3301      	adds	r3, #1
 800578a:	82bb      	strh	r3, [r7, #20]
      range=0;
 800578c:	2300      	movs	r3, #0
 800578e:	747b      	strb	r3, [r7, #17]
 8005790:	e00d      	b.n	80057ae <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8005792:	88fa      	ldrh	r2, [r7, #6]
 8005794:	89fb      	ldrh	r3, [r7, #14]
 8005796:	429a      	cmp	r2, r3
 8005798:	d102      	bne.n	80057a0 <_UG_GetCharData+0x1e0>
      {
        found=1;
 800579a:	2301      	movs	r3, #1
 800579c:	743b      	strb	r3, [r7, #16]
        break;
 800579e:	e013      	b.n	80057c8 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	89fb      	ldrh	r3, [r7, #14]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d30e      	bcc.n	80057c6 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80057a8:	8abb      	ldrh	r3, [r7, #20]
 80057aa:	3301      	adds	r3, #1
 80057ac:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80057ae:	8a7b      	ldrh	r3, [r7, #18]
 80057b0:	3301      	adds	r3, #1
 80057b2:	827b      	strh	r3, [r7, #18]
 80057b4:	4b23      	ldr	r3, [pc, #140]	@ (8005844 <_UG_GetCharData+0x284>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80057ba:	8a7a      	ldrh	r2, [r7, #18]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d3ad      	bcc.n	800571c <_UG_GetCharData+0x15c>
 80057c0:	e002      	b.n	80057c8 <_UG_GetCharData+0x208>
        break;
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <_UG_GetCharData+0x208>
        break;
 80057c6:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 80057c8:	7c3b      	ldrb	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d034      	beq.n	8005838 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 80057ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005844 <_UG_GetCharData+0x284>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005848 <_UG_GetCharData+0x288>)
 80057d6:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80057d8:	4a1c      	ldr	r2, [pc, #112]	@ (800584c <_UG_GetCharData+0x28c>)
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80057de:	4b19      	ldr	r3, [pc, #100]	@ (8005844 <_UG_GetCharData+0x284>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e4:	8aba      	ldrh	r2, [r7, #20]
 80057e6:	4917      	ldr	r1, [pc, #92]	@ (8005844 <_UG_GetCharData+0x284>)
 80057e8:	6809      	ldr	r1, [r1, #0]
 80057ea:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 80057ec:	fb01 f202 	mul.w	r2, r1, r2
 80057f0:	4413      	add	r3, r2
 80057f2:	4a17      	ldr	r2, [pc, #92]	@ (8005850 <_UG_GetCharData+0x290>)
 80057f4:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80057f6:	4b13      	ldr	r3, [pc, #76]	@ (8005844 <_UG_GetCharData+0x284>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d009      	beq.n	8005814 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8005800:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <_UG_GetCharData+0x284>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005806:	8abb      	ldrh	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	b21a      	sxth	r2, r3
 800580e:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <_UG_GetCharData+0x294>)
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	e006      	b.n	8005822 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8005814:	4b0b      	ldr	r3, [pc, #44]	@ (8005844 <_UG_GetCharData+0x284>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800581c:	b21a      	sxth	r2, r3
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <_UG_GetCharData+0x294>)
 8005820:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <_UG_GetCharData+0x290>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8005830:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <_UG_GetCharData+0x294>)
 8005832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005836:	e001      	b.n	800583c <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000b90 	.word	0x20000b90
 8005848:	20000b94 	.word	0x20000b94
 800584c:	20000b98 	.word	0x20000b98
 8005850:	20000b9c 	.word	0x20000b9c
 8005854:	20000ba0 	.word	0x20000ba0

08005858 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005860:	4b3d      	ldr	r3, [pc, #244]	@ (8005958 <_UG_FontSelect+0x100>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d070      	beq.n	800594e <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 800586c:	4b3a      	ldr	r3, [pc, #232]	@ (8005958 <_UG_FontSelect+0x100>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	781a      	ldrb	r2, [r3, #0]
 8005878:	4b37      	ldr	r3, [pc, #220]	@ (8005958 <_UG_FontSelect+0x100>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	b25b      	sxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	da01      	bge.n	8005898 <_UG_FontSelect+0x40>
 8005894:	2201      	movs	r2, #1
 8005896:	e000      	b.n	800589a <_UG_FontSelect+0x42>
 8005898:	2200      	movs	r2, #0
 800589a:	4b2f      	ldr	r3, [pc, #188]	@ (8005958 <_UG_FontSelect+0x100>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005958 <_UG_FontSelect+0x100>)
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	4a27      	ldr	r2, [pc, #156]	@ (8005958 <_UG_FontSelect+0x100>)
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80058c4:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <_UG_FontSelect+0x100>)
 80058c6:	681c      	ldr	r4, [r3, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fab3 	bl	8004e34 <ptr_8to16>
 80058ce:	4603      	mov	r3, r0
 80058d0:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3302      	adds	r3, #2
 80058d6:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 80058d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005958 <_UG_FontSelect+0x100>)
 80058da:	681c      	ldr	r4, [r3, #0]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff faa9 	bl	8004e34 <ptr_8to16>
 80058e2:	4603      	mov	r3, r0
 80058e4:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3302      	adds	r3, #2
 80058ea:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <_UG_FontSelect+0x100>)
 80058ee:	681c      	ldr	r4, [r3, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fa9f 	bl	8004e34 <ptr_8to16>
 80058f6:	4603      	mov	r3, r0
 80058f8:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3302      	adds	r3, #2
 80058fe:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00b      	beq.n	8005924 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 800590c:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <_UG_FontSelect+0x100>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8005914:	4b10      	ldr	r3, [pc, #64]	@ (8005958 <_UG_FontSelect+0x100>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800591a:	461a      	mov	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4413      	add	r3, r2
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	e003      	b.n	800592c <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8005924:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <_UG_FontSelect+0x100>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 800592c:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <_UG_FontSelect+0x100>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8005934:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <_UG_FontSelect+0x100>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	461a      	mov	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4413      	add	r3, r2
 8005942:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8005944:	4b04      	ldr	r3, [pc, #16]	@ (8005958 <_UG_FontSelect+0x100>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	641a      	str	r2, [r3, #64]	@ 0x40
 800594c:	e000      	b.n	8005950 <_UG_FontSelect+0xf8>
    return;
 800594e:	bf00      	nop
}
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bd90      	pop	{r4, r7, pc}
 8005956:	bf00      	nop
 8005958:	20000b90 	.word	0x20000b90

0800595c <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 800595c:	b5b0      	push	{r4, r5, r7, lr}
 800595e:	b08c      	sub	sp, #48	@ 0x30
 8005960:	af00      	add	r7, sp, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	4611      	mov	r1, r2
 8005968:	461a      	mov	r2, r3
 800596a:	4623      	mov	r3, r4
 800596c:	80fb      	strh	r3, [r7, #6]
 800596e:	4603      	mov	r3, r0
 8005970:	80bb      	strh	r3, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	807b      	strh	r3, [r7, #2]
 8005976:	4613      	mov	r3, r2
 8005978:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 800597a:	2300      	movs	r3, #0
 800597c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800597e:	2300      	movs	r3, #0
 8005980:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005982:	2300      	movs	r3, #0
 8005984:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005986:	2300      	movs	r3, #0
 8005988:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800598a:	4b8b      	ldr	r3, [pc, #556]	@ (8005bb8 <_UG_PutChar+0x25c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005992:	75fb      	strb	r3, [r7, #23]
 8005994:	4b88      	ldr	r3, [pc, #544]	@ (8005bb8 <_UG_PutChar+0x25c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80059a6:	f107 0208 	add.w	r2, r7, #8
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fe06 	bl	80055c0 <_UG_GetCharData>
 80059b4:	4603      	mov	r3, r0
 80059b6:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80059b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d102      	bne.n	80059c8 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295
 80059c6:	e224      	b.n	8005e12 <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 80059c8:	4b7b      	ldr	r3, [pc, #492]	@ (8005bb8 <_UG_PutChar+0x25c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80059d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 80059d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <_UG_PutChar+0x80>
     return 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	e21a      	b.n	8005e12 <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 80059dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059de:	08db      	lsrs	r3, r3, #3
 80059e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80059e2:	4b75      	ldr	r3, [pc, #468]	@ (8005bb8 <_UG_PutChar+0x25c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <_UG_PutChar+0x9e>
 80059f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059f6:	3301      	adds	r3, #1
 80059f8:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01c      	beq.n	8005a3a <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005a00:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb8 <_UG_PutChar+0x25c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a06:	461c      	mov	r4, r3
 8005a08:	88ba      	ldrh	r2, [r7, #4]
 8005a0a:	8abb      	ldrh	r3, [r7, #20]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	b21a      	sxth	r2, r3
 8005a16:	4b68      	ldr	r3, [pc, #416]	@ (8005bb8 <_UG_PutChar+0x25c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005a1e:	4619      	mov	r1, r3
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	440b      	add	r3, r1
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b21b      	sxth	r3, r3
 8005a2c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005a30:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8005a34:	47a0      	blx	r4
 8005a36:	4603      	mov	r3, r0
 8005a38:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8005bb8 <_UG_PutChar+0x25c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f040 8171 	bne.w	8005d2a <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005a48:	2300      	movs	r3, #0
 8005a4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a4c:	e0eb      	b.n	8005c26 <_UG_PutChar+0x2ca>
     {
       c=0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8005a52:	2300      	movs	r3, #0
 8005a54:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005a56:	e0de      	b.n	8005c16 <_UG_PutChar+0x2ba>
       {
         b = *data++;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	60ba      	str	r2, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005a62:	2300      	movs	r3, #0
 8005a64:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005a66:	e0c9      	b.n	8005bfc <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8005a68:	7f7b      	ldrb	r3, [r7, #29]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d033      	beq.n	8005ada <_UG_PutChar+0x17e>
           {
             if(driver)
 8005a72:	7dbb      	ldrb	r3, [r7, #22]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01f      	beq.n	8005ab8 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005a78:	8c3b      	ldrh	r3, [r7, #32]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <_UG_PutChar+0x138>
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d107      	bne.n	8005a94 <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8005a84:	8c3a      	ldrh	r2, [r7, #32]
 8005a86:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4798      	blx	r3
                 bpixels=0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005a94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <_UG_PutChar+0x154>
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 8005aa0:	88ba      	ldrh	r2, [r7, #4]
 8005aa2:	8bfb      	ldrh	r3, [r7, #30]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 8005aa8:	887a      	ldrh	r2, [r7, #2]
 8005aaa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005aac:	4413      	add	r3, r2
 8005aae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005ab0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ab6:	e095      	b.n	8005be4 <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb8 <_UG_PutChar+0x25c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	88b9      	ldrh	r1, [r7, #4]
 8005ac2:	8bfa      	ldrh	r2, [r7, #30]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	b210      	sxth	r0, r2
 8005aca:	8879      	ldrh	r1, [r7, #2]
 8005acc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ace:	440a      	add	r2, r1
 8005ad0:	b292      	uxth	r2, r2
 8005ad2:	b211      	sxth	r1, r2
 8005ad4:	883a      	ldrh	r2, [r7, #0]
 8005ad6:	4798      	blx	r3
 8005ad8:	e084      	b.n	8005be4 <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8005ada:	7dbb      	ldrb	r3, [r7, #22]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d06d      	beq.n	8005bbc <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8005ae0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d064      	beq.n	8005bb0 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d15e      	bne.n	8005baa <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 8005aec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005aee:	8839      	ldrh	r1, [r7, #0]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	4610      	mov	r0, r2
 8005af4:	4798      	blx	r3
                   fpixels=0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005afa:	e059      	b.n	8005bb0 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005afc:	88ba      	ldrh	r2, [r7, #4]
 8005afe:	8abb      	ldrh	r3, [r7, #20]
 8005b00:	4413      	add	r3, r2
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8005b0a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005b0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d003      	beq.n	8005b1c <_UG_PutChar+0x1c0>
 8005b14:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b16:	89fb      	ldrh	r3, [r7, #14]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d224      	bcs.n	8005b66 <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005b1c:	4b26      	ldr	r3, [pc, #152]	@ (8005bb8 <_UG_PutChar+0x25c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b22:	461d      	mov	r5, r3
 8005b24:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005b28:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005b2c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005b2e:	89fb      	ldrh	r3, [r7, #14]
 8005b30:	4413      	add	r3, r2
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	b21c      	sxth	r4, r3
 8005b3a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b40:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005b48:	4413      	add	r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	b21b      	sxth	r3, r3
 8005b4e:	4622      	mov	r2, r4
 8005b50:	47a8      	blx	r5
 8005b52:	4603      	mov	r3, r0
 8005b54:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005b56:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b58:	8839      	ldrh	r1, [r7, #0]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4798      	blx	r3
                       fpixels=0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b64:	e021      	b.n	8005baa <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005b66:	4b14      	ldr	r3, [pc, #80]	@ (8005bb8 <_UG_PutChar+0x25c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b6c:	461c      	mov	r4, r3
 8005b6e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005b72:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005b76:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005b78:	89fb      	ldrh	r3, [r7, #14]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	b21a      	sxth	r2, r3
 8005b84:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005b88:	47a0      	blx	r4
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005b8e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b90:	8839      	ldrh	r1, [r7, #0]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	4610      	mov	r0, r2
 8005b96:	4798      	blx	r3
                       fpixels -= width;
 8005b98:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005b9a:	89fb      	ldrh	r3, [r7, #14]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 8005ba0:	88bb      	ldrh	r3, [r7, #4]
 8005ba2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 8005ba4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 8005baa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1a5      	bne.n	8005afc <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 8005bb0:	8c3b      	ldrh	r3, [r7, #32]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	843b      	strh	r3, [r7, #32]
 8005bb6:	e015      	b.n	8005be4 <_UG_PutChar+0x288>
 8005bb8:	20000b90 	.word	0x20000b90
             }
             else if(!trans)                           // Not accelerated output
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d110      	bne.n	8005be4 <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 8005bc2:	4b96      	ldr	r3, [pc, #600]	@ (8005e1c <_UG_PutChar+0x4c0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	88b9      	ldrh	r1, [r7, #4]
 8005bcc:	8bfa      	ldrh	r2, [r7, #30]
 8005bce:	440a      	add	r2, r1
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	b210      	sxth	r0, r2
 8005bd4:	8879      	ldrh	r1, [r7, #2]
 8005bd6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005bd8:	440a      	add	r2, r1
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	b211      	sxth	r1, r2
 8005bde:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005be2:	4798      	blx	r3
             }
           }
           b >>= 1;
 8005be4:	7f7b      	ldrb	r3, [r7, #29]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	777b      	strb	r3, [r7, #29]
           c++;
 8005bea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005bf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005bfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005bfe:	2b07      	cmp	r3, #7
 8005c00:	d806      	bhi.n	8005c10 <_UG_PutChar+0x2b4>
 8005c02:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005c06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	f6ff af2c 	blt.w	8005a68 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 8005c10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c12:	3301      	adds	r3, #1
 8005c14:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005c16:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005c18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	f4ff af1c 	bcc.w	8005a58 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005c20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c22:	3301      	adds	r3, #1
 8005c24:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c26:	4b7d      	ldr	r3, [pc, #500]	@ (8005e1c <_UG_PutChar+0x4c0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005c2e:	461a      	mov	r2, r3
 8005c30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f4ff af0b 	bcc.w	8005a4e <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8005c38:	7dbb      	ldrb	r3, [r7, #22]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80e7 	beq.w	8005e0e <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 8005c40:	8c3b      	ldrh	r3, [r7, #32]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <_UG_PutChar+0x2fe>
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8005c4c:	8c3a      	ldrh	r2, [r7, #32]
 8005c4e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
 8005c58:	e0d9      	b.n	8005e0e <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 8005c5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80d6 	beq.w	8005e0e <_UG_PutChar+0x4b2>
       {
         if(!trans)
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d15c      	bne.n	8005d22 <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 8005c68:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005c6a:	8839      	ldrh	r1, [r7, #0]
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4798      	blx	r3
 8005c72:	e0cc      	b.n	8005e0e <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8005c74:	88ba      	ldrh	r2, [r7, #4]
 8005c76:	8abb      	ldrh	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8005c82:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d003      	beq.n	8005c94 <_UG_PutChar+0x338>
 8005c8c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005c8e:	8a3b      	ldrh	r3, [r7, #16]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d224      	bcs.n	8005cde <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005c94:	4b61      	ldr	r3, [pc, #388]	@ (8005e1c <_UG_PutChar+0x4c0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005ca0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005ca4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005ca6:	8a3b      	ldrh	r3, [r7, #16]
 8005ca8:	4413      	add	r3, r2
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	b21c      	sxth	r4, r3
 8005cb2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005cb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005cc0:	4413      	add	r3, r2
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	b21b      	sxth	r3, r3
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	47a8      	blx	r5
 8005cca:	4603      	mov	r3, r0
 8005ccc:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005cce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005cd0:	8839      	ldrh	r1, [r7, #0]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4798      	blx	r3
               fpixels=0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005cdc:	e021      	b.n	8005d22 <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005cde:	4b4f      	ldr	r3, [pc, #316]	@ (8005e1c <_UG_PutChar+0x4c0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce4:	461c      	mov	r4, r3
 8005ce6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005cea:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005cee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005cf0:	8a3b      	ldrh	r3, [r7, #16]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	b21a      	sxth	r2, r3
 8005cfc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005d00:	47a0      	blx	r4
 8005d02:	4603      	mov	r3, r0
 8005d04:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005d06:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005d08:	8839      	ldrh	r1, [r7, #0]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4798      	blx	r3
               fpixels -= width;
 8005d10:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005d12:	8a3b      	ldrh	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 8005d18:	88bb      	ldrh	r3, [r7, #4]
 8005d1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 8005d1c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005d1e:	3301      	adds	r3, #1
 8005d20:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 8005d22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1a5      	bne.n	8005c74 <_UG_PutChar+0x318>
 8005d28:	e071      	b.n	8005e0e <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8005d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8005e1c <_UG_PutChar+0x4c0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d16b      	bne.n	8005e0e <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005d36:	2300      	movs	r3, #0
 8005d38:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d3a:	e060      	b.n	8005dfe <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005d40:	e04a      	b.n	8005dd8 <_UG_PutChar+0x47c>
       {
         b = *data++;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	60ba      	str	r2, [r7, #8]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005d4c:	883b      	ldrh	r3, [r7, #0]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	7f7a      	ldrb	r2, [r7, #29]
 8005d52:	fb03 f202 	mul.w	r2, r3, r2
 8005d56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	7f79      	ldrb	r1, [r7, #29]
 8005d5e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	121b      	asrs	r3, r3, #8
 8005d6a:	b21b      	sxth	r3, r3
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8005d70:	883b      	ldrh	r3, [r7, #0]
 8005d72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005d76:	7f79      	ldrb	r1, [r7, #29]
 8005d78:	fb03 f101 	mul.w	r1, r3, r1
 8005d7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005d84:	7f78      	ldrb	r0, [r7, #29]
 8005d86:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8005d8a:	fb00 f303 	mul.w	r3, r0, r3
 8005d8e:	440b      	add	r3, r1
 8005d90:	121b      	asrs	r3, r3, #8
 8005d92:	b21b      	sxth	r3, r3
 8005d94:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d98:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	b21b      	sxth	r3, r3
 8005d9e:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005da0:	7dbb      	ldrb	r3, [r7, #22]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8005da6:	8a7a      	ldrh	r2, [r7, #18]
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	4611      	mov	r1, r2
 8005dac:	2001      	movs	r0, #1
 8005dae:	4798      	blx	r3
 8005db0:	e00f      	b.n	8005dd2 <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8005db2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e1c <_UG_PutChar+0x4c0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	88b9      	ldrh	r1, [r7, #4]
 8005dbc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005dbe:	440a      	add	r2, r1
 8005dc0:	b292      	uxth	r2, r2
 8005dc2:	b210      	sxth	r0, r2
 8005dc4:	8879      	ldrh	r1, [r7, #2]
 8005dc6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005dc8:	440a      	add	r2, r1
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	b211      	sxth	r1, r2
 8005dce:	8a7a      	ldrh	r2, [r7, #18]
 8005dd0:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8005dd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005dd8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005dda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	dbaf      	blt.n	8005d42 <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4a0d      	ldr	r2, [pc, #52]	@ (8005e1c <_UG_PutChar+0x4c0>)
 8005de6:	6812      	ldr	r2, [r2, #0]
 8005de8:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8005dec:	4611      	mov	r1, r2
 8005dee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005df2:	1a8a      	subs	r2, r1, r2
 8005df4:	4413      	add	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005df8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005dfe:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <_UG_PutChar+0x4c0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005e06:	461a      	mov	r2, r3
 8005e08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d396      	bcc.n	8005d3c <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 8005e0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3730      	adds	r7, #48	@ 0x30
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000b90 	.word	0x20000b90

08005e20 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b089      	sub	sp, #36	@ 0x24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8005e28:	4b57      	ldr	r3, [pc, #348]	@ (8005f88 <_UG_ProcessTouchData+0x168>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	88db      	ldrh	r3, [r3, #6]
 8005e2e:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8005e30:	4b55      	ldr	r3, [pc, #340]	@ (8005f88 <_UG_ProcessTouchData+0x168>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	891b      	ldrh	r3, [r3, #8]
 8005e36:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8005e38:	4b53      	ldr	r3, [pc, #332]	@ (8005f88 <_UG_ProcessTouchData+0x168>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	791b      	ldrb	r3, [r3, #4]
 8005e3e:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	83fb      	strh	r3, [r7, #30]
 8005e4a:	e090      	b.n	8005f6e <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	8bfb      	ldrh	r3, [r7, #30]
 8005e52:	015b      	lsls	r3, r3, #5
 8005e54:	4413      	add	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d179      	bne.n	8005f62 <_UG_ProcessTouchData+0x142>
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d074      	beq.n	8005f62 <_UG_ProcessTouchData+0x142>
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d06f      	beq.n	8005f62 <_UG_ProcessTouchData+0x142>
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d16a      	bne.n	8005f62 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d047      	beq.n	8005f22 <_UG_ProcessTouchData+0x102>
 8005e92:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d042      	beq.n	8005f22 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005e9c:	7f7b      	ldrb	r3, [r7, #29]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d107      	bne.n	8005eb6 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8005ea6:	7f7b      	ldrb	r3, [r7, #29]
 8005ea8:	f043 0305 	orr.w	r3, r3, #5
 8005eac:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8005eae:	7f7b      	ldrb	r3, [r7, #29]
 8005eb0:	f023 0318 	bic.w	r3, r3, #24
 8005eb4:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005eb6:	7f7b      	ldrb	r3, [r7, #29]
 8005eb8:	f023 0320 	bic.w	r3, r3, #32
 8005ebc:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ec4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	db25      	blt.n	8005f18 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005ed2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	dc1e      	bgt.n	8005f18 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005ee0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	db17      	blt.n	8005f18 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005eee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	dc10      	bgt.n	8005f18 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005ef6:	7f7b      	ldrb	r3, [r7, #29]
 8005ef8:	f043 0320 	orr.w	r3, r3, #32
 8005efc:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005efe:	7f7b      	ldrb	r3, [r7, #29]
 8005f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d107      	bne.n	8005f18 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8005f08:	7f7b      	ldrb	r3, [r7, #29]
 8005f0a:	f023 0304 	bic.w	r3, r3, #4
 8005f0e:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8005f10:	7f7b      	ldrb	r3, [r7, #29]
 8005f12:	f043 0302 	orr.w	r3, r3, #2
 8005f16:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8005f18:	7f7b      	ldrb	r3, [r7, #29]
 8005f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f1e:	777b      	strb	r3, [r7, #29]
 8005f20:	e01f      	b.n	8005f62 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005f22:	7f7b      	ldrb	r3, [r7, #29]
 8005f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01a      	beq.n	8005f62 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8005f2c:	7f7b      	ldrb	r3, [r7, #29]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8005f36:	7f7b      	ldrb	r3, [r7, #29]
 8005f38:	f043 0308 	orr.w	r3, r3, #8
 8005f3c:	777b      	strb	r3, [r7, #29]
 8005f3e:	e003      	b.n	8005f48 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8005f40:	7f7b      	ldrb	r3, [r7, #29]
 8005f42:	f043 0310 	orr.w	r3, r3, #16
 8005f46:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005f48:	7f7b      	ldrb	r3, [r7, #29]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8005f52:	7f7b      	ldrb	r3, [r7, #29]
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8005f5a:	7f7b      	ldrb	r3, [r7, #29]
 8005f5c:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 8005f60:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	7f7a      	ldrb	r2, [r7, #29]
 8005f66:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8005f68:	8bfb      	ldrh	r3, [r7, #30]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	83fb      	strh	r3, [r7, #30]
 8005f6e:	8bfa      	ldrh	r2, [r7, #30]
 8005f70:	8abb      	ldrh	r3, [r7, #20]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	f4ff af6a 	bcc.w	8005e4c <_UG_ProcessTouchData+0x2c>
   }
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	3724      	adds	r7, #36	@ 0x24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000b90 	.word	0x20000b90

08005f8c <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	82fb      	strh	r3, [r7, #22]
 8005f9e:	e035      	b.n	800600c <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	8afb      	ldrh	r3, [r7, #22]
 8005fa6:	015b      	lsls	r3, r3, #5
 8005fa8:	4413      	add	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d121      	bne.n	8006006 <_UG_UpdateObjects+0x7a>
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01c      	beq.n	8006006 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d004      	beq.n	8005fe0 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	6939      	ldr	r1, [r7, #16]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00d      	beq.n	8006006 <_UG_UpdateObjects+0x7a>
 8005fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da09      	bge.n	8006006 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	6939      	ldr	r1, [r7, #16]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006006:	8afb      	ldrh	r3, [r7, #22]
 8006008:	3301      	adds	r3, #1
 800600a:	82fb      	strh	r3, [r7, #22]
 800600c:	8afa      	ldrh	r2, [r7, #22]
 800600e:	8abb      	ldrh	r3, [r7, #20]
 8006010:	429a      	cmp	r2, r3
 8006012:	d3c5      	bcc.n	8005fa0 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006028:	4b22      	ldr	r3, [pc, #136]	@ (80060b4 <_UG_HandleEvents+0x94>)
 800602a:	2200      	movs	r2, #0
 800602c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 800602e:	4b21      	ldr	r3, [pc, #132]	@ (80060b4 <_UG_HandleEvents+0x94>)
 8006030:	2202      	movs	r2, #2
 8006032:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	82fb      	strh	r3, [r7, #22]
 800603e:	e02f      	b.n	80060a0 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	8afb      	ldrh	r3, [r7, #22]
 8006046:	015b      	lsls	r3, r3, #5
 8006048:	4413      	add	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d11e      	bne.n	800609a <_UG_HandleEvents+0x7a>
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d019      	beq.n	800609a <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	7e9b      	ldrb	r3, [r3, #26]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d015      	beq.n	800609a <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 800606e:	4a11      	ldr	r2, [pc, #68]	@ (80060b4 <_UG_HandleEvents+0x94>)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	7e1a      	ldrb	r2, [r3, #24]
 8006078:	4b0e      	ldr	r3, [pc, #56]	@ (80060b4 <_UG_HandleEvents+0x94>)
 800607a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	7e5a      	ldrb	r2, [r3, #25]
 8006080:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <_UG_HandleEvents+0x94>)
 8006082:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	7e9a      	ldrb	r2, [r3, #26]
 8006088:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <_UG_HandleEvents+0x94>)
 800608a:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	4808      	ldr	r0, [pc, #32]	@ (80060b4 <_UG_HandleEvents+0x94>)
 8006092:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2200      	movs	r2, #0
 8006098:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 800609a:	8afb      	ldrh	r3, [r7, #22]
 800609c:	3301      	adds	r3, #1
 800609e:	82fb      	strh	r3, [r7, #22]
 80060a0:	8afa      	ldrh	r2, [r7, #22]
 80060a2:	8abb      	ldrh	r3, [r7, #20]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3cb      	bcc.n	8006040 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000ba4 	.word	0x20000ba4

080060b8 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b08f      	sub	sp, #60	@ 0x3c
 80060bc:	af02      	add	r7, sp, #8
 80060be:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 812c 	beq.w	8006322 <_UG_PutText+0x26a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8127 	beq.w	8006322 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	89db      	ldrh	r3, [r3, #14]
 80060d8:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	895b      	ldrh	r3, [r3, #10]
 80060de:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	3302      	adds	r3, #2
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 80060ea:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80060ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	f2c0 8114 	blt.w	8006326 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	891b      	ldrh	r3, [r3, #8]
 8006102:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	899b      	ldrh	r3, [r3, #12]
 8006108:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	7d1b      	ldrb	r3, [r3, #20]
 800610e:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8adb      	ldrh	r3, [r3, #22]
 8006114:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8b1b      	ldrh	r3, [r3, #24]
 800611a:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fb94 	bl	8005858 <_UG_FontSelect>

   rc=1;
 8006130:	2301      	movs	r3, #1
 8006132:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006138:	4b80      	ldr	r3, [pc, #512]	@ (800633c <_UG_PutText+0x284>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006140:	2b00      	cmp	r3, #0
 8006142:	d107      	bne.n	8006154 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff f9c1 	bl	80054d0 <_UG_DecodeUTF8>
 800614e:	4603      	mov	r3, r0
 8006150:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006152:	e004      	b.n	800615e <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	60ba      	str	r2, [r7, #8]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 800615e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d006      	beq.n	8006172 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8006164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006166:	2b0a      	cmp	r3, #10
 8006168:	d1e6      	bne.n	8006138 <_UG_PutText+0x80>
 800616a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800616c:	3301      	adds	r3, #1
 800616e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006170:	e7e2      	b.n	8006138 <_UG_PutText+0x80>
     if(!chr) break;
 8006172:	bf00      	nop
   }

   yp = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006178:	7e7b      	ldrb	r3, [r7, #25]
 800617a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01f      	beq.n	80061c2 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8006182:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006184:	8c3b      	ldrh	r3, [r7, #32]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	b29b      	uxth	r3, r3
 800618a:	3301      	adds	r3, #1
 800618c:	b29b      	uxth	r3, r3
 800618e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 8006190:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006192:	8bfb      	ldrh	r3, [r7, #30]
 8006194:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006196:	fb11 f303 	smulbb	r3, r1, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	b29b      	uxth	r3, r3
 80061a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 80061a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80061a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b299      	uxth	r1, r3
 80061aa:	8abb      	ldrh	r3, [r7, #20]
 80061ac:	fb11 f303 	smulbb	r3, r1, r3
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 80061b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f2c0 80b4 	blt.w	800632a <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80061c2:	7e7b      	ldrb	r3, [r7, #25]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <_UG_PutText+0x11c>
 80061cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80061d0:	105b      	asrs	r3, r3, #1
 80061d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 80061d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80061d6:	8c3b      	ldrh	r3, [r7, #32]
 80061d8:	4413      	add	r3, r2
 80061da:	b29b      	uxth	r3, r3
 80061dc:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 80061de:	2300      	movs	r3, #0
 80061e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	60bb      	str	r3, [r7, #8]
      wl = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80061ea:	4b54      	ldr	r3, [pc, #336]	@ (800633c <_UG_PutText+0x284>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d107      	bne.n	8006206 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 80061f6:	f107 0308 	add.w	r3, r7, #8
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff f968 	bl	80054d0 <_UG_DecodeUTF8>
 8006200:	4603      	mov	r3, r0
 8006202:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006204:	e004      	b.n	8006210 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	60ba      	str	r2, [r7, #8]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8006210:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01b      	beq.n	800624e <_UG_PutText+0x196>
 8006216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006218:	2b0a      	cmp	r3, #10
 800621a:	d018      	beq.n	800624e <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 800621c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff f9cd 	bl	80055c0 <_UG_GetCharData>
 8006226:	4603      	mov	r3, r0
 8006228:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 800622a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d00a      	beq.n	800624a <_UG_PutText+0x192>
         sl++;
 8006234:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006236:	3301      	adds	r3, #1
 8006238:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 800623a:	8a7a      	ldrh	r2, [r7, #18]
 800623c:	8afb      	ldrh	r3, [r7, #22]
 800623e:	4413      	add	r3, r2
 8006240:	b29a      	uxth	r2, r3
 8006242:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006244:	4413      	add	r3, r2
 8006246:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006248:	e7cf      	b.n	80061ea <_UG_PutText+0x132>
         if (w == -1){continue;}
 800624a:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800624c:	e7cd      	b.n	80061ea <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 800624e:	8afb      	ldrh	r3, [r7, #22]
 8006250:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 8006256:	8b7a      	ldrh	r2, [r7, #26]
 8006258:	8bbb      	ldrh	r3, [r7, #28]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	b29b      	uxth	r3, r3
 800625e:	3301      	adds	r3, #1
 8006260:	b29b      	uxth	r3, r3
 8006262:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 8006264:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006266:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	b29b      	uxth	r3, r3
 800626c:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 800626e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	db5b      	blt.n	800632e <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006276:	7e7b      	ldrb	r3, [r7, #25]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <_UG_PutText+0x1ce>
 8006280:	2300      	movs	r3, #0
 8006282:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006284:	e008      	b.n	8006298 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006286:	7e7b      	ldrb	r3, [r7, #25]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <_UG_PutText+0x1e0>
 8006290:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8006294:	105b      	asrs	r3, r3, #1
 8006296:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 8006298:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800629a:	8bbb      	ldrh	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	b29b      	uxth	r3, r3
 80062a0:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80062a2:	4b26      	ldr	r3, [pc, #152]	@ (800633c <_UG_PutText+0x284>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d107      	bne.n	80062be <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80062ae:	f107 030c 	add.w	r3, r7, #12
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff f90c 	bl	80054d0 <_UG_DecodeUTF8>
 80062b8:	4603      	mov	r3, r0
 80062ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80062bc:	e004      	b.n	80062c8 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	60fa      	str	r2, [r7, #12]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 80062c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d031      	beq.n	8006332 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 80062ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062d0:	2b0a      	cmp	r3, #10
 80062d2:	d01c      	beq.n	800630e <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8a1c      	ldrh	r4, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8a5b      	ldrh	r3, [r3, #18]
 80062dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80062e0:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 80062e4:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	4623      	mov	r3, r4
 80062ea:	f7ff fb37 	bl	800595c <_UG_PutChar>
 80062ee:	4603      	mov	r3, r0
 80062f0:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 80062f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d0d2      	beq.n	80062a2 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 80062fc:	8a7a      	ldrh	r2, [r7, #18]
 80062fe:	8afb      	ldrh	r3, [r7, #22]
 8006300:	4413      	add	r3, r2
 8006302:	b29a      	uxth	r2, r3
 8006304:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006306:	4413      	add	r3, r2
 8006308:	b29b      	uxth	r3, r3
 800630a:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800630c:	e7c9      	b.n	80062a2 <_UG_PutText+0x1ea>
           break;
 800630e:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8006310:	8bfa      	ldrh	r2, [r7, #30]
 8006312:	8abb      	ldrh	r3, [r7, #20]
 8006314:	4413      	add	r3, r2
 8006316:	b29a      	uxth	r2, r3
 8006318:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800631a:	4413      	add	r3, r2
 800631c:	b29b      	uxth	r3, r3
 800631e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 8006320:	e75d      	b.n	80061de <_UG_PutText+0x126>
     return;
 8006322:	bf00      	nop
 8006324:	e006      	b.n	8006334 <_UG_PutText+0x27c>
     return;
 8006326:	bf00      	nop
 8006328:	e004      	b.n	8006334 <_UG_PutText+0x27c>
        return;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <_UG_PutText+0x27c>
           return;
 8006332:	bf00      	nop
   }
}
 8006334:	3734      	adds	r7, #52	@ 0x34
 8006336:	46bd      	mov	sp, r7
 8006338:	bd90      	pop	{r4, r7, pc}
 800633a:	bf00      	nop
 800633c:	20000b90 	.word	0x20000b90

08006340 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8006340:	b5b0      	push	{r4, r5, r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af02      	add	r7, sp, #8
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	461a      	mov	r2, r3
 800634e:	4623      	mov	r3, r4
 8006350:	80fb      	strh	r3, [r7, #6]
 8006352:	4603      	mov	r3, r0
 8006354:	80bb      	strh	r3, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	807b      	strh	r3, [r7, #2]
 800635a:	4613      	mov	r3, r2
 800635c:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	3b01      	subs	r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	b21c      	sxth	r4, r3
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	1c9a      	adds	r2, r3, #2
 800636a:	61ba      	str	r2, [r7, #24]
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006372:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006376:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	4622      	mov	r2, r4
 8006380:	f7fe fe94 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8006384:	88bb      	ldrh	r3, [r7, #4]
 8006386:	3301      	adds	r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	b219      	sxth	r1, r3
 800638c:	883b      	ldrh	r3, [r7, #0]
 800638e:	3b01      	subs	r3, #1
 8006390:	b29b      	uxth	r3, r3
 8006392:	b21c      	sxth	r4, r3
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	1c9a      	adds	r2, r3, #2
 8006398:	61ba      	str	r2, [r7, #24]
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4623      	mov	r3, r4
 80063a8:	f7fe fe80 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	1c9a      	adds	r2, r3, #2
 80063b0:	61ba      	str	r2, [r7, #24]
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80063b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80063bc:	f9b7 1000 	ldrsh.w	r1, [r7]
 80063c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	4623      	mov	r3, r4
 80063c8:	f7fe fe70 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80063cc:	883b      	ldrh	r3, [r7, #0]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	b21c      	sxth	r4, r3
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	1c9a      	adds	r2, r3, #2
 80063d8:	61ba      	str	r2, [r7, #24]
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80063e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80063e4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	4623      	mov	r3, r4
 80063ec:	f7fe fe5e 	bl	80050ac <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	3301      	adds	r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	b218      	sxth	r0, r3
 80063f8:	88bb      	ldrh	r3, [r7, #4]
 80063fa:	3301      	adds	r3, #1
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	b219      	sxth	r1, r3
 8006400:	887b      	ldrh	r3, [r7, #2]
 8006402:	3b02      	subs	r3, #2
 8006404:	b29b      	uxth	r3, r3
 8006406:	b21c      	sxth	r4, r3
 8006408:	88bb      	ldrh	r3, [r7, #4]
 800640a:	3301      	adds	r3, #1
 800640c:	b29b      	uxth	r3, r3
 800640e:	b21d      	sxth	r5, r3
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	61ba      	str	r2, [r7, #24]
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	462b      	mov	r3, r5
 800641c:	4622      	mov	r2, r4
 800641e:	f7fe fe45 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	3301      	adds	r3, #1
 8006426:	b29b      	uxth	r3, r3
 8006428:	b218      	sxth	r0, r3
 800642a:	88bb      	ldrh	r3, [r7, #4]
 800642c:	3302      	adds	r3, #2
 800642e:	b29b      	uxth	r3, r3
 8006430:	b219      	sxth	r1, r3
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	3301      	adds	r3, #1
 8006436:	b29b      	uxth	r3, r3
 8006438:	b21c      	sxth	r4, r3
 800643a:	883b      	ldrh	r3, [r7, #0]
 800643c:	3b02      	subs	r3, #2
 800643e:	b29b      	uxth	r3, r3
 8006440:	b21d      	sxth	r5, r3
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	1c9a      	adds	r2, r3, #2
 8006446:	61ba      	str	r2, [r7, #24]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	462b      	mov	r3, r5
 800644e:	4622      	mov	r2, r4
 8006450:	f7fe fe2c 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	3301      	adds	r3, #1
 8006458:	b29b      	uxth	r3, r3
 800645a:	b218      	sxth	r0, r3
 800645c:	883b      	ldrh	r3, [r7, #0]
 800645e:	3b01      	subs	r3, #1
 8006460:	b29b      	uxth	r3, r3
 8006462:	b219      	sxth	r1, r3
 8006464:	887b      	ldrh	r3, [r7, #2]
 8006466:	3b01      	subs	r3, #1
 8006468:	b29b      	uxth	r3, r3
 800646a:	b21c      	sxth	r4, r3
 800646c:	883b      	ldrh	r3, [r7, #0]
 800646e:	3b01      	subs	r3, #1
 8006470:	b29b      	uxth	r3, r3
 8006472:	b21d      	sxth	r5, r3
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	1c9a      	adds	r2, r3, #2
 8006478:	61ba      	str	r2, [r7, #24]
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	462b      	mov	r3, r5
 8006480:	4622      	mov	r2, r4
 8006482:	f7fe fe13 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8006486:	887b      	ldrh	r3, [r7, #2]
 8006488:	3b01      	subs	r3, #1
 800648a:	b29b      	uxth	r3, r3
 800648c:	b218      	sxth	r0, r3
 800648e:	88bb      	ldrh	r3, [r7, #4]
 8006490:	3301      	adds	r3, #1
 8006492:	b29b      	uxth	r3, r3
 8006494:	b219      	sxth	r1, r3
 8006496:	887b      	ldrh	r3, [r7, #2]
 8006498:	3b01      	subs	r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	b21c      	sxth	r4, r3
 800649e:	883b      	ldrh	r3, [r7, #0]
 80064a0:	3b02      	subs	r3, #2
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	b21d      	sxth	r5, r3
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	1c9a      	adds	r2, r3, #2
 80064aa:	61ba      	str	r2, [r7, #24]
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	462b      	mov	r3, r5
 80064b2:	4622      	mov	r2, r4
 80064b4:	f7fe fdfa 	bl	80050ac <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	3302      	adds	r3, #2
 80064bc:	b29b      	uxth	r3, r3
 80064be:	b218      	sxth	r0, r3
 80064c0:	88bb      	ldrh	r3, [r7, #4]
 80064c2:	3302      	adds	r3, #2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	b219      	sxth	r1, r3
 80064c8:	887b      	ldrh	r3, [r7, #2]
 80064ca:	3b03      	subs	r3, #3
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	b21c      	sxth	r4, r3
 80064d0:	88bb      	ldrh	r3, [r7, #4]
 80064d2:	3302      	adds	r3, #2
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	b21d      	sxth	r5, r3
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	1c9a      	adds	r2, r3, #2
 80064dc:	61ba      	str	r2, [r7, #24]
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	462b      	mov	r3, r5
 80064e4:	4622      	mov	r2, r4
 80064e6:	f7fe fde1 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	3302      	adds	r3, #2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	b218      	sxth	r0, r3
 80064f2:	88bb      	ldrh	r3, [r7, #4]
 80064f4:	3303      	adds	r3, #3
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	b219      	sxth	r1, r3
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	3302      	adds	r3, #2
 80064fe:	b29b      	uxth	r3, r3
 8006500:	b21c      	sxth	r4, r3
 8006502:	883b      	ldrh	r3, [r7, #0]
 8006504:	3b03      	subs	r3, #3
 8006506:	b29b      	uxth	r3, r3
 8006508:	b21d      	sxth	r5, r3
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	1c9a      	adds	r2, r3, #2
 800650e:	61ba      	str	r2, [r7, #24]
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	462b      	mov	r3, r5
 8006516:	4622      	mov	r2, r4
 8006518:	f7fe fdc8 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	3302      	adds	r3, #2
 8006520:	b29b      	uxth	r3, r3
 8006522:	b218      	sxth	r0, r3
 8006524:	883b      	ldrh	r3, [r7, #0]
 8006526:	3b02      	subs	r3, #2
 8006528:	b29b      	uxth	r3, r3
 800652a:	b219      	sxth	r1, r3
 800652c:	887b      	ldrh	r3, [r7, #2]
 800652e:	3b02      	subs	r3, #2
 8006530:	b29b      	uxth	r3, r3
 8006532:	b21c      	sxth	r4, r3
 8006534:	883b      	ldrh	r3, [r7, #0]
 8006536:	3b02      	subs	r3, #2
 8006538:	b29b      	uxth	r3, r3
 800653a:	b21d      	sxth	r5, r3
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	61ba      	str	r2, [r7, #24]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	462b      	mov	r3, r5
 8006548:	4622      	mov	r2, r4
 800654a:	f7fe fdaf 	bl	80050ac <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 800654e:	887b      	ldrh	r3, [r7, #2]
 8006550:	3b02      	subs	r3, #2
 8006552:	b29b      	uxth	r3, r3
 8006554:	b218      	sxth	r0, r3
 8006556:	88bb      	ldrh	r3, [r7, #4]
 8006558:	3302      	adds	r3, #2
 800655a:	b29b      	uxth	r3, r3
 800655c:	b219      	sxth	r1, r3
 800655e:	887b      	ldrh	r3, [r7, #2]
 8006560:	3b02      	subs	r3, #2
 8006562:	b29b      	uxth	r3, r3
 8006564:	b21a      	sxth	r2, r3
 8006566:	883b      	ldrh	r3, [r7, #0]
 8006568:	3b03      	subs	r3, #3
 800656a:	b29b      	uxth	r3, r3
 800656c:	b21c      	sxth	r4, r3
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	4623      	mov	r3, r4
 8006576:	f7fe fd99 	bl	80050ac <UG_DrawLine>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006584 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	6039      	str	r1, [r7, #0]
 800658e:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	2b03      	cmp	r3, #3
 8006594:	d810      	bhi.n	80065b8 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8006596:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <UG_DriverRegister+0x40>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	330a      	adds	r3, #10
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80065a6:	4b07      	ldr	r3, [pc, #28]	@ (80065c4 <UG_DriverRegister+0x40>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	330a      	adds	r3, #10
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4413      	add	r3, r2
 80065b2:	2203      	movs	r2, #3
 80065b4:	721a      	strb	r2, [r3, #8]
 80065b6:	e000      	b.n	80065ba <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80065b8:	bf00      	nop
}
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000b90 	.word	0x20000b90

080065c8 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80065ce:	4b5e      	ldr	r3, [pc, #376]	@ (8006748 <UG_Update+0x180>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <UG_Update+0x2c>
 80065de:	4b5a      	ldr	r3, [pc, #360]	@ (8006748 <UG_Update+0x180>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 80065e6:	4b58      	ldr	r3, [pc, #352]	@ (8006748 <UG_Update+0x180>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 80065f4:	4b54      	ldr	r3, [pc, #336]	@ (8006748 <UG_Update+0x180>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	4b53      	ldr	r3, [pc, #332]	@ (8006748 <UG_Update+0x180>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	429a      	cmp	r2, r3
 8006602:	d071      	beq.n	80066e8 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8006604:	4b50      	ldr	r3, [pc, #320]	@ (8006748 <UG_Update+0x180>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d06c      	beq.n	80066e8 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 800660e:	4b4e      	ldr	r3, [pc, #312]	@ (8006748 <UG_Update+0x180>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b4d      	ldr	r3, [pc, #308]	@ (8006748 <UG_Update+0x180>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6912      	ldr	r2, [r2, #16]
 8006618:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 800661a:	4b4b      	ldr	r3, [pc, #300]	@ (8006748 <UG_Update+0x180>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b4a      	ldr	r3, [pc, #296]	@ (8006748 <UG_Update+0x180>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68d2      	ldr	r2, [r2, #12]
 8006624:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8006626:	4b48      	ldr	r3, [pc, #288]	@ (8006748 <UG_Update+0x180>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d045      	beq.n	80066bc <UG_Update+0xf4>
 8006630:	4b45      	ldr	r3, [pc, #276]	@ (8006748 <UG_Update+0x180>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	7d9b      	ldrb	r3, [r3, #22]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d03d      	beq.n	80066bc <UG_Update+0xf4>
 8006640:	4b41      	ldr	r3, [pc, #260]	@ (8006748 <UG_Update+0x180>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	7a1b      	ldrb	r3, [r3, #8]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d035      	beq.n	80066bc <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006650:	4b3d      	ldr	r3, [pc, #244]	@ (8006748 <UG_Update+0x180>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800665a:	4b3b      	ldr	r3, [pc, #236]	@ (8006748 <UG_Update+0x180>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006664:	429a      	cmp	r2, r3
 8006666:	d123      	bne.n	80066b0 <UG_Update+0xe8>
 8006668:	4b37      	ldr	r3, [pc, #220]	@ (8006748 <UG_Update+0x180>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006672:	4b35      	ldr	r3, [pc, #212]	@ (8006748 <UG_Update+0x180>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800667c:	429a      	cmp	r2, r3
 800667e:	d117      	bne.n	80066b0 <UG_Update+0xe8>
 8006680:	4b31      	ldr	r3, [pc, #196]	@ (8006748 <UG_Update+0x180>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800668a:	4b2f      	ldr	r3, [pc, #188]	@ (8006748 <UG_Update+0x180>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006694:	429a      	cmp	r2, r3
 8006696:	d10b      	bne.n	80066b0 <UG_Update+0xe8>
 8006698:	4b2b      	ldr	r3, [pc, #172]	@ (8006748 <UG_Update+0x180>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80066a2:	4b29      	ldr	r3, [pc, #164]	@ (8006748 <UG_Update+0x180>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d005      	beq.n	80066bc <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80066b0:	4b25      	ldr	r3, [pc, #148]	@ (8006748 <UG_Update+0x180>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f848 	bl	800674c <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80066bc:	4b22      	ldr	r3, [pc, #136]	@ (8006748 <UG_Update+0x180>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	7a1a      	ldrb	r2, [r3, #8]
 80066c4:	4b20      	ldr	r3, [pc, #128]	@ (8006748 <UG_Update+0x180>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80066d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <UG_Update+0x180>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	7a1a      	ldrb	r2, [r3, #8]
 80066da:	4b1b      	ldr	r3, [pc, #108]	@ (8006748 <UG_Update+0x180>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80066e8:	4b17      	ldr	r3, [pc, #92]	@ (8006748 <UG_Update+0x180>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d01b      	beq.n	800672a <UG_Update+0x162>
   {
      wnd = gui->active_window;
 80066f2:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <UG_Update+0x180>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7a1b      	ldrb	r3, [r3, #8]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8c8 	bl	800689c <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7a1b      	ldrb	r3, [r3, #8]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff fb81 	bl	8005e20 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7ff fc34 	bl	8005f8c <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff fc7b 	bl	8006020 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 800672a:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <UG_Update+0x180>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <UG_Update+0x178>
     gui->device->flush();
 8006736:	4b04      	ldr	r3, [pc, #16]	@ (8006748 <UG_Update+0x180>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	4798      	blx	r3
   }
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20000b90 	.word	0x20000b90

0800674c <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b08f      	sub	sp, #60	@ 0x3c
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8098 	beq.w	800688c <_UG_WindowDrawTitle+0x140>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7a1b      	ldrb	r3, [r3, #8]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8091 	beq.w	800688c <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	89db      	ldrh	r3, [r3, #14]
 800676e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8a1b      	ldrh	r3, [r3, #16]
 8006774:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	8a5b      	ldrh	r3, [r3, #18]
 800677a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8a9b      	ldrh	r3, [r3, #20]
 8006780:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7d9b      	ldrb	r3, [r3, #22]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00f      	beq.n	80067ae <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 800678e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006790:	3303      	adds	r3, #3
 8006792:	b29b      	uxth	r3, r3
 8006794:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 8006796:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006798:	3303      	adds	r3, #3
 800679a:	b29b      	uxth	r3, r3
 800679c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 800679e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80067a0:	3b03      	subs	r3, #3
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 80067a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80067a8:	3b03      	subs	r3, #3
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80067ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006898 <_UG_WindowDrawTitle+0x14c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d106      	bne.n	80067c8 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067be:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067c4:	83bb      	strh	r3, [r7, #28]
 80067c6:	e005      	b.n	80067d4 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067cc:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d2:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067da:	461a      	mov	r2, r3
 80067dc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80067de:	4413      	add	r3, r2
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	b21c      	sxth	r4, r3
 80067e8:	8bfb      	ldrh	r3, [r7, #30]
 80067ea:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80067ee:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80067f2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4623      	mov	r3, r4
 80067fa:	f7fe fc01 	bl	8005000 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 800680a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800680c:	3303      	adds	r3, #3
 800680e:	b29b      	uxth	r3, r3
 8006810:	b21b      	sxth	r3, r3
 8006812:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8006814:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006816:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8006818:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800681a:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006822:	461a      	mov	r2, r3
 8006824:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006826:	4413      	add	r3, r2
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29b      	uxth	r3, r3
 800682e:	b21b      	sxth	r3, r3
 8006830:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006838:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8006842:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 800684a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 800684c:	f107 030c 	add.w	r3, r7, #12
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff fc31 	bl	80060b8 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800685c:	461a      	mov	r2, r3
 800685e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006860:	4413      	add	r3, r2
 8006862:	b29b      	uxth	r3, r3
 8006864:	b219      	sxth	r1, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800686c:	461a      	mov	r2, r3
 800686e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006870:	4413      	add	r3, r2
 8006872:	b29b      	uxth	r3, r3
 8006874:	b21b      	sxth	r3, r3
 8006876:	f649 5413 	movw	r4, #40211	@ 0x9d13
 800687a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800687e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8006882:	9400      	str	r4, [sp, #0]
 8006884:	f7fe fc12 	bl	80050ac <UG_DrawLine>
      return UG_RESULT_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	e001      	b.n	8006890 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 800688c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006890:	4618      	mov	r0, r3
 8006892:	3734      	adds	r7, #52	@ 0x34
 8006894:	46bd      	mov	sp, r7
 8006896:	bd90      	pop	{r4, r7, pc}
 8006898:	20000b90 	.word	0x20000b90

0800689c <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 800689c:	b590      	push	{r4, r7, lr}
 800689e:	b089      	sub	sp, #36	@ 0x24
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	89db      	ldrh	r3, [r3, #14]
 80068a8:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	8a1b      	ldrh	r3, [r3, #16]
 80068ae:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8a5b      	ldrh	r3, [r3, #18]
 80068b4:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8a9b      	ldrh	r3, [r3, #20]
 80068ba:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7a1b      	ldrb	r3, [r3, #8]
 80068c0:	f023 0320 	bic.w	r3, r3, #32
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7a1b      	ldrb	r3, [r3, #8]
 80068ce:	f003 0308 	and.w	r3, r3, #8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 8084 	beq.w	80069e0 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	7d9b      	ldrb	r3, [r3, #22]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d021      	beq.n	8006928 <_UG_WindowUpdate+0x8c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	7a1b      	ldrb	r3, [r3, #8]
 80068e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11b      	bne.n	8006928 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80068f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80068f8:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80068fc:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006900:	4c43      	ldr	r4, [pc, #268]	@ (8006a10 <_UG_WindowUpdate+0x174>)
 8006902:	9400      	str	r4, [sp, #0]
 8006904:	f7ff fd1c 	bl	8006340 <_UG_DrawObjectFrame>
         xs+=3;
 8006908:	8abb      	ldrh	r3, [r7, #20]
 800690a:	3303      	adds	r3, #3
 800690c:	b29b      	uxth	r3, r3
 800690e:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8006910:	8a7b      	ldrh	r3, [r7, #18]
 8006912:	3303      	adds	r3, #3
 8006914:	b29b      	uxth	r3, r3
 8006916:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8006918:	8a3b      	ldrh	r3, [r7, #16]
 800691a:	3b03      	subs	r3, #3
 800691c:	b29b      	uxth	r3, r3
 800691e:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8006920:	89fb      	ldrh	r3, [r7, #14]
 8006922:	3b03      	subs	r3, #3
 8006924:	b29b      	uxth	r3, r3
 8006926:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	7d9b      	ldrb	r3, [r3, #22]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01a      	beq.n	800696a <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ff09 	bl	800674c <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006940:	461a      	mov	r2, r3
 8006942:	8a7b      	ldrh	r3, [r7, #18]
 8006944:	4413      	add	r3, r2
 8006946:	b29b      	uxth	r3, r3
 8006948:	3301      	adds	r3, #1
 800694a:	b29b      	uxth	r3, r3
 800694c:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	7a1b      	ldrb	r3, [r3, #8]
 8006952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	7a1b      	ldrb	r3, [r3, #8]
 800695e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006962:	b2da      	uxtb	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	721a      	strb	r2, [r3, #8]
            return;
 8006968:	e04e      	b.n	8006a08 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	899b      	ldrh	r3, [r3, #12]
 800696e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8006972:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006976:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800697a:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	4623      	mov	r3, r4
 8006982:	f7fe fb3d 	bl	8005000 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 800698c:	2300      	movs	r3, #0
 800698e:	82fb      	strh	r3, [r7, #22]
 8006990:	e021      	b.n	80069d6 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	8afb      	ldrh	r3, [r7, #22]
 8006998:	015b      	lsls	r3, r3, #5
 800699a:	4413      	add	r3, r2
 800699c:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d112      	bne.n	80069d0 <_UG_WindowUpdate+0x134>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00c      	beq.n	80069d0 <_UG_WindowUpdate+0x134>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <_UG_WindowUpdate+0x134>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80069d0:	8afb      	ldrh	r3, [r7, #22]
 80069d2:	3301      	adds	r3, #1
 80069d4:	82fb      	strh	r3, [r7, #22]
 80069d6:	8afa      	ldrh	r2, [r7, #22]
 80069d8:	89bb      	ldrh	r3, [r7, #12]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d3d9      	bcc.n	8006992 <_UG_WindowUpdate+0xf6>
 80069de:	e013      	b.n	8006a08 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80069f8:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <_UG_WindowUpdate+0x178>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	4623      	mov	r3, r4
 8006a04:	f7fe fafc 	bl	8005000 <UG_FillFrame>
   }
}
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd90      	pop	{r4, r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	08018170 	.word	0x08018170
 8006a14:	20000b90 	.word	0x20000b90

08006a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006a50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006a1c:	f7fe f9f8 	bl	8004e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a20:	480c      	ldr	r0, [pc, #48]	@ (8006a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8006a22:	490d      	ldr	r1, [pc, #52]	@ (8006a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a24:	4a0d      	ldr	r2, [pc, #52]	@ (8006a5c <LoopForever+0xe>)
  movs r3, #0
 8006a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a28:	e002      	b.n	8006a30 <LoopCopyDataInit>

08006a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a2e:	3304      	adds	r3, #4

08006a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a34:	d3f9      	bcc.n	8006a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a36:	4a0a      	ldr	r2, [pc, #40]	@ (8006a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a38:	4c0a      	ldr	r4, [pc, #40]	@ (8006a64 <LoopForever+0x16>)
  movs r3, #0
 8006a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a3c:	e001      	b.n	8006a42 <LoopFillZerobss>

08006a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a40:	3204      	adds	r2, #4

08006a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a44:	d3fb      	bcc.n	8006a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006a46:	f00a f947 	bl	8010cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006a4a:	f7fb fdd5 	bl	80025f8 <main>

08006a4e <LoopForever>:

LoopForever:
    b LoopForever
 8006a4e:	e7fe      	b.n	8006a4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006a50:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8006a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a58:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8006a5c:	08018530 	.word	0x08018530
  ldr r2, =_sbss
 8006a60:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8006a64:	20000cfc 	.word	0x20000cfc

08006a68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006a68:	e7fe      	b.n	8006a68 <ADC1_IRQHandler>

08006a6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a74:	2003      	movs	r0, #3
 8006a76:	f001 f9dd 	bl	8007e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f000 f80e 	bl	8006a9c <HAL_InitTick>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	71fb      	strb	r3, [r7, #7]
 8006a8a:	e001      	b.n	8006a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a8c:	f7fd f942 	bl	8003d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a90:	79fb      	ldrb	r3, [r7, #7]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006aa8:	4b17      	ldr	r3, [pc, #92]	@ (8006b08 <HAL_InitTick+0x6c>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d023      	beq.n	8006af8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006ab0:	4b16      	ldr	r3, [pc, #88]	@ (8006b0c <HAL_InitTick+0x70>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	4b14      	ldr	r3, [pc, #80]	@ (8006b08 <HAL_InitTick+0x6c>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 f9e9 	bl	8007e9e <HAL_SYSTICK_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10f      	bne.n	8006af2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b0f      	cmp	r3, #15
 8006ad6:	d809      	bhi.n	8006aec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ad8:	2200      	movs	r2, #0
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	f001 f9b3 	bl	8007e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8006b10 <HAL_InitTick+0x74>)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e007      	b.n	8006afc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e004      	b.n	8006afc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	73fb      	strb	r3, [r7, #15]
 8006af6:	e001      	b.n	8006afc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	2000002c 	.word	0x2000002c
 8006b0c:	20000024 	.word	0x20000024
 8006b10:	20000028 	.word	0x20000028

08006b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <HAL_IncTick+0x20>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <HAL_IncTick+0x24>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4413      	add	r3, r2
 8006b24:	4a04      	ldr	r2, [pc, #16]	@ (8006b38 <HAL_IncTick+0x24>)
 8006b26:	6013      	str	r3, [r2, #0]
}
 8006b28:	bf00      	nop
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	2000002c 	.word	0x2000002c
 8006b38:	20000bac 	.word	0x20000bac

08006b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8006b40:	4b03      	ldr	r3, [pc, #12]	@ (8006b50 <HAL_GetTick+0x14>)
 8006b42:	681b      	ldr	r3, [r3, #0]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000bac 	.word	0x20000bac

08006b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b5c:	f7ff ffee 	bl	8006b3c <HAL_GetTick>
 8006b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d005      	beq.n	8006b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b98 <HAL_Delay+0x44>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b7a:	bf00      	nop
 8006b7c:	f7ff ffde 	bl	8006b3c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d8f7      	bhi.n	8006b7c <HAL_Delay+0x28>
  {
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	2000002c 	.word	0x2000002c

08006b9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	609a      	str	r2, [r3, #8]
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	609a      	str	r2, [r3, #8]
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3360      	adds	r3, #96	@ 0x60
 8006c16:	461a      	mov	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <LL_ADC_SetOffset+0x44>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	03fff000 	.word	0x03fff000

08006c4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3360      	adds	r3, #96	@ 0x60
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3360      	adds	r3, #96	@ 0x60
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	615a      	str	r2, [r3, #20]
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3330      	adds	r3, #48	@ 0x30
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	0a1b      	lsrs	r3, r3, #8
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	f003 030c 	and.w	r3, r3, #12
 8006cf0:	4413      	add	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	211f      	movs	r1, #31
 8006d00:	fa01 f303 	lsl.w	r3, r1, r3
 8006d04:	43db      	mvns	r3, r3
 8006d06:	401a      	ands	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0e9b      	lsrs	r3, r3, #26
 8006d0c:	f003 011f 	and.w	r1, r3, #31
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	0e5b      	lsrs	r3, r3, #25
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	4413      	add	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	0d1b      	lsrs	r3, r3, #20
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2107      	movs	r1, #7
 8006d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	401a      	ands	r2, r3
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	0d1b      	lsrs	r3, r3, #20
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	431a      	orrs	r2, r3
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
	...

08006d84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	401a      	ands	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f003 0318 	and.w	r3, r3, #24
 8006da6:	4908      	ldr	r1, [pc, #32]	@ (8006dc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006da8:	40d9      	lsrs	r1, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	400b      	ands	r3, r1
 8006dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db2:	431a      	orrs	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006dba:	bf00      	nop
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	0007ffff 	.word	0x0007ffff

08006dcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006ddc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6093      	str	r3, [r2, #8]
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e04:	d101      	bne.n	8006e0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006e28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e54:	d101      	bne.n	8006e5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <LL_ADC_IsEnabled+0x18>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <LL_ADC_IsEnabled+0x1a>
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d101      	bne.n	8006ea6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d101      	bne.n	8006ecc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e129      	b.n	800714a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fc ff29 	bl	8003d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff ff67 	bl	8006df0 <LL_ADC_IsDeepPowerDownEnabled>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff ff4d 	bl	8006dcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff ff82 	bl	8006e40 <LL_ADC_IsInternalRegulatorEnabled>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d115      	bne.n	8006f6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff ff66 	bl	8006e18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f4c:	4b81      	ldr	r3, [pc, #516]	@ (8007154 <HAL_ADC_Init+0x278>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	099b      	lsrs	r3, r3, #6
 8006f52:	4a81      	ldr	r2, [pc, #516]	@ (8007158 <HAL_ADC_Init+0x27c>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	099b      	lsrs	r3, r3, #6
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006f60:	e002      	b.n	8006f68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f9      	bne.n	8006f62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ff64 	bl	8006e40 <LL_ADC_IsInternalRegulatorEnabled>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10d      	bne.n	8006f9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f82:	f043 0210 	orr.w	r2, r3, #16
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f8e:	f043 0201 	orr.w	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff ff75 	bl	8006e8e <LL_ADC_REG_IsConversionOngoing>
 8006fa4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f040 80c2 	bne.w	8007138 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f040 80be 	bne.w	8007138 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006fc4:	f043 0202 	orr.w	r2, r3, #2
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff ff49 	bl	8006e68 <LL_ADC_IsEnabled>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fdc:	485f      	ldr	r0, [pc, #380]	@ (800715c <HAL_ADC_Init+0x280>)
 8006fde:	f7ff ff43 	bl	8006e68 <LL_ADC_IsEnabled>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4619      	mov	r1, r3
 8006fee:	485c      	ldr	r0, [pc, #368]	@ (8007160 <HAL_ADC_Init+0x284>)
 8006ff0:	f7ff fdd4 	bl	8006b9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	7e5b      	ldrb	r3, [r3, #25]
 8006ff8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ffe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007004:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800700a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007012:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007014:	4313      	orrs	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d106      	bne.n	8007030 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007026:	3b01      	subs	r3, #1
 8007028:	045b      	lsls	r3, r3, #17
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4313      	orrs	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	4313      	orrs	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	4b44      	ldr	r3, [pc, #272]	@ (8007164 <HAL_ADC_Init+0x288>)
 8007054:	4013      	ands	r3, r2
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	69b9      	ldr	r1, [r7, #24]
 800705c:	430b      	orrs	r3, r1
 800705e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff ff25 	bl	8006eb4 <LL_ADC_INJ_IsConversionOngoing>
 800706a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d140      	bne.n	80070f4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d13d      	bne.n	80070f4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7e1b      	ldrb	r3, [r3, #24]
 8007080:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007082:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800708a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800708c:	4313      	orrs	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800709a:	f023 0306 	bic.w	r3, r3, #6
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	69b9      	ldr	r1, [r7, #24]
 80070a4:	430b      	orrs	r3, r1
 80070a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d118      	bne.n	80070e4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80070bc:	f023 0304 	bic.w	r3, r3, #4
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80070c8:	4311      	orrs	r1, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80070ce:	4311      	orrs	r1, r2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80070d4:	430a      	orrs	r2, r1
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f042 0201 	orr.w	r2, r2, #1
 80070e0:	611a      	str	r2, [r3, #16]
 80070e2:	e007      	b.n	80070f4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0201 	bic.w	r2, r2, #1
 80070f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d10c      	bne.n	8007116 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007102:	f023 010f 	bic.w	r1, r3, #15
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	1e5a      	subs	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30
 8007114:	e007      	b.n	8007126 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 020f 	bic.w	r2, r2, #15
 8007124:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	f043 0201 	orr.w	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	659a      	str	r2, [r3, #88]	@ 0x58
 8007136:	e007      	b.n	8007148 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713c:	f043 0210 	orr.w	r2, r3, #16
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007148:	7ffb      	ldrb	r3, [r7, #31]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000024 	.word	0x20000024
 8007158:	053e2d63 	.word	0x053e2d63
 800715c:	50040000 	.word	0x50040000
 8007160:	50040300 	.word	0x50040300
 8007164:	fff0c007 	.word	0xfff0c007

08007168 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b0b6      	sub	sp, #216	@ 0xd8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007178:	2300      	movs	r3, #0
 800717a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_ADC_ConfigChannel+0x22>
 8007186:	2302      	movs	r3, #2
 8007188:	e3d5      	b.n	8007936 <HAL_ADC_ConfigChannel+0x7ce>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff fe79 	bl	8006e8e <LL_ADC_REG_IsConversionOngoing>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f040 83ba 	bne.w	8007918 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b05      	cmp	r3, #5
 80071b2:	d824      	bhi.n	80071fe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	3b02      	subs	r3, #2
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d81b      	bhi.n	80071f6 <HAL_ADC_ConfigChannel+0x8e>
 80071be:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <HAL_ADC_ConfigChannel+0x5c>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	080071dd 	.word	0x080071dd
 80071cc:	080071e5 	.word	0x080071e5
 80071d0:	080071ed 	.word	0x080071ed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80071d4:	230c      	movs	r3, #12
 80071d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80071da:	e010      	b.n	80071fe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80071dc:	2312      	movs	r3, #18
 80071de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80071e2:	e00c      	b.n	80071fe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80071e4:	2318      	movs	r3, #24
 80071e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80071ea:	e008      	b.n	80071fe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80071ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80071f4:	e003      	b.n	80071fe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80071f6:	2306      	movs	r3, #6
 80071f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80071fc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800720c:	f7ff fd62 	bl	8006cd4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff fe3a 	bl	8006e8e <LL_ADC_REG_IsConversionOngoing>
 800721a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fe46 	bl	8006eb4 <LL_ADC_INJ_IsConversionOngoing>
 8007228:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800722c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007230:	2b00      	cmp	r3, #0
 8007232:	f040 81bf 	bne.w	80075b4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800723a:	2b00      	cmp	r3, #0
 800723c:	f040 81ba 	bne.w	80075b4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007248:	d10f      	bne.n	800726a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	4619      	mov	r1, r3
 8007256:	f7ff fd69 	bl	8006d2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fd23 	bl	8006cae <LL_ADC_SetSamplingTimeCommonConfig>
 8007268:	e00e      	b.n	8007288 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6818      	ldr	r0, [r3, #0]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	461a      	mov	r2, r3
 8007278:	f7ff fd58 	bl	8006d2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fd13 	bl	8006cae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	08db      	lsrs	r3, r3, #3
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d00a      	beq.n	80072c0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6919      	ldr	r1, [r3, #16]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80072ba:	f7ff fca3 	bl	8006c04 <LL_ADC_SetOffset>
 80072be:	e179      	b.n	80075b4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fcc0 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <HAL_ADC_ConfigChannel+0x184>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2100      	movs	r1, #0
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fcb5 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 80072e2:	4603      	mov	r3, r0
 80072e4:	0e9b      	lsrs	r3, r3, #26
 80072e6:	f003 021f 	and.w	r2, r3, #31
 80072ea:	e01e      	b.n	800732a <HAL_ADC_ConfigChannel+0x1c2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff fcaa 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007302:	fa93 f3a3 	rbit	r3, r3
 8007306:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800730a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800730e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007312:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800731a:	2320      	movs	r3, #32
 800731c:	e004      	b.n	8007328 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800731e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007322:	fab3 f383 	clz	r3, r3
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007332:	2b00      	cmp	r3, #0
 8007334:	d105      	bne.n	8007342 <HAL_ADC_ConfigChannel+0x1da>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	0e9b      	lsrs	r3, r3, #26
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	e018      	b.n	8007374 <HAL_ADC_ConfigChannel+0x20c>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800734e:	fa93 f3a3 	rbit	r3, r3
 8007352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8007356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800735a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800735e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8007366:	2320      	movs	r3, #32
 8007368:	e004      	b.n	8007374 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800736a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800736e:	fab3 f383 	clz	r3, r3
 8007372:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007374:	429a      	cmp	r2, r3
 8007376:	d106      	bne.n	8007386 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2200      	movs	r2, #0
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fc79 	bl	8006c78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2101      	movs	r1, #1
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fc5d 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 8007392:	4603      	mov	r3, r0
 8007394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <HAL_ADC_ConfigChannel+0x24a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2101      	movs	r1, #1
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fc52 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 80073a8:	4603      	mov	r3, r0
 80073aa:	0e9b      	lsrs	r3, r3, #26
 80073ac:	f003 021f 	and.w	r2, r3, #31
 80073b0:	e01e      	b.n	80073f0 <HAL_ADC_ConfigChannel+0x288>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2101      	movs	r1, #1
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff fc47 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 80073be:	4603      	mov	r3, r0
 80073c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073c8:	fa93 f3a3 	rbit	r3, r3
 80073cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80073d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80073d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80073e0:	2320      	movs	r3, #32
 80073e2:	e004      	b.n	80073ee <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80073e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073e8:	fab3 f383 	clz	r3, r3
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <HAL_ADC_ConfigChannel+0x2a0>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	0e9b      	lsrs	r3, r3, #26
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	e018      	b.n	800743a <HAL_ADC_ConfigChannel+0x2d2>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007410:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007414:	fa93 f3a3 	rbit	r3, r3
 8007418:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800741c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8007424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800742c:	2320      	movs	r3, #32
 800742e:	e004      	b.n	800743a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8007430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007434:	fab3 f383 	clz	r3, r3
 8007438:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800743a:	429a      	cmp	r2, r3
 800743c:	d106      	bne.n	800744c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	2101      	movs	r1, #1
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fc16 	bl	8006c78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2102      	movs	r1, #2
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fbfa 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 8007458:	4603      	mov	r3, r0
 800745a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <HAL_ADC_ConfigChannel+0x310>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2102      	movs	r1, #2
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff fbef 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 800746e:	4603      	mov	r3, r0
 8007470:	0e9b      	lsrs	r3, r3, #26
 8007472:	f003 021f 	and.w	r2, r3, #31
 8007476:	e01e      	b.n	80074b6 <HAL_ADC_ConfigChannel+0x34e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2102      	movs	r1, #2
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff fbe4 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 8007484:	4603      	mov	r3, r0
 8007486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800748e:	fa93 f3a3 	rbit	r3, r3
 8007492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8007496:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800749a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800749e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80074a6:	2320      	movs	r3, #32
 80074a8:	e004      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80074aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074ae:	fab3 f383 	clz	r3, r3
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d105      	bne.n	80074ce <HAL_ADC_ConfigChannel+0x366>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	0e9b      	lsrs	r3, r3, #26
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	e014      	b.n	80074f8 <HAL_ADC_ConfigChannel+0x390>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074d6:	fa93 f3a3 	rbit	r3, r3
 80074da:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80074dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80074e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80074ea:	2320      	movs	r3, #32
 80074ec:	e004      	b.n	80074f8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80074ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074f2:	fab3 f383 	clz	r3, r3
 80074f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d106      	bne.n	800750a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2200      	movs	r2, #0
 8007502:	2102      	movs	r1, #2
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff fbb7 	bl	8006c78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2103      	movs	r1, #3
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff fb9b 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 8007516:	4603      	mov	r3, r0
 8007518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <HAL_ADC_ConfigChannel+0x3ce>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2103      	movs	r1, #3
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fb90 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 800752c:	4603      	mov	r3, r0
 800752e:	0e9b      	lsrs	r3, r3, #26
 8007530:	f003 021f 	and.w	r2, r3, #31
 8007534:	e017      	b.n	8007566 <HAL_ADC_ConfigChannel+0x3fe>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2103      	movs	r1, #3
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff fb85 	bl	8006c4c <LL_ADC_GetOffsetChannel>
 8007542:	4603      	mov	r3, r0
 8007544:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007548:	fa93 f3a3 	rbit	r3, r3
 800754c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800754e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007550:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8007552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8007558:	2320      	movs	r3, #32
 800755a:	e003      	b.n	8007564 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800755c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800755e:	fab3 f383 	clz	r3, r3
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800756e:	2b00      	cmp	r3, #0
 8007570:	d105      	bne.n	800757e <HAL_ADC_ConfigChannel+0x416>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	0e9b      	lsrs	r3, r3, #26
 8007578:	f003 031f 	and.w	r3, r3, #31
 800757c:	e011      	b.n	80075a2 <HAL_ADC_ConfigChannel+0x43a>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007586:	fa93 f3a3 	rbit	r3, r3
 800758a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800758c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800758e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8007590:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8007596:	2320      	movs	r3, #32
 8007598:	e003      	b.n	80075a2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800759a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800759c:	fab3 f383 	clz	r3, r3
 80075a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d106      	bne.n	80075b4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	2103      	movs	r1, #3
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fb62 	bl	8006c78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fc55 	bl	8006e68 <LL_ADC_IsEnabled>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 813f 	bne.w	8007844 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6819      	ldr	r1, [r3, #0]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f7ff fbd6 	bl	8006d84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a8e      	ldr	r2, [pc, #568]	@ (8007818 <HAL_ADC_ConfigChannel+0x6b0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	f040 8130 	bne.w	8007844 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <HAL_ADC_ConfigChannel+0x4a4>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	0e9b      	lsrs	r3, r3, #26
 80075fa:	3301      	adds	r3, #1
 80075fc:	f003 031f 	and.w	r3, r3, #31
 8007600:	2b09      	cmp	r3, #9
 8007602:	bf94      	ite	ls
 8007604:	2301      	movls	r3, #1
 8007606:	2300      	movhi	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	e019      	b.n	8007640 <HAL_ADC_ConfigChannel+0x4d8>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007614:	fa93 f3a3 	rbit	r3, r3
 8007618:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800761a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800761c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800761e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8007624:	2320      	movs	r3, #32
 8007626:	e003      	b.n	8007630 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8007628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800762a:	fab3 f383 	clz	r3, r3
 800762e:	b2db      	uxtb	r3, r3
 8007630:	3301      	adds	r3, #1
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	2b09      	cmp	r3, #9
 8007638:	bf94      	ite	ls
 800763a:	2301      	movls	r3, #1
 800763c:	2300      	movhi	r3, #0
 800763e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007640:	2b00      	cmp	r3, #0
 8007642:	d079      	beq.n	8007738 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800764c:	2b00      	cmp	r3, #0
 800764e:	d107      	bne.n	8007660 <HAL_ADC_ConfigChannel+0x4f8>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	0e9b      	lsrs	r3, r3, #26
 8007656:	3301      	adds	r3, #1
 8007658:	069b      	lsls	r3, r3, #26
 800765a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800765e:	e015      	b.n	800768c <HAL_ADC_ConfigChannel+0x524>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007668:	fa93 f3a3 	rbit	r3, r3
 800766c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800766e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007670:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8007678:	2320      	movs	r3, #32
 800767a:	e003      	b.n	8007684 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800767c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800767e:	fab3 f383 	clz	r3, r3
 8007682:	b2db      	uxtb	r3, r3
 8007684:	3301      	adds	r3, #1
 8007686:	069b      	lsls	r3, r3, #26
 8007688:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007694:	2b00      	cmp	r3, #0
 8007696:	d109      	bne.n	80076ac <HAL_ADC_ConfigChannel+0x544>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	0e9b      	lsrs	r3, r3, #26
 800769e:	3301      	adds	r3, #1
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2101      	movs	r1, #1
 80076a6:	fa01 f303 	lsl.w	r3, r1, r3
 80076aa:	e017      	b.n	80076dc <HAL_ADC_ConfigChannel+0x574>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076b4:	fa93 f3a3 	rbit	r3, r3
 80076b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80076ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80076be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80076c4:	2320      	movs	r3, #32
 80076c6:	e003      	b.n	80076d0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80076c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ca:	fab3 f383 	clz	r3, r3
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	3301      	adds	r3, #1
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	2101      	movs	r1, #1
 80076d8:	fa01 f303 	lsl.w	r3, r1, r3
 80076dc:	ea42 0103 	orr.w	r1, r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <HAL_ADC_ConfigChannel+0x59a>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	0e9b      	lsrs	r3, r3, #26
 80076f2:	3301      	adds	r3, #1
 80076f4:	f003 021f 	and.w	r2, r3, #31
 80076f8:	4613      	mov	r3, r2
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4413      	add	r3, r2
 80076fe:	051b      	lsls	r3, r3, #20
 8007700:	e018      	b.n	8007734 <HAL_ADC_ConfigChannel+0x5cc>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800770a:	fa93 f3a3 	rbit	r3, r3
 800770e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800771a:	2320      	movs	r3, #32
 800771c:	e003      	b.n	8007726 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800771e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007720:	fab3 f383 	clz	r3, r3
 8007724:	b2db      	uxtb	r3, r3
 8007726:	3301      	adds	r3, #1
 8007728:	f003 021f 	and.w	r2, r3, #31
 800772c:	4613      	mov	r3, r2
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4413      	add	r3, r2
 8007732:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007734:	430b      	orrs	r3, r1
 8007736:	e080      	b.n	800783a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <HAL_ADC_ConfigChannel+0x5ec>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	0e9b      	lsrs	r3, r3, #26
 800774a:	3301      	adds	r3, #1
 800774c:	069b      	lsls	r3, r3, #26
 800774e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007752:	e015      	b.n	8007780 <HAL_ADC_ConfigChannel+0x618>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800775a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775c:	fa93 f3a3 	rbit	r3, r3
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800776c:	2320      	movs	r3, #32
 800776e:	e003      	b.n	8007778 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	fab3 f383 	clz	r3, r3
 8007776:	b2db      	uxtb	r3, r3
 8007778:	3301      	adds	r3, #1
 800777a:	069b      	lsls	r3, r3, #26
 800777c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <HAL_ADC_ConfigChannel+0x638>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	0e9b      	lsrs	r3, r3, #26
 8007792:	3301      	adds	r3, #1
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	2101      	movs	r1, #1
 800779a:	fa01 f303 	lsl.w	r3, r1, r3
 800779e:	e017      	b.n	80077d0 <HAL_ADC_ConfigChannel+0x668>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	fa93 f3a3 	rbit	r3, r3
 80077ac:	61bb      	str	r3, [r7, #24]
  return result;
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80077b8:	2320      	movs	r3, #32
 80077ba:	e003      	b.n	80077c4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	fab3 f383 	clz	r3, r3
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	3301      	adds	r3, #1
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	2101      	movs	r1, #1
 80077cc:	fa01 f303 	lsl.w	r3, r1, r3
 80077d0:	ea42 0103 	orr.w	r1, r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10d      	bne.n	80077fc <HAL_ADC_ConfigChannel+0x694>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	0e9b      	lsrs	r3, r3, #26
 80077e6:	3301      	adds	r3, #1
 80077e8:	f003 021f 	and.w	r2, r3, #31
 80077ec:	4613      	mov	r3, r2
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	4413      	add	r3, r2
 80077f2:	3b1e      	subs	r3, #30
 80077f4:	051b      	lsls	r3, r3, #20
 80077f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80077fa:	e01d      	b.n	8007838 <HAL_ADC_ConfigChannel+0x6d0>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	fa93 f3a3 	rbit	r3, r3
 8007808:	60fb      	str	r3, [r7, #12]
  return result;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d103      	bne.n	800781c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8007814:	2320      	movs	r3, #32
 8007816:	e005      	b.n	8007824 <HAL_ADC_ConfigChannel+0x6bc>
 8007818:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	fab3 f383 	clz	r3, r3
 8007822:	b2db      	uxtb	r3, r3
 8007824:	3301      	adds	r3, #1
 8007826:	f003 021f 	and.w	r2, r3, #31
 800782a:	4613      	mov	r3, r2
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	4413      	add	r3, r2
 8007830:	3b1e      	subs	r3, #30
 8007832:	051b      	lsls	r3, r3, #20
 8007834:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007838:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800783e:	4619      	mov	r1, r3
 8007840:	f7ff fa74 	bl	8006d2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4b3d      	ldr	r3, [pc, #244]	@ (8007940 <HAL_ADC_ConfigChannel+0x7d8>)
 800784a:	4013      	ands	r3, r2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d06c      	beq.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007850:	483c      	ldr	r0, [pc, #240]	@ (8007944 <HAL_ADC_ConfigChannel+0x7dc>)
 8007852:	f7ff f9c9 	bl	8006be8 <LL_ADC_GetCommonPathInternalCh>
 8007856:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a3a      	ldr	r2, [pc, #232]	@ (8007948 <HAL_ADC_ConfigChannel+0x7e0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d127      	bne.n	80078b4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d121      	bne.n	80078b4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a35      	ldr	r2, [pc, #212]	@ (800794c <HAL_ADC_ConfigChannel+0x7e4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d157      	bne.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800787a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800787e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007882:	4619      	mov	r1, r3
 8007884:	482f      	ldr	r0, [pc, #188]	@ (8007944 <HAL_ADC_ConfigChannel+0x7dc>)
 8007886:	f7ff f99c 	bl	8006bc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800788a:	4b31      	ldr	r3, [pc, #196]	@ (8007950 <HAL_ADC_ConfigChannel+0x7e8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	099b      	lsrs	r3, r3, #6
 8007890:	4a30      	ldr	r2, [pc, #192]	@ (8007954 <HAL_ADC_ConfigChannel+0x7ec>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	099b      	lsrs	r3, r3, #6
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	4613      	mov	r3, r2
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80078a4:	e002      	b.n	80078ac <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1f9      	bne.n	80078a6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078b2:	e03a      	b.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a27      	ldr	r2, [pc, #156]	@ (8007958 <HAL_ADC_ConfigChannel+0x7f0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d113      	bne.n	80078e6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80078be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10d      	bne.n	80078e6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1f      	ldr	r2, [pc, #124]	@ (800794c <HAL_ADC_ConfigChannel+0x7e4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d12a      	bne.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078dc:	4619      	mov	r1, r3
 80078de:	4819      	ldr	r0, [pc, #100]	@ (8007944 <HAL_ADC_ConfigChannel+0x7dc>)
 80078e0:	f7ff f96f 	bl	8006bc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80078e4:	e021      	b.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1c      	ldr	r2, [pc, #112]	@ (800795c <HAL_ADC_ConfigChannel+0x7f4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d11c      	bne.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80078f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d116      	bne.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a12      	ldr	r2, [pc, #72]	@ (800794c <HAL_ADC_ConfigChannel+0x7e4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d111      	bne.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800790a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800790e:	4619      	mov	r1, r3
 8007910:	480c      	ldr	r0, [pc, #48]	@ (8007944 <HAL_ADC_ConfigChannel+0x7dc>)
 8007912:	f7ff f956 	bl	8006bc2 <LL_ADC_SetCommonPathInternalCh>
 8007916:	e008      	b.n	800792a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800791c:	f043 0220 	orr.w	r2, r3, #32
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8007932:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007936:	4618      	mov	r0, r3
 8007938:	37d8      	adds	r7, #216	@ 0xd8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	80080000 	.word	0x80080000
 8007944:	50040300 	.word	0x50040300
 8007948:	c7520000 	.word	0xc7520000
 800794c:	50040000 	.word	0x50040000
 8007950:	20000024 	.word	0x20000024
 8007954:	053e2d63 	.word	0x053e2d63
 8007958:	cb840000 	.word	0xcb840000
 800795c:	80000001 	.word	0x80000001

08007960 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007968:	4b05      	ldr	r3, [pc, #20]	@ (8007980 <LL_EXTI_EnableIT_0_31+0x20>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	4904      	ldr	r1, [pc, #16]	@ (8007980 <LL_EXTI_EnableIT_0_31+0x20>)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4313      	orrs	r3, r2
 8007972:	600b      	str	r3, [r1, #0]
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40010400 	.word	0x40010400

08007984 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800798c:	4b06      	ldr	r3, [pc, #24]	@ (80079a8 <LL_EXTI_DisableIT_0_31+0x24>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	43db      	mvns	r3, r3
 8007994:	4904      	ldr	r1, [pc, #16]	@ (80079a8 <LL_EXTI_DisableIT_0_31+0x24>)
 8007996:	4013      	ands	r3, r2
 8007998:	600b      	str	r3, [r1, #0]
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40010400 	.word	0x40010400

080079ac <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80079b4:	4b05      	ldr	r3, [pc, #20]	@ (80079cc <LL_EXTI_EnableEvent_0_31+0x20>)
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	4904      	ldr	r1, [pc, #16]	@ (80079cc <LL_EXTI_EnableEvent_0_31+0x20>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4313      	orrs	r3, r2
 80079be:	604b      	str	r3, [r1, #4]

}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	40010400 	.word	0x40010400

080079d0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80079d8:	4b06      	ldr	r3, [pc, #24]	@ (80079f4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	43db      	mvns	r3, r3
 80079e0:	4904      	ldr	r1, [pc, #16]	@ (80079f4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	604b      	str	r3, [r1, #4]
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40010400 	.word	0x40010400

080079f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007a00:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	4904      	ldr	r1, [pc, #16]	@ (8007a18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	608b      	str	r3, [r1, #8]

}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	40010400 	.word	0x40010400

08007a1c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007a24:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	4904      	ldr	r1, [pc, #16]	@ (8007a40 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	608b      	str	r3, [r1, #8]

}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40010400 	.word	0x40010400

08007a44 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007a4c:	4b05      	ldr	r3, [pc, #20]	@ (8007a64 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	4904      	ldr	r1, [pc, #16]	@ (8007a64 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60cb      	str	r3, [r1, #12]
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	40010400 	.word	0x40010400

08007a68 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007a70:	4b06      	ldr	r3, [pc, #24]	@ (8007a8c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	43db      	mvns	r3, r3
 8007a78:	4904      	ldr	r1, [pc, #16]	@ (8007a8c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	60cb      	str	r3, [r1, #12]
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40010400 	.word	0x40010400

08007a90 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007a98:	4a04      	ldr	r2, [pc, #16]	@ (8007aac <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6153      	str	r3, [r2, #20]
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010400 	.word	0x40010400

08007ab0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d102      	bne.n	8007acc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	77fb      	strb	r3, [r7, #31]
 8007aca:	e0d1      	b.n	8007c70 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ada:	d102      	bne.n	8007ae2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e0c6      	b.n	8007c70 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d115      	bne.n	8007b1a <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007afc:	4b5f      	ldr	r3, [pc, #380]	@ (8007c7c <HAL_COMP_Init+0x1cc>)
 8007afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b00:	4a5e      	ldr	r2, [pc, #376]	@ (8007c7c <HAL_COMP_Init+0x1cc>)
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	6613      	str	r3, [r2, #96]	@ 0x60
 8007b08:	4b5c      	ldr	r3, [pc, #368]	@ (8007c7c <HAL_COMP_Init+0x1cc>)
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	60bb      	str	r3, [r7, #8]
 8007b12:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fc f993 	bl	8003e40 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b24:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	4b4b      	ldr	r3, [pc, #300]	@ (8007c80 <HAL_COMP_Init+0x1d0>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	6979      	ldr	r1, [r7, #20]
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b66:	d106      	bne.n	8007b76 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007b68:	4b46      	ldr	r3, [pc, #280]	@ (8007c84 <HAL_COMP_Init+0x1d4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a45      	ldr	r2, [pc, #276]	@ (8007c84 <HAL_COMP_Init+0x1d4>)
 8007b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	e005      	b.n	8007b82 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007b76:	4b43      	ldr	r3, [pc, #268]	@ (8007c84 <HAL_COMP_Init+0x1d4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a42      	ldr	r2, [pc, #264]	@ (8007c84 <HAL_COMP_Init+0x1d4>)
 8007b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b80:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d016      	beq.n	8007bbe <HAL_COMP_Init+0x10e>
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d113      	bne.n	8007bbe <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b96:	4b3c      	ldr	r3, [pc, #240]	@ (8007c88 <HAL_COMP_Init+0x1d8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	099b      	lsrs	r3, r3, #6
 8007b9c:	4a3b      	ldr	r2, [pc, #236]	@ (8007c8c <HAL_COMP_Init+0x1dc>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	099b      	lsrs	r3, r3, #6
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007bb0:	e002      	b.n	8007bb8 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1f9      	bne.n	8007bb2 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a33      	ldr	r2, [pc, #204]	@ (8007c90 <HAL_COMP_Init+0x1e0>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d102      	bne.n	8007bce <HAL_COMP_Init+0x11e>
 8007bc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007bcc:	e001      	b.n	8007bd2 <HAL_COMP_Init+0x122>
 8007bce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007bd2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f003 0303 	and.w	r3, r3, #3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d037      	beq.n	8007c50 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007bec:	6938      	ldr	r0, [r7, #16]
 8007bee:	f7ff ff03 	bl	80079f8 <LL_EXTI_EnableRisingTrig_0_31>
 8007bf2:	e002      	b.n	8007bfa <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007bf4:	6938      	ldr	r0, [r7, #16]
 8007bf6:	f7ff ff11 	bl	8007a1c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007c06:	6938      	ldr	r0, [r7, #16]
 8007c08:	f7ff ff1c 	bl	8007a44 <LL_EXTI_EnableFallingTrig_0_31>
 8007c0c:	e002      	b.n	8007c14 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007c0e:	6938      	ldr	r0, [r7, #16]
 8007c10:	f7ff ff2a 	bl	8007a68 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007c14:	6938      	ldr	r0, [r7, #16]
 8007c16:	f7ff ff3b 	bl	8007a90 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007c26:	6938      	ldr	r0, [r7, #16]
 8007c28:	f7ff fec0 	bl	80079ac <LL_EXTI_EnableEvent_0_31>
 8007c2c:	e002      	b.n	8007c34 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007c2e:	6938      	ldr	r0, [r7, #16]
 8007c30:	f7ff fece 	bl	80079d0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007c40:	6938      	ldr	r0, [r7, #16]
 8007c42:	f7ff fe8d 	bl	8007960 <LL_EXTI_EnableIT_0_31>
 8007c46:	e009      	b.n	8007c5c <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007c48:	6938      	ldr	r0, [r7, #16]
 8007c4a:	f7ff fe9b 	bl	8007984 <LL_EXTI_DisableIT_0_31>
 8007c4e:	e005      	b.n	8007c5c <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007c50:	6938      	ldr	r0, [r7, #16]
 8007c52:	f7ff febd 	bl	80079d0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f7ff fe94 	bl	8007984 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8007c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3720      	adds	r7, #32
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	ff207d03 	.word	0xff207d03
 8007c84:	40010204 	.word	0x40010204
 8007c88:	20000024 	.word	0x20000024
 8007c8c:	053e2d63 	.word	0x053e2d63
 8007c90:	40010200 	.word	0x40010200

08007c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007cc6:	4a04      	ldr	r2, [pc, #16]	@ (8007cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	60d3      	str	r3, [r2, #12]
}
 8007ccc:	bf00      	nop
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	e000ed00 	.word	0xe000ed00

08007cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ce0:	4b04      	ldr	r3, [pc, #16]	@ (8007cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	0a1b      	lsrs	r3, r3, #8
 8007ce6:	f003 0307 	and.w	r3, r3, #7
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	e000ed00 	.word	0xe000ed00

08007cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	db0b      	blt.n	8007d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	f003 021f 	and.w	r2, r3, #31
 8007d10:	4907      	ldr	r1, [pc, #28]	@ (8007d30 <__NVIC_EnableIRQ+0x38>)
 8007d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d16:	095b      	lsrs	r3, r3, #5
 8007d18:	2001      	movs	r0, #1
 8007d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8007d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	e000e100 	.word	0xe000e100

08007d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	6039      	str	r1, [r7, #0]
 8007d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	db0a      	blt.n	8007d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	490c      	ldr	r1, [pc, #48]	@ (8007d80 <__NVIC_SetPriority+0x4c>)
 8007d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d52:	0112      	lsls	r2, r2, #4
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	440b      	add	r3, r1
 8007d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d5c:	e00a      	b.n	8007d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	4908      	ldr	r1, [pc, #32]	@ (8007d84 <__NVIC_SetPriority+0x50>)
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	3b04      	subs	r3, #4
 8007d6c:	0112      	lsls	r2, r2, #4
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	440b      	add	r3, r1
 8007d72:	761a      	strb	r2, [r3, #24]
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	e000e100 	.word	0xe000e100
 8007d84:	e000ed00 	.word	0xe000ed00

08007d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b089      	sub	sp, #36	@ 0x24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	f1c3 0307 	rsb	r3, r3, #7
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	bf28      	it	cs
 8007da6:	2304      	movcs	r3, #4
 8007da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	3304      	adds	r3, #4
 8007dae:	2b06      	cmp	r3, #6
 8007db0:	d902      	bls.n	8007db8 <NVIC_EncodePriority+0x30>
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	3b03      	subs	r3, #3
 8007db6:	e000      	b.n	8007dba <NVIC_EncodePriority+0x32>
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	43da      	mvns	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	401a      	ands	r2, r3
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dda:	43d9      	mvns	r1, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007de0:	4313      	orrs	r3, r2
         );
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3724      	adds	r7, #36	@ 0x24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e00:	d301      	bcc.n	8007e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e02:	2301      	movs	r3, #1
 8007e04:	e00f      	b.n	8007e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e06:	4a0a      	ldr	r2, [pc, #40]	@ (8007e30 <SysTick_Config+0x40>)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e0e:	210f      	movs	r1, #15
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295
 8007e14:	f7ff ff8e 	bl	8007d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e18:	4b05      	ldr	r3, [pc, #20]	@ (8007e30 <SysTick_Config+0x40>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e1e:	4b04      	ldr	r3, [pc, #16]	@ (8007e30 <SysTick_Config+0x40>)
 8007e20:	2207      	movs	r2, #7
 8007e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	e000e010 	.word	0xe000e010

08007e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff ff29 	bl	8007c94 <__NVIC_SetPriorityGrouping>
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	4603      	mov	r3, r0
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007e5c:	f7ff ff3e 	bl	8007cdc <__NVIC_GetPriorityGrouping>
 8007e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	6978      	ldr	r0, [r7, #20]
 8007e68:	f7ff ff8e 	bl	8007d88 <NVIC_EncodePriority>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e72:	4611      	mov	r1, r2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff ff5d 	bl	8007d34 <__NVIC_SetPriority>
}
 8007e7a:	bf00      	nop
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	4603      	mov	r3, r0
 8007e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff ff31 	bl	8007cf8 <__NVIC_EnableIRQ>
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff ffa2 	bl	8007df0 <SysTick_Config>
 8007eac:	4603      	mov	r3, r0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b086      	sub	sp, #24
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d101      	bne.n	8007ed6 <HAL_DMA_Start_IT+0x20>
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	e066      	b.n	8007fa4 <HAL_DMA_Start_IT+0xee>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d155      	bne.n	8007f96 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f84c 	bl	8007fac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d008      	beq.n	8007f2e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 020e 	orr.w	r2, r2, #14
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	e00f      	b.n	8007f4e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0204 	bic.w	r2, r2, #4
 8007f3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f042 020a 	orr.w	r2, r2, #10
 8007f4c:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f6a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d007      	beq.n	8007f84 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f82:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0201 	orr.w	r2, r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e005      	b.n	8007fa2 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007fc2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007fd4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fda:	f003 021c 	and.w	r2, r3, #28
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8007fe8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	2b10      	cmp	r3, #16
 8007ff8:	d108      	bne.n	800800c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800800a:	e007      	b.n	800801c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	60da      	str	r2, [r3, #12]
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008032:	2300      	movs	r3, #0
 8008034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008036:	e166      	b.n	8008306 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	2101      	movs	r1, #1
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	fa01 f303 	lsl.w	r3, r1, r3
 8008044:	4013      	ands	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8158 	beq.w	8008300 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f003 0303 	and.w	r3, r3, #3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d005      	beq.n	8008068 <HAL_GPIO_Init+0x40>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 0303 	and.w	r3, r3, #3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d130      	bne.n	80080ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	2203      	movs	r2, #3
 8008074:	fa02 f303 	lsl.w	r3, r2, r3
 8008078:	43db      	mvns	r3, r3
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4013      	ands	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800809e:	2201      	movs	r2, #1
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	4013      	ands	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	091b      	lsrs	r3, r3, #4
 80080b4:	f003 0201 	and.w	r2, r3, #1
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d017      	beq.n	8008106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	2203      	movs	r2, #3
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	43db      	mvns	r3, r3
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4013      	ands	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d123      	bne.n	800815a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	08da      	lsrs	r2, r3, #3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3208      	adds	r2, #8
 800811a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	220f      	movs	r2, #15
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	43db      	mvns	r3, r3
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4013      	ands	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f003 0307 	and.w	r3, r3, #7
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	08da      	lsrs	r2, r3, #3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3208      	adds	r2, #8
 8008154:	6939      	ldr	r1, [r7, #16]
 8008156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	2203      	movs	r2, #3
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	43db      	mvns	r3, r3
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	4013      	ands	r3, r2
 8008170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f003 0203 	and.w	r2, r3, #3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 80b2 	beq.w	8008300 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800819c:	4b61      	ldr	r3, [pc, #388]	@ (8008324 <HAL_GPIO_Init+0x2fc>)
 800819e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081a0:	4a60      	ldr	r2, [pc, #384]	@ (8008324 <HAL_GPIO_Init+0x2fc>)
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80081a8:	4b5e      	ldr	r3, [pc, #376]	@ (8008324 <HAL_GPIO_Init+0x2fc>)
 80081aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80081b4:	4a5c      	ldr	r2, [pc, #368]	@ (8008328 <HAL_GPIO_Init+0x300>)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	089b      	lsrs	r3, r3, #2
 80081ba:	3302      	adds	r3, #2
 80081bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	220f      	movs	r2, #15
 80081cc:	fa02 f303 	lsl.w	r3, r2, r3
 80081d0:	43db      	mvns	r3, r3
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4013      	ands	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80081de:	d02b      	beq.n	8008238 <HAL_GPIO_Init+0x210>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a52      	ldr	r2, [pc, #328]	@ (800832c <HAL_GPIO_Init+0x304>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d025      	beq.n	8008234 <HAL_GPIO_Init+0x20c>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a51      	ldr	r2, [pc, #324]	@ (8008330 <HAL_GPIO_Init+0x308>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d01f      	beq.n	8008230 <HAL_GPIO_Init+0x208>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a50      	ldr	r2, [pc, #320]	@ (8008334 <HAL_GPIO_Init+0x30c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d019      	beq.n	800822c <HAL_GPIO_Init+0x204>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a4f      	ldr	r2, [pc, #316]	@ (8008338 <HAL_GPIO_Init+0x310>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <HAL_GPIO_Init+0x200>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a4e      	ldr	r2, [pc, #312]	@ (800833c <HAL_GPIO_Init+0x314>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00d      	beq.n	8008224 <HAL_GPIO_Init+0x1fc>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a4d      	ldr	r2, [pc, #308]	@ (8008340 <HAL_GPIO_Init+0x318>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d007      	beq.n	8008220 <HAL_GPIO_Init+0x1f8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a4c      	ldr	r2, [pc, #304]	@ (8008344 <HAL_GPIO_Init+0x31c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d101      	bne.n	800821c <HAL_GPIO_Init+0x1f4>
 8008218:	2307      	movs	r3, #7
 800821a:	e00e      	b.n	800823a <HAL_GPIO_Init+0x212>
 800821c:	2308      	movs	r3, #8
 800821e:	e00c      	b.n	800823a <HAL_GPIO_Init+0x212>
 8008220:	2306      	movs	r3, #6
 8008222:	e00a      	b.n	800823a <HAL_GPIO_Init+0x212>
 8008224:	2305      	movs	r3, #5
 8008226:	e008      	b.n	800823a <HAL_GPIO_Init+0x212>
 8008228:	2304      	movs	r3, #4
 800822a:	e006      	b.n	800823a <HAL_GPIO_Init+0x212>
 800822c:	2303      	movs	r3, #3
 800822e:	e004      	b.n	800823a <HAL_GPIO_Init+0x212>
 8008230:	2302      	movs	r3, #2
 8008232:	e002      	b.n	800823a <HAL_GPIO_Init+0x212>
 8008234:	2301      	movs	r3, #1
 8008236:	e000      	b.n	800823a <HAL_GPIO_Init+0x212>
 8008238:	2300      	movs	r3, #0
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	f002 0203 	and.w	r2, r2, #3
 8008240:	0092      	lsls	r2, r2, #2
 8008242:	4093      	lsls	r3, r2
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800824a:	4937      	ldr	r1, [pc, #220]	@ (8008328 <HAL_GPIO_Init+0x300>)
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	089b      	lsrs	r3, r3, #2
 8008250:	3302      	adds	r3, #2
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008258:	4b3b      	ldr	r3, [pc, #236]	@ (8008348 <HAL_GPIO_Init+0x320>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	43db      	mvns	r3, r3
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4013      	ands	r3, r2
 8008266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800827c:	4a32      	ldr	r2, [pc, #200]	@ (8008348 <HAL_GPIO_Init+0x320>)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008282:	4b31      	ldr	r3, [pc, #196]	@ (8008348 <HAL_GPIO_Init+0x320>)
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	43db      	mvns	r3, r3
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4013      	ands	r3, r2
 8008290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082a6:	4a28      	ldr	r2, [pc, #160]	@ (8008348 <HAL_GPIO_Init+0x320>)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80082ac:	4b26      	ldr	r3, [pc, #152]	@ (8008348 <HAL_GPIO_Init+0x320>)
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	43db      	mvns	r3, r3
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4013      	ands	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008348 <HAL_GPIO_Init+0x320>)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80082d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008348 <HAL_GPIO_Init+0x320>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	43db      	mvns	r3, r3
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4013      	ands	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80082fa:	4a13      	ldr	r2, [pc, #76]	@ (8008348 <HAL_GPIO_Init+0x320>)
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	3301      	adds	r3, #1
 8008304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	fa22 f303 	lsr.w	r3, r2, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	f47f ae91 	bne.w	8008038 <HAL_GPIO_Init+0x10>
  }
}
 8008316:	bf00      	nop
 8008318:	bf00      	nop
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	40021000 	.word	0x40021000
 8008328:	40010000 	.word	0x40010000
 800832c:	48000400 	.word	0x48000400
 8008330:	48000800 	.word	0x48000800
 8008334:	48000c00 	.word	0x48000c00
 8008338:	48001000 	.word	0x48001000
 800833c:	48001400 	.word	0x48001400
 8008340:	48001800 	.word	0x48001800
 8008344:	48001c00 	.word	0x48001c00
 8008348:	40010400 	.word	0x40010400

0800834c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691a      	ldr	r2, [r3, #16]
 800835c:	887b      	ldrh	r3, [r7, #2]
 800835e:	4013      	ands	r3, r2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008364:	2301      	movs	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]
 8008368:	e001      	b.n	800836e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	807b      	strh	r3, [r7, #2]
 8008388:	4613      	mov	r3, r2
 800838a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800838c:	787b      	ldrb	r3, [r7, #1]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008392:	887a      	ldrh	r2, [r7, #2]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008398:	e002      	b.n	80083a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800839a:	887a      	ldrh	r2, [r7, #2]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80083b6:	4b08      	ldr	r3, [pc, #32]	@ (80083d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083b8:	695a      	ldr	r2, [r3, #20]
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	4013      	ands	r3, r2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d006      	beq.n	80083d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083c2:	4a05      	ldr	r2, [pc, #20]	@ (80083d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083c4:	88fb      	ldrh	r3, [r7, #6]
 80083c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083c8:	88fb      	ldrh	r3, [r7, #6]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f806 	bl	80083dc <HAL_GPIO_EXTI_Callback>
  }
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40010400 	.word	0x40010400

080083dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e08d      	b.n	8008520 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d106      	bne.n	800841e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fb fd65 	bl	8003ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2224      	movs	r2, #36	@ 0x24
 8008422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008442:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008452:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d107      	bne.n	800846c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008468:	609a      	str	r2, [r3, #8]
 800846a:	e006      	b.n	800847a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008478:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d108      	bne.n	8008494 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008490:	605a      	str	r2, [r3, #4]
 8008492:	e007      	b.n	80084a4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6812      	ldr	r2, [r2, #0]
 80084ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69d9      	ldr	r1, [r3, #28]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f042 0201 	orr.w	r2, r2, #1
 8008500:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af02      	add	r7, sp, #8
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	607a      	str	r2, [r7, #4]
 8008532:	461a      	mov	r2, r3
 8008534:	460b      	mov	r3, r1
 8008536:	817b      	strh	r3, [r7, #10]
 8008538:	4613      	mov	r3, r2
 800853a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b20      	cmp	r3, #32
 8008546:	f040 80fd 	bne.w	8008744 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_I2C_Master_Transmit+0x30>
 8008554:	2302      	movs	r3, #2
 8008556:	e0f6      	b.n	8008746 <HAL_I2C_Master_Transmit+0x21e>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008560:	f7fe faec 	bl	8006b3c <HAL_GetTick>
 8008564:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	2319      	movs	r3, #25
 800856c:	2201      	movs	r2, #1
 800856e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fa0a 	bl	800898c <I2C_WaitOnFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e0e1      	b.n	8008746 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2221      	movs	r2, #33	@ 0x21
 8008586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2210      	movs	r2, #16
 800858e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	893a      	ldrh	r2, [r7, #8]
 80085a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2bff      	cmp	r3, #255	@ 0xff
 80085b2:	d906      	bls.n	80085c2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	22ff      	movs	r2, #255	@ 0xff
 80085b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80085ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e007      	b.n	80085d2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80085cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80085d0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d024      	beq.n	8008624 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085de:	781a      	ldrb	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008602:	3b01      	subs	r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800860e:	b2db      	uxtb	r3, r3
 8008610:	3301      	adds	r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	8979      	ldrh	r1, [r7, #10]
 8008616:	4b4e      	ldr	r3, [pc, #312]	@ (8008750 <HAL_I2C_Master_Transmit+0x228>)
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 fbf1 	bl	8008e04 <I2C_TransferConfig>
 8008622:	e066      	b.n	80086f2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008628:	b2da      	uxtb	r2, r3
 800862a:	8979      	ldrh	r1, [r7, #10]
 800862c:	4b48      	ldr	r3, [pc, #288]	@ (8008750 <HAL_I2C_Master_Transmit+0x228>)
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 fbe6 	bl	8008e04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008638:	e05b      	b.n	80086f2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	6a39      	ldr	r1, [r7, #32]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 f9f3 	bl	8008a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e07b      	b.n	8008746 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	781a      	ldrb	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008668:	b29b      	uxth	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008682:	b29b      	uxth	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d034      	beq.n	80086f2 <HAL_I2C_Master_Transmit+0x1ca>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800868c:	2b00      	cmp	r3, #0
 800868e:	d130      	bne.n	80086f2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	2200      	movs	r2, #0
 8008698:	2180      	movs	r1, #128	@ 0x80
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 f976 	bl	800898c <I2C_WaitOnFlagUntilTimeout>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e04d      	b.n	8008746 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2bff      	cmp	r3, #255	@ 0xff
 80086b2:	d90e      	bls.n	80086d2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	22ff      	movs	r2, #255	@ 0xff
 80086b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	8979      	ldrh	r1, [r7, #10]
 80086c2:	2300      	movs	r3, #0
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 fb9a 	bl	8008e04 <I2C_TransferConfig>
 80086d0:	e00f      	b.n	80086f2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	8979      	ldrh	r1, [r7, #10]
 80086e4:	2300      	movs	r3, #0
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 fb89 	bl	8008e04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d19e      	bne.n	800863a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	6a39      	ldr	r1, [r7, #32]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f9d9 	bl	8008ab8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e01a      	b.n	8008746 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2220      	movs	r2, #32
 8008716:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6859      	ldr	r1, [r3, #4]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <HAL_I2C_Master_Transmit+0x22c>)
 8008724:	400b      	ands	r3, r1
 8008726:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	e000      	b.n	8008746 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008744:	2302      	movs	r3, #2
  }
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	80002000 	.word	0x80002000
 8008754:	fe00e800 	.word	0xfe00e800

08008758 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af02      	add	r7, sp, #8
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	461a      	mov	r2, r3
 8008764:	460b      	mov	r3, r1
 8008766:	817b      	strh	r3, [r7, #10]
 8008768:	4613      	mov	r3, r2
 800876a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b20      	cmp	r3, #32
 8008776:	f040 80db 	bne.w	8008930 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_I2C_Master_Receive+0x30>
 8008784:	2302      	movs	r3, #2
 8008786:	e0d4      	b.n	8008932 <HAL_I2C_Master_Receive+0x1da>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008790:	f7fe f9d4 	bl	8006b3c <HAL_GetTick>
 8008794:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	2319      	movs	r3, #25
 800879c:	2201      	movs	r2, #1
 800879e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f8f2 	bl	800898c <I2C_WaitOnFlagUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e0bf      	b.n	8008932 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2222      	movs	r2, #34	@ 0x22
 80087b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2210      	movs	r2, #16
 80087be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	893a      	ldrh	r2, [r7, #8]
 80087d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087de:	b29b      	uxth	r3, r3
 80087e0:	2bff      	cmp	r3, #255	@ 0xff
 80087e2:	d90e      	bls.n	8008802 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	22ff      	movs	r2, #255	@ 0xff
 80087e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	8979      	ldrh	r1, [r7, #10]
 80087f2:	4b52      	ldr	r3, [pc, #328]	@ (800893c <HAL_I2C_Master_Receive+0x1e4>)
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 fb02 	bl	8008e04 <I2C_TransferConfig>
 8008800:	e06d      	b.n	80088de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008806:	b29a      	uxth	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008810:	b2da      	uxtb	r2, r3
 8008812:	8979      	ldrh	r1, [r7, #10]
 8008814:	4b49      	ldr	r3, [pc, #292]	@ (800893c <HAL_I2C_Master_Receive+0x1e4>)
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 faf1 	bl	8008e04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008822:	e05c      	b.n	80088de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	6a39      	ldr	r1, [r7, #32]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f989 	bl	8008b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e07c      	b.n	8008932 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008842:	b2d2      	uxtb	r2, r2
 8008844:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008854:	3b01      	subs	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008860:	b29b      	uxth	r3, r3
 8008862:	3b01      	subs	r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800886e:	b29b      	uxth	r3, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d034      	beq.n	80088de <HAL_I2C_Master_Receive+0x186>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008878:	2b00      	cmp	r3, #0
 800887a:	d130      	bne.n	80088de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	2200      	movs	r2, #0
 8008884:	2180      	movs	r1, #128	@ 0x80
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 f880 	bl	800898c <I2C_WaitOnFlagUntilTimeout>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e04d      	b.n	8008932 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889a:	b29b      	uxth	r3, r3
 800889c:	2bff      	cmp	r3, #255	@ 0xff
 800889e:	d90e      	bls.n	80088be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	22ff      	movs	r2, #255	@ 0xff
 80088a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	8979      	ldrh	r1, [r7, #10]
 80088ae:	2300      	movs	r3, #0
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 faa4 	bl	8008e04 <I2C_TransferConfig>
 80088bc:	e00f      	b.n	80088de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	8979      	ldrh	r1, [r7, #10]
 80088d0:	2300      	movs	r3, #0
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fa93 	bl	8008e04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d19d      	bne.n	8008824 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	6a39      	ldr	r1, [r7, #32]
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f8e3 	bl	8008ab8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e01a      	b.n	8008932 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2220      	movs	r2, #32
 8008902:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6859      	ldr	r1, [r3, #4]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b0c      	ldr	r3, [pc, #48]	@ (8008940 <HAL_I2C_Master_Receive+0x1e8>)
 8008910:	400b      	ands	r3, r1
 8008912:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	e000      	b.n	8008932 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008930:	2302      	movs	r3, #2
  }
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	80002400 	.word	0x80002400
 8008940:	fe00e800 	.word	0xfe00e800

08008944 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d103      	bne.n	8008962 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2200      	movs	r2, #0
 8008960:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b01      	cmp	r3, #1
 800896e:	d007      	beq.n	8008980 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0201 	orr.w	r2, r2, #1
 800897e:	619a      	str	r2, [r3, #24]
  }
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	4613      	mov	r3, r2
 800899a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800899c:	e031      	b.n	8008a02 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a4:	d02d      	beq.n	8008a02 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a6:	f7fe f8c9 	bl	8006b3c <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d302      	bcc.n	80089bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d122      	bne.n	8008a02 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	4013      	ands	r3, r2
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	bf0c      	ite	eq
 80089cc:	2301      	moveq	r3, #1
 80089ce:	2300      	movne	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	461a      	mov	r2, r3
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d113      	bne.n	8008a02 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089de:	f043 0220 	orr.w	r2, r3, #32
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e00f      	b.n	8008a22 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	699a      	ldr	r2, [r3, #24]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	bf0c      	ite	eq
 8008a12:	2301      	moveq	r3, #1
 8008a14:	2300      	movne	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d0be      	beq.n	800899e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a36:	e033      	b.n	8008aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 f901 	bl	8008c44 <I2C_IsErrorOccurred>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e031      	b.n	8008ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a52:	d025      	beq.n	8008aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a54:	f7fe f872 	bl	8006b3c <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d302      	bcc.n	8008a6a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d11a      	bne.n	8008aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d013      	beq.n	8008aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7c:	f043 0220 	orr.w	r2, r3, #32
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2220      	movs	r2, #32
 8008a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e007      	b.n	8008ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d1c4      	bne.n	8008a38 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ac4:	e02f      	b.n	8008b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f8ba 	bl	8008c44 <I2C_IsErrorOccurred>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e02d      	b.n	8008b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ada:	f7fe f82f 	bl	8006b3c <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d302      	bcc.n	8008af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d11a      	bne.n	8008b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d013      	beq.n	8008b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b02:	f043 0220 	orr.w	r2, r3, #32
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2220      	movs	r2, #32
 8008b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e007      	b.n	8008b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b20      	cmp	r3, #32
 8008b32:	d1c8      	bne.n	8008ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b4c:	e06b      	b.n	8008c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 f876 	bl	8008c44 <I2C_IsErrorOccurred>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e069      	b.n	8008c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	f003 0320 	and.w	r3, r3, #32
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d138      	bne.n	8008be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d105      	bne.n	8008b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e055      	b.n	8008c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	d107      	bne.n	8008ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2210      	movs	r2, #16
 8008b9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	645a      	str	r2, [r3, #68]	@ 0x44
 8008ba6:	e002      	b.n	8008bae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6859      	ldr	r1, [r3, #4]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8008c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008bc2:	400b      	ands	r3, r1
 8008bc4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e029      	b.n	8008c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be2:	f7fd ffab 	bl	8006b3c <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d302      	bcc.n	8008bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d116      	bne.n	8008c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	f003 0304 	and.w	r3, r3, #4
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d00f      	beq.n	8008c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c0a:	f043 0220 	orr.w	r2, r3, #32
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e007      	b.n	8008c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d18c      	bne.n	8008b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	fe00e800 	.word	0xfe00e800

08008c44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08a      	sub	sp, #40	@ 0x28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d068      	beq.n	8008d42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2210      	movs	r2, #16
 8008c76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c78:	e049      	b.n	8008d0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d045      	beq.n	8008d0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c82:	f7fd ff5b 	bl	8006b3c <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d302      	bcc.n	8008c98 <I2C_IsErrorOccurred+0x54>
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d13a      	bne.n	8008d0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ca2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008caa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cba:	d121      	bne.n	8008d00 <I2C_IsErrorOccurred+0xbc>
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cc2:	d01d      	beq.n	8008d00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008cc4:	7cfb      	ldrb	r3, [r7, #19]
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d01a      	beq.n	8008d00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008cda:	f7fd ff2f 	bl	8006b3c <HAL_GetTick>
 8008cde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ce0:	e00e      	b.n	8008d00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008ce2:	f7fd ff2b 	bl	8006b3c <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	2b19      	cmp	r3, #25
 8008cee:	d907      	bls.n	8008d00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	f043 0320 	orr.w	r3, r3, #32
 8008cf6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008cfe:	e006      	b.n	8008d0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d1e9      	bne.n	8008ce2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	f003 0320 	and.w	r3, r3, #32
 8008d18:	2b20      	cmp	r3, #32
 8008d1a:	d003      	beq.n	8008d24 <I2C_IsErrorOccurred+0xe0>
 8008d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0aa      	beq.n	8008c7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d103      	bne.n	8008d34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2220      	movs	r2, #32
 8008d32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	f043 0304 	orr.w	r3, r3, #4
 8008d3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	f043 0308 	orr.w	r3, r3, #8
 8008d7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	f043 0302 	orr.w	r3, r3, #2
 8008d9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008da8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01c      	beq.n	8008df2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f7ff fdc3 	bl	8008944 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6859      	ldr	r1, [r3, #4]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <I2C_IsErrorOccurred+0x1bc>)
 8008dca:	400b      	ands	r3, r1
 8008dcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008df2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3728      	adds	r7, #40	@ 0x28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	fe00e800 	.word	0xfe00e800

08008e04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	607b      	str	r3, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	817b      	strh	r3, [r7, #10]
 8008e12:	4613      	mov	r3, r2
 8008e14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e16:	897b      	ldrh	r3, [r7, #10]
 8008e18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e1c:	7a7b      	ldrb	r3, [r7, #9]
 8008e1e:	041b      	lsls	r3, r3, #16
 8008e20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	0d5b      	lsrs	r3, r3, #21
 8008e3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008e42:	4b08      	ldr	r3, [pc, #32]	@ (8008e64 <I2C_TransferConfig+0x60>)
 8008e44:	430b      	orrs	r3, r1
 8008e46:	43db      	mvns	r3, r3
 8008e48:	ea02 0103 	and.w	r1, r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008e56:	bf00      	nop
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	03ff63ff 	.word	0x03ff63ff

08008e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	d138      	bne.n	8008ef0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d101      	bne.n	8008e8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e032      	b.n	8008ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2224      	movs	r2, #36	@ 0x24
 8008e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 0201 	bic.w	r2, r2, #1
 8008eaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008eba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0201 	orr.w	r2, r2, #1
 8008eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	e000      	b.n	8008ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ef0:	2302      	movs	r3, #2
  }
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b085      	sub	sp, #20
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	d139      	bne.n	8008f88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d101      	bne.n	8008f22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008f1e:	2302      	movs	r3, #2
 8008f20:	e033      	b.n	8008f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2224      	movs	r2, #36	@ 0x24
 8008f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0201 	bic.w	r2, r2, #1
 8008f40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008f50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	021b      	lsls	r3, r3, #8
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0201 	orr.w	r2, r2, #1
 8008f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e000      	b.n	8008f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f88:	2302      	movs	r3, #2
  }
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
	...

08008f98 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f9c:	4b05      	ldr	r3, [pc, #20]	@ (8008fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a04      	ldr	r2, [pc, #16]	@ (8008fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fa6:	6013      	str	r3, [r2, #0]
}
 8008fa8:	bf00      	nop
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40007000 	.word	0x40007000

08008fb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc8:	d102      	bne.n	8008fd0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fce:	e00b      	b.n	8008fe8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008fd0:	4b08      	ldr	r3, [pc, #32]	@ (8008ff4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fde:	d102      	bne.n	8008fe6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008fe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fe4:	e000      	b.n	8008fe8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8008fe6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	40007000 	.word	0x40007000

08008ff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d141      	bne.n	800908a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009006:	4b4b      	ldr	r3, [pc, #300]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800900e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009012:	d131      	bne.n	8009078 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009014:	4b47      	ldr	r3, [pc, #284]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901a:	4a46      	ldr	r2, [pc, #280]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800901c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009024:	4b43      	ldr	r3, [pc, #268]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800902c:	4a41      	ldr	r2, [pc, #260]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800902e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009032:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009034:	4b40      	ldr	r3, [pc, #256]	@ (8009138 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2232      	movs	r2, #50	@ 0x32
 800903a:	fb02 f303 	mul.w	r3, r2, r3
 800903e:	4a3f      	ldr	r2, [pc, #252]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009040:	fba2 2303 	umull	r2, r3, r2, r3
 8009044:	0c9b      	lsrs	r3, r3, #18
 8009046:	3301      	adds	r3, #1
 8009048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800904a:	e002      	b.n	8009052 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3b01      	subs	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009052:	4b38      	ldr	r3, [pc, #224]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800905a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800905e:	d102      	bne.n	8009066 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f2      	bne.n	800904c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009066:	4b33      	ldr	r3, [pc, #204]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800906e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009072:	d158      	bne.n	8009126 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e057      	b.n	8009128 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009078:	4b2e      	ldr	r3, [pc, #184]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800907a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800907e:	4a2d      	ldr	r2, [pc, #180]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009084:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009088:	e04d      	b.n	8009126 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009090:	d141      	bne.n	8009116 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009092:	4b28      	ldr	r3, [pc, #160]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800909a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800909e:	d131      	bne.n	8009104 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80090a0:	4b24      	ldr	r3, [pc, #144]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a6:	4a23      	ldr	r2, [pc, #140]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80090b0:	4b20      	ldr	r3, [pc, #128]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80090b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80090be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80090c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009138 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2232      	movs	r2, #50	@ 0x32
 80090c6:	fb02 f303 	mul.w	r3, r2, r3
 80090ca:	4a1c      	ldr	r2, [pc, #112]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80090cc:	fba2 2303 	umull	r2, r3, r2, r3
 80090d0:	0c9b      	lsrs	r3, r3, #18
 80090d2:	3301      	adds	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090d6:	e002      	b.n	80090de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3b01      	subs	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090de:	4b15      	ldr	r3, [pc, #84]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ea:	d102      	bne.n	80090f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f2      	bne.n	80090d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090f2:	4b10      	ldr	r3, [pc, #64]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090fe:	d112      	bne.n	8009126 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e011      	b.n	8009128 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009104:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800910a:	4a0a      	ldr	r2, [pc, #40]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800910c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009114:	e007      	b.n	8009126 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009116:	4b07      	ldr	r3, [pc, #28]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800911e:	4a05      	ldr	r2, [pc, #20]	@ (8009134 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009120:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009124:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	40007000 	.word	0x40007000
 8009138:	20000024 	.word	0x20000024
 800913c:	431bde83 	.word	0x431bde83

08009140 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009144:	4b05      	ldr	r3, [pc, #20]	@ (800915c <HAL_PWREx_EnableVddIO2+0x1c>)
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4a04      	ldr	r2, [pc, #16]	@ (800915c <HAL_PWREx_EnableVddIO2+0x1c>)
 800914a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800914e:	6053      	str	r3, [r2, #4]
}
 8009150:	bf00      	nop
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40007000 	.word	0x40007000

08009160 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d102      	bne.n	8009174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	f000 bc08 	b.w	8009984 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009174:	4b96      	ldr	r3, [pc, #600]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f003 030c 	and.w	r3, r3, #12
 800917c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800917e:	4b94      	ldr	r3, [pc, #592]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 80e4 	beq.w	800935e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_RCC_OscConfig+0x4c>
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2b0c      	cmp	r3, #12
 80091a0:	f040 808b 	bne.w	80092ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	f040 8087 	bne.w	80092ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80091ac:	4b88      	ldr	r3, [pc, #544]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d005      	beq.n	80091c4 <HAL_RCC_OscConfig+0x64>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e3df      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a1a      	ldr	r2, [r3, #32]
 80091c8:	4b81      	ldr	r3, [pc, #516]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <HAL_RCC_OscConfig+0x7e>
 80091d4:	4b7e      	ldr	r3, [pc, #504]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091dc:	e005      	b.n	80091ea <HAL_RCC_OscConfig+0x8a>
 80091de:	4b7c      	ldr	r3, [pc, #496]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80091e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091e4:	091b      	lsrs	r3, r3, #4
 80091e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d223      	bcs.n	8009236 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fdcc 	bl	8009d90 <RCC_SetFlashLatencyFromMSIRange>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e3c0      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009202:	4b73      	ldr	r3, [pc, #460]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a72      	ldr	r2, [pc, #456]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009208:	f043 0308 	orr.w	r3, r3, #8
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	4b70      	ldr	r3, [pc, #448]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	496d      	ldr	r1, [pc, #436]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 800921c:	4313      	orrs	r3, r2
 800921e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009220:	4b6b      	ldr	r3, [pc, #428]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	4968      	ldr	r1, [pc, #416]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009230:	4313      	orrs	r3, r2
 8009232:	604b      	str	r3, [r1, #4]
 8009234:	e025      	b.n	8009282 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009236:	4b66      	ldr	r3, [pc, #408]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a65      	ldr	r2, [pc, #404]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 800923c:	f043 0308 	orr.w	r3, r3, #8
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	4b63      	ldr	r3, [pc, #396]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	4960      	ldr	r1, [pc, #384]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009250:	4313      	orrs	r3, r2
 8009252:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009254:	4b5e      	ldr	r3, [pc, #376]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	69db      	ldr	r3, [r3, #28]
 8009260:	021b      	lsls	r3, r3, #8
 8009262:	495b      	ldr	r1, [pc, #364]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009264:	4313      	orrs	r3, r2
 8009266:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d109      	bne.n	8009282 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fd8c 	bl	8009d90 <RCC_SetFlashLatencyFromMSIRange>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e380      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009282:	f000 fcc1 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 8009286:	4602      	mov	r2, r0
 8009288:	4b51      	ldr	r3, [pc, #324]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	091b      	lsrs	r3, r3, #4
 800928e:	f003 030f 	and.w	r3, r3, #15
 8009292:	4950      	ldr	r1, [pc, #320]	@ (80093d4 <HAL_RCC_OscConfig+0x274>)
 8009294:	5ccb      	ldrb	r3, [r1, r3]
 8009296:	f003 031f 	and.w	r3, r3, #31
 800929a:	fa22 f303 	lsr.w	r3, r2, r3
 800929e:	4a4e      	ldr	r2, [pc, #312]	@ (80093d8 <HAL_RCC_OscConfig+0x278>)
 80092a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80092a2:	4b4e      	ldr	r3, [pc, #312]	@ (80093dc <HAL_RCC_OscConfig+0x27c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fd fbf8 	bl	8006a9c <HAL_InitTick>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d052      	beq.n	800935c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	e364      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d032      	beq.n	8009328 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80092c2:	4b43      	ldr	r3, [pc, #268]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a42      	ldr	r2, [pc, #264]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80092c8:	f043 0301 	orr.w	r3, r3, #1
 80092cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80092ce:	f7fd fc35 	bl	8006b3c <HAL_GetTick>
 80092d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80092d4:	e008      	b.n	80092e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80092d6:	f7fd fc31 	bl	8006b3c <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e34d      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80092e8:	4b39      	ldr	r3, [pc, #228]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0f0      	beq.n	80092d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80092f4:	4b36      	ldr	r3, [pc, #216]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a35      	ldr	r2, [pc, #212]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80092fa:	f043 0308 	orr.w	r3, r3, #8
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	4b33      	ldr	r3, [pc, #204]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	4930      	ldr	r1, [pc, #192]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 800930e:	4313      	orrs	r3, r2
 8009310:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009312:	4b2f      	ldr	r3, [pc, #188]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	021b      	lsls	r3, r3, #8
 8009320:	492b      	ldr	r1, [pc, #172]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009322:	4313      	orrs	r3, r2
 8009324:	604b      	str	r3, [r1, #4]
 8009326:	e01a      	b.n	800935e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009328:	4b29      	ldr	r3, [pc, #164]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a28      	ldr	r2, [pc, #160]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 800932e:	f023 0301 	bic.w	r3, r3, #1
 8009332:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009334:	f7fd fc02 	bl	8006b3c <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800933a:	e008      	b.n	800934e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800933c:	f7fd fbfe 	bl	8006b3c <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d901      	bls.n	800934e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e31a      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800934e:	4b20      	ldr	r3, [pc, #128]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1f0      	bne.n	800933c <HAL_RCC_OscConfig+0x1dc>
 800935a:	e000      	b.n	800935e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800935c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d073      	beq.n	8009452 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b08      	cmp	r3, #8
 800936e:	d005      	beq.n	800937c <HAL_RCC_OscConfig+0x21c>
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	2b0c      	cmp	r3, #12
 8009374:	d10e      	bne.n	8009394 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b03      	cmp	r3, #3
 800937a:	d10b      	bne.n	8009394 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800937c:	4b14      	ldr	r3, [pc, #80]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d063      	beq.n	8009450 <HAL_RCC_OscConfig+0x2f0>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d15f      	bne.n	8009450 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e2f7      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800939c:	d106      	bne.n	80093ac <HAL_RCC_OscConfig+0x24c>
 800939e:	4b0c      	ldr	r3, [pc, #48]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a0b      	ldr	r2, [pc, #44]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80093a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	e025      	b.n	80093f8 <HAL_RCC_OscConfig+0x298>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093b4:	d114      	bne.n	80093e0 <HAL_RCC_OscConfig+0x280>
 80093b6:	4b06      	ldr	r3, [pc, #24]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a05      	ldr	r2, [pc, #20]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80093bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	4b03      	ldr	r3, [pc, #12]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a02      	ldr	r2, [pc, #8]	@ (80093d0 <HAL_RCC_OscConfig+0x270>)
 80093c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	e013      	b.n	80093f8 <HAL_RCC_OscConfig+0x298>
 80093d0:	40021000 	.word	0x40021000
 80093d4:	08018128 	.word	0x08018128
 80093d8:	20000024 	.word	0x20000024
 80093dc:	20000028 	.word	0x20000028
 80093e0:	4ba0      	ldr	r3, [pc, #640]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a9f      	ldr	r2, [pc, #636]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80093e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	4b9d      	ldr	r3, [pc, #628]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a9c      	ldr	r2, [pc, #624]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80093f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d013      	beq.n	8009428 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009400:	f7fd fb9c 	bl	8006b3c <HAL_GetTick>
 8009404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009408:	f7fd fb98 	bl	8006b3c <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b64      	cmp	r3, #100	@ 0x64
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e2b4      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800941a:	4b92      	ldr	r3, [pc, #584]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0f0      	beq.n	8009408 <HAL_RCC_OscConfig+0x2a8>
 8009426:	e014      	b.n	8009452 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009428:	f7fd fb88 	bl	8006b3c <HAL_GetTick>
 800942c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009430:	f7fd fb84 	bl	8006b3c <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b64      	cmp	r3, #100	@ 0x64
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e2a0      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009442:	4b88      	ldr	r3, [pc, #544]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f0      	bne.n	8009430 <HAL_RCC_OscConfig+0x2d0>
 800944e:	e000      	b.n	8009452 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d060      	beq.n	8009520 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b04      	cmp	r3, #4
 8009462:	d005      	beq.n	8009470 <HAL_RCC_OscConfig+0x310>
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	2b0c      	cmp	r3, #12
 8009468:	d119      	bne.n	800949e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b02      	cmp	r3, #2
 800946e:	d116      	bne.n	800949e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009470:	4b7c      	ldr	r3, [pc, #496]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <HAL_RCC_OscConfig+0x328>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e27d      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009488:	4b76      	ldr	r3, [pc, #472]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	061b      	lsls	r3, r3, #24
 8009496:	4973      	ldr	r1, [pc, #460]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009498:	4313      	orrs	r3, r2
 800949a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800949c:	e040      	b.n	8009520 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d023      	beq.n	80094ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094a6:	4b6f      	ldr	r3, [pc, #444]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a6e      	ldr	r2, [pc, #440]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80094ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b2:	f7fd fb43 	bl	8006b3c <HAL_GetTick>
 80094b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094b8:	e008      	b.n	80094cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094ba:	f7fd fb3f 	bl	8006b3c <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d901      	bls.n	80094cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e25b      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094cc:	4b65      	ldr	r3, [pc, #404]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0f0      	beq.n	80094ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094d8:	4b62      	ldr	r3, [pc, #392]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	061b      	lsls	r3, r3, #24
 80094e6:	495f      	ldr	r1, [pc, #380]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	604b      	str	r3, [r1, #4]
 80094ec:	e018      	b.n	8009520 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094ee:	4b5d      	ldr	r3, [pc, #372]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a5c      	ldr	r2, [pc, #368]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80094f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094fa:	f7fd fb1f 	bl	8006b3c <HAL_GetTick>
 80094fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009500:	e008      	b.n	8009514 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009502:	f7fd fb1b 	bl	8006b3c <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d901      	bls.n	8009514 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e237      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009514:	4b53      	ldr	r3, [pc, #332]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f0      	bne.n	8009502 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0308 	and.w	r3, r3, #8
 8009528:	2b00      	cmp	r3, #0
 800952a:	d03c      	beq.n	80095a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01c      	beq.n	800956e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009534:	4b4b      	ldr	r3, [pc, #300]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800953a:	4a4a      	ldr	r2, [pc, #296]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 800953c:	f043 0301 	orr.w	r3, r3, #1
 8009540:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009544:	f7fd fafa 	bl	8006b3c <HAL_GetTick>
 8009548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800954a:	e008      	b.n	800955e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800954c:	f7fd faf6 	bl	8006b3c <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	2b02      	cmp	r3, #2
 8009558:	d901      	bls.n	800955e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e212      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800955e:	4b41      	ldr	r3, [pc, #260]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009564:	f003 0302 	and.w	r3, r3, #2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0ef      	beq.n	800954c <HAL_RCC_OscConfig+0x3ec>
 800956c:	e01b      	b.n	80095a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800956e:	4b3d      	ldr	r3, [pc, #244]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009574:	4a3b      	ldr	r2, [pc, #236]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800957e:	f7fd fadd 	bl	8006b3c <HAL_GetTick>
 8009582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009584:	e008      	b.n	8009598 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009586:	f7fd fad9 	bl	8006b3c <HAL_GetTick>
 800958a:	4602      	mov	r2, r0
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	2b02      	cmp	r3, #2
 8009592:	d901      	bls.n	8009598 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e1f5      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009598:	4b32      	ldr	r3, [pc, #200]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 800959a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1ef      	bne.n	8009586 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 80a6 	beq.w	8009700 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095b4:	2300      	movs	r3, #0
 80095b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80095b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80095ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10d      	bne.n	80095e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095c4:	4b27      	ldr	r3, [pc, #156]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80095c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c8:	4a26      	ldr	r2, [pc, #152]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80095ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80095d0:	4b24      	ldr	r3, [pc, #144]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 80095d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095d8:	60bb      	str	r3, [r7, #8]
 80095da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095dc:	2301      	movs	r3, #1
 80095de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095e0:	4b21      	ldr	r3, [pc, #132]	@ (8009668 <HAL_RCC_OscConfig+0x508>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d118      	bne.n	800961e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009668 <HAL_RCC_OscConfig+0x508>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009668 <HAL_RCC_OscConfig+0x508>)
 80095f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095f8:	f7fd faa0 	bl	8006b3c <HAL_GetTick>
 80095fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095fe:	e008      	b.n	8009612 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009600:	f7fd fa9c 	bl	8006b3c <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b02      	cmp	r3, #2
 800960c:	d901      	bls.n	8009612 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e1b8      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009612:	4b15      	ldr	r3, [pc, #84]	@ (8009668 <HAL_RCC_OscConfig+0x508>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0f0      	beq.n	8009600 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d108      	bne.n	8009638 <HAL_RCC_OscConfig+0x4d8>
 8009626:	4b0f      	ldr	r3, [pc, #60]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800962c:	4a0d      	ldr	r2, [pc, #52]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009636:	e029      	b.n	800968c <HAL_RCC_OscConfig+0x52c>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	2b05      	cmp	r3, #5
 800963e:	d115      	bne.n	800966c <HAL_RCC_OscConfig+0x50c>
 8009640:	4b08      	ldr	r3, [pc, #32]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009646:	4a07      	ldr	r2, [pc, #28]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009648:	f043 0304 	orr.w	r3, r3, #4
 800964c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009656:	4a03      	ldr	r2, [pc, #12]	@ (8009664 <HAL_RCC_OscConfig+0x504>)
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009660:	e014      	b.n	800968c <HAL_RCC_OscConfig+0x52c>
 8009662:	bf00      	nop
 8009664:	40021000 	.word	0x40021000
 8009668:	40007000 	.word	0x40007000
 800966c:	4b9d      	ldr	r3, [pc, #628]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009672:	4a9c      	ldr	r2, [pc, #624]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009674:	f023 0301 	bic.w	r3, r3, #1
 8009678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800967c:	4b99      	ldr	r3, [pc, #612]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009682:	4a98      	ldr	r2, [pc, #608]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009684:	f023 0304 	bic.w	r3, r3, #4
 8009688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d016      	beq.n	80096c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009694:	f7fd fa52 	bl	8006b3c <HAL_GetTick>
 8009698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800969a:	e00a      	b.n	80096b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800969c:	f7fd fa4e 	bl	8006b3c <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d901      	bls.n	80096b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e168      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096b2:	4b8c      	ldr	r3, [pc, #560]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80096b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0ed      	beq.n	800969c <HAL_RCC_OscConfig+0x53c>
 80096c0:	e015      	b.n	80096ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096c2:	f7fd fa3b 	bl	8006b3c <HAL_GetTick>
 80096c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096c8:	e00a      	b.n	80096e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096ca:	f7fd fa37 	bl	8006b3c <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096d8:	4293      	cmp	r3, r2
 80096da:	d901      	bls.n	80096e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e151      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096e0:	4b80      	ldr	r3, [pc, #512]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80096e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1ed      	bne.n	80096ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096ee:	7ffb      	ldrb	r3, [r7, #31]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d105      	bne.n	8009700 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096f4:	4b7b      	ldr	r3, [pc, #492]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80096f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f8:	4a7a      	ldr	r2, [pc, #488]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80096fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	2b00      	cmp	r3, #0
 800970a:	d03c      	beq.n	8009786 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01c      	beq.n	800974e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009714:	4b73      	ldr	r3, [pc, #460]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800971a:	4a72      	ldr	r2, [pc, #456]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800971c:	f043 0301 	orr.w	r3, r3, #1
 8009720:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009724:	f7fd fa0a 	bl	8006b3c <HAL_GetTick>
 8009728:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800972a:	e008      	b.n	800973e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800972c:	f7fd fa06 	bl	8006b3c <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	2b02      	cmp	r3, #2
 8009738:	d901      	bls.n	800973e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e122      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800973e:	4b69      	ldr	r3, [pc, #420]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009740:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d0ef      	beq.n	800972c <HAL_RCC_OscConfig+0x5cc>
 800974c:	e01b      	b.n	8009786 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800974e:	4b65      	ldr	r3, [pc, #404]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009750:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009754:	4a63      	ldr	r2, [pc, #396]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009756:	f023 0301 	bic.w	r3, r3, #1
 800975a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800975e:	f7fd f9ed 	bl	8006b3c <HAL_GetTick>
 8009762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009764:	e008      	b.n	8009778 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009766:	f7fd f9e9 	bl	8006b3c <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	2b02      	cmp	r3, #2
 8009772:	d901      	bls.n	8009778 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e105      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009778:	4b5a      	ldr	r3, [pc, #360]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800977a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800977e:	f003 0302 	and.w	r3, r3, #2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1ef      	bne.n	8009766 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 80f9 	beq.w	8009982 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009794:	2b02      	cmp	r3, #2
 8009796:	f040 80cf 	bne.w	8009938 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800979a:	4b52      	ldr	r3, [pc, #328]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f003 0203 	and.w	r2, r3, #3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d12c      	bne.n	8009808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b8:	3b01      	subs	r3, #1
 80097ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80097bc:	429a      	cmp	r2, r3
 80097be:	d123      	bne.n	8009808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d11b      	bne.n	8009808 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80097dc:	429a      	cmp	r2, r3
 80097de:	d113      	bne.n	8009808 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	3b01      	subs	r3, #1
 80097ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d109      	bne.n	8009808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	3b01      	subs	r3, #1
 8009802:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009804:	429a      	cmp	r2, r3
 8009806:	d071      	beq.n	80098ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b0c      	cmp	r3, #12
 800980c:	d068      	beq.n	80098e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800980e:	4b35      	ldr	r3, [pc, #212]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800981a:	4b32      	ldr	r3, [pc, #200]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e0ac      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800982a:	4b2e      	ldr	r3, [pc, #184]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a2d      	ldr	r2, [pc, #180]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009834:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009836:	f7fd f981 	bl	8006b3c <HAL_GetTick>
 800983a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800983c:	e008      	b.n	8009850 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800983e:	f7fd f97d 	bl	8006b3c <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d901      	bls.n	8009850 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e099      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009850:	4b24      	ldr	r3, [pc, #144]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f0      	bne.n	800983e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800985c:	4b21      	ldr	r3, [pc, #132]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800985e:	68da      	ldr	r2, [r3, #12]
 8009860:	4b21      	ldr	r3, [pc, #132]	@ (80098e8 <HAL_RCC_OscConfig+0x788>)
 8009862:	4013      	ands	r3, r2
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800986c:	3a01      	subs	r2, #1
 800986e:	0112      	lsls	r2, r2, #4
 8009870:	4311      	orrs	r1, r2
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009876:	0212      	lsls	r2, r2, #8
 8009878:	4311      	orrs	r1, r2
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800987e:	0852      	lsrs	r2, r2, #1
 8009880:	3a01      	subs	r2, #1
 8009882:	0552      	lsls	r2, r2, #21
 8009884:	4311      	orrs	r1, r2
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800988a:	0852      	lsrs	r2, r2, #1
 800988c:	3a01      	subs	r2, #1
 800988e:	0652      	lsls	r2, r2, #25
 8009890:	4311      	orrs	r1, r2
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009896:	06d2      	lsls	r2, r2, #27
 8009898:	430a      	orrs	r2, r1
 800989a:	4912      	ldr	r1, [pc, #72]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 800989c:	4313      	orrs	r3, r2
 800989e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80098a0:	4b10      	ldr	r3, [pc, #64]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a0f      	ldr	r2, [pc, #60]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80098a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80098aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80098ac:	4b0d      	ldr	r3, [pc, #52]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	4a0c      	ldr	r2, [pc, #48]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80098b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80098b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80098b8:	f7fd f940 	bl	8006b3c <HAL_GetTick>
 80098bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098be:	e008      	b.n	80098d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098c0:	f7fd f93c 	bl	8006b3c <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d901      	bls.n	80098d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e058      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098d2:	4b04      	ldr	r3, [pc, #16]	@ (80098e4 <HAL_RCC_OscConfig+0x784>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0f0      	beq.n	80098c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80098de:	e050      	b.n	8009982 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e04f      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
 80098e4:	40021000 	.word	0x40021000
 80098e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098ec:	4b27      	ldr	r3, [pc, #156]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d144      	bne.n	8009982 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80098f8:	4b24      	ldr	r3, [pc, #144]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a23      	ldr	r2, [pc, #140]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 80098fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009902:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009904:	4b21      	ldr	r3, [pc, #132]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	4a20      	ldr	r2, [pc, #128]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 800990a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800990e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009910:	f7fd f914 	bl	8006b3c <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009918:	f7fd f910 	bl	8006b3c <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e02c      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800992a:	4b18      	ldr	r3, [pc, #96]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0f0      	beq.n	8009918 <HAL_RCC_OscConfig+0x7b8>
 8009936:	e024      	b.n	8009982 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	2b0c      	cmp	r3, #12
 800993c:	d01f      	beq.n	800997e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800993e:	4b13      	ldr	r3, [pc, #76]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a12      	ldr	r2, [pc, #72]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 8009944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800994a:	f7fd f8f7 	bl	8006b3c <HAL_GetTick>
 800994e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009950:	e008      	b.n	8009964 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009952:	f7fd f8f3 	bl	8006b3c <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	2b02      	cmp	r3, #2
 800995e:	d901      	bls.n	8009964 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e00f      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009964:	4b09      	ldr	r3, [pc, #36]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1f0      	bne.n	8009952 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009970:	4b06      	ldr	r3, [pc, #24]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	4905      	ldr	r1, [pc, #20]	@ (800998c <HAL_RCC_OscConfig+0x82c>)
 8009976:	4b06      	ldr	r3, [pc, #24]	@ (8009990 <HAL_RCC_OscConfig+0x830>)
 8009978:	4013      	ands	r3, r2
 800997a:	60cb      	str	r3, [r1, #12]
 800997c:	e001      	b.n	8009982 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e000      	b.n	8009984 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	40021000 	.word	0x40021000
 8009990:	feeefffc 	.word	0xfeeefffc

08009994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e11d      	b.n	8009be8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099ac:	4b90      	ldr	r3, [pc, #576]	@ (8009bf0 <HAL_RCC_ClockConfig+0x25c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d910      	bls.n	80099dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ba:	4b8d      	ldr	r3, [pc, #564]	@ (8009bf0 <HAL_RCC_ClockConfig+0x25c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f023 020f 	bic.w	r2, r3, #15
 80099c2:	498b      	ldr	r1, [pc, #556]	@ (8009bf0 <HAL_RCC_ClockConfig+0x25c>)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ca:	4b89      	ldr	r3, [pc, #548]	@ (8009bf0 <HAL_RCC_ClockConfig+0x25c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 030f 	and.w	r3, r3, #15
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d001      	beq.n	80099dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e105      	b.n	8009be8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0302 	and.w	r3, r3, #2
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d010      	beq.n	8009a0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	4b81      	ldr	r3, [pc, #516]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d908      	bls.n	8009a0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099f8:	4b7e      	ldr	r3, [pc, #504]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	497b      	ldr	r1, [pc, #492]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d079      	beq.n	8009b0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d11e      	bne.n	8009a5c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a1e:	4b75      	ldr	r3, [pc, #468]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e0dc      	b.n	8009be8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009a2e:	f000 fa09 	bl	8009e44 <RCC_GetSysClockFreqFromPLLSource>
 8009a32:	4603      	mov	r3, r0
 8009a34:	4a70      	ldr	r2, [pc, #448]	@ (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d946      	bls.n	8009ac8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d140      	bne.n	8009ac8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009a46:	4b6b      	ldr	r3, [pc, #428]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a4e:	4a69      	ldr	r2, [pc, #420]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009a56:	2380      	movs	r3, #128	@ 0x80
 8009a58:	617b      	str	r3, [r7, #20]
 8009a5a:	e035      	b.n	8009ac8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d107      	bne.n	8009a74 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a64:	4b63      	ldr	r3, [pc, #396]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d115      	bne.n	8009a9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e0b9      	b.n	8009be8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d107      	bne.n	8009a8c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e0ad      	b.n	8009be8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a8c:	4b59      	ldr	r3, [pc, #356]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e0a5      	b.n	8009be8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009a9c:	f000 f8b4 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4a55      	ldr	r2, [pc, #340]	@ (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d90f      	bls.n	8009ac8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009aa8:	4b52      	ldr	r3, [pc, #328]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d109      	bne.n	8009ac8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009abc:	4a4d      	ldr	r2, [pc, #308]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ac2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009ac4:	2380      	movs	r3, #128	@ 0x80
 8009ac6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f023 0203 	bic.w	r2, r3, #3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4947      	ldr	r1, [pc, #284]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ada:	f7fd f82f 	bl	8006b3c <HAL_GetTick>
 8009ade:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ae0:	e00a      	b.n	8009af8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ae2:	f7fd f82b 	bl	8006b3c <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e077      	b.n	8009be8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009af8:	4b3e      	ldr	r3, [pc, #248]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	f003 020c 	and.w	r2, r3, #12
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d1eb      	bne.n	8009ae2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b80      	cmp	r3, #128	@ 0x80
 8009b0e:	d105      	bne.n	8009b1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009b10:	4b38      	ldr	r3, [pc, #224]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	4a37      	ldr	r2, [pc, #220]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 0302 	and.w	r3, r3, #2
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d010      	beq.n	8009b4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	4b31      	ldr	r3, [pc, #196]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d208      	bcs.n	8009b4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b38:	4b2e      	ldr	r3, [pc, #184]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	492b      	ldr	r1, [pc, #172]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b4a:	4b29      	ldr	r3, [pc, #164]	@ (8009bf0 <HAL_RCC_ClockConfig+0x25c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 030f 	and.w	r3, r3, #15
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d210      	bcs.n	8009b7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b58:	4b25      	ldr	r3, [pc, #148]	@ (8009bf0 <HAL_RCC_ClockConfig+0x25c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f023 020f 	bic.w	r2, r3, #15
 8009b60:	4923      	ldr	r1, [pc, #140]	@ (8009bf0 <HAL_RCC_ClockConfig+0x25c>)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b68:	4b21      	ldr	r3, [pc, #132]	@ (8009bf0 <HAL_RCC_ClockConfig+0x25c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 030f 	and.w	r3, r3, #15
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d001      	beq.n	8009b7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e036      	b.n	8009be8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d008      	beq.n	8009b98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b86:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	4918      	ldr	r1, [pc, #96]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d009      	beq.n	8009bb8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ba4:	4b13      	ldr	r3, [pc, #76]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	4910      	ldr	r1, [pc, #64]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009bb8:	f000 f826 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	091b      	lsrs	r3, r3, #4
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	490c      	ldr	r1, [pc, #48]	@ (8009bfc <HAL_RCC_ClockConfig+0x268>)
 8009bca:	5ccb      	ldrb	r3, [r1, r3]
 8009bcc:	f003 031f 	and.w	r3, r3, #31
 8009bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8009c00 <HAL_RCC_ClockConfig+0x26c>)
 8009bd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c04 <HAL_RCC_ClockConfig+0x270>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fc ff5d 	bl	8006a9c <HAL_InitTick>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]

  return status;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	40022000 	.word	0x40022000
 8009bf4:	40021000 	.word	0x40021000
 8009bf8:	04c4b400 	.word	0x04c4b400
 8009bfc:	08018128 	.word	0x08018128
 8009c00:	20000024 	.word	0x20000024
 8009c04:	20000028 	.word	0x20000028

08009c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b089      	sub	sp, #36	@ 0x24
 8009c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61fb      	str	r3, [r7, #28]
 8009c12:	2300      	movs	r3, #0
 8009c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c16:	4b3e      	ldr	r3, [pc, #248]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f003 030c 	and.w	r3, r3, #12
 8009c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c20:	4b3b      	ldr	r3, [pc, #236]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d005      	beq.n	8009c3c <HAL_RCC_GetSysClockFreq+0x34>
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b0c      	cmp	r3, #12
 8009c34:	d121      	bne.n	8009c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d11e      	bne.n	8009c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009c3c:	4b34      	ldr	r3, [pc, #208]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0308 	and.w	r3, r3, #8
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d107      	bne.n	8009c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009c48:	4b31      	ldr	r3, [pc, #196]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c4e:	0a1b      	lsrs	r3, r3, #8
 8009c50:	f003 030f 	and.w	r3, r3, #15
 8009c54:	61fb      	str	r3, [r7, #28]
 8009c56:	e005      	b.n	8009c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009c58:	4b2d      	ldr	r3, [pc, #180]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	091b      	lsrs	r3, r3, #4
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009c64:	4a2b      	ldr	r2, [pc, #172]	@ (8009d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10d      	bne.n	8009c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c78:	e00a      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d102      	bne.n	8009c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c80:	4b25      	ldr	r3, [pc, #148]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8009c82:	61bb      	str	r3, [r7, #24]
 8009c84:	e004      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d101      	bne.n	8009c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c8c:	4b23      	ldr	r3, [pc, #140]	@ (8009d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8009c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2b0c      	cmp	r3, #12
 8009c94:	d134      	bne.n	8009d00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c96:	4b1e      	ldr	r3, [pc, #120]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d003      	beq.n	8009cae <HAL_RCC_GetSysClockFreq+0xa6>
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d003      	beq.n	8009cb4 <HAL_RCC_GetSysClockFreq+0xac>
 8009cac:	e005      	b.n	8009cba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009cae:	4b1a      	ldr	r3, [pc, #104]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8009cb0:	617b      	str	r3, [r7, #20]
      break;
 8009cb2:	e005      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009cb4:	4b19      	ldr	r3, [pc, #100]	@ (8009d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8009cb6:	617b      	str	r3, [r7, #20]
      break;
 8009cb8:	e002      	b.n	8009cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	617b      	str	r3, [r7, #20]
      break;
 8009cbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009cc0:	4b13      	ldr	r3, [pc, #76]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	091b      	lsrs	r3, r3, #4
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	3301      	adds	r3, #1
 8009ccc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009cce:	4b10      	ldr	r3, [pc, #64]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	0a1b      	lsrs	r3, r3, #8
 8009cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	fb03 f202 	mul.w	r2, r3, r2
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8009d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	0e5b      	lsrs	r3, r3, #25
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009d00:	69bb      	ldr	r3, [r7, #24]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3724      	adds	r7, #36	@ 0x24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	40021000 	.word	0x40021000
 8009d14:	08018140 	.word	0x08018140
 8009d18:	00f42400 	.word	0x00f42400
 8009d1c:	007a1200 	.word	0x007a1200

08009d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d24:	4b03      	ldr	r3, [pc, #12]	@ (8009d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d26:	681b      	ldr	r3, [r3, #0]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000024 	.word	0x20000024

08009d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009d3c:	f7ff fff0 	bl	8009d20 <HAL_RCC_GetHCLKFreq>
 8009d40:	4602      	mov	r2, r0
 8009d42:	4b06      	ldr	r3, [pc, #24]	@ (8009d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	0a1b      	lsrs	r3, r3, #8
 8009d48:	f003 0307 	and.w	r3, r3, #7
 8009d4c:	4904      	ldr	r1, [pc, #16]	@ (8009d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d4e:	5ccb      	ldrb	r3, [r1, r3]
 8009d50:	f003 031f 	and.w	r3, r3, #31
 8009d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	40021000 	.word	0x40021000
 8009d60:	08018138 	.word	0x08018138

08009d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009d68:	f7ff ffda 	bl	8009d20 <HAL_RCC_GetHCLKFreq>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	4b06      	ldr	r3, [pc, #24]	@ (8009d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	0adb      	lsrs	r3, r3, #11
 8009d74:	f003 0307 	and.w	r3, r3, #7
 8009d78:	4904      	ldr	r1, [pc, #16]	@ (8009d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d7a:	5ccb      	ldrb	r3, [r1, r3]
 8009d7c:	f003 031f 	and.w	r3, r3, #31
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	40021000 	.word	0x40021000
 8009d8c:	08018138 	.word	0x08018138

08009d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009d9c:	4b27      	ldr	r3, [pc, #156]	@ (8009e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d003      	beq.n	8009db0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009da8:	f7ff f906 	bl	8008fb8 <HAL_PWREx_GetVoltageRange>
 8009dac:	6178      	str	r0, [r7, #20]
 8009dae:	e014      	b.n	8009dda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009db0:	4b22      	ldr	r3, [pc, #136]	@ (8009e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db4:	4a21      	ldr	r2, [pc, #132]	@ (8009e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8009e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009dc8:	f7ff f8f6 	bl	8008fb8 <HAL_PWREx_GetVoltageRange>
 8009dcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009dce:	4b1b      	ldr	r3, [pc, #108]	@ (8009e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de0:	d10b      	bne.n	8009dfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b80      	cmp	r3, #128	@ 0x80
 8009de6:	d913      	bls.n	8009e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2ba0      	cmp	r3, #160	@ 0xa0
 8009dec:	d902      	bls.n	8009df4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009dee:	2302      	movs	r3, #2
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	e00d      	b.n	8009e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009df4:	2301      	movs	r3, #1
 8009df6:	613b      	str	r3, [r7, #16]
 8009df8:	e00a      	b.n	8009e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dfe:	d902      	bls.n	8009e06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009e00:	2302      	movs	r3, #2
 8009e02:	613b      	str	r3, [r7, #16]
 8009e04:	e004      	b.n	8009e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b70      	cmp	r3, #112	@ 0x70
 8009e0a:	d101      	bne.n	8009e10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009e10:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f023 020f 	bic.w	r2, r3, #15
 8009e18:	4909      	ldr	r1, [pc, #36]	@ (8009e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009e20:	4b07      	ldr	r3, [pc, #28]	@ (8009e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 030f 	and.w	r3, r3, #15
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d001      	beq.n	8009e32 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	40021000 	.word	0x40021000
 8009e40:	40022000 	.word	0x40022000

08009e44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8009f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f003 0303 	and.w	r3, r3, #3
 8009e52:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d00b      	beq.n	8009e72 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d825      	bhi.n	8009eac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d008      	beq.n	8009e78 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d11f      	bne.n	8009eac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009e6c:	4b25      	ldr	r3, [pc, #148]	@ (8009f04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009e6e:	613b      	str	r3, [r7, #16]
    break;
 8009e70:	e01f      	b.n	8009eb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009e72:	4b25      	ldr	r3, [pc, #148]	@ (8009f08 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009e74:	613b      	str	r3, [r7, #16]
    break;
 8009e76:	e01c      	b.n	8009eb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009e78:	4b21      	ldr	r3, [pc, #132]	@ (8009f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0308 	and.w	r3, r3, #8
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d107      	bne.n	8009e94 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009e84:	4b1e      	ldr	r3, [pc, #120]	@ (8009f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e8a:	0a1b      	lsrs	r3, r3, #8
 8009e8c:	f003 030f 	and.w	r3, r3, #15
 8009e90:	617b      	str	r3, [r7, #20]
 8009e92:	e005      	b.n	8009ea0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e94:	4b1a      	ldr	r3, [pc, #104]	@ (8009f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	091b      	lsrs	r3, r3, #4
 8009e9a:	f003 030f 	and.w	r3, r3, #15
 8009e9e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f0c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea8:	613b      	str	r3, [r7, #16]
    break;
 8009eaa:	e002      	b.n	8009eb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	613b      	str	r3, [r7, #16]
    break;
 8009eb0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009eb2:	4b13      	ldr	r3, [pc, #76]	@ (8009f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	091b      	lsrs	r3, r3, #4
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8009f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	0a1b      	lsrs	r3, r3, #8
 8009ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	fb03 f202 	mul.w	r2, r3, r2
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ed8:	4b09      	ldr	r3, [pc, #36]	@ (8009f00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	0e5b      	lsrs	r3, r3, #25
 8009ede:	f003 0303 	and.w	r3, r3, #3
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009ef2:	683b      	ldr	r3, [r7, #0]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	371c      	adds	r7, #28
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	40021000 	.word	0x40021000
 8009f04:	00f42400 	.word	0x00f42400
 8009f08:	007a1200 	.word	0x007a1200
 8009f0c:	08018140 	.word	0x08018140

08009f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009f18:	2300      	movs	r3, #0
 8009f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d040      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f30:	2b80      	cmp	r3, #128	@ 0x80
 8009f32:	d02a      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009f34:	2b80      	cmp	r3, #128	@ 0x80
 8009f36:	d825      	bhi.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009f38:	2b60      	cmp	r3, #96	@ 0x60
 8009f3a:	d026      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009f3c:	2b60      	cmp	r3, #96	@ 0x60
 8009f3e:	d821      	bhi.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009f40:	2b40      	cmp	r3, #64	@ 0x40
 8009f42:	d006      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009f44:	2b40      	cmp	r3, #64	@ 0x40
 8009f46:	d81d      	bhi.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d009      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009f4c:	2b20      	cmp	r3, #32
 8009f4e:	d010      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009f50:	e018      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009f52:	4b89      	ldr	r3, [pc, #548]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	4a88      	ldr	r2, [pc, #544]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f5c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009f5e:	e015      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3304      	adds	r3, #4
 8009f64:	2100      	movs	r1, #0
 8009f66:	4618      	mov	r0, r3
 8009f68:	f001 fa34 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009f70:	e00c      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3320      	adds	r3, #32
 8009f76:	2100      	movs	r1, #0
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f001 fb1f 	bl	800b5bc <RCCEx_PLLSAI2_Config>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009f82:	e003      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	74fb      	strb	r3, [r7, #19]
      break;
 8009f88:	e000      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f8c:	7cfb      	ldrb	r3, [r7, #19]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f92:	4b79      	ldr	r3, [pc, #484]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f98:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fa0:	4975      	ldr	r1, [pc, #468]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8009fa8:	e001      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009faa:	7cfb      	ldrb	r3, [r7, #19]
 8009fac:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d047      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fc2:	d030      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fc8:	d82a      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fce:	d02a      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fd4:	d824      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fda:	d008      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fe0:	d81e      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00a      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fea:	d010      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009fec:	e018      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009fee:	4b62      	ldr	r3, [pc, #392]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	4a61      	ldr	r2, [pc, #388]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ff8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009ffa:	e015      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3304      	adds	r3, #4
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f001 f9e6 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a00c:	e00c      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3320      	adds	r3, #32
 800a012:	2100      	movs	r1, #0
 800a014:	4618      	mov	r0, r3
 800a016:	f001 fad1 	bl	800b5bc <RCCEx_PLLSAI2_Config>
 800a01a:	4603      	mov	r3, r0
 800a01c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a01e:	e003      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	74fb      	strb	r3, [r7, #19]
      break;
 800a024:	e000      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a026:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a028:	7cfb      	ldrb	r3, [r7, #19]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10b      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a02e:	4b52      	ldr	r3, [pc, #328]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a030:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a034:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a03c:	494e      	ldr	r1, [pc, #312]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800a044:	e001      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a046:	7cfb      	ldrb	r3, [r7, #19]
 800a048:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 809f 	beq.w	800a196 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a058:	2300      	movs	r3, #0
 800a05a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a05c:	4b46      	ldr	r3, [pc, #280]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a068:	2301      	movs	r3, #1
 800a06a:	e000      	b.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a06c:	2300      	movs	r3, #0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00d      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a072:	4b41      	ldr	r3, [pc, #260]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a076:	4a40      	ldr	r2, [pc, #256]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a07c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a07e:	4b3e      	ldr	r3, [pc, #248]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a086:	60bb      	str	r3, [r7, #8]
 800a088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a08a:	2301      	movs	r3, #1
 800a08c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a08e:	4b3b      	ldr	r3, [pc, #236]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a3a      	ldr	r2, [pc, #232]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a098:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a09a:	f7fc fd4f 	bl	8006b3c <HAL_GetTick>
 800a09e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a0a0:	e009      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0a2:	f7fc fd4b 	bl	8006b3c <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d902      	bls.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	74fb      	strb	r3, [r7, #19]
        break;
 800a0b4:	e005      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a0b6:	4b31      	ldr	r3, [pc, #196]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0ef      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a0c2:	7cfb      	ldrb	r3, [r7, #19]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d15b      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a0c8:	4b2b      	ldr	r3, [pc, #172]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0d2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01f      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d019      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a0e6:	4b24      	ldr	r3, [pc, #144]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a0f2:	4b21      	ldr	r3, [pc, #132]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a102:	4b1d      	ldr	r3, [pc, #116]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a108:	4a1b      	ldr	r2, [pc, #108]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a10a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a10e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a112:	4a19      	ldr	r2, [pc, #100]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d016      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a124:	f7fc fd0a 	bl	8006b3c <HAL_GetTick>
 800a128:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a12a:	e00b      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a12c:	f7fc fd06 	bl	8006b3c <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d902      	bls.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	74fb      	strb	r3, [r7, #19]
            break;
 800a142:	e006      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a144:	4b0c      	ldr	r3, [pc, #48]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0ec      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a152:	7cfb      	ldrb	r3, [r7, #19]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10c      	bne.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a158:	4b07      	ldr	r3, [pc, #28]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a15e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a168:	4903      	ldr	r1, [pc, #12]	@ (800a178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a170:	e008      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a172:	7cfb      	ldrb	r3, [r7, #19]
 800a174:	74bb      	strb	r3, [r7, #18]
 800a176:	e005      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800a178:	40021000 	.word	0x40021000
 800a17c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	7cfb      	ldrb	r3, [r7, #19]
 800a182:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a184:	7c7b      	ldrb	r3, [r7, #17]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d105      	bne.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a18a:	4ba0      	ldr	r3, [pc, #640]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a18c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18e:	4a9f      	ldr	r2, [pc, #636]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a194:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a1a2:	4b9a      	ldr	r3, [pc, #616]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a8:	f023 0203 	bic.w	r2, r3, #3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1b0:	4996      	ldr	r1, [pc, #600]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0302 	and.w	r3, r3, #2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00a      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a1c4:	4b91      	ldr	r3, [pc, #580]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ca:	f023 020c 	bic.w	r2, r3, #12
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d2:	498e      	ldr	r1, [pc, #568]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0304 	and.w	r3, r3, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00a      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a1e6:	4b89      	ldr	r3, [pc, #548]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1f4:	4985      	ldr	r1, [pc, #532]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0308 	and.w	r3, r3, #8
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00a      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a208:	4b80      	ldr	r3, [pc, #512]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a20e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a216:	497d      	ldr	r1, [pc, #500]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a218:	4313      	orrs	r3, r2
 800a21a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0310 	and.w	r3, r3, #16
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00a      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a22a:	4b78      	ldr	r3, [pc, #480]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a238:	4974      	ldr	r1, [pc, #464]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0320 	and.w	r3, r3, #32
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00a      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a24c:	4b6f      	ldr	r3, [pc, #444]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a252:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a25a:	496c      	ldr	r1, [pc, #432]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a25c:	4313      	orrs	r3, r2
 800a25e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00a      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a26e:	4b67      	ldr	r3, [pc, #412]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a27c:	4963      	ldr	r1, [pc, #396]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00a      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a290:	4b5e      	ldr	r3, [pc, #376]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a29e:	495b      	ldr	r1, [pc, #364]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a2b2:	4b56      	ldr	r3, [pc, #344]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2c0:	4952      	ldr	r1, [pc, #328]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00a      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a2d4:	4b4d      	ldr	r3, [pc, #308]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2e2:	494a      	ldr	r1, [pc, #296]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a2f6:	4b45      	ldr	r3, [pc, #276]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a304:	4941      	ldr	r1, [pc, #260]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a306:	4313      	orrs	r3, r2
 800a308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00a      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a318:	4b3c      	ldr	r3, [pc, #240]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a31a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a31e:	f023 0203 	bic.w	r2, r3, #3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a326:	4939      	ldr	r1, [pc, #228]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a328:	4313      	orrs	r3, r2
 800a32a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d028      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a33a:	4b34      	ldr	r3, [pc, #208]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a340:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a348:	4930      	ldr	r1, [pc, #192]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a358:	d106      	bne.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a35a:	4b2c      	ldr	r3, [pc, #176]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	4a2b      	ldr	r2, [pc, #172]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a360:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a364:	60d3      	str	r3, [r2, #12]
 800a366:	e011      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a36c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a370:	d10c      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3304      	adds	r3, #4
 800a376:	2101      	movs	r1, #1
 800a378:	4618      	mov	r0, r3
 800a37a:	f001 f82b 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800a37e:	4603      	mov	r3, r0
 800a380:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a382:	7cfb      	ldrb	r3, [r7, #19]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800a388:	7cfb      	ldrb	r3, [r7, #19]
 800a38a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d04d      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a39c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3a0:	d108      	bne.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800a3a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3a8:	4a18      	ldr	r2, [pc, #96]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3ae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800a3b2:	e012      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a3b4:	4b15      	ldr	r3, [pc, #84]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3ba:	4a14      	ldr	r2, [pc, #80]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3c0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800a3c4:	4b11      	ldr	r3, [pc, #68]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3d2:	490e      	ldr	r1, [pc, #56]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3e2:	d106      	bne.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3e4:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	4a08      	ldr	r2, [pc, #32]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3ee:	60d3      	str	r3, [r2, #12]
 800a3f0:	e020      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3fa:	d109      	bne.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a3fc:	4b03      	ldr	r3, [pc, #12]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	4a02      	ldr	r2, [pc, #8]	@ (800a40c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a406:	60d3      	str	r3, [r2, #12]
 800a408:	e014      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a40a:	bf00      	nop
 800a40c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a418:	d10c      	bne.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3304      	adds	r3, #4
 800a41e:	2101      	movs	r1, #1
 800a420:	4618      	mov	r0, r3
 800a422:	f000 ffd7 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800a426:	4603      	mov	r3, r0
 800a428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a42a:	7cfb      	ldrb	r3, [r7, #19]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800a430:	7cfb      	ldrb	r3, [r7, #19]
 800a432:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d028      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a440:	4b4a      	ldr	r3, [pc, #296]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a44e:	4947      	ldr	r1, [pc, #284]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a450:	4313      	orrs	r3, r2
 800a452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a45a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45e:	d106      	bne.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a460:	4b42      	ldr	r3, [pc, #264]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	4a41      	ldr	r2, [pc, #260]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a46a:	60d3      	str	r3, [r2, #12]
 800a46c:	e011      	b.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a472:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a476:	d10c      	bne.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3304      	adds	r3, #4
 800a47c:	2101      	movs	r1, #1
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 ffa8 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800a484:	4603      	mov	r3, r0
 800a486:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a488:	7cfb      	ldrb	r3, [r7, #19]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800a48e:	7cfb      	ldrb	r3, [r7, #19]
 800a490:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d01e      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a49e:	4b33      	ldr	r3, [pc, #204]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4ae:	492f      	ldr	r1, [pc, #188]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4c0:	d10c      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	2102      	movs	r1, #2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 ff83 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a4d2:	7cfb      	ldrb	r3, [r7, #19]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800a4d8:	7cfb      	ldrb	r3, [r7, #19]
 800a4da:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00b      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4e8:	4b20      	ldr	r3, [pc, #128]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a4ee:	f023 0204 	bic.w	r2, r3, #4
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4f8:	491c      	ldr	r1, [pc, #112]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a50c:	4b17      	ldr	r3, [pc, #92]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a50e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a512:	f023 0218 	bic.w	r2, r3, #24
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a51c:	4913      	ldr	r1, [pc, #76]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d017      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a530:	4b0e      	ldr	r3, [pc, #56]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a540:	490a      	ldr	r1, [pc, #40]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a542:	4313      	orrs	r3, r2
 800a544:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a54e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a552:	d105      	bne.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a554:	4b05      	ldr	r3, [pc, #20]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	4a04      	ldr	r2, [pc, #16]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a55a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a55e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a560:	7cbb      	ldrb	r3, [r7, #18]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	40021000 	.word	0x40021000

0800a570 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a578:	2300      	movs	r3, #0
 800a57a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a582:	d13e      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a584:	4bb6      	ldr	r3, [pc, #728]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a58a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a58e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a596:	d028      	beq.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a59e:	f200 86f4 	bhi.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5a8:	d005      	beq.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5b0:	d00e      	beq.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800a5b2:	f000 beea 	b.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a5b6:	4baa      	ldr	r3, [pc, #680]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5bc:	f003 0302 	and.w	r3, r3, #2
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	f040 86e4 	bne.w	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800a5c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5ca:	61fb      	str	r3, [r7, #28]
      break;
 800a5cc:	f000 bedf 	b.w	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a5d0:	4ba3      	ldr	r3, [pc, #652]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5d6:	f003 0302 	and.w	r3, r3, #2
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	f040 86d9 	bne.w	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800a5e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a5e4:	61fb      	str	r3, [r7, #28]
      break;
 800a5e6:	f000 bed4 	b.w	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5ea:	4b9d      	ldr	r3, [pc, #628]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5f6:	f040 86ce 	bne.w	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800a5fa:	4b9a      	ldr	r3, [pc, #616]	@ (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800a5fc:	61fb      	str	r3, [r7, #28]
      break;
 800a5fe:	f000 beca 	b.w	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a602:	4b97      	ldr	r3, [pc, #604]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d036      	beq.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2b03      	cmp	r3, #3
 800a616:	d840      	bhi.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d003      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d020      	beq.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800a624:	e039      	b.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a626:	4b8e      	ldr	r3, [pc, #568]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d116      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a632:	4b8b      	ldr	r3, [pc, #556]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0308 	and.w	r3, r3, #8
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a63e:	4b88      	ldr	r3, [pc, #544]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	091b      	lsrs	r3, r3, #4
 800a644:	f003 030f 	and.w	r3, r3, #15
 800a648:	e005      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a64a:	4b85      	ldr	r3, [pc, #532]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a64c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a650:	0a1b      	lsrs	r3, r3, #8
 800a652:	f003 030f 	and.w	r3, r3, #15
 800a656:	4a84      	ldr	r2, [pc, #528]	@ (800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a65c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a65e:	e01f      	b.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	61bb      	str	r3, [r7, #24]
      break;
 800a664:	e01c      	b.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a666:	4b7e      	ldr	r3, [pc, #504]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a66e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a672:	d102      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a674:	4b7d      	ldr	r3, [pc, #500]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a676:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a678:	e012      	b.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	61bb      	str	r3, [r7, #24]
      break;
 800a67e:	e00f      	b.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a680:	4b77      	ldr	r3, [pc, #476]	@ (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a68c:	d102      	bne.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a68e:	4b78      	ldr	r3, [pc, #480]	@ (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a690:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a692:	e005      	b.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	61bb      	str	r3, [r7, #24]
      break;
 800a698:	e002      	b.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a69a:	2300      	movs	r3, #0
 800a69c:	61bb      	str	r3, [r7, #24]
      break;
 800a69e:	bf00      	nop
    }

    switch(PeriphClk)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6a6:	f000 8606 	beq.w	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6b0:	f200 8673 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6ba:	f000 8469 	beq.w	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6c4:	f200 8669 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6ce:	f000 8531 	beq.w	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6d8:	f200 865f 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a6e2:	f000 8187 	beq.w	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a6ec:	f200 8655 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6f6:	f000 80cd 	beq.w	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a700:	f200 864b 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a70a:	f000 8430 	beq.w	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a714:	f200 8641 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a71e:	f000 83e4 	beq.w	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a728:	f200 8637 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a732:	f000 80af 	beq.w	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a73c:	f200 862d 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a746:	f000 809d 	beq.w	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a750:	f200 8623 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a75a:	f000 808b 	beq.w	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a764:	f200 8619 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a76e:	f000 8554 	beq.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a778:	f200 860f 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a782:	f000 8500 	beq.w	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a78c:	f200 8605 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a796:	f000 84a1 	beq.w	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7a0:	f200 85fb 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b80      	cmp	r3, #128	@ 0x80
 800a7a8:	f000 846c 	beq.w	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b80      	cmp	r3, #128	@ 0x80
 800a7b0:	f200 85f3 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b20      	cmp	r3, #32
 800a7b8:	d84c      	bhi.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 85ec 	beq.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	2b1f      	cmp	r3, #31
 800a7c8:	f200 85e7 	bhi.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a7cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d2:	bf00      	nop
 800a7d4:	0800abe9 	.word	0x0800abe9
 800a7d8:	0800ac57 	.word	0x0800ac57
 800a7dc:	0800b39b 	.word	0x0800b39b
 800a7e0:	0800aceb 	.word	0x0800aceb
 800a7e4:	0800b39b 	.word	0x0800b39b
 800a7e8:	0800b39b 	.word	0x0800b39b
 800a7ec:	0800b39b 	.word	0x0800b39b
 800a7f0:	0800ad63 	.word	0x0800ad63
 800a7f4:	0800b39b 	.word	0x0800b39b
 800a7f8:	0800b39b 	.word	0x0800b39b
 800a7fc:	0800b39b 	.word	0x0800b39b
 800a800:	0800b39b 	.word	0x0800b39b
 800a804:	0800b39b 	.word	0x0800b39b
 800a808:	0800b39b 	.word	0x0800b39b
 800a80c:	0800b39b 	.word	0x0800b39b
 800a810:	0800ade7 	.word	0x0800ade7
 800a814:	0800b39b 	.word	0x0800b39b
 800a818:	0800b39b 	.word	0x0800b39b
 800a81c:	0800b39b 	.word	0x0800b39b
 800a820:	0800b39b 	.word	0x0800b39b
 800a824:	0800b39b 	.word	0x0800b39b
 800a828:	0800b39b 	.word	0x0800b39b
 800a82c:	0800b39b 	.word	0x0800b39b
 800a830:	0800b39b 	.word	0x0800b39b
 800a834:	0800b39b 	.word	0x0800b39b
 800a838:	0800b39b 	.word	0x0800b39b
 800a83c:	0800b39b 	.word	0x0800b39b
 800a840:	0800b39b 	.word	0x0800b39b
 800a844:	0800b39b 	.word	0x0800b39b
 800a848:	0800b39b 	.word	0x0800b39b
 800a84c:	0800b39b 	.word	0x0800b39b
 800a850:	0800ae69 	.word	0x0800ae69
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b40      	cmp	r3, #64	@ 0x40
 800a858:	f000 83e8 	beq.w	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a85c:	f000 bd9d 	b.w	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a860:	40021000 	.word	0x40021000
 800a864:	0003d090 	.word	0x0003d090
 800a868:	08018140 	.word	0x08018140
 800a86c:	00f42400 	.word	0x00f42400
 800a870:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a874:	69b9      	ldr	r1, [r7, #24]
 800a876:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a87a:	f000 ff93 	bl	800b7a4 <RCCEx_GetSAIxPeriphCLKFreq>
 800a87e:	61f8      	str	r0, [r7, #28]
      break;
 800a880:	f000 bd8e 	b.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a884:	69b9      	ldr	r1, [r7, #24]
 800a886:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a88a:	f000 ff8b 	bl	800b7a4 <RCCEx_GetSAIxPeriphCLKFreq>
 800a88e:	61f8      	str	r0, [r7, #28]
      break;
 800a890:	f000 bd86 	b.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a894:	4b9a      	ldr	r3, [pc, #616]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a89a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a8a6:	d015      	beq.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a8ae:	f200 8092 	bhi.w	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8b8:	d029      	beq.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8c0:	f200 8089 	bhi.w	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d07b      	beq.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8d0:	d04a      	beq.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800a8d2:	e080      	b.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a8d4:	4b8a      	ldr	r3, [pc, #552]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0302 	and.w	r3, r3, #2
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d17d      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a8e0:	4b87      	ldr	r3, [pc, #540]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0308 	and.w	r3, r3, #8
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800a8ec:	4b84      	ldr	r3, [pc, #528]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	091b      	lsrs	r3, r3, #4
 800a8f2:	f003 030f 	and.w	r3, r3, #15
 800a8f6:	e005      	b.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800a8f8:	4b81      	ldr	r3, [pc, #516]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8fe:	0a1b      	lsrs	r3, r3, #8
 800a900:	f003 030f 	and.w	r3, r3, #15
 800a904:	4a7f      	ldr	r2, [pc, #508]	@ (800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a90a:	61fb      	str	r3, [r7, #28]
          break;
 800a90c:	e066      	b.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a90e:	4b7c      	ldr	r3, [pc, #496]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a916:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a91a:	d162      	bne.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a91c:	4b78      	ldr	r3, [pc, #480]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a928:	d15b      	bne.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a92a:	4b75      	ldr	r3, [pc, #468]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	0a1b      	lsrs	r3, r3, #8
 800a930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a934:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	fb03 f202 	mul.w	r2, r3, r2
 800a93e:	4b70      	ldr	r3, [pc, #448]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	091b      	lsrs	r3, r3, #4
 800a944:	f003 030f 	and.w	r3, r3, #15
 800a948:	3301      	adds	r3, #1
 800a94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a950:	4b6b      	ldr	r3, [pc, #428]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	0d5b      	lsrs	r3, r3, #21
 800a956:	f003 0303 	and.w	r3, r3, #3
 800a95a:	3301      	adds	r3, #1
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	69ba      	ldr	r2, [r7, #24]
 800a960:	fbb2 f3f3 	udiv	r3, r2, r3
 800a964:	61fb      	str	r3, [r7, #28]
          break;
 800a966:	e03c      	b.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a968:	4b65      	ldr	r3, [pc, #404]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a974:	d138      	bne.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a976:	4b62      	ldr	r3, [pc, #392]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a97e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a982:	d131      	bne.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a984:	4b5e      	ldr	r3, [pc, #376]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	0a1b      	lsrs	r3, r3, #8
 800a98a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a98e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	fb03 f202 	mul.w	r2, r3, r2
 800a998:	4b59      	ldr	r3, [pc, #356]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	091b      	lsrs	r3, r3, #4
 800a99e:	f003 030f 	and.w	r3, r3, #15
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a9aa:	4b55      	ldr	r3, [pc, #340]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	0d5b      	lsrs	r3, r3, #21
 800a9b0:	f003 0303 	and.w	r3, r3, #3
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	005b      	lsls	r3, r3, #1
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9be:	61fb      	str	r3, [r7, #28]
          break;
 800a9c0:	e012      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a9c2:	4b4f      	ldr	r3, [pc, #316]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a9c8:	f003 0302 	and.w	r3, r3, #2
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d10e      	bne.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800a9d0:	4b4d      	ldr	r3, [pc, #308]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a9d2:	61fb      	str	r3, [r7, #28]
          break;
 800a9d4:	e00b      	b.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800a9d6:	bf00      	nop
 800a9d8:	f000 bce2 	b.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a9dc:	bf00      	nop
 800a9de:	f000 bcdf 	b.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a9e2:	bf00      	nop
 800a9e4:	f000 bcdc 	b.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a9e8:	bf00      	nop
 800a9ea:	f000 bcd9 	b.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a9ee:	bf00      	nop
        break;
 800a9f0:	f000 bcd6 	b.w	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800a9f4:	4b42      	ldr	r3, [pc, #264]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa02:	d13d      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800aa04:	4b3e      	ldr	r3, [pc, #248]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa10:	f040 84c5 	bne.w	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800aa14:	4b3a      	ldr	r3, [pc, #232]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa20:	f040 84bd 	bne.w	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800aa24:	4b36      	ldr	r3, [pc, #216]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	0a1b      	lsrs	r3, r3, #8
 800aa2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa2e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	fb03 f202 	mul.w	r2, r3, r2
 800aa38:	4b31      	ldr	r3, [pc, #196]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	091b      	lsrs	r3, r3, #4
 800aa3e:	f003 030f 	and.w	r3, r3, #15
 800aa42:	3301      	adds	r3, #1
 800aa44:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa48:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800aa4a:	4b2d      	ldr	r3, [pc, #180]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	0edb      	lsrs	r3, r3, #27
 800aa50:	f003 031f 	and.w	r3, r3, #31
 800aa54:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800aa5c:	4b28      	ldr	r3, [pc, #160]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800aa68:	2311      	movs	r3, #17
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	e001      	b.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800aa6e:	2307      	movs	r3, #7
 800aa70:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa7a:	61fb      	str	r3, [r7, #28]
      break;
 800aa7c:	f000 bc8f 	b.w	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800aa80:	4b1f      	ldr	r3, [pc, #124]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa86:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aa92:	d016      	beq.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aa9a:	f200 809b 	bhi.w	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaa4:	d032      	beq.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaac:	f200 8092 	bhi.w	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 8084 	beq.w	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aabe:	d052      	beq.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800aac0:	e088      	b.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800aac2:	4b0f      	ldr	r3, [pc, #60]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	f040 8084 	bne.w	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800aad0:	4b0b      	ldr	r3, [pc, #44]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0308 	and.w	r3, r3, #8
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aadc:	4b08      	ldr	r3, [pc, #32]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	091b      	lsrs	r3, r3, #4
 800aae2:	f003 030f 	and.w	r3, r3, #15
 800aae6:	e005      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800aae8:	4b05      	ldr	r3, [pc, #20]	@ (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aaea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaee:	0a1b      	lsrs	r3, r3, #8
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	4a03      	ldr	r2, [pc, #12]	@ (800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aaf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aafa:	61fb      	str	r3, [r7, #28]
          break;
 800aafc:	e06c      	b.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800aafe:	bf00      	nop
 800ab00:	40021000 	.word	0x40021000
 800ab04:	08018140 	.word	0x08018140
 800ab08:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ab0c:	4ba5      	ldr	r3, [pc, #660]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab18:	d160      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800ab1a:	4ba2      	ldr	r3, [pc, #648]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab26:	d159      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ab28:	4b9e      	ldr	r3, [pc, #632]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	0a1b      	lsrs	r3, r3, #8
 800ab2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab32:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	fb03 f202 	mul.w	r2, r3, r2
 800ab3c:	4b99      	ldr	r3, [pc, #612]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	091b      	lsrs	r3, r3, #4
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	3301      	adds	r3, #1
 800ab48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab4c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ab4e:	4b95      	ldr	r3, [pc, #596]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	0d5b      	lsrs	r3, r3, #21
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	3301      	adds	r3, #1
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab62:	61fb      	str	r3, [r7, #28]
          break;
 800ab64:	e03a      	b.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800ab66:	4b8f      	ldr	r3, [pc, #572]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab72:	d135      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800ab74:	4b8b      	ldr	r3, [pc, #556]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab80:	d12e      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ab82:	4b88      	ldr	r3, [pc, #544]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	0a1b      	lsrs	r3, r3, #8
 800ab88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab8c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	fb03 f202 	mul.w	r2, r3, r2
 800ab96:	4b83      	ldr	r3, [pc, #524]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	091b      	lsrs	r3, r3, #4
 800ab9c:	f003 030f 	and.w	r3, r3, #15
 800aba0:	3301      	adds	r3, #1
 800aba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800aba8:	4b7e      	ldr	r3, [pc, #504]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	0d5b      	lsrs	r3, r3, #21
 800abae:	f003 0303 	and.w	r3, r3, #3
 800abb2:	3301      	adds	r3, #1
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abbc:	61fb      	str	r3, [r7, #28]
          break;
 800abbe:	e00f      	b.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800abc0:	4b78      	ldr	r3, [pc, #480]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d10a      	bne.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800abce:	4b76      	ldr	r3, [pc, #472]	@ (800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800abd0:	61fb      	str	r3, [r7, #28]
          break;
 800abd2:	e007      	b.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800abd4:	bf00      	nop
 800abd6:	e3e2      	b.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800abd8:	bf00      	nop
 800abda:	e3e0      	b.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800abdc:	bf00      	nop
 800abde:	e3de      	b.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800abe0:	bf00      	nop
 800abe2:	e3dc      	b.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800abe4:	bf00      	nop
      break;
 800abe6:	e3da      	b.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800abe8:	4b6e      	ldr	r3, [pc, #440]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d827      	bhi.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800abfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac11 	.word	0x0800ac11
 800ac04:	0800ac19 	.word	0x0800ac19
 800ac08:	0800ac21 	.word	0x0800ac21
 800ac0c:	0800ac35 	.word	0x0800ac35
          frequency = HAL_RCC_GetPCLK2Freq();
 800ac10:	f7ff f8a8 	bl	8009d64 <HAL_RCC_GetPCLK2Freq>
 800ac14:	61f8      	str	r0, [r7, #28]
          break;
 800ac16:	e01d      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac18:	f7fe fff6 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800ac1c:	61f8      	str	r0, [r7, #28]
          break;
 800ac1e:	e019      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac20:	4b60      	ldr	r3, [pc, #384]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac2c:	d10f      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800ac2e:	4b5f      	ldr	r3, [pc, #380]	@ (800adac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac30:	61fb      	str	r3, [r7, #28]
          break;
 800ac32:	e00c      	b.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac34:	4b5b      	ldr	r3, [pc, #364]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d107      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800ac42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac46:	61fb      	str	r3, [r7, #28]
          break;
 800ac48:	e003      	b.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800ac4a:	bf00      	nop
 800ac4c:	e3a8      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac4e:	bf00      	nop
 800ac50:	e3a6      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac52:	bf00      	nop
        break;
 800ac54:	e3a4      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ac56:	4b53      	ldr	r3, [pc, #332]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac5c:	f003 030c 	and.w	r3, r3, #12
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b0c      	cmp	r3, #12
 800ac66:	d83a      	bhi.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ac68:	a201      	add	r2, pc, #4	@ (adr r2, 800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800ac6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6e:	bf00      	nop
 800ac70:	0800aca5 	.word	0x0800aca5
 800ac74:	0800acdf 	.word	0x0800acdf
 800ac78:	0800acdf 	.word	0x0800acdf
 800ac7c:	0800acdf 	.word	0x0800acdf
 800ac80:	0800acad 	.word	0x0800acad
 800ac84:	0800acdf 	.word	0x0800acdf
 800ac88:	0800acdf 	.word	0x0800acdf
 800ac8c:	0800acdf 	.word	0x0800acdf
 800ac90:	0800acb5 	.word	0x0800acb5
 800ac94:	0800acdf 	.word	0x0800acdf
 800ac98:	0800acdf 	.word	0x0800acdf
 800ac9c:	0800acdf 	.word	0x0800acdf
 800aca0:	0800acc9 	.word	0x0800acc9
          frequency = HAL_RCC_GetPCLK1Freq();
 800aca4:	f7ff f848 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800aca8:	61f8      	str	r0, [r7, #28]
          break;
 800acaa:	e01d      	b.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800acac:	f7fe ffac 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800acb0:	61f8      	str	r0, [r7, #28]
          break;
 800acb2:	e019      	b.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acb4:	4b3b      	ldr	r3, [pc, #236]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acc0:	d10f      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800acc2:	4b3a      	ldr	r3, [pc, #232]	@ (800adac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800acc4:	61fb      	str	r3, [r7, #28]
          break;
 800acc6:	e00c      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800acc8:	4b36      	ldr	r3, [pc, #216]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acce:	f003 0302 	and.w	r3, r3, #2
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d107      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800acd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acda:	61fb      	str	r3, [r7, #28]
          break;
 800acdc:	e003      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800acde:	bf00      	nop
 800ace0:	e35e      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ace2:	bf00      	nop
 800ace4:	e35c      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ace6:	bf00      	nop
        break;
 800ace8:	e35a      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800acea:	4b2e      	ldr	r3, [pc, #184]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acf0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b30      	cmp	r3, #48	@ 0x30
 800acfa:	d021      	beq.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b30      	cmp	r3, #48	@ 0x30
 800ad00:	d829      	bhi.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b20      	cmp	r3, #32
 800ad06:	d011      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	d823      	bhi.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d004      	beq.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800ad1a:	e01c      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad1c:	f7ff f80c 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800ad20:	61f8      	str	r0, [r7, #28]
          break;
 800ad22:	e01d      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad24:	f7fe ff70 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800ad28:	61f8      	str	r0, [r7, #28]
          break;
 800ad2a:	e019      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad2c:	4b1d      	ldr	r3, [pc, #116]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad38:	d10f      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800ad3a:	4b1c      	ldr	r3, [pc, #112]	@ (800adac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad3c:	61fb      	str	r3, [r7, #28]
          break;
 800ad3e:	e00c      	b.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad40:	4b18      	ldr	r3, [pc, #96]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d107      	bne.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800ad4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad52:	61fb      	str	r3, [r7, #28]
          break;
 800ad54:	e003      	b.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800ad56:	bf00      	nop
 800ad58:	e322      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad5a:	bf00      	nop
 800ad5c:	e320      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad5e:	bf00      	nop
        break;
 800ad60:	e31e      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ad62:	4b10      	ldr	r3, [pc, #64]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad68:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad72:	d027      	beq.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad78:	d82f      	bhi.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2b80      	cmp	r3, #128	@ 0x80
 800ad7e:	d017      	beq.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b80      	cmp	r3, #128	@ 0x80
 800ad84:	d829      	bhi.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b40      	cmp	r3, #64	@ 0x40
 800ad90:	d004      	beq.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800ad92:	e022      	b.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad94:	f7fe ffd0 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800ad98:	61f8      	str	r0, [r7, #28]
          break;
 800ad9a:	e023      	b.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad9c:	f7fe ff34 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800ada0:	61f8      	str	r0, [r7, #28]
          break;
 800ada2:	e01f      	b.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800ada4:	40021000 	.word	0x40021000
 800ada8:	02dc6c00 	.word	0x02dc6c00
 800adac:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adb0:	4b9b      	ldr	r3, [pc, #620]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adbc:	d10f      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800adbe:	4b99      	ldr	r3, [pc, #612]	@ (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800adc0:	61fb      	str	r3, [r7, #28]
          break;
 800adc2:	e00c      	b.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800adc4:	4b96      	ldr	r3, [pc, #600]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800adc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b02      	cmp	r3, #2
 800add0:	d107      	bne.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800add2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800add6:	61fb      	str	r3, [r7, #28]
          break;
 800add8:	e003      	b.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800adda:	bf00      	nop
 800addc:	e2e0      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800adde:	bf00      	nop
 800ade0:	e2de      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ade2:	bf00      	nop
        break;
 800ade4:	e2dc      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ade6:	4b8e      	ldr	r3, [pc, #568]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ade8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adf0:	60fb      	str	r3, [r7, #12]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adf8:	d025      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae00:	d82c      	bhi.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae08:	d013      	beq.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae10:	d824      	bhi.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae1e:	d004      	beq.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800ae20:	e01c      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ae22:	f7fe ff89 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800ae26:	61f8      	str	r0, [r7, #28]
          break;
 800ae28:	e01d      	b.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae2a:	f7fe feed 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800ae2e:	61f8      	str	r0, [r7, #28]
          break;
 800ae30:	e019      	b.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae32:	4b7b      	ldr	r3, [pc, #492]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae3e:	d10f      	bne.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800ae40:	4b78      	ldr	r3, [pc, #480]	@ (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ae42:	61fb      	str	r3, [r7, #28]
          break;
 800ae44:	e00c      	b.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae46:	4b76      	ldr	r3, [pc, #472]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d107      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800ae54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae58:	61fb      	str	r3, [r7, #28]
          break;
 800ae5a:	e003      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800ae5c:	bf00      	nop
 800ae5e:	e29f      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae60:	bf00      	nop
 800ae62:	e29d      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae64:	bf00      	nop
        break;
 800ae66:	e29b      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ae68:	4b6d      	ldr	r3, [pc, #436]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae6e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae72:	60fb      	str	r3, [r7, #12]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae7a:	d025      	beq.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae82:	d82c      	bhi.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae8a:	d013      	beq.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae92:	d824      	bhi.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d004      	beq.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aea0:	d004      	beq.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800aea2:	e01c      	b.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aea4:	f7fe ff48 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800aea8:	61f8      	str	r0, [r7, #28]
          break;
 800aeaa:	e01d      	b.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800aeac:	f7fe feac 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800aeb0:	61f8      	str	r0, [r7, #28]
          break;
 800aeb2:	e019      	b.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aeb4:	4b5a      	ldr	r3, [pc, #360]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aec0:	d10f      	bne.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800aec2:	4b58      	ldr	r3, [pc, #352]	@ (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800aec4:	61fb      	str	r3, [r7, #28]
          break;
 800aec6:	e00c      	b.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aec8:	4b55      	ldr	r3, [pc, #340]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aeca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d107      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800aed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aeda:	61fb      	str	r3, [r7, #28]
          break;
 800aedc:	e003      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800aede:	bf00      	nop
 800aee0:	e25e      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aee2:	bf00      	nop
 800aee4:	e25c      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aee6:	bf00      	nop
        break;
 800aee8:	e25a      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aeea:	4b4d      	ldr	r3, [pc, #308]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aeec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aef0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aefc:	d007      	beq.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af04:	d12f      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800af06:	f7fe fe7f 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800af0a:	61f8      	str	r0, [r7, #28]
          break;
 800af0c:	e02e      	b.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800af0e:	4b44      	ldr	r3, [pc, #272]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af1a:	d126      	bne.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800af1c:	4b40      	ldr	r3, [pc, #256]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d020      	beq.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800af28:	4b3d      	ldr	r3, [pc, #244]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	0a1b      	lsrs	r3, r3, #8
 800af2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af32:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	fb03 f202 	mul.w	r2, r3, r2
 800af3c:	4b38      	ldr	r3, [pc, #224]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	091b      	lsrs	r3, r3, #4
 800af42:	f003 030f 	and.w	r3, r3, #15
 800af46:	3301      	adds	r3, #1
 800af48:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800af4e:	4b34      	ldr	r3, [pc, #208]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	0e5b      	lsrs	r3, r3, #25
 800af54:	f003 0303 	and.w	r3, r3, #3
 800af58:	3301      	adds	r3, #1
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af62:	61fb      	str	r3, [r7, #28]
          break;
 800af64:	e001      	b.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800af66:	bf00      	nop
 800af68:	e21a      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af6a:	bf00      	nop
        break;
 800af6c:	e218      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800af6e:	4b2c      	ldr	r3, [pc, #176]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af74:	f003 0304 	and.w	r3, r3, #4
 800af78:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d103      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800af80:	f7fe fef0 	bl	8009d64 <HAL_RCC_GetPCLK2Freq>
 800af84:	61f8      	str	r0, [r7, #28]
        break;
 800af86:	e20b      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800af88:	f7fe fe3e 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800af8c:	61f8      	str	r0, [r7, #28]
        break;
 800af8e:	e207      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800af90:	4b23      	ldr	r3, [pc, #140]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af96:	f003 0318 	and.w	r3, r3, #24
 800af9a:	60fb      	str	r3, [r7, #12]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2b10      	cmp	r3, #16
 800afa0:	d010      	beq.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2b10      	cmp	r3, #16
 800afa6:	d834      	bhi.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d024      	beq.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800afb4:	e02d      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800afb6:	69b9      	ldr	r1, [r7, #24]
 800afb8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800afbc:	f000 fbf2 	bl	800b7a4 <RCCEx_GetSAIxPeriphCLKFreq>
 800afc0:	61f8      	str	r0, [r7, #28]
          break;
 800afc2:	e02b      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800afc4:	4b16      	ldr	r3, [pc, #88]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d122      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800afd0:	4b13      	ldr	r3, [pc, #76]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800afdc:	4b10      	ldr	r3, [pc, #64]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	091b      	lsrs	r3, r3, #4
 800afe2:	f003 030f 	and.w	r3, r3, #15
 800afe6:	e005      	b.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800afe8:	4b0d      	ldr	r3, [pc, #52]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800afea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afee:	0a1b      	lsrs	r3, r3, #8
 800aff0:	f003 030f 	and.w	r3, r3, #15
 800aff4:	4a0c      	ldr	r2, [pc, #48]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800aff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800affa:	61fb      	str	r3, [r7, #28]
          break;
 800affc:	e00b      	b.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800affe:	4b08      	ldr	r3, [pc, #32]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b00a:	d106      	bne.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800b00c:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800b00e:	61fb      	str	r3, [r7, #28]
          break;
 800b010:	e003      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800b012:	bf00      	nop
 800b014:	e1c4      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b016:	bf00      	nop
 800b018:	e1c2      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b01a:	bf00      	nop
        break;
 800b01c:	e1c0      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800b01e:	bf00      	nop
 800b020:	40021000 	.word	0x40021000
 800b024:	00f42400 	.word	0x00f42400
 800b028:	08018140 	.word	0x08018140
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b02c:	4b96      	ldr	r3, [pc, #600]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b032:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b03e:	d013      	beq.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b046:	d819      	bhi.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d004      	beq.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b054:	d004      	beq.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800b056:	e011      	b.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b058:	f7fe fe6e 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800b05c:	61f8      	str	r0, [r7, #28]
          break;
 800b05e:	e010      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800b060:	f7fe fdd2 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800b064:	61f8      	str	r0, [r7, #28]
          break;
 800b066:	e00c      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b068:	4b87      	ldr	r3, [pc, #540]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b074:	d104      	bne.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800b076:	4b85      	ldr	r3, [pc, #532]	@ (800b28c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b078:	61fb      	str	r3, [r7, #28]
          break;
 800b07a:	e001      	b.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800b07c:	bf00      	nop
 800b07e:	e18f      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b080:	bf00      	nop
        break;
 800b082:	e18d      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b084:	4b80      	ldr	r3, [pc, #512]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b08a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b096:	d013      	beq.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b09e:	d819      	bhi.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0ac:	d004      	beq.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800b0ae:	e011      	b.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0b0:	f7fe fe42 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800b0b4:	61f8      	str	r0, [r7, #28]
          break;
 800b0b6:	e010      	b.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800b0b8:	f7fe fda6 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800b0bc:	61f8      	str	r0, [r7, #28]
          break;
 800b0be:	e00c      	b.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0c0:	4b71      	ldr	r3, [pc, #452]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0cc:	d104      	bne.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800b0ce:	4b6f      	ldr	r3, [pc, #444]	@ (800b28c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b0d0:	61fb      	str	r3, [r7, #28]
          break;
 800b0d2:	e001      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800b0d4:	bf00      	nop
 800b0d6:	e163      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b0d8:	bf00      	nop
        break;
 800b0da:	e161      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b0dc:	4b6a      	ldr	r3, [pc, #424]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0ee:	d013      	beq.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0f6:	d819      	bhi.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b104:	d004      	beq.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800b106:	e011      	b.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b108:	f7fe fe16 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800b10c:	61f8      	str	r0, [r7, #28]
          break;
 800b10e:	e010      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800b110:	f7fe fd7a 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800b114:	61f8      	str	r0, [r7, #28]
          break;
 800b116:	e00c      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b118:	4b5b      	ldr	r3, [pc, #364]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b124:	d104      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800b126:	4b59      	ldr	r3, [pc, #356]	@ (800b28c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b128:	61fb      	str	r3, [r7, #28]
          break;
 800b12a:	e001      	b.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800b12c:	bf00      	nop
 800b12e:	e137      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b130:	bf00      	nop
        break;
 800b132:	e135      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b134:	4b54      	ldr	r3, [pc, #336]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b13a:	f003 0303 	and.w	r3, r3, #3
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b02      	cmp	r3, #2
 800b144:	d011      	beq.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d818      	bhi.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d003      	beq.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d004      	beq.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800b158:	e011      	b.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b15a:	f7fe fded 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800b15e:	61f8      	str	r0, [r7, #28]
          break;
 800b160:	e010      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800b162:	f7fe fd51 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800b166:	61f8      	str	r0, [r7, #28]
          break;
 800b168:	e00c      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b16a:	4b47      	ldr	r3, [pc, #284]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b176:	d104      	bne.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800b178:	4b44      	ldr	r3, [pc, #272]	@ (800b28c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b17a:	61fb      	str	r3, [r7, #28]
          break;
 800b17c:	e001      	b.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800b17e:	bf00      	nop
 800b180:	e10e      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b182:	bf00      	nop
        break;
 800b184:	e10c      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b186:	4b40      	ldr	r3, [pc, #256]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b18c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b198:	d02c      	beq.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b1a0:	d833      	bhi.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b1a8:	d01a      	beq.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b1b0:	d82b      	bhi.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d004      	beq.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b1be:	d004      	beq.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800b1c0:	e023      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b1c2:	f7fe fdb9 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800b1c6:	61f8      	str	r0, [r7, #28]
          break;
 800b1c8:	e026      	b.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b1ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b1cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d11a      	bne.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800b1d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b1dc:	61fb      	str	r3, [r7, #28]
          break;
 800b1de:	e016      	b.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1e0:	4b29      	ldr	r3, [pc, #164]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1ec:	d111      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800b1ee:	4b27      	ldr	r3, [pc, #156]	@ (800b28c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b1f0:	61fb      	str	r3, [r7, #28]
          break;
 800b1f2:	e00e      	b.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b1f4:	4b24      	ldr	r3, [pc, #144]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d109      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800b202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b206:	61fb      	str	r3, [r7, #28]
          break;
 800b208:	e005      	b.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800b20a:	bf00      	nop
 800b20c:	e0c8      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b20e:	bf00      	nop
 800b210:	e0c6      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b212:	bf00      	nop
 800b214:	e0c4      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b216:	bf00      	nop
        break;
 800b218:	e0c2      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b21a:	4b1b      	ldr	r3, [pc, #108]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b220:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b224:	60fb      	str	r3, [r7, #12]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b22c:	d030      	beq.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b234:	d837      	bhi.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b23c:	d01a      	beq.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b244:	d82f      	bhi.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b252:	d004      	beq.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800b254:	e027      	b.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b256:	f7fe fd6f 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800b25a:	61f8      	str	r0, [r7, #28]
          break;
 800b25c:	e02a      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b25e:	4b0a      	ldr	r3, [pc, #40]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d11e      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800b26c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b270:	61fb      	str	r3, [r7, #28]
          break;
 800b272:	e01a      	b.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b274:	4b04      	ldr	r3, [pc, #16]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b27c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b280:	d115      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800b282:	4b02      	ldr	r3, [pc, #8]	@ (800b28c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b284:	61fb      	str	r3, [r7, #28]
          break;
 800b286:	e012      	b.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b288:	40021000 	.word	0x40021000
 800b28c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b290:	4b46      	ldr	r3, [pc, #280]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d109      	bne.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800b29e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2a2:	61fb      	str	r3, [r7, #28]
          break;
 800b2a4:	e005      	b.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800b2a6:	bf00      	nop
 800b2a8:	e07a      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b2aa:	bf00      	nop
 800b2ac:	e078      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b2ae:	bf00      	nop
 800b2b0:	e076      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b2b2:	bf00      	nop
        break;
 800b2b4:	e074      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b2b6:	4b3d      	ldr	r3, [pc, #244]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b2b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b2bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b2c0:	60fb      	str	r3, [r7, #12]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2c8:	d02c      	beq.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2d0:	d855      	bhi.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d004      	beq.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2de:	d004      	beq.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800b2e0:	e04d      	b.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800b2e2:	f7fe fc91 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800b2e6:	61f8      	str	r0, [r7, #28]
          break;
 800b2e8:	e04e      	b.n	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b2ea:	4b30      	ldr	r3, [pc, #192]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d145      	bne.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b2f6:	4b2d      	ldr	r3, [pc, #180]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 0308 	and.w	r3, r3, #8
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d005      	beq.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800b302:	4b2a      	ldr	r3, [pc, #168]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	091b      	lsrs	r3, r3, #4
 800b308:	f003 030f 	and.w	r3, r3, #15
 800b30c:	e005      	b.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800b30e:	4b27      	ldr	r3, [pc, #156]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b314:	0a1b      	lsrs	r3, r3, #8
 800b316:	f003 030f 	and.w	r3, r3, #15
 800b31a:	4a25      	ldr	r2, [pc, #148]	@ (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800b31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b320:	61fb      	str	r3, [r7, #28]
          break;
 800b322:	e02e      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b324:	4b21      	ldr	r3, [pc, #132]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b32c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b330:	d129      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b332:	4b1e      	ldr	r3, [pc, #120]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b33a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b33e:	d122      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b340:	4b1a      	ldr	r3, [pc, #104]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	0a1b      	lsrs	r3, r3, #8
 800b346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b34a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	fb03 f202 	mul.w	r2, r3, r2
 800b354:	4b15      	ldr	r3, [pc, #84]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	091b      	lsrs	r3, r3, #4
 800b35a:	f003 030f 	and.w	r3, r3, #15
 800b35e:	3301      	adds	r3, #1
 800b360:	fbb2 f3f3 	udiv	r3, r2, r3
 800b364:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b366:	4b11      	ldr	r3, [pc, #68]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	0d5b      	lsrs	r3, r3, #21
 800b36c:	f003 0303 	and.w	r3, r3, #3
 800b370:	3301      	adds	r3, #1
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37a:	61fb      	str	r3, [r7, #28]
          break;
 800b37c:	e003      	b.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800b37e:	bf00      	nop
 800b380:	e00e      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b382:	bf00      	nop
 800b384:	e00c      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b386:	bf00      	nop
        break;
 800b388:	e00a      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b38a:	bf00      	nop
 800b38c:	e008      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b38e:	bf00      	nop
 800b390:	e006      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b392:	bf00      	nop
 800b394:	e004      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b396:	bf00      	nop
 800b398:	e002      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b39a:	bf00      	nop
 800b39c:	e000      	b.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b39e:	bf00      	nop
    }
  }

  return(frequency);
 800b3a0:	69fb      	ldr	r3, [r7, #28]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3720      	adds	r7, #32
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	40021000 	.word	0x40021000
 800b3b0:	08018140 	.word	0x08018140

0800b3b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800b3b8:	4b05      	ldr	r3, [pc, #20]	@ (800b3d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a04      	ldr	r2, [pc, #16]	@ (800b3d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b3be:	f043 0304 	orr.w	r3, r3, #4
 800b3c2:	6013      	str	r3, [r2, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	40021000 	.word	0x40021000

0800b3d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b3e2:	4b72      	ldr	r3, [pc, #456]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	f003 0303 	and.w	r3, r3, #3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00e      	beq.n	800b40c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b3ee:	4b6f      	ldr	r3, [pc, #444]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f003 0203 	and.w	r2, r3, #3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d103      	bne.n	800b406 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
       ||
 800b402:	2b00      	cmp	r3, #0
 800b404:	d142      	bne.n	800b48c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	73fb      	strb	r3, [r7, #15]
 800b40a:	e03f      	b.n	800b48c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b03      	cmp	r3, #3
 800b412:	d018      	beq.n	800b446 <RCCEx_PLLSAI1_Config+0x72>
 800b414:	2b03      	cmp	r3, #3
 800b416:	d825      	bhi.n	800b464 <RCCEx_PLLSAI1_Config+0x90>
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d002      	beq.n	800b422 <RCCEx_PLLSAI1_Config+0x4e>
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d009      	beq.n	800b434 <RCCEx_PLLSAI1_Config+0x60>
 800b420:	e020      	b.n	800b464 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b422:	4b62      	ldr	r3, [pc, #392]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d11d      	bne.n	800b46a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b432:	e01a      	b.n	800b46a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b434:	4b5d      	ldr	r3, [pc, #372]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d116      	bne.n	800b46e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b444:	e013      	b.n	800b46e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b446:	4b59      	ldr	r3, [pc, #356]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10f      	bne.n	800b472 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b452:	4b56      	ldr	r3, [pc, #344]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d109      	bne.n	800b472 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b462:	e006      	b.n	800b472 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	73fb      	strb	r3, [r7, #15]
      break;
 800b468:	e004      	b.n	800b474 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b46a:	bf00      	nop
 800b46c:	e002      	b.n	800b474 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b46e:	bf00      	nop
 800b470:	e000      	b.n	800b474 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b472:	bf00      	nop
    }

    if(status == HAL_OK)
 800b474:	7bfb      	ldrb	r3, [r7, #15]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d108      	bne.n	800b48c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b47a:	4b4c      	ldr	r3, [pc, #304]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	f023 0203 	bic.w	r2, r3, #3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4949      	ldr	r1, [pc, #292]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f040 8086 	bne.w	800b5a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b494:	4b45      	ldr	r3, [pc, #276]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a44      	ldr	r2, [pc, #272]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b49a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b49e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4a0:	f7fb fb4c 	bl	8006b3c <HAL_GetTick>
 800b4a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b4a6:	e009      	b.n	800b4bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b4a8:	f7fb fb48 	bl	8006b3c <HAL_GetTick>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d902      	bls.n	800b4bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	73fb      	strb	r3, [r7, #15]
        break;
 800b4ba:	e005      	b.n	800b4c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b4bc:	4b3b      	ldr	r3, [pc, #236]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1ef      	bne.n	800b4a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d168      	bne.n	800b5a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d113      	bne.n	800b4fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b4d4:	4b35      	ldr	r3, [pc, #212]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4d6:	691a      	ldr	r2, [r3, #16]
 800b4d8:	4b35      	ldr	r3, [pc, #212]	@ (800b5b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b4da:	4013      	ands	r3, r2
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	6892      	ldr	r2, [r2, #8]
 800b4e0:	0211      	lsls	r1, r2, #8
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	68d2      	ldr	r2, [r2, #12]
 800b4e6:	06d2      	lsls	r2, r2, #27
 800b4e8:	4311      	orrs	r1, r2
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	6852      	ldr	r2, [r2, #4]
 800b4ee:	3a01      	subs	r2, #1
 800b4f0:	0112      	lsls	r2, r2, #4
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	492d      	ldr	r1, [pc, #180]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	610b      	str	r3, [r1, #16]
 800b4fa:	e02d      	b.n	800b558 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d115      	bne.n	800b52e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b502:	4b2a      	ldr	r3, [pc, #168]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b504:	691a      	ldr	r2, [r3, #16]
 800b506:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b508:	4013      	ands	r3, r2
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	6892      	ldr	r2, [r2, #8]
 800b50e:	0211      	lsls	r1, r2, #8
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	6912      	ldr	r2, [r2, #16]
 800b514:	0852      	lsrs	r2, r2, #1
 800b516:	3a01      	subs	r2, #1
 800b518:	0552      	lsls	r2, r2, #21
 800b51a:	4311      	orrs	r1, r2
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	6852      	ldr	r2, [r2, #4]
 800b520:	3a01      	subs	r2, #1
 800b522:	0112      	lsls	r2, r2, #4
 800b524:	430a      	orrs	r2, r1
 800b526:	4921      	ldr	r1, [pc, #132]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	610b      	str	r3, [r1, #16]
 800b52c:	e014      	b.n	800b558 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b52e:	4b1f      	ldr	r3, [pc, #124]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b530:	691a      	ldr	r2, [r3, #16]
 800b532:	4b21      	ldr	r3, [pc, #132]	@ (800b5b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b534:	4013      	ands	r3, r2
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	6892      	ldr	r2, [r2, #8]
 800b53a:	0211      	lsls	r1, r2, #8
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	6952      	ldr	r2, [r2, #20]
 800b540:	0852      	lsrs	r2, r2, #1
 800b542:	3a01      	subs	r2, #1
 800b544:	0652      	lsls	r2, r2, #25
 800b546:	4311      	orrs	r1, r2
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	6852      	ldr	r2, [r2, #4]
 800b54c:	3a01      	subs	r2, #1
 800b54e:	0112      	lsls	r2, r2, #4
 800b550:	430a      	orrs	r2, r1
 800b552:	4916      	ldr	r1, [pc, #88]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b554:	4313      	orrs	r3, r2
 800b556:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b558:	4b14      	ldr	r3, [pc, #80]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a13      	ldr	r2, [pc, #76]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b55e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b564:	f7fb faea 	bl	8006b3c <HAL_GetTick>
 800b568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b56a:	e009      	b.n	800b580 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b56c:	f7fb fae6 	bl	8006b3c <HAL_GetTick>
 800b570:	4602      	mov	r2, r0
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	1ad3      	subs	r3, r2, r3
 800b576:	2b02      	cmp	r3, #2
 800b578:	d902      	bls.n	800b580 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b57a:	2303      	movs	r3, #3
 800b57c:	73fb      	strb	r3, [r7, #15]
          break;
 800b57e:	e005      	b.n	800b58c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b580:	4b0a      	ldr	r3, [pc, #40]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d0ef      	beq.n	800b56c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d106      	bne.n	800b5a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b592:	4b06      	ldr	r3, [pc, #24]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b594:	691a      	ldr	r2, [r3, #16]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	4904      	ldr	r1, [pc, #16]	@ (800b5ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	40021000 	.word	0x40021000
 800b5b0:	07ff800f 	.word	0x07ff800f
 800b5b4:	ff9f800f 	.word	0xff9f800f
 800b5b8:	f9ff800f 	.word	0xf9ff800f

0800b5bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b5ca:	4b72      	ldr	r3, [pc, #456]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	f003 0303 	and.w	r3, r3, #3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00e      	beq.n	800b5f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b5d6:	4b6f      	ldr	r3, [pc, #444]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	f003 0203 	and.w	r2, r3, #3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d103      	bne.n	800b5ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
       ||
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d142      	bne.n	800b674 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	73fb      	strb	r3, [r7, #15]
 800b5f2:	e03f      	b.n	800b674 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b03      	cmp	r3, #3
 800b5fa:	d018      	beq.n	800b62e <RCCEx_PLLSAI2_Config+0x72>
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	d825      	bhi.n	800b64c <RCCEx_PLLSAI2_Config+0x90>
 800b600:	2b01      	cmp	r3, #1
 800b602:	d002      	beq.n	800b60a <RCCEx_PLLSAI2_Config+0x4e>
 800b604:	2b02      	cmp	r3, #2
 800b606:	d009      	beq.n	800b61c <RCCEx_PLLSAI2_Config+0x60>
 800b608:	e020      	b.n	800b64c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b60a:	4b62      	ldr	r3, [pc, #392]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0302 	and.w	r3, r3, #2
 800b612:	2b00      	cmp	r3, #0
 800b614:	d11d      	bne.n	800b652 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b61a:	e01a      	b.n	800b652 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b61c:	4b5d      	ldr	r3, [pc, #372]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b624:	2b00      	cmp	r3, #0
 800b626:	d116      	bne.n	800b656 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b62c:	e013      	b.n	800b656 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b62e:	4b59      	ldr	r3, [pc, #356]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10f      	bne.n	800b65a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b63a:	4b56      	ldr	r3, [pc, #344]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b64a:	e006      	b.n	800b65a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	73fb      	strb	r3, [r7, #15]
      break;
 800b650:	e004      	b.n	800b65c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b652:	bf00      	nop
 800b654:	e002      	b.n	800b65c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b656:	bf00      	nop
 800b658:	e000      	b.n	800b65c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b65a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d108      	bne.n	800b674 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b662:	4b4c      	ldr	r3, [pc, #304]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	f023 0203 	bic.w	r2, r3, #3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4949      	ldr	r1, [pc, #292]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b670:	4313      	orrs	r3, r2
 800b672:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f040 8086 	bne.w	800b788 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b67c:	4b45      	ldr	r3, [pc, #276]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a44      	ldr	r2, [pc, #272]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b688:	f7fb fa58 	bl	8006b3c <HAL_GetTick>
 800b68c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b68e:	e009      	b.n	800b6a4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b690:	f7fb fa54 	bl	8006b3c <HAL_GetTick>
 800b694:	4602      	mov	r2, r0
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d902      	bls.n	800b6a4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	73fb      	strb	r3, [r7, #15]
        break;
 800b6a2:	e005      	b.n	800b6b0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b6a4:	4b3b      	ldr	r3, [pc, #236]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1ef      	bne.n	800b690 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d168      	bne.n	800b788 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d113      	bne.n	800b6e4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b6bc:	4b35      	ldr	r3, [pc, #212]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6be:	695a      	ldr	r2, [r3, #20]
 800b6c0:	4b35      	ldr	r3, [pc, #212]	@ (800b798 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6892      	ldr	r2, [r2, #8]
 800b6c8:	0211      	lsls	r1, r2, #8
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	68d2      	ldr	r2, [r2, #12]
 800b6ce:	06d2      	lsls	r2, r2, #27
 800b6d0:	4311      	orrs	r1, r2
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	6852      	ldr	r2, [r2, #4]
 800b6d6:	3a01      	subs	r2, #1
 800b6d8:	0112      	lsls	r2, r2, #4
 800b6da:	430a      	orrs	r2, r1
 800b6dc:	492d      	ldr	r1, [pc, #180]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	614b      	str	r3, [r1, #20]
 800b6e2:	e02d      	b.n	800b740 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d115      	bne.n	800b716 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b6ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6ec:	695a      	ldr	r2, [r3, #20]
 800b6ee:	4b2b      	ldr	r3, [pc, #172]	@ (800b79c <RCCEx_PLLSAI2_Config+0x1e0>)
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	6892      	ldr	r2, [r2, #8]
 800b6f6:	0211      	lsls	r1, r2, #8
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	6912      	ldr	r2, [r2, #16]
 800b6fc:	0852      	lsrs	r2, r2, #1
 800b6fe:	3a01      	subs	r2, #1
 800b700:	0552      	lsls	r2, r2, #21
 800b702:	4311      	orrs	r1, r2
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	6852      	ldr	r2, [r2, #4]
 800b708:	3a01      	subs	r2, #1
 800b70a:	0112      	lsls	r2, r2, #4
 800b70c:	430a      	orrs	r2, r1
 800b70e:	4921      	ldr	r1, [pc, #132]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b710:	4313      	orrs	r3, r2
 800b712:	614b      	str	r3, [r1, #20]
 800b714:	e014      	b.n	800b740 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b716:	4b1f      	ldr	r3, [pc, #124]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b718:	695a      	ldr	r2, [r3, #20]
 800b71a:	4b21      	ldr	r3, [pc, #132]	@ (800b7a0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b71c:	4013      	ands	r3, r2
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6892      	ldr	r2, [r2, #8]
 800b722:	0211      	lsls	r1, r2, #8
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	6952      	ldr	r2, [r2, #20]
 800b728:	0852      	lsrs	r2, r2, #1
 800b72a:	3a01      	subs	r2, #1
 800b72c:	0652      	lsls	r2, r2, #25
 800b72e:	4311      	orrs	r1, r2
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	6852      	ldr	r2, [r2, #4]
 800b734:	3a01      	subs	r2, #1
 800b736:	0112      	lsls	r2, r2, #4
 800b738:	430a      	orrs	r2, r1
 800b73a:	4916      	ldr	r1, [pc, #88]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b73c:	4313      	orrs	r3, r2
 800b73e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b740:	4b14      	ldr	r3, [pc, #80]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a13      	ldr	r2, [pc, #76]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b74a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b74c:	f7fb f9f6 	bl	8006b3c <HAL_GetTick>
 800b750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b752:	e009      	b.n	800b768 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b754:	f7fb f9f2 	bl	8006b3c <HAL_GetTick>
 800b758:	4602      	mov	r2, r0
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d902      	bls.n	800b768 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	73fb      	strb	r3, [r7, #15]
          break;
 800b766:	e005      	b.n	800b774 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b768:	4b0a      	ldr	r3, [pc, #40]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d0ef      	beq.n	800b754 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d106      	bne.n	800b788 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b77a:	4b06      	ldr	r3, [pc, #24]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b77c:	695a      	ldr	r2, [r3, #20]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	4904      	ldr	r1, [pc, #16]	@ (800b794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b784:	4313      	orrs	r3, r2
 800b786:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	40021000 	.word	0x40021000
 800b798:	07ff800f 	.word	0x07ff800f
 800b79c:	ff9f800f 	.word	0xff9f800f
 800b7a0:	f9ff800f 	.word	0xf9ff800f

0800b7a4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b089      	sub	sp, #36	@ 0x24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7c0:	d10b      	bne.n	800b7da <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b7c2:	4b7e      	ldr	r3, [pc, #504]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b7c8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b7cc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	2b60      	cmp	r3, #96	@ 0x60
 800b7d2:	d112      	bne.n	800b7fa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b7d4:	4b7a      	ldr	r3, [pc, #488]	@ (800b9c0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b7d6:	61fb      	str	r3, [r7, #28]
 800b7d8:	e00f      	b.n	800b7fa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7e0:	d10b      	bne.n	800b7fa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b7e2:	4b76      	ldr	r3, [pc, #472]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b7e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7ec:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7f4:	d101      	bne.n	800b7fa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b7f6:	4b72      	ldr	r3, [pc, #456]	@ (800b9c0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b7f8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f040 80d6 	bne.w	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	2b40      	cmp	r3, #64	@ 0x40
 800b80a:	d003      	beq.n	800b814 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b812:	d13b      	bne.n	800b88c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b814:	4b69      	ldr	r3, [pc, #420]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b81c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b820:	f040 80c4 	bne.w	800b9ac <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800b824:	4b65      	ldr	r3, [pc, #404]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f000 80bd 	beq.w	800b9ac <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b832:	4b62      	ldr	r3, [pc, #392]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	091b      	lsrs	r3, r3, #4
 800b838:	f003 030f 	and.w	r3, r3, #15
 800b83c:	3301      	adds	r3, #1
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	fbb2 f3f3 	udiv	r3, r2, r3
 800b844:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b846:	4b5d      	ldr	r3, [pc, #372]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	0a1b      	lsrs	r3, r3, #8
 800b84c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b850:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b852:	4b5a      	ldr	r3, [pc, #360]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	0edb      	lsrs	r3, r3, #27
 800b858:	f003 031f 	and.w	r3, r3, #31
 800b85c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10a      	bne.n	800b87a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b864:	4b55      	ldr	r3, [pc, #340]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800b870:	2311      	movs	r3, #17
 800b872:	617b      	str	r3, [r7, #20]
 800b874:	e001      	b.n	800b87a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800b876:	2307      	movs	r3, #7
 800b878:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	fb03 f202 	mul.w	r2, r3, r2
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	fbb2 f3f3 	udiv	r3, r2, r3
 800b888:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b88a:	e08f      	b.n	800b9ac <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d13a      	bne.n	800b908 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800b892:	4b4a      	ldr	r3, [pc, #296]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b89a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b89e:	f040 8086 	bne.w	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b8a2:	4b46      	ldr	r3, [pc, #280]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d07f      	beq.n	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b8ae:	4b43      	ldr	r3, [pc, #268]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	091b      	lsrs	r3, r3, #4
 800b8b4:	f003 030f 	and.w	r3, r3, #15
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b8c2:	4b3e      	ldr	r3, [pc, #248]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	0a1b      	lsrs	r3, r3, #8
 800b8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8cc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800b8ce:	4b3b      	ldr	r3, [pc, #236]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	0edb      	lsrs	r3, r3, #27
 800b8d4:	f003 031f 	and.w	r3, r3, #31
 800b8d8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800b8e0:	4b36      	ldr	r3, [pc, #216]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800b8ec:	2311      	movs	r3, #17
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	e001      	b.n	800b8f6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800b8f2:	2307      	movs	r3, #7
 800b8f4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	fb03 f202 	mul.w	r2, r3, r2
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	fbb2 f3f3 	udiv	r3, r2, r3
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	e052      	b.n	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	2b80      	cmp	r3, #128	@ 0x80
 800b90c:	d003      	beq.n	800b916 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b914:	d109      	bne.n	800b92a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b916:	4b29      	ldr	r3, [pc, #164]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b91e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b922:	d144      	bne.n	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800b924:	4b27      	ldr	r3, [pc, #156]	@ (800b9c4 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800b926:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b928:	e041      	b.n	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	2b20      	cmp	r3, #32
 800b92e:	d003      	beq.n	800b938 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b936:	d13a      	bne.n	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800b938:	4b20      	ldr	r3, [pc, #128]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b944:	d133      	bne.n	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b946:	4b1d      	ldr	r3, [pc, #116]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d02d      	beq.n	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800b952:	4b1a      	ldr	r3, [pc, #104]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	091b      	lsrs	r3, r3, #4
 800b958:	f003 030f 	and.w	r3, r3, #15
 800b95c:	3301      	adds	r3, #1
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	fbb2 f3f3 	udiv	r3, r2, r3
 800b964:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b966:	4b15      	ldr	r3, [pc, #84]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b970:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800b972:	4b12      	ldr	r3, [pc, #72]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	0edb      	lsrs	r3, r3, #27
 800b978:	f003 031f 	and.w	r3, r3, #31
 800b97c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10a      	bne.n	800b99a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800b984:	4b0d      	ldr	r3, [pc, #52]	@ (800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800b990:	2311      	movs	r3, #17
 800b992:	617b      	str	r3, [r7, #20]
 800b994:	e001      	b.n	800b99a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800b996:	2307      	movs	r3, #7
 800b998:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	fb03 f202 	mul.w	r2, r3, r2
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	e000      	b.n	800b9ae <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b9ac:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800b9ae:	69fb      	ldr	r3, [r7, #28]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3724      	adds	r7, #36	@ 0x24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	40021000 	.word	0x40021000
 800b9c0:	001fff68 	.word	0x001fff68
 800b9c4:	00f42400 	.word	0x00f42400

0800b9c8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d904      	bls.n	800b9e6 <HAL_SAI_InitProtocol+0x1e>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	3b03      	subs	r3, #3
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d812      	bhi.n	800ba0a <HAL_SAI_InitProtocol+0x42>
 800b9e4:	e008      	b.n	800b9f8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	68b9      	ldr	r1, [r7, #8]
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 f9fb 	bl	800bde8 <SAI_InitI2S>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f6:	e00b      	b.n	800ba10 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 faa4 	bl	800bf4c <SAI_InitPCM>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]
      break;
 800ba08:	e002      	b.n	800ba10 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba0e:	bf00      	nop
  }

  if (status == HAL_OK)
 800ba10:	7dfb      	ldrb	r3, [r7, #23]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d104      	bne.n	800ba20 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f000 f808 	bl	800ba2c <HAL_SAI_Init>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08a      	sub	sp, #40	@ 0x28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e1c7      	b.n	800bdce <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d10e      	bne.n	800ba66 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a81      	ldr	r2, [pc, #516]	@ (800bc54 <HAL_SAI_Init+0x228>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d107      	bne.n	800ba62 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d103      	bne.n	800ba62 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e1b3      	b.n	800bdce <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d106      	bne.n	800ba80 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7f8 fe32 	bl	80046e4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fae5 	bl	800c050 <SAI_Disable>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e19e      	b.n	800bdce <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2202      	movs	r2, #2
 800ba94:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d00c      	beq.n	800baba <HAL_SAI_Init+0x8e>
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d80d      	bhi.n	800bac0 <HAL_SAI_Init+0x94>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <HAL_SAI_Init+0x82>
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d003      	beq.n	800bab4 <HAL_SAI_Init+0x88>
 800baac:	e008      	b.n	800bac0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bab2:	e008      	b.n	800bac6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bab4:	2310      	movs	r3, #16
 800bab6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bab8:	e005      	b.n	800bac6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800baba:	2320      	movs	r3, #32
 800babc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800babe:	e002      	b.n	800bac6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bac4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d81d      	bhi.n	800bb0a <HAL_SAI_Init+0xde>
 800bace:	a201      	add	r2, pc, #4	@ (adr r2, 800bad4 <HAL_SAI_Init+0xa8>)
 800bad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad4:	0800bae5 	.word	0x0800bae5
 800bad8:	0800baeb 	.word	0x0800baeb
 800badc:	0800baf3 	.word	0x0800baf3
 800bae0:	0800bafb 	.word	0x0800bafb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	61fb      	str	r3, [r7, #28]
      break;
 800bae8:	e012      	b.n	800bb10 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800baea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800baee:	61fb      	str	r3, [r7, #28]
      break;
 800baf0:	e00e      	b.n	800bb10 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800baf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800baf6:	61fb      	str	r3, [r7, #28]
      break;
 800baf8:	e00a      	b.n	800bb10 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bafa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bafe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb02:	f043 0301 	orr.w	r3, r3, #1
 800bb06:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bb08:	e002      	b.n	800bb10 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61fb      	str	r3, [r7, #28]
      break;
 800bb0e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a4f      	ldr	r2, [pc, #316]	@ (800bc54 <HAL_SAI_Init+0x228>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d004      	beq.n	800bb24 <HAL_SAI_Init+0xf8>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a4e      	ldr	r2, [pc, #312]	@ (800bc58 <HAL_SAI_Init+0x22c>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d103      	bne.n	800bb2c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800bb24:	4a4d      	ldr	r2, [pc, #308]	@ (800bc5c <HAL_SAI_Init+0x230>)
 800bb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	e002      	b.n	800bb32 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bb2c:	4a4c      	ldr	r2, [pc, #304]	@ (800bc60 <HAL_SAI_Init+0x234>)
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb30:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d073      	beq.n	800bc22 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a45      	ldr	r2, [pc, #276]	@ (800bc54 <HAL_SAI_Init+0x228>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d004      	beq.n	800bb4e <HAL_SAI_Init+0x122>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a43      	ldr	r2, [pc, #268]	@ (800bc58 <HAL_SAI_Init+0x22c>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d105      	bne.n	800bb5a <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bb4e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bb52:	f7fe fd0d 	bl	800a570 <HAL_RCCEx_GetPeriphCLKFreq>
 800bb56:	61b8      	str	r0, [r7, #24]
 800bb58:	e004      	b.n	800bb64 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bb5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bb5e:	f7fe fd07 	bl	800a570 <HAL_RCCEx_GetPeriphCLKFreq>
 800bb62:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bb6c:	d120      	bne.n	800bbb0 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d102      	bne.n	800bb7c <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800bb76:	2340      	movs	r3, #64	@ 0x40
 800bb78:	613b      	str	r3, [r7, #16]
 800bb7a:	e00a      	b.n	800bb92 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d103      	bne.n	800bb8c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800bb84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb88:	613b      	str	r3, [r7, #16]
 800bb8a:	e002      	b.n	800bb92 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb90:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800bb92:	69ba      	ldr	r2, [r7, #24]
 800bb94:	4613      	mov	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	69db      	ldr	r3, [r3, #28]
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	fb02 f303 	mul.w	r3, r2, r3
 800bba8:	fbb1 f3f3 	udiv	r3, r1, r3
 800bbac:	617b      	str	r3, [r7, #20]
 800bbae:	e017      	b.n	800bbe0 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bbb8:	d101      	bne.n	800bbbe <HAL_SAI_Init+0x192>
 800bbba:	2302      	movs	r3, #2
 800bbbc:	e000      	b.n	800bbc0 <HAL_SAI_Init+0x194>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800bbc2:	69ba      	ldr	r2, [r7, #24]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	4619      	mov	r1, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	fb02 f303 	mul.w	r3, r2, r3
 800bbd8:	021b      	lsls	r3, r3, #8
 800bbda:	fbb1 f3f3 	udiv	r3, r1, r3
 800bbde:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	4a20      	ldr	r2, [pc, #128]	@ (800bc64 <HAL_SAI_Init+0x238>)
 800bbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe8:	08da      	lsrs	r2, r3, #3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800bbee:	6979      	ldr	r1, [r7, #20]
 800bbf0:	4b1c      	ldr	r3, [pc, #112]	@ (800bc64 <HAL_SAI_Init+0x238>)
 800bbf2:	fba3 2301 	umull	r2, r3, r3, r1
 800bbf6:	08da      	lsrs	r2, r3, #3
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	005b      	lsls	r3, r3, #1
 800bc00:	1aca      	subs	r2, r1, r3
 800bc02:	2a08      	cmp	r2, #8
 800bc04:	d904      	bls.n	800bc10 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc14:	2b04      	cmp	r3, #4
 800bc16:	d104      	bne.n	800bc22 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a1b      	ldr	r3, [r3, #32]
 800bc1c:	085a      	lsrs	r2, r3, #1
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_SAI_Init+0x206>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	2b02      	cmp	r3, #2
 800bc30:	d109      	bne.n	800bc46 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d101      	bne.n	800bc3e <HAL_SAI_Init+0x212>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	e001      	b.n	800bc42 <HAL_SAI_Init+0x216>
 800bc3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc42:	623b      	str	r3, [r7, #32]
 800bc44:	e012      	b.n	800bc6c <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d10c      	bne.n	800bc68 <HAL_SAI_Init+0x23c>
 800bc4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc52:	e00a      	b.n	800bc6a <HAL_SAI_Init+0x23e>
 800bc54:	40015404 	.word	0x40015404
 800bc58:	40015424 	.word	0x40015424
 800bc5c:	40015400 	.word	0x40015400
 800bc60:	40015800 	.word	0x40015800
 800bc64:	cccccccd 	.word	0xcccccccd
 800bc68:	2300      	movs	r3, #0
 800bc6a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6819      	ldr	r1, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	4b58      	ldr	r3, [pc, #352]	@ (800bdd8 <HAL_SAI_Init+0x3ac>)
 800bc78:	400b      	ands	r3, r1
 800bc7a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6819      	ldr	r1, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685a      	ldr	r2, [r3, #4]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc8a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bc90:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc96:	431a      	orrs	r2, r3
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800bca4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bcb0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	051b      	lsls	r3, r3, #20
 800bcb8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bcbe:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	430a      	orrs	r2, r1
 800bcc6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800bcd6:	f023 030f 	bic.w	r3, r3, #15
 800bcda:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6859      	ldr	r1, [r3, #4]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	699a      	ldr	r2, [r3, #24]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcea:	431a      	orrs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	430a      	orrs	r2, r1
 800bcf8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6899      	ldr	r1, [r3, #8]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	4b35      	ldr	r3, [pc, #212]	@ (800bddc <HAL_SAI_Init+0x3b0>)
 800bd06:	400b      	ands	r3, r1
 800bd08:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6899      	ldr	r1, [r3, #8]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd14:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bd1a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800bd20:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800bd26:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bd30:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68d9      	ldr	r1, [r3, #12]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800bd48:	400b      	ands	r3, r1
 800bd4a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	68d9      	ldr	r1, [r3, #12]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd5a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd60:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bd62:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	021b      	lsls	r3, r3, #8
 800bd6c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	430a      	orrs	r2, r1
 800bd74:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a19      	ldr	r2, [pc, #100]	@ (800bde0 <HAL_SAI_Init+0x3b4>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d119      	bne.n	800bdb4 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bd80:	4b18      	ldr	r3, [pc, #96]	@ (800bde4 <HAL_SAI_Init+0x3b8>)
 800bd82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd84:	4a17      	ldr	r2, [pc, #92]	@ (800bde4 <HAL_SAI_Init+0x3b8>)
 800bd86:	f023 0301 	bic.w	r3, r3, #1
 800bd8a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d10e      	bne.n	800bdb4 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bda2:	4910      	ldr	r1, [pc, #64]	@ (800bde4 <HAL_SAI_Init+0x3b8>)
 800bda4:	4313      	orrs	r3, r2
 800bda6:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800bda8:	4b0e      	ldr	r3, [pc, #56]	@ (800bde4 <HAL_SAI_Init+0x3b8>)
 800bdaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdac:	4a0d      	ldr	r2, [pc, #52]	@ (800bde4 <HAL_SAI_Init+0x3b8>)
 800bdae:	f043 0301 	orr.w	r3, r3, #1
 800bdb2:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3728      	adds	r7, #40	@ 0x28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	f805c010 	.word	0xf805c010
 800bddc:	fff88000 	.word	0xfff88000
 800bde0:	40015404 	.word	0x40015404
 800bde4:	40015400 	.word	0x40015400

0800bde8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <SAI_InitI2S+0x2e>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	2b02      	cmp	r3, #2
 800be14:	d103      	bne.n	800be1e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800be1c:	e002      	b.n	800be24 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2201      	movs	r2, #1
 800be22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800be2a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be32:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e077      	b.n	800bf3e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d107      	bne.n	800be64 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800be60:	661a      	str	r2, [r3, #96]	@ 0x60
 800be62:	e006      	b.n	800be72 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800be6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b03      	cmp	r3, #3
 800be76:	d84f      	bhi.n	800bf18 <SAI_InitI2S+0x130>
 800be78:	a201      	add	r2, pc, #4	@ (adr r2, 800be80 <SAI_InitI2S+0x98>)
 800be7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7e:	bf00      	nop
 800be80:	0800be91 	.word	0x0800be91
 800be84:	0800beb3 	.word	0x0800beb3
 800be88:	0800bed5 	.word	0x0800bed5
 800be8c:	0800bef7 	.word	0x0800bef7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2280      	movs	r2, #128	@ 0x80
 800be94:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	085b      	lsrs	r3, r3, #1
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	085b      	lsrs	r3, r3, #1
 800bea4:	011a      	lsls	r2, r3, #4
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2240      	movs	r2, #64	@ 0x40
 800beae:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800beb0:	e035      	b.n	800bf1e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2280      	movs	r2, #128	@ 0x80
 800beb6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	085b      	lsrs	r3, r3, #1
 800bebc:	019a      	lsls	r2, r3, #6
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	085b      	lsrs	r3, r3, #1
 800bec6:	015a      	lsls	r2, r3, #5
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2280      	movs	r2, #128	@ 0x80
 800bed0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bed2:	e024      	b.n	800bf1e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	22c0      	movs	r2, #192	@ 0xc0
 800bed8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	085b      	lsrs	r3, r3, #1
 800bede:	019a      	lsls	r2, r3, #6
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	085b      	lsrs	r3, r3, #1
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2280      	movs	r2, #128	@ 0x80
 800bef2:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bef4:	e013      	b.n	800bf1e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	22e0      	movs	r2, #224	@ 0xe0
 800befa:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	085b      	lsrs	r3, r3, #1
 800bf00:	019a      	lsls	r2, r3, #6
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	085b      	lsrs	r3, r3, #1
 800bf0a:	015a      	lsls	r2, r3, #5
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2280      	movs	r2, #128	@ 0x80
 800bf14:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bf16:	e002      	b.n	800bf1e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf1c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d10b      	bne.n	800bf3c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d102      	bne.n	800bf30 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2210      	movs	r2, #16
 800bf2e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d102      	bne.n	800bf3c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2208      	movs	r2, #8
 800bf3a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	371c      	adds	r7, #28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop

0800bf4c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <SAI_InitPCM+0x2e>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d103      	bne.n	800bf82 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bf80:	e002      	b.n	800bf88 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800bf94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bf9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bfb0:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	d103      	bne.n	800bfc0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	655a      	str	r2, [r3, #84]	@ 0x54
 800bfbe:	e002      	b.n	800bfc6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	220d      	movs	r2, #13
 800bfc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2b03      	cmp	r3, #3
 800bfca:	d837      	bhi.n	800c03c <SAI_InitPCM+0xf0>
 800bfcc:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd4 <SAI_InitPCM+0x88>)
 800bfce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd2:	bf00      	nop
 800bfd4:	0800bfe5 	.word	0x0800bfe5
 800bfd8:	0800bffb 	.word	0x0800bffb
 800bfdc:	0800c011 	.word	0x0800c011
 800bfe0:	0800c027 	.word	0x0800c027
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2280      	movs	r2, #128	@ 0x80
 800bfe8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	011a      	lsls	r2, r3, #4
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2240      	movs	r2, #64	@ 0x40
 800bff6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800bff8:	e023      	b.n	800c042 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2280      	movs	r2, #128	@ 0x80
 800bffe:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	015a      	lsls	r2, r3, #5
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2280      	movs	r2, #128	@ 0x80
 800c00c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c00e:	e018      	b.n	800c042 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	22c0      	movs	r2, #192	@ 0xc0
 800c014:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	015a      	lsls	r2, r3, #5
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2280      	movs	r2, #128	@ 0x80
 800c022:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c024:	e00d      	b.n	800c042 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	22e0      	movs	r2, #224	@ 0xe0
 800c02a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	015a      	lsls	r2, r3, #5
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2280      	movs	r2, #128	@ 0x80
 800c038:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c03a:	e002      	b.n	800c042 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	75fb      	strb	r3, [r7, #23]
      break;
 800c040:	bf00      	nop
  }

  return status;
 800c042:	7dfb      	ldrb	r3, [r7, #23]
}
 800c044:	4618      	mov	r0, r3
 800c046:	371c      	adds	r7, #28
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c058:	4b18      	ldr	r3, [pc, #96]	@ (800c0bc <SAI_Disable+0x6c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a18      	ldr	r2, [pc, #96]	@ (800c0c0 <SAI_Disable+0x70>)
 800c05e:	fba2 2303 	umull	r2, r3, r2, r3
 800c062:	0b1b      	lsrs	r3, r3, #12
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c068:	2300      	movs	r3, #0
 800c06a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c07a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10a      	bne.n	800c098 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c088:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	72fb      	strb	r3, [r7, #11]
      break;
 800c096:	e009      	b.n	800c0ac <SAI_Disable+0x5c>
    }
    count--;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3b01      	subs	r3, #1
 800c09c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1e7      	bne.n	800c07c <SAI_Disable+0x2c>

  return status;
 800c0ac:	7afb      	ldrb	r3, [r7, #11]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	20000024 	.word	0x20000024
 800c0c0:	95cbec1b 	.word	0x95cbec1b

0800c0c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e095      	b.n	800c202 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d108      	bne.n	800c0f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c0e6:	d009      	beq.n	800c0fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	61da      	str	r2, [r3, #28]
 800c0ee:	e005      	b.n	800c0fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7f8 f888 	bl	800422c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2202      	movs	r2, #2
 800c120:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c132:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c13c:	d902      	bls.n	800c144 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	e002      	b.n	800c14a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c148:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c152:	d007      	beq.n	800c164 <HAL_SPI_Init+0xa0>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c15c:	d002      	beq.n	800c164 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c174:	431a      	orrs	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	f003 0302 	and.w	r3, r3, #2
 800c17e:	431a      	orrs	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	431a      	orrs	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	69db      	ldr	r3, [r3, #28]
 800c198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c19c:	431a      	orrs	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1a6:	ea42 0103 	orr.w	r1, r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	0c1b      	lsrs	r3, r3, #16
 800c1c0:	f003 0204 	and.w	r2, r3, #4
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c8:	f003 0310 	and.w	r3, r3, #16
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1d2:	f003 0308 	and.w	r3, r3, #8
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c1e0:	ea42 0103 	orr.w	r1, r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	430a      	orrs	r2, r1
 800c1f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b088      	sub	sp, #32
 800c20e:	af00      	add	r7, sp, #0
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	603b      	str	r3, [r7, #0]
 800c216:	4613      	mov	r3, r2
 800c218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c224:	2b01      	cmp	r3, #1
 800c226:	d101      	bne.n	800c22c <HAL_SPI_Transmit+0x22>
 800c228:	2302      	movs	r3, #2
 800c22a:	e15f      	b.n	800c4ec <HAL_SPI_Transmit+0x2e2>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c234:	f7fa fc82 	bl	8006b3c <HAL_GetTick>
 800c238:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c23a:	88fb      	ldrh	r3, [r7, #6]
 800c23c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b01      	cmp	r3, #1
 800c248:	d002      	beq.n	800c250 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c24a:	2302      	movs	r3, #2
 800c24c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c24e:	e148      	b.n	800c4e2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <HAL_SPI_Transmit+0x52>
 800c256:	88fb      	ldrh	r3, [r7, #6]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c260:	e13f      	b.n	800c4e2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2203      	movs	r2, #3
 800c266:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	88fa      	ldrh	r2, [r7, #6]
 800c27a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	88fa      	ldrh	r2, [r7, #6]
 800c280:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2ac:	d10f      	bne.n	800c2ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c2bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c2cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2d8:	2b40      	cmp	r3, #64	@ 0x40
 800c2da:	d007      	beq.n	800c2ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c2f4:	d94f      	bls.n	800c396 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <HAL_SPI_Transmit+0xfa>
 800c2fe:	8afb      	ldrh	r3, [r7, #22]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d142      	bne.n	800c38a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c308:	881a      	ldrh	r2, [r3, #0]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c314:	1c9a      	adds	r2, r3, #2
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c31e:	b29b      	uxth	r3, r3
 800c320:	3b01      	subs	r3, #1
 800c322:	b29a      	uxth	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c328:	e02f      	b.n	800c38a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f003 0302 	and.w	r3, r3, #2
 800c334:	2b02      	cmp	r3, #2
 800c336:	d112      	bne.n	800c35e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c33c:	881a      	ldrh	r2, [r3, #0]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c348:	1c9a      	adds	r2, r3, #2
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c352:	b29b      	uxth	r3, r3
 800c354:	3b01      	subs	r3, #1
 800c356:	b29a      	uxth	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c35c:	e015      	b.n	800c38a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c35e:	f7fa fbed 	bl	8006b3c <HAL_GetTick>
 800c362:	4602      	mov	r2, r0
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d803      	bhi.n	800c376 <HAL_SPI_Transmit+0x16c>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c374:	d102      	bne.n	800c37c <HAL_SPI_Transmit+0x172>
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d106      	bne.n	800c38a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c388:	e0ab      	b.n	800c4e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c38e:	b29b      	uxth	r3, r3
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1ca      	bne.n	800c32a <HAL_SPI_Transmit+0x120>
 800c394:	e080      	b.n	800c498 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <HAL_SPI_Transmit+0x19a>
 800c39e:	8afb      	ldrh	r3, [r7, #22]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d174      	bne.n	800c48e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d912      	bls.n	800c3d4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3b2:	881a      	ldrh	r2, [r3, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3be:	1c9a      	adds	r2, r3, #2
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	3b02      	subs	r3, #2
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c3d2:	e05c      	b.n	800c48e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	330c      	adds	r3, #12
 800c3de:	7812      	ldrb	r2, [r2, #0]
 800c3e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3e6:	1c5a      	adds	r2, r3, #1
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c3fa:	e048      	b.n	800c48e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f003 0302 	and.w	r3, r3, #2
 800c406:	2b02      	cmp	r3, #2
 800c408:	d12b      	bne.n	800c462 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c40e:	b29b      	uxth	r3, r3
 800c410:	2b01      	cmp	r3, #1
 800c412:	d912      	bls.n	800c43a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c418:	881a      	ldrh	r2, [r3, #0]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c424:	1c9a      	adds	r2, r3, #2
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3b02      	subs	r3, #2
 800c432:	b29a      	uxth	r2, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c438:	e029      	b.n	800c48e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	330c      	adds	r3, #12
 800c444:	7812      	ldrb	r2, [r2, #0]
 800c446:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c44c:	1c5a      	adds	r2, r3, #1
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c456:	b29b      	uxth	r3, r3
 800c458:	3b01      	subs	r3, #1
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c460:	e015      	b.n	800c48e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c462:	f7fa fb6b 	bl	8006b3c <HAL_GetTick>
 800c466:	4602      	mov	r2, r0
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	683a      	ldr	r2, [r7, #0]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d803      	bhi.n	800c47a <HAL_SPI_Transmit+0x270>
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c478:	d102      	bne.n	800c480 <HAL_SPI_Transmit+0x276>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d106      	bne.n	800c48e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c480:	2303      	movs	r3, #3
 800c482:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c48c:	e029      	b.n	800c4e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c492:	b29b      	uxth	r3, r3
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1b1      	bne.n	800c3fc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c498:	69ba      	ldr	r2, [r7, #24]
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f001 fa0d 	bl	800d8bc <SPI_EndRxTxTransaction>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	613b      	str	r3, [r7, #16]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	613b      	str	r3, [r7, #16]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	613b      	str	r3, [r7, #16]
 800c4ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d002      	beq.n	800c4da <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	77fb      	strb	r3, [r7, #31]
 800c4d8:	e003      	b.n	800c4e2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c4ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3720      	adds	r7, #32
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b088      	sub	sp, #32
 800c4f8:	af02      	add	r7, sp, #8
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	4613      	mov	r3, r2
 800c502:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b01      	cmp	r3, #1
 800c512:	d002      	beq.n	800c51a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800c514:	2302      	movs	r3, #2
 800c516:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c518:	e11a      	b.n	800c750 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c522:	d112      	bne.n	800c54a <HAL_SPI_Receive+0x56>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10e      	bne.n	800c54a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2204      	movs	r2, #4
 800c530:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c534:	88fa      	ldrh	r2, [r7, #6]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	4613      	mov	r3, r2
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	68b9      	ldr	r1, [r7, #8]
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 f90e 	bl	800c762 <HAL_SPI_TransmitReceive>
 800c546:	4603      	mov	r3, r0
 800c548:	e107      	b.n	800c75a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c550:	2b01      	cmp	r3, #1
 800c552:	d101      	bne.n	800c558 <HAL_SPI_Receive+0x64>
 800c554:	2302      	movs	r3, #2
 800c556:	e100      	b.n	800c75a <HAL_SPI_Receive+0x266>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c560:	f7fa faec 	bl	8006b3c <HAL_GetTick>
 800c564:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <HAL_SPI_Receive+0x7e>
 800c56c:	88fb      	ldrh	r3, [r7, #6]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d102      	bne.n	800c578 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c576:	e0eb      	b.n	800c750 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2204      	movs	r2, #4
 800c57c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	88fa      	ldrh	r2, [r7, #6]
 800c590:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c5c2:	d908      	bls.n	800c5d6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c5d2:	605a      	str	r2, [r3, #4]
 800c5d4:	e007      	b.n	800c5e6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	685a      	ldr	r2, [r3, #4]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c5e4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5ee:	d10f      	bne.n	800c610 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c5fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c60e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c61a:	2b40      	cmp	r3, #64	@ 0x40
 800c61c:	d007      	beq.n	800c62e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c62c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c636:	d86f      	bhi.n	800c718 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c638:	e034      	b.n	800c6a4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b01      	cmp	r3, #1
 800c646:	d117      	bne.n	800c678 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f103 020c 	add.w	r2, r3, #12
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c654:	7812      	ldrb	r2, [r2, #0]
 800c656:	b2d2      	uxtb	r2, r2
 800c658:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	3b01      	subs	r3, #1
 800c66e:	b29a      	uxth	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c676:	e015      	b.n	800c6a4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c678:	f7fa fa60 	bl	8006b3c <HAL_GetTick>
 800c67c:	4602      	mov	r2, r0
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	429a      	cmp	r2, r3
 800c686:	d803      	bhi.n	800c690 <HAL_SPI_Receive+0x19c>
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68e:	d102      	bne.n	800c696 <HAL_SPI_Receive+0x1a2>
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800c696:	2303      	movs	r3, #3
 800c698:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c6a2:	e055      	b.n	800c750 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1c4      	bne.n	800c63a <HAL_SPI_Receive+0x146>
 800c6b0:	e038      	b.n	800c724 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d115      	bne.n	800c6ec <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ca:	b292      	uxth	r2, r2
 800c6cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d2:	1c9a      	adds	r2, r3, #2
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c6ea:	e015      	b.n	800c718 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6ec:	f7fa fa26 	bl	8006b3c <HAL_GetTick>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d803      	bhi.n	800c704 <HAL_SPI_Receive+0x210>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c702:	d102      	bne.n	800c70a <HAL_SPI_Receive+0x216>
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d106      	bne.n	800c718 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2201      	movs	r2, #1
 800c712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c716:	e01b      	b.n	800c750 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c71e:	b29b      	uxth	r3, r3
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1c6      	bne.n	800c6b2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f001 f86f 	bl	800d80c <SPI_EndRxTransaction>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2220      	movs	r2, #32
 800c738:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800c742:	2301      	movs	r3, #1
 800c744:	75fb      	strb	r3, [r7, #23]
 800c746:	e003      	b.n	800c750 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c758:	7dfb      	ldrb	r3, [r7, #23]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b08a      	sub	sp, #40	@ 0x28
 800c766:	af00      	add	r7, sp, #0
 800c768:	60f8      	str	r0, [r7, #12]
 800c76a:	60b9      	str	r1, [r7, #8]
 800c76c:	607a      	str	r2, [r7, #4]
 800c76e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c770:	2301      	movs	r3, #1
 800c772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c780:	2b01      	cmp	r3, #1
 800c782:	d101      	bne.n	800c788 <HAL_SPI_TransmitReceive+0x26>
 800c784:	2302      	movs	r3, #2
 800c786:	e20a      	b.n	800cb9e <HAL_SPI_TransmitReceive+0x43c>
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c790:	f7fa f9d4 	bl	8006b3c <HAL_GetTick>
 800c794:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c79c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c7a4:	887b      	ldrh	r3, [r7, #2]
 800c7a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c7a8:	887b      	ldrh	r3, [r7, #2]
 800c7aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c7ac:	7efb      	ldrb	r3, [r7, #27]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d00e      	beq.n	800c7d0 <HAL_SPI_TransmitReceive+0x6e>
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c7b8:	d106      	bne.n	800c7c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d102      	bne.n	800c7c8 <HAL_SPI_TransmitReceive+0x66>
 800c7c2:	7efb      	ldrb	r3, [r7, #27]
 800c7c4:	2b04      	cmp	r3, #4
 800c7c6:	d003      	beq.n	800c7d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c7ce:	e1e0      	b.n	800cb92 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d005      	beq.n	800c7e2 <HAL_SPI_TransmitReceive+0x80>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <HAL_SPI_TransmitReceive+0x80>
 800c7dc:	887b      	ldrh	r3, [r7, #2]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d103      	bne.n	800c7ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c7e8:	e1d3      	b.n	800cb92 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	d003      	beq.n	800c7fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2205      	movs	r2, #5
 800c7fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	887a      	ldrh	r2, [r7, #2]
 800c80e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	887a      	ldrh	r2, [r7, #2]
 800c816:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	887a      	ldrh	r2, [r7, #2]
 800c824:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	887a      	ldrh	r2, [r7, #2]
 800c82a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c840:	d802      	bhi.n	800c848 <HAL_SPI_TransmitReceive+0xe6>
 800c842:	8a3b      	ldrh	r3, [r7, #16]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d908      	bls.n	800c85a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c856:	605a      	str	r2, [r3, #4]
 800c858:	e007      	b.n	800c86a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c868:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c874:	2b40      	cmp	r3, #64	@ 0x40
 800c876:	d007      	beq.n	800c888 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c890:	f240 8081 	bls.w	800c996 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <HAL_SPI_TransmitReceive+0x140>
 800c89c:	8a7b      	ldrh	r3, [r7, #18]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d16d      	bne.n	800c97e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a6:	881a      	ldrh	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b2:	1c9a      	adds	r2, r3, #2
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8c6:	e05a      	b.n	800c97e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	f003 0302 	and.w	r3, r3, #2
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d11b      	bne.n	800c90e <HAL_SPI_TransmitReceive+0x1ac>
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d016      	beq.n	800c90e <HAL_SPI_TransmitReceive+0x1ac>
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d113      	bne.n	800c90e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8ea:	881a      	ldrh	r2, [r3, #0]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f6:	1c9a      	adds	r2, r3, #2
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c900:	b29b      	uxth	r3, r3
 800c902:	3b01      	subs	r3, #1
 800c904:	b29a      	uxth	r2, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c90a:	2300      	movs	r3, #0
 800c90c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	f003 0301 	and.w	r3, r3, #1
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d11c      	bne.n	800c956 <HAL_SPI_TransmitReceive+0x1f4>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c922:	b29b      	uxth	r3, r3
 800c924:	2b00      	cmp	r3, #0
 800c926:	d016      	beq.n	800c956 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c932:	b292      	uxth	r2, r2
 800c934:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93a:	1c9a      	adds	r2, r3, #2
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c946:	b29b      	uxth	r3, r3
 800c948:	3b01      	subs	r3, #1
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c952:	2301      	movs	r3, #1
 800c954:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c956:	f7fa f8f1 	bl	8006b3c <HAL_GetTick>
 800c95a:	4602      	mov	r2, r0
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c962:	429a      	cmp	r2, r3
 800c964:	d80b      	bhi.n	800c97e <HAL_SPI_TransmitReceive+0x21c>
 800c966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96c:	d007      	beq.n	800c97e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800c96e:	2303      	movs	r3, #3
 800c970:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800c97c:	e109      	b.n	800cb92 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c982:	b29b      	uxth	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d19f      	bne.n	800c8c8 <HAL_SPI_TransmitReceive+0x166>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c98e:	b29b      	uxth	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	d199      	bne.n	800c8c8 <HAL_SPI_TransmitReceive+0x166>
 800c994:	e0e3      	b.n	800cb5e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d003      	beq.n	800c9a6 <HAL_SPI_TransmitReceive+0x244>
 800c99e:	8a7b      	ldrh	r3, [r7, #18]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	f040 80cf 	bne.w	800cb44 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d912      	bls.n	800c9d6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9b4:	881a      	ldrh	r2, [r3, #0]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9c0:	1c9a      	adds	r2, r3, #2
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3b02      	subs	r3, #2
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c9d4:	e0b6      	b.n	800cb44 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	330c      	adds	r3, #12
 800c9e0:	7812      	ldrb	r2, [r2, #0]
 800c9e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e8:	1c5a      	adds	r2, r3, #1
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9fc:	e0a2      	b.n	800cb44 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	f003 0302 	and.w	r3, r3, #2
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d134      	bne.n	800ca76 <HAL_SPI_TransmitReceive+0x314>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d02f      	beq.n	800ca76 <HAL_SPI_TransmitReceive+0x314>
 800ca16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d12c      	bne.n	800ca76 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d912      	bls.n	800ca4c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2a:	881a      	ldrh	r2, [r3, #0]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca36:	1c9a      	adds	r2, r3, #2
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	3b02      	subs	r3, #2
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ca4a:	e012      	b.n	800ca72 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	330c      	adds	r3, #12
 800ca56:	7812      	ldrb	r2, [r2, #0]
 800ca58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ca72:	2300      	movs	r3, #0
 800ca74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d148      	bne.n	800cb16 <HAL_SPI_TransmitReceive+0x3b4>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d042      	beq.n	800cb16 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d923      	bls.n	800cae4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68da      	ldr	r2, [r3, #12]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa6:	b292      	uxth	r2, r2
 800caa8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caae:	1c9a      	adds	r2, r3, #2
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800caba:	b29b      	uxth	r3, r3
 800cabc:	3b02      	subs	r3, #2
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cacc:	b29b      	uxth	r3, r3
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d81f      	bhi.n	800cb12 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cae0:	605a      	str	r2, [r3, #4]
 800cae2:	e016      	b.n	800cb12 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f103 020c 	add.w	r2, r3, #12
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caf0:	7812      	ldrb	r2, [r2, #0]
 800caf2:	b2d2      	uxtb	r2, r2
 800caf4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cafa:	1c5a      	adds	r2, r3, #1
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cb12:	2301      	movs	r3, #1
 800cb14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cb16:	f7fa f811 	bl	8006b3c <HAL_GetTick>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	1ad3      	subs	r3, r2, r3
 800cb20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d803      	bhi.n	800cb2e <HAL_SPI_TransmitReceive+0x3cc>
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2c:	d102      	bne.n	800cb34 <HAL_SPI_TransmitReceive+0x3d2>
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d107      	bne.n	800cb44 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800cb34:	2303      	movs	r3, #3
 800cb36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800cb42:	e026      	b.n	800cb92 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f47f af57 	bne.w	800c9fe <HAL_SPI_TransmitReceive+0x29c>
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f47f af50 	bne.w	800c9fe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb5e:	69fa      	ldr	r2, [r7, #28]
 800cb60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f000 feaa 	bl	800d8bc <SPI_EndRxTxTransaction>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d005      	beq.n	800cb7a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2220      	movs	r2, #32
 800cb78:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb88:	e003      	b.n	800cb92 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cb9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3728      	adds	r7, #40	@ 0x28
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d101      	bne.n	800cbc8 <HAL_SPI_Transmit_DMA+0x20>
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	e0d4      	b.n	800cd72 <HAL_SPI_Transmit_DMA+0x1ca>
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d002      	beq.n	800cbe2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800cbdc:	2302      	movs	r3, #2
 800cbde:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cbe0:	e0c2      	b.n	800cd68 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <HAL_SPI_Transmit_DMA+0x46>
 800cbe8:	88fb      	ldrh	r3, [r7, #6]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d102      	bne.n	800cbf4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cbf2:	e0b9      	b.n	800cd68 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2203      	movs	r2, #3
 800cbf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	88fa      	ldrh	r2, [r7, #6]
 800cc0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	88fa      	ldrh	r2, [r7, #6]
 800cc12:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc3e:	d10f      	bne.n	800cc60 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc64:	4a45      	ldr	r2, [pc, #276]	@ (800cd7c <HAL_SPI_Transmit_DMA+0x1d4>)
 800cc66:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc6c:	4a44      	ldr	r2, [pc, #272]	@ (800cd80 <HAL_SPI_Transmit_DMA+0x1d8>)
 800cc6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc74:	4a43      	ldr	r2, [pc, #268]	@ (800cd84 <HAL_SPI_Transmit_DMA+0x1dc>)
 800cc76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cc8e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cc98:	d82d      	bhi.n	800ccf6 <HAL_SPI_Transmit_DMA+0x14e>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc9e:	699b      	ldr	r3, [r3, #24]
 800cca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cca4:	d127      	bne.n	800ccf6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10f      	bne.n	800ccd4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	685a      	ldr	r2, [r3, #4]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ccc2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	085b      	lsrs	r3, r3, #1
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ccd2:	e010      	b.n	800ccf6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685a      	ldr	r2, [r3, #4]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cce2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	085b      	lsrs	r3, r3, #1
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	3301      	adds	r3, #1
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccfe:	4619      	mov	r1, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	330c      	adds	r3, #12
 800cd06:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd0c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cd0e:	f7fb f8d2 	bl	8007eb6 <HAL_DMA_Start_IT>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d008      	beq.n	800cd2a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd1c:	f043 0210 	orr.w	r2, r3, #16
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cd28:	e01e      	b.n	800cd68 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd34:	2b40      	cmp	r3, #64	@ 0x40
 800cd36:	d007      	beq.n	800cd48 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd46:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f042 0220 	orr.w	r2, r2, #32
 800cd56:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f042 0202 	orr.w	r2, r2, #2
 800cd66:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3718      	adds	r7, #24
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	0800d53b 	.word	0x0800d53b
 800cd80:	0800d35d 	.word	0x0800d35d
 800cd84:	0800d58f 	.word	0x0800d58f

0800cd88 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	4613      	mov	r3, r2
 800cd94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d002      	beq.n	800cdac <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800cda6:	2302      	movs	r3, #2
 800cda8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cdaa:	e0fe      	b.n	800cfaa <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d110      	bne.n	800cdd6 <HAL_SPI_Receive_DMA+0x4e>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cdbc:	d10b      	bne.n	800cdd6 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2204      	movs	r2, #4
 800cdc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800cdc6:	88fb      	ldrh	r3, [r7, #6]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	68b9      	ldr	r1, [r7, #8]
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f000 f8fb 	bl	800cfc8 <HAL_SPI_TransmitReceive_DMA>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	e0ee      	b.n	800cfb4 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d101      	bne.n	800cde4 <HAL_SPI_Receive_DMA+0x5c>
 800cde0:	2302      	movs	r3, #2
 800cde2:	e0e7      	b.n	800cfb4 <HAL_SPI_Receive_DMA+0x22c>
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d002      	beq.n	800cdf8 <HAL_SPI_Receive_DMA+0x70>
 800cdf2:	88fb      	ldrh	r3, [r7, #6]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d102      	bne.n	800cdfe <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cdfc:	e0d5      	b.n	800cfaa <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2204      	movs	r2, #4
 800ce02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	88fa      	ldrh	r2, [r7, #6]
 800ce16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	88fa      	ldrh	r2, [r7, #6]
 800ce1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2200      	movs	r2, #0
 800ce38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce42:	d10f      	bne.n	800ce64 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ce62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce72:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce7c:	d908      	bls.n	800ce90 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ce8c:	605a      	str	r2, [r3, #4]
 800ce8e:	e042      	b.n	800cf16 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	685a      	ldr	r2, [r3, #4]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ce9e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ceaa:	d134      	bne.n	800cf16 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ceba:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	f003 0301 	and.w	r3, r3, #1
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d111      	bne.n	800cef0 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	685a      	ldr	r2, [r3, #4]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ceda:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	085b      	lsrs	r3, r3, #1
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800ceee:	e012      	b.n	800cf16 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cefe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	085b      	lsrs	r3, r3, #1
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf1a:	4a28      	ldr	r2, [pc, #160]	@ (800cfbc <HAL_SPI_Receive_DMA+0x234>)
 800cf1c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf22:	4a27      	ldr	r2, [pc, #156]	@ (800cfc0 <HAL_SPI_Receive_DMA+0x238>)
 800cf24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf2a:	4a26      	ldr	r2, [pc, #152]	@ (800cfc4 <HAL_SPI_Receive_DMA+0x23c>)
 800cf2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf32:	2200      	movs	r2, #0
 800cf34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	330c      	adds	r3, #12
 800cf40:	4619      	mov	r1, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf46:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cf4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cf50:	f7fa ffb1 	bl	8007eb6 <HAL_DMA_Start_IT>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d008      	beq.n	800cf6c <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf5e:	f043 0210 	orr.w	r2, r3, #16
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cf6a:	e01e      	b.n	800cfaa <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf76:	2b40      	cmp	r3, #64	@ 0x40
 800cf78:	d007      	beq.n	800cf8a <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf88:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	685a      	ldr	r2, [r3, #4]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f042 0220 	orr.w	r2, r2, #32
 800cf98:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	685a      	ldr	r2, [r3, #4]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f042 0201 	orr.w	r2, r2, #1
 800cfa8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cfb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	0800d557 	.word	0x0800d557
 800cfc0:	0800d403 	.word	0x0800d403
 800cfc4:	0800d58f 	.word	0x0800d58f

0800cfc8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b086      	sub	sp, #24
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
 800cfd4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d101      	bne.n	800cfe8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800cfe4:	2302      	movs	r3, #2
 800cfe6:	e164      	b.n	800d2b2 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cff6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800cffe:	7dbb      	ldrb	r3, [r7, #22]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d00d      	beq.n	800d020 <HAL_SPI_TransmitReceive_DMA+0x58>
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d00a:	d106      	bne.n	800d01a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d102      	bne.n	800d01a <HAL_SPI_TransmitReceive_DMA+0x52>
 800d014:	7dbb      	ldrb	r3, [r7, #22]
 800d016:	2b04      	cmp	r3, #4
 800d018:	d002      	beq.n	800d020 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d01a:	2302      	movs	r3, #2
 800d01c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d01e:	e143      	b.n	800d2a8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d005      	beq.n	800d032 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d02c:	887b      	ldrh	r3, [r7, #2]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d102      	bne.n	800d038 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d036:	e137      	b.n	800d2a8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b04      	cmp	r3, #4
 800d042:	d003      	beq.n	800d04c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2205      	movs	r2, #5
 800d048:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2200      	movs	r2, #0
 800d050:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	887a      	ldrh	r2, [r7, #2]
 800d05c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	887a      	ldrh	r2, [r7, #2]
 800d062:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	887a      	ldrh	r2, [r7, #2]
 800d06e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	887a      	ldrh	r2, [r7, #2]
 800d076:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2200      	movs	r2, #0
 800d07e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2200      	movs	r2, #0
 800d084:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	685a      	ldr	r2, [r3, #4]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800d094:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d09e:	d908      	bls.n	800d0b2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d0ae:	605a      	str	r2, [r3, #4]
 800d0b0:	e06f      	b.n	800d192 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	685a      	ldr	r2, [r3, #4]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d0c0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0c6:	699b      	ldr	r3, [r3, #24]
 800d0c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0cc:	d126      	bne.n	800d11c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10f      	bne.n	800d0fa <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	685a      	ldr	r2, [r3, #4]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d0e8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	085b      	lsrs	r3, r3, #1
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d0f8:	e010      	b.n	800d11c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d108:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d10e:	b29b      	uxth	r3, r3
 800d110:	085b      	lsrs	r3, r3, #1
 800d112:	b29b      	uxth	r3, r3
 800d114:	3301      	adds	r3, #1
 800d116:	b29a      	uxth	r2, r3
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d126:	d134      	bne.n	800d192 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d136:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d13e:	b29b      	uxth	r3, r3
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d111      	bne.n	800d16c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d156:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d15e:	b29b      	uxth	r3, r3
 800d160:	085b      	lsrs	r3, r3, #1
 800d162:	b29a      	uxth	r2, r3
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d16a:	e012      	b.n	800d192 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d17a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d182:	b29b      	uxth	r3, r3
 800d184:	085b      	lsrs	r3, r3, #1
 800d186:	b29b      	uxth	r3, r3
 800d188:	3301      	adds	r3, #1
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b04      	cmp	r3, #4
 800d19c:	d108      	bne.n	800d1b0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1a2:	4a46      	ldr	r2, [pc, #280]	@ (800d2bc <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800d1a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1aa:	4a45      	ldr	r2, [pc, #276]	@ (800d2c0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800d1ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d1ae:	e007      	b.n	800d1c0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1b4:	4a43      	ldr	r2, [pc, #268]	@ (800d2c4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800d1b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1bc:	4a42      	ldr	r2, [pc, #264]	@ (800d2c8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800d1be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1c4:	4a41      	ldr	r2, [pc, #260]	@ (800d2cc <HAL_SPI_TransmitReceive_DMA+0x304>)
 800d1c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	330c      	adds	r3, #12
 800d1da:	4619      	mov	r1, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1e0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d1e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d1ea:	f7fa fe64 	bl	8007eb6 <HAL_DMA_Start_IT>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d008      	beq.n	800d206 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1f8:	f043 0210 	orr.w	r2, r3, #16
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d204:	e050      	b.n	800d2a8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f042 0201 	orr.w	r2, r2, #1
 800d214:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d21a:	2200      	movs	r2, #0
 800d21c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d222:	2200      	movs	r2, #0
 800d224:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d22a:	2200      	movs	r2, #0
 800d22c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d232:	2200      	movs	r2, #0
 800d234:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d23e:	4619      	mov	r1, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	330c      	adds	r3, #12
 800d246:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d24c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d24e:	f7fa fe32 	bl	8007eb6 <HAL_DMA_Start_IT>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d008      	beq.n	800d26a <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d25c:	f043 0210 	orr.w	r2, r3, #16
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d268:	e01e      	b.n	800d2a8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d274:	2b40      	cmp	r3, #64	@ 0x40
 800d276:	d007      	beq.n	800d288 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d286:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f042 0220 	orr.w	r2, r2, #32
 800d296:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	685a      	ldr	r2, [r3, #4]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f042 0202 	orr.w	r2, r2, #2
 800d2a6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3718      	adds	r7, #24
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	0800d557 	.word	0x0800d557
 800d2c0:	0800d403 	.word	0x0800d403
 800d2c4:	0800d573 	.word	0x0800d573
 800d2c8:	0800d4ab 	.word	0x0800d4ab
 800d2cc:	0800d58f 	.word	0x0800d58f

0800d2d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d368:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d36a:	f7f9 fbe7 	bl	8006b3c <HAL_GetTick>
 800d36e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f003 0320 	and.w	r3, r3, #32
 800d37a:	2b20      	cmp	r3, #32
 800d37c:	d03b      	beq.n	800d3f6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f022 0220 	bic.w	r2, r2, #32
 800d38c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f022 0202 	bic.w	r2, r2, #2
 800d39c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	2164      	movs	r1, #100	@ 0x64
 800d3a2:	6978      	ldr	r0, [r7, #20]
 800d3a4:	f000 fa8a 	bl	800d8bc <SPI_EndRxTxTransaction>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d005      	beq.n	800d3ba <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3b2:	f043 0220 	orr.w	r2, r3, #32
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10a      	bne.n	800d3d8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60fb      	str	r3, [r7, #12]
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	60fb      	str	r3, [r7, #12]
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	60fb      	str	r3, [r7, #12]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d3ee:	6978      	ldr	r0, [r7, #20]
 800d3f0:	f7ff ffaa 	bl	800d348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d3f4:	e002      	b.n	800d3fc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d3f6:	6978      	ldr	r0, [r7, #20]
 800d3f8:	f7ff ff6a 	bl	800d2d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d3fc:	3718      	adds	r7, #24
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b084      	sub	sp, #16
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d40e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d410:	f7f9 fb94 	bl	8006b3c <HAL_GetTick>
 800d414:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0320 	and.w	r3, r3, #32
 800d420:	2b20      	cmp	r3, #32
 800d422:	d03c      	beq.n	800d49e <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f022 0220 	bic.w	r2, r2, #32
 800d432:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10d      	bne.n	800d458 <SPI_DMAReceiveCplt+0x56>
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d444:	d108      	bne.n	800d458 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f022 0203 	bic.w	r2, r2, #3
 800d454:	605a      	str	r2, [r3, #4]
 800d456:	e007      	b.n	800d468 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	685a      	ldr	r2, [r3, #4]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f022 0201 	bic.w	r2, r2, #1
 800d466:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	2164      	movs	r1, #100	@ 0x64
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f000 f9cd 	bl	800d80c <SPI_EndRxTransaction>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2220      	movs	r2, #32
 800d47c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2200      	movs	r2, #0
 800d482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2201      	movs	r2, #1
 800d48a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f7ff ff56 	bl	800d348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d49c:	e002      	b.n	800d4a4 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f7ff ff20 	bl	800d2e4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d4b8:	f7f9 fb40 	bl	8006b3c <HAL_GetTick>
 800d4bc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f003 0320 	and.w	r3, r3, #32
 800d4c8:	2b20      	cmp	r3, #32
 800d4ca:	d030      	beq.n	800d52e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	685a      	ldr	r2, [r3, #4]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f022 0220 	bic.w	r2, r2, #32
 800d4da:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	2164      	movs	r1, #100	@ 0x64
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 f9eb 	bl	800d8bc <SPI_EndRxTxTransaction>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d005      	beq.n	800d4f8 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4f0:	f043 0220 	orr.w	r2, r3, #32
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f022 0203 	bic.w	r2, r2, #3
 800d506:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2200      	movs	r2, #0
 800d512:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2201      	movs	r2, #1
 800d51a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d522:	2b00      	cmp	r3, #0
 800d524:	d003      	beq.n	800d52e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7ff ff0e 	bl	800d348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d52c:	e002      	b.n	800d534 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f7ff fee2 	bl	800d2f8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b084      	sub	sp, #16
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d546:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f7ff fedf 	bl	800d30c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d54e:	bf00      	nop
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b084      	sub	sp, #16
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d562:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f7ff fedb 	bl	800d320 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d56a:	bf00      	nop
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f7ff fed7 	bl	800d334 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d586:	bf00      	nop
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b084      	sub	sp, #16
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d59a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	685a      	ldr	r2, [r3, #4]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f022 0203 	bic.w	r2, r2, #3
 800d5aa:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5b0:	f043 0210 	orr.w	r2, r3, #16
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff fec1 	bl	800d348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d5c6:	bf00      	nop
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
	...

0800d5d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b088      	sub	sp, #32
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	603b      	str	r3, [r7, #0]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d5e0:	f7f9 faac 	bl	8006b3c <HAL_GetTick>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e8:	1a9b      	subs	r3, r3, r2
 800d5ea:	683a      	ldr	r2, [r7, #0]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d5f0:	f7f9 faa4 	bl	8006b3c <HAL_GetTick>
 800d5f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d5f6:	4b39      	ldr	r3, [pc, #228]	@ (800d6dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	015b      	lsls	r3, r3, #5
 800d5fc:	0d1b      	lsrs	r3, r3, #20
 800d5fe:	69fa      	ldr	r2, [r7, #28]
 800d600:	fb02 f303 	mul.w	r3, r2, r3
 800d604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d606:	e054      	b.n	800d6b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60e:	d050      	beq.n	800d6b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d610:	f7f9 fa94 	bl	8006b3c <HAL_GetTick>
 800d614:	4602      	mov	r2, r0
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	69fa      	ldr	r2, [r7, #28]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d902      	bls.n	800d626 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d13d      	bne.n	800d6a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d63e:	d111      	bne.n	800d664 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d648:	d004      	beq.n	800d654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d652:	d107      	bne.n	800d664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d66c:	d10f      	bne.n	800d68e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d67c:	601a      	str	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d68c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2200      	movs	r2, #0
 800d69a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	e017      	b.n	800d6d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	689a      	ldr	r2, [r3, #8]
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	4013      	ands	r3, r2
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	bf0c      	ite	eq
 800d6c2:	2301      	moveq	r3, #1
 800d6c4:	2300      	movne	r3, #0
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d19b      	bne.n	800d608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3720      	adds	r7, #32
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	20000024 	.word	0x20000024

0800d6e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b08a      	sub	sp, #40	@ 0x28
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
 800d6ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d6f2:	f7f9 fa23 	bl	8006b3c <HAL_GetTick>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fa:	1a9b      	subs	r3, r3, r2
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	4413      	add	r3, r2
 800d700:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d702:	f7f9 fa1b 	bl	8006b3c <HAL_GetTick>
 800d706:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	330c      	adds	r3, #12
 800d70e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d710:	4b3d      	ldr	r3, [pc, #244]	@ (800d808 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	4613      	mov	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4413      	add	r3, r2
 800d71a:	00da      	lsls	r2, r3, #3
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	0d1b      	lsrs	r3, r3, #20
 800d720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d722:	fb02 f303 	mul.w	r3, r2, r3
 800d726:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d728:	e060      	b.n	800d7ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d730:	d107      	bne.n	800d742 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d104      	bne.n	800d742 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d740:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d748:	d050      	beq.n	800d7ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d74a:	f7f9 f9f7 	bl	8006b3c <HAL_GetTick>
 800d74e:	4602      	mov	r2, r0
 800d750:	6a3b      	ldr	r3, [r7, #32]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d756:	429a      	cmp	r2, r3
 800d758:	d902      	bls.n	800d760 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d13d      	bne.n	800d7dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d76e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d778:	d111      	bne.n	800d79e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d782:	d004      	beq.n	800d78e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d78c:	d107      	bne.n	800d79e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d79c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7a6:	d10f      	bne.n	800d7c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d7c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d7d8:	2303      	movs	r3, #3
 800d7da:	e010      	b.n	800d7fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	689a      	ldr	r2, [r3, #8]
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d196      	bne.n	800d72a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3728      	adds	r7, #40	@ 0x28
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	20000024 	.word	0x20000024

0800d80c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af02      	add	r7, sp, #8
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d820:	d111      	bne.n	800d846 <SPI_EndRxTransaction+0x3a>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d82a:	d004      	beq.n	800d836 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d834:	d107      	bne.n	800d846 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d844:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	2200      	movs	r2, #0
 800d84e:	2180      	movs	r1, #128	@ 0x80
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff febd 	bl	800d5d0 <SPI_WaitFlagStateUntilTimeout>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d007      	beq.n	800d86c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d860:	f043 0220 	orr.w	r2, r3, #32
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d868:	2303      	movs	r3, #3
 800d86a:	e023      	b.n	800d8b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d874:	d11d      	bne.n	800d8b2 <SPI_EndRxTransaction+0xa6>
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d87e:	d004      	beq.n	800d88a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d888:	d113      	bne.n	800d8b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2200      	movs	r2, #0
 800d892:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff ff22 	bl	800d6e0 <SPI_WaitFifoStateUntilTimeout>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d007      	beq.n	800d8b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d8a6:	f043 0220 	orr.w	r2, r3, #32
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	e000      	b.n	800d8b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b086      	sub	sp, #24
 800d8c0:	af02      	add	r7, sp, #8
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	9300      	str	r3, [sp, #0]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f7ff ff03 	bl	800d6e0 <SPI_WaitFifoStateUntilTimeout>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d007      	beq.n	800d8f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d8e4:	f043 0220 	orr.w	r2, r3, #32
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	e027      	b.n	800d940 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2180      	movs	r1, #128	@ 0x80
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7ff fe68 	bl	800d5d0 <SPI_WaitFlagStateUntilTimeout>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d007      	beq.n	800d916 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d90a:	f043 0220 	orr.w	r2, r3, #32
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d912:	2303      	movs	r3, #3
 800d914:	e014      	b.n	800d940 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f7ff fedc 	bl	800d6e0 <SPI_WaitFifoStateUntilTimeout>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d007      	beq.n	800d93e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d932:	f043 0220 	orr.w	r2, r3, #32
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d93a:	2303      	movs	r3, #3
 800d93c:	e000      	b.n	800d940 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d101      	bne.n	800d95a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	e049      	b.n	800d9ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d960:	b2db      	uxtb	r3, r3
 800d962:	2b00      	cmp	r3, #0
 800d964:	d106      	bne.n	800d974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7f6 fd90 	bl	8004494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2202      	movs	r2, #2
 800d978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3304      	adds	r3, #4
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f000 fde6 	bl	800e558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2201      	movs	r2, #1
 800d990:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
	...

0800d9f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da06:	b2db      	uxtb	r3, r3
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d001      	beq.n	800da10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	e04f      	b.n	800dab0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2202      	movs	r2, #2
 800da14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68da      	ldr	r2, [r3, #12]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f042 0201 	orr.w	r2, r2, #1
 800da26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a23      	ldr	r2, [pc, #140]	@ (800dabc <HAL_TIM_Base_Start_IT+0xc4>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d01d      	beq.n	800da6e <HAL_TIM_Base_Start_IT+0x76>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da3a:	d018      	beq.n	800da6e <HAL_TIM_Base_Start_IT+0x76>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a1f      	ldr	r2, [pc, #124]	@ (800dac0 <HAL_TIM_Base_Start_IT+0xc8>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d013      	beq.n	800da6e <HAL_TIM_Base_Start_IT+0x76>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a1e      	ldr	r2, [pc, #120]	@ (800dac4 <HAL_TIM_Base_Start_IT+0xcc>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d00e      	beq.n	800da6e <HAL_TIM_Base_Start_IT+0x76>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a1c      	ldr	r2, [pc, #112]	@ (800dac8 <HAL_TIM_Base_Start_IT+0xd0>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d009      	beq.n	800da6e <HAL_TIM_Base_Start_IT+0x76>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a1b      	ldr	r2, [pc, #108]	@ (800dacc <HAL_TIM_Base_Start_IT+0xd4>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d004      	beq.n	800da6e <HAL_TIM_Base_Start_IT+0x76>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a19      	ldr	r2, [pc, #100]	@ (800dad0 <HAL_TIM_Base_Start_IT+0xd8>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d115      	bne.n	800da9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	689a      	ldr	r2, [r3, #8]
 800da74:	4b17      	ldr	r3, [pc, #92]	@ (800dad4 <HAL_TIM_Base_Start_IT+0xdc>)
 800da76:	4013      	ands	r3, r2
 800da78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2b06      	cmp	r3, #6
 800da7e:	d015      	beq.n	800daac <HAL_TIM_Base_Start_IT+0xb4>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da86:	d011      	beq.n	800daac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f042 0201 	orr.w	r2, r2, #1
 800da96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da98:	e008      	b.n	800daac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f042 0201 	orr.w	r2, r2, #1
 800daa8:	601a      	str	r2, [r3, #0]
 800daaa:	e000      	b.n	800daae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	40012c00 	.word	0x40012c00
 800dac0:	40000400 	.word	0x40000400
 800dac4:	40000800 	.word	0x40000800
 800dac8:	40000c00 	.word	0x40000c00
 800dacc:	40013400 	.word	0x40013400
 800dad0:	40014000 	.word	0x40014000
 800dad4:	00010007 	.word	0x00010007

0800dad8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d101      	bne.n	800daea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800dae6:	2301      	movs	r3, #1
 800dae8:	e049      	b.n	800db7e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d106      	bne.n	800db04 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f841 	bl	800db86 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2202      	movs	r2, #2
 800db08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	3304      	adds	r3, #4
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	f000 fd1e 	bl	800e558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800db86:	b480      	push	{r7}
 800db88:	b083      	sub	sp, #12
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800db8e:	bf00      	nop
 800db90:	370c      	adds	r7, #12
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr

0800db9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b082      	sub	sp, #8
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e049      	b.n	800dc40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d106      	bne.n	800dbc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7f6 fbc5 	bl	8004350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2202      	movs	r2, #2
 800dbca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	4610      	mov	r0, r2
 800dbda:	f000 fcbd 	bl	800e558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2201      	movs	r2, #1
 800dc22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2201      	movs	r2, #1
 800dc32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d109      	bne.n	800dc6c <HAL_TIM_PWM_Start+0x24>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	bf14      	ite	ne
 800dc64:	2301      	movne	r3, #1
 800dc66:	2300      	moveq	r3, #0
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	e03c      	b.n	800dce6 <HAL_TIM_PWM_Start+0x9e>
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	2b04      	cmp	r3, #4
 800dc70:	d109      	bne.n	800dc86 <HAL_TIM_PWM_Start+0x3e>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	bf14      	ite	ne
 800dc7e:	2301      	movne	r3, #1
 800dc80:	2300      	moveq	r3, #0
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	e02f      	b.n	800dce6 <HAL_TIM_PWM_Start+0x9e>
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2b08      	cmp	r3, #8
 800dc8a:	d109      	bne.n	800dca0 <HAL_TIM_PWM_Start+0x58>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	bf14      	ite	ne
 800dc98:	2301      	movne	r3, #1
 800dc9a:	2300      	moveq	r3, #0
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	e022      	b.n	800dce6 <HAL_TIM_PWM_Start+0x9e>
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	2b0c      	cmp	r3, #12
 800dca4:	d109      	bne.n	800dcba <HAL_TIM_PWM_Start+0x72>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	bf14      	ite	ne
 800dcb2:	2301      	movne	r3, #1
 800dcb4:	2300      	moveq	r3, #0
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	e015      	b.n	800dce6 <HAL_TIM_PWM_Start+0x9e>
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	2b10      	cmp	r3, #16
 800dcbe:	d109      	bne.n	800dcd4 <HAL_TIM_PWM_Start+0x8c>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	bf14      	ite	ne
 800dccc:	2301      	movne	r3, #1
 800dcce:	2300      	moveq	r3, #0
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	e008      	b.n	800dce6 <HAL_TIM_PWM_Start+0x9e>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	bf14      	ite	ne
 800dce0:	2301      	movne	r3, #1
 800dce2:	2300      	moveq	r3, #0
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dcea:	2301      	movs	r3, #1
 800dcec:	e09c      	b.n	800de28 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d104      	bne.n	800dcfe <HAL_TIM_PWM_Start+0xb6>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2202      	movs	r2, #2
 800dcf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dcfc:	e023      	b.n	800dd46 <HAL_TIM_PWM_Start+0xfe>
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d104      	bne.n	800dd0e <HAL_TIM_PWM_Start+0xc6>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2202      	movs	r2, #2
 800dd08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd0c:	e01b      	b.n	800dd46 <HAL_TIM_PWM_Start+0xfe>
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	2b08      	cmp	r3, #8
 800dd12:	d104      	bne.n	800dd1e <HAL_TIM_PWM_Start+0xd6>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2202      	movs	r2, #2
 800dd18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd1c:	e013      	b.n	800dd46 <HAL_TIM_PWM_Start+0xfe>
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	2b0c      	cmp	r3, #12
 800dd22:	d104      	bne.n	800dd2e <HAL_TIM_PWM_Start+0xe6>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2202      	movs	r2, #2
 800dd28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd2c:	e00b      	b.n	800dd46 <HAL_TIM_PWM_Start+0xfe>
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	2b10      	cmp	r3, #16
 800dd32:	d104      	bne.n	800dd3e <HAL_TIM_PWM_Start+0xf6>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2202      	movs	r2, #2
 800dd38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd3c:	e003      	b.n	800dd46 <HAL_TIM_PWM_Start+0xfe>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2202      	movs	r2, #2
 800dd42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f001 f80c 	bl	800ed6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a35      	ldr	r2, [pc, #212]	@ (800de30 <HAL_TIM_PWM_Start+0x1e8>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d013      	beq.n	800dd86 <HAL_TIM_PWM_Start+0x13e>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a34      	ldr	r2, [pc, #208]	@ (800de34 <HAL_TIM_PWM_Start+0x1ec>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d00e      	beq.n	800dd86 <HAL_TIM_PWM_Start+0x13e>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a32      	ldr	r2, [pc, #200]	@ (800de38 <HAL_TIM_PWM_Start+0x1f0>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d009      	beq.n	800dd86 <HAL_TIM_PWM_Start+0x13e>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a31      	ldr	r2, [pc, #196]	@ (800de3c <HAL_TIM_PWM_Start+0x1f4>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d004      	beq.n	800dd86 <HAL_TIM_PWM_Start+0x13e>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a2f      	ldr	r2, [pc, #188]	@ (800de40 <HAL_TIM_PWM_Start+0x1f8>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d101      	bne.n	800dd8a <HAL_TIM_PWM_Start+0x142>
 800dd86:	2301      	movs	r3, #1
 800dd88:	e000      	b.n	800dd8c <HAL_TIM_PWM_Start+0x144>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d007      	beq.n	800dda0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dd9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a22      	ldr	r2, [pc, #136]	@ (800de30 <HAL_TIM_PWM_Start+0x1e8>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d01d      	beq.n	800dde6 <HAL_TIM_PWM_Start+0x19e>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ddb2:	d018      	beq.n	800dde6 <HAL_TIM_PWM_Start+0x19e>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a22      	ldr	r2, [pc, #136]	@ (800de44 <HAL_TIM_PWM_Start+0x1fc>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d013      	beq.n	800dde6 <HAL_TIM_PWM_Start+0x19e>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a21      	ldr	r2, [pc, #132]	@ (800de48 <HAL_TIM_PWM_Start+0x200>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d00e      	beq.n	800dde6 <HAL_TIM_PWM_Start+0x19e>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a1f      	ldr	r2, [pc, #124]	@ (800de4c <HAL_TIM_PWM_Start+0x204>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d009      	beq.n	800dde6 <HAL_TIM_PWM_Start+0x19e>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a17      	ldr	r2, [pc, #92]	@ (800de34 <HAL_TIM_PWM_Start+0x1ec>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d004      	beq.n	800dde6 <HAL_TIM_PWM_Start+0x19e>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a15      	ldr	r2, [pc, #84]	@ (800de38 <HAL_TIM_PWM_Start+0x1f0>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d115      	bne.n	800de12 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	689a      	ldr	r2, [r3, #8]
 800ddec:	4b18      	ldr	r3, [pc, #96]	@ (800de50 <HAL_TIM_PWM_Start+0x208>)
 800ddee:	4013      	ands	r3, r2
 800ddf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2b06      	cmp	r3, #6
 800ddf6:	d015      	beq.n	800de24 <HAL_TIM_PWM_Start+0x1dc>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddfe:	d011      	beq.n	800de24 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f042 0201 	orr.w	r2, r2, #1
 800de0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de10:	e008      	b.n	800de24 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f042 0201 	orr.w	r2, r2, #1
 800de20:	601a      	str	r2, [r3, #0]
 800de22:	e000      	b.n	800de26 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de26:	2300      	movs	r3, #0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	40012c00 	.word	0x40012c00
 800de34:	40013400 	.word	0x40013400
 800de38:	40014000 	.word	0x40014000
 800de3c:	40014400 	.word	0x40014400
 800de40:	40014800 	.word	0x40014800
 800de44:	40000400 	.word	0x40000400
 800de48:	40000800 	.word	0x40000800
 800de4c:	40000c00 	.word	0x40000c00
 800de50:	00010007 	.word	0x00010007

0800de54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	691b      	ldr	r3, [r3, #16]
 800de6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	f003 0302 	and.w	r3, r3, #2
 800de72:	2b00      	cmp	r3, #0
 800de74:	d020      	beq.n	800deb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f003 0302 	and.w	r3, r3, #2
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d01b      	beq.n	800deb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f06f 0202 	mvn.w	r2, #2
 800de88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2201      	movs	r2, #1
 800de8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	f003 0303 	and.w	r3, r3, #3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 fb3b 	bl	800e51a <HAL_TIM_IC_CaptureCallback>
 800dea4:	e005      	b.n	800deb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 fb2d 	bl	800e506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fb3e 	bl	800e52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	f003 0304 	and.w	r3, r3, #4
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d020      	beq.n	800df04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f003 0304 	and.w	r3, r3, #4
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d01b      	beq.n	800df04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f06f 0204 	mvn.w	r2, #4
 800ded4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2202      	movs	r2, #2
 800deda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fb15 	bl	800e51a <HAL_TIM_IC_CaptureCallback>
 800def0:	e005      	b.n	800defe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fb07 	bl	800e506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fb18 	bl	800e52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	f003 0308 	and.w	r3, r3, #8
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d020      	beq.n	800df50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f003 0308 	and.w	r3, r3, #8
 800df14:	2b00      	cmp	r3, #0
 800df16:	d01b      	beq.n	800df50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f06f 0208 	mvn.w	r2, #8
 800df20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2204      	movs	r2, #4
 800df26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	69db      	ldr	r3, [r3, #28]
 800df2e:	f003 0303 	and.w	r3, r3, #3
 800df32:	2b00      	cmp	r3, #0
 800df34:	d003      	beq.n	800df3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 faef 	bl	800e51a <HAL_TIM_IC_CaptureCallback>
 800df3c:	e005      	b.n	800df4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 fae1 	bl	800e506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 faf2 	bl	800e52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	f003 0310 	and.w	r3, r3, #16
 800df56:	2b00      	cmp	r3, #0
 800df58:	d020      	beq.n	800df9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f003 0310 	and.w	r3, r3, #16
 800df60:	2b00      	cmp	r3, #0
 800df62:	d01b      	beq.n	800df9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f06f 0210 	mvn.w	r2, #16
 800df6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2208      	movs	r2, #8
 800df72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d003      	beq.n	800df8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fac9 	bl	800e51a <HAL_TIM_IC_CaptureCallback>
 800df88:	e005      	b.n	800df96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fabb 	bl	800e506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 facc 	bl	800e52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00c      	beq.n	800dfc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f003 0301 	and.w	r3, r3, #1
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d007      	beq.n	800dfc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f06f 0201 	mvn.w	r2, #1
 800dfb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7f5 fe7c 	bl	8003cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00c      	beq.n	800dfe4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d007      	beq.n	800dfe4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800dfdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f001 f8c0 	bl	800f164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00c      	beq.n	800e008 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d007      	beq.n	800e008 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f001 f8b8 	bl	800f178 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00c      	beq.n	800e02c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d007      	beq.n	800e02c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fa8b 	bl	800e542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	f003 0320 	and.w	r3, r3, #32
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00c      	beq.n	800e050 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f003 0320 	and.w	r3, r3, #32
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d007      	beq.n	800e050 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f06f 0220 	mvn.w	r2, #32
 800e048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f001 f880 	bl	800f150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e050:	bf00      	nop
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b086      	sub	sp, #24
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d101      	bne.n	800e076 <HAL_TIM_OC_ConfigChannel+0x1e>
 800e072:	2302      	movs	r3, #2
 800e074:	e066      	b.n	800e144 <HAL_TIM_OC_ConfigChannel+0xec>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b14      	cmp	r3, #20
 800e082:	d857      	bhi.n	800e134 <HAL_TIM_OC_ConfigChannel+0xdc>
 800e084:	a201      	add	r2, pc, #4	@ (adr r2, 800e08c <HAL_TIM_OC_ConfigChannel+0x34>)
 800e086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08a:	bf00      	nop
 800e08c:	0800e0e1 	.word	0x0800e0e1
 800e090:	0800e135 	.word	0x0800e135
 800e094:	0800e135 	.word	0x0800e135
 800e098:	0800e135 	.word	0x0800e135
 800e09c:	0800e0ef 	.word	0x0800e0ef
 800e0a0:	0800e135 	.word	0x0800e135
 800e0a4:	0800e135 	.word	0x0800e135
 800e0a8:	0800e135 	.word	0x0800e135
 800e0ac:	0800e0fd 	.word	0x0800e0fd
 800e0b0:	0800e135 	.word	0x0800e135
 800e0b4:	0800e135 	.word	0x0800e135
 800e0b8:	0800e135 	.word	0x0800e135
 800e0bc:	0800e10b 	.word	0x0800e10b
 800e0c0:	0800e135 	.word	0x0800e135
 800e0c4:	0800e135 	.word	0x0800e135
 800e0c8:	0800e135 	.word	0x0800e135
 800e0cc:	0800e119 	.word	0x0800e119
 800e0d0:	0800e135 	.word	0x0800e135
 800e0d4:	0800e135 	.word	0x0800e135
 800e0d8:	0800e135 	.word	0x0800e135
 800e0dc:	0800e127 	.word	0x0800e127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68b9      	ldr	r1, [r7, #8]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 fad0 	bl	800e68c <TIM_OC1_SetConfig>
      break;
 800e0ec:	e025      	b.n	800e13a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	68b9      	ldr	r1, [r7, #8]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f000 fb59 	bl	800e7ac <TIM_OC2_SetConfig>
      break;
 800e0fa:	e01e      	b.n	800e13a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	68b9      	ldr	r1, [r7, #8]
 800e102:	4618      	mov	r0, r3
 800e104:	f000 fbdc 	bl	800e8c0 <TIM_OC3_SetConfig>
      break;
 800e108:	e017      	b.n	800e13a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	68b9      	ldr	r1, [r7, #8]
 800e110:	4618      	mov	r0, r3
 800e112:	f000 fc5d 	bl	800e9d0 <TIM_OC4_SetConfig>
      break;
 800e116:	e010      	b.n	800e13a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68b9      	ldr	r1, [r7, #8]
 800e11e:	4618      	mov	r0, r3
 800e120:	f000 fcc0 	bl	800eaa4 <TIM_OC5_SetConfig>
      break;
 800e124:	e009      	b.n	800e13a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	68b9      	ldr	r1, [r7, #8]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f000 fd1d 	bl	800eb6c <TIM_OC6_SetConfig>
      break;
 800e132:	e002      	b.n	800e13a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800e134:	2301      	movs	r3, #1
 800e136:	75fb      	strb	r3, [r7, #23]
      break;
 800e138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e142:	7dfb      	ldrb	r3, [r7, #23]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e158:	2300      	movs	r3, #0
 800e15a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e162:	2b01      	cmp	r3, #1
 800e164:	d101      	bne.n	800e16a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e166:	2302      	movs	r3, #2
 800e168:	e0ff      	b.n	800e36a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2201      	movs	r2, #1
 800e16e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b14      	cmp	r3, #20
 800e176:	f200 80f0 	bhi.w	800e35a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e17a:	a201      	add	r2, pc, #4	@ (adr r2, 800e180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e180:	0800e1d5 	.word	0x0800e1d5
 800e184:	0800e35b 	.word	0x0800e35b
 800e188:	0800e35b 	.word	0x0800e35b
 800e18c:	0800e35b 	.word	0x0800e35b
 800e190:	0800e215 	.word	0x0800e215
 800e194:	0800e35b 	.word	0x0800e35b
 800e198:	0800e35b 	.word	0x0800e35b
 800e19c:	0800e35b 	.word	0x0800e35b
 800e1a0:	0800e257 	.word	0x0800e257
 800e1a4:	0800e35b 	.word	0x0800e35b
 800e1a8:	0800e35b 	.word	0x0800e35b
 800e1ac:	0800e35b 	.word	0x0800e35b
 800e1b0:	0800e297 	.word	0x0800e297
 800e1b4:	0800e35b 	.word	0x0800e35b
 800e1b8:	0800e35b 	.word	0x0800e35b
 800e1bc:	0800e35b 	.word	0x0800e35b
 800e1c0:	0800e2d9 	.word	0x0800e2d9
 800e1c4:	0800e35b 	.word	0x0800e35b
 800e1c8:	0800e35b 	.word	0x0800e35b
 800e1cc:	0800e35b 	.word	0x0800e35b
 800e1d0:	0800e319 	.word	0x0800e319
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68b9      	ldr	r1, [r7, #8]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 fa56 	bl	800e68c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	699a      	ldr	r2, [r3, #24]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f042 0208 	orr.w	r2, r2, #8
 800e1ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	699a      	ldr	r2, [r3, #24]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f022 0204 	bic.w	r2, r2, #4
 800e1fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	6999      	ldr	r1, [r3, #24]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	691a      	ldr	r2, [r3, #16]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	430a      	orrs	r2, r1
 800e210:	619a      	str	r2, [r3, #24]
      break;
 800e212:	e0a5      	b.n	800e360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68b9      	ldr	r1, [r7, #8]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f000 fac6 	bl	800e7ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	699a      	ldr	r2, [r3, #24]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e22e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	699a      	ldr	r2, [r3, #24]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e23e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	6999      	ldr	r1, [r3, #24]
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	021a      	lsls	r2, r3, #8
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	430a      	orrs	r2, r1
 800e252:	619a      	str	r2, [r3, #24]
      break;
 800e254:	e084      	b.n	800e360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	68b9      	ldr	r1, [r7, #8]
 800e25c:	4618      	mov	r0, r3
 800e25e:	f000 fb2f 	bl	800e8c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	69da      	ldr	r2, [r3, #28]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f042 0208 	orr.w	r2, r2, #8
 800e270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	69da      	ldr	r2, [r3, #28]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f022 0204 	bic.w	r2, r2, #4
 800e280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	69d9      	ldr	r1, [r3, #28]
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	691a      	ldr	r2, [r3, #16]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	430a      	orrs	r2, r1
 800e292:	61da      	str	r2, [r3, #28]
      break;
 800e294:	e064      	b.n	800e360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	68b9      	ldr	r1, [r7, #8]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f000 fb97 	bl	800e9d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	69da      	ldr	r2, [r3, #28]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e2b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	69da      	ldr	r2, [r3, #28]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e2c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	69d9      	ldr	r1, [r3, #28]
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	021a      	lsls	r2, r3, #8
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	430a      	orrs	r2, r1
 800e2d4:	61da      	str	r2, [r3, #28]
      break;
 800e2d6:	e043      	b.n	800e360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68b9      	ldr	r1, [r7, #8]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 fbe0 	bl	800eaa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f042 0208 	orr.w	r2, r2, #8
 800e2f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f022 0204 	bic.w	r2, r2, #4
 800e302:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	691a      	ldr	r2, [r3, #16]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	430a      	orrs	r2, r1
 800e314:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e316:	e023      	b.n	800e360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68b9      	ldr	r1, [r7, #8]
 800e31e:	4618      	mov	r0, r3
 800e320:	f000 fc24 	bl	800eb6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e332:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e342:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	021a      	lsls	r2, r3, #8
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	430a      	orrs	r2, r1
 800e356:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e358:	e002      	b.n	800e360 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	75fb      	strb	r3, [r7, #23]
      break;
 800e35e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e368:	7dfb      	ldrb	r3, [r7, #23]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop

0800e374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e37e:	2300      	movs	r3, #0
 800e380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d101      	bne.n	800e390 <HAL_TIM_ConfigClockSource+0x1c>
 800e38c:	2302      	movs	r3, #2
 800e38e:	e0b6      	b.n	800e4fe <HAL_TIM_ConfigClockSource+0x18a>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2202      	movs	r2, #2
 800e39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e3ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e3b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e3ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3cc:	d03e      	beq.n	800e44c <HAL_TIM_ConfigClockSource+0xd8>
 800e3ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3d2:	f200 8087 	bhi.w	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
 800e3d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3da:	f000 8086 	beq.w	800e4ea <HAL_TIM_ConfigClockSource+0x176>
 800e3de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3e2:	d87f      	bhi.n	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
 800e3e4:	2b70      	cmp	r3, #112	@ 0x70
 800e3e6:	d01a      	beq.n	800e41e <HAL_TIM_ConfigClockSource+0xaa>
 800e3e8:	2b70      	cmp	r3, #112	@ 0x70
 800e3ea:	d87b      	bhi.n	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
 800e3ec:	2b60      	cmp	r3, #96	@ 0x60
 800e3ee:	d050      	beq.n	800e492 <HAL_TIM_ConfigClockSource+0x11e>
 800e3f0:	2b60      	cmp	r3, #96	@ 0x60
 800e3f2:	d877      	bhi.n	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
 800e3f4:	2b50      	cmp	r3, #80	@ 0x50
 800e3f6:	d03c      	beq.n	800e472 <HAL_TIM_ConfigClockSource+0xfe>
 800e3f8:	2b50      	cmp	r3, #80	@ 0x50
 800e3fa:	d873      	bhi.n	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
 800e3fc:	2b40      	cmp	r3, #64	@ 0x40
 800e3fe:	d058      	beq.n	800e4b2 <HAL_TIM_ConfigClockSource+0x13e>
 800e400:	2b40      	cmp	r3, #64	@ 0x40
 800e402:	d86f      	bhi.n	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
 800e404:	2b30      	cmp	r3, #48	@ 0x30
 800e406:	d064      	beq.n	800e4d2 <HAL_TIM_ConfigClockSource+0x15e>
 800e408:	2b30      	cmp	r3, #48	@ 0x30
 800e40a:	d86b      	bhi.n	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
 800e40c:	2b20      	cmp	r3, #32
 800e40e:	d060      	beq.n	800e4d2 <HAL_TIM_ConfigClockSource+0x15e>
 800e410:	2b20      	cmp	r3, #32
 800e412:	d867      	bhi.n	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
 800e414:	2b00      	cmp	r3, #0
 800e416:	d05c      	beq.n	800e4d2 <HAL_TIM_ConfigClockSource+0x15e>
 800e418:	2b10      	cmp	r3, #16
 800e41a:	d05a      	beq.n	800e4d2 <HAL_TIM_ConfigClockSource+0x15e>
 800e41c:	e062      	b.n	800e4e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e42e:	f000 fc7d 	bl	800ed2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	609a      	str	r2, [r3, #8]
      break;
 800e44a:	e04f      	b.n	800e4ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e45c:	f000 fc66 	bl	800ed2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	689a      	ldr	r2, [r3, #8]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e46e:	609a      	str	r2, [r3, #8]
      break;
 800e470:	e03c      	b.n	800e4ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e47e:	461a      	mov	r2, r3
 800e480:	f000 fbda 	bl	800ec38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2150      	movs	r1, #80	@ 0x50
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 fc33 	bl	800ecf6 <TIM_ITRx_SetConfig>
      break;
 800e490:	e02c      	b.n	800e4ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e49e:	461a      	mov	r2, r3
 800e4a0:	f000 fbf9 	bl	800ec96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2160      	movs	r1, #96	@ 0x60
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f000 fc23 	bl	800ecf6 <TIM_ITRx_SetConfig>
      break;
 800e4b0:	e01c      	b.n	800e4ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4be:	461a      	mov	r2, r3
 800e4c0:	f000 fbba 	bl	800ec38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2140      	movs	r1, #64	@ 0x40
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f000 fc13 	bl	800ecf6 <TIM_ITRx_SetConfig>
      break;
 800e4d0:	e00c      	b.n	800e4ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4610      	mov	r0, r2
 800e4de:	f000 fc0a 	bl	800ecf6 <TIM_ITRx_SetConfig>
      break;
 800e4e2:	e003      	b.n	800e4ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e4e8:	e000      	b.n	800e4ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e4ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e506:	b480      	push	{r7}
 800e508:	b083      	sub	sp, #12
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e50e:	bf00      	nop
 800e510:	370c      	adds	r7, #12
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e51a:	b480      	push	{r7}
 800e51c:	b083      	sub	sp, #12
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e522:	bf00      	nop
 800e524:	370c      	adds	r7, #12
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e52e:	b480      	push	{r7}
 800e530:	b083      	sub	sp, #12
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e536:	bf00      	nop
 800e538:	370c      	adds	r7, #12
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr

0800e542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e542:	b480      	push	{r7}
 800e544:	b083      	sub	sp, #12
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e54a:	bf00      	nop
 800e54c:	370c      	adds	r7, #12
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
	...

0800e558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e558:	b480      	push	{r7}
 800e55a:	b085      	sub	sp, #20
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a40      	ldr	r2, [pc, #256]	@ (800e66c <TIM_Base_SetConfig+0x114>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d013      	beq.n	800e598 <TIM_Base_SetConfig+0x40>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e576:	d00f      	beq.n	800e598 <TIM_Base_SetConfig+0x40>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4a3d      	ldr	r2, [pc, #244]	@ (800e670 <TIM_Base_SetConfig+0x118>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d00b      	beq.n	800e598 <TIM_Base_SetConfig+0x40>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4a3c      	ldr	r2, [pc, #240]	@ (800e674 <TIM_Base_SetConfig+0x11c>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d007      	beq.n	800e598 <TIM_Base_SetConfig+0x40>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	4a3b      	ldr	r2, [pc, #236]	@ (800e678 <TIM_Base_SetConfig+0x120>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d003      	beq.n	800e598 <TIM_Base_SetConfig+0x40>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	4a3a      	ldr	r2, [pc, #232]	@ (800e67c <TIM_Base_SetConfig+0x124>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d108      	bne.n	800e5aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e59e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4a2f      	ldr	r2, [pc, #188]	@ (800e66c <TIM_Base_SetConfig+0x114>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d01f      	beq.n	800e5f2 <TIM_Base_SetConfig+0x9a>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5b8:	d01b      	beq.n	800e5f2 <TIM_Base_SetConfig+0x9a>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a2c      	ldr	r2, [pc, #176]	@ (800e670 <TIM_Base_SetConfig+0x118>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d017      	beq.n	800e5f2 <TIM_Base_SetConfig+0x9a>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4a2b      	ldr	r2, [pc, #172]	@ (800e674 <TIM_Base_SetConfig+0x11c>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d013      	beq.n	800e5f2 <TIM_Base_SetConfig+0x9a>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4a2a      	ldr	r2, [pc, #168]	@ (800e678 <TIM_Base_SetConfig+0x120>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d00f      	beq.n	800e5f2 <TIM_Base_SetConfig+0x9a>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4a29      	ldr	r2, [pc, #164]	@ (800e67c <TIM_Base_SetConfig+0x124>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d00b      	beq.n	800e5f2 <TIM_Base_SetConfig+0x9a>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4a28      	ldr	r2, [pc, #160]	@ (800e680 <TIM_Base_SetConfig+0x128>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d007      	beq.n	800e5f2 <TIM_Base_SetConfig+0x9a>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4a27      	ldr	r2, [pc, #156]	@ (800e684 <TIM_Base_SetConfig+0x12c>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d003      	beq.n	800e5f2 <TIM_Base_SetConfig+0x9a>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4a26      	ldr	r2, [pc, #152]	@ (800e688 <TIM_Base_SetConfig+0x130>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d108      	bne.n	800e604 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e5f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	68fa      	ldr	r2, [r7, #12]
 800e600:	4313      	orrs	r3, r2
 800e602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	695b      	ldr	r3, [r3, #20]
 800e60e:	4313      	orrs	r3, r2
 800e610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	689a      	ldr	r2, [r3, #8]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a10      	ldr	r2, [pc, #64]	@ (800e66c <TIM_Base_SetConfig+0x114>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d00f      	beq.n	800e650 <TIM_Base_SetConfig+0xf8>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4a12      	ldr	r2, [pc, #72]	@ (800e67c <TIM_Base_SetConfig+0x124>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d00b      	beq.n	800e650 <TIM_Base_SetConfig+0xf8>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a11      	ldr	r2, [pc, #68]	@ (800e680 <TIM_Base_SetConfig+0x128>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d007      	beq.n	800e650 <TIM_Base_SetConfig+0xf8>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a10      	ldr	r2, [pc, #64]	@ (800e684 <TIM_Base_SetConfig+0x12c>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d003      	beq.n	800e650 <TIM_Base_SetConfig+0xf8>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a0f      	ldr	r2, [pc, #60]	@ (800e688 <TIM_Base_SetConfig+0x130>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d103      	bne.n	800e658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	691a      	ldr	r2, [r3, #16]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	615a      	str	r2, [r3, #20]
}
 800e65e:	bf00      	nop
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	40012c00 	.word	0x40012c00
 800e670:	40000400 	.word	0x40000400
 800e674:	40000800 	.word	0x40000800
 800e678:	40000c00 	.word	0x40000c00
 800e67c:	40013400 	.word	0x40013400
 800e680:	40014000 	.word	0x40014000
 800e684:	40014400 	.word	0x40014400
 800e688:	40014800 	.word	0x40014800

0800e68c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b087      	sub	sp, #28
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6a1b      	ldr	r3, [r3, #32]
 800e6a0:	f023 0201 	bic.w	r2, r3, #1
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e6ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f023 0303 	bic.w	r3, r3, #3
 800e6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f023 0302 	bic.w	r3, r3, #2
 800e6d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	4a2c      	ldr	r2, [pc, #176]	@ (800e798 <TIM_OC1_SetConfig+0x10c>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d00f      	beq.n	800e70c <TIM_OC1_SetConfig+0x80>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4a2b      	ldr	r2, [pc, #172]	@ (800e79c <TIM_OC1_SetConfig+0x110>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d00b      	beq.n	800e70c <TIM_OC1_SetConfig+0x80>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a2a      	ldr	r2, [pc, #168]	@ (800e7a0 <TIM_OC1_SetConfig+0x114>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d007      	beq.n	800e70c <TIM_OC1_SetConfig+0x80>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a29      	ldr	r2, [pc, #164]	@ (800e7a4 <TIM_OC1_SetConfig+0x118>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d003      	beq.n	800e70c <TIM_OC1_SetConfig+0x80>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a28      	ldr	r2, [pc, #160]	@ (800e7a8 <TIM_OC1_SetConfig+0x11c>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d10c      	bne.n	800e726 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	f023 0308 	bic.w	r3, r3, #8
 800e712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	697a      	ldr	r2, [r7, #20]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	f023 0304 	bic.w	r3, r3, #4
 800e724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4a1b      	ldr	r2, [pc, #108]	@ (800e798 <TIM_OC1_SetConfig+0x10c>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d00f      	beq.n	800e74e <TIM_OC1_SetConfig+0xc2>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a1a      	ldr	r2, [pc, #104]	@ (800e79c <TIM_OC1_SetConfig+0x110>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d00b      	beq.n	800e74e <TIM_OC1_SetConfig+0xc2>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a19      	ldr	r2, [pc, #100]	@ (800e7a0 <TIM_OC1_SetConfig+0x114>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d007      	beq.n	800e74e <TIM_OC1_SetConfig+0xc2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a18      	ldr	r2, [pc, #96]	@ (800e7a4 <TIM_OC1_SetConfig+0x118>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d003      	beq.n	800e74e <TIM_OC1_SetConfig+0xc2>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a17      	ldr	r2, [pc, #92]	@ (800e7a8 <TIM_OC1_SetConfig+0x11c>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d111      	bne.n	800e772 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e75c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	695b      	ldr	r3, [r3, #20]
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	4313      	orrs	r3, r2
 800e766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	699b      	ldr	r3, [r3, #24]
 800e76c:	693a      	ldr	r2, [r7, #16]
 800e76e:	4313      	orrs	r3, r2
 800e770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	693a      	ldr	r2, [r7, #16]
 800e776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	68fa      	ldr	r2, [r7, #12]
 800e77c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	697a      	ldr	r2, [r7, #20]
 800e78a:	621a      	str	r2, [r3, #32]
}
 800e78c:	bf00      	nop
 800e78e:	371c      	adds	r7, #28
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr
 800e798:	40012c00 	.word	0x40012c00
 800e79c:	40013400 	.word	0x40013400
 800e7a0:	40014000 	.word	0x40014000
 800e7a4:	40014400 	.word	0x40014400
 800e7a8:	40014800 	.word	0x40014800

0800e7ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b087      	sub	sp, #28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a1b      	ldr	r3, [r3, #32]
 800e7c0:	f023 0210 	bic.w	r2, r3, #16
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	699b      	ldr	r3, [r3, #24]
 800e7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e7da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	021b      	lsls	r3, r3, #8
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	f023 0320 	bic.w	r3, r3, #32
 800e7fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	011b      	lsls	r3, r3, #4
 800e802:	697a      	ldr	r2, [r7, #20]
 800e804:	4313      	orrs	r3, r2
 800e806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a28      	ldr	r2, [pc, #160]	@ (800e8ac <TIM_OC2_SetConfig+0x100>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d003      	beq.n	800e818 <TIM_OC2_SetConfig+0x6c>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4a27      	ldr	r2, [pc, #156]	@ (800e8b0 <TIM_OC2_SetConfig+0x104>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d10d      	bne.n	800e834 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e81e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	011b      	lsls	r3, r3, #4
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	4313      	orrs	r3, r2
 800e82a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a1d      	ldr	r2, [pc, #116]	@ (800e8ac <TIM_OC2_SetConfig+0x100>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d00f      	beq.n	800e85c <TIM_OC2_SetConfig+0xb0>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a1c      	ldr	r2, [pc, #112]	@ (800e8b0 <TIM_OC2_SetConfig+0x104>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d00b      	beq.n	800e85c <TIM_OC2_SetConfig+0xb0>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a1b      	ldr	r2, [pc, #108]	@ (800e8b4 <TIM_OC2_SetConfig+0x108>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d007      	beq.n	800e85c <TIM_OC2_SetConfig+0xb0>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a1a      	ldr	r2, [pc, #104]	@ (800e8b8 <TIM_OC2_SetConfig+0x10c>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d003      	beq.n	800e85c <TIM_OC2_SetConfig+0xb0>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a19      	ldr	r2, [pc, #100]	@ (800e8bc <TIM_OC2_SetConfig+0x110>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d113      	bne.n	800e884 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e86a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	695b      	ldr	r3, [r3, #20]
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	693a      	ldr	r2, [r7, #16]
 800e874:	4313      	orrs	r3, r2
 800e876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	693a      	ldr	r2, [r7, #16]
 800e880:	4313      	orrs	r3, r2
 800e882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	693a      	ldr	r2, [r7, #16]
 800e888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	685a      	ldr	r2, [r3, #4]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	621a      	str	r2, [r3, #32]
}
 800e89e:	bf00      	nop
 800e8a0:	371c      	adds	r7, #28
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	40012c00 	.word	0x40012c00
 800e8b0:	40013400 	.word	0x40013400
 800e8b4:	40014000 	.word	0x40014000
 800e8b8:	40014400 	.word	0x40014400
 800e8bc:	40014800 	.word	0x40014800

0800e8c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a1b      	ldr	r3, [r3, #32]
 800e8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6a1b      	ldr	r3, [r3, #32]
 800e8d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	69db      	ldr	r3, [r3, #28]
 800e8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e8ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f023 0303 	bic.w	r3, r3, #3
 800e8fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	4313      	orrs	r3, r2
 800e904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e90c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	689b      	ldr	r3, [r3, #8]
 800e912:	021b      	lsls	r3, r3, #8
 800e914:	697a      	ldr	r2, [r7, #20]
 800e916:	4313      	orrs	r3, r2
 800e918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a27      	ldr	r2, [pc, #156]	@ (800e9bc <TIM_OC3_SetConfig+0xfc>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d003      	beq.n	800e92a <TIM_OC3_SetConfig+0x6a>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4a26      	ldr	r2, [pc, #152]	@ (800e9c0 <TIM_OC3_SetConfig+0x100>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d10d      	bne.n	800e946 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	021b      	lsls	r3, r3, #8
 800e938:	697a      	ldr	r2, [r7, #20]
 800e93a:	4313      	orrs	r3, r2
 800e93c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a1c      	ldr	r2, [pc, #112]	@ (800e9bc <TIM_OC3_SetConfig+0xfc>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d00f      	beq.n	800e96e <TIM_OC3_SetConfig+0xae>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a1b      	ldr	r2, [pc, #108]	@ (800e9c0 <TIM_OC3_SetConfig+0x100>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d00b      	beq.n	800e96e <TIM_OC3_SetConfig+0xae>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a1a      	ldr	r2, [pc, #104]	@ (800e9c4 <TIM_OC3_SetConfig+0x104>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d007      	beq.n	800e96e <TIM_OC3_SetConfig+0xae>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a19      	ldr	r2, [pc, #100]	@ (800e9c8 <TIM_OC3_SetConfig+0x108>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d003      	beq.n	800e96e <TIM_OC3_SetConfig+0xae>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a18      	ldr	r2, [pc, #96]	@ (800e9cc <TIM_OC3_SetConfig+0x10c>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d113      	bne.n	800e996 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e97c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	695b      	ldr	r3, [r3, #20]
 800e982:	011b      	lsls	r3, r3, #4
 800e984:	693a      	ldr	r2, [r7, #16]
 800e986:	4313      	orrs	r3, r2
 800e988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	699b      	ldr	r3, [r3, #24]
 800e98e:	011b      	lsls	r3, r3, #4
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	4313      	orrs	r3, r2
 800e994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	693a      	ldr	r2, [r7, #16]
 800e99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	697a      	ldr	r2, [r7, #20]
 800e9ae:	621a      	str	r2, [r3, #32]
}
 800e9b0:	bf00      	nop
 800e9b2:	371c      	adds	r7, #28
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	40012c00 	.word	0x40012c00
 800e9c0:	40013400 	.word	0x40013400
 800e9c4:	40014000 	.word	0x40014000
 800e9c8:	40014400 	.word	0x40014400
 800e9cc:	40014800 	.word	0x40014800

0800e9d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b087      	sub	sp, #28
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a1b      	ldr	r3, [r3, #32]
 800e9de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a1b      	ldr	r3, [r3, #32]
 800e9e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	69db      	ldr	r3, [r3, #28]
 800e9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e9fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	021b      	lsls	r3, r3, #8
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	4313      	orrs	r3, r2
 800ea16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ea1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	031b      	lsls	r3, r3, #12
 800ea26:	693a      	ldr	r2, [r7, #16]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4a18      	ldr	r2, [pc, #96]	@ (800ea90 <TIM_OC4_SetConfig+0xc0>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d00f      	beq.n	800ea54 <TIM_OC4_SetConfig+0x84>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4a17      	ldr	r2, [pc, #92]	@ (800ea94 <TIM_OC4_SetConfig+0xc4>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d00b      	beq.n	800ea54 <TIM_OC4_SetConfig+0x84>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a16      	ldr	r2, [pc, #88]	@ (800ea98 <TIM_OC4_SetConfig+0xc8>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d007      	beq.n	800ea54 <TIM_OC4_SetConfig+0x84>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a15      	ldr	r2, [pc, #84]	@ (800ea9c <TIM_OC4_SetConfig+0xcc>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d003      	beq.n	800ea54 <TIM_OC4_SetConfig+0x84>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a14      	ldr	r2, [pc, #80]	@ (800eaa0 <TIM_OC4_SetConfig+0xd0>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d109      	bne.n	800ea68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ea5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	019b      	lsls	r3, r3, #6
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	4313      	orrs	r3, r2
 800ea66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	697a      	ldr	r2, [r7, #20]
 800ea6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	685a      	ldr	r2, [r3, #4]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	693a      	ldr	r2, [r7, #16]
 800ea80:	621a      	str	r2, [r3, #32]
}
 800ea82:	bf00      	nop
 800ea84:	371c      	adds	r7, #28
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	40012c00 	.word	0x40012c00
 800ea94:	40013400 	.word	0x40013400
 800ea98:	40014000 	.word	0x40014000
 800ea9c:	40014400 	.word	0x40014400
 800eaa0:	40014800 	.word	0x40014800

0800eaa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b087      	sub	sp, #28
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a1b      	ldr	r3, [r3, #32]
 800eab2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ead2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ead6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4313      	orrs	r3, r2
 800eae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800eae8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	041b      	lsls	r3, r3, #16
 800eaf0:	693a      	ldr	r2, [r7, #16]
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a17      	ldr	r2, [pc, #92]	@ (800eb58 <TIM_OC5_SetConfig+0xb4>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d00f      	beq.n	800eb1e <TIM_OC5_SetConfig+0x7a>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4a16      	ldr	r2, [pc, #88]	@ (800eb5c <TIM_OC5_SetConfig+0xb8>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d00b      	beq.n	800eb1e <TIM_OC5_SetConfig+0x7a>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4a15      	ldr	r2, [pc, #84]	@ (800eb60 <TIM_OC5_SetConfig+0xbc>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d007      	beq.n	800eb1e <TIM_OC5_SetConfig+0x7a>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4a14      	ldr	r2, [pc, #80]	@ (800eb64 <TIM_OC5_SetConfig+0xc0>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d003      	beq.n	800eb1e <TIM_OC5_SetConfig+0x7a>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a13      	ldr	r2, [pc, #76]	@ (800eb68 <TIM_OC5_SetConfig+0xc4>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d109      	bne.n	800eb32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	695b      	ldr	r3, [r3, #20]
 800eb2a:	021b      	lsls	r3, r3, #8
 800eb2c:	697a      	ldr	r2, [r7, #20]
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	685a      	ldr	r2, [r3, #4]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	693a      	ldr	r2, [r7, #16]
 800eb4a:	621a      	str	r2, [r3, #32]
}
 800eb4c:	bf00      	nop
 800eb4e:	371c      	adds	r7, #28
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr
 800eb58:	40012c00 	.word	0x40012c00
 800eb5c:	40013400 	.word	0x40013400
 800eb60:	40014000 	.word	0x40014000
 800eb64:	40014400 	.word	0x40014400
 800eb68:	40014800 	.word	0x40014800

0800eb6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b087      	sub	sp, #28
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6a1b      	ldr	r3, [r3, #32]
 800eb7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a1b      	ldr	r3, [r3, #32]
 800eb80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eb9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	68fa      	ldr	r2, [r7, #12]
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ebb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	051b      	lsls	r3, r3, #20
 800ebba:	693a      	ldr	r2, [r7, #16]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a18      	ldr	r2, [pc, #96]	@ (800ec24 <TIM_OC6_SetConfig+0xb8>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d00f      	beq.n	800ebe8 <TIM_OC6_SetConfig+0x7c>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4a17      	ldr	r2, [pc, #92]	@ (800ec28 <TIM_OC6_SetConfig+0xbc>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d00b      	beq.n	800ebe8 <TIM_OC6_SetConfig+0x7c>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a16      	ldr	r2, [pc, #88]	@ (800ec2c <TIM_OC6_SetConfig+0xc0>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d007      	beq.n	800ebe8 <TIM_OC6_SetConfig+0x7c>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	4a15      	ldr	r2, [pc, #84]	@ (800ec30 <TIM_OC6_SetConfig+0xc4>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d003      	beq.n	800ebe8 <TIM_OC6_SetConfig+0x7c>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a14      	ldr	r2, [pc, #80]	@ (800ec34 <TIM_OC6_SetConfig+0xc8>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d109      	bne.n	800ebfc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ebee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	695b      	ldr	r3, [r3, #20]
 800ebf4:	029b      	lsls	r3, r3, #10
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	685a      	ldr	r2, [r3, #4]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	693a      	ldr	r2, [r7, #16]
 800ec14:	621a      	str	r2, [r3, #32]
}
 800ec16:	bf00      	nop
 800ec18:	371c      	adds	r7, #28
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	40012c00 	.word	0x40012c00
 800ec28:	40013400 	.word	0x40013400
 800ec2c:	40014000 	.word	0x40014000
 800ec30:	40014400 	.word	0x40014400
 800ec34:	40014800 	.word	0x40014800

0800ec38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b087      	sub	sp, #28
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6a1b      	ldr	r3, [r3, #32]
 800ec48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6a1b      	ldr	r3, [r3, #32]
 800ec4e:	f023 0201 	bic.w	r2, r3, #1
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	699b      	ldr	r3, [r3, #24]
 800ec5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ec62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	011b      	lsls	r3, r3, #4
 800ec68:	693a      	ldr	r2, [r7, #16]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f023 030a 	bic.w	r3, r3, #10
 800ec74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ec76:	697a      	ldr	r2, [r7, #20]
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	621a      	str	r2, [r3, #32]
}
 800ec8a:	bf00      	nop
 800ec8c:	371c      	adds	r7, #28
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec96:	b480      	push	{r7}
 800ec98:	b087      	sub	sp, #28
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	60f8      	str	r0, [r7, #12]
 800ec9e:	60b9      	str	r1, [r7, #8]
 800eca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6a1b      	ldr	r3, [r3, #32]
 800eca6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6a1b      	ldr	r3, [r3, #32]
 800ecac:	f023 0210 	bic.w	r2, r3, #16
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	699b      	ldr	r3, [r3, #24]
 800ecb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ecc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	031b      	lsls	r3, r3, #12
 800ecc6:	693a      	ldr	r2, [r7, #16]
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ecd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	011b      	lsls	r3, r3, #4
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	693a      	ldr	r2, [r7, #16]
 800ece2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	697a      	ldr	r2, [r7, #20]
 800ece8:	621a      	str	r2, [r3, #32]
}
 800ecea:	bf00      	nop
 800ecec:	371c      	adds	r7, #28
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr

0800ecf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ecf6:	b480      	push	{r7}
 800ecf8:	b085      	sub	sp, #20
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed0e:	683a      	ldr	r2, [r7, #0]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	4313      	orrs	r3, r2
 800ed14:	f043 0307 	orr.w	r3, r3, #7
 800ed18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	609a      	str	r2, [r3, #8]
}
 800ed20:	bf00      	nop
 800ed22:	3714      	adds	r7, #20
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b087      	sub	sp, #28
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ed46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	021a      	lsls	r2, r3, #8
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	431a      	orrs	r2, r3
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	4313      	orrs	r3, r2
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	609a      	str	r2, [r3, #8]
}
 800ed60:	bf00      	nop
 800ed62:	371c      	adds	r7, #28
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	f003 031f 	and.w	r3, r3, #31
 800ed7e:	2201      	movs	r2, #1
 800ed80:	fa02 f303 	lsl.w	r3, r2, r3
 800ed84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6a1a      	ldr	r2, [r3, #32]
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	43db      	mvns	r3, r3
 800ed8e:	401a      	ands	r2, r3
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6a1a      	ldr	r2, [r3, #32]
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	f003 031f 	and.w	r3, r3, #31
 800ed9e:	6879      	ldr	r1, [r7, #4]
 800eda0:	fa01 f303 	lsl.w	r3, r1, r3
 800eda4:	431a      	orrs	r2, r3
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	621a      	str	r2, [r3, #32]
}
 800edaa:	bf00      	nop
 800edac:	371c      	adds	r7, #28
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
	...

0800edb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d101      	bne.n	800edd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800edcc:	2302      	movs	r3, #2
 800edce:	e068      	b.n	800eea2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2202      	movs	r2, #2
 800eddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a2e      	ldr	r2, [pc, #184]	@ (800eeb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d004      	beq.n	800ee04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a2d      	ldr	r2, [pc, #180]	@ (800eeb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d108      	bne.n	800ee16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ee0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	4313      	orrs	r3, r2
 800ee26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a1e      	ldr	r2, [pc, #120]	@ (800eeb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d01d      	beq.n	800ee76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee42:	d018      	beq.n	800ee76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a1b      	ldr	r2, [pc, #108]	@ (800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d013      	beq.n	800ee76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4a1a      	ldr	r2, [pc, #104]	@ (800eebc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d00e      	beq.n	800ee76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a18      	ldr	r2, [pc, #96]	@ (800eec0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d009      	beq.n	800ee76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a13      	ldr	r2, [pc, #76]	@ (800eeb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d004      	beq.n	800ee76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a14      	ldr	r2, [pc, #80]	@ (800eec4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d10c      	bne.n	800ee90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	68ba      	ldr	r2, [r7, #8]
 800ee84:	4313      	orrs	r3, r2
 800ee86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68ba      	ldr	r2, [r7, #8]
 800ee8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	40012c00 	.word	0x40012c00
 800eeb4:	40013400 	.word	0x40013400
 800eeb8:	40000400 	.word	0x40000400
 800eebc:	40000800 	.word	0x40000800
 800eec0:	40000c00 	.word	0x40000c00
 800eec4:	40014000 	.word	0x40014000

0800eec8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eed2:	2300      	movs	r3, #0
 800eed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d101      	bne.n	800eee4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eee0:	2302      	movs	r3, #2
 800eee2:	e065      	b.n	800efb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	4313      	orrs	r3, r2
 800ef06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	4313      	orrs	r3, r2
 800ef14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4313      	orrs	r3, r2
 800ef22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	691b      	ldr	r3, [r3, #16]
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	695b      	ldr	r3, [r3, #20]
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	699b      	ldr	r3, [r3, #24]
 800ef58:	041b      	lsls	r3, r3, #16
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a16      	ldr	r2, [pc, #88]	@ (800efbc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d004      	beq.n	800ef72 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a14      	ldr	r2, [pc, #80]	@ (800efc0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d115      	bne.n	800ef9e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef7c:	051b      	lsls	r3, r3, #20
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	69db      	ldr	r3, [r3, #28]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3714      	adds	r7, #20
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr
 800efbc:	40012c00 	.word	0x40012c00
 800efc0:	40013400 	.word	0x40013400

0800efc4 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800efc4:	b480      	push	{r7}
 800efc6:	b08b      	sub	sp, #44	@ 0x2c
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efd0:	2300      	movs	r3, #0
 800efd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d101      	bne.n	800efe4 <HAL_TIMEx_ConfigBreakInput+0x20>
 800efe0:	2302      	movs	r3, #2
 800efe2:	e0af      	b.n	800f144 <HAL_TIMEx_ConfigBreakInput+0x180>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3b01      	subs	r3, #1
 800eff2:	2b07      	cmp	r3, #7
 800eff4:	d83a      	bhi.n	800f06c <HAL_TIMEx_ConfigBreakInput+0xa8>
 800eff6:	a201      	add	r2, pc, #4	@ (adr r2, 800effc <HAL_TIMEx_ConfigBreakInput+0x38>)
 800eff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effc:	0800f01d 	.word	0x0800f01d
 800f000:	0800f031 	.word	0x0800f031
 800f004:	0800f06d 	.word	0x0800f06d
 800f008:	0800f045 	.word	0x0800f045
 800f00c:	0800f06d 	.word	0x0800f06d
 800f010:	0800f06d 	.word	0x0800f06d
 800f014:	0800f06d 	.word	0x0800f06d
 800f018:	0800f059 	.word	0x0800f059
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800f01c:	2301      	movs	r3, #1
 800f01e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800f020:	2300      	movs	r3, #0
 800f022:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800f024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f028:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800f02a:	2309      	movs	r3, #9
 800f02c:	613b      	str	r3, [r7, #16]
      break;
 800f02e:	e026      	b.n	800f07e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800f030:	2302      	movs	r3, #2
 800f032:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800f034:	2301      	movs	r3, #1
 800f036:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800f038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f03c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800f03e:	230a      	movs	r3, #10
 800f040:	613b      	str	r3, [r7, #16]
      break;
 800f042:	e01c      	b.n	800f07e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800f044:	2304      	movs	r3, #4
 800f046:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800f048:	2302      	movs	r3, #2
 800f04a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800f04c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f050:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800f052:	230b      	movs	r3, #11
 800f054:	613b      	str	r3, [r7, #16]
      break;
 800f056:	e012      	b.n	800f07e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800f058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f05c:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800f05e:	2308      	movs	r3, #8
 800f060:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800f062:	2300      	movs	r3, #0
 800f064:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800f066:	2300      	movs	r3, #0
 800f068:	613b      	str	r3, [r7, #16]
      break;
 800f06a:	e008      	b.n	800f07e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800f06c:	2300      	movs	r3, #0
 800f06e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800f070:	2300      	movs	r3, #0
 800f072:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800f074:	2300      	movs	r3, #0
 800f076:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800f078:	2300      	movs	r3, #0
 800f07a:	613b      	str	r3, [r7, #16]
      break;
 800f07c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d003      	beq.n	800f08c <HAL_TIMEx_ConfigBreakInput+0xc8>
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	2b02      	cmp	r3, #2
 800f088:	d029      	beq.n	800f0de <HAL_TIMEx_ConfigBreakInput+0x11a>
 800f08a:	e051      	b.n	800f130 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f092:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	43db      	mvns	r3, r3
 800f098:	6a3a      	ldr	r2, [r7, #32]
 800f09a:	4013      	ands	r3, r2
 800f09c:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	685a      	ldr	r2, [r3, #4]
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	409a      	lsls	r2, r3
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	4013      	ands	r3, r2
 800f0aa:	6a3a      	ldr	r2, [r7, #32]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b08      	cmp	r3, #8
 800f0b6:	d00d      	beq.n	800f0d4 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	43db      	mvns	r3, r3
 800f0bc:	6a3a      	ldr	r2, [r7, #32]
 800f0be:	4013      	ands	r3, r2
 800f0c0:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	689a      	ldr	r2, [r3, #8]
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	409a      	lsls	r2, r3
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	4013      	ands	r3, r2
 800f0ce:	6a3a      	ldr	r2, [r7, #32]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	6a3a      	ldr	r2, [r7, #32]
 800f0da:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800f0dc:	e02c      	b.n	800f138 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f0e4:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	43db      	mvns	r3, r3
 800f0ea:	6a3a      	ldr	r2, [r7, #32]
 800f0ec:	4013      	ands	r3, r2
 800f0ee:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685a      	ldr	r2, [r3, #4]
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	409a      	lsls	r2, r3
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	4013      	ands	r3, r2
 800f0fc:	6a3a      	ldr	r2, [r7, #32]
 800f0fe:	4313      	orrs	r3, r2
 800f100:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b08      	cmp	r3, #8
 800f108:	d00d      	beq.n	800f126 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	43db      	mvns	r3, r3
 800f10e:	6a3a      	ldr	r2, [r7, #32]
 800f110:	4013      	ands	r3, r2
 800f112:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	689a      	ldr	r2, [r3, #8]
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	409a      	lsls	r2, r3
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	4013      	ands	r3, r2
 800f120:	6a3a      	ldr	r2, [r7, #32]
 800f122:	4313      	orrs	r3, r2
 800f124:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	6a3a      	ldr	r2, [r7, #32]
 800f12c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800f12e:	e003      	b.n	800f138 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800f130:	2301      	movs	r3, #1
 800f132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f136:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f144:	4618      	mov	r0, r3
 800f146:	372c      	adds	r7, #44	@ 0x2c
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr

0800f150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f16c:	bf00      	nop
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr

0800f178 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d101      	bne.n	800f19e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f19a:	2301      	movs	r3, #1
 800f19c:	e042      	b.n	800f224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d106      	bne.n	800f1b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7f4 ff51 	bl	8004058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2224      	movs	r2, #36	@ 0x24
 800f1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f022 0201 	bic.w	r2, r2, #1
 800f1cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 fbb2 	bl	800f940 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f8b3 	bl	800f348 <UART_SetConfig>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d101      	bne.n	800f1ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e01b      	b.n	800f224 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	685a      	ldr	r2, [r3, #4]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f1fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	689a      	ldr	r2, [r3, #8]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f20a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f042 0201 	orr.w	r2, r2, #1
 800f21a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fc31 	bl	800fa84 <UART_CheckIdleState>
 800f222:	4603      	mov	r3, r0
}
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b08a      	sub	sp, #40	@ 0x28
 800f230:	af02      	add	r7, sp, #8
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	603b      	str	r3, [r7, #0]
 800f238:	4613      	mov	r3, r2
 800f23a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f242:	2b20      	cmp	r3, #32
 800f244:	d17b      	bne.n	800f33e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <HAL_UART_Transmit+0x26>
 800f24c:	88fb      	ldrh	r3, [r7, #6]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e074      	b.n	800f340 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2200      	movs	r2, #0
 800f25a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2221      	movs	r2, #33	@ 0x21
 800f262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f266:	f7f7 fc69 	bl	8006b3c <HAL_GetTick>
 800f26a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	88fa      	ldrh	r2, [r7, #6]
 800f270:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	88fa      	ldrh	r2, [r7, #6]
 800f278:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f284:	d108      	bne.n	800f298 <HAL_UART_Transmit+0x6c>
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	691b      	ldr	r3, [r3, #16]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d104      	bne.n	800f298 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f28e:	2300      	movs	r3, #0
 800f290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	61bb      	str	r3, [r7, #24]
 800f296:	e003      	b.n	800f2a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f29c:	2300      	movs	r3, #0
 800f29e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f2a0:	e030      	b.n	800f304 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	2180      	movs	r1, #128	@ 0x80
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f000 fc93 	bl	800fbd8 <UART_WaitOnFlagUntilTimeout>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d005      	beq.n	800f2c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2220      	movs	r2, #32
 800f2bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	e03d      	b.n	800f340 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10b      	bne.n	800f2e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	881a      	ldrh	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f2d6:	b292      	uxth	r2, r2
 800f2d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	3302      	adds	r3, #2
 800f2de:	61bb      	str	r3, [r7, #24]
 800f2e0:	e007      	b.n	800f2f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	781a      	ldrb	r2, [r3, #0]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d1c8      	bne.n	800f2a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	2200      	movs	r2, #0
 800f318:	2140      	movs	r1, #64	@ 0x40
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f000 fc5c 	bl	800fbd8 <UART_WaitOnFlagUntilTimeout>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d005      	beq.n	800f332 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2220      	movs	r2, #32
 800f32a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f32e:	2303      	movs	r3, #3
 800f330:	e006      	b.n	800f340 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2220      	movs	r2, #32
 800f336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	e000      	b.n	800f340 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f33e:	2302      	movs	r3, #2
  }
}
 800f340:	4618      	mov	r0, r3
 800f342:	3720      	adds	r7, #32
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f34c:	b08c      	sub	sp, #48	@ 0x30
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	689a      	ldr	r2, [r3, #8]
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	691b      	ldr	r3, [r3, #16]
 800f360:	431a      	orrs	r2, r3
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	695b      	ldr	r3, [r3, #20]
 800f366:	431a      	orrs	r2, r3
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	69db      	ldr	r3, [r3, #28]
 800f36c:	4313      	orrs	r3, r2
 800f36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	4baa      	ldr	r3, [pc, #680]	@ (800f620 <UART_SetConfig+0x2d8>)
 800f378:	4013      	ands	r3, r2
 800f37a:	697a      	ldr	r2, [r7, #20]
 800f37c:	6812      	ldr	r2, [r2, #0]
 800f37e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f380:	430b      	orrs	r3, r1
 800f382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	68da      	ldr	r2, [r3, #12]
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	430a      	orrs	r2, r1
 800f398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	699b      	ldr	r3, [r3, #24]
 800f39e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a9f      	ldr	r2, [pc, #636]	@ (800f624 <UART_SetConfig+0x2dc>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d004      	beq.n	800f3b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	6a1b      	ldr	r3, [r3, #32]
 800f3ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f3be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f3c2:	697a      	ldr	r2, [r7, #20]
 800f3c4:	6812      	ldr	r2, [r2, #0]
 800f3c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f3c8:	430b      	orrs	r3, r1
 800f3ca:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3d2:	f023 010f 	bic.w	r1, r3, #15
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	430a      	orrs	r2, r1
 800f3e0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	4a90      	ldr	r2, [pc, #576]	@ (800f628 <UART_SetConfig+0x2e0>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d125      	bne.n	800f438 <UART_SetConfig+0xf0>
 800f3ec:	4b8f      	ldr	r3, [pc, #572]	@ (800f62c <UART_SetConfig+0x2e4>)
 800f3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3f2:	f003 0303 	and.w	r3, r3, #3
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	d81a      	bhi.n	800f430 <UART_SetConfig+0xe8>
 800f3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f400 <UART_SetConfig+0xb8>)
 800f3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f400:	0800f411 	.word	0x0800f411
 800f404:	0800f421 	.word	0x0800f421
 800f408:	0800f419 	.word	0x0800f419
 800f40c:	0800f429 	.word	0x0800f429
 800f410:	2301      	movs	r3, #1
 800f412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f416:	e116      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f418:	2302      	movs	r3, #2
 800f41a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f41e:	e112      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f420:	2304      	movs	r3, #4
 800f422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f426:	e10e      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f428:	2308      	movs	r3, #8
 800f42a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f42e:	e10a      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f430:	2310      	movs	r3, #16
 800f432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f436:	e106      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a7c      	ldr	r2, [pc, #496]	@ (800f630 <UART_SetConfig+0x2e8>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d138      	bne.n	800f4b4 <UART_SetConfig+0x16c>
 800f442:	4b7a      	ldr	r3, [pc, #488]	@ (800f62c <UART_SetConfig+0x2e4>)
 800f444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f448:	f003 030c 	and.w	r3, r3, #12
 800f44c:	2b0c      	cmp	r3, #12
 800f44e:	d82d      	bhi.n	800f4ac <UART_SetConfig+0x164>
 800f450:	a201      	add	r2, pc, #4	@ (adr r2, 800f458 <UART_SetConfig+0x110>)
 800f452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f456:	bf00      	nop
 800f458:	0800f48d 	.word	0x0800f48d
 800f45c:	0800f4ad 	.word	0x0800f4ad
 800f460:	0800f4ad 	.word	0x0800f4ad
 800f464:	0800f4ad 	.word	0x0800f4ad
 800f468:	0800f49d 	.word	0x0800f49d
 800f46c:	0800f4ad 	.word	0x0800f4ad
 800f470:	0800f4ad 	.word	0x0800f4ad
 800f474:	0800f4ad 	.word	0x0800f4ad
 800f478:	0800f495 	.word	0x0800f495
 800f47c:	0800f4ad 	.word	0x0800f4ad
 800f480:	0800f4ad 	.word	0x0800f4ad
 800f484:	0800f4ad 	.word	0x0800f4ad
 800f488:	0800f4a5 	.word	0x0800f4a5
 800f48c:	2300      	movs	r3, #0
 800f48e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f492:	e0d8      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f494:	2302      	movs	r3, #2
 800f496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f49a:	e0d4      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f49c:	2304      	movs	r3, #4
 800f49e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4a2:	e0d0      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f4a4:	2308      	movs	r3, #8
 800f4a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4aa:	e0cc      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f4ac:	2310      	movs	r3, #16
 800f4ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4b2:	e0c8      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4a5e      	ldr	r2, [pc, #376]	@ (800f634 <UART_SetConfig+0x2ec>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d125      	bne.n	800f50a <UART_SetConfig+0x1c2>
 800f4be:	4b5b      	ldr	r3, [pc, #364]	@ (800f62c <UART_SetConfig+0x2e4>)
 800f4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f4c8:	2b30      	cmp	r3, #48	@ 0x30
 800f4ca:	d016      	beq.n	800f4fa <UART_SetConfig+0x1b2>
 800f4cc:	2b30      	cmp	r3, #48	@ 0x30
 800f4ce:	d818      	bhi.n	800f502 <UART_SetConfig+0x1ba>
 800f4d0:	2b20      	cmp	r3, #32
 800f4d2:	d00a      	beq.n	800f4ea <UART_SetConfig+0x1a2>
 800f4d4:	2b20      	cmp	r3, #32
 800f4d6:	d814      	bhi.n	800f502 <UART_SetConfig+0x1ba>
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d002      	beq.n	800f4e2 <UART_SetConfig+0x19a>
 800f4dc:	2b10      	cmp	r3, #16
 800f4de:	d008      	beq.n	800f4f2 <UART_SetConfig+0x1aa>
 800f4e0:	e00f      	b.n	800f502 <UART_SetConfig+0x1ba>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4e8:	e0ad      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f4ea:	2302      	movs	r3, #2
 800f4ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4f0:	e0a9      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f4f2:	2304      	movs	r3, #4
 800f4f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4f8:	e0a5      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f4fa:	2308      	movs	r3, #8
 800f4fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f500:	e0a1      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f502:	2310      	movs	r3, #16
 800f504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f508:	e09d      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a4a      	ldr	r2, [pc, #296]	@ (800f638 <UART_SetConfig+0x2f0>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d125      	bne.n	800f560 <UART_SetConfig+0x218>
 800f514:	4b45      	ldr	r3, [pc, #276]	@ (800f62c <UART_SetConfig+0x2e4>)
 800f516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f51a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f51e:	2bc0      	cmp	r3, #192	@ 0xc0
 800f520:	d016      	beq.n	800f550 <UART_SetConfig+0x208>
 800f522:	2bc0      	cmp	r3, #192	@ 0xc0
 800f524:	d818      	bhi.n	800f558 <UART_SetConfig+0x210>
 800f526:	2b80      	cmp	r3, #128	@ 0x80
 800f528:	d00a      	beq.n	800f540 <UART_SetConfig+0x1f8>
 800f52a:	2b80      	cmp	r3, #128	@ 0x80
 800f52c:	d814      	bhi.n	800f558 <UART_SetConfig+0x210>
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d002      	beq.n	800f538 <UART_SetConfig+0x1f0>
 800f532:	2b40      	cmp	r3, #64	@ 0x40
 800f534:	d008      	beq.n	800f548 <UART_SetConfig+0x200>
 800f536:	e00f      	b.n	800f558 <UART_SetConfig+0x210>
 800f538:	2300      	movs	r3, #0
 800f53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f53e:	e082      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f540:	2302      	movs	r3, #2
 800f542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f546:	e07e      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f548:	2304      	movs	r3, #4
 800f54a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f54e:	e07a      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f550:	2308      	movs	r3, #8
 800f552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f556:	e076      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f558:	2310      	movs	r3, #16
 800f55a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f55e:	e072      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4a35      	ldr	r2, [pc, #212]	@ (800f63c <UART_SetConfig+0x2f4>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d12a      	bne.n	800f5c0 <UART_SetConfig+0x278>
 800f56a:	4b30      	ldr	r3, [pc, #192]	@ (800f62c <UART_SetConfig+0x2e4>)
 800f56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f570:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f578:	d01a      	beq.n	800f5b0 <UART_SetConfig+0x268>
 800f57a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f57e:	d81b      	bhi.n	800f5b8 <UART_SetConfig+0x270>
 800f580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f584:	d00c      	beq.n	800f5a0 <UART_SetConfig+0x258>
 800f586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f58a:	d815      	bhi.n	800f5b8 <UART_SetConfig+0x270>
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d003      	beq.n	800f598 <UART_SetConfig+0x250>
 800f590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f594:	d008      	beq.n	800f5a8 <UART_SetConfig+0x260>
 800f596:	e00f      	b.n	800f5b8 <UART_SetConfig+0x270>
 800f598:	2300      	movs	r3, #0
 800f59a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f59e:	e052      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5a6:	e04e      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f5a8:	2304      	movs	r3, #4
 800f5aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5ae:	e04a      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f5b0:	2308      	movs	r3, #8
 800f5b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5b6:	e046      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f5b8:	2310      	movs	r3, #16
 800f5ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5be:	e042      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a17      	ldr	r2, [pc, #92]	@ (800f624 <UART_SetConfig+0x2dc>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d13a      	bne.n	800f640 <UART_SetConfig+0x2f8>
 800f5ca:	4b18      	ldr	r3, [pc, #96]	@ (800f62c <UART_SetConfig+0x2e4>)
 800f5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f5d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5d8:	d01a      	beq.n	800f610 <UART_SetConfig+0x2c8>
 800f5da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5de:	d81b      	bhi.n	800f618 <UART_SetConfig+0x2d0>
 800f5e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5e4:	d00c      	beq.n	800f600 <UART_SetConfig+0x2b8>
 800f5e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5ea:	d815      	bhi.n	800f618 <UART_SetConfig+0x2d0>
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d003      	beq.n	800f5f8 <UART_SetConfig+0x2b0>
 800f5f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f5f4:	d008      	beq.n	800f608 <UART_SetConfig+0x2c0>
 800f5f6:	e00f      	b.n	800f618 <UART_SetConfig+0x2d0>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5fe:	e022      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f600:	2302      	movs	r3, #2
 800f602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f606:	e01e      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f608:	2304      	movs	r3, #4
 800f60a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f60e:	e01a      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f610:	2308      	movs	r3, #8
 800f612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f616:	e016      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f618:	2310      	movs	r3, #16
 800f61a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f61e:	e012      	b.n	800f646 <UART_SetConfig+0x2fe>
 800f620:	cfff69f3 	.word	0xcfff69f3
 800f624:	40008000 	.word	0x40008000
 800f628:	40013800 	.word	0x40013800
 800f62c:	40021000 	.word	0x40021000
 800f630:	40004400 	.word	0x40004400
 800f634:	40004800 	.word	0x40004800
 800f638:	40004c00 	.word	0x40004c00
 800f63c:	40005000 	.word	0x40005000
 800f640:	2310      	movs	r3, #16
 800f642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4aae      	ldr	r2, [pc, #696]	@ (800f904 <UART_SetConfig+0x5bc>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	f040 8097 	bne.w	800f780 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f652:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f656:	2b08      	cmp	r3, #8
 800f658:	d823      	bhi.n	800f6a2 <UART_SetConfig+0x35a>
 800f65a:	a201      	add	r2, pc, #4	@ (adr r2, 800f660 <UART_SetConfig+0x318>)
 800f65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f660:	0800f685 	.word	0x0800f685
 800f664:	0800f6a3 	.word	0x0800f6a3
 800f668:	0800f68d 	.word	0x0800f68d
 800f66c:	0800f6a3 	.word	0x0800f6a3
 800f670:	0800f693 	.word	0x0800f693
 800f674:	0800f6a3 	.word	0x0800f6a3
 800f678:	0800f6a3 	.word	0x0800f6a3
 800f67c:	0800f6a3 	.word	0x0800f6a3
 800f680:	0800f69b 	.word	0x0800f69b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f684:	f7fa fb58 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800f688:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f68a:	e010      	b.n	800f6ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f68c:	4b9e      	ldr	r3, [pc, #632]	@ (800f908 <UART_SetConfig+0x5c0>)
 800f68e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f690:	e00d      	b.n	800f6ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f692:	f7fa fab9 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800f696:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f698:	e009      	b.n	800f6ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f69a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f69e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f6a0:	e005      	b.n	800f6ae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f6ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f000 8130 	beq.w	800f916 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6ba:	4a94      	ldr	r2, [pc, #592]	@ (800f90c <UART_SetConfig+0x5c4>)
 800f6bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6c8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	685a      	ldr	r2, [r3, #4]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	4413      	add	r3, r2
 800f6d4:	69ba      	ldr	r2, [r7, #24]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d305      	bcc.n	800f6e6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6e0:	69ba      	ldr	r2, [r7, #24]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d903      	bls.n	800f6ee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f6ec:	e113      	b.n	800f916 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	60bb      	str	r3, [r7, #8]
 800f6f4:	60fa      	str	r2, [r7, #12]
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6fa:	4a84      	ldr	r2, [pc, #528]	@ (800f90c <UART_SetConfig+0x5c4>)
 800f6fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f700:	b29b      	uxth	r3, r3
 800f702:	2200      	movs	r2, #0
 800f704:	603b      	str	r3, [r7, #0]
 800f706:	607a      	str	r2, [r7, #4]
 800f708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f70c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f710:	f7f1 fab2 	bl	8000c78 <__aeabi_uldivmod>
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
 800f718:	4610      	mov	r0, r2
 800f71a:	4619      	mov	r1, r3
 800f71c:	f04f 0200 	mov.w	r2, #0
 800f720:	f04f 0300 	mov.w	r3, #0
 800f724:	020b      	lsls	r3, r1, #8
 800f726:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f72a:	0202      	lsls	r2, r0, #8
 800f72c:	6979      	ldr	r1, [r7, #20]
 800f72e:	6849      	ldr	r1, [r1, #4]
 800f730:	0849      	lsrs	r1, r1, #1
 800f732:	2000      	movs	r0, #0
 800f734:	460c      	mov	r4, r1
 800f736:	4605      	mov	r5, r0
 800f738:	eb12 0804 	adds.w	r8, r2, r4
 800f73c:	eb43 0905 	adc.w	r9, r3, r5
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	469a      	mov	sl, r3
 800f748:	4693      	mov	fp, r2
 800f74a:	4652      	mov	r2, sl
 800f74c:	465b      	mov	r3, fp
 800f74e:	4640      	mov	r0, r8
 800f750:	4649      	mov	r1, r9
 800f752:	f7f1 fa91 	bl	8000c78 <__aeabi_uldivmod>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4613      	mov	r3, r2
 800f75c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f75e:	6a3b      	ldr	r3, [r7, #32]
 800f760:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f764:	d308      	bcc.n	800f778 <UART_SetConfig+0x430>
 800f766:	6a3b      	ldr	r3, [r7, #32]
 800f768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f76c:	d204      	bcs.n	800f778 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6a3a      	ldr	r2, [r7, #32]
 800f774:	60da      	str	r2, [r3, #12]
 800f776:	e0ce      	b.n	800f916 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f778:	2301      	movs	r3, #1
 800f77a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f77e:	e0ca      	b.n	800f916 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	69db      	ldr	r3, [r3, #28]
 800f784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f788:	d166      	bne.n	800f858 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f78a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f78e:	2b08      	cmp	r3, #8
 800f790:	d827      	bhi.n	800f7e2 <UART_SetConfig+0x49a>
 800f792:	a201      	add	r2, pc, #4	@ (adr r2, 800f798 <UART_SetConfig+0x450>)
 800f794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f798:	0800f7bd 	.word	0x0800f7bd
 800f79c:	0800f7c5 	.word	0x0800f7c5
 800f7a0:	0800f7cd 	.word	0x0800f7cd
 800f7a4:	0800f7e3 	.word	0x0800f7e3
 800f7a8:	0800f7d3 	.word	0x0800f7d3
 800f7ac:	0800f7e3 	.word	0x0800f7e3
 800f7b0:	0800f7e3 	.word	0x0800f7e3
 800f7b4:	0800f7e3 	.word	0x0800f7e3
 800f7b8:	0800f7db 	.word	0x0800f7db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7bc:	f7fa fabc 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800f7c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f7c2:	e014      	b.n	800f7ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f7c4:	f7fa face 	bl	8009d64 <HAL_RCC_GetPCLK2Freq>
 800f7c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f7ca:	e010      	b.n	800f7ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f7cc:	4b4e      	ldr	r3, [pc, #312]	@ (800f908 <UART_SetConfig+0x5c0>)
 800f7ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f7d0:	e00d      	b.n	800f7ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f7d2:	f7fa fa19 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800f7d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f7d8:	e009      	b.n	800f7ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f7de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f7e0:	e005      	b.n	800f7ee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f7ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 8090 	beq.w	800f916 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7fa:	4a44      	ldr	r2, [pc, #272]	@ (800f90c <UART_SetConfig+0x5c4>)
 800f7fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f800:	461a      	mov	r2, r3
 800f802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f804:	fbb3 f3f2 	udiv	r3, r3, r2
 800f808:	005a      	lsls	r2, r3, #1
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	085b      	lsrs	r3, r3, #1
 800f810:	441a      	add	r2, r3
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	fbb2 f3f3 	udiv	r3, r2, r3
 800f81a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f81c:	6a3b      	ldr	r3, [r7, #32]
 800f81e:	2b0f      	cmp	r3, #15
 800f820:	d916      	bls.n	800f850 <UART_SetConfig+0x508>
 800f822:	6a3b      	ldr	r3, [r7, #32]
 800f824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f828:	d212      	bcs.n	800f850 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f82a:	6a3b      	ldr	r3, [r7, #32]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	f023 030f 	bic.w	r3, r3, #15
 800f832:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	085b      	lsrs	r3, r3, #1
 800f838:	b29b      	uxth	r3, r3
 800f83a:	f003 0307 	and.w	r3, r3, #7
 800f83e:	b29a      	uxth	r2, r3
 800f840:	8bfb      	ldrh	r3, [r7, #30]
 800f842:	4313      	orrs	r3, r2
 800f844:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	8bfa      	ldrh	r2, [r7, #30]
 800f84c:	60da      	str	r2, [r3, #12]
 800f84e:	e062      	b.n	800f916 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f856:	e05e      	b.n	800f916 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f858:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f85c:	2b08      	cmp	r3, #8
 800f85e:	d828      	bhi.n	800f8b2 <UART_SetConfig+0x56a>
 800f860:	a201      	add	r2, pc, #4	@ (adr r2, 800f868 <UART_SetConfig+0x520>)
 800f862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f866:	bf00      	nop
 800f868:	0800f88d 	.word	0x0800f88d
 800f86c:	0800f895 	.word	0x0800f895
 800f870:	0800f89d 	.word	0x0800f89d
 800f874:	0800f8b3 	.word	0x0800f8b3
 800f878:	0800f8a3 	.word	0x0800f8a3
 800f87c:	0800f8b3 	.word	0x0800f8b3
 800f880:	0800f8b3 	.word	0x0800f8b3
 800f884:	0800f8b3 	.word	0x0800f8b3
 800f888:	0800f8ab 	.word	0x0800f8ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f88c:	f7fa fa54 	bl	8009d38 <HAL_RCC_GetPCLK1Freq>
 800f890:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f892:	e014      	b.n	800f8be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f894:	f7fa fa66 	bl	8009d64 <HAL_RCC_GetPCLK2Freq>
 800f898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f89a:	e010      	b.n	800f8be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f89c:	4b1a      	ldr	r3, [pc, #104]	@ (800f908 <UART_SetConfig+0x5c0>)
 800f89e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f8a0:	e00d      	b.n	800f8be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f8a2:	f7fa f9b1 	bl	8009c08 <HAL_RCC_GetSysClockFreq>
 800f8a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f8a8:	e009      	b.n	800f8be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f8ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f8b0:	e005      	b.n	800f8be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f8bc:	bf00      	nop
    }

    if (pclk != 0U)
 800f8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d028      	beq.n	800f916 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c8:	4a10      	ldr	r2, [pc, #64]	@ (800f90c <UART_SetConfig+0x5c4>)
 800f8ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	085b      	lsrs	r3, r3, #1
 800f8dc:	441a      	add	r2, r3
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8e8:	6a3b      	ldr	r3, [r7, #32]
 800f8ea:	2b0f      	cmp	r3, #15
 800f8ec:	d910      	bls.n	800f910 <UART_SetConfig+0x5c8>
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8f4:	d20c      	bcs.n	800f910 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f8f6:	6a3b      	ldr	r3, [r7, #32]
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	60da      	str	r2, [r3, #12]
 800f900:	e009      	b.n	800f916 <UART_SetConfig+0x5ce>
 800f902:	bf00      	nop
 800f904:	40008000 	.word	0x40008000
 800f908:	00f42400 	.word	0x00f42400
 800f90c:	08018188 	.word	0x08018188
      }
      else
      {
        ret = HAL_ERROR;
 800f910:	2301      	movs	r3, #1
 800f912:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2201      	movs	r2, #1
 800f91a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	2201      	movs	r2, #1
 800f922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	2200      	movs	r2, #0
 800f92a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2200      	movs	r2, #0
 800f930:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f932:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f936:	4618      	mov	r0, r3
 800f938:	3730      	adds	r7, #48	@ 0x30
 800f93a:	46bd      	mov	sp, r7
 800f93c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f94c:	f003 0308 	and.w	r3, r3, #8
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00a      	beq.n	800f96a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	430a      	orrs	r2, r1
 800f968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f96e:	f003 0301 	and.w	r3, r3, #1
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00a      	beq.n	800f98c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	430a      	orrs	r2, r1
 800f98a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f990:	f003 0302 	and.w	r3, r3, #2
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00a      	beq.n	800f9ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	430a      	orrs	r2, r1
 800f9ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9b2:	f003 0304 	and.w	r3, r3, #4
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00a      	beq.n	800f9d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	430a      	orrs	r2, r1
 800f9ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d4:	f003 0310 	and.w	r3, r3, #16
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00a      	beq.n	800f9f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	430a      	orrs	r2, r1
 800f9f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9f6:	f003 0320 	and.w	r3, r3, #32
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00a      	beq.n	800fa14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	430a      	orrs	r2, r1
 800fa12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d01a      	beq.n	800fa56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	430a      	orrs	r2, r1
 800fa34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa3e:	d10a      	bne.n	800fa56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	430a      	orrs	r2, r1
 800fa54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00a      	beq.n	800fa78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	430a      	orrs	r2, r1
 800fa76:	605a      	str	r2, [r3, #4]
  }
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b098      	sub	sp, #96	@ 0x60
 800fa88:	af02      	add	r7, sp, #8
 800fa8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa94:	f7f7 f852 	bl	8006b3c <HAL_GetTick>
 800fa98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f003 0308 	and.w	r3, r3, #8
 800faa4:	2b08      	cmp	r3, #8
 800faa6:	d12f      	bne.n	800fb08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800faa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fab0:	2200      	movs	r2, #0
 800fab2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f88e 	bl	800fbd8 <UART_WaitOnFlagUntilTimeout>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d022      	beq.n	800fb08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faca:	e853 3f00 	ldrex	r3, [r3]
 800face:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fad6:	653b      	str	r3, [r7, #80]	@ 0x50
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	461a      	mov	r2, r3
 800fade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fae0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fae2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fae8:	e841 2300 	strex	r3, r2, [r1]
 800faec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800faee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1e6      	bne.n	800fac2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2220      	movs	r2, #32
 800faf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2200      	movs	r2, #0
 800fb00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb04:	2303      	movs	r3, #3
 800fb06:	e063      	b.n	800fbd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f003 0304 	and.w	r3, r3, #4
 800fb12:	2b04      	cmp	r3, #4
 800fb14:	d149      	bne.n	800fbaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 f857 	bl	800fbd8 <UART_WaitOnFlagUntilTimeout>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d03c      	beq.n	800fbaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb38:	e853 3f00 	ldrex	r3, [r3]
 800fb3c:	623b      	str	r3, [r7, #32]
   return(result);
 800fb3e:	6a3b      	ldr	r3, [r7, #32]
 800fb40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb56:	e841 2300 	strex	r3, r2, [r1]
 800fb5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d1e6      	bne.n	800fb30 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	3308      	adds	r3, #8
 800fb68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	e853 3f00 	ldrex	r3, [r3]
 800fb70:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f023 0301 	bic.w	r3, r3, #1
 800fb78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	3308      	adds	r3, #8
 800fb80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb82:	61fa      	str	r2, [r7, #28]
 800fb84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb86:	69b9      	ldr	r1, [r7, #24]
 800fb88:	69fa      	ldr	r2, [r7, #28]
 800fb8a:	e841 2300 	strex	r3, r2, [r1]
 800fb8e:	617b      	str	r3, [r7, #20]
   return(result);
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1e5      	bne.n	800fb62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2220      	movs	r2, #32
 800fb9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fba6:	2303      	movs	r3, #3
 800fba8:	e012      	b.n	800fbd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2220      	movs	r2, #32
 800fbae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2220      	movs	r2, #32
 800fbb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3758      	adds	r7, #88	@ 0x58
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	603b      	str	r3, [r7, #0]
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbe8:	e049      	b.n	800fc7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbf0:	d045      	beq.n	800fc7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbf2:	f7f6 ffa3 	bl	8006b3c <HAL_GetTick>
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	1ad3      	subs	r3, r2, r3
 800fbfc:	69ba      	ldr	r2, [r7, #24]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d302      	bcc.n	800fc08 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d101      	bne.n	800fc0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fc08:	2303      	movs	r3, #3
 800fc0a:	e048      	b.n	800fc9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f003 0304 	and.w	r3, r3, #4
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d031      	beq.n	800fc7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	69db      	ldr	r3, [r3, #28]
 800fc20:	f003 0308 	and.w	r3, r3, #8
 800fc24:	2b08      	cmp	r3, #8
 800fc26:	d110      	bne.n	800fc4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2208      	movs	r2, #8
 800fc2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f000 f838 	bl	800fca6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2208      	movs	r2, #8
 800fc3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fc46:	2301      	movs	r3, #1
 800fc48:	e029      	b.n	800fc9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	69db      	ldr	r3, [r3, #28]
 800fc50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc58:	d111      	bne.n	800fc7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f000 f81e 	bl	800fca6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2220      	movs	r2, #32
 800fc6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2200      	movs	r2, #0
 800fc76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fc7a:	2303      	movs	r3, #3
 800fc7c:	e00f      	b.n	800fc9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	69da      	ldr	r2, [r3, #28]
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	4013      	ands	r3, r2
 800fc88:	68ba      	ldr	r2, [r7, #8]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	bf0c      	ite	eq
 800fc8e:	2301      	moveq	r3, #1
 800fc90:	2300      	movne	r3, #0
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	461a      	mov	r2, r3
 800fc96:	79fb      	ldrb	r3, [r7, #7]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d0a6      	beq.n	800fbea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fca6:	b480      	push	{r7}
 800fca8:	b095      	sub	sp, #84	@ 0x54
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcb6:	e853 3f00 	ldrex	r3, [r3]
 800fcba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fccc:	643b      	str	r3, [r7, #64]	@ 0x40
 800fcce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fcd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fcd4:	e841 2300 	strex	r3, r2, [r1]
 800fcd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1e6      	bne.n	800fcae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	3308      	adds	r3, #8
 800fce6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	e853 3f00 	ldrex	r3, [r3]
 800fcee:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fcf6:	f023 0301 	bic.w	r3, r3, #1
 800fcfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	3308      	adds	r3, #8
 800fd02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fd06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd0c:	e841 2300 	strex	r3, r2, [r1]
 800fd10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d1e3      	bne.n	800fce0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d118      	bne.n	800fd52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	e853 3f00 	ldrex	r3, [r3]
 800fd2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	f023 0310 	bic.w	r3, r3, #16
 800fd34:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd3e:	61bb      	str	r3, [r7, #24]
 800fd40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd42:	6979      	ldr	r1, [r7, #20]
 800fd44:	69ba      	ldr	r2, [r7, #24]
 800fd46:	e841 2300 	strex	r3, r2, [r1]
 800fd4a:	613b      	str	r3, [r7, #16]
   return(result);
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1e6      	bne.n	800fd20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2220      	movs	r2, #32
 800fd56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2200      	movs	r2, #0
 800fd64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fd66:	bf00      	nop
 800fd68:	3754      	adds	r7, #84	@ 0x54
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd72:	b480      	push	{r7}
 800fd74:	b085      	sub	sp, #20
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d101      	bne.n	800fd88 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd84:	2302      	movs	r3, #2
 800fd86:	e027      	b.n	800fdd8 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2224      	movs	r2, #36	@ 0x24
 800fd94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f022 0201 	bic.w	r2, r2, #1
 800fdae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fdb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2220      	movs	r2, #32
 800fdca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fdd6:	2300      	movs	r3, #0
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3714      	adds	r7, #20
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d101      	bne.n	800fdfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	e02d      	b.n	800fe58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2201      	movs	r2, #1
 800fe00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2224      	movs	r2, #36	@ 0x24
 800fe08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f022 0201 	bic.w	r2, r2, #1
 800fe22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	683a      	ldr	r2, [r7, #0]
 800fe34:	430a      	orrs	r2, r1
 800fe36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 f84f 	bl	800fedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	68fa      	ldr	r2, [r7, #12]
 800fe44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2220      	movs	r2, #32
 800fe4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe56:	2300      	movs	r3, #0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3710      	adds	r7, #16
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d101      	bne.n	800fe78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe74:	2302      	movs	r3, #2
 800fe76:	e02d      	b.n	800fed4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2224      	movs	r2, #36	@ 0x24
 800fe84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f022 0201 	bic.w	r2, r2, #1
 800fe9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	430a      	orrs	r2, r1
 800feb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 f811 	bl	800fedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2220      	movs	r2, #32
 800fec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fedc:	b480      	push	{r7}
 800fede:	b085      	sub	sp, #20
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d108      	bne.n	800fefe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2201      	movs	r2, #1
 800fef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2201      	movs	r2, #1
 800fef8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fefc:	e031      	b.n	800ff62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fefe:	2308      	movs	r3, #8
 800ff00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ff02:	2308      	movs	r3, #8
 800ff04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	0e5b      	lsrs	r3, r3, #25
 800ff0e:	b2db      	uxtb	r3, r3
 800ff10:	f003 0307 	and.w	r3, r3, #7
 800ff14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	0f5b      	lsrs	r3, r3, #29
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	f003 0307 	and.w	r3, r3, #7
 800ff24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff26:	7bbb      	ldrb	r3, [r7, #14]
 800ff28:	7b3a      	ldrb	r2, [r7, #12]
 800ff2a:	4911      	ldr	r1, [pc, #68]	@ (800ff70 <UARTEx_SetNbDataToProcess+0x94>)
 800ff2c:	5c8a      	ldrb	r2, [r1, r2]
 800ff2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff32:	7b3a      	ldrb	r2, [r7, #12]
 800ff34:	490f      	ldr	r1, [pc, #60]	@ (800ff74 <UARTEx_SetNbDataToProcess+0x98>)
 800ff36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff44:	7bfb      	ldrb	r3, [r7, #15]
 800ff46:	7b7a      	ldrb	r2, [r7, #13]
 800ff48:	4909      	ldr	r1, [pc, #36]	@ (800ff70 <UARTEx_SetNbDataToProcess+0x94>)
 800ff4a:	5c8a      	ldrb	r2, [r1, r2]
 800ff4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff50:	7b7a      	ldrb	r2, [r7, #13]
 800ff52:	4908      	ldr	r1, [pc, #32]	@ (800ff74 <UARTEx_SetNbDataToProcess+0x98>)
 800ff54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff56:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ff62:	bf00      	nop
 800ff64:	3714      	adds	r7, #20
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	080181a0 	.word	0x080181a0
 800ff74:	080181a8 	.word	0x080181a8

0800ff78 <malloc>:
 800ff78:	4b02      	ldr	r3, [pc, #8]	@ (800ff84 <malloc+0xc>)
 800ff7a:	4601      	mov	r1, r0
 800ff7c:	6818      	ldr	r0, [r3, #0]
 800ff7e:	f000 b825 	b.w	800ffcc <_malloc_r>
 800ff82:	bf00      	nop
 800ff84:	2000003c 	.word	0x2000003c

0800ff88 <sbrk_aligned>:
 800ff88:	b570      	push	{r4, r5, r6, lr}
 800ff8a:	4e0f      	ldr	r6, [pc, #60]	@ (800ffc8 <sbrk_aligned+0x40>)
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	6831      	ldr	r1, [r6, #0]
 800ff90:	4605      	mov	r5, r0
 800ff92:	b911      	cbnz	r1, 800ff9a <sbrk_aligned+0x12>
 800ff94:	f000 fe78 	bl	8010c88 <_sbrk_r>
 800ff98:	6030      	str	r0, [r6, #0]
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	4628      	mov	r0, r5
 800ff9e:	f000 fe73 	bl	8010c88 <_sbrk_r>
 800ffa2:	1c43      	adds	r3, r0, #1
 800ffa4:	d103      	bne.n	800ffae <sbrk_aligned+0x26>
 800ffa6:	f04f 34ff 	mov.w	r4, #4294967295
 800ffaa:	4620      	mov	r0, r4
 800ffac:	bd70      	pop	{r4, r5, r6, pc}
 800ffae:	1cc4      	adds	r4, r0, #3
 800ffb0:	f024 0403 	bic.w	r4, r4, #3
 800ffb4:	42a0      	cmp	r0, r4
 800ffb6:	d0f8      	beq.n	800ffaa <sbrk_aligned+0x22>
 800ffb8:	1a21      	subs	r1, r4, r0
 800ffba:	4628      	mov	r0, r5
 800ffbc:	f000 fe64 	bl	8010c88 <_sbrk_r>
 800ffc0:	3001      	adds	r0, #1
 800ffc2:	d1f2      	bne.n	800ffaa <sbrk_aligned+0x22>
 800ffc4:	e7ef      	b.n	800ffa6 <sbrk_aligned+0x1e>
 800ffc6:	bf00      	nop
 800ffc8:	20000bb0 	.word	0x20000bb0

0800ffcc <_malloc_r>:
 800ffcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffd0:	1ccd      	adds	r5, r1, #3
 800ffd2:	f025 0503 	bic.w	r5, r5, #3
 800ffd6:	3508      	adds	r5, #8
 800ffd8:	2d0c      	cmp	r5, #12
 800ffda:	bf38      	it	cc
 800ffdc:	250c      	movcc	r5, #12
 800ffde:	2d00      	cmp	r5, #0
 800ffe0:	4606      	mov	r6, r0
 800ffe2:	db01      	blt.n	800ffe8 <_malloc_r+0x1c>
 800ffe4:	42a9      	cmp	r1, r5
 800ffe6:	d904      	bls.n	800fff2 <_malloc_r+0x26>
 800ffe8:	230c      	movs	r3, #12
 800ffea:	6033      	str	r3, [r6, #0]
 800ffec:	2000      	movs	r0, #0
 800ffee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100c8 <_malloc_r+0xfc>
 800fff6:	f000 f869 	bl	80100cc <__malloc_lock>
 800fffa:	f8d8 3000 	ldr.w	r3, [r8]
 800fffe:	461c      	mov	r4, r3
 8010000:	bb44      	cbnz	r4, 8010054 <_malloc_r+0x88>
 8010002:	4629      	mov	r1, r5
 8010004:	4630      	mov	r0, r6
 8010006:	f7ff ffbf 	bl	800ff88 <sbrk_aligned>
 801000a:	1c43      	adds	r3, r0, #1
 801000c:	4604      	mov	r4, r0
 801000e:	d158      	bne.n	80100c2 <_malloc_r+0xf6>
 8010010:	f8d8 4000 	ldr.w	r4, [r8]
 8010014:	4627      	mov	r7, r4
 8010016:	2f00      	cmp	r7, #0
 8010018:	d143      	bne.n	80100a2 <_malloc_r+0xd6>
 801001a:	2c00      	cmp	r4, #0
 801001c:	d04b      	beq.n	80100b6 <_malloc_r+0xea>
 801001e:	6823      	ldr	r3, [r4, #0]
 8010020:	4639      	mov	r1, r7
 8010022:	4630      	mov	r0, r6
 8010024:	eb04 0903 	add.w	r9, r4, r3
 8010028:	f000 fe2e 	bl	8010c88 <_sbrk_r>
 801002c:	4581      	cmp	r9, r0
 801002e:	d142      	bne.n	80100b6 <_malloc_r+0xea>
 8010030:	6821      	ldr	r1, [r4, #0]
 8010032:	1a6d      	subs	r5, r5, r1
 8010034:	4629      	mov	r1, r5
 8010036:	4630      	mov	r0, r6
 8010038:	f7ff ffa6 	bl	800ff88 <sbrk_aligned>
 801003c:	3001      	adds	r0, #1
 801003e:	d03a      	beq.n	80100b6 <_malloc_r+0xea>
 8010040:	6823      	ldr	r3, [r4, #0]
 8010042:	442b      	add	r3, r5
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	f8d8 3000 	ldr.w	r3, [r8]
 801004a:	685a      	ldr	r2, [r3, #4]
 801004c:	bb62      	cbnz	r2, 80100a8 <_malloc_r+0xdc>
 801004e:	f8c8 7000 	str.w	r7, [r8]
 8010052:	e00f      	b.n	8010074 <_malloc_r+0xa8>
 8010054:	6822      	ldr	r2, [r4, #0]
 8010056:	1b52      	subs	r2, r2, r5
 8010058:	d420      	bmi.n	801009c <_malloc_r+0xd0>
 801005a:	2a0b      	cmp	r2, #11
 801005c:	d917      	bls.n	801008e <_malloc_r+0xc2>
 801005e:	1961      	adds	r1, r4, r5
 8010060:	42a3      	cmp	r3, r4
 8010062:	6025      	str	r5, [r4, #0]
 8010064:	bf18      	it	ne
 8010066:	6059      	strne	r1, [r3, #4]
 8010068:	6863      	ldr	r3, [r4, #4]
 801006a:	bf08      	it	eq
 801006c:	f8c8 1000 	streq.w	r1, [r8]
 8010070:	5162      	str	r2, [r4, r5]
 8010072:	604b      	str	r3, [r1, #4]
 8010074:	4630      	mov	r0, r6
 8010076:	f000 f82f 	bl	80100d8 <__malloc_unlock>
 801007a:	f104 000b 	add.w	r0, r4, #11
 801007e:	1d23      	adds	r3, r4, #4
 8010080:	f020 0007 	bic.w	r0, r0, #7
 8010084:	1ac2      	subs	r2, r0, r3
 8010086:	bf1c      	itt	ne
 8010088:	1a1b      	subne	r3, r3, r0
 801008a:	50a3      	strne	r3, [r4, r2]
 801008c:	e7af      	b.n	800ffee <_malloc_r+0x22>
 801008e:	6862      	ldr	r2, [r4, #4]
 8010090:	42a3      	cmp	r3, r4
 8010092:	bf0c      	ite	eq
 8010094:	f8c8 2000 	streq.w	r2, [r8]
 8010098:	605a      	strne	r2, [r3, #4]
 801009a:	e7eb      	b.n	8010074 <_malloc_r+0xa8>
 801009c:	4623      	mov	r3, r4
 801009e:	6864      	ldr	r4, [r4, #4]
 80100a0:	e7ae      	b.n	8010000 <_malloc_r+0x34>
 80100a2:	463c      	mov	r4, r7
 80100a4:	687f      	ldr	r7, [r7, #4]
 80100a6:	e7b6      	b.n	8010016 <_malloc_r+0x4a>
 80100a8:	461a      	mov	r2, r3
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	42a3      	cmp	r3, r4
 80100ae:	d1fb      	bne.n	80100a8 <_malloc_r+0xdc>
 80100b0:	2300      	movs	r3, #0
 80100b2:	6053      	str	r3, [r2, #4]
 80100b4:	e7de      	b.n	8010074 <_malloc_r+0xa8>
 80100b6:	230c      	movs	r3, #12
 80100b8:	6033      	str	r3, [r6, #0]
 80100ba:	4630      	mov	r0, r6
 80100bc:	f000 f80c 	bl	80100d8 <__malloc_unlock>
 80100c0:	e794      	b.n	800ffec <_malloc_r+0x20>
 80100c2:	6005      	str	r5, [r0, #0]
 80100c4:	e7d6      	b.n	8010074 <_malloc_r+0xa8>
 80100c6:	bf00      	nop
 80100c8:	20000bb4 	.word	0x20000bb4

080100cc <__malloc_lock>:
 80100cc:	4801      	ldr	r0, [pc, #4]	@ (80100d4 <__malloc_lock+0x8>)
 80100ce:	f000 be28 	b.w	8010d22 <__retarget_lock_acquire_recursive>
 80100d2:	bf00      	nop
 80100d4:	20000cf8 	.word	0x20000cf8

080100d8 <__malloc_unlock>:
 80100d8:	4801      	ldr	r0, [pc, #4]	@ (80100e0 <__malloc_unlock+0x8>)
 80100da:	f000 be23 	b.w	8010d24 <__retarget_lock_release_recursive>
 80100de:	bf00      	nop
 80100e0:	20000cf8 	.word	0x20000cf8

080100e4 <__cvt>:
 80100e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100e8:	ec57 6b10 	vmov	r6, r7, d0
 80100ec:	2f00      	cmp	r7, #0
 80100ee:	460c      	mov	r4, r1
 80100f0:	4619      	mov	r1, r3
 80100f2:	463b      	mov	r3, r7
 80100f4:	bfbb      	ittet	lt
 80100f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80100fa:	461f      	movlt	r7, r3
 80100fc:	2300      	movge	r3, #0
 80100fe:	232d      	movlt	r3, #45	@ 0x2d
 8010100:	700b      	strb	r3, [r1, #0]
 8010102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010104:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010108:	4691      	mov	r9, r2
 801010a:	f023 0820 	bic.w	r8, r3, #32
 801010e:	bfbc      	itt	lt
 8010110:	4632      	movlt	r2, r6
 8010112:	4616      	movlt	r6, r2
 8010114:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010118:	d005      	beq.n	8010126 <__cvt+0x42>
 801011a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801011e:	d100      	bne.n	8010122 <__cvt+0x3e>
 8010120:	3401      	adds	r4, #1
 8010122:	2102      	movs	r1, #2
 8010124:	e000      	b.n	8010128 <__cvt+0x44>
 8010126:	2103      	movs	r1, #3
 8010128:	ab03      	add	r3, sp, #12
 801012a:	9301      	str	r3, [sp, #4]
 801012c:	ab02      	add	r3, sp, #8
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	ec47 6b10 	vmov	d0, r6, r7
 8010134:	4653      	mov	r3, sl
 8010136:	4622      	mov	r2, r4
 8010138:	f000 fe8e 	bl	8010e58 <_dtoa_r>
 801013c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010140:	4605      	mov	r5, r0
 8010142:	d119      	bne.n	8010178 <__cvt+0x94>
 8010144:	f019 0f01 	tst.w	r9, #1
 8010148:	d00e      	beq.n	8010168 <__cvt+0x84>
 801014a:	eb00 0904 	add.w	r9, r0, r4
 801014e:	2200      	movs	r2, #0
 8010150:	2300      	movs	r3, #0
 8010152:	4630      	mov	r0, r6
 8010154:	4639      	mov	r1, r7
 8010156:	f7f0 fccf 	bl	8000af8 <__aeabi_dcmpeq>
 801015a:	b108      	cbz	r0, 8010160 <__cvt+0x7c>
 801015c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010160:	2230      	movs	r2, #48	@ 0x30
 8010162:	9b03      	ldr	r3, [sp, #12]
 8010164:	454b      	cmp	r3, r9
 8010166:	d31e      	bcc.n	80101a6 <__cvt+0xc2>
 8010168:	9b03      	ldr	r3, [sp, #12]
 801016a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801016c:	1b5b      	subs	r3, r3, r5
 801016e:	4628      	mov	r0, r5
 8010170:	6013      	str	r3, [r2, #0]
 8010172:	b004      	add	sp, #16
 8010174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801017c:	eb00 0904 	add.w	r9, r0, r4
 8010180:	d1e5      	bne.n	801014e <__cvt+0x6a>
 8010182:	7803      	ldrb	r3, [r0, #0]
 8010184:	2b30      	cmp	r3, #48	@ 0x30
 8010186:	d10a      	bne.n	801019e <__cvt+0xba>
 8010188:	2200      	movs	r2, #0
 801018a:	2300      	movs	r3, #0
 801018c:	4630      	mov	r0, r6
 801018e:	4639      	mov	r1, r7
 8010190:	f7f0 fcb2 	bl	8000af8 <__aeabi_dcmpeq>
 8010194:	b918      	cbnz	r0, 801019e <__cvt+0xba>
 8010196:	f1c4 0401 	rsb	r4, r4, #1
 801019a:	f8ca 4000 	str.w	r4, [sl]
 801019e:	f8da 3000 	ldr.w	r3, [sl]
 80101a2:	4499      	add	r9, r3
 80101a4:	e7d3      	b.n	801014e <__cvt+0x6a>
 80101a6:	1c59      	adds	r1, r3, #1
 80101a8:	9103      	str	r1, [sp, #12]
 80101aa:	701a      	strb	r2, [r3, #0]
 80101ac:	e7d9      	b.n	8010162 <__cvt+0x7e>

080101ae <__exponent>:
 80101ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101b0:	2900      	cmp	r1, #0
 80101b2:	bfba      	itte	lt
 80101b4:	4249      	neglt	r1, r1
 80101b6:	232d      	movlt	r3, #45	@ 0x2d
 80101b8:	232b      	movge	r3, #43	@ 0x2b
 80101ba:	2909      	cmp	r1, #9
 80101bc:	7002      	strb	r2, [r0, #0]
 80101be:	7043      	strb	r3, [r0, #1]
 80101c0:	dd29      	ble.n	8010216 <__exponent+0x68>
 80101c2:	f10d 0307 	add.w	r3, sp, #7
 80101c6:	461d      	mov	r5, r3
 80101c8:	270a      	movs	r7, #10
 80101ca:	461a      	mov	r2, r3
 80101cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80101d0:	fb07 1416 	mls	r4, r7, r6, r1
 80101d4:	3430      	adds	r4, #48	@ 0x30
 80101d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80101da:	460c      	mov	r4, r1
 80101dc:	2c63      	cmp	r4, #99	@ 0x63
 80101de:	f103 33ff 	add.w	r3, r3, #4294967295
 80101e2:	4631      	mov	r1, r6
 80101e4:	dcf1      	bgt.n	80101ca <__exponent+0x1c>
 80101e6:	3130      	adds	r1, #48	@ 0x30
 80101e8:	1e94      	subs	r4, r2, #2
 80101ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80101ee:	1c41      	adds	r1, r0, #1
 80101f0:	4623      	mov	r3, r4
 80101f2:	42ab      	cmp	r3, r5
 80101f4:	d30a      	bcc.n	801020c <__exponent+0x5e>
 80101f6:	f10d 0309 	add.w	r3, sp, #9
 80101fa:	1a9b      	subs	r3, r3, r2
 80101fc:	42ac      	cmp	r4, r5
 80101fe:	bf88      	it	hi
 8010200:	2300      	movhi	r3, #0
 8010202:	3302      	adds	r3, #2
 8010204:	4403      	add	r3, r0
 8010206:	1a18      	subs	r0, r3, r0
 8010208:	b003      	add	sp, #12
 801020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010210:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010214:	e7ed      	b.n	80101f2 <__exponent+0x44>
 8010216:	2330      	movs	r3, #48	@ 0x30
 8010218:	3130      	adds	r1, #48	@ 0x30
 801021a:	7083      	strb	r3, [r0, #2]
 801021c:	70c1      	strb	r1, [r0, #3]
 801021e:	1d03      	adds	r3, r0, #4
 8010220:	e7f1      	b.n	8010206 <__exponent+0x58>
	...

08010224 <_printf_float>:
 8010224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010228:	b08d      	sub	sp, #52	@ 0x34
 801022a:	460c      	mov	r4, r1
 801022c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010230:	4616      	mov	r6, r2
 8010232:	461f      	mov	r7, r3
 8010234:	4605      	mov	r5, r0
 8010236:	f000 fcef 	bl	8010c18 <_localeconv_r>
 801023a:	6803      	ldr	r3, [r0, #0]
 801023c:	9304      	str	r3, [sp, #16]
 801023e:	4618      	mov	r0, r3
 8010240:	f7f0 f82e 	bl	80002a0 <strlen>
 8010244:	2300      	movs	r3, #0
 8010246:	930a      	str	r3, [sp, #40]	@ 0x28
 8010248:	f8d8 3000 	ldr.w	r3, [r8]
 801024c:	9005      	str	r0, [sp, #20]
 801024e:	3307      	adds	r3, #7
 8010250:	f023 0307 	bic.w	r3, r3, #7
 8010254:	f103 0208 	add.w	r2, r3, #8
 8010258:	f894 a018 	ldrb.w	sl, [r4, #24]
 801025c:	f8d4 b000 	ldr.w	fp, [r4]
 8010260:	f8c8 2000 	str.w	r2, [r8]
 8010264:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010268:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801026c:	9307      	str	r3, [sp, #28]
 801026e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010272:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801027a:	4b9c      	ldr	r3, [pc, #624]	@ (80104ec <_printf_float+0x2c8>)
 801027c:	f04f 32ff 	mov.w	r2, #4294967295
 8010280:	f7f0 fc6c 	bl	8000b5c <__aeabi_dcmpun>
 8010284:	bb70      	cbnz	r0, 80102e4 <_printf_float+0xc0>
 8010286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801028a:	4b98      	ldr	r3, [pc, #608]	@ (80104ec <_printf_float+0x2c8>)
 801028c:	f04f 32ff 	mov.w	r2, #4294967295
 8010290:	f7f0 fc46 	bl	8000b20 <__aeabi_dcmple>
 8010294:	bb30      	cbnz	r0, 80102e4 <_printf_float+0xc0>
 8010296:	2200      	movs	r2, #0
 8010298:	2300      	movs	r3, #0
 801029a:	4640      	mov	r0, r8
 801029c:	4649      	mov	r1, r9
 801029e:	f7f0 fc35 	bl	8000b0c <__aeabi_dcmplt>
 80102a2:	b110      	cbz	r0, 80102aa <_printf_float+0x86>
 80102a4:	232d      	movs	r3, #45	@ 0x2d
 80102a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102aa:	4a91      	ldr	r2, [pc, #580]	@ (80104f0 <_printf_float+0x2cc>)
 80102ac:	4b91      	ldr	r3, [pc, #580]	@ (80104f4 <_printf_float+0x2d0>)
 80102ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80102b2:	bf94      	ite	ls
 80102b4:	4690      	movls	r8, r2
 80102b6:	4698      	movhi	r8, r3
 80102b8:	2303      	movs	r3, #3
 80102ba:	6123      	str	r3, [r4, #16]
 80102bc:	f02b 0304 	bic.w	r3, fp, #4
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	f04f 0900 	mov.w	r9, #0
 80102c6:	9700      	str	r7, [sp, #0]
 80102c8:	4633      	mov	r3, r6
 80102ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80102cc:	4621      	mov	r1, r4
 80102ce:	4628      	mov	r0, r5
 80102d0:	f000 f9d2 	bl	8010678 <_printf_common>
 80102d4:	3001      	adds	r0, #1
 80102d6:	f040 808d 	bne.w	80103f4 <_printf_float+0x1d0>
 80102da:	f04f 30ff 	mov.w	r0, #4294967295
 80102de:	b00d      	add	sp, #52	@ 0x34
 80102e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e4:	4642      	mov	r2, r8
 80102e6:	464b      	mov	r3, r9
 80102e8:	4640      	mov	r0, r8
 80102ea:	4649      	mov	r1, r9
 80102ec:	f7f0 fc36 	bl	8000b5c <__aeabi_dcmpun>
 80102f0:	b140      	cbz	r0, 8010304 <_printf_float+0xe0>
 80102f2:	464b      	mov	r3, r9
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	bfbc      	itt	lt
 80102f8:	232d      	movlt	r3, #45	@ 0x2d
 80102fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80102fe:	4a7e      	ldr	r2, [pc, #504]	@ (80104f8 <_printf_float+0x2d4>)
 8010300:	4b7e      	ldr	r3, [pc, #504]	@ (80104fc <_printf_float+0x2d8>)
 8010302:	e7d4      	b.n	80102ae <_printf_float+0x8a>
 8010304:	6863      	ldr	r3, [r4, #4]
 8010306:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801030a:	9206      	str	r2, [sp, #24]
 801030c:	1c5a      	adds	r2, r3, #1
 801030e:	d13b      	bne.n	8010388 <_printf_float+0x164>
 8010310:	2306      	movs	r3, #6
 8010312:	6063      	str	r3, [r4, #4]
 8010314:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010318:	2300      	movs	r3, #0
 801031a:	6022      	str	r2, [r4, #0]
 801031c:	9303      	str	r3, [sp, #12]
 801031e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010320:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010324:	ab09      	add	r3, sp, #36	@ 0x24
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	6861      	ldr	r1, [r4, #4]
 801032a:	ec49 8b10 	vmov	d0, r8, r9
 801032e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010332:	4628      	mov	r0, r5
 8010334:	f7ff fed6 	bl	80100e4 <__cvt>
 8010338:	9b06      	ldr	r3, [sp, #24]
 801033a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801033c:	2b47      	cmp	r3, #71	@ 0x47
 801033e:	4680      	mov	r8, r0
 8010340:	d129      	bne.n	8010396 <_printf_float+0x172>
 8010342:	1cc8      	adds	r0, r1, #3
 8010344:	db02      	blt.n	801034c <_printf_float+0x128>
 8010346:	6863      	ldr	r3, [r4, #4]
 8010348:	4299      	cmp	r1, r3
 801034a:	dd41      	ble.n	80103d0 <_printf_float+0x1ac>
 801034c:	f1aa 0a02 	sub.w	sl, sl, #2
 8010350:	fa5f fa8a 	uxtb.w	sl, sl
 8010354:	3901      	subs	r1, #1
 8010356:	4652      	mov	r2, sl
 8010358:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801035c:	9109      	str	r1, [sp, #36]	@ 0x24
 801035e:	f7ff ff26 	bl	80101ae <__exponent>
 8010362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010364:	1813      	adds	r3, r2, r0
 8010366:	2a01      	cmp	r2, #1
 8010368:	4681      	mov	r9, r0
 801036a:	6123      	str	r3, [r4, #16]
 801036c:	dc02      	bgt.n	8010374 <_printf_float+0x150>
 801036e:	6822      	ldr	r2, [r4, #0]
 8010370:	07d2      	lsls	r2, r2, #31
 8010372:	d501      	bpl.n	8010378 <_printf_float+0x154>
 8010374:	3301      	adds	r3, #1
 8010376:	6123      	str	r3, [r4, #16]
 8010378:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801037c:	2b00      	cmp	r3, #0
 801037e:	d0a2      	beq.n	80102c6 <_printf_float+0xa2>
 8010380:	232d      	movs	r3, #45	@ 0x2d
 8010382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010386:	e79e      	b.n	80102c6 <_printf_float+0xa2>
 8010388:	9a06      	ldr	r2, [sp, #24]
 801038a:	2a47      	cmp	r2, #71	@ 0x47
 801038c:	d1c2      	bne.n	8010314 <_printf_float+0xf0>
 801038e:	2b00      	cmp	r3, #0
 8010390:	d1c0      	bne.n	8010314 <_printf_float+0xf0>
 8010392:	2301      	movs	r3, #1
 8010394:	e7bd      	b.n	8010312 <_printf_float+0xee>
 8010396:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801039a:	d9db      	bls.n	8010354 <_printf_float+0x130>
 801039c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80103a0:	d118      	bne.n	80103d4 <_printf_float+0x1b0>
 80103a2:	2900      	cmp	r1, #0
 80103a4:	6863      	ldr	r3, [r4, #4]
 80103a6:	dd0b      	ble.n	80103c0 <_printf_float+0x19c>
 80103a8:	6121      	str	r1, [r4, #16]
 80103aa:	b913      	cbnz	r3, 80103b2 <_printf_float+0x18e>
 80103ac:	6822      	ldr	r2, [r4, #0]
 80103ae:	07d0      	lsls	r0, r2, #31
 80103b0:	d502      	bpl.n	80103b8 <_printf_float+0x194>
 80103b2:	3301      	adds	r3, #1
 80103b4:	440b      	add	r3, r1
 80103b6:	6123      	str	r3, [r4, #16]
 80103b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80103ba:	f04f 0900 	mov.w	r9, #0
 80103be:	e7db      	b.n	8010378 <_printf_float+0x154>
 80103c0:	b913      	cbnz	r3, 80103c8 <_printf_float+0x1a4>
 80103c2:	6822      	ldr	r2, [r4, #0]
 80103c4:	07d2      	lsls	r2, r2, #31
 80103c6:	d501      	bpl.n	80103cc <_printf_float+0x1a8>
 80103c8:	3302      	adds	r3, #2
 80103ca:	e7f4      	b.n	80103b6 <_printf_float+0x192>
 80103cc:	2301      	movs	r3, #1
 80103ce:	e7f2      	b.n	80103b6 <_printf_float+0x192>
 80103d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80103d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103d6:	4299      	cmp	r1, r3
 80103d8:	db05      	blt.n	80103e6 <_printf_float+0x1c2>
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	6121      	str	r1, [r4, #16]
 80103de:	07d8      	lsls	r0, r3, #31
 80103e0:	d5ea      	bpl.n	80103b8 <_printf_float+0x194>
 80103e2:	1c4b      	adds	r3, r1, #1
 80103e4:	e7e7      	b.n	80103b6 <_printf_float+0x192>
 80103e6:	2900      	cmp	r1, #0
 80103e8:	bfd4      	ite	le
 80103ea:	f1c1 0202 	rsble	r2, r1, #2
 80103ee:	2201      	movgt	r2, #1
 80103f0:	4413      	add	r3, r2
 80103f2:	e7e0      	b.n	80103b6 <_printf_float+0x192>
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	055a      	lsls	r2, r3, #21
 80103f8:	d407      	bmi.n	801040a <_printf_float+0x1e6>
 80103fa:	6923      	ldr	r3, [r4, #16]
 80103fc:	4642      	mov	r2, r8
 80103fe:	4631      	mov	r1, r6
 8010400:	4628      	mov	r0, r5
 8010402:	47b8      	blx	r7
 8010404:	3001      	adds	r0, #1
 8010406:	d12b      	bne.n	8010460 <_printf_float+0x23c>
 8010408:	e767      	b.n	80102da <_printf_float+0xb6>
 801040a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801040e:	f240 80dd 	bls.w	80105cc <_printf_float+0x3a8>
 8010412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010416:	2200      	movs	r2, #0
 8010418:	2300      	movs	r3, #0
 801041a:	f7f0 fb6d 	bl	8000af8 <__aeabi_dcmpeq>
 801041e:	2800      	cmp	r0, #0
 8010420:	d033      	beq.n	801048a <_printf_float+0x266>
 8010422:	4a37      	ldr	r2, [pc, #220]	@ (8010500 <_printf_float+0x2dc>)
 8010424:	2301      	movs	r3, #1
 8010426:	4631      	mov	r1, r6
 8010428:	4628      	mov	r0, r5
 801042a:	47b8      	blx	r7
 801042c:	3001      	adds	r0, #1
 801042e:	f43f af54 	beq.w	80102da <_printf_float+0xb6>
 8010432:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010436:	4543      	cmp	r3, r8
 8010438:	db02      	blt.n	8010440 <_printf_float+0x21c>
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	07d8      	lsls	r0, r3, #31
 801043e:	d50f      	bpl.n	8010460 <_printf_float+0x23c>
 8010440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010444:	4631      	mov	r1, r6
 8010446:	4628      	mov	r0, r5
 8010448:	47b8      	blx	r7
 801044a:	3001      	adds	r0, #1
 801044c:	f43f af45 	beq.w	80102da <_printf_float+0xb6>
 8010450:	f04f 0900 	mov.w	r9, #0
 8010454:	f108 38ff 	add.w	r8, r8, #4294967295
 8010458:	f104 0a1a 	add.w	sl, r4, #26
 801045c:	45c8      	cmp	r8, r9
 801045e:	dc09      	bgt.n	8010474 <_printf_float+0x250>
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	079b      	lsls	r3, r3, #30
 8010464:	f100 8103 	bmi.w	801066e <_printf_float+0x44a>
 8010468:	68e0      	ldr	r0, [r4, #12]
 801046a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801046c:	4298      	cmp	r0, r3
 801046e:	bfb8      	it	lt
 8010470:	4618      	movlt	r0, r3
 8010472:	e734      	b.n	80102de <_printf_float+0xba>
 8010474:	2301      	movs	r3, #1
 8010476:	4652      	mov	r2, sl
 8010478:	4631      	mov	r1, r6
 801047a:	4628      	mov	r0, r5
 801047c:	47b8      	blx	r7
 801047e:	3001      	adds	r0, #1
 8010480:	f43f af2b 	beq.w	80102da <_printf_float+0xb6>
 8010484:	f109 0901 	add.w	r9, r9, #1
 8010488:	e7e8      	b.n	801045c <_printf_float+0x238>
 801048a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801048c:	2b00      	cmp	r3, #0
 801048e:	dc39      	bgt.n	8010504 <_printf_float+0x2e0>
 8010490:	4a1b      	ldr	r2, [pc, #108]	@ (8010500 <_printf_float+0x2dc>)
 8010492:	2301      	movs	r3, #1
 8010494:	4631      	mov	r1, r6
 8010496:	4628      	mov	r0, r5
 8010498:	47b8      	blx	r7
 801049a:	3001      	adds	r0, #1
 801049c:	f43f af1d 	beq.w	80102da <_printf_float+0xb6>
 80104a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80104a4:	ea59 0303 	orrs.w	r3, r9, r3
 80104a8:	d102      	bne.n	80104b0 <_printf_float+0x28c>
 80104aa:	6823      	ldr	r3, [r4, #0]
 80104ac:	07d9      	lsls	r1, r3, #31
 80104ae:	d5d7      	bpl.n	8010460 <_printf_float+0x23c>
 80104b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104b4:	4631      	mov	r1, r6
 80104b6:	4628      	mov	r0, r5
 80104b8:	47b8      	blx	r7
 80104ba:	3001      	adds	r0, #1
 80104bc:	f43f af0d 	beq.w	80102da <_printf_float+0xb6>
 80104c0:	f04f 0a00 	mov.w	sl, #0
 80104c4:	f104 0b1a 	add.w	fp, r4, #26
 80104c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ca:	425b      	negs	r3, r3
 80104cc:	4553      	cmp	r3, sl
 80104ce:	dc01      	bgt.n	80104d4 <_printf_float+0x2b0>
 80104d0:	464b      	mov	r3, r9
 80104d2:	e793      	b.n	80103fc <_printf_float+0x1d8>
 80104d4:	2301      	movs	r3, #1
 80104d6:	465a      	mov	r2, fp
 80104d8:	4631      	mov	r1, r6
 80104da:	4628      	mov	r0, r5
 80104dc:	47b8      	blx	r7
 80104de:	3001      	adds	r0, #1
 80104e0:	f43f aefb 	beq.w	80102da <_printf_float+0xb6>
 80104e4:	f10a 0a01 	add.w	sl, sl, #1
 80104e8:	e7ee      	b.n	80104c8 <_printf_float+0x2a4>
 80104ea:	bf00      	nop
 80104ec:	7fefffff 	.word	0x7fefffff
 80104f0:	080181b0 	.word	0x080181b0
 80104f4:	080181b4 	.word	0x080181b4
 80104f8:	080181b8 	.word	0x080181b8
 80104fc:	080181bc 	.word	0x080181bc
 8010500:	080181c0 	.word	0x080181c0
 8010504:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010506:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801050a:	4553      	cmp	r3, sl
 801050c:	bfa8      	it	ge
 801050e:	4653      	movge	r3, sl
 8010510:	2b00      	cmp	r3, #0
 8010512:	4699      	mov	r9, r3
 8010514:	dc36      	bgt.n	8010584 <_printf_float+0x360>
 8010516:	f04f 0b00 	mov.w	fp, #0
 801051a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801051e:	f104 021a 	add.w	r2, r4, #26
 8010522:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010524:	9306      	str	r3, [sp, #24]
 8010526:	eba3 0309 	sub.w	r3, r3, r9
 801052a:	455b      	cmp	r3, fp
 801052c:	dc31      	bgt.n	8010592 <_printf_float+0x36e>
 801052e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010530:	459a      	cmp	sl, r3
 8010532:	dc3a      	bgt.n	80105aa <_printf_float+0x386>
 8010534:	6823      	ldr	r3, [r4, #0]
 8010536:	07da      	lsls	r2, r3, #31
 8010538:	d437      	bmi.n	80105aa <_printf_float+0x386>
 801053a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801053c:	ebaa 0903 	sub.w	r9, sl, r3
 8010540:	9b06      	ldr	r3, [sp, #24]
 8010542:	ebaa 0303 	sub.w	r3, sl, r3
 8010546:	4599      	cmp	r9, r3
 8010548:	bfa8      	it	ge
 801054a:	4699      	movge	r9, r3
 801054c:	f1b9 0f00 	cmp.w	r9, #0
 8010550:	dc33      	bgt.n	80105ba <_printf_float+0x396>
 8010552:	f04f 0800 	mov.w	r8, #0
 8010556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801055a:	f104 0b1a 	add.w	fp, r4, #26
 801055e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010560:	ebaa 0303 	sub.w	r3, sl, r3
 8010564:	eba3 0309 	sub.w	r3, r3, r9
 8010568:	4543      	cmp	r3, r8
 801056a:	f77f af79 	ble.w	8010460 <_printf_float+0x23c>
 801056e:	2301      	movs	r3, #1
 8010570:	465a      	mov	r2, fp
 8010572:	4631      	mov	r1, r6
 8010574:	4628      	mov	r0, r5
 8010576:	47b8      	blx	r7
 8010578:	3001      	adds	r0, #1
 801057a:	f43f aeae 	beq.w	80102da <_printf_float+0xb6>
 801057e:	f108 0801 	add.w	r8, r8, #1
 8010582:	e7ec      	b.n	801055e <_printf_float+0x33a>
 8010584:	4642      	mov	r2, r8
 8010586:	4631      	mov	r1, r6
 8010588:	4628      	mov	r0, r5
 801058a:	47b8      	blx	r7
 801058c:	3001      	adds	r0, #1
 801058e:	d1c2      	bne.n	8010516 <_printf_float+0x2f2>
 8010590:	e6a3      	b.n	80102da <_printf_float+0xb6>
 8010592:	2301      	movs	r3, #1
 8010594:	4631      	mov	r1, r6
 8010596:	4628      	mov	r0, r5
 8010598:	9206      	str	r2, [sp, #24]
 801059a:	47b8      	blx	r7
 801059c:	3001      	adds	r0, #1
 801059e:	f43f ae9c 	beq.w	80102da <_printf_float+0xb6>
 80105a2:	9a06      	ldr	r2, [sp, #24]
 80105a4:	f10b 0b01 	add.w	fp, fp, #1
 80105a8:	e7bb      	b.n	8010522 <_printf_float+0x2fe>
 80105aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105ae:	4631      	mov	r1, r6
 80105b0:	4628      	mov	r0, r5
 80105b2:	47b8      	blx	r7
 80105b4:	3001      	adds	r0, #1
 80105b6:	d1c0      	bne.n	801053a <_printf_float+0x316>
 80105b8:	e68f      	b.n	80102da <_printf_float+0xb6>
 80105ba:	9a06      	ldr	r2, [sp, #24]
 80105bc:	464b      	mov	r3, r9
 80105be:	4442      	add	r2, r8
 80105c0:	4631      	mov	r1, r6
 80105c2:	4628      	mov	r0, r5
 80105c4:	47b8      	blx	r7
 80105c6:	3001      	adds	r0, #1
 80105c8:	d1c3      	bne.n	8010552 <_printf_float+0x32e>
 80105ca:	e686      	b.n	80102da <_printf_float+0xb6>
 80105cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80105d0:	f1ba 0f01 	cmp.w	sl, #1
 80105d4:	dc01      	bgt.n	80105da <_printf_float+0x3b6>
 80105d6:	07db      	lsls	r3, r3, #31
 80105d8:	d536      	bpl.n	8010648 <_printf_float+0x424>
 80105da:	2301      	movs	r3, #1
 80105dc:	4642      	mov	r2, r8
 80105de:	4631      	mov	r1, r6
 80105e0:	4628      	mov	r0, r5
 80105e2:	47b8      	blx	r7
 80105e4:	3001      	adds	r0, #1
 80105e6:	f43f ae78 	beq.w	80102da <_printf_float+0xb6>
 80105ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105ee:	4631      	mov	r1, r6
 80105f0:	4628      	mov	r0, r5
 80105f2:	47b8      	blx	r7
 80105f4:	3001      	adds	r0, #1
 80105f6:	f43f ae70 	beq.w	80102da <_printf_float+0xb6>
 80105fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80105fe:	2200      	movs	r2, #0
 8010600:	2300      	movs	r3, #0
 8010602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010606:	f7f0 fa77 	bl	8000af8 <__aeabi_dcmpeq>
 801060a:	b9c0      	cbnz	r0, 801063e <_printf_float+0x41a>
 801060c:	4653      	mov	r3, sl
 801060e:	f108 0201 	add.w	r2, r8, #1
 8010612:	4631      	mov	r1, r6
 8010614:	4628      	mov	r0, r5
 8010616:	47b8      	blx	r7
 8010618:	3001      	adds	r0, #1
 801061a:	d10c      	bne.n	8010636 <_printf_float+0x412>
 801061c:	e65d      	b.n	80102da <_printf_float+0xb6>
 801061e:	2301      	movs	r3, #1
 8010620:	465a      	mov	r2, fp
 8010622:	4631      	mov	r1, r6
 8010624:	4628      	mov	r0, r5
 8010626:	47b8      	blx	r7
 8010628:	3001      	adds	r0, #1
 801062a:	f43f ae56 	beq.w	80102da <_printf_float+0xb6>
 801062e:	f108 0801 	add.w	r8, r8, #1
 8010632:	45d0      	cmp	r8, sl
 8010634:	dbf3      	blt.n	801061e <_printf_float+0x3fa>
 8010636:	464b      	mov	r3, r9
 8010638:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801063c:	e6df      	b.n	80103fe <_printf_float+0x1da>
 801063e:	f04f 0800 	mov.w	r8, #0
 8010642:	f104 0b1a 	add.w	fp, r4, #26
 8010646:	e7f4      	b.n	8010632 <_printf_float+0x40e>
 8010648:	2301      	movs	r3, #1
 801064a:	4642      	mov	r2, r8
 801064c:	e7e1      	b.n	8010612 <_printf_float+0x3ee>
 801064e:	2301      	movs	r3, #1
 8010650:	464a      	mov	r2, r9
 8010652:	4631      	mov	r1, r6
 8010654:	4628      	mov	r0, r5
 8010656:	47b8      	blx	r7
 8010658:	3001      	adds	r0, #1
 801065a:	f43f ae3e 	beq.w	80102da <_printf_float+0xb6>
 801065e:	f108 0801 	add.w	r8, r8, #1
 8010662:	68e3      	ldr	r3, [r4, #12]
 8010664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010666:	1a5b      	subs	r3, r3, r1
 8010668:	4543      	cmp	r3, r8
 801066a:	dcf0      	bgt.n	801064e <_printf_float+0x42a>
 801066c:	e6fc      	b.n	8010468 <_printf_float+0x244>
 801066e:	f04f 0800 	mov.w	r8, #0
 8010672:	f104 0919 	add.w	r9, r4, #25
 8010676:	e7f4      	b.n	8010662 <_printf_float+0x43e>

08010678 <_printf_common>:
 8010678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801067c:	4616      	mov	r6, r2
 801067e:	4698      	mov	r8, r3
 8010680:	688a      	ldr	r2, [r1, #8]
 8010682:	690b      	ldr	r3, [r1, #16]
 8010684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010688:	4293      	cmp	r3, r2
 801068a:	bfb8      	it	lt
 801068c:	4613      	movlt	r3, r2
 801068e:	6033      	str	r3, [r6, #0]
 8010690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010694:	4607      	mov	r7, r0
 8010696:	460c      	mov	r4, r1
 8010698:	b10a      	cbz	r2, 801069e <_printf_common+0x26>
 801069a:	3301      	adds	r3, #1
 801069c:	6033      	str	r3, [r6, #0]
 801069e:	6823      	ldr	r3, [r4, #0]
 80106a0:	0699      	lsls	r1, r3, #26
 80106a2:	bf42      	ittt	mi
 80106a4:	6833      	ldrmi	r3, [r6, #0]
 80106a6:	3302      	addmi	r3, #2
 80106a8:	6033      	strmi	r3, [r6, #0]
 80106aa:	6825      	ldr	r5, [r4, #0]
 80106ac:	f015 0506 	ands.w	r5, r5, #6
 80106b0:	d106      	bne.n	80106c0 <_printf_common+0x48>
 80106b2:	f104 0a19 	add.w	sl, r4, #25
 80106b6:	68e3      	ldr	r3, [r4, #12]
 80106b8:	6832      	ldr	r2, [r6, #0]
 80106ba:	1a9b      	subs	r3, r3, r2
 80106bc:	42ab      	cmp	r3, r5
 80106be:	dc26      	bgt.n	801070e <_printf_common+0x96>
 80106c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80106c4:	6822      	ldr	r2, [r4, #0]
 80106c6:	3b00      	subs	r3, #0
 80106c8:	bf18      	it	ne
 80106ca:	2301      	movne	r3, #1
 80106cc:	0692      	lsls	r2, r2, #26
 80106ce:	d42b      	bmi.n	8010728 <_printf_common+0xb0>
 80106d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80106d4:	4641      	mov	r1, r8
 80106d6:	4638      	mov	r0, r7
 80106d8:	47c8      	blx	r9
 80106da:	3001      	adds	r0, #1
 80106dc:	d01e      	beq.n	801071c <_printf_common+0xa4>
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	6922      	ldr	r2, [r4, #16]
 80106e2:	f003 0306 	and.w	r3, r3, #6
 80106e6:	2b04      	cmp	r3, #4
 80106e8:	bf02      	ittt	eq
 80106ea:	68e5      	ldreq	r5, [r4, #12]
 80106ec:	6833      	ldreq	r3, [r6, #0]
 80106ee:	1aed      	subeq	r5, r5, r3
 80106f0:	68a3      	ldr	r3, [r4, #8]
 80106f2:	bf0c      	ite	eq
 80106f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106f8:	2500      	movne	r5, #0
 80106fa:	4293      	cmp	r3, r2
 80106fc:	bfc4      	itt	gt
 80106fe:	1a9b      	subgt	r3, r3, r2
 8010700:	18ed      	addgt	r5, r5, r3
 8010702:	2600      	movs	r6, #0
 8010704:	341a      	adds	r4, #26
 8010706:	42b5      	cmp	r5, r6
 8010708:	d11a      	bne.n	8010740 <_printf_common+0xc8>
 801070a:	2000      	movs	r0, #0
 801070c:	e008      	b.n	8010720 <_printf_common+0xa8>
 801070e:	2301      	movs	r3, #1
 8010710:	4652      	mov	r2, sl
 8010712:	4641      	mov	r1, r8
 8010714:	4638      	mov	r0, r7
 8010716:	47c8      	blx	r9
 8010718:	3001      	adds	r0, #1
 801071a:	d103      	bne.n	8010724 <_printf_common+0xac>
 801071c:	f04f 30ff 	mov.w	r0, #4294967295
 8010720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010724:	3501      	adds	r5, #1
 8010726:	e7c6      	b.n	80106b6 <_printf_common+0x3e>
 8010728:	18e1      	adds	r1, r4, r3
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	2030      	movs	r0, #48	@ 0x30
 801072e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010732:	4422      	add	r2, r4
 8010734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801073c:	3302      	adds	r3, #2
 801073e:	e7c7      	b.n	80106d0 <_printf_common+0x58>
 8010740:	2301      	movs	r3, #1
 8010742:	4622      	mov	r2, r4
 8010744:	4641      	mov	r1, r8
 8010746:	4638      	mov	r0, r7
 8010748:	47c8      	blx	r9
 801074a:	3001      	adds	r0, #1
 801074c:	d0e6      	beq.n	801071c <_printf_common+0xa4>
 801074e:	3601      	adds	r6, #1
 8010750:	e7d9      	b.n	8010706 <_printf_common+0x8e>
	...

08010754 <_printf_i>:
 8010754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010758:	7e0f      	ldrb	r7, [r1, #24]
 801075a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801075c:	2f78      	cmp	r7, #120	@ 0x78
 801075e:	4691      	mov	r9, r2
 8010760:	4680      	mov	r8, r0
 8010762:	460c      	mov	r4, r1
 8010764:	469a      	mov	sl, r3
 8010766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801076a:	d807      	bhi.n	801077c <_printf_i+0x28>
 801076c:	2f62      	cmp	r7, #98	@ 0x62
 801076e:	d80a      	bhi.n	8010786 <_printf_i+0x32>
 8010770:	2f00      	cmp	r7, #0
 8010772:	f000 80d2 	beq.w	801091a <_printf_i+0x1c6>
 8010776:	2f58      	cmp	r7, #88	@ 0x58
 8010778:	f000 80b9 	beq.w	80108ee <_printf_i+0x19a>
 801077c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010784:	e03a      	b.n	80107fc <_printf_i+0xa8>
 8010786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801078a:	2b15      	cmp	r3, #21
 801078c:	d8f6      	bhi.n	801077c <_printf_i+0x28>
 801078e:	a101      	add	r1, pc, #4	@ (adr r1, 8010794 <_printf_i+0x40>)
 8010790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010794:	080107ed 	.word	0x080107ed
 8010798:	08010801 	.word	0x08010801
 801079c:	0801077d 	.word	0x0801077d
 80107a0:	0801077d 	.word	0x0801077d
 80107a4:	0801077d 	.word	0x0801077d
 80107a8:	0801077d 	.word	0x0801077d
 80107ac:	08010801 	.word	0x08010801
 80107b0:	0801077d 	.word	0x0801077d
 80107b4:	0801077d 	.word	0x0801077d
 80107b8:	0801077d 	.word	0x0801077d
 80107bc:	0801077d 	.word	0x0801077d
 80107c0:	08010901 	.word	0x08010901
 80107c4:	0801082b 	.word	0x0801082b
 80107c8:	080108bb 	.word	0x080108bb
 80107cc:	0801077d 	.word	0x0801077d
 80107d0:	0801077d 	.word	0x0801077d
 80107d4:	08010923 	.word	0x08010923
 80107d8:	0801077d 	.word	0x0801077d
 80107dc:	0801082b 	.word	0x0801082b
 80107e0:	0801077d 	.word	0x0801077d
 80107e4:	0801077d 	.word	0x0801077d
 80107e8:	080108c3 	.word	0x080108c3
 80107ec:	6833      	ldr	r3, [r6, #0]
 80107ee:	1d1a      	adds	r2, r3, #4
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6032      	str	r2, [r6, #0]
 80107f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80107fc:	2301      	movs	r3, #1
 80107fe:	e09d      	b.n	801093c <_printf_i+0x1e8>
 8010800:	6833      	ldr	r3, [r6, #0]
 8010802:	6820      	ldr	r0, [r4, #0]
 8010804:	1d19      	adds	r1, r3, #4
 8010806:	6031      	str	r1, [r6, #0]
 8010808:	0606      	lsls	r6, r0, #24
 801080a:	d501      	bpl.n	8010810 <_printf_i+0xbc>
 801080c:	681d      	ldr	r5, [r3, #0]
 801080e:	e003      	b.n	8010818 <_printf_i+0xc4>
 8010810:	0645      	lsls	r5, r0, #25
 8010812:	d5fb      	bpl.n	801080c <_printf_i+0xb8>
 8010814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010818:	2d00      	cmp	r5, #0
 801081a:	da03      	bge.n	8010824 <_printf_i+0xd0>
 801081c:	232d      	movs	r3, #45	@ 0x2d
 801081e:	426d      	negs	r5, r5
 8010820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010824:	4859      	ldr	r0, [pc, #356]	@ (801098c <_printf_i+0x238>)
 8010826:	230a      	movs	r3, #10
 8010828:	e011      	b.n	801084e <_printf_i+0xfa>
 801082a:	6821      	ldr	r1, [r4, #0]
 801082c:	6833      	ldr	r3, [r6, #0]
 801082e:	0608      	lsls	r0, r1, #24
 8010830:	f853 5b04 	ldr.w	r5, [r3], #4
 8010834:	d402      	bmi.n	801083c <_printf_i+0xe8>
 8010836:	0649      	lsls	r1, r1, #25
 8010838:	bf48      	it	mi
 801083a:	b2ad      	uxthmi	r5, r5
 801083c:	2f6f      	cmp	r7, #111	@ 0x6f
 801083e:	4853      	ldr	r0, [pc, #332]	@ (801098c <_printf_i+0x238>)
 8010840:	6033      	str	r3, [r6, #0]
 8010842:	bf14      	ite	ne
 8010844:	230a      	movne	r3, #10
 8010846:	2308      	moveq	r3, #8
 8010848:	2100      	movs	r1, #0
 801084a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801084e:	6866      	ldr	r6, [r4, #4]
 8010850:	60a6      	str	r6, [r4, #8]
 8010852:	2e00      	cmp	r6, #0
 8010854:	bfa2      	ittt	ge
 8010856:	6821      	ldrge	r1, [r4, #0]
 8010858:	f021 0104 	bicge.w	r1, r1, #4
 801085c:	6021      	strge	r1, [r4, #0]
 801085e:	b90d      	cbnz	r5, 8010864 <_printf_i+0x110>
 8010860:	2e00      	cmp	r6, #0
 8010862:	d04b      	beq.n	80108fc <_printf_i+0x1a8>
 8010864:	4616      	mov	r6, r2
 8010866:	fbb5 f1f3 	udiv	r1, r5, r3
 801086a:	fb03 5711 	mls	r7, r3, r1, r5
 801086e:	5dc7      	ldrb	r7, [r0, r7]
 8010870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010874:	462f      	mov	r7, r5
 8010876:	42bb      	cmp	r3, r7
 8010878:	460d      	mov	r5, r1
 801087a:	d9f4      	bls.n	8010866 <_printf_i+0x112>
 801087c:	2b08      	cmp	r3, #8
 801087e:	d10b      	bne.n	8010898 <_printf_i+0x144>
 8010880:	6823      	ldr	r3, [r4, #0]
 8010882:	07df      	lsls	r7, r3, #31
 8010884:	d508      	bpl.n	8010898 <_printf_i+0x144>
 8010886:	6923      	ldr	r3, [r4, #16]
 8010888:	6861      	ldr	r1, [r4, #4]
 801088a:	4299      	cmp	r1, r3
 801088c:	bfde      	ittt	le
 801088e:	2330      	movle	r3, #48	@ 0x30
 8010890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010898:	1b92      	subs	r2, r2, r6
 801089a:	6122      	str	r2, [r4, #16]
 801089c:	f8cd a000 	str.w	sl, [sp]
 80108a0:	464b      	mov	r3, r9
 80108a2:	aa03      	add	r2, sp, #12
 80108a4:	4621      	mov	r1, r4
 80108a6:	4640      	mov	r0, r8
 80108a8:	f7ff fee6 	bl	8010678 <_printf_common>
 80108ac:	3001      	adds	r0, #1
 80108ae:	d14a      	bne.n	8010946 <_printf_i+0x1f2>
 80108b0:	f04f 30ff 	mov.w	r0, #4294967295
 80108b4:	b004      	add	sp, #16
 80108b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ba:	6823      	ldr	r3, [r4, #0]
 80108bc:	f043 0320 	orr.w	r3, r3, #32
 80108c0:	6023      	str	r3, [r4, #0]
 80108c2:	4833      	ldr	r0, [pc, #204]	@ (8010990 <_printf_i+0x23c>)
 80108c4:	2778      	movs	r7, #120	@ 0x78
 80108c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	6831      	ldr	r1, [r6, #0]
 80108ce:	061f      	lsls	r7, r3, #24
 80108d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80108d4:	d402      	bmi.n	80108dc <_printf_i+0x188>
 80108d6:	065f      	lsls	r7, r3, #25
 80108d8:	bf48      	it	mi
 80108da:	b2ad      	uxthmi	r5, r5
 80108dc:	6031      	str	r1, [r6, #0]
 80108de:	07d9      	lsls	r1, r3, #31
 80108e0:	bf44      	itt	mi
 80108e2:	f043 0320 	orrmi.w	r3, r3, #32
 80108e6:	6023      	strmi	r3, [r4, #0]
 80108e8:	b11d      	cbz	r5, 80108f2 <_printf_i+0x19e>
 80108ea:	2310      	movs	r3, #16
 80108ec:	e7ac      	b.n	8010848 <_printf_i+0xf4>
 80108ee:	4827      	ldr	r0, [pc, #156]	@ (801098c <_printf_i+0x238>)
 80108f0:	e7e9      	b.n	80108c6 <_printf_i+0x172>
 80108f2:	6823      	ldr	r3, [r4, #0]
 80108f4:	f023 0320 	bic.w	r3, r3, #32
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	e7f6      	b.n	80108ea <_printf_i+0x196>
 80108fc:	4616      	mov	r6, r2
 80108fe:	e7bd      	b.n	801087c <_printf_i+0x128>
 8010900:	6833      	ldr	r3, [r6, #0]
 8010902:	6825      	ldr	r5, [r4, #0]
 8010904:	6961      	ldr	r1, [r4, #20]
 8010906:	1d18      	adds	r0, r3, #4
 8010908:	6030      	str	r0, [r6, #0]
 801090a:	062e      	lsls	r6, r5, #24
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	d501      	bpl.n	8010914 <_printf_i+0x1c0>
 8010910:	6019      	str	r1, [r3, #0]
 8010912:	e002      	b.n	801091a <_printf_i+0x1c6>
 8010914:	0668      	lsls	r0, r5, #25
 8010916:	d5fb      	bpl.n	8010910 <_printf_i+0x1bc>
 8010918:	8019      	strh	r1, [r3, #0]
 801091a:	2300      	movs	r3, #0
 801091c:	6123      	str	r3, [r4, #16]
 801091e:	4616      	mov	r6, r2
 8010920:	e7bc      	b.n	801089c <_printf_i+0x148>
 8010922:	6833      	ldr	r3, [r6, #0]
 8010924:	1d1a      	adds	r2, r3, #4
 8010926:	6032      	str	r2, [r6, #0]
 8010928:	681e      	ldr	r6, [r3, #0]
 801092a:	6862      	ldr	r2, [r4, #4]
 801092c:	2100      	movs	r1, #0
 801092e:	4630      	mov	r0, r6
 8010930:	f7ef fc66 	bl	8000200 <memchr>
 8010934:	b108      	cbz	r0, 801093a <_printf_i+0x1e6>
 8010936:	1b80      	subs	r0, r0, r6
 8010938:	6060      	str	r0, [r4, #4]
 801093a:	6863      	ldr	r3, [r4, #4]
 801093c:	6123      	str	r3, [r4, #16]
 801093e:	2300      	movs	r3, #0
 8010940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010944:	e7aa      	b.n	801089c <_printf_i+0x148>
 8010946:	6923      	ldr	r3, [r4, #16]
 8010948:	4632      	mov	r2, r6
 801094a:	4649      	mov	r1, r9
 801094c:	4640      	mov	r0, r8
 801094e:	47d0      	blx	sl
 8010950:	3001      	adds	r0, #1
 8010952:	d0ad      	beq.n	80108b0 <_printf_i+0x15c>
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	079b      	lsls	r3, r3, #30
 8010958:	d413      	bmi.n	8010982 <_printf_i+0x22e>
 801095a:	68e0      	ldr	r0, [r4, #12]
 801095c:	9b03      	ldr	r3, [sp, #12]
 801095e:	4298      	cmp	r0, r3
 8010960:	bfb8      	it	lt
 8010962:	4618      	movlt	r0, r3
 8010964:	e7a6      	b.n	80108b4 <_printf_i+0x160>
 8010966:	2301      	movs	r3, #1
 8010968:	4632      	mov	r2, r6
 801096a:	4649      	mov	r1, r9
 801096c:	4640      	mov	r0, r8
 801096e:	47d0      	blx	sl
 8010970:	3001      	adds	r0, #1
 8010972:	d09d      	beq.n	80108b0 <_printf_i+0x15c>
 8010974:	3501      	adds	r5, #1
 8010976:	68e3      	ldr	r3, [r4, #12]
 8010978:	9903      	ldr	r1, [sp, #12]
 801097a:	1a5b      	subs	r3, r3, r1
 801097c:	42ab      	cmp	r3, r5
 801097e:	dcf2      	bgt.n	8010966 <_printf_i+0x212>
 8010980:	e7eb      	b.n	801095a <_printf_i+0x206>
 8010982:	2500      	movs	r5, #0
 8010984:	f104 0619 	add.w	r6, r4, #25
 8010988:	e7f5      	b.n	8010976 <_printf_i+0x222>
 801098a:	bf00      	nop
 801098c:	080181c2 	.word	0x080181c2
 8010990:	080181d3 	.word	0x080181d3

08010994 <std>:
 8010994:	2300      	movs	r3, #0
 8010996:	b510      	push	{r4, lr}
 8010998:	4604      	mov	r4, r0
 801099a:	e9c0 3300 	strd	r3, r3, [r0]
 801099e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109a2:	6083      	str	r3, [r0, #8]
 80109a4:	8181      	strh	r1, [r0, #12]
 80109a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80109a8:	81c2      	strh	r2, [r0, #14]
 80109aa:	6183      	str	r3, [r0, #24]
 80109ac:	4619      	mov	r1, r3
 80109ae:	2208      	movs	r2, #8
 80109b0:	305c      	adds	r0, #92	@ 0x5c
 80109b2:	f000 f928 	bl	8010c06 <memset>
 80109b6:	4b0d      	ldr	r3, [pc, #52]	@ (80109ec <std+0x58>)
 80109b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80109ba:	4b0d      	ldr	r3, [pc, #52]	@ (80109f0 <std+0x5c>)
 80109bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80109be:	4b0d      	ldr	r3, [pc, #52]	@ (80109f4 <std+0x60>)
 80109c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80109c2:	4b0d      	ldr	r3, [pc, #52]	@ (80109f8 <std+0x64>)
 80109c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80109c6:	4b0d      	ldr	r3, [pc, #52]	@ (80109fc <std+0x68>)
 80109c8:	6224      	str	r4, [r4, #32]
 80109ca:	429c      	cmp	r4, r3
 80109cc:	d006      	beq.n	80109dc <std+0x48>
 80109ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80109d2:	4294      	cmp	r4, r2
 80109d4:	d002      	beq.n	80109dc <std+0x48>
 80109d6:	33d0      	adds	r3, #208	@ 0xd0
 80109d8:	429c      	cmp	r4, r3
 80109da:	d105      	bne.n	80109e8 <std+0x54>
 80109dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80109e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109e4:	f000 b99c 	b.w	8010d20 <__retarget_lock_init_recursive>
 80109e8:	bd10      	pop	{r4, pc}
 80109ea:	bf00      	nop
 80109ec:	08010b81 	.word	0x08010b81
 80109f0:	08010ba3 	.word	0x08010ba3
 80109f4:	08010bdb 	.word	0x08010bdb
 80109f8:	08010bff 	.word	0x08010bff
 80109fc:	20000bb8 	.word	0x20000bb8

08010a00 <stdio_exit_handler>:
 8010a00:	4a02      	ldr	r2, [pc, #8]	@ (8010a0c <stdio_exit_handler+0xc>)
 8010a02:	4903      	ldr	r1, [pc, #12]	@ (8010a10 <stdio_exit_handler+0x10>)
 8010a04:	4803      	ldr	r0, [pc, #12]	@ (8010a14 <stdio_exit_handler+0x14>)
 8010a06:	f000 b869 	b.w	8010adc <_fwalk_sglue>
 8010a0a:	bf00      	nop
 8010a0c:	20000030 	.word	0x20000030
 8010a10:	080127b5 	.word	0x080127b5
 8010a14:	20000040 	.word	0x20000040

08010a18 <cleanup_stdio>:
 8010a18:	6841      	ldr	r1, [r0, #4]
 8010a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010a4c <cleanup_stdio+0x34>)
 8010a1c:	4299      	cmp	r1, r3
 8010a1e:	b510      	push	{r4, lr}
 8010a20:	4604      	mov	r4, r0
 8010a22:	d001      	beq.n	8010a28 <cleanup_stdio+0x10>
 8010a24:	f001 fec6 	bl	80127b4 <_fflush_r>
 8010a28:	68a1      	ldr	r1, [r4, #8]
 8010a2a:	4b09      	ldr	r3, [pc, #36]	@ (8010a50 <cleanup_stdio+0x38>)
 8010a2c:	4299      	cmp	r1, r3
 8010a2e:	d002      	beq.n	8010a36 <cleanup_stdio+0x1e>
 8010a30:	4620      	mov	r0, r4
 8010a32:	f001 febf 	bl	80127b4 <_fflush_r>
 8010a36:	68e1      	ldr	r1, [r4, #12]
 8010a38:	4b06      	ldr	r3, [pc, #24]	@ (8010a54 <cleanup_stdio+0x3c>)
 8010a3a:	4299      	cmp	r1, r3
 8010a3c:	d004      	beq.n	8010a48 <cleanup_stdio+0x30>
 8010a3e:	4620      	mov	r0, r4
 8010a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a44:	f001 beb6 	b.w	80127b4 <_fflush_r>
 8010a48:	bd10      	pop	{r4, pc}
 8010a4a:	bf00      	nop
 8010a4c:	20000bb8 	.word	0x20000bb8
 8010a50:	20000c20 	.word	0x20000c20
 8010a54:	20000c88 	.word	0x20000c88

08010a58 <global_stdio_init.part.0>:
 8010a58:	b510      	push	{r4, lr}
 8010a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8010a88 <global_stdio_init.part.0+0x30>)
 8010a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8010a8c <global_stdio_init.part.0+0x34>)
 8010a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8010a90 <global_stdio_init.part.0+0x38>)
 8010a60:	601a      	str	r2, [r3, #0]
 8010a62:	4620      	mov	r0, r4
 8010a64:	2200      	movs	r2, #0
 8010a66:	2104      	movs	r1, #4
 8010a68:	f7ff ff94 	bl	8010994 <std>
 8010a6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010a70:	2201      	movs	r2, #1
 8010a72:	2109      	movs	r1, #9
 8010a74:	f7ff ff8e 	bl	8010994 <std>
 8010a78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010a7c:	2202      	movs	r2, #2
 8010a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a82:	2112      	movs	r1, #18
 8010a84:	f7ff bf86 	b.w	8010994 <std>
 8010a88:	20000cf0 	.word	0x20000cf0
 8010a8c:	20000bb8 	.word	0x20000bb8
 8010a90:	08010a01 	.word	0x08010a01

08010a94 <__sfp_lock_acquire>:
 8010a94:	4801      	ldr	r0, [pc, #4]	@ (8010a9c <__sfp_lock_acquire+0x8>)
 8010a96:	f000 b944 	b.w	8010d22 <__retarget_lock_acquire_recursive>
 8010a9a:	bf00      	nop
 8010a9c:	20000cf9 	.word	0x20000cf9

08010aa0 <__sfp_lock_release>:
 8010aa0:	4801      	ldr	r0, [pc, #4]	@ (8010aa8 <__sfp_lock_release+0x8>)
 8010aa2:	f000 b93f 	b.w	8010d24 <__retarget_lock_release_recursive>
 8010aa6:	bf00      	nop
 8010aa8:	20000cf9 	.word	0x20000cf9

08010aac <__sinit>:
 8010aac:	b510      	push	{r4, lr}
 8010aae:	4604      	mov	r4, r0
 8010ab0:	f7ff fff0 	bl	8010a94 <__sfp_lock_acquire>
 8010ab4:	6a23      	ldr	r3, [r4, #32]
 8010ab6:	b11b      	cbz	r3, 8010ac0 <__sinit+0x14>
 8010ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010abc:	f7ff bff0 	b.w	8010aa0 <__sfp_lock_release>
 8010ac0:	4b04      	ldr	r3, [pc, #16]	@ (8010ad4 <__sinit+0x28>)
 8010ac2:	6223      	str	r3, [r4, #32]
 8010ac4:	4b04      	ldr	r3, [pc, #16]	@ (8010ad8 <__sinit+0x2c>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d1f5      	bne.n	8010ab8 <__sinit+0xc>
 8010acc:	f7ff ffc4 	bl	8010a58 <global_stdio_init.part.0>
 8010ad0:	e7f2      	b.n	8010ab8 <__sinit+0xc>
 8010ad2:	bf00      	nop
 8010ad4:	08010a19 	.word	0x08010a19
 8010ad8:	20000cf0 	.word	0x20000cf0

08010adc <_fwalk_sglue>:
 8010adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	4688      	mov	r8, r1
 8010ae4:	4614      	mov	r4, r2
 8010ae6:	2600      	movs	r6, #0
 8010ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010aec:	f1b9 0901 	subs.w	r9, r9, #1
 8010af0:	d505      	bpl.n	8010afe <_fwalk_sglue+0x22>
 8010af2:	6824      	ldr	r4, [r4, #0]
 8010af4:	2c00      	cmp	r4, #0
 8010af6:	d1f7      	bne.n	8010ae8 <_fwalk_sglue+0xc>
 8010af8:	4630      	mov	r0, r6
 8010afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010afe:	89ab      	ldrh	r3, [r5, #12]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d907      	bls.n	8010b14 <_fwalk_sglue+0x38>
 8010b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b08:	3301      	adds	r3, #1
 8010b0a:	d003      	beq.n	8010b14 <_fwalk_sglue+0x38>
 8010b0c:	4629      	mov	r1, r5
 8010b0e:	4638      	mov	r0, r7
 8010b10:	47c0      	blx	r8
 8010b12:	4306      	orrs	r6, r0
 8010b14:	3568      	adds	r5, #104	@ 0x68
 8010b16:	e7e9      	b.n	8010aec <_fwalk_sglue+0x10>

08010b18 <sniprintf>:
 8010b18:	b40c      	push	{r2, r3}
 8010b1a:	b530      	push	{r4, r5, lr}
 8010b1c:	4b17      	ldr	r3, [pc, #92]	@ (8010b7c <sniprintf+0x64>)
 8010b1e:	1e0c      	subs	r4, r1, #0
 8010b20:	681d      	ldr	r5, [r3, #0]
 8010b22:	b09d      	sub	sp, #116	@ 0x74
 8010b24:	da08      	bge.n	8010b38 <sniprintf+0x20>
 8010b26:	238b      	movs	r3, #139	@ 0x8b
 8010b28:	602b      	str	r3, [r5, #0]
 8010b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b2e:	b01d      	add	sp, #116	@ 0x74
 8010b30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b34:	b002      	add	sp, #8
 8010b36:	4770      	bx	lr
 8010b38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010b40:	bf14      	ite	ne
 8010b42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010b46:	4623      	moveq	r3, r4
 8010b48:	9304      	str	r3, [sp, #16]
 8010b4a:	9307      	str	r3, [sp, #28]
 8010b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010b50:	9002      	str	r0, [sp, #8]
 8010b52:	9006      	str	r0, [sp, #24]
 8010b54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010b58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010b5a:	ab21      	add	r3, sp, #132	@ 0x84
 8010b5c:	a902      	add	r1, sp, #8
 8010b5e:	4628      	mov	r0, r5
 8010b60:	9301      	str	r3, [sp, #4]
 8010b62:	f001 fb65 	bl	8012230 <_svfiprintf_r>
 8010b66:	1c43      	adds	r3, r0, #1
 8010b68:	bfbc      	itt	lt
 8010b6a:	238b      	movlt	r3, #139	@ 0x8b
 8010b6c:	602b      	strlt	r3, [r5, #0]
 8010b6e:	2c00      	cmp	r4, #0
 8010b70:	d0dd      	beq.n	8010b2e <sniprintf+0x16>
 8010b72:	9b02      	ldr	r3, [sp, #8]
 8010b74:	2200      	movs	r2, #0
 8010b76:	701a      	strb	r2, [r3, #0]
 8010b78:	e7d9      	b.n	8010b2e <sniprintf+0x16>
 8010b7a:	bf00      	nop
 8010b7c:	2000003c 	.word	0x2000003c

08010b80 <__sread>:
 8010b80:	b510      	push	{r4, lr}
 8010b82:	460c      	mov	r4, r1
 8010b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b88:	f000 f86c 	bl	8010c64 <_read_r>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	bfab      	itete	ge
 8010b90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010b92:	89a3      	ldrhlt	r3, [r4, #12]
 8010b94:	181b      	addge	r3, r3, r0
 8010b96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010b9a:	bfac      	ite	ge
 8010b9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010b9e:	81a3      	strhlt	r3, [r4, #12]
 8010ba0:	bd10      	pop	{r4, pc}

08010ba2 <__swrite>:
 8010ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba6:	461f      	mov	r7, r3
 8010ba8:	898b      	ldrh	r3, [r1, #12]
 8010baa:	05db      	lsls	r3, r3, #23
 8010bac:	4605      	mov	r5, r0
 8010bae:	460c      	mov	r4, r1
 8010bb0:	4616      	mov	r6, r2
 8010bb2:	d505      	bpl.n	8010bc0 <__swrite+0x1e>
 8010bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bb8:	2302      	movs	r3, #2
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f000 f840 	bl	8010c40 <_lseek_r>
 8010bc0:	89a3      	ldrh	r3, [r4, #12]
 8010bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010bca:	81a3      	strh	r3, [r4, #12]
 8010bcc:	4632      	mov	r2, r6
 8010bce:	463b      	mov	r3, r7
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd6:	f000 b867 	b.w	8010ca8 <_write_r>

08010bda <__sseek>:
 8010bda:	b510      	push	{r4, lr}
 8010bdc:	460c      	mov	r4, r1
 8010bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010be2:	f000 f82d 	bl	8010c40 <_lseek_r>
 8010be6:	1c43      	adds	r3, r0, #1
 8010be8:	89a3      	ldrh	r3, [r4, #12]
 8010bea:	bf15      	itete	ne
 8010bec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010bee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010bf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010bf6:	81a3      	strheq	r3, [r4, #12]
 8010bf8:	bf18      	it	ne
 8010bfa:	81a3      	strhne	r3, [r4, #12]
 8010bfc:	bd10      	pop	{r4, pc}

08010bfe <__sclose>:
 8010bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c02:	f000 b80d 	b.w	8010c20 <_close_r>

08010c06 <memset>:
 8010c06:	4402      	add	r2, r0
 8010c08:	4603      	mov	r3, r0
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d100      	bne.n	8010c10 <memset+0xa>
 8010c0e:	4770      	bx	lr
 8010c10:	f803 1b01 	strb.w	r1, [r3], #1
 8010c14:	e7f9      	b.n	8010c0a <memset+0x4>
	...

08010c18 <_localeconv_r>:
 8010c18:	4800      	ldr	r0, [pc, #0]	@ (8010c1c <_localeconv_r+0x4>)
 8010c1a:	4770      	bx	lr
 8010c1c:	2000017c 	.word	0x2000017c

08010c20 <_close_r>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	4d06      	ldr	r5, [pc, #24]	@ (8010c3c <_close_r+0x1c>)
 8010c24:	2300      	movs	r3, #0
 8010c26:	4604      	mov	r4, r0
 8010c28:	4608      	mov	r0, r1
 8010c2a:	602b      	str	r3, [r5, #0]
 8010c2c:	f7f4 f886 	bl	8004d3c <_close>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	d102      	bne.n	8010c3a <_close_r+0x1a>
 8010c34:	682b      	ldr	r3, [r5, #0]
 8010c36:	b103      	cbz	r3, 8010c3a <_close_r+0x1a>
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	bd38      	pop	{r3, r4, r5, pc}
 8010c3c:	20000cf4 	.word	0x20000cf4

08010c40 <_lseek_r>:
 8010c40:	b538      	push	{r3, r4, r5, lr}
 8010c42:	4d07      	ldr	r5, [pc, #28]	@ (8010c60 <_lseek_r+0x20>)
 8010c44:	4604      	mov	r4, r0
 8010c46:	4608      	mov	r0, r1
 8010c48:	4611      	mov	r1, r2
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	602a      	str	r2, [r5, #0]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	f7f4 f89b 	bl	8004d8a <_lseek>
 8010c54:	1c43      	adds	r3, r0, #1
 8010c56:	d102      	bne.n	8010c5e <_lseek_r+0x1e>
 8010c58:	682b      	ldr	r3, [r5, #0]
 8010c5a:	b103      	cbz	r3, 8010c5e <_lseek_r+0x1e>
 8010c5c:	6023      	str	r3, [r4, #0]
 8010c5e:	bd38      	pop	{r3, r4, r5, pc}
 8010c60:	20000cf4 	.word	0x20000cf4

08010c64 <_read_r>:
 8010c64:	b538      	push	{r3, r4, r5, lr}
 8010c66:	4d07      	ldr	r5, [pc, #28]	@ (8010c84 <_read_r+0x20>)
 8010c68:	4604      	mov	r4, r0
 8010c6a:	4608      	mov	r0, r1
 8010c6c:	4611      	mov	r1, r2
 8010c6e:	2200      	movs	r2, #0
 8010c70:	602a      	str	r2, [r5, #0]
 8010c72:	461a      	mov	r2, r3
 8010c74:	f7f4 f829 	bl	8004cca <_read>
 8010c78:	1c43      	adds	r3, r0, #1
 8010c7a:	d102      	bne.n	8010c82 <_read_r+0x1e>
 8010c7c:	682b      	ldr	r3, [r5, #0]
 8010c7e:	b103      	cbz	r3, 8010c82 <_read_r+0x1e>
 8010c80:	6023      	str	r3, [r4, #0]
 8010c82:	bd38      	pop	{r3, r4, r5, pc}
 8010c84:	20000cf4 	.word	0x20000cf4

08010c88 <_sbrk_r>:
 8010c88:	b538      	push	{r3, r4, r5, lr}
 8010c8a:	4d06      	ldr	r5, [pc, #24]	@ (8010ca4 <_sbrk_r+0x1c>)
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	4604      	mov	r4, r0
 8010c90:	4608      	mov	r0, r1
 8010c92:	602b      	str	r3, [r5, #0]
 8010c94:	f7f4 f886 	bl	8004da4 <_sbrk>
 8010c98:	1c43      	adds	r3, r0, #1
 8010c9a:	d102      	bne.n	8010ca2 <_sbrk_r+0x1a>
 8010c9c:	682b      	ldr	r3, [r5, #0]
 8010c9e:	b103      	cbz	r3, 8010ca2 <_sbrk_r+0x1a>
 8010ca0:	6023      	str	r3, [r4, #0]
 8010ca2:	bd38      	pop	{r3, r4, r5, pc}
 8010ca4:	20000cf4 	.word	0x20000cf4

08010ca8 <_write_r>:
 8010ca8:	b538      	push	{r3, r4, r5, lr}
 8010caa:	4d07      	ldr	r5, [pc, #28]	@ (8010cc8 <_write_r+0x20>)
 8010cac:	4604      	mov	r4, r0
 8010cae:	4608      	mov	r0, r1
 8010cb0:	4611      	mov	r1, r2
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	602a      	str	r2, [r5, #0]
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	f7f4 f824 	bl	8004d04 <_write>
 8010cbc:	1c43      	adds	r3, r0, #1
 8010cbe:	d102      	bne.n	8010cc6 <_write_r+0x1e>
 8010cc0:	682b      	ldr	r3, [r5, #0]
 8010cc2:	b103      	cbz	r3, 8010cc6 <_write_r+0x1e>
 8010cc4:	6023      	str	r3, [r4, #0]
 8010cc6:	bd38      	pop	{r3, r4, r5, pc}
 8010cc8:	20000cf4 	.word	0x20000cf4

08010ccc <__errno>:
 8010ccc:	4b01      	ldr	r3, [pc, #4]	@ (8010cd4 <__errno+0x8>)
 8010cce:	6818      	ldr	r0, [r3, #0]
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	2000003c 	.word	0x2000003c

08010cd8 <__libc_init_array>:
 8010cd8:	b570      	push	{r4, r5, r6, lr}
 8010cda:	4d0d      	ldr	r5, [pc, #52]	@ (8010d10 <__libc_init_array+0x38>)
 8010cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8010d14 <__libc_init_array+0x3c>)
 8010cde:	1b64      	subs	r4, r4, r5
 8010ce0:	10a4      	asrs	r4, r4, #2
 8010ce2:	2600      	movs	r6, #0
 8010ce4:	42a6      	cmp	r6, r4
 8010ce6:	d109      	bne.n	8010cfc <__libc_init_array+0x24>
 8010ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8010d18 <__libc_init_array+0x40>)
 8010cea:	4c0c      	ldr	r4, [pc, #48]	@ (8010d1c <__libc_init_array+0x44>)
 8010cec:	f001 ffa2 	bl	8012c34 <_init>
 8010cf0:	1b64      	subs	r4, r4, r5
 8010cf2:	10a4      	asrs	r4, r4, #2
 8010cf4:	2600      	movs	r6, #0
 8010cf6:	42a6      	cmp	r6, r4
 8010cf8:	d105      	bne.n	8010d06 <__libc_init_array+0x2e>
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
 8010cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d00:	4798      	blx	r3
 8010d02:	3601      	adds	r6, #1
 8010d04:	e7ee      	b.n	8010ce4 <__libc_init_array+0xc>
 8010d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d0a:	4798      	blx	r3
 8010d0c:	3601      	adds	r6, #1
 8010d0e:	e7f2      	b.n	8010cf6 <__libc_init_array+0x1e>
 8010d10:	08018528 	.word	0x08018528
 8010d14:	08018528 	.word	0x08018528
 8010d18:	08018528 	.word	0x08018528
 8010d1c:	0801852c 	.word	0x0801852c

08010d20 <__retarget_lock_init_recursive>:
 8010d20:	4770      	bx	lr

08010d22 <__retarget_lock_acquire_recursive>:
 8010d22:	4770      	bx	lr

08010d24 <__retarget_lock_release_recursive>:
 8010d24:	4770      	bx	lr

08010d26 <memcpy>:
 8010d26:	440a      	add	r2, r1
 8010d28:	4291      	cmp	r1, r2
 8010d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d2e:	d100      	bne.n	8010d32 <memcpy+0xc>
 8010d30:	4770      	bx	lr
 8010d32:	b510      	push	{r4, lr}
 8010d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d3c:	4291      	cmp	r1, r2
 8010d3e:	d1f9      	bne.n	8010d34 <memcpy+0xe>
 8010d40:	bd10      	pop	{r4, pc}

08010d42 <quorem>:
 8010d42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d46:	6903      	ldr	r3, [r0, #16]
 8010d48:	690c      	ldr	r4, [r1, #16]
 8010d4a:	42a3      	cmp	r3, r4
 8010d4c:	4607      	mov	r7, r0
 8010d4e:	db7e      	blt.n	8010e4e <quorem+0x10c>
 8010d50:	3c01      	subs	r4, #1
 8010d52:	f101 0814 	add.w	r8, r1, #20
 8010d56:	00a3      	lsls	r3, r4, #2
 8010d58:	f100 0514 	add.w	r5, r0, #20
 8010d5c:	9300      	str	r3, [sp, #0]
 8010d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d62:	9301      	str	r3, [sp, #4]
 8010d64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8010d78:	d32e      	bcc.n	8010dd8 <quorem+0x96>
 8010d7a:	f04f 0a00 	mov.w	sl, #0
 8010d7e:	46c4      	mov	ip, r8
 8010d80:	46ae      	mov	lr, r5
 8010d82:	46d3      	mov	fp, sl
 8010d84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010d88:	b298      	uxth	r0, r3
 8010d8a:	fb06 a000 	mla	r0, r6, r0, sl
 8010d8e:	0c02      	lsrs	r2, r0, #16
 8010d90:	0c1b      	lsrs	r3, r3, #16
 8010d92:	fb06 2303 	mla	r3, r6, r3, r2
 8010d96:	f8de 2000 	ldr.w	r2, [lr]
 8010d9a:	b280      	uxth	r0, r0
 8010d9c:	b292      	uxth	r2, r2
 8010d9e:	1a12      	subs	r2, r2, r0
 8010da0:	445a      	add	r2, fp
 8010da2:	f8de 0000 	ldr.w	r0, [lr]
 8010da6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010db0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010db4:	b292      	uxth	r2, r2
 8010db6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010dba:	45e1      	cmp	r9, ip
 8010dbc:	f84e 2b04 	str.w	r2, [lr], #4
 8010dc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010dc4:	d2de      	bcs.n	8010d84 <quorem+0x42>
 8010dc6:	9b00      	ldr	r3, [sp, #0]
 8010dc8:	58eb      	ldr	r3, [r5, r3]
 8010dca:	b92b      	cbnz	r3, 8010dd8 <quorem+0x96>
 8010dcc:	9b01      	ldr	r3, [sp, #4]
 8010dce:	3b04      	subs	r3, #4
 8010dd0:	429d      	cmp	r5, r3
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	d32f      	bcc.n	8010e36 <quorem+0xf4>
 8010dd6:	613c      	str	r4, [r7, #16]
 8010dd8:	4638      	mov	r0, r7
 8010dda:	f001 f8c5 	bl	8011f68 <__mcmp>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	db25      	blt.n	8010e2e <quorem+0xec>
 8010de2:	4629      	mov	r1, r5
 8010de4:	2000      	movs	r0, #0
 8010de6:	f858 2b04 	ldr.w	r2, [r8], #4
 8010dea:	f8d1 c000 	ldr.w	ip, [r1]
 8010dee:	fa1f fe82 	uxth.w	lr, r2
 8010df2:	fa1f f38c 	uxth.w	r3, ip
 8010df6:	eba3 030e 	sub.w	r3, r3, lr
 8010dfa:	4403      	add	r3, r0
 8010dfc:	0c12      	lsrs	r2, r2, #16
 8010dfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010e02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e0c:	45c1      	cmp	r9, r8
 8010e0e:	f841 3b04 	str.w	r3, [r1], #4
 8010e12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010e16:	d2e6      	bcs.n	8010de6 <quorem+0xa4>
 8010e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e20:	b922      	cbnz	r2, 8010e2c <quorem+0xea>
 8010e22:	3b04      	subs	r3, #4
 8010e24:	429d      	cmp	r5, r3
 8010e26:	461a      	mov	r2, r3
 8010e28:	d30b      	bcc.n	8010e42 <quorem+0x100>
 8010e2a:	613c      	str	r4, [r7, #16]
 8010e2c:	3601      	adds	r6, #1
 8010e2e:	4630      	mov	r0, r6
 8010e30:	b003      	add	sp, #12
 8010e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e36:	6812      	ldr	r2, [r2, #0]
 8010e38:	3b04      	subs	r3, #4
 8010e3a:	2a00      	cmp	r2, #0
 8010e3c:	d1cb      	bne.n	8010dd6 <quorem+0x94>
 8010e3e:	3c01      	subs	r4, #1
 8010e40:	e7c6      	b.n	8010dd0 <quorem+0x8e>
 8010e42:	6812      	ldr	r2, [r2, #0]
 8010e44:	3b04      	subs	r3, #4
 8010e46:	2a00      	cmp	r2, #0
 8010e48:	d1ef      	bne.n	8010e2a <quorem+0xe8>
 8010e4a:	3c01      	subs	r4, #1
 8010e4c:	e7ea      	b.n	8010e24 <quorem+0xe2>
 8010e4e:	2000      	movs	r0, #0
 8010e50:	e7ee      	b.n	8010e30 <quorem+0xee>
 8010e52:	0000      	movs	r0, r0
 8010e54:	0000      	movs	r0, r0
	...

08010e58 <_dtoa_r>:
 8010e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5c:	69c7      	ldr	r7, [r0, #28]
 8010e5e:	b099      	sub	sp, #100	@ 0x64
 8010e60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010e64:	ec55 4b10 	vmov	r4, r5, d0
 8010e68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010e6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8010e6c:	4683      	mov	fp, r0
 8010e6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010e72:	b97f      	cbnz	r7, 8010e94 <_dtoa_r+0x3c>
 8010e74:	2010      	movs	r0, #16
 8010e76:	f7ff f87f 	bl	800ff78 <malloc>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010e80:	b920      	cbnz	r0, 8010e8c <_dtoa_r+0x34>
 8010e82:	4ba7      	ldr	r3, [pc, #668]	@ (8011120 <_dtoa_r+0x2c8>)
 8010e84:	21ef      	movs	r1, #239	@ 0xef
 8010e86:	48a7      	ldr	r0, [pc, #668]	@ (8011124 <_dtoa_r+0x2cc>)
 8010e88:	f001 fd6a 	bl	8012960 <__assert_func>
 8010e8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e90:	6007      	str	r7, [r0, #0]
 8010e92:	60c7      	str	r7, [r0, #12]
 8010e94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e98:	6819      	ldr	r1, [r3, #0]
 8010e9a:	b159      	cbz	r1, 8010eb4 <_dtoa_r+0x5c>
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	604a      	str	r2, [r1, #4]
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	4093      	lsls	r3, r2
 8010ea4:	608b      	str	r3, [r1, #8]
 8010ea6:	4658      	mov	r0, fp
 8010ea8:	f000 fe24 	bl	8011af4 <_Bfree>
 8010eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	601a      	str	r2, [r3, #0]
 8010eb4:	1e2b      	subs	r3, r5, #0
 8010eb6:	bfb9      	ittee	lt
 8010eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010ebc:	9303      	strlt	r3, [sp, #12]
 8010ebe:	2300      	movge	r3, #0
 8010ec0:	6033      	strge	r3, [r6, #0]
 8010ec2:	9f03      	ldr	r7, [sp, #12]
 8010ec4:	4b98      	ldr	r3, [pc, #608]	@ (8011128 <_dtoa_r+0x2d0>)
 8010ec6:	bfbc      	itt	lt
 8010ec8:	2201      	movlt	r2, #1
 8010eca:	6032      	strlt	r2, [r6, #0]
 8010ecc:	43bb      	bics	r3, r7
 8010ece:	d112      	bne.n	8010ef6 <_dtoa_r+0x9e>
 8010ed0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010ed2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010edc:	4323      	orrs	r3, r4
 8010ede:	f000 854d 	beq.w	801197c <_dtoa_r+0xb24>
 8010ee2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ee4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801113c <_dtoa_r+0x2e4>
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f000 854f 	beq.w	801198c <_dtoa_r+0xb34>
 8010eee:	f10a 0303 	add.w	r3, sl, #3
 8010ef2:	f000 bd49 	b.w	8011988 <_dtoa_r+0xb30>
 8010ef6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010efa:	2200      	movs	r2, #0
 8010efc:	ec51 0b17 	vmov	r0, r1, d7
 8010f00:	2300      	movs	r3, #0
 8010f02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010f06:	f7ef fdf7 	bl	8000af8 <__aeabi_dcmpeq>
 8010f0a:	4680      	mov	r8, r0
 8010f0c:	b158      	cbz	r0, 8010f26 <_dtoa_r+0xce>
 8010f0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010f10:	2301      	movs	r3, #1
 8010f12:	6013      	str	r3, [r2, #0]
 8010f14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f16:	b113      	cbz	r3, 8010f1e <_dtoa_r+0xc6>
 8010f18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010f1a:	4b84      	ldr	r3, [pc, #528]	@ (801112c <_dtoa_r+0x2d4>)
 8010f1c:	6013      	str	r3, [r2, #0]
 8010f1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011140 <_dtoa_r+0x2e8>
 8010f22:	f000 bd33 	b.w	801198c <_dtoa_r+0xb34>
 8010f26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010f2a:	aa16      	add	r2, sp, #88	@ 0x58
 8010f2c:	a917      	add	r1, sp, #92	@ 0x5c
 8010f2e:	4658      	mov	r0, fp
 8010f30:	f001 f8ca 	bl	80120c8 <__d2b>
 8010f34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010f38:	4681      	mov	r9, r0
 8010f3a:	2e00      	cmp	r6, #0
 8010f3c:	d077      	beq.n	801102e <_dtoa_r+0x1d6>
 8010f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010f50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010f54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010f58:	4619      	mov	r1, r3
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	4b74      	ldr	r3, [pc, #464]	@ (8011130 <_dtoa_r+0x2d8>)
 8010f5e:	f7ef f9ab 	bl	80002b8 <__aeabi_dsub>
 8010f62:	a369      	add	r3, pc, #420	@ (adr r3, 8011108 <_dtoa_r+0x2b0>)
 8010f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f68:	f7ef fb5e 	bl	8000628 <__aeabi_dmul>
 8010f6c:	a368      	add	r3, pc, #416	@ (adr r3, 8011110 <_dtoa_r+0x2b8>)
 8010f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f72:	f7ef f9a3 	bl	80002bc <__adddf3>
 8010f76:	4604      	mov	r4, r0
 8010f78:	4630      	mov	r0, r6
 8010f7a:	460d      	mov	r5, r1
 8010f7c:	f7ef faea 	bl	8000554 <__aeabi_i2d>
 8010f80:	a365      	add	r3, pc, #404	@ (adr r3, 8011118 <_dtoa_r+0x2c0>)
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	f7ef fb4f 	bl	8000628 <__aeabi_dmul>
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	4620      	mov	r0, r4
 8010f90:	4629      	mov	r1, r5
 8010f92:	f7ef f993 	bl	80002bc <__adddf3>
 8010f96:	4604      	mov	r4, r0
 8010f98:	460d      	mov	r5, r1
 8010f9a:	f7ef fdf5 	bl	8000b88 <__aeabi_d2iz>
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	4607      	mov	r7, r0
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	4629      	mov	r1, r5
 8010fa8:	f7ef fdb0 	bl	8000b0c <__aeabi_dcmplt>
 8010fac:	b140      	cbz	r0, 8010fc0 <_dtoa_r+0x168>
 8010fae:	4638      	mov	r0, r7
 8010fb0:	f7ef fad0 	bl	8000554 <__aeabi_i2d>
 8010fb4:	4622      	mov	r2, r4
 8010fb6:	462b      	mov	r3, r5
 8010fb8:	f7ef fd9e 	bl	8000af8 <__aeabi_dcmpeq>
 8010fbc:	b900      	cbnz	r0, 8010fc0 <_dtoa_r+0x168>
 8010fbe:	3f01      	subs	r7, #1
 8010fc0:	2f16      	cmp	r7, #22
 8010fc2:	d851      	bhi.n	8011068 <_dtoa_r+0x210>
 8010fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8011134 <_dtoa_r+0x2dc>)
 8010fc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010fd2:	f7ef fd9b 	bl	8000b0c <__aeabi_dcmplt>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d048      	beq.n	801106c <_dtoa_r+0x214>
 8010fda:	3f01      	subs	r7, #1
 8010fdc:	2300      	movs	r3, #0
 8010fde:	9312      	str	r3, [sp, #72]	@ 0x48
 8010fe0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010fe2:	1b9b      	subs	r3, r3, r6
 8010fe4:	1e5a      	subs	r2, r3, #1
 8010fe6:	bf44      	itt	mi
 8010fe8:	f1c3 0801 	rsbmi	r8, r3, #1
 8010fec:	2300      	movmi	r3, #0
 8010fee:	9208      	str	r2, [sp, #32]
 8010ff0:	bf54      	ite	pl
 8010ff2:	f04f 0800 	movpl.w	r8, #0
 8010ff6:	9308      	strmi	r3, [sp, #32]
 8010ff8:	2f00      	cmp	r7, #0
 8010ffa:	db39      	blt.n	8011070 <_dtoa_r+0x218>
 8010ffc:	9b08      	ldr	r3, [sp, #32]
 8010ffe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011000:	443b      	add	r3, r7
 8011002:	9308      	str	r3, [sp, #32]
 8011004:	2300      	movs	r3, #0
 8011006:	930a      	str	r3, [sp, #40]	@ 0x28
 8011008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801100a:	2b09      	cmp	r3, #9
 801100c:	d864      	bhi.n	80110d8 <_dtoa_r+0x280>
 801100e:	2b05      	cmp	r3, #5
 8011010:	bfc4      	itt	gt
 8011012:	3b04      	subgt	r3, #4
 8011014:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011018:	f1a3 0302 	sub.w	r3, r3, #2
 801101c:	bfcc      	ite	gt
 801101e:	2400      	movgt	r4, #0
 8011020:	2401      	movle	r4, #1
 8011022:	2b03      	cmp	r3, #3
 8011024:	d863      	bhi.n	80110ee <_dtoa_r+0x296>
 8011026:	e8df f003 	tbb	[pc, r3]
 801102a:	372a      	.short	0x372a
 801102c:	5535      	.short	0x5535
 801102e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011032:	441e      	add	r6, r3
 8011034:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011038:	2b20      	cmp	r3, #32
 801103a:	bfc1      	itttt	gt
 801103c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011040:	409f      	lslgt	r7, r3
 8011042:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011046:	fa24 f303 	lsrgt.w	r3, r4, r3
 801104a:	bfd6      	itet	le
 801104c:	f1c3 0320 	rsble	r3, r3, #32
 8011050:	ea47 0003 	orrgt.w	r0, r7, r3
 8011054:	fa04 f003 	lslle.w	r0, r4, r3
 8011058:	f7ef fa6c 	bl	8000534 <__aeabi_ui2d>
 801105c:	2201      	movs	r2, #1
 801105e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011062:	3e01      	subs	r6, #1
 8011064:	9214      	str	r2, [sp, #80]	@ 0x50
 8011066:	e777      	b.n	8010f58 <_dtoa_r+0x100>
 8011068:	2301      	movs	r3, #1
 801106a:	e7b8      	b.n	8010fde <_dtoa_r+0x186>
 801106c:	9012      	str	r0, [sp, #72]	@ 0x48
 801106e:	e7b7      	b.n	8010fe0 <_dtoa_r+0x188>
 8011070:	427b      	negs	r3, r7
 8011072:	930a      	str	r3, [sp, #40]	@ 0x28
 8011074:	2300      	movs	r3, #0
 8011076:	eba8 0807 	sub.w	r8, r8, r7
 801107a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801107c:	e7c4      	b.n	8011008 <_dtoa_r+0x1b0>
 801107e:	2300      	movs	r3, #0
 8011080:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011084:	2b00      	cmp	r3, #0
 8011086:	dc35      	bgt.n	80110f4 <_dtoa_r+0x29c>
 8011088:	2301      	movs	r3, #1
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	9307      	str	r3, [sp, #28]
 801108e:	461a      	mov	r2, r3
 8011090:	920e      	str	r2, [sp, #56]	@ 0x38
 8011092:	e00b      	b.n	80110ac <_dtoa_r+0x254>
 8011094:	2301      	movs	r3, #1
 8011096:	e7f3      	b.n	8011080 <_dtoa_r+0x228>
 8011098:	2300      	movs	r3, #0
 801109a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801109c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801109e:	18fb      	adds	r3, r7, r3
 80110a0:	9300      	str	r3, [sp, #0]
 80110a2:	3301      	adds	r3, #1
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	9307      	str	r3, [sp, #28]
 80110a8:	bfb8      	it	lt
 80110aa:	2301      	movlt	r3, #1
 80110ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80110b0:	2100      	movs	r1, #0
 80110b2:	2204      	movs	r2, #4
 80110b4:	f102 0514 	add.w	r5, r2, #20
 80110b8:	429d      	cmp	r5, r3
 80110ba:	d91f      	bls.n	80110fc <_dtoa_r+0x2a4>
 80110bc:	6041      	str	r1, [r0, #4]
 80110be:	4658      	mov	r0, fp
 80110c0:	f000 fcd8 	bl	8011a74 <_Balloc>
 80110c4:	4682      	mov	sl, r0
 80110c6:	2800      	cmp	r0, #0
 80110c8:	d13c      	bne.n	8011144 <_dtoa_r+0x2ec>
 80110ca:	4b1b      	ldr	r3, [pc, #108]	@ (8011138 <_dtoa_r+0x2e0>)
 80110cc:	4602      	mov	r2, r0
 80110ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80110d2:	e6d8      	b.n	8010e86 <_dtoa_r+0x2e>
 80110d4:	2301      	movs	r3, #1
 80110d6:	e7e0      	b.n	801109a <_dtoa_r+0x242>
 80110d8:	2401      	movs	r4, #1
 80110da:	2300      	movs	r3, #0
 80110dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80110de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80110e0:	f04f 33ff 	mov.w	r3, #4294967295
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	9307      	str	r3, [sp, #28]
 80110e8:	2200      	movs	r2, #0
 80110ea:	2312      	movs	r3, #18
 80110ec:	e7d0      	b.n	8011090 <_dtoa_r+0x238>
 80110ee:	2301      	movs	r3, #1
 80110f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110f2:	e7f5      	b.n	80110e0 <_dtoa_r+0x288>
 80110f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110f6:	9300      	str	r3, [sp, #0]
 80110f8:	9307      	str	r3, [sp, #28]
 80110fa:	e7d7      	b.n	80110ac <_dtoa_r+0x254>
 80110fc:	3101      	adds	r1, #1
 80110fe:	0052      	lsls	r2, r2, #1
 8011100:	e7d8      	b.n	80110b4 <_dtoa_r+0x25c>
 8011102:	bf00      	nop
 8011104:	f3af 8000 	nop.w
 8011108:	636f4361 	.word	0x636f4361
 801110c:	3fd287a7 	.word	0x3fd287a7
 8011110:	8b60c8b3 	.word	0x8b60c8b3
 8011114:	3fc68a28 	.word	0x3fc68a28
 8011118:	509f79fb 	.word	0x509f79fb
 801111c:	3fd34413 	.word	0x3fd34413
 8011120:	080181f1 	.word	0x080181f1
 8011124:	08018208 	.word	0x08018208
 8011128:	7ff00000 	.word	0x7ff00000
 801112c:	080181c1 	.word	0x080181c1
 8011130:	3ff80000 	.word	0x3ff80000
 8011134:	08018300 	.word	0x08018300
 8011138:	08018260 	.word	0x08018260
 801113c:	080181ed 	.word	0x080181ed
 8011140:	080181c0 	.word	0x080181c0
 8011144:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011148:	6018      	str	r0, [r3, #0]
 801114a:	9b07      	ldr	r3, [sp, #28]
 801114c:	2b0e      	cmp	r3, #14
 801114e:	f200 80a4 	bhi.w	801129a <_dtoa_r+0x442>
 8011152:	2c00      	cmp	r4, #0
 8011154:	f000 80a1 	beq.w	801129a <_dtoa_r+0x442>
 8011158:	2f00      	cmp	r7, #0
 801115a:	dd33      	ble.n	80111c4 <_dtoa_r+0x36c>
 801115c:	4bad      	ldr	r3, [pc, #692]	@ (8011414 <_dtoa_r+0x5bc>)
 801115e:	f007 020f 	and.w	r2, r7, #15
 8011162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011166:	ed93 7b00 	vldr	d7, [r3]
 801116a:	05f8      	lsls	r0, r7, #23
 801116c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011170:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011174:	d516      	bpl.n	80111a4 <_dtoa_r+0x34c>
 8011176:	4ba8      	ldr	r3, [pc, #672]	@ (8011418 <_dtoa_r+0x5c0>)
 8011178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801117c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011180:	f7ef fb7c 	bl	800087c <__aeabi_ddiv>
 8011184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011188:	f004 040f 	and.w	r4, r4, #15
 801118c:	2603      	movs	r6, #3
 801118e:	4da2      	ldr	r5, [pc, #648]	@ (8011418 <_dtoa_r+0x5c0>)
 8011190:	b954      	cbnz	r4, 80111a8 <_dtoa_r+0x350>
 8011192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801119a:	f7ef fb6f 	bl	800087c <__aeabi_ddiv>
 801119e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111a2:	e028      	b.n	80111f6 <_dtoa_r+0x39e>
 80111a4:	2602      	movs	r6, #2
 80111a6:	e7f2      	b.n	801118e <_dtoa_r+0x336>
 80111a8:	07e1      	lsls	r1, r4, #31
 80111aa:	d508      	bpl.n	80111be <_dtoa_r+0x366>
 80111ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111b4:	f7ef fa38 	bl	8000628 <__aeabi_dmul>
 80111b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111bc:	3601      	adds	r6, #1
 80111be:	1064      	asrs	r4, r4, #1
 80111c0:	3508      	adds	r5, #8
 80111c2:	e7e5      	b.n	8011190 <_dtoa_r+0x338>
 80111c4:	f000 80d2 	beq.w	801136c <_dtoa_r+0x514>
 80111c8:	427c      	negs	r4, r7
 80111ca:	4b92      	ldr	r3, [pc, #584]	@ (8011414 <_dtoa_r+0x5bc>)
 80111cc:	4d92      	ldr	r5, [pc, #584]	@ (8011418 <_dtoa_r+0x5c0>)
 80111ce:	f004 020f 	and.w	r2, r4, #15
 80111d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111de:	f7ef fa23 	bl	8000628 <__aeabi_dmul>
 80111e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111e6:	1124      	asrs	r4, r4, #4
 80111e8:	2300      	movs	r3, #0
 80111ea:	2602      	movs	r6, #2
 80111ec:	2c00      	cmp	r4, #0
 80111ee:	f040 80b2 	bne.w	8011356 <_dtoa_r+0x4fe>
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d1d3      	bne.n	801119e <_dtoa_r+0x346>
 80111f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80111f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	f000 80b7 	beq.w	8011370 <_dtoa_r+0x518>
 8011202:	4b86      	ldr	r3, [pc, #536]	@ (801141c <_dtoa_r+0x5c4>)
 8011204:	2200      	movs	r2, #0
 8011206:	4620      	mov	r0, r4
 8011208:	4629      	mov	r1, r5
 801120a:	f7ef fc7f 	bl	8000b0c <__aeabi_dcmplt>
 801120e:	2800      	cmp	r0, #0
 8011210:	f000 80ae 	beq.w	8011370 <_dtoa_r+0x518>
 8011214:	9b07      	ldr	r3, [sp, #28]
 8011216:	2b00      	cmp	r3, #0
 8011218:	f000 80aa 	beq.w	8011370 <_dtoa_r+0x518>
 801121c:	9b00      	ldr	r3, [sp, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	dd37      	ble.n	8011292 <_dtoa_r+0x43a>
 8011222:	1e7b      	subs	r3, r7, #1
 8011224:	9304      	str	r3, [sp, #16]
 8011226:	4620      	mov	r0, r4
 8011228:	4b7d      	ldr	r3, [pc, #500]	@ (8011420 <_dtoa_r+0x5c8>)
 801122a:	2200      	movs	r2, #0
 801122c:	4629      	mov	r1, r5
 801122e:	f7ef f9fb 	bl	8000628 <__aeabi_dmul>
 8011232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011236:	9c00      	ldr	r4, [sp, #0]
 8011238:	3601      	adds	r6, #1
 801123a:	4630      	mov	r0, r6
 801123c:	f7ef f98a 	bl	8000554 <__aeabi_i2d>
 8011240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011244:	f7ef f9f0 	bl	8000628 <__aeabi_dmul>
 8011248:	4b76      	ldr	r3, [pc, #472]	@ (8011424 <_dtoa_r+0x5cc>)
 801124a:	2200      	movs	r2, #0
 801124c:	f7ef f836 	bl	80002bc <__adddf3>
 8011250:	4605      	mov	r5, r0
 8011252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011256:	2c00      	cmp	r4, #0
 8011258:	f040 808d 	bne.w	8011376 <_dtoa_r+0x51e>
 801125c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011260:	4b71      	ldr	r3, [pc, #452]	@ (8011428 <_dtoa_r+0x5d0>)
 8011262:	2200      	movs	r2, #0
 8011264:	f7ef f828 	bl	80002b8 <__aeabi_dsub>
 8011268:	4602      	mov	r2, r0
 801126a:	460b      	mov	r3, r1
 801126c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011270:	462a      	mov	r2, r5
 8011272:	4633      	mov	r3, r6
 8011274:	f7ef fc68 	bl	8000b48 <__aeabi_dcmpgt>
 8011278:	2800      	cmp	r0, #0
 801127a:	f040 828b 	bne.w	8011794 <_dtoa_r+0x93c>
 801127e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011282:	462a      	mov	r2, r5
 8011284:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011288:	f7ef fc40 	bl	8000b0c <__aeabi_dcmplt>
 801128c:	2800      	cmp	r0, #0
 801128e:	f040 8128 	bne.w	80114e2 <_dtoa_r+0x68a>
 8011292:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011296:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801129a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801129c:	2b00      	cmp	r3, #0
 801129e:	f2c0 815a 	blt.w	8011556 <_dtoa_r+0x6fe>
 80112a2:	2f0e      	cmp	r7, #14
 80112a4:	f300 8157 	bgt.w	8011556 <_dtoa_r+0x6fe>
 80112a8:	4b5a      	ldr	r3, [pc, #360]	@ (8011414 <_dtoa_r+0x5bc>)
 80112aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80112ae:	ed93 7b00 	vldr	d7, [r3]
 80112b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	ed8d 7b00 	vstr	d7, [sp]
 80112ba:	da03      	bge.n	80112c4 <_dtoa_r+0x46c>
 80112bc:	9b07      	ldr	r3, [sp, #28]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f340 8101 	ble.w	80114c6 <_dtoa_r+0x66e>
 80112c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80112c8:	4656      	mov	r6, sl
 80112ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112ce:	4620      	mov	r0, r4
 80112d0:	4629      	mov	r1, r5
 80112d2:	f7ef fad3 	bl	800087c <__aeabi_ddiv>
 80112d6:	f7ef fc57 	bl	8000b88 <__aeabi_d2iz>
 80112da:	4680      	mov	r8, r0
 80112dc:	f7ef f93a 	bl	8000554 <__aeabi_i2d>
 80112e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112e4:	f7ef f9a0 	bl	8000628 <__aeabi_dmul>
 80112e8:	4602      	mov	r2, r0
 80112ea:	460b      	mov	r3, r1
 80112ec:	4620      	mov	r0, r4
 80112ee:	4629      	mov	r1, r5
 80112f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80112f4:	f7ee ffe0 	bl	80002b8 <__aeabi_dsub>
 80112f8:	f806 4b01 	strb.w	r4, [r6], #1
 80112fc:	9d07      	ldr	r5, [sp, #28]
 80112fe:	eba6 040a 	sub.w	r4, r6, sl
 8011302:	42a5      	cmp	r5, r4
 8011304:	4602      	mov	r2, r0
 8011306:	460b      	mov	r3, r1
 8011308:	f040 8117 	bne.w	801153a <_dtoa_r+0x6e2>
 801130c:	f7ee ffd6 	bl	80002bc <__adddf3>
 8011310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011314:	4604      	mov	r4, r0
 8011316:	460d      	mov	r5, r1
 8011318:	f7ef fc16 	bl	8000b48 <__aeabi_dcmpgt>
 801131c:	2800      	cmp	r0, #0
 801131e:	f040 80f9 	bne.w	8011514 <_dtoa_r+0x6bc>
 8011322:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011326:	4620      	mov	r0, r4
 8011328:	4629      	mov	r1, r5
 801132a:	f7ef fbe5 	bl	8000af8 <__aeabi_dcmpeq>
 801132e:	b118      	cbz	r0, 8011338 <_dtoa_r+0x4e0>
 8011330:	f018 0f01 	tst.w	r8, #1
 8011334:	f040 80ee 	bne.w	8011514 <_dtoa_r+0x6bc>
 8011338:	4649      	mov	r1, r9
 801133a:	4658      	mov	r0, fp
 801133c:	f000 fbda 	bl	8011af4 <_Bfree>
 8011340:	2300      	movs	r3, #0
 8011342:	7033      	strb	r3, [r6, #0]
 8011344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011346:	3701      	adds	r7, #1
 8011348:	601f      	str	r7, [r3, #0]
 801134a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801134c:	2b00      	cmp	r3, #0
 801134e:	f000 831d 	beq.w	801198c <_dtoa_r+0xb34>
 8011352:	601e      	str	r6, [r3, #0]
 8011354:	e31a      	b.n	801198c <_dtoa_r+0xb34>
 8011356:	07e2      	lsls	r2, r4, #31
 8011358:	d505      	bpl.n	8011366 <_dtoa_r+0x50e>
 801135a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801135e:	f7ef f963 	bl	8000628 <__aeabi_dmul>
 8011362:	3601      	adds	r6, #1
 8011364:	2301      	movs	r3, #1
 8011366:	1064      	asrs	r4, r4, #1
 8011368:	3508      	adds	r5, #8
 801136a:	e73f      	b.n	80111ec <_dtoa_r+0x394>
 801136c:	2602      	movs	r6, #2
 801136e:	e742      	b.n	80111f6 <_dtoa_r+0x39e>
 8011370:	9c07      	ldr	r4, [sp, #28]
 8011372:	9704      	str	r7, [sp, #16]
 8011374:	e761      	b.n	801123a <_dtoa_r+0x3e2>
 8011376:	4b27      	ldr	r3, [pc, #156]	@ (8011414 <_dtoa_r+0x5bc>)
 8011378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801137a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801137e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011382:	4454      	add	r4, sl
 8011384:	2900      	cmp	r1, #0
 8011386:	d053      	beq.n	8011430 <_dtoa_r+0x5d8>
 8011388:	4928      	ldr	r1, [pc, #160]	@ (801142c <_dtoa_r+0x5d4>)
 801138a:	2000      	movs	r0, #0
 801138c:	f7ef fa76 	bl	800087c <__aeabi_ddiv>
 8011390:	4633      	mov	r3, r6
 8011392:	462a      	mov	r2, r5
 8011394:	f7ee ff90 	bl	80002b8 <__aeabi_dsub>
 8011398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801139c:	4656      	mov	r6, sl
 801139e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113a2:	f7ef fbf1 	bl	8000b88 <__aeabi_d2iz>
 80113a6:	4605      	mov	r5, r0
 80113a8:	f7ef f8d4 	bl	8000554 <__aeabi_i2d>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113b4:	f7ee ff80 	bl	80002b8 <__aeabi_dsub>
 80113b8:	3530      	adds	r5, #48	@ 0x30
 80113ba:	4602      	mov	r2, r0
 80113bc:	460b      	mov	r3, r1
 80113be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113c2:	f806 5b01 	strb.w	r5, [r6], #1
 80113c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113ca:	f7ef fb9f 	bl	8000b0c <__aeabi_dcmplt>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d171      	bne.n	80114b6 <_dtoa_r+0x65e>
 80113d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113d6:	4911      	ldr	r1, [pc, #68]	@ (801141c <_dtoa_r+0x5c4>)
 80113d8:	2000      	movs	r0, #0
 80113da:	f7ee ff6d 	bl	80002b8 <__aeabi_dsub>
 80113de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113e2:	f7ef fb93 	bl	8000b0c <__aeabi_dcmplt>
 80113e6:	2800      	cmp	r0, #0
 80113e8:	f040 8095 	bne.w	8011516 <_dtoa_r+0x6be>
 80113ec:	42a6      	cmp	r6, r4
 80113ee:	f43f af50 	beq.w	8011292 <_dtoa_r+0x43a>
 80113f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80113f6:	4b0a      	ldr	r3, [pc, #40]	@ (8011420 <_dtoa_r+0x5c8>)
 80113f8:	2200      	movs	r2, #0
 80113fa:	f7ef f915 	bl	8000628 <__aeabi_dmul>
 80113fe:	4b08      	ldr	r3, [pc, #32]	@ (8011420 <_dtoa_r+0x5c8>)
 8011400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011404:	2200      	movs	r2, #0
 8011406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801140a:	f7ef f90d 	bl	8000628 <__aeabi_dmul>
 801140e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011412:	e7c4      	b.n	801139e <_dtoa_r+0x546>
 8011414:	08018300 	.word	0x08018300
 8011418:	080182d8 	.word	0x080182d8
 801141c:	3ff00000 	.word	0x3ff00000
 8011420:	40240000 	.word	0x40240000
 8011424:	401c0000 	.word	0x401c0000
 8011428:	40140000 	.word	0x40140000
 801142c:	3fe00000 	.word	0x3fe00000
 8011430:	4631      	mov	r1, r6
 8011432:	4628      	mov	r0, r5
 8011434:	f7ef f8f8 	bl	8000628 <__aeabi_dmul>
 8011438:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801143c:	9415      	str	r4, [sp, #84]	@ 0x54
 801143e:	4656      	mov	r6, sl
 8011440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011444:	f7ef fba0 	bl	8000b88 <__aeabi_d2iz>
 8011448:	4605      	mov	r5, r0
 801144a:	f7ef f883 	bl	8000554 <__aeabi_i2d>
 801144e:	4602      	mov	r2, r0
 8011450:	460b      	mov	r3, r1
 8011452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011456:	f7ee ff2f 	bl	80002b8 <__aeabi_dsub>
 801145a:	3530      	adds	r5, #48	@ 0x30
 801145c:	f806 5b01 	strb.w	r5, [r6], #1
 8011460:	4602      	mov	r2, r0
 8011462:	460b      	mov	r3, r1
 8011464:	42a6      	cmp	r6, r4
 8011466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801146a:	f04f 0200 	mov.w	r2, #0
 801146e:	d124      	bne.n	80114ba <_dtoa_r+0x662>
 8011470:	4bac      	ldr	r3, [pc, #688]	@ (8011724 <_dtoa_r+0x8cc>)
 8011472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011476:	f7ee ff21 	bl	80002bc <__adddf3>
 801147a:	4602      	mov	r2, r0
 801147c:	460b      	mov	r3, r1
 801147e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011482:	f7ef fb61 	bl	8000b48 <__aeabi_dcmpgt>
 8011486:	2800      	cmp	r0, #0
 8011488:	d145      	bne.n	8011516 <_dtoa_r+0x6be>
 801148a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801148e:	49a5      	ldr	r1, [pc, #660]	@ (8011724 <_dtoa_r+0x8cc>)
 8011490:	2000      	movs	r0, #0
 8011492:	f7ee ff11 	bl	80002b8 <__aeabi_dsub>
 8011496:	4602      	mov	r2, r0
 8011498:	460b      	mov	r3, r1
 801149a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801149e:	f7ef fb35 	bl	8000b0c <__aeabi_dcmplt>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	f43f aef5 	beq.w	8011292 <_dtoa_r+0x43a>
 80114a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80114aa:	1e73      	subs	r3, r6, #1
 80114ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80114ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80114b2:	2b30      	cmp	r3, #48	@ 0x30
 80114b4:	d0f8      	beq.n	80114a8 <_dtoa_r+0x650>
 80114b6:	9f04      	ldr	r7, [sp, #16]
 80114b8:	e73e      	b.n	8011338 <_dtoa_r+0x4e0>
 80114ba:	4b9b      	ldr	r3, [pc, #620]	@ (8011728 <_dtoa_r+0x8d0>)
 80114bc:	f7ef f8b4 	bl	8000628 <__aeabi_dmul>
 80114c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114c4:	e7bc      	b.n	8011440 <_dtoa_r+0x5e8>
 80114c6:	d10c      	bne.n	80114e2 <_dtoa_r+0x68a>
 80114c8:	4b98      	ldr	r3, [pc, #608]	@ (801172c <_dtoa_r+0x8d4>)
 80114ca:	2200      	movs	r2, #0
 80114cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114d0:	f7ef f8aa 	bl	8000628 <__aeabi_dmul>
 80114d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114d8:	f7ef fb2c 	bl	8000b34 <__aeabi_dcmpge>
 80114dc:	2800      	cmp	r0, #0
 80114de:	f000 8157 	beq.w	8011790 <_dtoa_r+0x938>
 80114e2:	2400      	movs	r4, #0
 80114e4:	4625      	mov	r5, r4
 80114e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114e8:	43db      	mvns	r3, r3
 80114ea:	9304      	str	r3, [sp, #16]
 80114ec:	4656      	mov	r6, sl
 80114ee:	2700      	movs	r7, #0
 80114f0:	4621      	mov	r1, r4
 80114f2:	4658      	mov	r0, fp
 80114f4:	f000 fafe 	bl	8011af4 <_Bfree>
 80114f8:	2d00      	cmp	r5, #0
 80114fa:	d0dc      	beq.n	80114b6 <_dtoa_r+0x65e>
 80114fc:	b12f      	cbz	r7, 801150a <_dtoa_r+0x6b2>
 80114fe:	42af      	cmp	r7, r5
 8011500:	d003      	beq.n	801150a <_dtoa_r+0x6b2>
 8011502:	4639      	mov	r1, r7
 8011504:	4658      	mov	r0, fp
 8011506:	f000 faf5 	bl	8011af4 <_Bfree>
 801150a:	4629      	mov	r1, r5
 801150c:	4658      	mov	r0, fp
 801150e:	f000 faf1 	bl	8011af4 <_Bfree>
 8011512:	e7d0      	b.n	80114b6 <_dtoa_r+0x65e>
 8011514:	9704      	str	r7, [sp, #16]
 8011516:	4633      	mov	r3, r6
 8011518:	461e      	mov	r6, r3
 801151a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801151e:	2a39      	cmp	r2, #57	@ 0x39
 8011520:	d107      	bne.n	8011532 <_dtoa_r+0x6da>
 8011522:	459a      	cmp	sl, r3
 8011524:	d1f8      	bne.n	8011518 <_dtoa_r+0x6c0>
 8011526:	9a04      	ldr	r2, [sp, #16]
 8011528:	3201      	adds	r2, #1
 801152a:	9204      	str	r2, [sp, #16]
 801152c:	2230      	movs	r2, #48	@ 0x30
 801152e:	f88a 2000 	strb.w	r2, [sl]
 8011532:	781a      	ldrb	r2, [r3, #0]
 8011534:	3201      	adds	r2, #1
 8011536:	701a      	strb	r2, [r3, #0]
 8011538:	e7bd      	b.n	80114b6 <_dtoa_r+0x65e>
 801153a:	4b7b      	ldr	r3, [pc, #492]	@ (8011728 <_dtoa_r+0x8d0>)
 801153c:	2200      	movs	r2, #0
 801153e:	f7ef f873 	bl	8000628 <__aeabi_dmul>
 8011542:	2200      	movs	r2, #0
 8011544:	2300      	movs	r3, #0
 8011546:	4604      	mov	r4, r0
 8011548:	460d      	mov	r5, r1
 801154a:	f7ef fad5 	bl	8000af8 <__aeabi_dcmpeq>
 801154e:	2800      	cmp	r0, #0
 8011550:	f43f aebb 	beq.w	80112ca <_dtoa_r+0x472>
 8011554:	e6f0      	b.n	8011338 <_dtoa_r+0x4e0>
 8011556:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011558:	2a00      	cmp	r2, #0
 801155a:	f000 80db 	beq.w	8011714 <_dtoa_r+0x8bc>
 801155e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011560:	2a01      	cmp	r2, #1
 8011562:	f300 80bf 	bgt.w	80116e4 <_dtoa_r+0x88c>
 8011566:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011568:	2a00      	cmp	r2, #0
 801156a:	f000 80b7 	beq.w	80116dc <_dtoa_r+0x884>
 801156e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011572:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011574:	4646      	mov	r6, r8
 8011576:	9a08      	ldr	r2, [sp, #32]
 8011578:	2101      	movs	r1, #1
 801157a:	441a      	add	r2, r3
 801157c:	4658      	mov	r0, fp
 801157e:	4498      	add	r8, r3
 8011580:	9208      	str	r2, [sp, #32]
 8011582:	f000 fb6b 	bl	8011c5c <__i2b>
 8011586:	4605      	mov	r5, r0
 8011588:	b15e      	cbz	r6, 80115a2 <_dtoa_r+0x74a>
 801158a:	9b08      	ldr	r3, [sp, #32]
 801158c:	2b00      	cmp	r3, #0
 801158e:	dd08      	ble.n	80115a2 <_dtoa_r+0x74a>
 8011590:	42b3      	cmp	r3, r6
 8011592:	9a08      	ldr	r2, [sp, #32]
 8011594:	bfa8      	it	ge
 8011596:	4633      	movge	r3, r6
 8011598:	eba8 0803 	sub.w	r8, r8, r3
 801159c:	1af6      	subs	r6, r6, r3
 801159e:	1ad3      	subs	r3, r2, r3
 80115a0:	9308      	str	r3, [sp, #32]
 80115a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115a4:	b1f3      	cbz	r3, 80115e4 <_dtoa_r+0x78c>
 80115a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 80b7 	beq.w	801171c <_dtoa_r+0x8c4>
 80115ae:	b18c      	cbz	r4, 80115d4 <_dtoa_r+0x77c>
 80115b0:	4629      	mov	r1, r5
 80115b2:	4622      	mov	r2, r4
 80115b4:	4658      	mov	r0, fp
 80115b6:	f000 fc11 	bl	8011ddc <__pow5mult>
 80115ba:	464a      	mov	r2, r9
 80115bc:	4601      	mov	r1, r0
 80115be:	4605      	mov	r5, r0
 80115c0:	4658      	mov	r0, fp
 80115c2:	f000 fb61 	bl	8011c88 <__multiply>
 80115c6:	4649      	mov	r1, r9
 80115c8:	9004      	str	r0, [sp, #16]
 80115ca:	4658      	mov	r0, fp
 80115cc:	f000 fa92 	bl	8011af4 <_Bfree>
 80115d0:	9b04      	ldr	r3, [sp, #16]
 80115d2:	4699      	mov	r9, r3
 80115d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115d6:	1b1a      	subs	r2, r3, r4
 80115d8:	d004      	beq.n	80115e4 <_dtoa_r+0x78c>
 80115da:	4649      	mov	r1, r9
 80115dc:	4658      	mov	r0, fp
 80115de:	f000 fbfd 	bl	8011ddc <__pow5mult>
 80115e2:	4681      	mov	r9, r0
 80115e4:	2101      	movs	r1, #1
 80115e6:	4658      	mov	r0, fp
 80115e8:	f000 fb38 	bl	8011c5c <__i2b>
 80115ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115ee:	4604      	mov	r4, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 81cf 	beq.w	8011994 <_dtoa_r+0xb3c>
 80115f6:	461a      	mov	r2, r3
 80115f8:	4601      	mov	r1, r0
 80115fa:	4658      	mov	r0, fp
 80115fc:	f000 fbee 	bl	8011ddc <__pow5mult>
 8011600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011602:	2b01      	cmp	r3, #1
 8011604:	4604      	mov	r4, r0
 8011606:	f300 8095 	bgt.w	8011734 <_dtoa_r+0x8dc>
 801160a:	9b02      	ldr	r3, [sp, #8]
 801160c:	2b00      	cmp	r3, #0
 801160e:	f040 8087 	bne.w	8011720 <_dtoa_r+0x8c8>
 8011612:	9b03      	ldr	r3, [sp, #12]
 8011614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011618:	2b00      	cmp	r3, #0
 801161a:	f040 8089 	bne.w	8011730 <_dtoa_r+0x8d8>
 801161e:	9b03      	ldr	r3, [sp, #12]
 8011620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011624:	0d1b      	lsrs	r3, r3, #20
 8011626:	051b      	lsls	r3, r3, #20
 8011628:	b12b      	cbz	r3, 8011636 <_dtoa_r+0x7de>
 801162a:	9b08      	ldr	r3, [sp, #32]
 801162c:	3301      	adds	r3, #1
 801162e:	9308      	str	r3, [sp, #32]
 8011630:	f108 0801 	add.w	r8, r8, #1
 8011634:	2301      	movs	r3, #1
 8011636:	930a      	str	r3, [sp, #40]	@ 0x28
 8011638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801163a:	2b00      	cmp	r3, #0
 801163c:	f000 81b0 	beq.w	80119a0 <_dtoa_r+0xb48>
 8011640:	6923      	ldr	r3, [r4, #16]
 8011642:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011646:	6918      	ldr	r0, [r3, #16]
 8011648:	f000 fabc 	bl	8011bc4 <__hi0bits>
 801164c:	f1c0 0020 	rsb	r0, r0, #32
 8011650:	9b08      	ldr	r3, [sp, #32]
 8011652:	4418      	add	r0, r3
 8011654:	f010 001f 	ands.w	r0, r0, #31
 8011658:	d077      	beq.n	801174a <_dtoa_r+0x8f2>
 801165a:	f1c0 0320 	rsb	r3, r0, #32
 801165e:	2b04      	cmp	r3, #4
 8011660:	dd6b      	ble.n	801173a <_dtoa_r+0x8e2>
 8011662:	9b08      	ldr	r3, [sp, #32]
 8011664:	f1c0 001c 	rsb	r0, r0, #28
 8011668:	4403      	add	r3, r0
 801166a:	4480      	add	r8, r0
 801166c:	4406      	add	r6, r0
 801166e:	9308      	str	r3, [sp, #32]
 8011670:	f1b8 0f00 	cmp.w	r8, #0
 8011674:	dd05      	ble.n	8011682 <_dtoa_r+0x82a>
 8011676:	4649      	mov	r1, r9
 8011678:	4642      	mov	r2, r8
 801167a:	4658      	mov	r0, fp
 801167c:	f000 fc08 	bl	8011e90 <__lshift>
 8011680:	4681      	mov	r9, r0
 8011682:	9b08      	ldr	r3, [sp, #32]
 8011684:	2b00      	cmp	r3, #0
 8011686:	dd05      	ble.n	8011694 <_dtoa_r+0x83c>
 8011688:	4621      	mov	r1, r4
 801168a:	461a      	mov	r2, r3
 801168c:	4658      	mov	r0, fp
 801168e:	f000 fbff 	bl	8011e90 <__lshift>
 8011692:	4604      	mov	r4, r0
 8011694:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011696:	2b00      	cmp	r3, #0
 8011698:	d059      	beq.n	801174e <_dtoa_r+0x8f6>
 801169a:	4621      	mov	r1, r4
 801169c:	4648      	mov	r0, r9
 801169e:	f000 fc63 	bl	8011f68 <__mcmp>
 80116a2:	2800      	cmp	r0, #0
 80116a4:	da53      	bge.n	801174e <_dtoa_r+0x8f6>
 80116a6:	1e7b      	subs	r3, r7, #1
 80116a8:	9304      	str	r3, [sp, #16]
 80116aa:	4649      	mov	r1, r9
 80116ac:	2300      	movs	r3, #0
 80116ae:	220a      	movs	r2, #10
 80116b0:	4658      	mov	r0, fp
 80116b2:	f000 fa41 	bl	8011b38 <__multadd>
 80116b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116b8:	4681      	mov	r9, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f000 8172 	beq.w	80119a4 <_dtoa_r+0xb4c>
 80116c0:	2300      	movs	r3, #0
 80116c2:	4629      	mov	r1, r5
 80116c4:	220a      	movs	r2, #10
 80116c6:	4658      	mov	r0, fp
 80116c8:	f000 fa36 	bl	8011b38 <__multadd>
 80116cc:	9b00      	ldr	r3, [sp, #0]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	4605      	mov	r5, r0
 80116d2:	dc67      	bgt.n	80117a4 <_dtoa_r+0x94c>
 80116d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116d6:	2b02      	cmp	r3, #2
 80116d8:	dc41      	bgt.n	801175e <_dtoa_r+0x906>
 80116da:	e063      	b.n	80117a4 <_dtoa_r+0x94c>
 80116dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80116de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80116e2:	e746      	b.n	8011572 <_dtoa_r+0x71a>
 80116e4:	9b07      	ldr	r3, [sp, #28]
 80116e6:	1e5c      	subs	r4, r3, #1
 80116e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116ea:	42a3      	cmp	r3, r4
 80116ec:	bfbf      	itttt	lt
 80116ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80116f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80116f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80116f4:	1ae3      	sublt	r3, r4, r3
 80116f6:	bfb4      	ite	lt
 80116f8:	18d2      	addlt	r2, r2, r3
 80116fa:	1b1c      	subge	r4, r3, r4
 80116fc:	9b07      	ldr	r3, [sp, #28]
 80116fe:	bfbc      	itt	lt
 8011700:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011702:	2400      	movlt	r4, #0
 8011704:	2b00      	cmp	r3, #0
 8011706:	bfb5      	itete	lt
 8011708:	eba8 0603 	sublt.w	r6, r8, r3
 801170c:	9b07      	ldrge	r3, [sp, #28]
 801170e:	2300      	movlt	r3, #0
 8011710:	4646      	movge	r6, r8
 8011712:	e730      	b.n	8011576 <_dtoa_r+0x71e>
 8011714:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011716:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011718:	4646      	mov	r6, r8
 801171a:	e735      	b.n	8011588 <_dtoa_r+0x730>
 801171c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801171e:	e75c      	b.n	80115da <_dtoa_r+0x782>
 8011720:	2300      	movs	r3, #0
 8011722:	e788      	b.n	8011636 <_dtoa_r+0x7de>
 8011724:	3fe00000 	.word	0x3fe00000
 8011728:	40240000 	.word	0x40240000
 801172c:	40140000 	.word	0x40140000
 8011730:	9b02      	ldr	r3, [sp, #8]
 8011732:	e780      	b.n	8011636 <_dtoa_r+0x7de>
 8011734:	2300      	movs	r3, #0
 8011736:	930a      	str	r3, [sp, #40]	@ 0x28
 8011738:	e782      	b.n	8011640 <_dtoa_r+0x7e8>
 801173a:	d099      	beq.n	8011670 <_dtoa_r+0x818>
 801173c:	9a08      	ldr	r2, [sp, #32]
 801173e:	331c      	adds	r3, #28
 8011740:	441a      	add	r2, r3
 8011742:	4498      	add	r8, r3
 8011744:	441e      	add	r6, r3
 8011746:	9208      	str	r2, [sp, #32]
 8011748:	e792      	b.n	8011670 <_dtoa_r+0x818>
 801174a:	4603      	mov	r3, r0
 801174c:	e7f6      	b.n	801173c <_dtoa_r+0x8e4>
 801174e:	9b07      	ldr	r3, [sp, #28]
 8011750:	9704      	str	r7, [sp, #16]
 8011752:	2b00      	cmp	r3, #0
 8011754:	dc20      	bgt.n	8011798 <_dtoa_r+0x940>
 8011756:	9300      	str	r3, [sp, #0]
 8011758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801175a:	2b02      	cmp	r3, #2
 801175c:	dd1e      	ble.n	801179c <_dtoa_r+0x944>
 801175e:	9b00      	ldr	r3, [sp, #0]
 8011760:	2b00      	cmp	r3, #0
 8011762:	f47f aec0 	bne.w	80114e6 <_dtoa_r+0x68e>
 8011766:	4621      	mov	r1, r4
 8011768:	2205      	movs	r2, #5
 801176a:	4658      	mov	r0, fp
 801176c:	f000 f9e4 	bl	8011b38 <__multadd>
 8011770:	4601      	mov	r1, r0
 8011772:	4604      	mov	r4, r0
 8011774:	4648      	mov	r0, r9
 8011776:	f000 fbf7 	bl	8011f68 <__mcmp>
 801177a:	2800      	cmp	r0, #0
 801177c:	f77f aeb3 	ble.w	80114e6 <_dtoa_r+0x68e>
 8011780:	4656      	mov	r6, sl
 8011782:	2331      	movs	r3, #49	@ 0x31
 8011784:	f806 3b01 	strb.w	r3, [r6], #1
 8011788:	9b04      	ldr	r3, [sp, #16]
 801178a:	3301      	adds	r3, #1
 801178c:	9304      	str	r3, [sp, #16]
 801178e:	e6ae      	b.n	80114ee <_dtoa_r+0x696>
 8011790:	9c07      	ldr	r4, [sp, #28]
 8011792:	9704      	str	r7, [sp, #16]
 8011794:	4625      	mov	r5, r4
 8011796:	e7f3      	b.n	8011780 <_dtoa_r+0x928>
 8011798:	9b07      	ldr	r3, [sp, #28]
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f000 8104 	beq.w	80119ac <_dtoa_r+0xb54>
 80117a4:	2e00      	cmp	r6, #0
 80117a6:	dd05      	ble.n	80117b4 <_dtoa_r+0x95c>
 80117a8:	4629      	mov	r1, r5
 80117aa:	4632      	mov	r2, r6
 80117ac:	4658      	mov	r0, fp
 80117ae:	f000 fb6f 	bl	8011e90 <__lshift>
 80117b2:	4605      	mov	r5, r0
 80117b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d05a      	beq.n	8011870 <_dtoa_r+0xa18>
 80117ba:	6869      	ldr	r1, [r5, #4]
 80117bc:	4658      	mov	r0, fp
 80117be:	f000 f959 	bl	8011a74 <_Balloc>
 80117c2:	4606      	mov	r6, r0
 80117c4:	b928      	cbnz	r0, 80117d2 <_dtoa_r+0x97a>
 80117c6:	4b84      	ldr	r3, [pc, #528]	@ (80119d8 <_dtoa_r+0xb80>)
 80117c8:	4602      	mov	r2, r0
 80117ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80117ce:	f7ff bb5a 	b.w	8010e86 <_dtoa_r+0x2e>
 80117d2:	692a      	ldr	r2, [r5, #16]
 80117d4:	3202      	adds	r2, #2
 80117d6:	0092      	lsls	r2, r2, #2
 80117d8:	f105 010c 	add.w	r1, r5, #12
 80117dc:	300c      	adds	r0, #12
 80117de:	f7ff faa2 	bl	8010d26 <memcpy>
 80117e2:	2201      	movs	r2, #1
 80117e4:	4631      	mov	r1, r6
 80117e6:	4658      	mov	r0, fp
 80117e8:	f000 fb52 	bl	8011e90 <__lshift>
 80117ec:	f10a 0301 	add.w	r3, sl, #1
 80117f0:	9307      	str	r3, [sp, #28]
 80117f2:	9b00      	ldr	r3, [sp, #0]
 80117f4:	4453      	add	r3, sl
 80117f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117f8:	9b02      	ldr	r3, [sp, #8]
 80117fa:	f003 0301 	and.w	r3, r3, #1
 80117fe:	462f      	mov	r7, r5
 8011800:	930a      	str	r3, [sp, #40]	@ 0x28
 8011802:	4605      	mov	r5, r0
 8011804:	9b07      	ldr	r3, [sp, #28]
 8011806:	4621      	mov	r1, r4
 8011808:	3b01      	subs	r3, #1
 801180a:	4648      	mov	r0, r9
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	f7ff fa98 	bl	8010d42 <quorem>
 8011812:	4639      	mov	r1, r7
 8011814:	9002      	str	r0, [sp, #8]
 8011816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801181a:	4648      	mov	r0, r9
 801181c:	f000 fba4 	bl	8011f68 <__mcmp>
 8011820:	462a      	mov	r2, r5
 8011822:	9008      	str	r0, [sp, #32]
 8011824:	4621      	mov	r1, r4
 8011826:	4658      	mov	r0, fp
 8011828:	f000 fbba 	bl	8011fa0 <__mdiff>
 801182c:	68c2      	ldr	r2, [r0, #12]
 801182e:	4606      	mov	r6, r0
 8011830:	bb02      	cbnz	r2, 8011874 <_dtoa_r+0xa1c>
 8011832:	4601      	mov	r1, r0
 8011834:	4648      	mov	r0, r9
 8011836:	f000 fb97 	bl	8011f68 <__mcmp>
 801183a:	4602      	mov	r2, r0
 801183c:	4631      	mov	r1, r6
 801183e:	4658      	mov	r0, fp
 8011840:	920e      	str	r2, [sp, #56]	@ 0x38
 8011842:	f000 f957 	bl	8011af4 <_Bfree>
 8011846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011848:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801184a:	9e07      	ldr	r6, [sp, #28]
 801184c:	ea43 0102 	orr.w	r1, r3, r2
 8011850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011852:	4319      	orrs	r1, r3
 8011854:	d110      	bne.n	8011878 <_dtoa_r+0xa20>
 8011856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801185a:	d029      	beq.n	80118b0 <_dtoa_r+0xa58>
 801185c:	9b08      	ldr	r3, [sp, #32]
 801185e:	2b00      	cmp	r3, #0
 8011860:	dd02      	ble.n	8011868 <_dtoa_r+0xa10>
 8011862:	9b02      	ldr	r3, [sp, #8]
 8011864:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011868:	9b00      	ldr	r3, [sp, #0]
 801186a:	f883 8000 	strb.w	r8, [r3]
 801186e:	e63f      	b.n	80114f0 <_dtoa_r+0x698>
 8011870:	4628      	mov	r0, r5
 8011872:	e7bb      	b.n	80117ec <_dtoa_r+0x994>
 8011874:	2201      	movs	r2, #1
 8011876:	e7e1      	b.n	801183c <_dtoa_r+0x9e4>
 8011878:	9b08      	ldr	r3, [sp, #32]
 801187a:	2b00      	cmp	r3, #0
 801187c:	db04      	blt.n	8011888 <_dtoa_r+0xa30>
 801187e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011880:	430b      	orrs	r3, r1
 8011882:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011884:	430b      	orrs	r3, r1
 8011886:	d120      	bne.n	80118ca <_dtoa_r+0xa72>
 8011888:	2a00      	cmp	r2, #0
 801188a:	dded      	ble.n	8011868 <_dtoa_r+0xa10>
 801188c:	4649      	mov	r1, r9
 801188e:	2201      	movs	r2, #1
 8011890:	4658      	mov	r0, fp
 8011892:	f000 fafd 	bl	8011e90 <__lshift>
 8011896:	4621      	mov	r1, r4
 8011898:	4681      	mov	r9, r0
 801189a:	f000 fb65 	bl	8011f68 <__mcmp>
 801189e:	2800      	cmp	r0, #0
 80118a0:	dc03      	bgt.n	80118aa <_dtoa_r+0xa52>
 80118a2:	d1e1      	bne.n	8011868 <_dtoa_r+0xa10>
 80118a4:	f018 0f01 	tst.w	r8, #1
 80118a8:	d0de      	beq.n	8011868 <_dtoa_r+0xa10>
 80118aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118ae:	d1d8      	bne.n	8011862 <_dtoa_r+0xa0a>
 80118b0:	9a00      	ldr	r2, [sp, #0]
 80118b2:	2339      	movs	r3, #57	@ 0x39
 80118b4:	7013      	strb	r3, [r2, #0]
 80118b6:	4633      	mov	r3, r6
 80118b8:	461e      	mov	r6, r3
 80118ba:	3b01      	subs	r3, #1
 80118bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80118c0:	2a39      	cmp	r2, #57	@ 0x39
 80118c2:	d052      	beq.n	801196a <_dtoa_r+0xb12>
 80118c4:	3201      	adds	r2, #1
 80118c6:	701a      	strb	r2, [r3, #0]
 80118c8:	e612      	b.n	80114f0 <_dtoa_r+0x698>
 80118ca:	2a00      	cmp	r2, #0
 80118cc:	dd07      	ble.n	80118de <_dtoa_r+0xa86>
 80118ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118d2:	d0ed      	beq.n	80118b0 <_dtoa_r+0xa58>
 80118d4:	9a00      	ldr	r2, [sp, #0]
 80118d6:	f108 0301 	add.w	r3, r8, #1
 80118da:	7013      	strb	r3, [r2, #0]
 80118dc:	e608      	b.n	80114f0 <_dtoa_r+0x698>
 80118de:	9b07      	ldr	r3, [sp, #28]
 80118e0:	9a07      	ldr	r2, [sp, #28]
 80118e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80118e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d028      	beq.n	801193e <_dtoa_r+0xae6>
 80118ec:	4649      	mov	r1, r9
 80118ee:	2300      	movs	r3, #0
 80118f0:	220a      	movs	r2, #10
 80118f2:	4658      	mov	r0, fp
 80118f4:	f000 f920 	bl	8011b38 <__multadd>
 80118f8:	42af      	cmp	r7, r5
 80118fa:	4681      	mov	r9, r0
 80118fc:	f04f 0300 	mov.w	r3, #0
 8011900:	f04f 020a 	mov.w	r2, #10
 8011904:	4639      	mov	r1, r7
 8011906:	4658      	mov	r0, fp
 8011908:	d107      	bne.n	801191a <_dtoa_r+0xac2>
 801190a:	f000 f915 	bl	8011b38 <__multadd>
 801190e:	4607      	mov	r7, r0
 8011910:	4605      	mov	r5, r0
 8011912:	9b07      	ldr	r3, [sp, #28]
 8011914:	3301      	adds	r3, #1
 8011916:	9307      	str	r3, [sp, #28]
 8011918:	e774      	b.n	8011804 <_dtoa_r+0x9ac>
 801191a:	f000 f90d 	bl	8011b38 <__multadd>
 801191e:	4629      	mov	r1, r5
 8011920:	4607      	mov	r7, r0
 8011922:	2300      	movs	r3, #0
 8011924:	220a      	movs	r2, #10
 8011926:	4658      	mov	r0, fp
 8011928:	f000 f906 	bl	8011b38 <__multadd>
 801192c:	4605      	mov	r5, r0
 801192e:	e7f0      	b.n	8011912 <_dtoa_r+0xaba>
 8011930:	9b00      	ldr	r3, [sp, #0]
 8011932:	2b00      	cmp	r3, #0
 8011934:	bfcc      	ite	gt
 8011936:	461e      	movgt	r6, r3
 8011938:	2601      	movle	r6, #1
 801193a:	4456      	add	r6, sl
 801193c:	2700      	movs	r7, #0
 801193e:	4649      	mov	r1, r9
 8011940:	2201      	movs	r2, #1
 8011942:	4658      	mov	r0, fp
 8011944:	f000 faa4 	bl	8011e90 <__lshift>
 8011948:	4621      	mov	r1, r4
 801194a:	4681      	mov	r9, r0
 801194c:	f000 fb0c 	bl	8011f68 <__mcmp>
 8011950:	2800      	cmp	r0, #0
 8011952:	dcb0      	bgt.n	80118b6 <_dtoa_r+0xa5e>
 8011954:	d102      	bne.n	801195c <_dtoa_r+0xb04>
 8011956:	f018 0f01 	tst.w	r8, #1
 801195a:	d1ac      	bne.n	80118b6 <_dtoa_r+0xa5e>
 801195c:	4633      	mov	r3, r6
 801195e:	461e      	mov	r6, r3
 8011960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011964:	2a30      	cmp	r2, #48	@ 0x30
 8011966:	d0fa      	beq.n	801195e <_dtoa_r+0xb06>
 8011968:	e5c2      	b.n	80114f0 <_dtoa_r+0x698>
 801196a:	459a      	cmp	sl, r3
 801196c:	d1a4      	bne.n	80118b8 <_dtoa_r+0xa60>
 801196e:	9b04      	ldr	r3, [sp, #16]
 8011970:	3301      	adds	r3, #1
 8011972:	9304      	str	r3, [sp, #16]
 8011974:	2331      	movs	r3, #49	@ 0x31
 8011976:	f88a 3000 	strb.w	r3, [sl]
 801197a:	e5b9      	b.n	80114f0 <_dtoa_r+0x698>
 801197c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801197e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80119dc <_dtoa_r+0xb84>
 8011982:	b11b      	cbz	r3, 801198c <_dtoa_r+0xb34>
 8011984:	f10a 0308 	add.w	r3, sl, #8
 8011988:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801198a:	6013      	str	r3, [r2, #0]
 801198c:	4650      	mov	r0, sl
 801198e:	b019      	add	sp, #100	@ 0x64
 8011990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011996:	2b01      	cmp	r3, #1
 8011998:	f77f ae37 	ble.w	801160a <_dtoa_r+0x7b2>
 801199c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801199e:	930a      	str	r3, [sp, #40]	@ 0x28
 80119a0:	2001      	movs	r0, #1
 80119a2:	e655      	b.n	8011650 <_dtoa_r+0x7f8>
 80119a4:	9b00      	ldr	r3, [sp, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	f77f aed6 	ble.w	8011758 <_dtoa_r+0x900>
 80119ac:	4656      	mov	r6, sl
 80119ae:	4621      	mov	r1, r4
 80119b0:	4648      	mov	r0, r9
 80119b2:	f7ff f9c6 	bl	8010d42 <quorem>
 80119b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80119ba:	f806 8b01 	strb.w	r8, [r6], #1
 80119be:	9b00      	ldr	r3, [sp, #0]
 80119c0:	eba6 020a 	sub.w	r2, r6, sl
 80119c4:	4293      	cmp	r3, r2
 80119c6:	ddb3      	ble.n	8011930 <_dtoa_r+0xad8>
 80119c8:	4649      	mov	r1, r9
 80119ca:	2300      	movs	r3, #0
 80119cc:	220a      	movs	r2, #10
 80119ce:	4658      	mov	r0, fp
 80119d0:	f000 f8b2 	bl	8011b38 <__multadd>
 80119d4:	4681      	mov	r9, r0
 80119d6:	e7ea      	b.n	80119ae <_dtoa_r+0xb56>
 80119d8:	08018260 	.word	0x08018260
 80119dc:	080181e4 	.word	0x080181e4

080119e0 <_free_r>:
 80119e0:	b538      	push	{r3, r4, r5, lr}
 80119e2:	4605      	mov	r5, r0
 80119e4:	2900      	cmp	r1, #0
 80119e6:	d041      	beq.n	8011a6c <_free_r+0x8c>
 80119e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119ec:	1f0c      	subs	r4, r1, #4
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	bfb8      	it	lt
 80119f2:	18e4      	addlt	r4, r4, r3
 80119f4:	f7fe fb6a 	bl	80100cc <__malloc_lock>
 80119f8:	4a1d      	ldr	r2, [pc, #116]	@ (8011a70 <_free_r+0x90>)
 80119fa:	6813      	ldr	r3, [r2, #0]
 80119fc:	b933      	cbnz	r3, 8011a0c <_free_r+0x2c>
 80119fe:	6063      	str	r3, [r4, #4]
 8011a00:	6014      	str	r4, [r2, #0]
 8011a02:	4628      	mov	r0, r5
 8011a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a08:	f7fe bb66 	b.w	80100d8 <__malloc_unlock>
 8011a0c:	42a3      	cmp	r3, r4
 8011a0e:	d908      	bls.n	8011a22 <_free_r+0x42>
 8011a10:	6820      	ldr	r0, [r4, #0]
 8011a12:	1821      	adds	r1, r4, r0
 8011a14:	428b      	cmp	r3, r1
 8011a16:	bf01      	itttt	eq
 8011a18:	6819      	ldreq	r1, [r3, #0]
 8011a1a:	685b      	ldreq	r3, [r3, #4]
 8011a1c:	1809      	addeq	r1, r1, r0
 8011a1e:	6021      	streq	r1, [r4, #0]
 8011a20:	e7ed      	b.n	80119fe <_free_r+0x1e>
 8011a22:	461a      	mov	r2, r3
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	b10b      	cbz	r3, 8011a2c <_free_r+0x4c>
 8011a28:	42a3      	cmp	r3, r4
 8011a2a:	d9fa      	bls.n	8011a22 <_free_r+0x42>
 8011a2c:	6811      	ldr	r1, [r2, #0]
 8011a2e:	1850      	adds	r0, r2, r1
 8011a30:	42a0      	cmp	r0, r4
 8011a32:	d10b      	bne.n	8011a4c <_free_r+0x6c>
 8011a34:	6820      	ldr	r0, [r4, #0]
 8011a36:	4401      	add	r1, r0
 8011a38:	1850      	adds	r0, r2, r1
 8011a3a:	4283      	cmp	r3, r0
 8011a3c:	6011      	str	r1, [r2, #0]
 8011a3e:	d1e0      	bne.n	8011a02 <_free_r+0x22>
 8011a40:	6818      	ldr	r0, [r3, #0]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	6053      	str	r3, [r2, #4]
 8011a46:	4408      	add	r0, r1
 8011a48:	6010      	str	r0, [r2, #0]
 8011a4a:	e7da      	b.n	8011a02 <_free_r+0x22>
 8011a4c:	d902      	bls.n	8011a54 <_free_r+0x74>
 8011a4e:	230c      	movs	r3, #12
 8011a50:	602b      	str	r3, [r5, #0]
 8011a52:	e7d6      	b.n	8011a02 <_free_r+0x22>
 8011a54:	6820      	ldr	r0, [r4, #0]
 8011a56:	1821      	adds	r1, r4, r0
 8011a58:	428b      	cmp	r3, r1
 8011a5a:	bf04      	itt	eq
 8011a5c:	6819      	ldreq	r1, [r3, #0]
 8011a5e:	685b      	ldreq	r3, [r3, #4]
 8011a60:	6063      	str	r3, [r4, #4]
 8011a62:	bf04      	itt	eq
 8011a64:	1809      	addeq	r1, r1, r0
 8011a66:	6021      	streq	r1, [r4, #0]
 8011a68:	6054      	str	r4, [r2, #4]
 8011a6a:	e7ca      	b.n	8011a02 <_free_r+0x22>
 8011a6c:	bd38      	pop	{r3, r4, r5, pc}
 8011a6e:	bf00      	nop
 8011a70:	20000bb4 	.word	0x20000bb4

08011a74 <_Balloc>:
 8011a74:	b570      	push	{r4, r5, r6, lr}
 8011a76:	69c6      	ldr	r6, [r0, #28]
 8011a78:	4604      	mov	r4, r0
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	b976      	cbnz	r6, 8011a9c <_Balloc+0x28>
 8011a7e:	2010      	movs	r0, #16
 8011a80:	f7fe fa7a 	bl	800ff78 <malloc>
 8011a84:	4602      	mov	r2, r0
 8011a86:	61e0      	str	r0, [r4, #28]
 8011a88:	b920      	cbnz	r0, 8011a94 <_Balloc+0x20>
 8011a8a:	4b18      	ldr	r3, [pc, #96]	@ (8011aec <_Balloc+0x78>)
 8011a8c:	4818      	ldr	r0, [pc, #96]	@ (8011af0 <_Balloc+0x7c>)
 8011a8e:	216b      	movs	r1, #107	@ 0x6b
 8011a90:	f000 ff66 	bl	8012960 <__assert_func>
 8011a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a98:	6006      	str	r6, [r0, #0]
 8011a9a:	60c6      	str	r6, [r0, #12]
 8011a9c:	69e6      	ldr	r6, [r4, #28]
 8011a9e:	68f3      	ldr	r3, [r6, #12]
 8011aa0:	b183      	cbz	r3, 8011ac4 <_Balloc+0x50>
 8011aa2:	69e3      	ldr	r3, [r4, #28]
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011aaa:	b9b8      	cbnz	r0, 8011adc <_Balloc+0x68>
 8011aac:	2101      	movs	r1, #1
 8011aae:	fa01 f605 	lsl.w	r6, r1, r5
 8011ab2:	1d72      	adds	r2, r6, #5
 8011ab4:	0092      	lsls	r2, r2, #2
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f000 ff70 	bl	801299c <_calloc_r>
 8011abc:	b160      	cbz	r0, 8011ad8 <_Balloc+0x64>
 8011abe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011ac2:	e00e      	b.n	8011ae2 <_Balloc+0x6e>
 8011ac4:	2221      	movs	r2, #33	@ 0x21
 8011ac6:	2104      	movs	r1, #4
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f000 ff67 	bl	801299c <_calloc_r>
 8011ace:	69e3      	ldr	r3, [r4, #28]
 8011ad0:	60f0      	str	r0, [r6, #12]
 8011ad2:	68db      	ldr	r3, [r3, #12]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1e4      	bne.n	8011aa2 <_Balloc+0x2e>
 8011ad8:	2000      	movs	r0, #0
 8011ada:	bd70      	pop	{r4, r5, r6, pc}
 8011adc:	6802      	ldr	r2, [r0, #0]
 8011ade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ae8:	e7f7      	b.n	8011ada <_Balloc+0x66>
 8011aea:	bf00      	nop
 8011aec:	080181f1 	.word	0x080181f1
 8011af0:	08018271 	.word	0x08018271

08011af4 <_Bfree>:
 8011af4:	b570      	push	{r4, r5, r6, lr}
 8011af6:	69c6      	ldr	r6, [r0, #28]
 8011af8:	4605      	mov	r5, r0
 8011afa:	460c      	mov	r4, r1
 8011afc:	b976      	cbnz	r6, 8011b1c <_Bfree+0x28>
 8011afe:	2010      	movs	r0, #16
 8011b00:	f7fe fa3a 	bl	800ff78 <malloc>
 8011b04:	4602      	mov	r2, r0
 8011b06:	61e8      	str	r0, [r5, #28]
 8011b08:	b920      	cbnz	r0, 8011b14 <_Bfree+0x20>
 8011b0a:	4b09      	ldr	r3, [pc, #36]	@ (8011b30 <_Bfree+0x3c>)
 8011b0c:	4809      	ldr	r0, [pc, #36]	@ (8011b34 <_Bfree+0x40>)
 8011b0e:	218f      	movs	r1, #143	@ 0x8f
 8011b10:	f000 ff26 	bl	8012960 <__assert_func>
 8011b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b18:	6006      	str	r6, [r0, #0]
 8011b1a:	60c6      	str	r6, [r0, #12]
 8011b1c:	b13c      	cbz	r4, 8011b2e <_Bfree+0x3a>
 8011b1e:	69eb      	ldr	r3, [r5, #28]
 8011b20:	6862      	ldr	r2, [r4, #4]
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b28:	6021      	str	r1, [r4, #0]
 8011b2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b2e:	bd70      	pop	{r4, r5, r6, pc}
 8011b30:	080181f1 	.word	0x080181f1
 8011b34:	08018271 	.word	0x08018271

08011b38 <__multadd>:
 8011b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b3c:	690d      	ldr	r5, [r1, #16]
 8011b3e:	4607      	mov	r7, r0
 8011b40:	460c      	mov	r4, r1
 8011b42:	461e      	mov	r6, r3
 8011b44:	f101 0c14 	add.w	ip, r1, #20
 8011b48:	2000      	movs	r0, #0
 8011b4a:	f8dc 3000 	ldr.w	r3, [ip]
 8011b4e:	b299      	uxth	r1, r3
 8011b50:	fb02 6101 	mla	r1, r2, r1, r6
 8011b54:	0c1e      	lsrs	r6, r3, #16
 8011b56:	0c0b      	lsrs	r3, r1, #16
 8011b58:	fb02 3306 	mla	r3, r2, r6, r3
 8011b5c:	b289      	uxth	r1, r1
 8011b5e:	3001      	adds	r0, #1
 8011b60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b64:	4285      	cmp	r5, r0
 8011b66:	f84c 1b04 	str.w	r1, [ip], #4
 8011b6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b6e:	dcec      	bgt.n	8011b4a <__multadd+0x12>
 8011b70:	b30e      	cbz	r6, 8011bb6 <__multadd+0x7e>
 8011b72:	68a3      	ldr	r3, [r4, #8]
 8011b74:	42ab      	cmp	r3, r5
 8011b76:	dc19      	bgt.n	8011bac <__multadd+0x74>
 8011b78:	6861      	ldr	r1, [r4, #4]
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	3101      	adds	r1, #1
 8011b7e:	f7ff ff79 	bl	8011a74 <_Balloc>
 8011b82:	4680      	mov	r8, r0
 8011b84:	b928      	cbnz	r0, 8011b92 <__multadd+0x5a>
 8011b86:	4602      	mov	r2, r0
 8011b88:	4b0c      	ldr	r3, [pc, #48]	@ (8011bbc <__multadd+0x84>)
 8011b8a:	480d      	ldr	r0, [pc, #52]	@ (8011bc0 <__multadd+0x88>)
 8011b8c:	21ba      	movs	r1, #186	@ 0xba
 8011b8e:	f000 fee7 	bl	8012960 <__assert_func>
 8011b92:	6922      	ldr	r2, [r4, #16]
 8011b94:	3202      	adds	r2, #2
 8011b96:	f104 010c 	add.w	r1, r4, #12
 8011b9a:	0092      	lsls	r2, r2, #2
 8011b9c:	300c      	adds	r0, #12
 8011b9e:	f7ff f8c2 	bl	8010d26 <memcpy>
 8011ba2:	4621      	mov	r1, r4
 8011ba4:	4638      	mov	r0, r7
 8011ba6:	f7ff ffa5 	bl	8011af4 <_Bfree>
 8011baa:	4644      	mov	r4, r8
 8011bac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011bb0:	3501      	adds	r5, #1
 8011bb2:	615e      	str	r6, [r3, #20]
 8011bb4:	6125      	str	r5, [r4, #16]
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bbc:	08018260 	.word	0x08018260
 8011bc0:	08018271 	.word	0x08018271

08011bc4 <__hi0bits>:
 8011bc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011bc8:	4603      	mov	r3, r0
 8011bca:	bf36      	itet	cc
 8011bcc:	0403      	lslcc	r3, r0, #16
 8011bce:	2000      	movcs	r0, #0
 8011bd0:	2010      	movcc	r0, #16
 8011bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011bd6:	bf3c      	itt	cc
 8011bd8:	021b      	lslcc	r3, r3, #8
 8011bda:	3008      	addcc	r0, #8
 8011bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011be0:	bf3c      	itt	cc
 8011be2:	011b      	lslcc	r3, r3, #4
 8011be4:	3004      	addcc	r0, #4
 8011be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011bea:	bf3c      	itt	cc
 8011bec:	009b      	lslcc	r3, r3, #2
 8011bee:	3002      	addcc	r0, #2
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	db05      	blt.n	8011c00 <__hi0bits+0x3c>
 8011bf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011bf8:	f100 0001 	add.w	r0, r0, #1
 8011bfc:	bf08      	it	eq
 8011bfe:	2020      	moveq	r0, #32
 8011c00:	4770      	bx	lr

08011c02 <__lo0bits>:
 8011c02:	6803      	ldr	r3, [r0, #0]
 8011c04:	4602      	mov	r2, r0
 8011c06:	f013 0007 	ands.w	r0, r3, #7
 8011c0a:	d00b      	beq.n	8011c24 <__lo0bits+0x22>
 8011c0c:	07d9      	lsls	r1, r3, #31
 8011c0e:	d421      	bmi.n	8011c54 <__lo0bits+0x52>
 8011c10:	0798      	lsls	r0, r3, #30
 8011c12:	bf49      	itett	mi
 8011c14:	085b      	lsrmi	r3, r3, #1
 8011c16:	089b      	lsrpl	r3, r3, #2
 8011c18:	2001      	movmi	r0, #1
 8011c1a:	6013      	strmi	r3, [r2, #0]
 8011c1c:	bf5c      	itt	pl
 8011c1e:	6013      	strpl	r3, [r2, #0]
 8011c20:	2002      	movpl	r0, #2
 8011c22:	4770      	bx	lr
 8011c24:	b299      	uxth	r1, r3
 8011c26:	b909      	cbnz	r1, 8011c2c <__lo0bits+0x2a>
 8011c28:	0c1b      	lsrs	r3, r3, #16
 8011c2a:	2010      	movs	r0, #16
 8011c2c:	b2d9      	uxtb	r1, r3
 8011c2e:	b909      	cbnz	r1, 8011c34 <__lo0bits+0x32>
 8011c30:	3008      	adds	r0, #8
 8011c32:	0a1b      	lsrs	r3, r3, #8
 8011c34:	0719      	lsls	r1, r3, #28
 8011c36:	bf04      	itt	eq
 8011c38:	091b      	lsreq	r3, r3, #4
 8011c3a:	3004      	addeq	r0, #4
 8011c3c:	0799      	lsls	r1, r3, #30
 8011c3e:	bf04      	itt	eq
 8011c40:	089b      	lsreq	r3, r3, #2
 8011c42:	3002      	addeq	r0, #2
 8011c44:	07d9      	lsls	r1, r3, #31
 8011c46:	d403      	bmi.n	8011c50 <__lo0bits+0x4e>
 8011c48:	085b      	lsrs	r3, r3, #1
 8011c4a:	f100 0001 	add.w	r0, r0, #1
 8011c4e:	d003      	beq.n	8011c58 <__lo0bits+0x56>
 8011c50:	6013      	str	r3, [r2, #0]
 8011c52:	4770      	bx	lr
 8011c54:	2000      	movs	r0, #0
 8011c56:	4770      	bx	lr
 8011c58:	2020      	movs	r0, #32
 8011c5a:	4770      	bx	lr

08011c5c <__i2b>:
 8011c5c:	b510      	push	{r4, lr}
 8011c5e:	460c      	mov	r4, r1
 8011c60:	2101      	movs	r1, #1
 8011c62:	f7ff ff07 	bl	8011a74 <_Balloc>
 8011c66:	4602      	mov	r2, r0
 8011c68:	b928      	cbnz	r0, 8011c76 <__i2b+0x1a>
 8011c6a:	4b05      	ldr	r3, [pc, #20]	@ (8011c80 <__i2b+0x24>)
 8011c6c:	4805      	ldr	r0, [pc, #20]	@ (8011c84 <__i2b+0x28>)
 8011c6e:	f240 1145 	movw	r1, #325	@ 0x145
 8011c72:	f000 fe75 	bl	8012960 <__assert_func>
 8011c76:	2301      	movs	r3, #1
 8011c78:	6144      	str	r4, [r0, #20]
 8011c7a:	6103      	str	r3, [r0, #16]
 8011c7c:	bd10      	pop	{r4, pc}
 8011c7e:	bf00      	nop
 8011c80:	08018260 	.word	0x08018260
 8011c84:	08018271 	.word	0x08018271

08011c88 <__multiply>:
 8011c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c8c:	4614      	mov	r4, r2
 8011c8e:	690a      	ldr	r2, [r1, #16]
 8011c90:	6923      	ldr	r3, [r4, #16]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	bfa8      	it	ge
 8011c96:	4623      	movge	r3, r4
 8011c98:	460f      	mov	r7, r1
 8011c9a:	bfa4      	itt	ge
 8011c9c:	460c      	movge	r4, r1
 8011c9e:	461f      	movge	r7, r3
 8011ca0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011ca4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011ca8:	68a3      	ldr	r3, [r4, #8]
 8011caa:	6861      	ldr	r1, [r4, #4]
 8011cac:	eb0a 0609 	add.w	r6, sl, r9
 8011cb0:	42b3      	cmp	r3, r6
 8011cb2:	b085      	sub	sp, #20
 8011cb4:	bfb8      	it	lt
 8011cb6:	3101      	addlt	r1, #1
 8011cb8:	f7ff fedc 	bl	8011a74 <_Balloc>
 8011cbc:	b930      	cbnz	r0, 8011ccc <__multiply+0x44>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	4b44      	ldr	r3, [pc, #272]	@ (8011dd4 <__multiply+0x14c>)
 8011cc2:	4845      	ldr	r0, [pc, #276]	@ (8011dd8 <__multiply+0x150>)
 8011cc4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011cc8:	f000 fe4a 	bl	8012960 <__assert_func>
 8011ccc:	f100 0514 	add.w	r5, r0, #20
 8011cd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011cd4:	462b      	mov	r3, r5
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	4543      	cmp	r3, r8
 8011cda:	d321      	bcc.n	8011d20 <__multiply+0x98>
 8011cdc:	f107 0114 	add.w	r1, r7, #20
 8011ce0:	f104 0214 	add.w	r2, r4, #20
 8011ce4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011ce8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011cec:	9302      	str	r3, [sp, #8]
 8011cee:	1b13      	subs	r3, r2, r4
 8011cf0:	3b15      	subs	r3, #21
 8011cf2:	f023 0303 	bic.w	r3, r3, #3
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	f104 0715 	add.w	r7, r4, #21
 8011cfc:	42ba      	cmp	r2, r7
 8011cfe:	bf38      	it	cc
 8011d00:	2304      	movcc	r3, #4
 8011d02:	9301      	str	r3, [sp, #4]
 8011d04:	9b02      	ldr	r3, [sp, #8]
 8011d06:	9103      	str	r1, [sp, #12]
 8011d08:	428b      	cmp	r3, r1
 8011d0a:	d80c      	bhi.n	8011d26 <__multiply+0x9e>
 8011d0c:	2e00      	cmp	r6, #0
 8011d0e:	dd03      	ble.n	8011d18 <__multiply+0x90>
 8011d10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d05b      	beq.n	8011dd0 <__multiply+0x148>
 8011d18:	6106      	str	r6, [r0, #16]
 8011d1a:	b005      	add	sp, #20
 8011d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d20:	f843 2b04 	str.w	r2, [r3], #4
 8011d24:	e7d8      	b.n	8011cd8 <__multiply+0x50>
 8011d26:	f8b1 a000 	ldrh.w	sl, [r1]
 8011d2a:	f1ba 0f00 	cmp.w	sl, #0
 8011d2e:	d024      	beq.n	8011d7a <__multiply+0xf2>
 8011d30:	f104 0e14 	add.w	lr, r4, #20
 8011d34:	46a9      	mov	r9, r5
 8011d36:	f04f 0c00 	mov.w	ip, #0
 8011d3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011d3e:	f8d9 3000 	ldr.w	r3, [r9]
 8011d42:	fa1f fb87 	uxth.w	fp, r7
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	fb0a 330b 	mla	r3, sl, fp, r3
 8011d4c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011d50:	f8d9 7000 	ldr.w	r7, [r9]
 8011d54:	4463      	add	r3, ip
 8011d56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011d5a:	fb0a c70b 	mla	r7, sl, fp, ip
 8011d5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011d68:	4572      	cmp	r2, lr
 8011d6a:	f849 3b04 	str.w	r3, [r9], #4
 8011d6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011d72:	d8e2      	bhi.n	8011d3a <__multiply+0xb2>
 8011d74:	9b01      	ldr	r3, [sp, #4]
 8011d76:	f845 c003 	str.w	ip, [r5, r3]
 8011d7a:	9b03      	ldr	r3, [sp, #12]
 8011d7c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011d80:	3104      	adds	r1, #4
 8011d82:	f1b9 0f00 	cmp.w	r9, #0
 8011d86:	d021      	beq.n	8011dcc <__multiply+0x144>
 8011d88:	682b      	ldr	r3, [r5, #0]
 8011d8a:	f104 0c14 	add.w	ip, r4, #20
 8011d8e:	46ae      	mov	lr, r5
 8011d90:	f04f 0a00 	mov.w	sl, #0
 8011d94:	f8bc b000 	ldrh.w	fp, [ip]
 8011d98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011d9c:	fb09 770b 	mla	r7, r9, fp, r7
 8011da0:	4457      	add	r7, sl
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011da8:	f84e 3b04 	str.w	r3, [lr], #4
 8011dac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011db4:	f8be 3000 	ldrh.w	r3, [lr]
 8011db8:	fb09 330a 	mla	r3, r9, sl, r3
 8011dbc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011dc0:	4562      	cmp	r2, ip
 8011dc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011dc6:	d8e5      	bhi.n	8011d94 <__multiply+0x10c>
 8011dc8:	9f01      	ldr	r7, [sp, #4]
 8011dca:	51eb      	str	r3, [r5, r7]
 8011dcc:	3504      	adds	r5, #4
 8011dce:	e799      	b.n	8011d04 <__multiply+0x7c>
 8011dd0:	3e01      	subs	r6, #1
 8011dd2:	e79b      	b.n	8011d0c <__multiply+0x84>
 8011dd4:	08018260 	.word	0x08018260
 8011dd8:	08018271 	.word	0x08018271

08011ddc <__pow5mult>:
 8011ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011de0:	4615      	mov	r5, r2
 8011de2:	f012 0203 	ands.w	r2, r2, #3
 8011de6:	4607      	mov	r7, r0
 8011de8:	460e      	mov	r6, r1
 8011dea:	d007      	beq.n	8011dfc <__pow5mult+0x20>
 8011dec:	4c25      	ldr	r4, [pc, #148]	@ (8011e84 <__pow5mult+0xa8>)
 8011dee:	3a01      	subs	r2, #1
 8011df0:	2300      	movs	r3, #0
 8011df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011df6:	f7ff fe9f 	bl	8011b38 <__multadd>
 8011dfa:	4606      	mov	r6, r0
 8011dfc:	10ad      	asrs	r5, r5, #2
 8011dfe:	d03d      	beq.n	8011e7c <__pow5mult+0xa0>
 8011e00:	69fc      	ldr	r4, [r7, #28]
 8011e02:	b97c      	cbnz	r4, 8011e24 <__pow5mult+0x48>
 8011e04:	2010      	movs	r0, #16
 8011e06:	f7fe f8b7 	bl	800ff78 <malloc>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	61f8      	str	r0, [r7, #28]
 8011e0e:	b928      	cbnz	r0, 8011e1c <__pow5mult+0x40>
 8011e10:	4b1d      	ldr	r3, [pc, #116]	@ (8011e88 <__pow5mult+0xac>)
 8011e12:	481e      	ldr	r0, [pc, #120]	@ (8011e8c <__pow5mult+0xb0>)
 8011e14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011e18:	f000 fda2 	bl	8012960 <__assert_func>
 8011e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e20:	6004      	str	r4, [r0, #0]
 8011e22:	60c4      	str	r4, [r0, #12]
 8011e24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011e2c:	b94c      	cbnz	r4, 8011e42 <__pow5mult+0x66>
 8011e2e:	f240 2171 	movw	r1, #625	@ 0x271
 8011e32:	4638      	mov	r0, r7
 8011e34:	f7ff ff12 	bl	8011c5c <__i2b>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e3e:	4604      	mov	r4, r0
 8011e40:	6003      	str	r3, [r0, #0]
 8011e42:	f04f 0900 	mov.w	r9, #0
 8011e46:	07eb      	lsls	r3, r5, #31
 8011e48:	d50a      	bpl.n	8011e60 <__pow5mult+0x84>
 8011e4a:	4631      	mov	r1, r6
 8011e4c:	4622      	mov	r2, r4
 8011e4e:	4638      	mov	r0, r7
 8011e50:	f7ff ff1a 	bl	8011c88 <__multiply>
 8011e54:	4631      	mov	r1, r6
 8011e56:	4680      	mov	r8, r0
 8011e58:	4638      	mov	r0, r7
 8011e5a:	f7ff fe4b 	bl	8011af4 <_Bfree>
 8011e5e:	4646      	mov	r6, r8
 8011e60:	106d      	asrs	r5, r5, #1
 8011e62:	d00b      	beq.n	8011e7c <__pow5mult+0xa0>
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	b938      	cbnz	r0, 8011e78 <__pow5mult+0x9c>
 8011e68:	4622      	mov	r2, r4
 8011e6a:	4621      	mov	r1, r4
 8011e6c:	4638      	mov	r0, r7
 8011e6e:	f7ff ff0b 	bl	8011c88 <__multiply>
 8011e72:	6020      	str	r0, [r4, #0]
 8011e74:	f8c0 9000 	str.w	r9, [r0]
 8011e78:	4604      	mov	r4, r0
 8011e7a:	e7e4      	b.n	8011e46 <__pow5mult+0x6a>
 8011e7c:	4630      	mov	r0, r6
 8011e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e82:	bf00      	nop
 8011e84:	080182cc 	.word	0x080182cc
 8011e88:	080181f1 	.word	0x080181f1
 8011e8c:	08018271 	.word	0x08018271

08011e90 <__lshift>:
 8011e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e94:	460c      	mov	r4, r1
 8011e96:	6849      	ldr	r1, [r1, #4]
 8011e98:	6923      	ldr	r3, [r4, #16]
 8011e9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e9e:	68a3      	ldr	r3, [r4, #8]
 8011ea0:	4607      	mov	r7, r0
 8011ea2:	4691      	mov	r9, r2
 8011ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ea8:	f108 0601 	add.w	r6, r8, #1
 8011eac:	42b3      	cmp	r3, r6
 8011eae:	db0b      	blt.n	8011ec8 <__lshift+0x38>
 8011eb0:	4638      	mov	r0, r7
 8011eb2:	f7ff fddf 	bl	8011a74 <_Balloc>
 8011eb6:	4605      	mov	r5, r0
 8011eb8:	b948      	cbnz	r0, 8011ece <__lshift+0x3e>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	4b28      	ldr	r3, [pc, #160]	@ (8011f60 <__lshift+0xd0>)
 8011ebe:	4829      	ldr	r0, [pc, #164]	@ (8011f64 <__lshift+0xd4>)
 8011ec0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011ec4:	f000 fd4c 	bl	8012960 <__assert_func>
 8011ec8:	3101      	adds	r1, #1
 8011eca:	005b      	lsls	r3, r3, #1
 8011ecc:	e7ee      	b.n	8011eac <__lshift+0x1c>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	f100 0114 	add.w	r1, r0, #20
 8011ed4:	f100 0210 	add.w	r2, r0, #16
 8011ed8:	4618      	mov	r0, r3
 8011eda:	4553      	cmp	r3, sl
 8011edc:	db33      	blt.n	8011f46 <__lshift+0xb6>
 8011ede:	6920      	ldr	r0, [r4, #16]
 8011ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ee4:	f104 0314 	add.w	r3, r4, #20
 8011ee8:	f019 091f 	ands.w	r9, r9, #31
 8011eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011ef4:	d02b      	beq.n	8011f4e <__lshift+0xbe>
 8011ef6:	f1c9 0e20 	rsb	lr, r9, #32
 8011efa:	468a      	mov	sl, r1
 8011efc:	2200      	movs	r2, #0
 8011efe:	6818      	ldr	r0, [r3, #0]
 8011f00:	fa00 f009 	lsl.w	r0, r0, r9
 8011f04:	4310      	orrs	r0, r2
 8011f06:	f84a 0b04 	str.w	r0, [sl], #4
 8011f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f0e:	459c      	cmp	ip, r3
 8011f10:	fa22 f20e 	lsr.w	r2, r2, lr
 8011f14:	d8f3      	bhi.n	8011efe <__lshift+0x6e>
 8011f16:	ebac 0304 	sub.w	r3, ip, r4
 8011f1a:	3b15      	subs	r3, #21
 8011f1c:	f023 0303 	bic.w	r3, r3, #3
 8011f20:	3304      	adds	r3, #4
 8011f22:	f104 0015 	add.w	r0, r4, #21
 8011f26:	4584      	cmp	ip, r0
 8011f28:	bf38      	it	cc
 8011f2a:	2304      	movcc	r3, #4
 8011f2c:	50ca      	str	r2, [r1, r3]
 8011f2e:	b10a      	cbz	r2, 8011f34 <__lshift+0xa4>
 8011f30:	f108 0602 	add.w	r6, r8, #2
 8011f34:	3e01      	subs	r6, #1
 8011f36:	4638      	mov	r0, r7
 8011f38:	612e      	str	r6, [r5, #16]
 8011f3a:	4621      	mov	r1, r4
 8011f3c:	f7ff fdda 	bl	8011af4 <_Bfree>
 8011f40:	4628      	mov	r0, r5
 8011f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	e7c5      	b.n	8011eda <__lshift+0x4a>
 8011f4e:	3904      	subs	r1, #4
 8011f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f54:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f58:	459c      	cmp	ip, r3
 8011f5a:	d8f9      	bhi.n	8011f50 <__lshift+0xc0>
 8011f5c:	e7ea      	b.n	8011f34 <__lshift+0xa4>
 8011f5e:	bf00      	nop
 8011f60:	08018260 	.word	0x08018260
 8011f64:	08018271 	.word	0x08018271

08011f68 <__mcmp>:
 8011f68:	690a      	ldr	r2, [r1, #16]
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	6900      	ldr	r0, [r0, #16]
 8011f6e:	1a80      	subs	r0, r0, r2
 8011f70:	b530      	push	{r4, r5, lr}
 8011f72:	d10e      	bne.n	8011f92 <__mcmp+0x2a>
 8011f74:	3314      	adds	r3, #20
 8011f76:	3114      	adds	r1, #20
 8011f78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011f7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011f80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011f84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011f88:	4295      	cmp	r5, r2
 8011f8a:	d003      	beq.n	8011f94 <__mcmp+0x2c>
 8011f8c:	d205      	bcs.n	8011f9a <__mcmp+0x32>
 8011f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f92:	bd30      	pop	{r4, r5, pc}
 8011f94:	42a3      	cmp	r3, r4
 8011f96:	d3f3      	bcc.n	8011f80 <__mcmp+0x18>
 8011f98:	e7fb      	b.n	8011f92 <__mcmp+0x2a>
 8011f9a:	2001      	movs	r0, #1
 8011f9c:	e7f9      	b.n	8011f92 <__mcmp+0x2a>
	...

08011fa0 <__mdiff>:
 8011fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	4689      	mov	r9, r1
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	4611      	mov	r1, r2
 8011faa:	4648      	mov	r0, r9
 8011fac:	4614      	mov	r4, r2
 8011fae:	f7ff ffdb 	bl	8011f68 <__mcmp>
 8011fb2:	1e05      	subs	r5, r0, #0
 8011fb4:	d112      	bne.n	8011fdc <__mdiff+0x3c>
 8011fb6:	4629      	mov	r1, r5
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f7ff fd5b 	bl	8011a74 <_Balloc>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	b928      	cbnz	r0, 8011fce <__mdiff+0x2e>
 8011fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80120c0 <__mdiff+0x120>)
 8011fc4:	f240 2137 	movw	r1, #567	@ 0x237
 8011fc8:	483e      	ldr	r0, [pc, #248]	@ (80120c4 <__mdiff+0x124>)
 8011fca:	f000 fcc9 	bl	8012960 <__assert_func>
 8011fce:	2301      	movs	r3, #1
 8011fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011fd4:	4610      	mov	r0, r2
 8011fd6:	b003      	add	sp, #12
 8011fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fdc:	bfbc      	itt	lt
 8011fde:	464b      	movlt	r3, r9
 8011fe0:	46a1      	movlt	r9, r4
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011fe8:	bfba      	itte	lt
 8011fea:	461c      	movlt	r4, r3
 8011fec:	2501      	movlt	r5, #1
 8011fee:	2500      	movge	r5, #0
 8011ff0:	f7ff fd40 	bl	8011a74 <_Balloc>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	b918      	cbnz	r0, 8012000 <__mdiff+0x60>
 8011ff8:	4b31      	ldr	r3, [pc, #196]	@ (80120c0 <__mdiff+0x120>)
 8011ffa:	f240 2145 	movw	r1, #581	@ 0x245
 8011ffe:	e7e3      	b.n	8011fc8 <__mdiff+0x28>
 8012000:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012004:	6926      	ldr	r6, [r4, #16]
 8012006:	60c5      	str	r5, [r0, #12]
 8012008:	f109 0310 	add.w	r3, r9, #16
 801200c:	f109 0514 	add.w	r5, r9, #20
 8012010:	f104 0e14 	add.w	lr, r4, #20
 8012014:	f100 0b14 	add.w	fp, r0, #20
 8012018:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801201c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012020:	9301      	str	r3, [sp, #4]
 8012022:	46d9      	mov	r9, fp
 8012024:	f04f 0c00 	mov.w	ip, #0
 8012028:	9b01      	ldr	r3, [sp, #4]
 801202a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801202e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012032:	9301      	str	r3, [sp, #4]
 8012034:	fa1f f38a 	uxth.w	r3, sl
 8012038:	4619      	mov	r1, r3
 801203a:	b283      	uxth	r3, r0
 801203c:	1acb      	subs	r3, r1, r3
 801203e:	0c00      	lsrs	r0, r0, #16
 8012040:	4463      	add	r3, ip
 8012042:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012046:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801204a:	b29b      	uxth	r3, r3
 801204c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012050:	4576      	cmp	r6, lr
 8012052:	f849 3b04 	str.w	r3, [r9], #4
 8012056:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801205a:	d8e5      	bhi.n	8012028 <__mdiff+0x88>
 801205c:	1b33      	subs	r3, r6, r4
 801205e:	3b15      	subs	r3, #21
 8012060:	f023 0303 	bic.w	r3, r3, #3
 8012064:	3415      	adds	r4, #21
 8012066:	3304      	adds	r3, #4
 8012068:	42a6      	cmp	r6, r4
 801206a:	bf38      	it	cc
 801206c:	2304      	movcc	r3, #4
 801206e:	441d      	add	r5, r3
 8012070:	445b      	add	r3, fp
 8012072:	461e      	mov	r6, r3
 8012074:	462c      	mov	r4, r5
 8012076:	4544      	cmp	r4, r8
 8012078:	d30e      	bcc.n	8012098 <__mdiff+0xf8>
 801207a:	f108 0103 	add.w	r1, r8, #3
 801207e:	1b49      	subs	r1, r1, r5
 8012080:	f021 0103 	bic.w	r1, r1, #3
 8012084:	3d03      	subs	r5, #3
 8012086:	45a8      	cmp	r8, r5
 8012088:	bf38      	it	cc
 801208a:	2100      	movcc	r1, #0
 801208c:	440b      	add	r3, r1
 801208e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012092:	b191      	cbz	r1, 80120ba <__mdiff+0x11a>
 8012094:	6117      	str	r7, [r2, #16]
 8012096:	e79d      	b.n	8011fd4 <__mdiff+0x34>
 8012098:	f854 1b04 	ldr.w	r1, [r4], #4
 801209c:	46e6      	mov	lr, ip
 801209e:	0c08      	lsrs	r0, r1, #16
 80120a0:	fa1c fc81 	uxtah	ip, ip, r1
 80120a4:	4471      	add	r1, lr
 80120a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80120aa:	b289      	uxth	r1, r1
 80120ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80120b0:	f846 1b04 	str.w	r1, [r6], #4
 80120b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80120b8:	e7dd      	b.n	8012076 <__mdiff+0xd6>
 80120ba:	3f01      	subs	r7, #1
 80120bc:	e7e7      	b.n	801208e <__mdiff+0xee>
 80120be:	bf00      	nop
 80120c0:	08018260 	.word	0x08018260
 80120c4:	08018271 	.word	0x08018271

080120c8 <__d2b>:
 80120c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80120cc:	460f      	mov	r7, r1
 80120ce:	2101      	movs	r1, #1
 80120d0:	ec59 8b10 	vmov	r8, r9, d0
 80120d4:	4616      	mov	r6, r2
 80120d6:	f7ff fccd 	bl	8011a74 <_Balloc>
 80120da:	4604      	mov	r4, r0
 80120dc:	b930      	cbnz	r0, 80120ec <__d2b+0x24>
 80120de:	4602      	mov	r2, r0
 80120e0:	4b23      	ldr	r3, [pc, #140]	@ (8012170 <__d2b+0xa8>)
 80120e2:	4824      	ldr	r0, [pc, #144]	@ (8012174 <__d2b+0xac>)
 80120e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80120e8:	f000 fc3a 	bl	8012960 <__assert_func>
 80120ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120f4:	b10d      	cbz	r5, 80120fa <__d2b+0x32>
 80120f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80120fa:	9301      	str	r3, [sp, #4]
 80120fc:	f1b8 0300 	subs.w	r3, r8, #0
 8012100:	d023      	beq.n	801214a <__d2b+0x82>
 8012102:	4668      	mov	r0, sp
 8012104:	9300      	str	r3, [sp, #0]
 8012106:	f7ff fd7c 	bl	8011c02 <__lo0bits>
 801210a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801210e:	b1d0      	cbz	r0, 8012146 <__d2b+0x7e>
 8012110:	f1c0 0320 	rsb	r3, r0, #32
 8012114:	fa02 f303 	lsl.w	r3, r2, r3
 8012118:	430b      	orrs	r3, r1
 801211a:	40c2      	lsrs	r2, r0
 801211c:	6163      	str	r3, [r4, #20]
 801211e:	9201      	str	r2, [sp, #4]
 8012120:	9b01      	ldr	r3, [sp, #4]
 8012122:	61a3      	str	r3, [r4, #24]
 8012124:	2b00      	cmp	r3, #0
 8012126:	bf0c      	ite	eq
 8012128:	2201      	moveq	r2, #1
 801212a:	2202      	movne	r2, #2
 801212c:	6122      	str	r2, [r4, #16]
 801212e:	b1a5      	cbz	r5, 801215a <__d2b+0x92>
 8012130:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012134:	4405      	add	r5, r0
 8012136:	603d      	str	r5, [r7, #0]
 8012138:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801213c:	6030      	str	r0, [r6, #0]
 801213e:	4620      	mov	r0, r4
 8012140:	b003      	add	sp, #12
 8012142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012146:	6161      	str	r1, [r4, #20]
 8012148:	e7ea      	b.n	8012120 <__d2b+0x58>
 801214a:	a801      	add	r0, sp, #4
 801214c:	f7ff fd59 	bl	8011c02 <__lo0bits>
 8012150:	9b01      	ldr	r3, [sp, #4]
 8012152:	6163      	str	r3, [r4, #20]
 8012154:	3020      	adds	r0, #32
 8012156:	2201      	movs	r2, #1
 8012158:	e7e8      	b.n	801212c <__d2b+0x64>
 801215a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801215e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012162:	6038      	str	r0, [r7, #0]
 8012164:	6918      	ldr	r0, [r3, #16]
 8012166:	f7ff fd2d 	bl	8011bc4 <__hi0bits>
 801216a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801216e:	e7e5      	b.n	801213c <__d2b+0x74>
 8012170:	08018260 	.word	0x08018260
 8012174:	08018271 	.word	0x08018271

08012178 <__ssputs_r>:
 8012178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801217c:	688e      	ldr	r6, [r1, #8]
 801217e:	461f      	mov	r7, r3
 8012180:	42be      	cmp	r6, r7
 8012182:	680b      	ldr	r3, [r1, #0]
 8012184:	4682      	mov	sl, r0
 8012186:	460c      	mov	r4, r1
 8012188:	4690      	mov	r8, r2
 801218a:	d82d      	bhi.n	80121e8 <__ssputs_r+0x70>
 801218c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012190:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012194:	d026      	beq.n	80121e4 <__ssputs_r+0x6c>
 8012196:	6965      	ldr	r5, [r4, #20]
 8012198:	6909      	ldr	r1, [r1, #16]
 801219a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801219e:	eba3 0901 	sub.w	r9, r3, r1
 80121a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121a6:	1c7b      	adds	r3, r7, #1
 80121a8:	444b      	add	r3, r9
 80121aa:	106d      	asrs	r5, r5, #1
 80121ac:	429d      	cmp	r5, r3
 80121ae:	bf38      	it	cc
 80121b0:	461d      	movcc	r5, r3
 80121b2:	0553      	lsls	r3, r2, #21
 80121b4:	d527      	bpl.n	8012206 <__ssputs_r+0x8e>
 80121b6:	4629      	mov	r1, r5
 80121b8:	f7fd ff08 	bl	800ffcc <_malloc_r>
 80121bc:	4606      	mov	r6, r0
 80121be:	b360      	cbz	r0, 801221a <__ssputs_r+0xa2>
 80121c0:	6921      	ldr	r1, [r4, #16]
 80121c2:	464a      	mov	r2, r9
 80121c4:	f7fe fdaf 	bl	8010d26 <memcpy>
 80121c8:	89a3      	ldrh	r3, [r4, #12]
 80121ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80121ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121d2:	81a3      	strh	r3, [r4, #12]
 80121d4:	6126      	str	r6, [r4, #16]
 80121d6:	6165      	str	r5, [r4, #20]
 80121d8:	444e      	add	r6, r9
 80121da:	eba5 0509 	sub.w	r5, r5, r9
 80121de:	6026      	str	r6, [r4, #0]
 80121e0:	60a5      	str	r5, [r4, #8]
 80121e2:	463e      	mov	r6, r7
 80121e4:	42be      	cmp	r6, r7
 80121e6:	d900      	bls.n	80121ea <__ssputs_r+0x72>
 80121e8:	463e      	mov	r6, r7
 80121ea:	6820      	ldr	r0, [r4, #0]
 80121ec:	4632      	mov	r2, r6
 80121ee:	4641      	mov	r1, r8
 80121f0:	f000 fb9c 	bl	801292c <memmove>
 80121f4:	68a3      	ldr	r3, [r4, #8]
 80121f6:	1b9b      	subs	r3, r3, r6
 80121f8:	60a3      	str	r3, [r4, #8]
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	4433      	add	r3, r6
 80121fe:	6023      	str	r3, [r4, #0]
 8012200:	2000      	movs	r0, #0
 8012202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012206:	462a      	mov	r2, r5
 8012208:	f000 fbee 	bl	80129e8 <_realloc_r>
 801220c:	4606      	mov	r6, r0
 801220e:	2800      	cmp	r0, #0
 8012210:	d1e0      	bne.n	80121d4 <__ssputs_r+0x5c>
 8012212:	6921      	ldr	r1, [r4, #16]
 8012214:	4650      	mov	r0, sl
 8012216:	f7ff fbe3 	bl	80119e0 <_free_r>
 801221a:	230c      	movs	r3, #12
 801221c:	f8ca 3000 	str.w	r3, [sl]
 8012220:	89a3      	ldrh	r3, [r4, #12]
 8012222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012226:	81a3      	strh	r3, [r4, #12]
 8012228:	f04f 30ff 	mov.w	r0, #4294967295
 801222c:	e7e9      	b.n	8012202 <__ssputs_r+0x8a>
	...

08012230 <_svfiprintf_r>:
 8012230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012234:	4698      	mov	r8, r3
 8012236:	898b      	ldrh	r3, [r1, #12]
 8012238:	061b      	lsls	r3, r3, #24
 801223a:	b09d      	sub	sp, #116	@ 0x74
 801223c:	4607      	mov	r7, r0
 801223e:	460d      	mov	r5, r1
 8012240:	4614      	mov	r4, r2
 8012242:	d510      	bpl.n	8012266 <_svfiprintf_r+0x36>
 8012244:	690b      	ldr	r3, [r1, #16]
 8012246:	b973      	cbnz	r3, 8012266 <_svfiprintf_r+0x36>
 8012248:	2140      	movs	r1, #64	@ 0x40
 801224a:	f7fd febf 	bl	800ffcc <_malloc_r>
 801224e:	6028      	str	r0, [r5, #0]
 8012250:	6128      	str	r0, [r5, #16]
 8012252:	b930      	cbnz	r0, 8012262 <_svfiprintf_r+0x32>
 8012254:	230c      	movs	r3, #12
 8012256:	603b      	str	r3, [r7, #0]
 8012258:	f04f 30ff 	mov.w	r0, #4294967295
 801225c:	b01d      	add	sp, #116	@ 0x74
 801225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012262:	2340      	movs	r3, #64	@ 0x40
 8012264:	616b      	str	r3, [r5, #20]
 8012266:	2300      	movs	r3, #0
 8012268:	9309      	str	r3, [sp, #36]	@ 0x24
 801226a:	2320      	movs	r3, #32
 801226c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012270:	f8cd 800c 	str.w	r8, [sp, #12]
 8012274:	2330      	movs	r3, #48	@ 0x30
 8012276:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012414 <_svfiprintf_r+0x1e4>
 801227a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801227e:	f04f 0901 	mov.w	r9, #1
 8012282:	4623      	mov	r3, r4
 8012284:	469a      	mov	sl, r3
 8012286:	f813 2b01 	ldrb.w	r2, [r3], #1
 801228a:	b10a      	cbz	r2, 8012290 <_svfiprintf_r+0x60>
 801228c:	2a25      	cmp	r2, #37	@ 0x25
 801228e:	d1f9      	bne.n	8012284 <_svfiprintf_r+0x54>
 8012290:	ebba 0b04 	subs.w	fp, sl, r4
 8012294:	d00b      	beq.n	80122ae <_svfiprintf_r+0x7e>
 8012296:	465b      	mov	r3, fp
 8012298:	4622      	mov	r2, r4
 801229a:	4629      	mov	r1, r5
 801229c:	4638      	mov	r0, r7
 801229e:	f7ff ff6b 	bl	8012178 <__ssputs_r>
 80122a2:	3001      	adds	r0, #1
 80122a4:	f000 80a7 	beq.w	80123f6 <_svfiprintf_r+0x1c6>
 80122a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122aa:	445a      	add	r2, fp
 80122ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80122ae:	f89a 3000 	ldrb.w	r3, [sl]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f000 809f 	beq.w	80123f6 <_svfiprintf_r+0x1c6>
 80122b8:	2300      	movs	r3, #0
 80122ba:	f04f 32ff 	mov.w	r2, #4294967295
 80122be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122c2:	f10a 0a01 	add.w	sl, sl, #1
 80122c6:	9304      	str	r3, [sp, #16]
 80122c8:	9307      	str	r3, [sp, #28]
 80122ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80122d0:	4654      	mov	r4, sl
 80122d2:	2205      	movs	r2, #5
 80122d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122d8:	484e      	ldr	r0, [pc, #312]	@ (8012414 <_svfiprintf_r+0x1e4>)
 80122da:	f7ed ff91 	bl	8000200 <memchr>
 80122de:	9a04      	ldr	r2, [sp, #16]
 80122e0:	b9d8      	cbnz	r0, 801231a <_svfiprintf_r+0xea>
 80122e2:	06d0      	lsls	r0, r2, #27
 80122e4:	bf44      	itt	mi
 80122e6:	2320      	movmi	r3, #32
 80122e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122ec:	0711      	lsls	r1, r2, #28
 80122ee:	bf44      	itt	mi
 80122f0:	232b      	movmi	r3, #43	@ 0x2b
 80122f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122f6:	f89a 3000 	ldrb.w	r3, [sl]
 80122fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80122fc:	d015      	beq.n	801232a <_svfiprintf_r+0xfa>
 80122fe:	9a07      	ldr	r2, [sp, #28]
 8012300:	4654      	mov	r4, sl
 8012302:	2000      	movs	r0, #0
 8012304:	f04f 0c0a 	mov.w	ip, #10
 8012308:	4621      	mov	r1, r4
 801230a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801230e:	3b30      	subs	r3, #48	@ 0x30
 8012310:	2b09      	cmp	r3, #9
 8012312:	d94b      	bls.n	80123ac <_svfiprintf_r+0x17c>
 8012314:	b1b0      	cbz	r0, 8012344 <_svfiprintf_r+0x114>
 8012316:	9207      	str	r2, [sp, #28]
 8012318:	e014      	b.n	8012344 <_svfiprintf_r+0x114>
 801231a:	eba0 0308 	sub.w	r3, r0, r8
 801231e:	fa09 f303 	lsl.w	r3, r9, r3
 8012322:	4313      	orrs	r3, r2
 8012324:	9304      	str	r3, [sp, #16]
 8012326:	46a2      	mov	sl, r4
 8012328:	e7d2      	b.n	80122d0 <_svfiprintf_r+0xa0>
 801232a:	9b03      	ldr	r3, [sp, #12]
 801232c:	1d19      	adds	r1, r3, #4
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	9103      	str	r1, [sp, #12]
 8012332:	2b00      	cmp	r3, #0
 8012334:	bfbb      	ittet	lt
 8012336:	425b      	neglt	r3, r3
 8012338:	f042 0202 	orrlt.w	r2, r2, #2
 801233c:	9307      	strge	r3, [sp, #28]
 801233e:	9307      	strlt	r3, [sp, #28]
 8012340:	bfb8      	it	lt
 8012342:	9204      	strlt	r2, [sp, #16]
 8012344:	7823      	ldrb	r3, [r4, #0]
 8012346:	2b2e      	cmp	r3, #46	@ 0x2e
 8012348:	d10a      	bne.n	8012360 <_svfiprintf_r+0x130>
 801234a:	7863      	ldrb	r3, [r4, #1]
 801234c:	2b2a      	cmp	r3, #42	@ 0x2a
 801234e:	d132      	bne.n	80123b6 <_svfiprintf_r+0x186>
 8012350:	9b03      	ldr	r3, [sp, #12]
 8012352:	1d1a      	adds	r2, r3, #4
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	9203      	str	r2, [sp, #12]
 8012358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801235c:	3402      	adds	r4, #2
 801235e:	9305      	str	r3, [sp, #20]
 8012360:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012424 <_svfiprintf_r+0x1f4>
 8012364:	7821      	ldrb	r1, [r4, #0]
 8012366:	2203      	movs	r2, #3
 8012368:	4650      	mov	r0, sl
 801236a:	f7ed ff49 	bl	8000200 <memchr>
 801236e:	b138      	cbz	r0, 8012380 <_svfiprintf_r+0x150>
 8012370:	9b04      	ldr	r3, [sp, #16]
 8012372:	eba0 000a 	sub.w	r0, r0, sl
 8012376:	2240      	movs	r2, #64	@ 0x40
 8012378:	4082      	lsls	r2, r0
 801237a:	4313      	orrs	r3, r2
 801237c:	3401      	adds	r4, #1
 801237e:	9304      	str	r3, [sp, #16]
 8012380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012384:	4824      	ldr	r0, [pc, #144]	@ (8012418 <_svfiprintf_r+0x1e8>)
 8012386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801238a:	2206      	movs	r2, #6
 801238c:	f7ed ff38 	bl	8000200 <memchr>
 8012390:	2800      	cmp	r0, #0
 8012392:	d036      	beq.n	8012402 <_svfiprintf_r+0x1d2>
 8012394:	4b21      	ldr	r3, [pc, #132]	@ (801241c <_svfiprintf_r+0x1ec>)
 8012396:	bb1b      	cbnz	r3, 80123e0 <_svfiprintf_r+0x1b0>
 8012398:	9b03      	ldr	r3, [sp, #12]
 801239a:	3307      	adds	r3, #7
 801239c:	f023 0307 	bic.w	r3, r3, #7
 80123a0:	3308      	adds	r3, #8
 80123a2:	9303      	str	r3, [sp, #12]
 80123a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123a6:	4433      	add	r3, r6
 80123a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80123aa:	e76a      	b.n	8012282 <_svfiprintf_r+0x52>
 80123ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80123b0:	460c      	mov	r4, r1
 80123b2:	2001      	movs	r0, #1
 80123b4:	e7a8      	b.n	8012308 <_svfiprintf_r+0xd8>
 80123b6:	2300      	movs	r3, #0
 80123b8:	3401      	adds	r4, #1
 80123ba:	9305      	str	r3, [sp, #20]
 80123bc:	4619      	mov	r1, r3
 80123be:	f04f 0c0a 	mov.w	ip, #10
 80123c2:	4620      	mov	r0, r4
 80123c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123c8:	3a30      	subs	r2, #48	@ 0x30
 80123ca:	2a09      	cmp	r2, #9
 80123cc:	d903      	bls.n	80123d6 <_svfiprintf_r+0x1a6>
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d0c6      	beq.n	8012360 <_svfiprintf_r+0x130>
 80123d2:	9105      	str	r1, [sp, #20]
 80123d4:	e7c4      	b.n	8012360 <_svfiprintf_r+0x130>
 80123d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80123da:	4604      	mov	r4, r0
 80123dc:	2301      	movs	r3, #1
 80123de:	e7f0      	b.n	80123c2 <_svfiprintf_r+0x192>
 80123e0:	ab03      	add	r3, sp, #12
 80123e2:	9300      	str	r3, [sp, #0]
 80123e4:	462a      	mov	r2, r5
 80123e6:	4b0e      	ldr	r3, [pc, #56]	@ (8012420 <_svfiprintf_r+0x1f0>)
 80123e8:	a904      	add	r1, sp, #16
 80123ea:	4638      	mov	r0, r7
 80123ec:	f7fd ff1a 	bl	8010224 <_printf_float>
 80123f0:	1c42      	adds	r2, r0, #1
 80123f2:	4606      	mov	r6, r0
 80123f4:	d1d6      	bne.n	80123a4 <_svfiprintf_r+0x174>
 80123f6:	89ab      	ldrh	r3, [r5, #12]
 80123f8:	065b      	lsls	r3, r3, #25
 80123fa:	f53f af2d 	bmi.w	8012258 <_svfiprintf_r+0x28>
 80123fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012400:	e72c      	b.n	801225c <_svfiprintf_r+0x2c>
 8012402:	ab03      	add	r3, sp, #12
 8012404:	9300      	str	r3, [sp, #0]
 8012406:	462a      	mov	r2, r5
 8012408:	4b05      	ldr	r3, [pc, #20]	@ (8012420 <_svfiprintf_r+0x1f0>)
 801240a:	a904      	add	r1, sp, #16
 801240c:	4638      	mov	r0, r7
 801240e:	f7fe f9a1 	bl	8010754 <_printf_i>
 8012412:	e7ed      	b.n	80123f0 <_svfiprintf_r+0x1c0>
 8012414:	080183c8 	.word	0x080183c8
 8012418:	080183d2 	.word	0x080183d2
 801241c:	08010225 	.word	0x08010225
 8012420:	08012179 	.word	0x08012179
 8012424:	080183ce 	.word	0x080183ce

08012428 <__sfputc_r>:
 8012428:	6893      	ldr	r3, [r2, #8]
 801242a:	3b01      	subs	r3, #1
 801242c:	2b00      	cmp	r3, #0
 801242e:	b410      	push	{r4}
 8012430:	6093      	str	r3, [r2, #8]
 8012432:	da08      	bge.n	8012446 <__sfputc_r+0x1e>
 8012434:	6994      	ldr	r4, [r2, #24]
 8012436:	42a3      	cmp	r3, r4
 8012438:	db01      	blt.n	801243e <__sfputc_r+0x16>
 801243a:	290a      	cmp	r1, #10
 801243c:	d103      	bne.n	8012446 <__sfputc_r+0x1e>
 801243e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012442:	f000 b9df 	b.w	8012804 <__swbuf_r>
 8012446:	6813      	ldr	r3, [r2, #0]
 8012448:	1c58      	adds	r0, r3, #1
 801244a:	6010      	str	r0, [r2, #0]
 801244c:	7019      	strb	r1, [r3, #0]
 801244e:	4608      	mov	r0, r1
 8012450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012454:	4770      	bx	lr

08012456 <__sfputs_r>:
 8012456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012458:	4606      	mov	r6, r0
 801245a:	460f      	mov	r7, r1
 801245c:	4614      	mov	r4, r2
 801245e:	18d5      	adds	r5, r2, r3
 8012460:	42ac      	cmp	r4, r5
 8012462:	d101      	bne.n	8012468 <__sfputs_r+0x12>
 8012464:	2000      	movs	r0, #0
 8012466:	e007      	b.n	8012478 <__sfputs_r+0x22>
 8012468:	f814 1b01 	ldrb.w	r1, [r4], #1
 801246c:	463a      	mov	r2, r7
 801246e:	4630      	mov	r0, r6
 8012470:	f7ff ffda 	bl	8012428 <__sfputc_r>
 8012474:	1c43      	adds	r3, r0, #1
 8012476:	d1f3      	bne.n	8012460 <__sfputs_r+0xa>
 8012478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801247c <_vfiprintf_r>:
 801247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012480:	460d      	mov	r5, r1
 8012482:	b09d      	sub	sp, #116	@ 0x74
 8012484:	4614      	mov	r4, r2
 8012486:	4698      	mov	r8, r3
 8012488:	4606      	mov	r6, r0
 801248a:	b118      	cbz	r0, 8012494 <_vfiprintf_r+0x18>
 801248c:	6a03      	ldr	r3, [r0, #32]
 801248e:	b90b      	cbnz	r3, 8012494 <_vfiprintf_r+0x18>
 8012490:	f7fe fb0c 	bl	8010aac <__sinit>
 8012494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012496:	07d9      	lsls	r1, r3, #31
 8012498:	d405      	bmi.n	80124a6 <_vfiprintf_r+0x2a>
 801249a:	89ab      	ldrh	r3, [r5, #12]
 801249c:	059a      	lsls	r2, r3, #22
 801249e:	d402      	bmi.n	80124a6 <_vfiprintf_r+0x2a>
 80124a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124a2:	f7fe fc3e 	bl	8010d22 <__retarget_lock_acquire_recursive>
 80124a6:	89ab      	ldrh	r3, [r5, #12]
 80124a8:	071b      	lsls	r3, r3, #28
 80124aa:	d501      	bpl.n	80124b0 <_vfiprintf_r+0x34>
 80124ac:	692b      	ldr	r3, [r5, #16]
 80124ae:	b99b      	cbnz	r3, 80124d8 <_vfiprintf_r+0x5c>
 80124b0:	4629      	mov	r1, r5
 80124b2:	4630      	mov	r0, r6
 80124b4:	f000 f9e4 	bl	8012880 <__swsetup_r>
 80124b8:	b170      	cbz	r0, 80124d8 <_vfiprintf_r+0x5c>
 80124ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124bc:	07dc      	lsls	r4, r3, #31
 80124be:	d504      	bpl.n	80124ca <_vfiprintf_r+0x4e>
 80124c0:	f04f 30ff 	mov.w	r0, #4294967295
 80124c4:	b01d      	add	sp, #116	@ 0x74
 80124c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ca:	89ab      	ldrh	r3, [r5, #12]
 80124cc:	0598      	lsls	r0, r3, #22
 80124ce:	d4f7      	bmi.n	80124c0 <_vfiprintf_r+0x44>
 80124d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124d2:	f7fe fc27 	bl	8010d24 <__retarget_lock_release_recursive>
 80124d6:	e7f3      	b.n	80124c0 <_vfiprintf_r+0x44>
 80124d8:	2300      	movs	r3, #0
 80124da:	9309      	str	r3, [sp, #36]	@ 0x24
 80124dc:	2320      	movs	r3, #32
 80124de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80124e6:	2330      	movs	r3, #48	@ 0x30
 80124e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012698 <_vfiprintf_r+0x21c>
 80124ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80124f0:	f04f 0901 	mov.w	r9, #1
 80124f4:	4623      	mov	r3, r4
 80124f6:	469a      	mov	sl, r3
 80124f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124fc:	b10a      	cbz	r2, 8012502 <_vfiprintf_r+0x86>
 80124fe:	2a25      	cmp	r2, #37	@ 0x25
 8012500:	d1f9      	bne.n	80124f6 <_vfiprintf_r+0x7a>
 8012502:	ebba 0b04 	subs.w	fp, sl, r4
 8012506:	d00b      	beq.n	8012520 <_vfiprintf_r+0xa4>
 8012508:	465b      	mov	r3, fp
 801250a:	4622      	mov	r2, r4
 801250c:	4629      	mov	r1, r5
 801250e:	4630      	mov	r0, r6
 8012510:	f7ff ffa1 	bl	8012456 <__sfputs_r>
 8012514:	3001      	adds	r0, #1
 8012516:	f000 80a7 	beq.w	8012668 <_vfiprintf_r+0x1ec>
 801251a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801251c:	445a      	add	r2, fp
 801251e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012520:	f89a 3000 	ldrb.w	r3, [sl]
 8012524:	2b00      	cmp	r3, #0
 8012526:	f000 809f 	beq.w	8012668 <_vfiprintf_r+0x1ec>
 801252a:	2300      	movs	r3, #0
 801252c:	f04f 32ff 	mov.w	r2, #4294967295
 8012530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012534:	f10a 0a01 	add.w	sl, sl, #1
 8012538:	9304      	str	r3, [sp, #16]
 801253a:	9307      	str	r3, [sp, #28]
 801253c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012540:	931a      	str	r3, [sp, #104]	@ 0x68
 8012542:	4654      	mov	r4, sl
 8012544:	2205      	movs	r2, #5
 8012546:	f814 1b01 	ldrb.w	r1, [r4], #1
 801254a:	4853      	ldr	r0, [pc, #332]	@ (8012698 <_vfiprintf_r+0x21c>)
 801254c:	f7ed fe58 	bl	8000200 <memchr>
 8012550:	9a04      	ldr	r2, [sp, #16]
 8012552:	b9d8      	cbnz	r0, 801258c <_vfiprintf_r+0x110>
 8012554:	06d1      	lsls	r1, r2, #27
 8012556:	bf44      	itt	mi
 8012558:	2320      	movmi	r3, #32
 801255a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801255e:	0713      	lsls	r3, r2, #28
 8012560:	bf44      	itt	mi
 8012562:	232b      	movmi	r3, #43	@ 0x2b
 8012564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012568:	f89a 3000 	ldrb.w	r3, [sl]
 801256c:	2b2a      	cmp	r3, #42	@ 0x2a
 801256e:	d015      	beq.n	801259c <_vfiprintf_r+0x120>
 8012570:	9a07      	ldr	r2, [sp, #28]
 8012572:	4654      	mov	r4, sl
 8012574:	2000      	movs	r0, #0
 8012576:	f04f 0c0a 	mov.w	ip, #10
 801257a:	4621      	mov	r1, r4
 801257c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012580:	3b30      	subs	r3, #48	@ 0x30
 8012582:	2b09      	cmp	r3, #9
 8012584:	d94b      	bls.n	801261e <_vfiprintf_r+0x1a2>
 8012586:	b1b0      	cbz	r0, 80125b6 <_vfiprintf_r+0x13a>
 8012588:	9207      	str	r2, [sp, #28]
 801258a:	e014      	b.n	80125b6 <_vfiprintf_r+0x13a>
 801258c:	eba0 0308 	sub.w	r3, r0, r8
 8012590:	fa09 f303 	lsl.w	r3, r9, r3
 8012594:	4313      	orrs	r3, r2
 8012596:	9304      	str	r3, [sp, #16]
 8012598:	46a2      	mov	sl, r4
 801259a:	e7d2      	b.n	8012542 <_vfiprintf_r+0xc6>
 801259c:	9b03      	ldr	r3, [sp, #12]
 801259e:	1d19      	adds	r1, r3, #4
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	9103      	str	r1, [sp, #12]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	bfbb      	ittet	lt
 80125a8:	425b      	neglt	r3, r3
 80125aa:	f042 0202 	orrlt.w	r2, r2, #2
 80125ae:	9307      	strge	r3, [sp, #28]
 80125b0:	9307      	strlt	r3, [sp, #28]
 80125b2:	bfb8      	it	lt
 80125b4:	9204      	strlt	r2, [sp, #16]
 80125b6:	7823      	ldrb	r3, [r4, #0]
 80125b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80125ba:	d10a      	bne.n	80125d2 <_vfiprintf_r+0x156>
 80125bc:	7863      	ldrb	r3, [r4, #1]
 80125be:	2b2a      	cmp	r3, #42	@ 0x2a
 80125c0:	d132      	bne.n	8012628 <_vfiprintf_r+0x1ac>
 80125c2:	9b03      	ldr	r3, [sp, #12]
 80125c4:	1d1a      	adds	r2, r3, #4
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	9203      	str	r2, [sp, #12]
 80125ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125ce:	3402      	adds	r4, #2
 80125d0:	9305      	str	r3, [sp, #20]
 80125d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80126a8 <_vfiprintf_r+0x22c>
 80125d6:	7821      	ldrb	r1, [r4, #0]
 80125d8:	2203      	movs	r2, #3
 80125da:	4650      	mov	r0, sl
 80125dc:	f7ed fe10 	bl	8000200 <memchr>
 80125e0:	b138      	cbz	r0, 80125f2 <_vfiprintf_r+0x176>
 80125e2:	9b04      	ldr	r3, [sp, #16]
 80125e4:	eba0 000a 	sub.w	r0, r0, sl
 80125e8:	2240      	movs	r2, #64	@ 0x40
 80125ea:	4082      	lsls	r2, r0
 80125ec:	4313      	orrs	r3, r2
 80125ee:	3401      	adds	r4, #1
 80125f0:	9304      	str	r3, [sp, #16]
 80125f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125f6:	4829      	ldr	r0, [pc, #164]	@ (801269c <_vfiprintf_r+0x220>)
 80125f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80125fc:	2206      	movs	r2, #6
 80125fe:	f7ed fdff 	bl	8000200 <memchr>
 8012602:	2800      	cmp	r0, #0
 8012604:	d03f      	beq.n	8012686 <_vfiprintf_r+0x20a>
 8012606:	4b26      	ldr	r3, [pc, #152]	@ (80126a0 <_vfiprintf_r+0x224>)
 8012608:	bb1b      	cbnz	r3, 8012652 <_vfiprintf_r+0x1d6>
 801260a:	9b03      	ldr	r3, [sp, #12]
 801260c:	3307      	adds	r3, #7
 801260e:	f023 0307 	bic.w	r3, r3, #7
 8012612:	3308      	adds	r3, #8
 8012614:	9303      	str	r3, [sp, #12]
 8012616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012618:	443b      	add	r3, r7
 801261a:	9309      	str	r3, [sp, #36]	@ 0x24
 801261c:	e76a      	b.n	80124f4 <_vfiprintf_r+0x78>
 801261e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012622:	460c      	mov	r4, r1
 8012624:	2001      	movs	r0, #1
 8012626:	e7a8      	b.n	801257a <_vfiprintf_r+0xfe>
 8012628:	2300      	movs	r3, #0
 801262a:	3401      	adds	r4, #1
 801262c:	9305      	str	r3, [sp, #20]
 801262e:	4619      	mov	r1, r3
 8012630:	f04f 0c0a 	mov.w	ip, #10
 8012634:	4620      	mov	r0, r4
 8012636:	f810 2b01 	ldrb.w	r2, [r0], #1
 801263a:	3a30      	subs	r2, #48	@ 0x30
 801263c:	2a09      	cmp	r2, #9
 801263e:	d903      	bls.n	8012648 <_vfiprintf_r+0x1cc>
 8012640:	2b00      	cmp	r3, #0
 8012642:	d0c6      	beq.n	80125d2 <_vfiprintf_r+0x156>
 8012644:	9105      	str	r1, [sp, #20]
 8012646:	e7c4      	b.n	80125d2 <_vfiprintf_r+0x156>
 8012648:	fb0c 2101 	mla	r1, ip, r1, r2
 801264c:	4604      	mov	r4, r0
 801264e:	2301      	movs	r3, #1
 8012650:	e7f0      	b.n	8012634 <_vfiprintf_r+0x1b8>
 8012652:	ab03      	add	r3, sp, #12
 8012654:	9300      	str	r3, [sp, #0]
 8012656:	462a      	mov	r2, r5
 8012658:	4b12      	ldr	r3, [pc, #72]	@ (80126a4 <_vfiprintf_r+0x228>)
 801265a:	a904      	add	r1, sp, #16
 801265c:	4630      	mov	r0, r6
 801265e:	f7fd fde1 	bl	8010224 <_printf_float>
 8012662:	4607      	mov	r7, r0
 8012664:	1c78      	adds	r0, r7, #1
 8012666:	d1d6      	bne.n	8012616 <_vfiprintf_r+0x19a>
 8012668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801266a:	07d9      	lsls	r1, r3, #31
 801266c:	d405      	bmi.n	801267a <_vfiprintf_r+0x1fe>
 801266e:	89ab      	ldrh	r3, [r5, #12]
 8012670:	059a      	lsls	r2, r3, #22
 8012672:	d402      	bmi.n	801267a <_vfiprintf_r+0x1fe>
 8012674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012676:	f7fe fb55 	bl	8010d24 <__retarget_lock_release_recursive>
 801267a:	89ab      	ldrh	r3, [r5, #12]
 801267c:	065b      	lsls	r3, r3, #25
 801267e:	f53f af1f 	bmi.w	80124c0 <_vfiprintf_r+0x44>
 8012682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012684:	e71e      	b.n	80124c4 <_vfiprintf_r+0x48>
 8012686:	ab03      	add	r3, sp, #12
 8012688:	9300      	str	r3, [sp, #0]
 801268a:	462a      	mov	r2, r5
 801268c:	4b05      	ldr	r3, [pc, #20]	@ (80126a4 <_vfiprintf_r+0x228>)
 801268e:	a904      	add	r1, sp, #16
 8012690:	4630      	mov	r0, r6
 8012692:	f7fe f85f 	bl	8010754 <_printf_i>
 8012696:	e7e4      	b.n	8012662 <_vfiprintf_r+0x1e6>
 8012698:	080183c8 	.word	0x080183c8
 801269c:	080183d2 	.word	0x080183d2
 80126a0:	08010225 	.word	0x08010225
 80126a4:	08012457 	.word	0x08012457
 80126a8:	080183ce 	.word	0x080183ce

080126ac <__sflush_r>:
 80126ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126b4:	0716      	lsls	r6, r2, #28
 80126b6:	4605      	mov	r5, r0
 80126b8:	460c      	mov	r4, r1
 80126ba:	d454      	bmi.n	8012766 <__sflush_r+0xba>
 80126bc:	684b      	ldr	r3, [r1, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	dc02      	bgt.n	80126c8 <__sflush_r+0x1c>
 80126c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dd48      	ble.n	801275a <__sflush_r+0xae>
 80126c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126ca:	2e00      	cmp	r6, #0
 80126cc:	d045      	beq.n	801275a <__sflush_r+0xae>
 80126ce:	2300      	movs	r3, #0
 80126d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126d4:	682f      	ldr	r7, [r5, #0]
 80126d6:	6a21      	ldr	r1, [r4, #32]
 80126d8:	602b      	str	r3, [r5, #0]
 80126da:	d030      	beq.n	801273e <__sflush_r+0x92>
 80126dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126de:	89a3      	ldrh	r3, [r4, #12]
 80126e0:	0759      	lsls	r1, r3, #29
 80126e2:	d505      	bpl.n	80126f0 <__sflush_r+0x44>
 80126e4:	6863      	ldr	r3, [r4, #4]
 80126e6:	1ad2      	subs	r2, r2, r3
 80126e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80126ea:	b10b      	cbz	r3, 80126f0 <__sflush_r+0x44>
 80126ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126ee:	1ad2      	subs	r2, r2, r3
 80126f0:	2300      	movs	r3, #0
 80126f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126f4:	6a21      	ldr	r1, [r4, #32]
 80126f6:	4628      	mov	r0, r5
 80126f8:	47b0      	blx	r6
 80126fa:	1c43      	adds	r3, r0, #1
 80126fc:	89a3      	ldrh	r3, [r4, #12]
 80126fe:	d106      	bne.n	801270e <__sflush_r+0x62>
 8012700:	6829      	ldr	r1, [r5, #0]
 8012702:	291d      	cmp	r1, #29
 8012704:	d82b      	bhi.n	801275e <__sflush_r+0xb2>
 8012706:	4a2a      	ldr	r2, [pc, #168]	@ (80127b0 <__sflush_r+0x104>)
 8012708:	410a      	asrs	r2, r1
 801270a:	07d6      	lsls	r6, r2, #31
 801270c:	d427      	bmi.n	801275e <__sflush_r+0xb2>
 801270e:	2200      	movs	r2, #0
 8012710:	6062      	str	r2, [r4, #4]
 8012712:	04d9      	lsls	r1, r3, #19
 8012714:	6922      	ldr	r2, [r4, #16]
 8012716:	6022      	str	r2, [r4, #0]
 8012718:	d504      	bpl.n	8012724 <__sflush_r+0x78>
 801271a:	1c42      	adds	r2, r0, #1
 801271c:	d101      	bne.n	8012722 <__sflush_r+0x76>
 801271e:	682b      	ldr	r3, [r5, #0]
 8012720:	b903      	cbnz	r3, 8012724 <__sflush_r+0x78>
 8012722:	6560      	str	r0, [r4, #84]	@ 0x54
 8012724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012726:	602f      	str	r7, [r5, #0]
 8012728:	b1b9      	cbz	r1, 801275a <__sflush_r+0xae>
 801272a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801272e:	4299      	cmp	r1, r3
 8012730:	d002      	beq.n	8012738 <__sflush_r+0x8c>
 8012732:	4628      	mov	r0, r5
 8012734:	f7ff f954 	bl	80119e0 <_free_r>
 8012738:	2300      	movs	r3, #0
 801273a:	6363      	str	r3, [r4, #52]	@ 0x34
 801273c:	e00d      	b.n	801275a <__sflush_r+0xae>
 801273e:	2301      	movs	r3, #1
 8012740:	4628      	mov	r0, r5
 8012742:	47b0      	blx	r6
 8012744:	4602      	mov	r2, r0
 8012746:	1c50      	adds	r0, r2, #1
 8012748:	d1c9      	bne.n	80126de <__sflush_r+0x32>
 801274a:	682b      	ldr	r3, [r5, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d0c6      	beq.n	80126de <__sflush_r+0x32>
 8012750:	2b1d      	cmp	r3, #29
 8012752:	d001      	beq.n	8012758 <__sflush_r+0xac>
 8012754:	2b16      	cmp	r3, #22
 8012756:	d11e      	bne.n	8012796 <__sflush_r+0xea>
 8012758:	602f      	str	r7, [r5, #0]
 801275a:	2000      	movs	r0, #0
 801275c:	e022      	b.n	80127a4 <__sflush_r+0xf8>
 801275e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012762:	b21b      	sxth	r3, r3
 8012764:	e01b      	b.n	801279e <__sflush_r+0xf2>
 8012766:	690f      	ldr	r7, [r1, #16]
 8012768:	2f00      	cmp	r7, #0
 801276a:	d0f6      	beq.n	801275a <__sflush_r+0xae>
 801276c:	0793      	lsls	r3, r2, #30
 801276e:	680e      	ldr	r6, [r1, #0]
 8012770:	bf08      	it	eq
 8012772:	694b      	ldreq	r3, [r1, #20]
 8012774:	600f      	str	r7, [r1, #0]
 8012776:	bf18      	it	ne
 8012778:	2300      	movne	r3, #0
 801277a:	eba6 0807 	sub.w	r8, r6, r7
 801277e:	608b      	str	r3, [r1, #8]
 8012780:	f1b8 0f00 	cmp.w	r8, #0
 8012784:	dde9      	ble.n	801275a <__sflush_r+0xae>
 8012786:	6a21      	ldr	r1, [r4, #32]
 8012788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801278a:	4643      	mov	r3, r8
 801278c:	463a      	mov	r2, r7
 801278e:	4628      	mov	r0, r5
 8012790:	47b0      	blx	r6
 8012792:	2800      	cmp	r0, #0
 8012794:	dc08      	bgt.n	80127a8 <__sflush_r+0xfc>
 8012796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801279a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801279e:	81a3      	strh	r3, [r4, #12]
 80127a0:	f04f 30ff 	mov.w	r0, #4294967295
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	4407      	add	r7, r0
 80127aa:	eba8 0800 	sub.w	r8, r8, r0
 80127ae:	e7e7      	b.n	8012780 <__sflush_r+0xd4>
 80127b0:	dfbffffe 	.word	0xdfbffffe

080127b4 <_fflush_r>:
 80127b4:	b538      	push	{r3, r4, r5, lr}
 80127b6:	690b      	ldr	r3, [r1, #16]
 80127b8:	4605      	mov	r5, r0
 80127ba:	460c      	mov	r4, r1
 80127bc:	b913      	cbnz	r3, 80127c4 <_fflush_r+0x10>
 80127be:	2500      	movs	r5, #0
 80127c0:	4628      	mov	r0, r5
 80127c2:	bd38      	pop	{r3, r4, r5, pc}
 80127c4:	b118      	cbz	r0, 80127ce <_fflush_r+0x1a>
 80127c6:	6a03      	ldr	r3, [r0, #32]
 80127c8:	b90b      	cbnz	r3, 80127ce <_fflush_r+0x1a>
 80127ca:	f7fe f96f 	bl	8010aac <__sinit>
 80127ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d0f3      	beq.n	80127be <_fflush_r+0xa>
 80127d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80127d8:	07d0      	lsls	r0, r2, #31
 80127da:	d404      	bmi.n	80127e6 <_fflush_r+0x32>
 80127dc:	0599      	lsls	r1, r3, #22
 80127de:	d402      	bmi.n	80127e6 <_fflush_r+0x32>
 80127e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127e2:	f7fe fa9e 	bl	8010d22 <__retarget_lock_acquire_recursive>
 80127e6:	4628      	mov	r0, r5
 80127e8:	4621      	mov	r1, r4
 80127ea:	f7ff ff5f 	bl	80126ac <__sflush_r>
 80127ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127f0:	07da      	lsls	r2, r3, #31
 80127f2:	4605      	mov	r5, r0
 80127f4:	d4e4      	bmi.n	80127c0 <_fflush_r+0xc>
 80127f6:	89a3      	ldrh	r3, [r4, #12]
 80127f8:	059b      	lsls	r3, r3, #22
 80127fa:	d4e1      	bmi.n	80127c0 <_fflush_r+0xc>
 80127fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127fe:	f7fe fa91 	bl	8010d24 <__retarget_lock_release_recursive>
 8012802:	e7dd      	b.n	80127c0 <_fflush_r+0xc>

08012804 <__swbuf_r>:
 8012804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012806:	460e      	mov	r6, r1
 8012808:	4614      	mov	r4, r2
 801280a:	4605      	mov	r5, r0
 801280c:	b118      	cbz	r0, 8012816 <__swbuf_r+0x12>
 801280e:	6a03      	ldr	r3, [r0, #32]
 8012810:	b90b      	cbnz	r3, 8012816 <__swbuf_r+0x12>
 8012812:	f7fe f94b 	bl	8010aac <__sinit>
 8012816:	69a3      	ldr	r3, [r4, #24]
 8012818:	60a3      	str	r3, [r4, #8]
 801281a:	89a3      	ldrh	r3, [r4, #12]
 801281c:	071a      	lsls	r2, r3, #28
 801281e:	d501      	bpl.n	8012824 <__swbuf_r+0x20>
 8012820:	6923      	ldr	r3, [r4, #16]
 8012822:	b943      	cbnz	r3, 8012836 <__swbuf_r+0x32>
 8012824:	4621      	mov	r1, r4
 8012826:	4628      	mov	r0, r5
 8012828:	f000 f82a 	bl	8012880 <__swsetup_r>
 801282c:	b118      	cbz	r0, 8012836 <__swbuf_r+0x32>
 801282e:	f04f 37ff 	mov.w	r7, #4294967295
 8012832:	4638      	mov	r0, r7
 8012834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	6922      	ldr	r2, [r4, #16]
 801283a:	1a98      	subs	r0, r3, r2
 801283c:	6963      	ldr	r3, [r4, #20]
 801283e:	b2f6      	uxtb	r6, r6
 8012840:	4283      	cmp	r3, r0
 8012842:	4637      	mov	r7, r6
 8012844:	dc05      	bgt.n	8012852 <__swbuf_r+0x4e>
 8012846:	4621      	mov	r1, r4
 8012848:	4628      	mov	r0, r5
 801284a:	f7ff ffb3 	bl	80127b4 <_fflush_r>
 801284e:	2800      	cmp	r0, #0
 8012850:	d1ed      	bne.n	801282e <__swbuf_r+0x2a>
 8012852:	68a3      	ldr	r3, [r4, #8]
 8012854:	3b01      	subs	r3, #1
 8012856:	60a3      	str	r3, [r4, #8]
 8012858:	6823      	ldr	r3, [r4, #0]
 801285a:	1c5a      	adds	r2, r3, #1
 801285c:	6022      	str	r2, [r4, #0]
 801285e:	701e      	strb	r6, [r3, #0]
 8012860:	6962      	ldr	r2, [r4, #20]
 8012862:	1c43      	adds	r3, r0, #1
 8012864:	429a      	cmp	r2, r3
 8012866:	d004      	beq.n	8012872 <__swbuf_r+0x6e>
 8012868:	89a3      	ldrh	r3, [r4, #12]
 801286a:	07db      	lsls	r3, r3, #31
 801286c:	d5e1      	bpl.n	8012832 <__swbuf_r+0x2e>
 801286e:	2e0a      	cmp	r6, #10
 8012870:	d1df      	bne.n	8012832 <__swbuf_r+0x2e>
 8012872:	4621      	mov	r1, r4
 8012874:	4628      	mov	r0, r5
 8012876:	f7ff ff9d 	bl	80127b4 <_fflush_r>
 801287a:	2800      	cmp	r0, #0
 801287c:	d0d9      	beq.n	8012832 <__swbuf_r+0x2e>
 801287e:	e7d6      	b.n	801282e <__swbuf_r+0x2a>

08012880 <__swsetup_r>:
 8012880:	b538      	push	{r3, r4, r5, lr}
 8012882:	4b29      	ldr	r3, [pc, #164]	@ (8012928 <__swsetup_r+0xa8>)
 8012884:	4605      	mov	r5, r0
 8012886:	6818      	ldr	r0, [r3, #0]
 8012888:	460c      	mov	r4, r1
 801288a:	b118      	cbz	r0, 8012894 <__swsetup_r+0x14>
 801288c:	6a03      	ldr	r3, [r0, #32]
 801288e:	b90b      	cbnz	r3, 8012894 <__swsetup_r+0x14>
 8012890:	f7fe f90c 	bl	8010aac <__sinit>
 8012894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012898:	0719      	lsls	r1, r3, #28
 801289a:	d422      	bmi.n	80128e2 <__swsetup_r+0x62>
 801289c:	06da      	lsls	r2, r3, #27
 801289e:	d407      	bmi.n	80128b0 <__swsetup_r+0x30>
 80128a0:	2209      	movs	r2, #9
 80128a2:	602a      	str	r2, [r5, #0]
 80128a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128a8:	81a3      	strh	r3, [r4, #12]
 80128aa:	f04f 30ff 	mov.w	r0, #4294967295
 80128ae:	e033      	b.n	8012918 <__swsetup_r+0x98>
 80128b0:	0758      	lsls	r0, r3, #29
 80128b2:	d512      	bpl.n	80128da <__swsetup_r+0x5a>
 80128b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80128b6:	b141      	cbz	r1, 80128ca <__swsetup_r+0x4a>
 80128b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80128bc:	4299      	cmp	r1, r3
 80128be:	d002      	beq.n	80128c6 <__swsetup_r+0x46>
 80128c0:	4628      	mov	r0, r5
 80128c2:	f7ff f88d 	bl	80119e0 <_free_r>
 80128c6:	2300      	movs	r3, #0
 80128c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80128ca:	89a3      	ldrh	r3, [r4, #12]
 80128cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80128d0:	81a3      	strh	r3, [r4, #12]
 80128d2:	2300      	movs	r3, #0
 80128d4:	6063      	str	r3, [r4, #4]
 80128d6:	6923      	ldr	r3, [r4, #16]
 80128d8:	6023      	str	r3, [r4, #0]
 80128da:	89a3      	ldrh	r3, [r4, #12]
 80128dc:	f043 0308 	orr.w	r3, r3, #8
 80128e0:	81a3      	strh	r3, [r4, #12]
 80128e2:	6923      	ldr	r3, [r4, #16]
 80128e4:	b94b      	cbnz	r3, 80128fa <__swsetup_r+0x7a>
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80128ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80128f0:	d003      	beq.n	80128fa <__swsetup_r+0x7a>
 80128f2:	4621      	mov	r1, r4
 80128f4:	4628      	mov	r0, r5
 80128f6:	f000 f8eb 	bl	8012ad0 <__smakebuf_r>
 80128fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128fe:	f013 0201 	ands.w	r2, r3, #1
 8012902:	d00a      	beq.n	801291a <__swsetup_r+0x9a>
 8012904:	2200      	movs	r2, #0
 8012906:	60a2      	str	r2, [r4, #8]
 8012908:	6962      	ldr	r2, [r4, #20]
 801290a:	4252      	negs	r2, r2
 801290c:	61a2      	str	r2, [r4, #24]
 801290e:	6922      	ldr	r2, [r4, #16]
 8012910:	b942      	cbnz	r2, 8012924 <__swsetup_r+0xa4>
 8012912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012916:	d1c5      	bne.n	80128a4 <__swsetup_r+0x24>
 8012918:	bd38      	pop	{r3, r4, r5, pc}
 801291a:	0799      	lsls	r1, r3, #30
 801291c:	bf58      	it	pl
 801291e:	6962      	ldrpl	r2, [r4, #20]
 8012920:	60a2      	str	r2, [r4, #8]
 8012922:	e7f4      	b.n	801290e <__swsetup_r+0x8e>
 8012924:	2000      	movs	r0, #0
 8012926:	e7f7      	b.n	8012918 <__swsetup_r+0x98>
 8012928:	2000003c 	.word	0x2000003c

0801292c <memmove>:
 801292c:	4288      	cmp	r0, r1
 801292e:	b510      	push	{r4, lr}
 8012930:	eb01 0402 	add.w	r4, r1, r2
 8012934:	d902      	bls.n	801293c <memmove+0x10>
 8012936:	4284      	cmp	r4, r0
 8012938:	4623      	mov	r3, r4
 801293a:	d807      	bhi.n	801294c <memmove+0x20>
 801293c:	1e43      	subs	r3, r0, #1
 801293e:	42a1      	cmp	r1, r4
 8012940:	d008      	beq.n	8012954 <memmove+0x28>
 8012942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012946:	f803 2f01 	strb.w	r2, [r3, #1]!
 801294a:	e7f8      	b.n	801293e <memmove+0x12>
 801294c:	4402      	add	r2, r0
 801294e:	4601      	mov	r1, r0
 8012950:	428a      	cmp	r2, r1
 8012952:	d100      	bne.n	8012956 <memmove+0x2a>
 8012954:	bd10      	pop	{r4, pc}
 8012956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801295a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801295e:	e7f7      	b.n	8012950 <memmove+0x24>

08012960 <__assert_func>:
 8012960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012962:	4614      	mov	r4, r2
 8012964:	461a      	mov	r2, r3
 8012966:	4b09      	ldr	r3, [pc, #36]	@ (801298c <__assert_func+0x2c>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	4605      	mov	r5, r0
 801296c:	68d8      	ldr	r0, [r3, #12]
 801296e:	b954      	cbnz	r4, 8012986 <__assert_func+0x26>
 8012970:	4b07      	ldr	r3, [pc, #28]	@ (8012990 <__assert_func+0x30>)
 8012972:	461c      	mov	r4, r3
 8012974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012978:	9100      	str	r1, [sp, #0]
 801297a:	462b      	mov	r3, r5
 801297c:	4905      	ldr	r1, [pc, #20]	@ (8012994 <__assert_func+0x34>)
 801297e:	f000 f86f 	bl	8012a60 <fiprintf>
 8012982:	f000 f903 	bl	8012b8c <abort>
 8012986:	4b04      	ldr	r3, [pc, #16]	@ (8012998 <__assert_func+0x38>)
 8012988:	e7f4      	b.n	8012974 <__assert_func+0x14>
 801298a:	bf00      	nop
 801298c:	2000003c 	.word	0x2000003c
 8012990:	0801841e 	.word	0x0801841e
 8012994:	080183f0 	.word	0x080183f0
 8012998:	080183e3 	.word	0x080183e3

0801299c <_calloc_r>:
 801299c:	b570      	push	{r4, r5, r6, lr}
 801299e:	fba1 5402 	umull	r5, r4, r1, r2
 80129a2:	b93c      	cbnz	r4, 80129b4 <_calloc_r+0x18>
 80129a4:	4629      	mov	r1, r5
 80129a6:	f7fd fb11 	bl	800ffcc <_malloc_r>
 80129aa:	4606      	mov	r6, r0
 80129ac:	b928      	cbnz	r0, 80129ba <_calloc_r+0x1e>
 80129ae:	2600      	movs	r6, #0
 80129b0:	4630      	mov	r0, r6
 80129b2:	bd70      	pop	{r4, r5, r6, pc}
 80129b4:	220c      	movs	r2, #12
 80129b6:	6002      	str	r2, [r0, #0]
 80129b8:	e7f9      	b.n	80129ae <_calloc_r+0x12>
 80129ba:	462a      	mov	r2, r5
 80129bc:	4621      	mov	r1, r4
 80129be:	f7fe f922 	bl	8010c06 <memset>
 80129c2:	e7f5      	b.n	80129b0 <_calloc_r+0x14>

080129c4 <__ascii_mbtowc>:
 80129c4:	b082      	sub	sp, #8
 80129c6:	b901      	cbnz	r1, 80129ca <__ascii_mbtowc+0x6>
 80129c8:	a901      	add	r1, sp, #4
 80129ca:	b142      	cbz	r2, 80129de <__ascii_mbtowc+0x1a>
 80129cc:	b14b      	cbz	r3, 80129e2 <__ascii_mbtowc+0x1e>
 80129ce:	7813      	ldrb	r3, [r2, #0]
 80129d0:	600b      	str	r3, [r1, #0]
 80129d2:	7812      	ldrb	r2, [r2, #0]
 80129d4:	1e10      	subs	r0, r2, #0
 80129d6:	bf18      	it	ne
 80129d8:	2001      	movne	r0, #1
 80129da:	b002      	add	sp, #8
 80129dc:	4770      	bx	lr
 80129de:	4610      	mov	r0, r2
 80129e0:	e7fb      	b.n	80129da <__ascii_mbtowc+0x16>
 80129e2:	f06f 0001 	mvn.w	r0, #1
 80129e6:	e7f8      	b.n	80129da <__ascii_mbtowc+0x16>

080129e8 <_realloc_r>:
 80129e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ec:	4680      	mov	r8, r0
 80129ee:	4615      	mov	r5, r2
 80129f0:	460c      	mov	r4, r1
 80129f2:	b921      	cbnz	r1, 80129fe <_realloc_r+0x16>
 80129f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129f8:	4611      	mov	r1, r2
 80129fa:	f7fd bae7 	b.w	800ffcc <_malloc_r>
 80129fe:	b92a      	cbnz	r2, 8012a0c <_realloc_r+0x24>
 8012a00:	f7fe ffee 	bl	80119e0 <_free_r>
 8012a04:	2400      	movs	r4, #0
 8012a06:	4620      	mov	r0, r4
 8012a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a0c:	f000 f8c5 	bl	8012b9a <_malloc_usable_size_r>
 8012a10:	4285      	cmp	r5, r0
 8012a12:	4606      	mov	r6, r0
 8012a14:	d802      	bhi.n	8012a1c <_realloc_r+0x34>
 8012a16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012a1a:	d8f4      	bhi.n	8012a06 <_realloc_r+0x1e>
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	4640      	mov	r0, r8
 8012a20:	f7fd fad4 	bl	800ffcc <_malloc_r>
 8012a24:	4607      	mov	r7, r0
 8012a26:	2800      	cmp	r0, #0
 8012a28:	d0ec      	beq.n	8012a04 <_realloc_r+0x1c>
 8012a2a:	42b5      	cmp	r5, r6
 8012a2c:	462a      	mov	r2, r5
 8012a2e:	4621      	mov	r1, r4
 8012a30:	bf28      	it	cs
 8012a32:	4632      	movcs	r2, r6
 8012a34:	f7fe f977 	bl	8010d26 <memcpy>
 8012a38:	4621      	mov	r1, r4
 8012a3a:	4640      	mov	r0, r8
 8012a3c:	f7fe ffd0 	bl	80119e0 <_free_r>
 8012a40:	463c      	mov	r4, r7
 8012a42:	e7e0      	b.n	8012a06 <_realloc_r+0x1e>

08012a44 <__ascii_wctomb>:
 8012a44:	4603      	mov	r3, r0
 8012a46:	4608      	mov	r0, r1
 8012a48:	b141      	cbz	r1, 8012a5c <__ascii_wctomb+0x18>
 8012a4a:	2aff      	cmp	r2, #255	@ 0xff
 8012a4c:	d904      	bls.n	8012a58 <__ascii_wctomb+0x14>
 8012a4e:	228a      	movs	r2, #138	@ 0x8a
 8012a50:	601a      	str	r2, [r3, #0]
 8012a52:	f04f 30ff 	mov.w	r0, #4294967295
 8012a56:	4770      	bx	lr
 8012a58:	700a      	strb	r2, [r1, #0]
 8012a5a:	2001      	movs	r0, #1
 8012a5c:	4770      	bx	lr
	...

08012a60 <fiprintf>:
 8012a60:	b40e      	push	{r1, r2, r3}
 8012a62:	b503      	push	{r0, r1, lr}
 8012a64:	4601      	mov	r1, r0
 8012a66:	ab03      	add	r3, sp, #12
 8012a68:	4805      	ldr	r0, [pc, #20]	@ (8012a80 <fiprintf+0x20>)
 8012a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a6e:	6800      	ldr	r0, [r0, #0]
 8012a70:	9301      	str	r3, [sp, #4]
 8012a72:	f7ff fd03 	bl	801247c <_vfiprintf_r>
 8012a76:	b002      	add	sp, #8
 8012a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a7c:	b003      	add	sp, #12
 8012a7e:	4770      	bx	lr
 8012a80:	2000003c 	.word	0x2000003c

08012a84 <__swhatbuf_r>:
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	460c      	mov	r4, r1
 8012a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a8c:	2900      	cmp	r1, #0
 8012a8e:	b096      	sub	sp, #88	@ 0x58
 8012a90:	4615      	mov	r5, r2
 8012a92:	461e      	mov	r6, r3
 8012a94:	da0d      	bge.n	8012ab2 <__swhatbuf_r+0x2e>
 8012a96:	89a3      	ldrh	r3, [r4, #12]
 8012a98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a9c:	f04f 0100 	mov.w	r1, #0
 8012aa0:	bf14      	ite	ne
 8012aa2:	2340      	movne	r3, #64	@ 0x40
 8012aa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	6031      	str	r1, [r6, #0]
 8012aac:	602b      	str	r3, [r5, #0]
 8012aae:	b016      	add	sp, #88	@ 0x58
 8012ab0:	bd70      	pop	{r4, r5, r6, pc}
 8012ab2:	466a      	mov	r2, sp
 8012ab4:	f000 f848 	bl	8012b48 <_fstat_r>
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	dbec      	blt.n	8012a96 <__swhatbuf_r+0x12>
 8012abc:	9901      	ldr	r1, [sp, #4]
 8012abe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012ac2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012ac6:	4259      	negs	r1, r3
 8012ac8:	4159      	adcs	r1, r3
 8012aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012ace:	e7eb      	b.n	8012aa8 <__swhatbuf_r+0x24>

08012ad0 <__smakebuf_r>:
 8012ad0:	898b      	ldrh	r3, [r1, #12]
 8012ad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ad4:	079d      	lsls	r5, r3, #30
 8012ad6:	4606      	mov	r6, r0
 8012ad8:	460c      	mov	r4, r1
 8012ada:	d507      	bpl.n	8012aec <__smakebuf_r+0x1c>
 8012adc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012ae0:	6023      	str	r3, [r4, #0]
 8012ae2:	6123      	str	r3, [r4, #16]
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	6163      	str	r3, [r4, #20]
 8012ae8:	b003      	add	sp, #12
 8012aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aec:	ab01      	add	r3, sp, #4
 8012aee:	466a      	mov	r2, sp
 8012af0:	f7ff ffc8 	bl	8012a84 <__swhatbuf_r>
 8012af4:	9f00      	ldr	r7, [sp, #0]
 8012af6:	4605      	mov	r5, r0
 8012af8:	4639      	mov	r1, r7
 8012afa:	4630      	mov	r0, r6
 8012afc:	f7fd fa66 	bl	800ffcc <_malloc_r>
 8012b00:	b948      	cbnz	r0, 8012b16 <__smakebuf_r+0x46>
 8012b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b06:	059a      	lsls	r2, r3, #22
 8012b08:	d4ee      	bmi.n	8012ae8 <__smakebuf_r+0x18>
 8012b0a:	f023 0303 	bic.w	r3, r3, #3
 8012b0e:	f043 0302 	orr.w	r3, r3, #2
 8012b12:	81a3      	strh	r3, [r4, #12]
 8012b14:	e7e2      	b.n	8012adc <__smakebuf_r+0xc>
 8012b16:	89a3      	ldrh	r3, [r4, #12]
 8012b18:	6020      	str	r0, [r4, #0]
 8012b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b1e:	81a3      	strh	r3, [r4, #12]
 8012b20:	9b01      	ldr	r3, [sp, #4]
 8012b22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012b26:	b15b      	cbz	r3, 8012b40 <__smakebuf_r+0x70>
 8012b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	f000 f81d 	bl	8012b6c <_isatty_r>
 8012b32:	b128      	cbz	r0, 8012b40 <__smakebuf_r+0x70>
 8012b34:	89a3      	ldrh	r3, [r4, #12]
 8012b36:	f023 0303 	bic.w	r3, r3, #3
 8012b3a:	f043 0301 	orr.w	r3, r3, #1
 8012b3e:	81a3      	strh	r3, [r4, #12]
 8012b40:	89a3      	ldrh	r3, [r4, #12]
 8012b42:	431d      	orrs	r5, r3
 8012b44:	81a5      	strh	r5, [r4, #12]
 8012b46:	e7cf      	b.n	8012ae8 <__smakebuf_r+0x18>

08012b48 <_fstat_r>:
 8012b48:	b538      	push	{r3, r4, r5, lr}
 8012b4a:	4d07      	ldr	r5, [pc, #28]	@ (8012b68 <_fstat_r+0x20>)
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	4604      	mov	r4, r0
 8012b50:	4608      	mov	r0, r1
 8012b52:	4611      	mov	r1, r2
 8012b54:	602b      	str	r3, [r5, #0]
 8012b56:	f7f2 f8fd 	bl	8004d54 <_fstat>
 8012b5a:	1c43      	adds	r3, r0, #1
 8012b5c:	d102      	bne.n	8012b64 <_fstat_r+0x1c>
 8012b5e:	682b      	ldr	r3, [r5, #0]
 8012b60:	b103      	cbz	r3, 8012b64 <_fstat_r+0x1c>
 8012b62:	6023      	str	r3, [r4, #0]
 8012b64:	bd38      	pop	{r3, r4, r5, pc}
 8012b66:	bf00      	nop
 8012b68:	20000cf4 	.word	0x20000cf4

08012b6c <_isatty_r>:
 8012b6c:	b538      	push	{r3, r4, r5, lr}
 8012b6e:	4d06      	ldr	r5, [pc, #24]	@ (8012b88 <_isatty_r+0x1c>)
 8012b70:	2300      	movs	r3, #0
 8012b72:	4604      	mov	r4, r0
 8012b74:	4608      	mov	r0, r1
 8012b76:	602b      	str	r3, [r5, #0]
 8012b78:	f7f2 f8fc 	bl	8004d74 <_isatty>
 8012b7c:	1c43      	adds	r3, r0, #1
 8012b7e:	d102      	bne.n	8012b86 <_isatty_r+0x1a>
 8012b80:	682b      	ldr	r3, [r5, #0]
 8012b82:	b103      	cbz	r3, 8012b86 <_isatty_r+0x1a>
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	bd38      	pop	{r3, r4, r5, pc}
 8012b88:	20000cf4 	.word	0x20000cf4

08012b8c <abort>:
 8012b8c:	b508      	push	{r3, lr}
 8012b8e:	2006      	movs	r0, #6
 8012b90:	f000 f834 	bl	8012bfc <raise>
 8012b94:	2001      	movs	r0, #1
 8012b96:	f7f2 f88d 	bl	8004cb4 <_exit>

08012b9a <_malloc_usable_size_r>:
 8012b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b9e:	1f18      	subs	r0, r3, #4
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	bfbc      	itt	lt
 8012ba4:	580b      	ldrlt	r3, [r1, r0]
 8012ba6:	18c0      	addlt	r0, r0, r3
 8012ba8:	4770      	bx	lr

08012baa <_raise_r>:
 8012baa:	291f      	cmp	r1, #31
 8012bac:	b538      	push	{r3, r4, r5, lr}
 8012bae:	4605      	mov	r5, r0
 8012bb0:	460c      	mov	r4, r1
 8012bb2:	d904      	bls.n	8012bbe <_raise_r+0x14>
 8012bb4:	2316      	movs	r3, #22
 8012bb6:	6003      	str	r3, [r0, #0]
 8012bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bbc:	bd38      	pop	{r3, r4, r5, pc}
 8012bbe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012bc0:	b112      	cbz	r2, 8012bc8 <_raise_r+0x1e>
 8012bc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bc6:	b94b      	cbnz	r3, 8012bdc <_raise_r+0x32>
 8012bc8:	4628      	mov	r0, r5
 8012bca:	f000 f831 	bl	8012c30 <_getpid_r>
 8012bce:	4622      	mov	r2, r4
 8012bd0:	4601      	mov	r1, r0
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bd8:	f000 b818 	b.w	8012c0c <_kill_r>
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d00a      	beq.n	8012bf6 <_raise_r+0x4c>
 8012be0:	1c59      	adds	r1, r3, #1
 8012be2:	d103      	bne.n	8012bec <_raise_r+0x42>
 8012be4:	2316      	movs	r3, #22
 8012be6:	6003      	str	r3, [r0, #0]
 8012be8:	2001      	movs	r0, #1
 8012bea:	e7e7      	b.n	8012bbc <_raise_r+0x12>
 8012bec:	2100      	movs	r1, #0
 8012bee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	4798      	blx	r3
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	e7e0      	b.n	8012bbc <_raise_r+0x12>
	...

08012bfc <raise>:
 8012bfc:	4b02      	ldr	r3, [pc, #8]	@ (8012c08 <raise+0xc>)
 8012bfe:	4601      	mov	r1, r0
 8012c00:	6818      	ldr	r0, [r3, #0]
 8012c02:	f7ff bfd2 	b.w	8012baa <_raise_r>
 8012c06:	bf00      	nop
 8012c08:	2000003c 	.word	0x2000003c

08012c0c <_kill_r>:
 8012c0c:	b538      	push	{r3, r4, r5, lr}
 8012c0e:	4d07      	ldr	r5, [pc, #28]	@ (8012c2c <_kill_r+0x20>)
 8012c10:	2300      	movs	r3, #0
 8012c12:	4604      	mov	r4, r0
 8012c14:	4608      	mov	r0, r1
 8012c16:	4611      	mov	r1, r2
 8012c18:	602b      	str	r3, [r5, #0]
 8012c1a:	f7f2 f83b 	bl	8004c94 <_kill>
 8012c1e:	1c43      	adds	r3, r0, #1
 8012c20:	d102      	bne.n	8012c28 <_kill_r+0x1c>
 8012c22:	682b      	ldr	r3, [r5, #0]
 8012c24:	b103      	cbz	r3, 8012c28 <_kill_r+0x1c>
 8012c26:	6023      	str	r3, [r4, #0]
 8012c28:	bd38      	pop	{r3, r4, r5, pc}
 8012c2a:	bf00      	nop
 8012c2c:	20000cf4 	.word	0x20000cf4

08012c30 <_getpid_r>:
 8012c30:	f7f2 b828 	b.w	8004c84 <_getpid>

08012c34 <_init>:
 8012c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c36:	bf00      	nop
 8012c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c3a:	bc08      	pop	{r3}
 8012c3c:	469e      	mov	lr, r3
 8012c3e:	4770      	bx	lr

08012c40 <_fini>:
 8012c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c42:	bf00      	nop
 8012c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c46:	bc08      	pop	{r3}
 8012c48:	469e      	mov	lr, r3
 8012c4a:	4770      	bx	lr

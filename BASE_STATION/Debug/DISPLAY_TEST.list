
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d28  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005864  08010ee8  08010ee8  00020ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801674c  0801674c  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801674c  0801674c  0002674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016754  08016754  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016754  08016754  00026754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016758  08016758  00026758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801675c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e8  200001f4  08016950  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bdc  08016950  00030bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024c8c  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043f1  00000000  00000000  00054ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002108  00000000  00000000  000592e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019d3  00000000  00000000  0005b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fda9  00000000  00000000  0005cdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000279d8  00000000  00000000  0008cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001292bc  00000000  00000000  000b4544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a044  00000000  00000000  001dd800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001e7844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08010ed0 	.word	0x08010ed0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	08010ed0 	.word	0x08010ed0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <initTempHumSensor+0x1c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000210 	.word	0x20000210

08000ef4 <req_measurements>:

// send command to sensor
void req_measurements() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000efa:	f640 532c 	movw	r3, #3372	; 0xd2c
 8000efe:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <req_measurements+0x28>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	1d3a      	adds	r2, r7, #4
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	2188      	movs	r1, #136	; 0x88
 8000f10:	f006 fbbc 	bl	800768c <HAL_I2C_Master_Transmit>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000210 	.word	0x20000210

08000f20 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[6];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 6, 1000);
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <read_raw_measurements+0x58>)
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	463a      	mov	r2, r7
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2306      	movs	r3, #6
 8000f34:	2189      	movs	r1, #137	; 0x89
 8000f36:	f006 fcc1 	bl	80078bc <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000f3a:	783b      	ldrb	r3, [r7, #0]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	813b      	strh	r3, [r7, #8]
	data.hum = buf[3] << 8 | buf[4];
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	793b      	ldrb	r3, [r7, #4]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	817b      	strh	r3, [r7, #10]
	return data;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	2300      	movs	r3, #0
 8000f64:	89ba      	ldrh	r2, [r7, #12]
 8000f66:	f362 030f 	bfi	r3, r2, #0, #16
 8000f6a:	89fa      	ldrh	r2, [r7, #14]
 8000f6c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000210 	.word	0x20000210

08000f7c <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 8000f82:	f7ff ffb7 	bl	8000ef4 <req_measurements>
	raw_data = read_raw_measurements();
 8000f86:	f7ff ffcb 	bl	8000f20 <read_raw_measurements>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 8000f8e:	8abb      	ldrh	r3, [r7, #20]
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 8000f92:	8afb      	ldrh	r3, [r7, #22]
 8000f94:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001004 <get_temp_hum+0x88>
 8000fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001008 <get_temp_hum+0x8c>
 8000fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800100c <get_temp_hum+0x90>
 8000fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001004 <get_temp_hum+0x88>
 8000fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001010 <get_temp_hum+0x94>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd6:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	ee07 2a10 	vmov	s14, r2
 8000ff2:	ee07 3a90 	vmov	s15, r3
}
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	477fff00 	.word	0x477fff00
 8001008:	439d8000 	.word	0x439d8000
 800100c:	42340000 	.word	0x42340000
 8001010:	42c80000 	.word	0x42c80000

08001014 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 8001014:	b084      	sub	sp, #16
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
 800101a:	f107 0c08 	add.w	ip, r7, #8
 800101e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <JOYSTICK_INIT+0x2c>)
 8001024:	4618      	mov	r0, r3
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2254      	movs	r2, #84	; 0x54
 800102c:	4619      	mov	r1, r3
 800102e:	f00d ff96 	bl	800ef5e <memcpy>
	}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800103a:	b004      	add	sp, #16
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000218 	.word	0x20000218

08001044 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	811a      	strh	r2, [r3, #8]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 800106c:	f107 0214 	add.w	r2, r7, #20
 8001070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <readRegister+0x78>)
 800107c:	f006 fb06 	bl	800768c <HAL_I2C_Master_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <readRegister+0x7c>)
 8001086:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 8001088:	f107 0208 	add.w	r2, r7, #8
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <readRegister+0x78>)
 8001098:	f006 fc10 	bl	80078bc <HAL_I2C_Master_Receive>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <readRegister+0x7c>)
 80010a2:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <readRegister+0x7c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <readRegister+0x6e>
    }
    return buf0[0];
 80010b0:	7a3b      	ldrb	r3, [r7, #8]
  }
 80010b2:	4618      	mov	r0, r3
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000218 	.word	0x20000218
 80010c0:	20000214 	.word	0x20000214

080010c4 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 80010ca:	2003      	movs	r0, #3
 80010cc:	f7ff ffba 	bl	8001044 <readRegister>
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 80010d4:	2004      	movs	r0, #4
 80010d6:	f7ff ffb5 	bl	8001044 <readRegister>
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	021a      	lsls	r2, r3, #8
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	119b      	asrs	r3, r3, #6
 80010e8:	b29b      	uxth	r3, r3
  }
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 80010f8:	2005      	movs	r0, #5
 80010fa:	f7ff ffa3 	bl	8001044 <readRegister>
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 8001102:	2006      	movs	r0, #6
 8001104:	f7ff ff9e 	bl	8001044 <readRegister>
 8001108:	4603      	mov	r3, r0
 800110a:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	021a      	lsls	r2, r3, #8
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	4313      	orrs	r3, r2
 8001114:	119b      	asrs	r3, r3, #6
 8001116:	b29b      	uxth	r3, r3
  }
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 8001126:	f7ff ffcd 	bl	80010c4 <getHorizontal>
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 800112e:	f7ff ffe0 	bl	80010f2 <getVertical>
 8001132:	4603      	mov	r3, r0
 8001134:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	2bfa      	cmp	r3, #250	; 0xfa
 800113a:	d906      	bls.n	800114a <threshold+0x2a>
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001142:	4293      	cmp	r3, r2
 8001144:	d801      	bhi.n	800114a <threshold+0x2a>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <threshold+0x2c>
 800114a:	2300      	movs	r3, #0
 800114c:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	2bf9      	cmp	r3, #249	; 0xf9
 8001152:	d804      	bhi.n	800115e <threshold+0x3e>
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <threshold+0x3e>
		  return 1;
 800115a:	2301      	movs	r3, #1
 800115c:	e00a      	b.n	8001174 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001164:	4293      	cmp	r3, r2
 8001166:	d904      	bls.n	8001172 <threshold+0x52>
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <threshold+0x52>
		  return 2;
 800116e:	2302      	movs	r3, #2
 8001170:	e000      	b.n	8001174 <threshold+0x54>
	  }
	  return 0;
 8001172:	2300      	movs	r3, #0
  }
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
    int val = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 8001186:	2120      	movs	r1, #32
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f006 f9b2 	bl	80074f4 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <RowChecker+0x1e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e000      	b.n	800119c <RowChecker+0x20>
 800119a:	2301      	movs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a4:	f006 f9a6 	bl	80074f4 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <RowChecker+0x36>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	e000      	b.n	80011b4 <RowChecker+0x38>
 80011b2:	2302      	movs	r3, #2
 80011b4:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f006 f99a 	bl	80074f4 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <RowChecker+0x4e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	e000      	b.n	80011cc <RowChecker+0x50>
 80011ca:	2303      	movs	r3, #3
 80011cc:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <RowChecker+0x74>)
 80011d4:	f006 f98e 	bl	80074f4 <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <RowChecker+0x66>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	e000      	b.n	80011e4 <RowChecker+0x68>
 80011e2:	2304      	movs	r3, #4
 80011e4:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 80011e6:	687b      	ldr	r3, [r7, #4]
  }
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	48000c00 	.word	0x48000c00

080011f4 <keypad_init>:

void keypad_init(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <keypad_init+0x38>)
 8001200:	f006 f990 	bl	8007524 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <keypad_init+0x3c>)
 800120c:	f006 f98a 	bl	8007524 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <keypad_init+0x38>)
 8001218:	f006 f984 	bl	8007524 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <keypad_init+0x3c>)
 8001224:	f006 f97e 	bl	8007524 <HAL_GPIO_WritePin>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	48001000 	.word	0x48001000
 8001230:	48001400 	.word	0x48001400

08001234 <KeyPadReturn>:


	//Processes the row (val) and col values to get the number associated with that row and col
	//weightSel is used to determine if Weight (1) or Age (0) is being input
  uint8_t KeyPadReturn(int row, int col, int weightSel) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af02      	add	r7, sp, #8
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
    if (row == 0) {
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <KeyPadReturn+0x16>
      return 0;
 8001246:	2300      	movs	r3, #0
 8001248:	e090      	b.n	800136c <KeyPadReturn+0x138>
    }
    HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f004 fe0e 	bl	8005e6c <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 8001250:	bf00      	nop
 8001252:	f7ff ff93 	bl	800117c <RowChecker>
 8001256:	4602      	mov	r2, r0
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4293      	cmp	r3, r2
 800125c:	d0f9      	beq.n	8001252 <KeyPadReturn+0x1e>
    }
    HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f004 fe04 	bl	8005e6c <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1e5a      	subs	r2, r3, #1
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3b01      	subs	r3, #1
 800126c:	4941      	ldr	r1, [pc, #260]	; (8001374 <KeyPadReturn+0x140>)
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	440a      	add	r2, r1
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	75fb      	strb	r3, [r7, #23]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b23      	cmp	r3, #35	; 0x23
 800127c:	d11a      	bne.n	80012b4 <KeyPadReturn+0x80>
    	// Go to main display
      if (weightCounter == 0) {
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <KeyPadReturn+0x144>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <KeyPadReturn+0x56>
        // If there is no value for weight, just return
        return 0;
 8001286:	2300      	movs	r3, #0
 8001288:	e070      	b.n	800136c <KeyPadReturn+0x138>
      for (uint8_t i = 0; i < weightCounter; i++) {
        // print the values here
        //printf("%x ", ASCII_Weight[i]);
      }
      printf("\n");*/
      if(weightSel){
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <KeyPadReturn+0x6a>
          	ASCII_Weight[weightCounter] = '\0';
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <KeyPadReturn+0x144>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <KeyPadReturn+0x148>)
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]
 800129c:	e005      	b.n	80012aa <KeyPadReturn+0x76>
      }
      else{
    	  ASCII_Age[weightCounter] = '\0';
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <KeyPadReturn+0x144>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <KeyPadReturn+0x14c>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	5499      	strb	r1, [r3, r2]
      }
      weightCounter = 0;
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <KeyPadReturn+0x144>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      //LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
      return 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e05b      	b.n	800136c <KeyPadReturn+0x138>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b2a      	cmp	r3, #42	; 0x2a
 80012b8:	d006      	beq.n	80012c8 <KeyPadReturn+0x94>
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <KeyPadReturn+0x144>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	2305      	movs	r3, #5
 80012c2:	3b02      	subs	r3, #2
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d10c      	bne.n	80012e2 <KeyPadReturn+0xae>
    	// Wipe screen
    	LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	234e      	movs	r3, #78	; 0x4e
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	2138      	movs	r1, #56	; 0x38
 80012d2:	2032      	movs	r0, #50	; 0x32
 80012d4:	f000 fb22 	bl	800191c <LCD_Fill>
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <KeyPadReturn+0x144>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
      return 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	e044      	b.n	800136c <KeyPadReturn+0x138>
    }
    //printf("ASCII value: %x\n", ASCII_Value);


    if(weightSel){
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01d      	beq.n	8001324 <KeyPadReturn+0xf0>
    	ASCII_Weight[weightCounter] = ASCII_Value;
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <KeyPadReturn+0x144>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4a23      	ldr	r2, [pc, #140]	; (800137c <KeyPadReturn+0x148>)
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(105 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <KeyPadReturn+0x144>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	b29b      	uxth	r3, r3
 8001304:	3369      	adds	r3, #105	; 0x69
 8001306:	b298      	uxth	r0, r3
 8001308:	7dfa      	ldrb	r2, [r7, #23]
 800130a:	2300      	movs	r3, #0
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <KeyPadReturn+0x150>)
 8001316:	2105      	movs	r1, #5
 8001318:	f000 fbc6 	bl	8001aa8 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f003 fa4d 	bl	80047bc <UG_FontSetTransparency>
 8001322:	e01c      	b.n	800135e <KeyPadReturn+0x12a>
    }
    else{
    	ASCII_Age[weightCounter] = ASCII_Value;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <KeyPadReturn+0x144>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <KeyPadReturn+0x14c>)
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(80 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <KeyPadReturn+0x144>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	b29b      	uxth	r3, r3
 8001340:	3350      	adds	r3, #80	; 0x50
 8001342:	b298      	uxth	r0, r3
 8001344:	7dfa      	ldrb	r2, [r7, #23]
 8001346:	2300      	movs	r3, #0
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <KeyPadReturn+0x150>)
 8001352:	2105      	movs	r1, #5
 8001354:	f000 fba8 	bl	8001aa8 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f003 fa2f 	bl	80047bc <UG_FontSetTransparency>
    }

    weightCounter++;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <KeyPadReturn+0x144>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <KeyPadReturn+0x144>)
 8001368:	701a      	strb	r2, [r3, #0]
    return 0;
 800136a:	2300      	movs	r3, #0
  }
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	20000279 	.word	0x20000279
 800137c:	2000026c 	.word	0x2000026c
 8001380:	20000274 	.word	0x20000274
 8001384:	08010f14 	.word	0x08010f14

08001388 <running>:

  void running(){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
	  uint8_t finished = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
	  //Gathers Weight data
	  LCD_PutStr(5, 5, "Weight: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 8001396:	2300      	movs	r3, #0
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4b79      	ldr	r3, [pc, #484]	; (8001588 <running+0x200>)
 80013a2:	4a7a      	ldr	r2, [pc, #488]	; (800158c <running+0x204>)
 80013a4:	2105      	movs	r1, #5
 80013a6:	2005      	movs	r0, #5
 80013a8:	f000 fb9b 	bl	8001ae2 <LCD_PutStr>
  while (!finished) {
 80013ac:	e060      	b.n	8001470 <running+0xe8>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b4:	4876      	ldr	r0, [pc, #472]	; (8001590 <running+0x208>)
 80013b6:	f006 f8b5 	bl	8007524 <HAL_GPIO_WritePin>
      val = RowChecker();
 80013ba:	f7ff fedf 	bl	800117c <RowChecker>
 80013be:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2104      	movs	r1, #4
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f7ff ff35 	bl	8001234 <KeyPadReturn>
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d4:	486e      	ldr	r0, [pc, #440]	; (8001590 <running+0x208>)
 80013d6:	f006 f8a5 	bl	8007524 <HAL_GPIO_WritePin>
      if (finished) break;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d14b      	bne.n	8001478 <running+0xf0>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e6:	486b      	ldr	r0, [pc, #428]	; (8001594 <running+0x20c>)
 80013e8:	f006 f89c 	bl	8007524 <HAL_GPIO_WritePin>
      val = RowChecker();
 80013ec:	f7ff fec6 	bl	800117c <RowChecker>
 80013f0:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3, 1);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2103      	movs	r1, #3
 80013f6:	6838      	ldr	r0, [r7, #0]
 80013f8:	f7ff ff1c 	bl	8001234 <KeyPadReturn>
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001406:	4863      	ldr	r0, [pc, #396]	; (8001594 <running+0x20c>)
 8001408:	f006 f88c 	bl	8007524 <HAL_GPIO_WritePin>
      if (finished) break;
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d134      	bne.n	800147c <running+0xf4>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001418:	485e      	ldr	r0, [pc, #376]	; (8001594 <running+0x20c>)
 800141a:	f006 f883 	bl	8007524 <HAL_GPIO_WritePin>
      val = RowChecker();
 800141e:	f7ff fead 	bl	800117c <RowChecker>
 8001422:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2, 1);
 8001424:	2201      	movs	r2, #1
 8001426:	2102      	movs	r1, #2
 8001428:	6838      	ldr	r0, [r7, #0]
 800142a:	f7ff ff03 	bl	8001234 <KeyPadReturn>
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001438:	4856      	ldr	r0, [pc, #344]	; (8001594 <running+0x20c>)
 800143a:	f006 f873 	bl	8007524 <HAL_GPIO_WritePin>
      if (finished) break;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d11d      	bne.n	8001480 <running+0xf8>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144a:	4851      	ldr	r0, [pc, #324]	; (8001590 <running+0x208>)
 800144c:	f006 f86a 	bl	8007524 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001450:	f7ff fe94 	bl	800117c <RowChecker>
 8001454:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	2101      	movs	r1, #1
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f7ff feea 	bl	8001234 <KeyPadReturn>
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146a:	4849      	ldr	r0, [pc, #292]	; (8001590 <running+0x208>)
 800146c:	f006 f85a 	bl	8007524 <HAL_GPIO_WritePin>
  while (!finished) {
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d09b      	beq.n	80013ae <running+0x26>
 8001476:	e004      	b.n	8001482 <running+0xfa>
      if (finished) break;
 8001478:	bf00      	nop
 800147a:	e002      	b.n	8001482 <running+0xfa>
      if (finished) break;
 800147c:	bf00      	nop
 800147e:	e000      	b.n	8001482 <running+0xfa>
      if (finished) break;
 8001480:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  	  finished = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	71fb      	strb	r3, [r7, #7]
  	  LCD_Fill(5, 5, 170, 5+28, C_BLACK);
 8001486:	2300      	movs	r3, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2321      	movs	r3, #33	; 0x21
 800148c:	22aa      	movs	r2, #170	; 0xaa
 800148e:	2105      	movs	r1, #5
 8001490:	2005      	movs	r0, #5
 8001492:	f000 fa43 	bl	800191c <LCD_Fill>
  	  //Gathers Age data
  	  LCD_PutStr(5, 5, "Age: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 8001496:	2300      	movs	r3, #0
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <running+0x200>)
 80014a2:	4a3d      	ldr	r2, [pc, #244]	; (8001598 <running+0x210>)
 80014a4:	2105      	movs	r1, #5
 80014a6:	2005      	movs	r0, #5
 80014a8:	f000 fb1b 	bl	8001ae2 <LCD_PutStr>
  	while (!finished) {
 80014ac:	e060      	b.n	8001570 <running+0x1e8>
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b4:	4836      	ldr	r0, [pc, #216]	; (8001590 <running+0x208>)
 80014b6:	f006 f835 	bl	8007524 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80014ba:	f7ff fe5f 	bl	800117c <RowChecker>
 80014be:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 4, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2104      	movs	r1, #4
 80014c4:	6838      	ldr	r0, [r7, #0]
 80014c6:	f7ff feb5 	bl	8001234 <KeyPadReturn>
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d4:	482e      	ldr	r0, [pc, #184]	; (8001590 <running+0x208>)
 80014d6:	f006 f825 	bl	8007524 <HAL_GPIO_WritePin>
  	      if (finished) return;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d14b      	bne.n	8001578 <running+0x1f0>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	482b      	ldr	r0, [pc, #172]	; (8001594 <running+0x20c>)
 80014e8:	f006 f81c 	bl	8007524 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80014ec:	f7ff fe46 	bl	800117c <RowChecker>
 80014f0:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 3, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2103      	movs	r1, #3
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f7ff fe9c 	bl	8001234 <KeyPadReturn>
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001506:	4823      	ldr	r0, [pc, #140]	; (8001594 <running+0x20c>)
 8001508:	f006 f80c 	bl	8007524 <HAL_GPIO_WritePin>
  	      if (finished) return;
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d134      	bne.n	800157c <running+0x1f4>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001518:	481e      	ldr	r0, [pc, #120]	; (8001594 <running+0x20c>)
 800151a:	f006 f803 	bl	8007524 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 800151e:	f7ff fe2d 	bl	800117c <RowChecker>
 8001522:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 2, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2102      	movs	r1, #2
 8001528:	6838      	ldr	r0, [r7, #0]
 800152a:	f7ff fe83 	bl	8001234 <KeyPadReturn>
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	4816      	ldr	r0, [pc, #88]	; (8001594 <running+0x20c>)
 800153a:	f005 fff3 	bl	8007524 <HAL_GPIO_WritePin>
  	      if (finished) return;
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11d      	bne.n	8001580 <running+0x1f8>

  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154a:	4811      	ldr	r0, [pc, #68]	; (8001590 <running+0x208>)
 800154c:	f005 ffea 	bl	8007524 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001550:	f7ff fe14 	bl	800117c <RowChecker>
 8001554:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 1, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2101      	movs	r1, #1
 800155a:	6838      	ldr	r0, [r7, #0]
 800155c:	f7ff fe6a 	bl	8001234 <KeyPadReturn>
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156a:	4809      	ldr	r0, [pc, #36]	; (8001590 <running+0x208>)
 800156c:	f005 ffda 	bl	8007524 <HAL_GPIO_WritePin>
  	while (!finished) {
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d09b      	beq.n	80014ae <running+0x126>
 8001576:	e004      	b.n	8001582 <running+0x1fa>
  	      if (finished) return;
 8001578:	bf00      	nop
 800157a:	e002      	b.n	8001582 <running+0x1fa>
  	      if (finished) return;
 800157c:	bf00      	nop
 800157e:	e000      	b.n	8001582 <running+0x1fa>
  	      if (finished) return;
 8001580:	bf00      	nop
  	}
  }
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	08010f14 	.word	0x08010f14
 800158c:	08010ee8 	.word	0x08010ee8
 8001590:	48001400 	.word	0x48001400
 8001594:	48001000 	.word	0x48001000
 8001598:	08010ef4 	.word	0x08010ef4

0800159c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <setSPI_Size+0x74>)
 80015a8:	f993 3000 	ldrsb.w	r3, [r3]
 80015ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d027      	beq.n	8001604 <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <setSPI_Size+0x78>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <setSPI_Size+0x78>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015c2:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <setSPI_Size+0x74>)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d10c      	bne.n	80015ec <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <setSPI_Size+0x78>)
 80015d4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80015d8:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <setSPI_Size+0x78>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <setSPI_Size+0x78>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e8:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 80015ea:	e00b      	b.n	8001604 <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <setSPI_Size+0x78>)
 80015ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015f2:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <setSPI_Size+0x78>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <setSPI_Size+0x78>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001602:	601a      	str	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20000010 	.word	0x20000010
 8001614:	20000834 	.word	0x20000834

08001618 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ffb9 	bl	800159c <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001630:	4815      	ldr	r0, [pc, #84]	; (8001688 <LCD_WriteCommand+0x70>)
 8001632:	f005 ff77 	bl	8007524 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163c:	4812      	ldr	r0, [pc, #72]	; (8001688 <LCD_WriteCommand+0x70>)
 800163e:	f005 ff71 	bl	8007524 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	2201      	movs	r2, #1
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <LCD_WriteCommand+0x74>)
 800164c:	f009 fe8f 	bl	800b36e <HAL_SPI_Transmit>
	  if (argc) {
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00e      	beq.n	8001674 <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165c:	480a      	ldr	r0, [pc, #40]	; (8001688 <LCD_WriteCommand+0x70>)
 800165e:	f005 ff61 	bl	8007524 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1c59      	adds	r1, r3, #1
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	b29a      	uxth	r2, r3
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <LCD_WriteCommand+0x74>)
 8001670:	f009 fe7d 	bl	800b36e <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <LCD_WriteCommand+0x70>)
 800167c:	f005 ff52 	bl	8007524 <HAL_GPIO_WritePin>
	}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	48001000 	.word	0x48001000
 800168c:	20000834 	.word	0x20000834

08001690 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	4814      	ldr	r0, [pc, #80]	; (80016f4 <LCD_WriteData+0x64>)
 80016a2:	f005 ff3f 	bl	8007524 <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ac:	4811      	ldr	r0, [pc, #68]	; (80016f4 <LCD_WriteData+0x64>)
 80016ae:	f005 ff39 	bl	8007524 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80016b2:	e011      	b.n	80016d8 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ba:	4293      	cmp	r3, r2
 80016bc:	bf28      	it	cs
 80016be:	4613      	movcs	r3, r2
 80016c0:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80016c2:	89fa      	ldrh	r2, [r7, #14]
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <LCD_WriteData+0x68>)
 80016cc:	f009 fe4f 	bl	800b36e <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ea      	bne.n	80016b4 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <LCD_WriteData+0x64>)
 80016e6:	f005 ff1d 	bl	8007524 <HAL_GPIO_WritePin>
#endif
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	48001000 	.word	0x48001000
 80016f8:	20000834 	.word	0x20000834

080016fc <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b08b      	sub	sp, #44	; 0x2c
 8001700:	af00      	add	r7, sp, #0
 8001702:	4604      	mov	r4, r0
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	4623      	mov	r3, r4
 800170c:	80fb      	strh	r3, [r7, #6]
 800170e:	4603      	mov	r3, r0
 8001710:	80bb      	strh	r3, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	807b      	strh	r3, [r7, #2]
 8001716:	4613      	mov	r3, r2
 8001718:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	84bb      	strh	r3, [r7, #36]	; 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	847b      	strh	r3, [r7, #34]	; 0x22
 8001726:	883b      	ldrh	r3, [r7, #0]
 8001728:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800172a:	232a      	movs	r3, #42	; 0x2a
 800172c:	763b      	strb	r3, [r7, #24]
 800172e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001732:	121b      	asrs	r3, r3, #8
 8001734:	b21b      	sxth	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	767b      	strb	r3, [r7, #25]
 800173a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800173c:	b2db      	uxtb	r3, r3
 800173e:	76bb      	strb	r3, [r7, #26]
 8001740:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001744:	121b      	asrs	r3, r3, #8
 8001746:	b21b      	sxth	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	76fb      	strb	r3, [r7, #27]
 800174c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800174e:	b2db      	uxtb	r3, r3
 8001750:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	2104      	movs	r1, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5d 	bl	8001618 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800175e:	232b      	movs	r3, #43	; 0x2b
 8001760:	743b      	strb	r3, [r7, #16]
 8001762:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001766:	121b      	asrs	r3, r3, #8
 8001768:	b21b      	sxth	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	747b      	strb	r3, [r7, #17]
 800176e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001770:	b2db      	uxtb	r3, r3
 8001772:	74bb      	strb	r3, [r7, #18]
 8001774:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001778:	121b      	asrs	r3, r3, #8
 800177a:	b21b      	sxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	74fb      	strb	r3, [r7, #19]
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	2104      	movs	r1, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff43 	bl	8001618 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001792:	232c      	movs	r3, #44	; 0x2c
 8001794:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff3b 	bl	8001618 <LCD_WriteCommand>
  }
}
 80017a2:	bf00      	nop
 80017a4:	372c      	adds	r7, #44	; 0x2c
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd90      	pop	{r4, r7, pc}
	...

080017ac <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
 80017b6:	460b      	mov	r3, r1
 80017b8:	80bb      	strh	r3, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80017be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db39      	blt.n	800183a <LCD_DrawPixel+0x8e>
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	2bef      	cmp	r3, #239	; 0xef
 80017cc:	dc35      	bgt.n	800183a <LCD_DrawPixel+0x8e>
 80017ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db31      	blt.n	800183a <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80017d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017de:	da2c      	bge.n	800183a <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	733b      	strb	r3, [r7, #12]
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80017f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017f8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001800:	f7ff ff7c 	bl	80016fc <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180a:	480e      	ldr	r0, [pc, #56]	; (8001844 <LCD_DrawPixel+0x98>)
 800180c:	f005 fe8a 	bl	8007524 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <LCD_DrawPixel+0x98>)
 8001818:	f005 fe84 	bl	8007524 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 800181c:	f107 010c 	add.w	r1, r7, #12
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	2202      	movs	r2, #2
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <LCD_DrawPixel+0x9c>)
 8001828:	f009 fda1 	bl	800b36e <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <LCD_DrawPixel+0x98>)
 8001834:	f005 fe76 	bl	8007524 <HAL_GPIO_WritePin>
 8001838:	e000      	b.n	800183c <LCD_DrawPixel+0x90>
    return;
 800183a:	bf00      	nop
#endif
}
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	48001000 	.word	0x48001000
 8001848:	20000834 	.word	0x20000834

0800184c <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	; 0x50
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800185c:	e009      	b.n	8001872 <LCD_FillPixels+0x26>
      fill[t]=color;
 800185e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	3350      	adds	r3, #80	; 0x50
 8001864:	443b      	add	r3, r7
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800186c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800186e:	3301      	adds	r3, #1
 8001870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b20      	cmp	r3, #32
 8001876:	bf28      	it	cs
 8001878:	2320      	movcs	r3, #32
 800187a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800187c:	429a      	cmp	r2, r3
 800187e:	d3ee      	bcc.n	800185e <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 8001880:	e00e      	b.n	80018a0 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b20      	cmp	r3, #32
 8001886:	bf28      	it	cs
 8001888:	2320      	movcs	r3, #32
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fefc 	bl	8001690 <LCD_WriteData>
      pixels-=sz;
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ed      	bne.n	8001882 <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	3750      	adds	r7, #80	; 0x50
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d6:	d104      	bne.n	80018e2 <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fe5f 	bl	800159c <setSPI_Size>
#endif
    return NULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	e013      	b.n	800190a <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80018e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018f2:	f7ff ff03 	bl	80016fc <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff fe50 	bl	800159c <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001902:	4804      	ldr	r0, [pc, #16]	; (8001914 <LCD_FillArea+0x64>)
 8001904:	f005 fe0e 	bl	8007524 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <LCD_FillArea+0x68>)
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	bf00      	nop
 8001914:	48001000 	.word	0x48001000
 8001918:	0800184d 	.word	0x0800184d

0800191c <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4604      	mov	r4, r0
 8001924:	4608      	mov	r0, r1
 8001926:	4611      	mov	r1, r2
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	4603      	mov	r3, r0
 8001930:	80bb      	strh	r3, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
 8001936:	4613      	mov	r3, r2
 8001938:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	3301      	adds	r3, #1
 8001942:	4619      	mov	r1, r3
 8001944:	883a      	ldrh	r2, [r7, #0]
 8001946:	88bb      	ldrh	r3, [r7, #4]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	3301      	adds	r3, #1
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001952:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001956:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800195a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800195e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001962:	f7ff fecb 	bl	80016fc <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff fe18 	bl	800159c <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 800196c:	8c3b      	ldrh	r3, [r7, #32]
 800196e:	4619      	mov	r1, r3
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff ff6b 	bl	800184c <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff fe10 	bl	800159c <setSPI_Size>
#endif
  return UG_RESULT_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}

08001986 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001986:	b590      	push	{r4, r7, lr}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	603a      	str	r2, [r7, #0]
 8001990:	80fb      	strh	r3, [r7, #6]
 8001992:	460b      	mov	r3, r1
 8001994:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	889b      	ldrh	r3, [r3, #4]
 800199a:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	88db      	ldrh	r3, [r3, #6]
 80019a0:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	2bef      	cmp	r3, #239	; 0xef
 80019a6:	d837      	bhi.n	8001a18 <LCD_DrawImage+0x92>
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80019ae:	d233      	bcs.n	8001a18 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	4413      	add	r3, r2
 80019b6:	2bf0      	cmp	r3, #240	; 0xf0
 80019b8:	dc30      	bgt.n	8001a1c <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80019ba:	88ba      	ldrh	r2, [r7, #4]
 80019bc:	89bb      	ldrh	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80019c4:	dc2c      	bgt.n	8001a20 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	7a1b      	ldrb	r3, [r3, #8]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d12a      	bne.n	8001a24 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80019ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019d6:	88fa      	ldrh	r2, [r7, #6]
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	4413      	add	r3, r2
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b21c      	sxth	r4, r3
 80019e4:	88ba      	ldrh	r2, [r7, #4]
 80019e6:	89bb      	ldrh	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4622      	mov	r2, r4
 80019f4:	f7ff fe82 	bl	80016fc <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fdcf 	bl	800159c <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	89ba      	ldrh	r2, [r7, #12]
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff fe40 	bl	8001690 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fdc3 	bl	800159c <setSPI_Size>
 8001a16:	e006      	b.n	8001a26 <LCD_DrawImage+0xa0>
    return;
 8001a18:	bf00      	nop
 8001a1a:	e004      	b.n	8001a26 <LCD_DrawImage+0xa0>
    return;
 8001a1c:	bf00      	nop
 8001a1e:	e002      	b.n	8001a26 <LCD_DrawImage+0xa0>
    return;
 8001a20:	bf00      	nop
 8001a22:	e000      	b.n	8001a26 <LCD_DrawImage+0xa0>
    return;
 8001a24:	bf00      	nop
#endif
  }
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}

08001a2c <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80bb      	strh	r3, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]
 8001a46:	4613      	mov	r3, r2
 8001a48:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001a4a:	88fa      	ldrh	r2, [r7, #6]
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d10a      	bne.n	8001a68 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001a52:	88ba      	ldrh	r2, [r7, #4]
 8001a54:	883b      	ldrh	r3, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d918      	bls.n	8001a8c <LCD_DrawLine+0x60>
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	81bb      	strh	r3, [r7, #12]
 8001a5e:	883b      	ldrh	r3, [r7, #0]
 8001a60:	80bb      	strh	r3, [r7, #4]
 8001a62:	89bb      	ldrh	r3, [r7, #12]
 8001a64:	803b      	strh	r3, [r7, #0]
 8001a66:	e011      	b.n	8001a8c <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001a68:	88ba      	ldrh	r2, [r7, #4]
 8001a6a:	883b      	ldrh	r3, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d10a      	bne.n	8001a86 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d909      	bls.n	8001a8c <LCD_DrawLine+0x60>
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	81fb      	strh	r3, [r7, #14]
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	80fb      	strh	r3, [r7, #6]
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	e002      	b.n	8001a8c <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001a8c:	883c      	ldrh	r4, [r7, #0]
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	88b9      	ldrh	r1, [r7, #4]
 8001a92:	88f8      	ldrh	r0, [r7, #6]
 8001a94:	8c3b      	ldrh	r3, [r7, #32]
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4623      	mov	r3, r4
 8001a9a:	f7ff ff3f 	bl	800191c <LCD_Fill>
  return UG_RESULT_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}

08001aa8 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	81fb      	strh	r3, [r7, #14]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	81bb      	strh	r3, [r7, #12]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f002 fbf3 	bl	80042a8 <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001aca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ace:	8c3c      	ldrh	r4, [r7, #32]
 8001ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	f002 fde9 	bl	80046ac <UG_PutChar>
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}

08001ae2 <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	4603      	mov	r3, r0
 8001aee:	81fb      	strh	r3, [r7, #14]
 8001af0:	460b      	mov	r3, r1
 8001af2:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f002 fbd7 	bl	80042a8 <UG_FontSelect>
  UG_SetForecolor(color);
 8001afa:	8b3b      	ldrh	r3, [r7, #24]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fe11 	bl	8004724 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001b02:	8bbb      	ldrh	r3, [r7, #28]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fe1f 	bl	8004748 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b0e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fd31 	bl	800457c <UG_PutString>
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <LCD_setPower+0x14>
 8001b32:	2329      	movs	r3, #41	; 0x29
 8001b34:	e000      	b.n	8001b38 <LCD_setPower+0x16>
 8001b36:	2328      	movs	r3, #40	; 0x28
 8001b38:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fd69 	bl	8001618 <LCD_WriteCommand>
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <LCD_Update>:

static void LCD_Update(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff fd22 	bl	800159c <setSPI_Size>
  #endif
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b68:	4829      	ldr	r0, [pc, #164]	; (8001c10 <LCD_init+0xb4>)
 8001b6a:	f005 fcdb 	bl	8007524 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	4827      	ldr	r0, [pc, #156]	; (8001c10 <LCD_init+0xb4>)
 8001b74:	f005 fcd6 	bl	8007524 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f004 f977 	bl	8005e6c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	4823      	ldr	r0, [pc, #140]	; (8001c10 <LCD_init+0xb4>)
 8001b84:	f005 fcce 	bl	8007524 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001b88:	20c8      	movs	r0, #200	; 0xc8
 8001b8a:	f004 f96f 	bl	8005e6c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001b8e:	4921      	ldr	r1, [pc, #132]	; (8001c14 <LCD_init+0xb8>)
 8001b90:	4821      	ldr	r0, [pc, #132]	; (8001c18 <LCD_init+0xbc>)
 8001b92:	f002 faef 	bl	8004174 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001b96:	4921      	ldr	r1, [pc, #132]	; (8001c1c <LCD_init+0xc0>)
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f003 fe7d 	bl	8005898 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001b9e:	4920      	ldr	r1, [pc, #128]	; (8001c20 <LCD_init+0xc4>)
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f003 fe79 	bl	8005898 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001ba6:	491f      	ldr	r1, [pc, #124]	; (8001c24 <LCD_init+0xc8>)
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f003 fe75 	bl	8005898 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001bae:	491e      	ldr	r1, [pc, #120]	; (8001c28 <LCD_init+0xcc>)
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f003 fe71 	bl	8005898 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f002 fdd8 	bl	800476c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f002 fde9 	bl	8004794 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	80fb      	strh	r3, [r7, #6]
 8001bc6:	e013      	b.n	8001bf0 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <LCD_init+0xd0>)
 8001bce:	441a      	add	r2, r3
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	4916      	ldr	r1, [pc, #88]	; (8001c2c <LCD_init+0xd0>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	f7ff fd1d 	bl	8001618 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <LCD_init+0xd0>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	4413      	add	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3302      	adds	r3, #2
 8001bee:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	2b4b      	cmp	r3, #75	; 0x4b
 8001bf4:	d9e8      	bls.n	8001bc8 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f002 fb66 	bl	80042c8 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ff90 	bl	8001b22 <LCD_setPower>
  UG_Update();
 8001c02:	f003 fe6b 	bl	80058dc <UG_Update>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	48001000 	.word	0x48001000
 8001c14:	20000014 	.word	0x20000014
 8001c18:	2000027c 	.word	0x2000027c
 8001c1c:	08001a2d 	.word	0x08001a2d
 8001c20:	0800191d 	.word	0x0800191d
 8001c24:	080018b1 	.word	0x080018b1
 8001c28:	08001987 	.word	0x08001987
 8001c2c:	08016304 	.word	0x08016304

08001c30 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6858      	ldr	r0, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	8adb      	ldrh	r3, [r3, #22]
 8001c52:	2200      	movs	r2, #0
 8001c54:	4619      	mov	r1, r3
 8001c56:	f005 fc65 	bl	8007524 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	1cf9      	adds	r1, r7, #3
 8001c64:	2201      	movs	r2, #1
 8001c66:	f009 fb82 	bl	800b36e <HAL_SPI_Transmit>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f107 010f 	add.w	r1, r7, #15
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f009 fcec 	bl	800b658 <HAL_SPI_Receive>
 8001c80:	4603      	mov	r3, r0
 8001c82:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6858      	ldr	r0, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	8adb      	ldrh	r3, [r3, #22]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f005 fc48 	bl	8007524 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
 8001caa:	4613      	mov	r3, r2
 8001cac:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cb4:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001cb6:	78bb      	ldrb	r3, [r7, #2]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6858      	ldr	r0, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8adb      	ldrh	r3, [r3, #22]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f005 fc26 	bl	8007524 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f107 010a 	add.w	r1, r7, #10
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f009 fb42 	bl	800b36e <HAL_SPI_Transmit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6858      	ldr	r0, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	8adb      	ldrh	r3, [r3, #22]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f005 fc13 	bl	8007524 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffbd 	bl	8001c9e <write_register>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	2b2c      	cmp	r3, #44	; 0x2c
 8001d3c:	d801      	bhi.n	8001d42 <set_OCP+0x16>
    imax = 45;
 8001d3e:	232d      	movs	r3, #45	; 0x2d
 8001d40:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	2bf0      	cmp	r3, #240	; 0xf0
 8001d46:	d901      	bls.n	8001d4c <set_OCP+0x20>
    imax = 240;
 8001d48:	23f0      	movs	r3, #240	; 0xf0
 8001d4a:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	2b81      	cmp	r3, #129	; 0x81
 8001d50:	d809      	bhi.n	8001d66 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	3b2d      	subs	r3, #45	; 0x2d
 8001d56:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <set_OCP+0x68>)
 8001d58:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5c:	1052      	asrs	r2, r2, #1
 8001d5e:	17db      	asrs	r3, r3, #31
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e008      	b.n	8001d78 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	331e      	adds	r3, #30
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <set_OCP+0x68>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1092      	asrs	r2, r2, #2
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	f043 0320 	orr.w	r3, r3, #32
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	210b      	movs	r1, #11
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff8a 	bl	8001c9e <write_register>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	66666667 	.word	0x66666667

08001d98 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001da0:	211d      	movs	r1, #29
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff44 	bl	8001c30 <read_register>
 8001da8:	4603      	mov	r3, r0
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	461c      	mov	r4, r3
 8001db4:	4615      	mov	r5, r2
 8001db6:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001dba:	211e      	movs	r1, #30
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff37 	bl	8001c30 <read_register>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b0a      	cmp	r3, #10
 8001dd0:	d908      	bls.n	8001de4 <set_low_data_rate_optimization+0x4c>
 8001dd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dd6:	1fd1      	subs	r1, r2, #7
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	d103      	bne.n	8001de4 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001ddc:	7ffb      	ldrb	r3, [r7, #31]
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
 8001de6:	461a      	mov	r2, r3
 8001de8:	2126      	movs	r1, #38	; 0x26
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff57 	bl	8001c9e <write_register>
}
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bdb0      	pop	{r4, r5, r7, pc}

08001df8 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001e00:	2100      	movs	r1, #0
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff7f 	bl	8001d06 <set_mode>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001e18:	2101      	movs	r1, #1
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff73 	bl	8001d06 <set_mode>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001e30:	211d      	movs	r1, #29
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fefc 	bl	8001c30 <read_register>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	461a      	mov	r2, r3
 8001e48:	211d      	movs	r1, #29
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff27 	bl	8001c9e <write_register>
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10e      	bne.n	8001e8a <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	d901      	bls.n	8001e76 <lora_set_tx_power+0x1e>
      level = 15;
 8001e72:	230f      	movs	r3, #15
 8001e74:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2109      	movs	r1, #9
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ff0b 	bl	8001c9e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001e88:	e02e      	b.n	8001ee8 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	2b14      	cmp	r3, #20
 8001e8e:	d901      	bls.n	8001e94 <lora_set_tx_power+0x3c>
      level = 20;
 8001e90:	2314      	movs	r3, #20
 8001e92:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d801      	bhi.n	8001e9e <lora_set_tx_power+0x46>
      level = 2;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	2b11      	cmp	r3, #17
 8001ea2:	d90c      	bls.n	8001ebe <lora_set_tx_power+0x66>
      level -= 3;
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	3b03      	subs	r3, #3
 8001ea8:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001eaa:	2287      	movs	r2, #135	; 0x87
 8001eac:	214d      	movs	r1, #77	; 0x4d
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fef5 	bl	8001c9e <write_register>
      set_OCP(lora, 140);
 8001eb4:	218c      	movs	r1, #140	; 0x8c
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff38 	bl	8001d2c <set_OCP>
 8001ebc:	e008      	b.n	8001ed0 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001ebe:	2284      	movs	r2, #132	; 0x84
 8001ec0:	214d      	movs	r1, #77	; 0x4d
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff feeb 	bl	8001c9e <write_register>
      set_OCP(lora, 97);
 8001ec8:	2161      	movs	r1, #97	; 0x61
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ff2e 	bl	8001d2c <set_OCP>
    level -= 2;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	3b02      	subs	r3, #2
 8001ed4:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2109      	movs	r1, #9
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fedb 	bl	8001c9e <write_register>
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f00:	f04f 0000 	mov.w	r0, #0
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	04d9      	lsls	r1, r3, #19
 8001f0a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001f0e:	04d0      	lsls	r0, r2, #19
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <lora_set_frequency+0x88>)
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	f7fe fe5f 	bl	8000bd8 <__aeabi_uldivmod>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001f22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	0c02      	lsrs	r2, r0, #16
 8001f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f34:	0c0b      	lsrs	r3, r1, #16
 8001f36:	b2d3      	uxtb	r3, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2106      	movs	r1, #6
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff feae 	bl	8001c9e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001f42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	0a02      	lsrs	r2, r0, #8
 8001f50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f54:	0a0b      	lsrs	r3, r1, #8
 8001f56:	b2d3      	uxtb	r3, r2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2107      	movs	r1, #7
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fe9e 	bl	8001c9e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001f62:	7c3b      	ldrb	r3, [r7, #16]
 8001f64:	461a      	mov	r2, r3
 8001f66:	2108      	movs	r1, #8
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff fe98 	bl	8001c9e <write_register>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	01e84800 	.word	0x01e84800

08001f7c <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d802      	bhi.n	8001f94 <lora_set_spreading_factor+0x18>
    sf = 6;
 8001f8e:	2306      	movs	r3, #6
 8001f90:	70fb      	strb	r3, [r7, #3]
 8001f92:	e004      	b.n	8001f9e <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d901      	bls.n	8001f9e <lora_set_spreading_factor+0x22>
    sf = 12;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d10a      	bne.n	8001fba <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001fa4:	22c5      	movs	r2, #197	; 0xc5
 8001fa6:	2131      	movs	r1, #49	; 0x31
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fe78 	bl	8001c9e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001fae:	220c      	movs	r2, #12
 8001fb0:	2137      	movs	r1, #55	; 0x37
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe73 	bl	8001c9e <write_register>
 8001fb8:	e009      	b.n	8001fce <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001fba:	22c3      	movs	r2, #195	; 0xc3
 8001fbc:	2131      	movs	r1, #49	; 0x31
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fe6d 	bl	8001c9e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001fc4:	220a      	movs	r2, #10
 8001fc6:	2137      	movs	r1, #55	; 0x37
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fe68 	bl	8001c9e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8001fce:	211e      	movs	r1, #30
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fe2d 	bl	8001c30 <read_register>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	211e      	movs	r1, #30
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fe51 	bl	8001c9e <write_register>

  set_low_data_rate_optimization(lora);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fecb 	bl	8001d98 <set_low_data_rate_optimization>
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b29b      	uxth	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	2120      	movs	r1, #32
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fe3b 	bl	8001c9e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	2121      	movs	r1, #33	; 0x21
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fe31 	bl	8001c9e <write_register>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 800204c:	2142      	movs	r1, #66	; 0x42
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fdee 	bl	8001c30 <read_register>
 8002054:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 800207e:	6a3a      	ldr	r2, [r7, #32]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800209c:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff ffd0 	bl	8002044 <lora_version>
 80020a4:	4603      	mov	r3, r0
 80020a6:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d001      	beq.n	80020b2 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80020ae:	2304      	movs	r3, #4
 80020b0:	e031      	b.n	8002116 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff fea0 	bl	8001df8 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff fe9d 	bl	8001df8 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80020be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff ff14 	bl	8001ef0 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 80020c8:	2107      	movs	r1, #7
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff ff56 	bl	8001f7c <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80020d0:	210a      	movs	r1, #10
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff ff99 	bl	800200a <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff fea5 	bl	8001e28 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80020de:	210c      	movs	r1, #12
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff fda5 	bl	8001c30 <read_register>
 80020e6:	4603      	mov	r3, r0
 80020e8:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80020ea:	7dbb      	ldrb	r3, [r7, #22]
 80020ec:	f043 0303 	orr.w	r3, r3, #3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	210c      	movs	r1, #12
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f7ff fdd1 	bl	8001c9e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80020fc:	2204      	movs	r2, #4
 80020fe:	2126      	movs	r1, #38	; 0x26
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff fdcc 	bl	8001c9e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8002106:	2111      	movs	r1, #17
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7ff fea5 	bl	8001e58 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff fe7e 	bl	8001e10 <lora_mode_standby>

  return LORA_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b0bc      	sub	sp, #240	; 0xf0
 8002124:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 8002126:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <main+0x1b0>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	4a69      	ldr	r2, [pc, #420]	; (80022d0 <main+0x1b0>)
 800212c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002130:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 8002132:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <main+0x1b4>)
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 8002138:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <main+0x1b4>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213e:	f003 fe20 	bl	8005d82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002142:	f000 f8d9 	bl	80022f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002146:	f000 f939 	bl	80023bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214a:	f000 ffe7 	bl	800311c <MX_GPIO_Init>
  MX_ADC1_Init();
 800214e:	f000 f969 	bl	8002424 <MX_ADC1_Init>
  MX_COMP1_Init();
 8002152:	f000 f9cb 	bl	80024ec <MX_COMP1_Init>
  MX_COMP2_Init();
 8002156:	f000 f9f7 	bl	8002548 <MX_COMP2_Init>
  MX_I2C1_Init();
 800215a:	f000 fa21 	bl	80025a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800215e:	f000 fa5f 	bl	8002620 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8002162:	f000 fa9d 	bl	80026a0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8002166:	f000 fae7 	bl	8002738 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800216a:	f000 fb31 	bl	80027d0 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800216e:	f000 fb7b 	bl	8002868 <MX_SAI1_Init>
  MX_SAI2_Init();
 8002172:	f000 fc11 	bl	8002998 <MX_SAI2_Init>
  MX_SPI3_Init();
 8002176:	f000 fcb5 	bl	8002ae4 <MX_SPI3_Init>
  MX_TIM1_Init();
 800217a:	f000 fcf1 	bl	8002b60 <MX_TIM1_Init>
  MX_TIM2_Init();
 800217e:	f000 fda7 	bl	8002cd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002182:	f000 fe09 	bl	8002d98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002186:	f000 fe6d 	bl	8002e64 <MX_TIM4_Init>
  MX_TIM15_Init();
 800218a:	f000 fec5 	bl	8002f18 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 800218e:	f000 ffbd 	bl	800310c <MX_USB_OTG_FS_USB_Init>
  MX_TIM17_Init();
 8002192:	f000 ff45 	bl	8003020 <MX_TIM17_Init>
  MX_SPI2_Init();
 8002196:	f000 fc67 	bl	8002a68 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
  lora_sx1276 lora;

//  ENABLE_LORA_REPEATEDLY(&lora);
  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 800219a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800219e:	a34a      	add	r3, pc, #296	; (adr r3, 80022c8 <main+0x1a8>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	e9cd 2300 	strd	r2, r3, [sp]
 80021a8:	2301      	movs	r3, #1
 80021aa:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <main+0x1b8>)
 80021ac:	494b      	ldr	r1, [pc, #300]	; (80022dc <main+0x1bc>)
 80021ae:	f7ff ff56 	bl	800205e <lora_init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
  	     if (res != LORA_OK) {
  	       // Initialization failed
  	     }
LCD_init();
 80021b8:	f7ff fcd0 	bl	8001b5c <LCD_init>
keypad_init();
 80021bc:	f7ff f81a 	bl	80011f4 <keypad_init>
JOYSTICK_INIT(hi2c1);
 80021c0:	4c47      	ldr	r4, [pc, #284]	; (80022e0 <main+0x1c0>)
 80021c2:	4668      	mov	r0, sp
 80021c4:	f104 0310 	add.w	r3, r4, #16
 80021c8:	2244      	movs	r2, #68	; 0x44
 80021ca:	4619      	mov	r1, r3
 80021cc:	f00c fec7 	bl	800ef5e <memcpy>
 80021d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021d4:	f7fe ff1e 	bl	8001014 <JOYSTICK_INIT>
TempHum_t data;
initTempHumSensor(&hi2c2);
 80021d8:	4842      	ldr	r0, [pc, #264]	; (80022e4 <main+0x1c4>)
 80021da:	f7fe fe7b 	bl	8000ed4 <initTempHumSensor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// 0 = runner view
// 1 = weight input view
uint8_t current_viewport = 0; //determines what screen state you are on
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
DISPLAY_TIMER_TRIGGERED = 0;
 80021e4:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <main+0x1c8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
HAL_TIM_Base_Start_IT(&htim17);
 80021ea:	4840      	ldr	r0, [pc, #256]	; (80022ec <main+0x1cc>)
 80021ec:	f009 ffa2 	bl	800c134 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
	  // STATE MACHINE HERE
	  // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
	  // Joystick allows user to switch between states\

	  uint8_t lr = threshold();
 80021f0:	f7fe ff96 	bl	8001120 <threshold>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	  // Toggle current_viewport
	  if (lr != 0) {
 80021fa:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d010      	beq.n	8002224 <main+0x104>
		  current_viewport = current_viewport ? 0 : 1;
 8002202:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, 120, C_BLACK);
 8002214:	2300      	movs	r3, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2378      	movs	r3, #120	; 0x78
 800221a:	22f0      	movs	r2, #240	; 0xf0
 800221c:	2105      	movs	r1, #5
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff fb7c 	bl	800191c <LCD_Fill>
	  }

	  // HOME SCREEN / RUNNER VIEW
	  if (current_viewport == 0 && DISPLAY_TIMER_TRIGGERED == 1) {
 8002224:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002228:	2b00      	cmp	r3, #0
 800222a:	d140      	bne.n	80022ae <main+0x18e>
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <main+0x1c8>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d13c      	bne.n	80022ae <main+0x18e>
		  UG_FontSetTransparency(1);
 8002234:	2001      	movs	r0, #1
 8002236:	f002 fac1 	bl	80047bc <UG_FontSetTransparency>
		  data = get_temp_hum();
 800223a:	f7fe fe9f 	bl	8000f7c <get_temp_hum>
 800223e:	eeb0 7a40 	vmov.f32	s14, s0
 8002242:	eef0 7a60 	vmov.f32	s15, s1
 8002246:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 800224a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		  char buffer[128];
		  // DO THE BELOW ONLY ON TIME INTERVAL
		  LCD_Fill(5, 5, 240, 120, C_BLACK);
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2378      	movs	r3, #120	; 0x78
 8002254:	22f0      	movs	r2, #240	; 0xf0
 8002256:	2105      	movs	r1, #5
 8002258:	2005      	movs	r0, #5
 800225a:	f7ff fb5f 	bl	800191c <LCD_Fill>
		  snprintf(buffer, sizeof(buffer), "Temp: %.3f\nHumid: %.3f", data.temp, data.hum);
 800225e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f988 	bl	8000578 <__aeabi_f2d>
 8002268:	4604      	mov	r4, r0
 800226a:	460d      	mov	r5, r1
 800226c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f981 	bl	8000578 <__aeabi_f2d>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	1d38      	adds	r0, r7, #4
 800227c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002280:	e9cd 4500 	strd	r4, r5, [sp]
 8002284:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <main+0x1d0>)
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	f00c fd62 	bl	800ed50 <sniprintf>
		  LCD_PutStr(5, 5, buffer, DEFAULT_FONT, C_GREEN, C_BLACK);
 800228c:	1d3a      	adds	r2, r7, #4
 800228e:	2300      	movs	r3, #0
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <main+0x1d4>)
 800229a:	2105      	movs	r1, #5
 800229c:	2005      	movs	r0, #5
 800229e:	f7ff fc20 	bl	8001ae2 <LCD_PutStr>
//		  LCD_PutStr(50, 56, "Temp: " + data.temp + "\nHumid: " + data.hum, DEFAULT_FONT, C_GREEN, C_BLACK);
		  HAL_Delay(100);
 80022a2:	2064      	movs	r0, #100	; 0x64
 80022a4:	f003 fde2 	bl	8005e6c <HAL_Delay>
		  DISPLAY_TIMER_TRIGGERED = 0;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <main+0x1c8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
	  }

	  // WEIGHT AND AGE INPUT
	  if (current_viewport == 1) {
 80022ae:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d19c      	bne.n	80021f0 <main+0xd0>

		  running();
 80022b6:	f7ff f867 	bl	8001388 <running>
		  // Go back to runner screen
		  current_viewport = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		  DISPLAY_TIMER_TRIGGERED = 1;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <main+0x1c8>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
  {
 80022c6:	e793      	b.n	80021f0 <main+0xd0>
 80022c8:	36e55840 	.word	0x36e55840
 80022cc:	00000000 	.word	0x00000000
 80022d0:	e000edf0 	.word	0xe000edf0
 80022d4:	e0001000 	.word	0xe0001000
 80022d8:	48000c00 	.word	0x48000c00
 80022dc:	200007d0 	.word	0x200007d0
 80022e0:	200003b0 	.word	0x200003b0
 80022e4:	20000404 	.word	0x20000404
 80022e8:	20000a60 	.word	0x20000a60
 80022ec:	20000a14 	.word	0x20000a14
 80022f0:	08010efc 	.word	0x08010efc
 80022f4:	08010f14 	.word	0x08010f14

080022f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b096      	sub	sp, #88	; 0x58
 80022fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	2244      	movs	r2, #68	; 0x44
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f00c fd99 	bl	800ee3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800230c:	463b      	mov	r3, r7
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800231a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800231e:	f005 ff1d 	bl	800815c <HAL_PWREx_ControlVoltageScaling>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002328:	f001 f854 	bl	80033d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800232c:	f005 fee6 	bl	80080fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <SystemClock_Config+0xc0>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <SystemClock_Config+0xc0>)
 8002338:	f023 0318 	bic.w	r3, r3, #24
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002340:	2314      	movs	r3, #20
 8002342:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002344:	2301      	movs	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002348:	2301      	movs	r3, #1
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002350:	2360      	movs	r3, #96	; 0x60
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002354:	2302      	movs	r3, #2
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002358:	2301      	movs	r3, #1
 800235a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800235c:	2301      	movs	r3, #1
 800235e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002360:	2310      	movs	r3, #16
 8002362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002364:	2302      	movs	r3, #2
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002368:	2302      	movs	r3, #2
 800236a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800236c:	2302      	movs	r3, #2
 800236e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4618      	mov	r0, r3
 8002376:	f005 ffa5 	bl	80082c4 <HAL_RCC_OscConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002380:	f001 f828 	bl	80033d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002384:	230f      	movs	r3, #15
 8002386:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002388:	2303      	movs	r3, #3
 800238a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002398:	463b      	mov	r3, r7
 800239a:	2101      	movs	r1, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f006 fbab 	bl	8008af8 <HAL_RCC_ClockConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80023a8:	f001 f814 	bl	80033d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80023ac:	f008 f8b4 	bl	800a518 <HAL_RCCEx_EnableMSIPLLMode>
}
 80023b0:	bf00      	nop
 80023b2:	3758      	adds	r7, #88	; 0x58
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000

080023bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0a6      	sub	sp, #152	; 0x98
 80023c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2294      	movs	r2, #148	; 0x94
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f00c fd38 	bl	800ee3e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80023ce:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80023d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80023d8:	2300      	movs	r3, #0
 80023da:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80023dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80023e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80023e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023e8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80023ea:	2301      	movs	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80023f2:	2318      	movs	r3, #24
 80023f4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80023f6:	2302      	movs	r3, #2
 80023f8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80023fa:	2302      	movs	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80023fe:	2302      	movs	r3, #2
 8002400:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <PeriphCommonClock_Config+0x64>)
 8002404:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	4618      	mov	r0, r3
 800240a:	f006 fe33 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002414:	f000 ffde 	bl	80033d4 <Error_Handler>
  }
}
 8002418:	bf00      	nop
 800241a:	3798      	adds	r7, #152	; 0x98
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	01110000 	.word	0x01110000

08002424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800242a:	463b      	mov	r3, r7
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
 8002438:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <MX_ADC1_Init+0xbc>)
 800243c:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <MX_ADC1_Init+0xc0>)
 800243e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <MX_ADC1_Init+0xbc>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <MX_ADC1_Init+0xbc>)
 800245a:	2204      	movs	r2, #4
 800245c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002460:	2200      	movs	r2, #0
 8002462:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002466:	2200      	movs	r2, #0
 8002468:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800246a:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <MX_ADC1_Init+0xbc>)
 800246c:	2201      	movs	r2, #1
 800246e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <MX_ADC1_Init+0xbc>)
 800247a:	2200      	movs	r2, #0
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002480:	2200      	movs	r2, #0
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <MX_ADC1_Init+0xbc>)
 800248e:	2200      	movs	r2, #0
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <MX_ADC1_Init+0xbc>)
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800249a:	4811      	ldr	r0, [pc, #68]	; (80024e0 <MX_ADC1_Init+0xbc>)
 800249c:	f003 feaa 	bl	80061f4 <HAL_ADC_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80024a6:	f000 ff95 	bl	80033d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <MX_ADC1_Init+0xc4>)
 80024ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024ae:	2306      	movs	r3, #6
 80024b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80024b6:	237f      	movs	r3, #127	; 0x7f
 80024b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024ba:	2304      	movs	r3, #4
 80024bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024c2:	463b      	mov	r3, r7
 80024c4:	4619      	mov	r1, r3
 80024c6:	4806      	ldr	r0, [pc, #24]	; (80024e0 <MX_ADC1_Init+0xbc>)
 80024c8:	f003 ffda 	bl	8006480 <HAL_ADC_ConfigChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80024d2:	f000 ff7f 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200002f0 	.word	0x200002f0
 80024e4:	50040000 	.word	0x50040000
 80024e8:	04300002 	.word	0x04300002

080024ec <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <MX_COMP1_Init+0x50>)
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <MX_COMP1_Init+0x54>)
 80024f4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_COMP1_Init+0x50>)
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <MX_COMP1_Init+0x58>)
 80024fa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_COMP1_Init+0x50>)
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_COMP1_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_COMP1_Init+0x50>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_COMP1_Init+0x50>)
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_COMP1_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_COMP1_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_COMP1_Init+0x50>)
 8002522:	2200      	movs	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_COMP1_Init+0x50>)
 8002528:	f004 fc4e 	bl	8006dc8 <HAL_COMP_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8002532:	f000 ff4f 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000358 	.word	0x20000358
 8002540:	40010200 	.word	0x40010200
 8002544:	00800030 	.word	0x00800030

08002548 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <MX_COMP2_Init+0x50>)
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <MX_COMP2_Init+0x54>)
 8002550:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_COMP2_Init+0x50>)
 8002554:	2270      	movs	r2, #112	; 0x70
 8002556:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_COMP2_Init+0x50>)
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_COMP2_Init+0x50>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_COMP2_Init+0x50>)
 8002566:	2200      	movs	r2, #0
 8002568:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <MX_COMP2_Init+0x50>)
 800256c:	2200      	movs	r2, #0
 800256e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <MX_COMP2_Init+0x50>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <MX_COMP2_Init+0x50>)
 8002578:	2200      	movs	r2, #0
 800257a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <MX_COMP2_Init+0x50>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_COMP2_Init+0x50>)
 8002584:	f004 fc20 	bl	8006dc8 <HAL_COMP_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 800258e:	f000 ff21 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000384 	.word	0x20000384
 800259c:	40010204 	.word	0x40010204

080025a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <MX_I2C1_Init+0x74>)
 80025a6:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <MX_I2C1_Init+0x78>)
 80025a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_I2C1_Init+0x74>)
 80025ac:	4a1b      	ldr	r2, [pc, #108]	; (800261c <MX_I2C1_Init+0x7c>)
 80025ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MX_I2C1_Init+0x74>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_I2C1_Init+0x74>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MX_I2C1_Init+0x74>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_I2C1_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_I2C1_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_I2C1_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_I2C1_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025da:	480e      	ldr	r0, [pc, #56]	; (8002614 <MX_I2C1_Init+0x74>)
 80025dc:	f004 ffba 	bl	8007554 <HAL_I2C_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025e6:	f000 fef5 	bl	80033d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ea:	2100      	movs	r1, #0
 80025ec:	4809      	ldr	r0, [pc, #36]	; (8002614 <MX_I2C1_Init+0x74>)
 80025ee:	f005 fced 	bl	8007fcc <HAL_I2CEx_ConfigAnalogFilter>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025f8:	f000 feec 	bl	80033d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025fc:	2100      	movs	r1, #0
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_I2C1_Init+0x74>)
 8002600:	f005 fd2f 	bl	8008062 <HAL_I2CEx_ConfigDigitalFilter>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800260a:	f000 fee3 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200003b0 	.word	0x200003b0
 8002618:	40005400 	.word	0x40005400
 800261c:	00707cbb 	.word	0x00707cbb

08002620 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <MX_I2C2_Init+0x74>)
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <MX_I2C2_Init+0x78>)
 8002628:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_I2C2_Init+0x74>)
 800262c:	4a1b      	ldr	r2, [pc, #108]	; (800269c <MX_I2C2_Init+0x7c>)
 800262e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <MX_I2C2_Init+0x74>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_I2C2_Init+0x74>)
 8002638:	2201      	movs	r2, #1
 800263a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_I2C2_Init+0x74>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <MX_I2C2_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <MX_I2C2_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_I2C2_Init+0x74>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <MX_I2C2_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800265a:	480e      	ldr	r0, [pc, #56]	; (8002694 <MX_I2C2_Init+0x74>)
 800265c:	f004 ff7a 	bl	8007554 <HAL_I2C_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002666:	f000 feb5 	bl	80033d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800266a:	2100      	movs	r1, #0
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <MX_I2C2_Init+0x74>)
 800266e:	f005 fcad 	bl	8007fcc <HAL_I2CEx_ConfigAnalogFilter>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002678:	f000 feac 	bl	80033d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800267c:	2100      	movs	r1, #0
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_I2C2_Init+0x74>)
 8002680:	f005 fcef 	bl	8008062 <HAL_I2CEx_ConfigDigitalFilter>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800268a:	f000 fea3 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000404 	.word	0x20000404
 8002698:	40005800 	.word	0x40005800
 800269c:	00707cbb 	.word	0x00707cbb

080026a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026a6:	4a23      	ldr	r2, [pc, #140]	; (8002734 <MX_LPUART1_UART_Init+0x94>)
 80026a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026c6:	220c      	movs	r2, #12
 80026c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026de:	2200      	movs	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80026e8:	4811      	ldr	r0, [pc, #68]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026ea:	f00a fe5d 	bl	800d3a8 <HAL_UART_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80026f4:	f000 fe6e 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f8:	2100      	movs	r1, #0
 80026fa:	480d      	ldr	r0, [pc, #52]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 80026fc:	f00b fc82 	bl	800e004 <HAL_UARTEx_SetTxFifoThreshold>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002706:	f000 fe65 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800270a:	2100      	movs	r1, #0
 800270c:	4808      	ldr	r0, [pc, #32]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 800270e:	f00b fcb7 	bl	800e080 <HAL_UARTEx_SetRxFifoThreshold>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002718:	f000 fe5c 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800271c:	4804      	ldr	r0, [pc, #16]	; (8002730 <MX_LPUART1_UART_Init+0x90>)
 800271e:	f00b fc38 	bl	800df92 <HAL_UARTEx_DisableFifoMode>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002728:	f000 fe54 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000458 	.word	0x20000458
 8002734:	40008000 	.word	0x40008000

08002738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 800273e:	4a23      	ldr	r2, [pc, #140]	; (80027cc <MX_USART2_UART_Init+0x94>)
 8002740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 800277c:	2200      	movs	r2, #0
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002780:	4811      	ldr	r0, [pc, #68]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 8002782:	f00a fe11 	bl	800d3a8 <HAL_UART_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800278c:	f000 fe22 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002790:	2100      	movs	r1, #0
 8002792:	480d      	ldr	r0, [pc, #52]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 8002794:	f00b fc36 	bl	800e004 <HAL_UARTEx_SetTxFifoThreshold>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800279e:	f000 fe19 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027a2:	2100      	movs	r1, #0
 80027a4:	4808      	ldr	r0, [pc, #32]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 80027a6:	f00b fc6b 	bl	800e080 <HAL_UARTEx_SetRxFifoThreshold>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027b0:	f000 fe10 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <MX_USART2_UART_Init+0x90>)
 80027b6:	f00b fbec 	bl	800df92 <HAL_UARTEx_DisableFifoMode>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027c0:	f000 fe08 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200004ec 	.word	0x200004ec
 80027cc:	40004400 	.word	0x40004400

080027d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <MX_USART3_UART_Init+0x90>)
 80027d6:	4a23      	ldr	r2, [pc, #140]	; (8002864 <MX_USART3_UART_Init+0x94>)
 80027d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <MX_USART3_UART_Init+0x90>)
 80027dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_USART3_UART_Init+0x90>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_USART3_UART_Init+0x90>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_USART3_UART_Init+0x90>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_USART3_UART_Init+0x90>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MX_USART3_UART_Init+0x90>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002800:	4b17      	ldr	r3, [pc, #92]	; (8002860 <MX_USART3_UART_Init+0x90>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_USART3_UART_Init+0x90>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_USART3_UART_Init+0x90>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <MX_USART3_UART_Init+0x90>)
 8002814:	2200      	movs	r2, #0
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002818:	4811      	ldr	r0, [pc, #68]	; (8002860 <MX_USART3_UART_Init+0x90>)
 800281a:	f00a fdc5 	bl	800d3a8 <HAL_UART_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002824:	f000 fdd6 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002828:	2100      	movs	r1, #0
 800282a:	480d      	ldr	r0, [pc, #52]	; (8002860 <MX_USART3_UART_Init+0x90>)
 800282c:	f00b fbea 	bl	800e004 <HAL_UARTEx_SetTxFifoThreshold>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002836:	f000 fdcd 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283a:	2100      	movs	r1, #0
 800283c:	4808      	ldr	r0, [pc, #32]	; (8002860 <MX_USART3_UART_Init+0x90>)
 800283e:	f00b fc1f 	bl	800e080 <HAL_UARTEx_SetRxFifoThreshold>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002848:	f000 fdc4 	bl	80033d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <MX_USART3_UART_Init+0x90>)
 800284e:	f00b fba0 	bl	800df92 <HAL_UARTEx_DisableFifoMode>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002858:	f000 fdbc 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000580 	.word	0x20000580
 8002864:	40004800 	.word	0x40004800

08002868 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800286c:	4b45      	ldr	r3, [pc, #276]	; (8002984 <MX_SAI1_Init+0x11c>)
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <MX_SAI1_Init+0x120>)
 8002870:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002872:	4b44      	ldr	r3, [pc, #272]	; (8002984 <MX_SAI1_Init+0x11c>)
 8002874:	2200      	movs	r2, #0
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <MX_SAI1_Init+0x11c>)
 800287a:	2200      	movs	r2, #0
 800287c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <MX_SAI1_Init+0x11c>)
 8002880:	2240      	movs	r2, #64	; 0x40
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <MX_SAI1_Init+0x11c>)
 8002886:	2200      	movs	r2, #0
 8002888:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800288a:	4b3e      	ldr	r3, [pc, #248]	; (8002984 <MX_SAI1_Init+0x11c>)
 800288c:	2200      	movs	r2, #0
 800288e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002890:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <MX_SAI1_Init+0x11c>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <MX_SAI1_Init+0x11c>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800289c:	4b39      	ldr	r3, [pc, #228]	; (8002984 <MX_SAI1_Init+0x11c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80028ae:	4b35      	ldr	r3, [pc, #212]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028b0:	4a36      	ldr	r2, [pc, #216]	; (800298c <MX_SAI1_Init+0x124>)
 80028b2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80028ba:	4b32      	ldr	r3, [pc, #200]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80028c6:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80028cc:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80028e2:	4b28      	ldr	r3, [pc, #160]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028e4:	2208      	movs	r2, #8
 80028e6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80028f4:	4b23      	ldr	r3, [pc, #140]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <MX_SAI1_Init+0x11c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <MX_SAI1_Init+0x11c>)
 8002902:	2200      	movs	r2, #0
 8002904:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002906:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <MX_SAI1_Init+0x11c>)
 8002908:	2200      	movs	r2, #0
 800290a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <MX_SAI1_Init+0x11c>)
 800290e:	2201      	movs	r2, #1
 8002910:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <MX_SAI1_Init+0x11c>)
 8002914:	2200      	movs	r2, #0
 8002916:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002918:	481a      	ldr	r0, [pc, #104]	; (8002984 <MX_SAI1_Init+0x11c>)
 800291a:	f008 f939 	bl	800ab90 <HAL_SAI_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8002924:	f000 fd56 	bl	80033d4 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <MX_SAI1_Init+0x128>)
 800292a:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <MX_SAI1_Init+0x12c>)
 800292c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_SAI1_Init+0x128>)
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <MX_SAI1_Init+0x128>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_SAI1_Init+0x128>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <MX_SAI1_Init+0x128>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_SAI1_Init+0x128>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <MX_SAI1_Init+0x128>)
 800294e:	4a0f      	ldr	r2, [pc, #60]	; (800298c <MX_SAI1_Init+0x124>)
 8002950:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <MX_SAI1_Init+0x128>)
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <MX_SAI1_Init+0x128>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_SAI1_Init+0x128>)
 8002960:	2200      	movs	r2, #0
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MX_SAI1_Init+0x128>)
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800296a:	2302      	movs	r3, #2
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	4807      	ldr	r0, [pc, #28]	; (8002990 <MX_SAI1_Init+0x128>)
 8002972:	f008 f8db 	bl	800ab2c <HAL_SAI_InitProtocol>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 800297c:	f000 fd2a 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000614 	.word	0x20000614
 8002988:	40015424 	.word	0x40015424
 800298c:	0002ee00 	.word	0x0002ee00
 8002990:	200006a8 	.word	0x200006a8
 8002994:	40015404 	.word	0x40015404

08002998 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <MX_SAI2_Init+0xc4>)
 800299e:	4a30      	ldr	r2, [pc, #192]	; (8002a60 <MX_SAI2_Init+0xc8>)
 80029a0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80029a8:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80029ae:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80029b4:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029bc:	2200      	movs	r2, #0
 80029be:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80029c0:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80029cc:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80029d2:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029e0:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <MX_SAI2_Init+0xcc>)
 80029e2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80029ea:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <MX_SAI2_Init+0xc4>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a14:	2208      	movs	r2, #8
 8002a16:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002a48:	4804      	ldr	r0, [pc, #16]	; (8002a5c <MX_SAI2_Init+0xc4>)
 8002a4a:	f008 f8a1 	bl	800ab90 <HAL_SAI_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8002a54:	f000 fcbe 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2000073c 	.word	0x2000073c
 8002a60:	40015804 	.word	0x40015804
 8002a64:	0002ee00 	.word	0x0002ee00

08002a68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <MX_SPI2_Init+0x74>)
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <MX_SPI2_Init+0x78>)
 8002a70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <MX_SPI2_Init+0x74>)
 8002a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <MX_SPI2_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <MX_SPI2_Init+0x74>)
 8002a82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <MX_SPI2_Init+0x74>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <MX_SPI2_Init+0x74>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <MX_SPI2_Init+0x74>)
 8002a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MX_SPI2_Init+0x74>)
 8002a9e:	2218      	movs	r2, #24
 8002aa0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <MX_SPI2_Init+0x74>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MX_SPI2_Init+0x74>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <MX_SPI2_Init+0x74>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <MX_SPI2_Init+0x74>)
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <MX_SPI2_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <MX_SPI2_Init+0x74>)
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_SPI2_Init+0x74>)
 8002ac8:	f008 fbae 	bl	800b228 <HAL_SPI_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002ad2:	f000 fc7f 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200007d0 	.word	0x200007d0
 8002ae0:	40003800 	.word	0x40003800

08002ae4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <MX_SPI3_Init+0x78>)
 8002aec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002af4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002afe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b02:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b16:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b32:	2207      	movs	r2, #7
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b3e:	2208      	movs	r2, #8
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_SPI3_Init+0x74>)
 8002b44:	f008 fb70 	bl	800b228 <HAL_SPI_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002b4e:	f000 fc41 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000834 	.word	0x20000834
 8002b5c:	40003c00 	.word	0x40003c00

08002b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b098      	sub	sp, #96	; 0x60
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002b72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
 8002b8c:	611a      	str	r2, [r3, #16]
 8002b8e:	615a      	str	r2, [r3, #20]
 8002b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b92:	463b      	mov	r3, r7
 8002b94:	222c      	movs	r2, #44	; 0x2c
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f00c f950 	bl	800ee3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <MX_TIM1_Init+0x16c>)
 8002ba2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ba4:	4b48      	ldr	r3, [pc, #288]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002bb0:	4b45      	ldr	r3, [pc, #276]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bbe:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc4:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bca:	483f      	ldr	r0, [pc, #252]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002bcc:	f009 fb83 	bl	800c2d6 <HAL_TIM_PWM_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002bd6:	f000 fbfd 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bea:	4619      	mov	r1, r3
 8002bec:	4836      	ldr	r0, [pc, #216]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002bee:	f00a f9f1 	bl	800cfd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002bf8:	f000 fbec 	bl	80033d4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002c04:	2300      	movs	r3, #0
 8002c06:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002c08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2101      	movs	r1, #1
 8002c10:	482d      	ldr	r0, [pc, #180]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002c12:	f00a fae5 	bl	800d1e0 <HAL_TIMEx_ConfigBreakInput>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002c1c:	f000 fbda 	bl	80033d4 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8002c20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c24:	461a      	mov	r2, r3
 8002c26:	2102      	movs	r1, #2
 8002c28:	4827      	ldr	r0, [pc, #156]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002c2a:	f00a fad9 	bl	800d1e0 <HAL_TIMEx_ConfigBreakInput>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002c34:	f000 fbce 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c38:	2360      	movs	r3, #96	; 0x60
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c50:	2300      	movs	r3, #0
 8002c52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c58:	2208      	movs	r2, #8
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	481a      	ldr	r0, [pc, #104]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002c5e:	f009 fd0d 	bl	800c67c <HAL_TIM_PWM_ConfigChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002c68:	f000 fbb4 	bl	80033d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c70:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8002c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4807      	ldr	r0, [pc, #28]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002caa:	f00a fa1b 	bl	800d0e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002cb4:	f000 fb8e 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cb8:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <MX_TIM1_Init+0x168>)
 8002cba:	f000 ff6f 	bl	8003b9c <HAL_TIM_MspPostInit>

}
 8002cbe:	bf00      	nop
 8002cc0:	3760      	adds	r7, #96	; 0x60
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000898 	.word	0x20000898
 8002ccc:	40012c00 	.word	0x40012c00

08002cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd6:	f107 031c 	add.w	r3, r7, #28
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
 8002cf0:	615a      	str	r2, [r3, #20]
 8002cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d10:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d16:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d1c:	481d      	ldr	r0, [pc, #116]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d1e:	f009 fada 	bl	800c2d6 <HAL_TIM_PWM_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002d28:	f000 fb54 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4816      	ldr	r0, [pc, #88]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d3c:	f00a f94a 	bl	800cfd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002d46:	f000 fb45 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d4a:	2360      	movs	r3, #96	; 0x60
 8002d4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4619      	mov	r1, r3
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d62:	f009 fc8b 	bl	800c67c <HAL_TIM_PWM_ConfigChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002d6c:	f000 fb32 	bl	80033d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d70:	463b      	mov	r3, r7
 8002d72:	2208      	movs	r2, #8
 8002d74:	4619      	mov	r1, r3
 8002d76:	4807      	ldr	r0, [pc, #28]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d78:	f009 fc80 	bl	800c67c <HAL_TIM_PWM_ConfigChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002d82:	f000 fb27 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d86:	4803      	ldr	r0, [pc, #12]	; (8002d94 <MX_TIM2_Init+0xc4>)
 8002d88:	f000 ff08 	bl	8003b9c <HAL_TIM_MspPostInit>

}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	200008e4 	.word	0x200008e4

08002d98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9e:	f107 031c 	add.w	r3, r7, #28
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002daa:	463b      	mov	r3, r7
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
 8002db8:	615a      	str	r2, [r3, #20]
 8002dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002dbe:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <MX_TIM3_Init+0xc8>)
 8002dc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002dc2:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002dce:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002de2:	481e      	ldr	r0, [pc, #120]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002de4:	f009 fa77 	bl	800c2d6 <HAL_TIM_PWM_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002dee:	f000 faf1 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dfa:	f107 031c 	add.w	r3, r7, #28
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4816      	ldr	r0, [pc, #88]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002e02:	f00a f8e7 	bl	800cfd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002e0c:	f000 fae2 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e10:	2360      	movs	r3, #96	; 0x60
 8002e12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e20:	463b      	mov	r3, r7
 8002e22:	2204      	movs	r2, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	480d      	ldr	r0, [pc, #52]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002e28:	f009 fc28 	bl	800c67c <HAL_TIM_PWM_ConfigChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002e32:	f000 facf 	bl	80033d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e36:	463b      	mov	r3, r7
 8002e38:	2208      	movs	r2, #8
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4807      	ldr	r0, [pc, #28]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002e3e:	f009 fc1d 	bl	800c67c <HAL_TIM_PWM_ConfigChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002e48:	f000 fac4 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e4c:	4803      	ldr	r0, [pc, #12]	; (8002e5c <MX_TIM3_Init+0xc4>)
 8002e4e:	f000 fea5 	bl	8003b9c <HAL_TIM_MspPostInit>

}
 8002e52:	bf00      	nop
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000930 	.word	0x20000930
 8002e60:	40000400 	.word	0x40000400

08002e64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e6a:	f107 031c 	add.w	r3, r7, #28
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e76:	463b      	mov	r3, r7
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
 8002e84:	615a      	str	r2, [r3, #20]
 8002e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e88:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002e8a:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <MX_TIM4_Init+0xb0>)
 8002e8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e94:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002eae:	4818      	ldr	r0, [pc, #96]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002eb0:	f009 fa11 	bl	800c2d6 <HAL_TIM_PWM_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002eba:	f000 fa8b 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ec6:	f107 031c 	add.w	r3, r7, #28
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4810      	ldr	r0, [pc, #64]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002ece:	f00a f881 	bl	800cfd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002ed8:	f000 fa7c 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002edc:	2360      	movs	r3, #96	; 0x60
 8002ede:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eec:	463b      	mov	r3, r7
 8002eee:	220c      	movs	r2, #12
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4807      	ldr	r0, [pc, #28]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002ef4:	f009 fbc2 	bl	800c67c <HAL_TIM_PWM_ConfigChannel>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002efe:	f000 fa69 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f02:	4803      	ldr	r0, [pc, #12]	; (8002f10 <MX_TIM4_Init+0xac>)
 8002f04:	f000 fe4a 	bl	8003b9c <HAL_TIM_MspPostInit>

}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000097c 	.word	0x2000097c
 8002f14:	40000800 	.word	0x40000800

08002f18 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b096      	sub	sp, #88	; 0x58
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	615a      	str	r2, [r3, #20]
 8002f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	222c      	movs	r2, #44	; 0x2c
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f00b ff7a 	bl	800ee3e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f4c:	4a33      	ldr	r2, [pc, #204]	; (800301c <MX_TIM15_Init+0x104>)
 8002f4e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f56:	4b30      	ldr	r3, [pc, #192]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002f6a:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002f76:	4828      	ldr	r0, [pc, #160]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f78:	f009 f9ad 	bl	800c2d6 <HAL_TIM_PWM_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002f82:	f000 fa27 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002f8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f92:	4619      	mov	r1, r3
 8002f94:	4820      	ldr	r0, [pc, #128]	; (8003018 <MX_TIM15_Init+0x100>)
 8002f96:	f00a f81d 	bl	800cfd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002fa0:	f000 fa18 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fa4:	2360      	movs	r3, #96	; 0x60
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fac:	2300      	movs	r3, #0
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4813      	ldr	r0, [pc, #76]	; (8003018 <MX_TIM15_Init+0x100>)
 8002fca:	f009 fb57 	bl	800c67c <HAL_TIM_PWM_ConfigChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002fd4:	f000 f9fe 	bl	80033d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4807      	ldr	r0, [pc, #28]	; (8003018 <MX_TIM15_Init+0x100>)
 8002ffc:	f00a f872 	bl	800d0e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8003006:	f000 f9e5 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800300a:	4803      	ldr	r0, [pc, #12]	; (8003018 <MX_TIM15_Init+0x100>)
 800300c:	f000 fdc6 	bl	8003b9c <HAL_TIM_MspPostInit>

}
 8003010:	bf00      	nop
 8003012:	3758      	adds	r7, #88	; 0x58
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200009c8 	.word	0x200009c8
 800301c:	40014000 	.word	0x40014000

08003020 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b092      	sub	sp, #72	; 0x48
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	611a      	str	r2, [r3, #16]
 8003036:	615a      	str	r2, [r3, #20]
 8003038:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800303a:	463b      	mov	r3, r7
 800303c:	222c      	movs	r2, #44	; 0x2c
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f00b fefc 	bl	800ee3e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003046:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <MX_TIM17_Init+0xe4>)
 8003048:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <MX_TIM17_Init+0xe8>)
 800304a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2441;
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <MX_TIM17_Init+0xe4>)
 800304e:	f640 1289 	movw	r2, #2441	; 0x989
 8003052:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003054:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <MX_TIM17_Init+0xe4>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800305a:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <MX_TIM17_Init+0xe4>)
 800305c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003060:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <MX_TIM17_Init+0xe4>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <MX_TIM17_Init+0xe4>)
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306e:	4b25      	ldr	r3, [pc, #148]	; (8003104 <MX_TIM17_Init+0xe4>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003074:	4823      	ldr	r0, [pc, #140]	; (8003104 <MX_TIM17_Init+0xe4>)
 8003076:	f009 f805 	bl	800c084 <HAL_TIM_Base_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8003080:	f000 f9a8 	bl	80033d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003084:	481f      	ldr	r0, [pc, #124]	; (8003104 <MX_TIM17_Init+0xe4>)
 8003086:	f009 f8c5 	bl	800c214 <HAL_TIM_OC_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8003090:	f000 f9a0 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003094:	2300      	movs	r3, #0
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800309c:	2300      	movs	r3, #0
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030a0:	2300      	movs	r3, #0
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030a8:	2300      	movs	r3, #0
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030ac:	2300      	movs	r3, #0
 80030ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b4:	2200      	movs	r2, #0
 80030b6:	4619      	mov	r1, r3
 80030b8:	4812      	ldr	r0, [pc, #72]	; (8003104 <MX_TIM17_Init+0xe4>)
 80030ba:	f009 fa65 	bl	800c588 <HAL_TIM_OC_ConfigChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80030c4:	f000 f986 	bl	80033d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80030e6:	463b      	mov	r3, r7
 80030e8:	4619      	mov	r1, r3
 80030ea:	4806      	ldr	r0, [pc, #24]	; (8003104 <MX_TIM17_Init+0xe4>)
 80030ec:	f009 fffa 	bl	800d0e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80030f6:	f000 f96d 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	3748      	adds	r7, #72	; 0x48
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000a14 	.word	0x20000a14
 8003108:	40014800 	.word	0x40014800

0800310c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	; 0x38
 8003120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003132:	4b8f      	ldr	r3, [pc, #572]	; (8003370 <MX_GPIO_Init+0x254>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	4a8e      	ldr	r2, [pc, #568]	; (8003370 <MX_GPIO_Init+0x254>)
 8003138:	f043 0310 	orr.w	r3, r3, #16
 800313c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313e:	4b8c      	ldr	r3, [pc, #560]	; (8003370 <MX_GPIO_Init+0x254>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	623b      	str	r3, [r7, #32]
 8003148:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800314a:	4b89      	ldr	r3, [pc, #548]	; (8003370 <MX_GPIO_Init+0x254>)
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	4a88      	ldr	r2, [pc, #544]	; (8003370 <MX_GPIO_Init+0x254>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003156:	4b86      	ldr	r3, [pc, #536]	; (8003370 <MX_GPIO_Init+0x254>)
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003162:	4b83      	ldr	r3, [pc, #524]	; (8003370 <MX_GPIO_Init+0x254>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	4a82      	ldr	r2, [pc, #520]	; (8003370 <MX_GPIO_Init+0x254>)
 8003168:	f043 0320 	orr.w	r3, r3, #32
 800316c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800316e:	4b80      	ldr	r3, [pc, #512]	; (8003370 <MX_GPIO_Init+0x254>)
 8003170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800317a:	4b7d      	ldr	r3, [pc, #500]	; (8003370 <MX_GPIO_Init+0x254>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	4a7c      	ldr	r2, [pc, #496]	; (8003370 <MX_GPIO_Init+0x254>)
 8003180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003186:	4b7a      	ldr	r3, [pc, #488]	; (8003370 <MX_GPIO_Init+0x254>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003192:	4b77      	ldr	r3, [pc, #476]	; (8003370 <MX_GPIO_Init+0x254>)
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	4a76      	ldr	r2, [pc, #472]	; (8003370 <MX_GPIO_Init+0x254>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319e:	4b74      	ldr	r3, [pc, #464]	; (8003370 <MX_GPIO_Init+0x254>)
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031aa:	4b71      	ldr	r3, [pc, #452]	; (8003370 <MX_GPIO_Init+0x254>)
 80031ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ae:	4a70      	ldr	r2, [pc, #448]	; (8003370 <MX_GPIO_Init+0x254>)
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031b6:	4b6e      	ldr	r3, [pc, #440]	; (8003370 <MX_GPIO_Init+0x254>)
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c2:	4b6b      	ldr	r3, [pc, #428]	; (8003370 <MX_GPIO_Init+0x254>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	4a6a      	ldr	r2, [pc, #424]	; (8003370 <MX_GPIO_Init+0x254>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ce:	4b68      	ldr	r3, [pc, #416]	; (8003370 <MX_GPIO_Init+0x254>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031da:	4b65      	ldr	r3, [pc, #404]	; (8003370 <MX_GPIO_Init+0x254>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	4a64      	ldr	r2, [pc, #400]	; (8003370 <MX_GPIO_Init+0x254>)
 80031e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e6:	4b62      	ldr	r3, [pc, #392]	; (8003370 <MX_GPIO_Init+0x254>)
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80031f2:	f005 f857 	bl	80082a4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80031f6:	2200      	movs	r2, #0
 80031f8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80031fc:	485d      	ldr	r0, [pc, #372]	; (8003374 <MX_GPIO_Init+0x258>)
 80031fe:	f004 f991 	bl	8007524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003202:	2200      	movs	r2, #0
 8003204:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8003208:	485b      	ldr	r0, [pc, #364]	; (8003378 <MX_GPIO_Init+0x25c>)
 800320a:	f004 f98b 	bl	8007524 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800320e:	2201      	movs	r2, #1
 8003210:	2101      	movs	r1, #1
 8003212:	485a      	ldr	r0, [pc, #360]	; (800337c <MX_GPIO_Init+0x260>)
 8003214:	f004 f986 	bl	8007524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003218:	2310      	movs	r3, #16
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003224:	2303      	movs	r3, #3
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003228:	2305      	movs	r3, #5
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003230:	4619      	mov	r1, r3
 8003232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003236:	f003 ffcb 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800323a:	23e0      	movs	r3, #224	; 0xe0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324a:	4619      	mov	r1, r3
 800324c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003250:	f003 ffbe 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003254:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800325a:	2311      	movs	r3, #17
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326a:	4619      	mov	r1, r3
 800326c:	4841      	ldr	r0, [pc, #260]	; (8003374 <MX_GPIO_Init+0x258>)
 800326e:	f003 ffaf 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8003272:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003278:	2301      	movs	r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800327c:	2301      	movs	r3, #1
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003288:	4619      	mov	r1, r3
 800328a:	483b      	ldr	r0, [pc, #236]	; (8003378 <MX_GPIO_Init+0x25c>)
 800328c:	f003 ffa0 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003290:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003296:	2311      	movs	r3, #17
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2300      	movs	r3, #0
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a6:	4619      	mov	r1, r3
 80032a8:	4833      	ldr	r0, [pc, #204]	; (8003378 <MX_GPIO_Init+0x25c>)
 80032aa:	f003 ff91 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80032ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c0:	4619      	mov	r1, r3
 80032c2:	482e      	ldr	r0, [pc, #184]	; (800337c <MX_GPIO_Init+0x260>)
 80032c4:	f003 ff84 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d6:	2303      	movs	r3, #3
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80032da:	230c      	movs	r3, #12
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e2:	4619      	mov	r1, r3
 80032e4:	4826      	ldr	r0, [pc, #152]	; (8003380 <MX_GPIO_Init+0x264>)
 80032e6:	f003 ff73 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80032ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f8:	2303      	movs	r3, #3
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032fc:	230a      	movs	r3, #10
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003304:	4619      	mov	r1, r3
 8003306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330a:	f003 ff61 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800330e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	4619      	mov	r1, r3
 8003322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003326:	f003 ff53 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800332a:	2301      	movs	r3, #1
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332e:	2301      	movs	r3, #1
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800333a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333e:	4619      	mov	r1, r3
 8003340:	480e      	ldr	r0, [pc, #56]	; (800337c <MX_GPIO_Init+0x260>)
 8003342:	f003 ff45 	bl	80071d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003346:	2304      	movs	r3, #4
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003352:	2303      	movs	r3, #3
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003356:	230c      	movs	r3, #12
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800335a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335e:	4619      	mov	r1, r3
 8003360:	4806      	ldr	r0, [pc, #24]	; (800337c <MX_GPIO_Init+0x260>)
 8003362:	f003 ff35 	bl	80071d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003366:	bf00      	nop
 8003368:	3738      	adds	r7, #56	; 0x38
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	48001400 	.word	0x48001400
 8003378:	48001000 	.word	0x48001000
 800337c:	48000c00 	.word	0x48000c00
 8003380:	48000800 	.word	0x48000800

08003384 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	//check which version of the timer triggered this callback and toggle LED
	if(htim == &htim17){
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a06      	ldr	r2, [pc, #24]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d102      	bne.n	800339a <HAL_TIM_PeriodElapsedCallback+0x16>
		DISPLAY_TIMER_TRIGGERED = 1;
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
	}
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000a14 	.word	0x20000a14
 80033ac:	20000a60 	.word	0x20000a60

080033b0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80033b8:	1d39      	adds	r1, r7, #4
 80033ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033be:	2201      	movs	r2, #1
 80033c0:	4803      	ldr	r0, [pc, #12]	; (80033d0 <__io_putchar+0x20>)
 80033c2:	f00a f841 	bl	800d448 <HAL_UART_Transmit>
  return ch;
 80033c6:	687b      	ldr	r3, [r7, #4]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000458 	.word	0x20000458

080033d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d8:	b672      	cpsid	i
}
 80033da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033dc:	e7fe      	b.n	80033dc <Error_Handler+0x8>
	...

080033e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_MspInit+0x44>)
 80033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ea:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <HAL_MspInit+0x44>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6613      	str	r3, [r2, #96]	; 0x60
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_MspInit+0x44>)
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_MspInit+0x44>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	4a08      	ldr	r2, [pc, #32]	; (8003424 <HAL_MspInit+0x44>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003408:	6593      	str	r3, [r2, #88]	; 0x58
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_MspInit+0x44>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000

08003428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2d      	ldr	r2, [pc, #180]	; (80034fc <HAL_ADC_MspInit+0xd4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d154      	bne.n	80034f4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	4a2c      	ldr	r2, [pc, #176]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003450:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003456:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003462:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	4a26      	ldr	r2, [pc, #152]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	4a20      	ldr	r2, [pc, #128]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_ADC_MspInit+0xd8>)
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80034aa:	233f      	movs	r3, #63	; 0x3f
 80034ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80034ae:	230b      	movs	r3, #11
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b6:	f107 031c 	add.w	r3, r7, #28
 80034ba:	4619      	mov	r1, r3
 80034bc:	4811      	ldr	r0, [pc, #68]	; (8003504 <HAL_ADC_MspInit+0xdc>)
 80034be:	f003 fe87 	bl	80071d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80034c2:	230a      	movs	r3, #10
 80034c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80034c6:	230b      	movs	r3, #11
 80034c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ce:	f107 031c 	add.w	r3, r7, #28
 80034d2:	4619      	mov	r1, r3
 80034d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d8:	f003 fe7a 	bl	80071d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034dc:	2302      	movs	r3, #2
 80034de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80034e0:	230b      	movs	r3, #11
 80034e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	4619      	mov	r1, r3
 80034ee:	4806      	ldr	r0, [pc, #24]	; (8003508 <HAL_ADC_MspInit+0xe0>)
 80034f0:	f003 fe6e 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034f4:	bf00      	nop
 80034f6:	3730      	adds	r7, #48	; 0x30
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	50040000 	.word	0x50040000
 8003500:	40021000 	.word	0x40021000
 8003504:	48000800 	.word	0x48000800
 8003508:	48000400 	.word	0x48000400

0800350c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_COMP_MspInit+0x98>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d118      	bne.n	8003560 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352e:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <HAL_COMP_MspInit+0x9c>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <HAL_COMP_MspInit+0x9c>)
 8003534:	f043 0302 	orr.w	r3, r3, #2
 8003538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_COMP_MspInit+0x9c>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003546:	2304      	movs	r3, #4
 8003548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800354a:	2303      	movs	r3, #3
 800354c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	4814      	ldr	r0, [pc, #80]	; (80035ac <HAL_COMP_MspInit+0xa0>)
 800355a:	f003 fe39 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800355e:	e01c      	b.n	800359a <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <HAL_COMP_MspInit+0xa4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d117      	bne.n	800359a <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_COMP_MspInit+0x9c>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <HAL_COMP_MspInit+0x9c>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_COMP_MspInit+0x9c>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003582:	23c0      	movs	r3, #192	; 0xc0
 8003584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003586:	2303      	movs	r3, #3
 8003588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	4619      	mov	r1, r3
 8003594:	4805      	ldr	r0, [pc, #20]	; (80035ac <HAL_COMP_MspInit+0xa0>)
 8003596:	f003 fe1b 	bl	80071d0 <HAL_GPIO_Init>
}
 800359a:	bf00      	nop
 800359c:	3728      	adds	r7, #40	; 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40010200 	.word	0x40010200
 80035a8:	40021000 	.word	0x40021000
 80035ac:	48000400 	.word	0x48000400
 80035b0:	40010204 	.word	0x40010204

080035b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b0b0      	sub	sp, #192	; 0xc0
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035cc:	f107 0318 	add.w	r3, r7, #24
 80035d0:	2294      	movs	r2, #148	; 0x94
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f00b fc32 	bl	800ee3e <memset>
  if(hi2c->Instance==I2C1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4c      	ldr	r2, [pc, #304]	; (8003710 <HAL_I2C_MspInit+0x15c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d13c      	bne.n	800365e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035e4:	2340      	movs	r3, #64	; 0x40
 80035e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80035e8:	2300      	movs	r3, #0
 80035ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ec:	f107 0318 	add.w	r3, r7, #24
 80035f0:	4618      	mov	r0, r3
 80035f2:	f005 fd3f 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80035fc:	f7ff feea 	bl	80033d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003600:	4b44      	ldr	r3, [pc, #272]	; (8003714 <HAL_I2C_MspInit+0x160>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003604:	4a43      	ldr	r2, [pc, #268]	; (8003714 <HAL_I2C_MspInit+0x160>)
 8003606:	f043 0302 	orr.w	r3, r3, #2
 800360a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800360c:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_I2C_MspInit+0x160>)
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003618:	f44f 7340 	mov.w	r3, #768	; 0x300
 800361c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003620:	2312      	movs	r3, #18
 8003622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003626:	2301      	movs	r3, #1
 8003628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362c:	2303      	movs	r3, #3
 800362e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003632:	2304      	movs	r3, #4
 8003634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003638:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800363c:	4619      	mov	r1, r3
 800363e:	4836      	ldr	r0, [pc, #216]	; (8003718 <HAL_I2C_MspInit+0x164>)
 8003640:	f003 fdc6 	bl	80071d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_I2C_MspInit+0x160>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003648:	4a32      	ldr	r2, [pc, #200]	; (8003714 <HAL_I2C_MspInit+0x160>)
 800364a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800364e:	6593      	str	r3, [r2, #88]	; 0x58
 8003650:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_I2C_MspInit+0x160>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800365c:	e054      	b.n	8003708 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2e      	ldr	r2, [pc, #184]	; (800371c <HAL_I2C_MspInit+0x168>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d14f      	bne.n	8003708 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800366c:	2300      	movs	r3, #0
 800366e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003670:	f107 0318 	add.w	r3, r7, #24
 8003674:	4618      	mov	r0, r3
 8003676:	f005 fcfd 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003680:	f7ff fea8 	bl	80033d4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003684:	4b23      	ldr	r3, [pc, #140]	; (8003714 <HAL_I2C_MspInit+0x160>)
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <HAL_I2C_MspInit+0x160>)
 800368a:	f043 0320 	orr.w	r3, r3, #32
 800368e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003690:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_I2C_MspInit+0x160>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800369c:	2303      	movs	r3, #3
 800369e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a2:	2312      	movs	r3, #18
 80036a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036b4:	2304      	movs	r3, #4
 80036b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036be:	4619      	mov	r1, r3
 80036c0:	4817      	ldr	r0, [pc, #92]	; (8003720 <HAL_I2C_MspInit+0x16c>)
 80036c2:	f003 fd85 	bl	80071d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036c6:	2304      	movs	r3, #4
 80036c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036cc:	2312      	movs	r3, #18
 80036ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d8:	2303      	movs	r3, #3
 80036da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036de:	2304      	movs	r3, #4
 80036e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036e8:	4619      	mov	r1, r3
 80036ea:	480d      	ldr	r0, [pc, #52]	; (8003720 <HAL_I2C_MspInit+0x16c>)
 80036ec:	f003 fd70 	bl	80071d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_I2C_MspInit+0x160>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	4a07      	ldr	r2, [pc, #28]	; (8003714 <HAL_I2C_MspInit+0x160>)
 80036f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036fa:	6593      	str	r3, [r2, #88]	; 0x58
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_I2C_MspInit+0x160>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
}
 8003708:	bf00      	nop
 800370a:	37c0      	adds	r7, #192	; 0xc0
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40005400 	.word	0x40005400
 8003714:	40021000 	.word	0x40021000
 8003718:	48000400 	.word	0x48000400
 800371c:	40005800 	.word	0x40005800
 8003720:	48001400 	.word	0x48001400

08003724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b0b2      	sub	sp, #200	; 0xc8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800373c:	f107 0320 	add.w	r3, r7, #32
 8003740:	2294      	movs	r2, #148	; 0x94
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f00b fb7a 	bl	800ee3e <memset>
  if(huart->Instance==LPUART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a64      	ldr	r2, [pc, #400]	; (80038e0 <HAL_UART_MspInit+0x1bc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d13e      	bne.n	80037d2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003754:	2320      	movs	r3, #32
 8003756:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003758:	2300      	movs	r3, #0
 800375a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800375c:	f107 0320 	add.w	r3, r7, #32
 8003760:	4618      	mov	r0, r3
 8003762:	f005 fc87 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800376c:	f7ff fe32 	bl	80033d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003770:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	4a5b      	ldr	r2, [pc, #364]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800377c:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003788:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 800378a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378c:	4a55      	ldr	r2, [pc, #340]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 800378e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80037a0:	f004 fd80 	bl	80082a4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80037a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80037a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80037be:	2308      	movs	r3, #8
 80037c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4847      	ldr	r0, [pc, #284]	; (80038e8 <HAL_UART_MspInit+0x1c4>)
 80037cc:	f003 fd00 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037d0:	e081      	b.n	80038d6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a45      	ldr	r2, [pc, #276]	; (80038ec <HAL_UART_MspInit+0x1c8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d13b      	bne.n	8003854 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80037dc:	2302      	movs	r3, #2
 80037de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037e0:	2300      	movs	r3, #0
 80037e2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037e4:	f107 0320 	add.w	r3, r7, #32
 80037e8:	4618      	mov	r0, r3
 80037ea:	f005 fc43 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80037f4:	f7ff fdee 	bl	80033d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037f8:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a39      	ldr	r2, [pc, #228]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 80037fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
 8003804:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003810:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003814:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003816:	f043 0308 	orr.w	r3, r3, #8
 800381a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 800381e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003828:	2360      	movs	r3, #96	; 0x60
 800382a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383a:	2303      	movs	r3, #3
 800383c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003840:	2307      	movs	r3, #7
 8003842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003846:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800384a:	4619      	mov	r1, r3
 800384c:	4828      	ldr	r0, [pc, #160]	; (80038f0 <HAL_UART_MspInit+0x1cc>)
 800384e:	f003 fcbf 	bl	80071d0 <HAL_GPIO_Init>
}
 8003852:	e040      	b.n	80038d6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a26      	ldr	r2, [pc, #152]	; (80038f4 <HAL_UART_MspInit+0x1d0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d13b      	bne.n	80038d6 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800385e:	2304      	movs	r3, #4
 8003860:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003862:	2300      	movs	r3, #0
 8003864:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003866:	f107 0320 	add.w	r3, r7, #32
 800386a:	4618      	mov	r0, r3
 800386c:	f005 fc02 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_UART_MspInit+0x156>
      Error_Handler();
 8003876:	f7ff fdad 	bl	80033d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800387a:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	4a19      	ldr	r2, [pc, #100]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
 8003886:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003892:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	4a13      	ldr	r2, [pc, #76]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 8003898:	f043 0308 	orr.w	r3, r3, #8
 800389c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_UART_MspInit+0x1c0>)
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	2302      	movs	r3, #2
 80038b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038be:	2303      	movs	r3, #3
 80038c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038c4:	2307      	movs	r3, #7
 80038c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4807      	ldr	r0, [pc, #28]	; (80038f0 <HAL_UART_MspInit+0x1cc>)
 80038d2:	f003 fc7d 	bl	80071d0 <HAL_GPIO_Init>
}
 80038d6:	bf00      	nop
 80038d8:	37c8      	adds	r7, #200	; 0xc8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40008000 	.word	0x40008000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	48001800 	.word	0x48001800
 80038ec:	40004400 	.word	0x40004400
 80038f0:	48000c00 	.word	0x48000c00
 80038f4:	40004800 	.word	0x40004800

080038f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <HAL_SPI_MspInit+0xd8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d128      	bne.n	800396c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800391a:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
 8003926:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003932:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800394a:	231a      	movs	r3, #26
 800394c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394e:	2302      	movs	r3, #2
 8003950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003956:	2303      	movs	r3, #3
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800395a:	2305      	movs	r3, #5
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800395e:	f107 031c 	add.w	r3, r7, #28
 8003962:	4619      	mov	r1, r3
 8003964:	481c      	ldr	r0, [pc, #112]	; (80039d8 <HAL_SPI_MspInit+0xe0>)
 8003966:	f003 fc33 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800396a:	e02d      	b.n	80039c8 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <HAL_SPI_MspInit+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d128      	bne.n	80039c8 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 800397c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 8003994:	f043 0304 	orr.w	r3, r3, #4
 8003998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_SPI_MspInit+0xdc>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80039a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80039aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80039b8:	2306      	movs	r3, #6
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039bc:	f107 031c 	add.w	r3, r7, #28
 80039c0:	4619      	mov	r1, r3
 80039c2:	4807      	ldr	r0, [pc, #28]	; (80039e0 <HAL_SPI_MspInit+0xe8>)
 80039c4:	f003 fc04 	bl	80071d0 <HAL_GPIO_Init>
}
 80039c8:	bf00      	nop
 80039ca:	3730      	adds	r7, #48	; 0x30
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40003800 	.word	0x40003800
 80039d4:	40021000 	.word	0x40021000
 80039d8:	48000c00 	.word	0x48000c00
 80039dc:	40003c00 	.word	0x40003c00
 80039e0:	48000800 	.word	0x48000800

080039e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08e      	sub	sp, #56	; 0x38
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a4d      	ldr	r2, [pc, #308]	; (8003b38 <HAL_TIM_PWM_MspInit+0x154>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d131      	bne.n	8003a6a <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a06:	4b4d      	ldr	r3, [pc, #308]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0a:	4a4c      	ldr	r2, [pc, #304]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a10:	6613      	str	r3, [r2, #96]	; 0x60
 8003a12:	4b4a      	ldr	r3, [pc, #296]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	4a46      	ldr	r2, [pc, #280]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a24:	f043 0310 	orr.w	r3, r3, #16
 8003a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a2a:	4b44      	ldr	r3, [pc, #272]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003a36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	2300      	movs	r3, #0
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a50:	4619      	mov	r1, r3
 8003a52:	483b      	ldr	r0, [pc, #236]	; (8003b40 <HAL_TIM_PWM_MspInit+0x15c>)
 8003a54:	f003 fbbc 	bl	80071d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	201a      	movs	r0, #26
 8003a5e:	f003 fb80 	bl	8007162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003a62:	201a      	movs	r0, #26
 8003a64:	f003 fb99 	bl	800719a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003a68:	e062      	b.n	8003b30 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d10c      	bne.n	8003a8e <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	4a30      	ldr	r2, [pc, #192]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a80:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	69bb      	ldr	r3, [r7, #24]
}
 8003a8c:	e050      	b.n	8003b30 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM3)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2c      	ldr	r2, [pc, #176]	; (8003b44 <HAL_TIM_PWM_MspInit+0x160>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10c      	bne.n	8003ab2 <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a98:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
}
 8003ab0:	e03e      	b.n	8003b30 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM4)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <HAL_TIM_PWM_MspInit+0x164>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d128      	bne.n	8003b0e <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003abc:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac8:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003ada:	f043 0310 	orr.w	r3, r3, #16
 8003ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003aec:	2301      	movs	r3, #1
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af8:	2300      	movs	r3, #0
 8003afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003afc:	2302      	movs	r3, #2
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b04:	4619      	mov	r1, r3
 8003b06:	480e      	ldr	r0, [pc, #56]	; (8003b40 <HAL_TIM_PWM_MspInit+0x15c>)
 8003b08:	f003 fb62 	bl	80071d0 <HAL_GPIO_Init>
}
 8003b0c:	e010      	b.n	8003b30 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM15)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_TIM_PWM_MspInit+0x168>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10b      	bne.n	8003b30 <HAL_TIM_PWM_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1c:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b22:	6613      	str	r3, [r2, #96]	; 0x60
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_TIM_PWM_MspInit+0x158>)
 8003b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
}
 8003b30:	bf00      	nop
 8003b32:	3738      	adds	r7, #56	; 0x38
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	48001000 	.word	0x48001000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40014000 	.word	0x40014000

08003b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <HAL_TIM_Base_MspInit+0x44>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d113      	bne.n	8003b8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <HAL_TIM_Base_MspInit+0x48>)
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <HAL_TIM_Base_MspInit+0x48>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_TIM_Base_MspInit+0x48>)
 8003b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	201a      	movs	r0, #26
 8003b80:	f003 faef 	bl	8007162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003b84:	201a      	movs	r0, #26
 8003b86:	f003 fb08 	bl	800719a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40014800 	.word	0x40014800
 8003b98:	40021000 	.word	0x40021000

08003b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08e      	sub	sp, #56	; 0x38
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a73      	ldr	r2, [pc, #460]	; (8003d88 <HAL_TIM_MspPostInit+0x1ec>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d11d      	bne.n	8003bfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bbe:	4b73      	ldr	r3, [pc, #460]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	4a72      	ldr	r2, [pc, #456]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003bc4:	f043 0310 	orr.w	r3, r3, #16
 8003bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bca:	4b70      	ldr	r3, [pc, #448]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	623b      	str	r3, [r7, #32]
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003bd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be4:	2300      	movs	r3, #0
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003be8:	2301      	movs	r3, #1
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4867      	ldr	r0, [pc, #412]	; (8003d90 <HAL_TIM_MspPostInit+0x1f4>)
 8003bf4:	f003 faec 	bl	80071d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003bf8:	e0c2      	b.n	8003d80 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d13a      	bne.n	8003c7a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c04:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c08:	4a60      	ldr	r2, [pc, #384]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c10:	4b5e      	ldr	r3, [pc, #376]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1c:	4b5b      	ldr	r3, [pc, #364]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	4a5a      	ldr	r2, [pc, #360]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c22:	f043 0302 	orr.w	r3, r3, #2
 8003c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c28:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c34:	2301      	movs	r3, #1
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c40:	2300      	movs	r3, #0
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c44:	2301      	movs	r3, #1
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c52:	f003 fabd 	bl	80071d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c64:	2300      	movs	r3, #0
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c70:	4619      	mov	r1, r3
 8003c72:	4848      	ldr	r0, [pc, #288]	; (8003d94 <HAL_TIM_MspPostInit+0x1f8>)
 8003c74:	f003 faac 	bl	80071d0 <HAL_GPIO_Init>
}
 8003c78:	e082      	b.n	8003d80 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a46      	ldr	r2, [pc, #280]	; (8003d98 <HAL_TIM_MspPostInit+0x1fc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d138      	bne.n	8003cf6 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c84:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	4a40      	ldr	r2, [pc, #256]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c90:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca0:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003ca2:	f043 0304 	orr.w	r3, r3, #4
 8003ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca8:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4831      	ldr	r0, [pc, #196]	; (8003d94 <HAL_TIM_MspPostInit+0x1f8>)
 8003cd0:	f003 fa7e 	bl	80071d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cec:	4619      	mov	r1, r3
 8003cee:	482b      	ldr	r0, [pc, #172]	; (8003d9c <HAL_TIM_MspPostInit+0x200>)
 8003cf0:	f003 fa6e 	bl	80071d0 <HAL_GPIO_Init>
}
 8003cf4:	e044      	b.n	8003d80 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <HAL_TIM_MspPostInit+0x204>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d11d      	bne.n	8003d3c <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d00:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d04:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003d06:	f043 0308 	orr.w	r3, r3, #8
 8003d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d26:	2300      	movs	r3, #0
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d32:	4619      	mov	r1, r3
 8003d34:	481b      	ldr	r0, [pc, #108]	; (8003da4 <HAL_TIM_MspPostInit+0x208>)
 8003d36:	f003 fa4b 	bl	80071d0 <HAL_GPIO_Init>
}
 8003d3a:	e021      	b.n	8003d80 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_TIM_MspPostInit+0x20c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d11c      	bne.n	8003d80 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_TIM_MspPostInit+0x1f0>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d64:	2302      	movs	r3, #2
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003d70:	230e      	movs	r3, #14
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4806      	ldr	r0, [pc, #24]	; (8003d94 <HAL_TIM_MspPostInit+0x1f8>)
 8003d7c:	f003 fa28 	bl	80071d0 <HAL_GPIO_Init>
}
 8003d80:	bf00      	nop
 8003d82:	3738      	adds	r7, #56	; 0x38
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	48001000 	.word	0x48001000
 8003d94:	48000400 	.word	0x48000400
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	48000800 	.word	0x48000800
 8003da0:	40000800 	.word	0x40000800
 8003da4:	48000c00 	.word	0x48000c00
 8003da8:	40014000 	.word	0x40014000

08003dac <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a50      	ldr	r2, [pc, #320]	; (8003efc <HAL_SAI_MspInit+0x150>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d124      	bne.n	8003e08 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003dbe:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <HAL_SAI_MspInit+0x154>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003dc6:	4b4f      	ldr	r3, [pc, #316]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dca:	4a4e      	ldr	r2, [pc, #312]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8003dd2:	4b4c      	ldr	r3, [pc, #304]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8003dde:	4b48      	ldr	r3, [pc, #288]	; (8003f00 <HAL_SAI_MspInit+0x154>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a46      	ldr	r2, [pc, #280]	; (8003f00 <HAL_SAI_MspInit+0x154>)
 8003de6:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003de8:	2374      	movs	r3, #116	; 0x74
 8003dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	2302      	movs	r3, #2
 8003dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df4:	2300      	movs	r3, #0
 8003df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003df8:	230d      	movs	r3, #13
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4619      	mov	r1, r3
 8003e02:	4841      	ldr	r0, [pc, #260]	; (8003f08 <HAL_SAI_MspInit+0x15c>)
 8003e04:	f003 f9e4 	bl	80071d0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3f      	ldr	r2, [pc, #252]	; (8003f0c <HAL_SAI_MspInit+0x160>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d135      	bne.n	8003e7e <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8003e12:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_SAI_MspInit+0x154>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	4a39      	ldr	r2, [pc, #228]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e24:	6613      	str	r3, [r2, #96]	; 0x60
 8003e26:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_SAI_MspInit+0x154>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	4a31      	ldr	r2, [pc, #196]	; (8003f00 <HAL_SAI_MspInit+0x154>)
 8003e3a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	2302      	movs	r3, #2
 8003e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003e4c:	230d      	movs	r3, #13
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	4619      	mov	r1, r3
 8003e56:	482c      	ldr	r0, [pc, #176]	; (8003f08 <HAL_SAI_MspInit+0x15c>)
 8003e58:	f003 f9ba 	bl	80071d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003e5c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e62:	2302      	movs	r3, #2
 8003e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003e6e:	230d      	movs	r3, #13
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	4619      	mov	r1, r3
 8003e78:	4825      	ldr	r0, [pc, #148]	; (8003f10 <HAL_SAI_MspInit+0x164>)
 8003e7a:	f003 f9a9 	bl	80071d0 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a24      	ldr	r2, [pc, #144]	; (8003f14 <HAL_SAI_MspInit+0x168>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d135      	bne.n	8003ef4 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003e88:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <HAL_SAI_MspInit+0x16c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003e90:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e94:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_SAI_MspInit+0x158>)
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_SAI_MspInit+0x16c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a1a      	ldr	r2, [pc, #104]	; (8003f18 <HAL_SAI_MspInit+0x16c>)
 8003eb0:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003eb2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003ec4:	230d      	movs	r3, #13
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4813      	ldr	r0, [pc, #76]	; (8003f1c <HAL_SAI_MspInit+0x170>)
 8003ed0:	f003 f97e 	bl	80071d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ed4:	2340      	movs	r3, #64	; 0x40
 8003ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003ee4:	230d      	movs	r3, #13
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee8:	f107 0314 	add.w	r3, r7, #20
 8003eec:	4619      	mov	r1, r3
 8003eee:	480c      	ldr	r0, [pc, #48]	; (8003f20 <HAL_SAI_MspInit+0x174>)
 8003ef0:	f003 f96e 	bl	80071d0 <HAL_GPIO_Init>

    }
}
 8003ef4:	bf00      	nop
 8003ef6:	3728      	adds	r7, #40	; 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40015404 	.word	0x40015404
 8003f00:	20000a64 	.word	0x20000a64
 8003f04:	40021000 	.word	0x40021000
 8003f08:	48001000 	.word	0x48001000
 8003f0c:	40015424 	.word	0x40015424
 8003f10:	48001400 	.word	0x48001400
 8003f14:	40015804 	.word	0x40015804
 8003f18:	20000a68 	.word	0x20000a68
 8003f1c:	48000400 	.word	0x48000400
 8003f20:	48000800 	.word	0x48000800

08003f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f28:	e7fe      	b.n	8003f28 <NMI_Handler+0x4>

08003f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f2e:	e7fe      	b.n	8003f2e <HardFault_Handler+0x4>

08003f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f34:	e7fe      	b.n	8003f34 <MemManage_Handler+0x4>

08003f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f36:	b480      	push	{r7}
 8003f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f3a:	e7fe      	b.n	8003f3a <BusFault_Handler+0x4>

08003f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f40:	e7fe      	b.n	8003f40 <UsageFault_Handler+0x4>

08003f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f70:	f001 ff5c 	bl	8005e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f7c:	4803      	ldr	r0, [pc, #12]	; (8003f8c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8003f7e:	f008 fa01 	bl	800c384 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8003f82:	4803      	ldr	r0, [pc, #12]	; (8003f90 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003f84:	f008 f9fe 	bl	800c384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000898 	.word	0x20000898
 8003f90:	20000a14 	.word	0x20000a14

08003f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return 1;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_kill>:

int _kill(int pid, int sig)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fae:	f00a ffa9 	bl	800ef04 <__errno>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2216      	movs	r2, #22
 8003fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_exit>:

void _exit (int status)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe7 	bl	8003fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fd6:	e7fe      	b.n	8003fd6 <_exit+0x12>

08003fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e00a      	b.n	8004000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fea:	f3af 8000 	nop.w
 8003fee:	4601      	mov	r1, r0
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	60ba      	str	r2, [r7, #8]
 8003ff6:	b2ca      	uxtb	r2, r1
 8003ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	dbf0      	blt.n	8003fea <_read+0x12>
  }

  return len;
 8004008:	687b      	ldr	r3, [r7, #4]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e009      	b.n	8004038 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	60ba      	str	r2, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff f9bf 	bl	80033b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	3301      	adds	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	dbf1      	blt.n	8004024 <_write+0x12>
  }
  return len;
 8004040:	687b      	ldr	r3, [r7, #4]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <_close>:

int _close(int file)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004072:	605a      	str	r2, [r3, #4]
  return 0;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <_isatty>:

int _isatty(int file)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800408a:	2301      	movs	r3, #1
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <_sbrk+0x5c>)
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <_sbrk+0x60>)
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <_sbrk+0x64>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <_sbrk+0x64>)
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <_sbrk+0x68>)
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <_sbrk+0x64>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d207      	bcs.n	80040f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040e4:	f00a ff0e 	bl	800ef04 <__errno>
 80040e8:	4603      	mov	r3, r0
 80040ea:	220c      	movs	r2, #12
 80040ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	e009      	b.n	8004108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <_sbrk+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <_sbrk+0x64>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	4a05      	ldr	r2, [pc, #20]	; (8004118 <_sbrk+0x64>)
 8004104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	200a0000 	.word	0x200a0000
 8004114:	00000400 	.word	0x00000400
 8004118:	20000a6c 	.word	0x20000a6c
 800411c:	20000be0 	.word	0x20000be0

08004120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <SystemInit+0x20>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <SystemInit+0x20>)
 800412c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	b21a      	sxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b21b      	sxth	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	b21b      	sxth	r3, r3
 8004166:	b29b      	uxth	r3, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2204      	movs	r2, #4
 8004188:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2204      	movs	r2, #4
 800418e:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	b21a      	sxth	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b21a      	sxth	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800423a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004244:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004262:	2300      	movs	r3, #0
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	e010      	b.n	800428a <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	330a      	adds	r3, #10
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	2200      	movs	r2, #0
 8004274:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	330a      	adds	r3, #10
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	2200      	movs	r2, #0
 8004282:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	3301      	adds	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d9eb      	bls.n	8004268 <UG_Init+0xf4>
   }

   gui = g;
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <UG_Init+0x130>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6013      	str	r3, [r2, #0]
   return 1;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000a70 	.word	0x20000a70

080042a8 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <UG_FontSelect+0x1c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	20000a70 	.word	0x20000a70

080042c8 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	4603      	mov	r3, r0
 80042d0:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <UG_FillScreen+0x44>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	b21a      	sxth	r2, r3
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <UG_FillScreen+0x44>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	b219      	sxth	r1, r3
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	460b      	mov	r3, r1
 80042fc:	2100      	movs	r1, #0
 80042fe:	2000      	movs	r0, #0
 8004300:	f000 f806 	bl	8004310 <UG_FillFrame>
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000a70 	.word	0x20000a70

08004310 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	4604      	mov	r4, r0
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4623      	mov	r3, r4
 8004320:	80fb      	strh	r3, [r7, #6]
 8004322:	4603      	mov	r3, r0
 8004324:	80bb      	strh	r3, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	807b      	strh	r3, [r7, #2]
 800432a:	4613      	mov	r3, r2
 800432c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800432e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004336:	429a      	cmp	r2, r3
 8004338:	da05      	bge.n	8004346 <UG_FillFrame+0x36>
     swap(x1,x2);
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	817b      	strh	r3, [r7, #10]
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	80fb      	strh	r3, [r7, #6]
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8004346:	f9b7 2000 	ldrsh.w	r2, [r7]
 800434a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	da05      	bge.n	800435e <UG_FillFrame+0x4e>
     swap(y1,y2);
 8004352:	88bb      	ldrh	r3, [r7, #4]
 8004354:	813b      	strh	r3, [r7, #8]
 8004356:	883b      	ldrh	r3, [r7, #0]
 8004358:	80bb      	strh	r3, [r7, #4]
 800435a:	893b      	ldrh	r3, [r7, #8]
 800435c:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 800435e:	88bb      	ldrh	r3, [r7, #4]
 8004360:	81bb      	strh	r3, [r7, #12]
 8004362:	e01e      	b.n	80043a2 <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	81fb      	strh	r3, [r7, #14]
 8004368:	e00f      	b.n	800438a <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <UG_FillFrame+0xa8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	8c3a      	ldrh	r2, [r7, #32]
 8004374:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004378:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800437c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800437e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004382:	b29b      	uxth	r3, r3
 8004384:	3301      	adds	r3, #1
 8004386:	b29b      	uxth	r3, r3
 8004388:	81fb      	strh	r3, [r7, #14]
 800438a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800438e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004392:	429a      	cmp	r2, r3
 8004394:	dde9      	ble.n	800436a <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 8004396:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800439a:	b29b      	uxth	r3, r3
 800439c:	3301      	adds	r3, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	81bb      	strh	r3, [r7, #12]
 80043a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	ddda      	ble.n	8004364 <UG_FillFrame+0x54>
      }
   }
}
 80043ae:	bf00      	nop
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	20000a70 	.word	0x20000a70

080043bc <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	4604      	mov	r4, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	461a      	mov	r2, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	80fb      	strh	r3, [r7, #6]
 80043ce:	4603      	mov	r3, r0
 80043d0:	80bb      	strh	r3, [r7, #4]
 80043d2:	460b      	mov	r3, r1
 80043d4:	807b      	strh	r3, [r7, #2]
 80043d6:	4613      	mov	r3, r2
 80043d8:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80043da:	4b67      	ldr	r3, [pc, #412]	; (8004578 <UG_DrawLine+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d013      	beq.n	8004412 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80043ea:	4b63      	ldr	r3, [pc, #396]	; (8004578 <UG_DrawLine+0x1bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	461d      	mov	r5, r3
 80043f2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80043f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80043fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80043fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004402:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	4623      	mov	r3, r4
 8004408:	47a8      	blx	r5
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80ae 	beq.w	800456e <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	b29b      	uxth	r3, r3
 800441a:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800441c:	883a      	ldrh	r2, [r7, #0]
 800441e:	88bb      	ldrh	r3, [r7, #4]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	b29b      	uxth	r3, r3
 8004424:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8004426:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	bfb8      	it	lt
 800442e:	425b      	neglt	r3, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8004434:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004438:	2b00      	cmp	r3, #0
 800443a:	bfb8      	it	lt
 800443c:	425b      	neglt	r3, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8004442:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	dd01      	ble.n	800444e <UG_DrawLine+0x92>
 800444a:	2301      	movs	r3, #1
 800444c:	e001      	b.n	8004452 <UG_DrawLine+0x96>
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8004454:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004458:	2b00      	cmp	r3, #0
 800445a:	dd01      	ble.n	8004460 <UG_DrawLine+0xa4>
 800445c:	2301      	movs	r3, #1
 800445e:	e001      	b.n	8004464 <UG_DrawLine+0xa8>
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
 8004464:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8004466:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800446a:	105b      	asrs	r3, r3, #1
 800446c:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800446e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004472:	105b      	asrs	r3, r3, #1
 8004474:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800447a:	88bb      	ldrh	r3, [r7, #4]
 800447c:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800447e:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <UG_DrawLine+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004488:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800448c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004490:	4798      	blx	r3

   if( dxabs >= dyabs )
 8004492:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800449a:	429a      	cmp	r2, r3
 800449c:	db33      	blt.n	8004506 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800449e:	2300      	movs	r3, #0
 80044a0:	83fb      	strh	r3, [r7, #30]
 80044a2:	e029      	b.n	80044f8 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80044a4:	8b7a      	ldrh	r2, [r7, #26]
 80044a6:	89fb      	ldrh	r3, [r7, #14]
 80044a8:	4413      	add	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80044ae:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80044b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	db09      	blt.n	80044ce <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80044ba:	8b7a      	ldrh	r2, [r7, #26]
 80044bc:	8a3b      	ldrh	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80044c4:	8afa      	ldrh	r2, [r7, #22]
 80044c6:	897b      	ldrh	r3, [r7, #10]
 80044c8:	4413      	add	r3, r2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80044ce:	8b3a      	ldrh	r2, [r7, #24]
 80044d0:	89bb      	ldrh	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <UG_DrawLine+0x1bc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80044e2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80044e6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80044ea:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80044ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	83fb      	strh	r3, [r7, #30]
 80044f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80044fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	dbcf      	blt.n	80044a4 <UG_DrawLine+0xe8>
 8004504:	e034      	b.n	8004570 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8004506:	2300      	movs	r3, #0
 8004508:	83fb      	strh	r3, [r7, #30]
 800450a:	e029      	b.n	8004560 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800450c:	8bba      	ldrh	r2, [r7, #28]
 800450e:	8a3b      	ldrh	r3, [r7, #16]
 8004510:	4413      	add	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8004516:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800451a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800451e:	429a      	cmp	r2, r3
 8004520:	db09      	blt.n	8004536 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8004522:	8bba      	ldrh	r2, [r7, #28]
 8004524:	89fb      	ldrh	r3, [r7, #14]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	b29b      	uxth	r3, r3
 800452a:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800452c:	8b3a      	ldrh	r2, [r7, #24]
 800452e:	89bb      	ldrh	r3, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8004536:	8afa      	ldrh	r2, [r7, #22]
 8004538:	897b      	ldrh	r3, [r7, #10]
 800453a:	4413      	add	r3, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <UG_DrawLine+0x1bc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800454a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800454e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004552:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8004554:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004558:	b29b      	uxth	r3, r3
 800455a:	3301      	adds	r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	83fb      	strh	r3, [r7, #30]
 8004560:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004568:	429a      	cmp	r2, r3
 800456a:	dbcf      	blt.n	800450c <UG_DrawLine+0x150>
 800456c:	e000      	b.n	8004570 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800456e:	bf00      	nop
      }
   }  
}
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bdb0      	pop	{r4, r5, r7, pc}
 8004576:	bf00      	nop
 8004578:	20000a70 	.word	0x20000a70

0800457c <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b087      	sub	sp, #28
 8004580:	af02      	add	r7, sp, #8
 8004582:	4603      	mov	r3, r0
 8004584:	603a      	str	r2, [r7, #0]
 8004586:	80fb      	strh	r3, [r7, #6]
 8004588:	460b      	mov	r3, r1
 800458a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8004590:	88bb      	ldrh	r3, [r7, #4]
 8004592:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8004594:	4b44      	ldr	r3, [pc, #272]	; (80046a8 <UG_PutString+0x12c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fae4 	bl	8004b68 <_UG_FontSelect>
   while ( *str != 0 )
 80045a0:	e064      	b.n	800466c <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80045a2:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <UG_PutString+0x12c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 80045ae:	463b      	mov	r3, r7
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f915 	bl	80047e0 <_UG_DecodeUTF8>
 80045b6:	4603      	mov	r3, r0
 80045b8:	817b      	strh	r3, [r7, #10]
 80045ba:	e004      	b.n	80045c6 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	603a      	str	r2, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80045c6:	897b      	ldrh	r3, [r7, #10]
 80045c8:	2b0a      	cmp	r3, #10
 80045ca:	d105      	bne.n	80045d8 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80045cc:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <UG_PutString+0x12c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	81fb      	strh	r3, [r7, #14]
         continue;
 80045d6:	e049      	b.n	800466c <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80045d8:	897b      	ldrh	r3, [r7, #10]
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f977 	bl	80048d0 <_UG_GetCharData>
 80045e2:	4603      	mov	r3, r0
 80045e4:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80045e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d100      	bne.n	80045f2 <UG_PutString+0x76>
 80045f0:	e03c      	b.n	800466c <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 80045f2:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <UG_PutString+0x12c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045fc:	4619      	mov	r1, r3
 80045fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004602:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004606:	4413      	add	r3, r2
 8004608:	4299      	cmp	r1, r3
 800460a:	dc12      	bgt.n	8004632 <UG_PutString+0xb6>
      {
         xp = x;
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <UG_PutString+0x12c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004618:	b21a      	sxth	r2, r3
 800461a:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <UG_PutString+0x12c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 8004622:	b21b      	sxth	r3, r3
 8004624:	4413      	add	r3, r2
 8004626:	b21b      	sxth	r3, r3
 8004628:	b29a      	uxth	r2, r3
 800462a:	89bb      	ldrh	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	b29b      	uxth	r3, r3
 8004630:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <UG_PutString+0x12c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <UG_PutString+0x12c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004642:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004646:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800464a:	8978      	ldrh	r0, [r7, #10]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4623      	mov	r3, r4
 8004650:	f000 fb0c 	bl	8004c6c <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <UG_PutString+0x12c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 800465c:	b29a      	uxth	r2, r3
 800465e:	893b      	ldrh	r3, [r7, #8]
 8004660:	4413      	add	r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	4413      	add	r3, r2
 8004668:	b29b      	uxth	r3, r3
 800466a:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d196      	bne.n	80045a2 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <UG_PutString+0x12c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <UG_PutString+0x12c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468a:	461c      	mov	r4, r3
 800468c:	f04f 33ff 	mov.w	r3, #4294967295
 8004690:	f04f 32ff 	mov.w	r2, #4294967295
 8004694:	f04f 31ff 	mov.w	r1, #4294967295
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	47a0      	blx	r4
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd90      	pop	{r4, r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000a70 	.word	0x20000a70

080046ac <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4623      	mov	r3, r4
 80046bc:	80fb      	strh	r3, [r7, #6]
 80046be:	4603      	mov	r3, r0
 80046c0:	80bb      	strh	r3, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	807b      	strh	r3, [r7, #2]
 80046c6:	4613      	mov	r3, r2
 80046c8:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <UG_PutChar+0x74>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fa49 	bl	8004b68 <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 80046d6:	883c      	ldrh	r4, [r7, #0]
 80046d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80046dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80046e0:	88f8      	ldrh	r0, [r7, #6]
 80046e2:	8b3b      	ldrh	r3, [r7, #24]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	4623      	mov	r3, r4
 80046e8:	f000 fac0 	bl	8004c6c <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <UG_PutChar+0x74>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80046fc:	4b08      	ldr	r3, [pc, #32]	; (8004720 <UG_PutChar+0x74>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004702:	461c      	mov	r4, r3
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	f04f 31ff 	mov.w	r1, #4294967295
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	47a0      	blx	r4
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}
 800471e:	bf00      	nop
 8004720:	20000a70 	.word	0x20000a70

08004724 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <UG_SetForecolor+0x20>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	20000a70 	.word	0x20000a70

08004748 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <UG_SetBackcolor+0x20>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20000a70 	.word	0x20000a70

0800476c <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <UG_FontSetHSpace+0x24>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	b252      	sxtb	r2, r2
 800477e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000a70 	.word	0x20000a70

08004794 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <UG_FontSetVSpace+0x24>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	b252      	sxtb	r2, r2
 80047a6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000a70 	.word	0x20000a70

080047bc <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <UG_FontSetTransparency+0x20>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	79fa      	ldrb	r2, [r7, #7]
 80047cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000a70 	.word	0x20000a70

080047e0 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  char c=**str;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80047f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	db07      	blt.n	8004808 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
    return c;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	b29b      	uxth	r3, r3
 8004806:	e05c      	b.n	80048c2 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8004808:	2300      	movs	r3, #0
 800480a:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 800480c:	2300      	movs	r3, #0
 800480e:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8004810:	e04f      	b.n	80048b2 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8004824:	7bbb      	ldrb	r3, [r7, #14]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d130      	bne.n	800488c <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2bdf      	cmp	r3, #223	; 0xdf
 800482e:	d806      	bhi.n	800483e <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8004830:	2301      	movs	r3, #1
 8004832:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	e023      	b.n	8004886 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2bef      	cmp	r3, #239	; 0xef
 8004842:	d806      	bhi.n	8004852 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8004844:	2302      	movs	r3, #2
 8004846:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e019      	b.n	8004886 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	2bf7      	cmp	r3, #247	; 0xf7
 8004856:	d806      	bhi.n	8004866 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8004858:	2303      	movs	r3, #3
 800485a:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	e00f      	b.n	8004886 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	2bfb      	cmp	r3, #251	; 0xfb
 800486a:	d806      	bhi.n	800487a <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 800486c:	2304      	movs	r3, #4
 800486e:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e005      	b.n	8004886 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800487a:	2305      	movs	r3, #5
 800487c:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	81bb      	strh	r3, [r7, #12]
 800488a:	e012      	b.n	80048b2 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 800488c:	89bb      	ldrh	r3, [r7, #12]
 800488e:	019b      	lsls	r3, r3, #6
 8004890:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	b21b      	sxth	r3, r3
 8004896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800489a:	b21a      	sxth	r2, r3
 800489c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b21b      	sxth	r3, r3
 80048a4:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80048a6:	7bbb      	ldrb	r3, [r7, #14]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	73bb      	strb	r3, [r7, #14]
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <_UG_DecodeUTF8+0xde>
  while(**str)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1aa      	bne.n	8004812 <_UG_DecodeUTF8+0x32>
 80048bc:	e000      	b.n	80048c0 <_UG_DecodeUTF8+0xe0>
        break;
 80048be:	bf00      	nop
    }
  }
  return encoding;
 80048c0:	89bb      	ldrh	r3, [r7, #12]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80048dc:	2300      	movs	r3, #0
 80048de:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80048f0:	4b98      	ldr	r3, [pc, #608]	; (8004b54 <_UG_GetCharData+0x284>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f6:	4b98      	ldr	r3, [pc, #608]	; (8004b58 <_UG_GetCharData+0x288>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d10f      	bne.n	800491e <_UG_GetCharData+0x4e>
 80048fe:	4b97      	ldr	r3, [pc, #604]	; (8004b5c <_UG_GetCharData+0x28c>)
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	88fa      	ldrh	r2, [r7, #6]
 8004904:	429a      	cmp	r2, r3
 8004906:	d10a      	bne.n	800491e <_UG_GetCharData+0x4e>
    if(p){
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800490e:	4b94      	ldr	r3, [pc, #592]	; (8004b60 <_UG_GetCharData+0x290>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8004916:	4b93      	ldr	r3, [pc, #588]	; (8004b64 <_UG_GetCharData+0x294>)
 8004918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800491c:	e116      	b.n	8004b4c <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800491e:	4b8d      	ldr	r3, [pc, #564]	; (8004b54 <_UG_GetCharData+0x284>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80cc 	beq.w	8004ac4 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	2bfc      	cmp	r3, #252	; 0xfc
 8004930:	f300 80c8 	bgt.w	8004ac4 <_UG_GetCharData+0x1f4>
 8004934:	2bd6      	cmp	r3, #214	; 0xd6
 8004936:	da09      	bge.n	800494c <_UG_GetCharData+0x7c>
 8004938:	2bc4      	cmp	r3, #196	; 0xc4
 800493a:	d06c      	beq.n	8004a16 <_UG_GetCharData+0x146>
 800493c:	2bc4      	cmp	r3, #196	; 0xc4
 800493e:	f300 80c1 	bgt.w	8004ac4 <_UG_GetCharData+0x1f4>
 8004942:	2bb0      	cmp	r3, #176	; 0xb0
 8004944:	d06d      	beq.n	8004a22 <_UG_GetCharData+0x152>
 8004946:	2bb5      	cmp	r3, #181	; 0xb5
 8004948:	d068      	beq.n	8004a1c <_UG_GetCharData+0x14c>
 800494a:	e06e      	b.n	8004a2a <_UG_GetCharData+0x15a>
 800494c:	3bd6      	subs	r3, #214	; 0xd6
 800494e:	2b26      	cmp	r3, #38	; 0x26
 8004950:	f200 80b8 	bhi.w	8004ac4 <_UG_GetCharData+0x1f4>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <_UG_GetCharData+0x8c>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	080049ff 	.word	0x080049ff
 8004960:	08004ac5 	.word	0x08004ac5
 8004964:	08004ac5 	.word	0x08004ac5
 8004968:	08004ac5 	.word	0x08004ac5
 800496c:	08004ac5 	.word	0x08004ac5
 8004970:	08004ac5 	.word	0x08004ac5
 8004974:	08004a0b 	.word	0x08004a0b
 8004978:	08004ac5 	.word	0x08004ac5
 800497c:	08004ac5 	.word	0x08004ac5
 8004980:	08004ac5 	.word	0x08004ac5
 8004984:	08004ac5 	.word	0x08004ac5
 8004988:	08004ac5 	.word	0x08004ac5
 800498c:	08004ac5 	.word	0x08004ac5
 8004990:	08004ac5 	.word	0x08004ac5
 8004994:	08004a11 	.word	0x08004a11
 8004998:	08004ac5 	.word	0x08004ac5
 800499c:	08004ac5 	.word	0x08004ac5
 80049a0:	08004ac5 	.word	0x08004ac5
 80049a4:	08004ac5 	.word	0x08004ac5
 80049a8:	08004ac5 	.word	0x08004ac5
 80049ac:	08004ac5 	.word	0x08004ac5
 80049b0:	08004ac5 	.word	0x08004ac5
 80049b4:	08004ac5 	.word	0x08004ac5
 80049b8:	08004ac5 	.word	0x08004ac5
 80049bc:	08004ac5 	.word	0x08004ac5
 80049c0:	08004ac5 	.word	0x08004ac5
 80049c4:	08004ac5 	.word	0x08004ac5
 80049c8:	08004ac5 	.word	0x08004ac5
 80049cc:	08004ac5 	.word	0x08004ac5
 80049d0:	08004ac5 	.word	0x08004ac5
 80049d4:	08004ac5 	.word	0x08004ac5
 80049d8:	08004ac5 	.word	0x08004ac5
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	08004ac5 	.word	0x08004ac5
 80049e4:	08004ac5 	.word	0x08004ac5
 80049e8:	08004ac5 	.word	0x08004ac5
 80049ec:	08004ac5 	.word	0x08004ac5
 80049f0:	08004ac5 	.word	0x08004ac5
 80049f4:	08004a05 	.word	0x08004a05
    {
       case 0xF6: encoding = 0x94; break; // ö
 80049f8:	2394      	movs	r3, #148	; 0x94
 80049fa:	80fb      	strh	r3, [r7, #6]
 80049fc:	e015      	b.n	8004a2a <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80049fe:	2399      	movs	r3, #153	; 0x99
 8004a00:	80fb      	strh	r3, [r7, #6]
 8004a02:	e012      	b.n	8004a2a <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8004a04:	2381      	movs	r3, #129	; 0x81
 8004a06:	80fb      	strh	r3, [r7, #6]
 8004a08:	e00f      	b.n	8004a2a <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8004a0a:	239a      	movs	r3, #154	; 0x9a
 8004a0c:	80fb      	strh	r3, [r7, #6]
 8004a0e:	e00c      	b.n	8004a2a <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8004a10:	2384      	movs	r3, #132	; 0x84
 8004a12:	80fb      	strh	r3, [r7, #6]
 8004a14:	e009      	b.n	8004a2a <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8004a16:	238e      	movs	r3, #142	; 0x8e
 8004a18:	80fb      	strh	r3, [r7, #6]
 8004a1a:	e006      	b.n	8004a2a <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8004a1c:	23e6      	movs	r3, #230	; 0xe6
 8004a1e:	80fb      	strh	r3, [r7, #6]
 8004a20:	e003      	b.n	8004a2a <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8004a22:	23f8      	movs	r3, #248	; 0xf8
 8004a24:	80fb      	strh	r3, [r7, #6]
 8004a26:	bf00      	nop
 8004a28:	e04c      	b.n	8004ac4 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004a2a:	e04b      	b.n	8004ac4 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8004a2c:	4b49      	ldr	r3, [pc, #292]	; (8004b54 <_UG_GetCharData+0x284>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	8a7a      	ldrh	r2, [r7, #18]
 8004a34:	0052      	lsls	r2, r2, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fb83 	bl	8004144 <ptr_8to16>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8004a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da06      	bge.n	8004a58 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8004a4a:	89fb      	ldrh	r3, [r7, #14]
 8004a4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a50:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8004a52:	2301      	movs	r3, #1
 8004a54:	747b      	strb	r3, [r7, #17]
 8004a56:	e032      	b.n	8004abe <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8004a58:	7c7b      	ldrb	r3, [r7, #17]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d021      	beq.n	8004aa2 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	8afb      	ldrh	r3, [r7, #22]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d30d      	bcc.n	8004a82 <_UG_GetCharData+0x1b2>
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	89fb      	ldrh	r3, [r7, #14]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d809      	bhi.n	8004a82 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8004a6e:	88fa      	ldrh	r2, [r7, #6]
 8004a70:	8afb      	ldrh	r3, [r7, #22]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	8abb      	ldrh	r3, [r7, #20]
 8004a78:	4413      	add	r3, r2
 8004a7a:	82bb      	strh	r3, [r7, #20]
        found=1;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	743b      	strb	r3, [r7, #16]
        break;
 8004a80:	e02a      	b.n	8004ad8 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	8afb      	ldrh	r3, [r7, #22]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d323      	bcc.n	8004ad2 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8004a8a:	89fa      	ldrh	r2, [r7, #14]
 8004a8c:	8afb      	ldrh	r3, [r7, #22]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	8abb      	ldrh	r3, [r7, #20]
 8004a94:	4413      	add	r3, r2
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	82bb      	strh	r3, [r7, #20]
      range=0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	747b      	strb	r3, [r7, #17]
 8004aa0:	e00d      	b.n	8004abe <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	89fb      	ldrh	r3, [r7, #14]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d102      	bne.n	8004ab0 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	743b      	strb	r3, [r7, #16]
        break;
 8004aae:	e013      	b.n	8004ad8 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	89fb      	ldrh	r3, [r7, #14]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d30e      	bcc.n	8004ad6 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8004ab8:	8abb      	ldrh	r3, [r7, #20]
 8004aba:	3301      	adds	r3, #1
 8004abc:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004abe:	8a7b      	ldrh	r3, [r7, #18]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	827b      	strh	r3, [r7, #18]
 8004ac4:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <_UG_GetCharData+0x284>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004aca:	8a7a      	ldrh	r2, [r7, #18]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3ad      	bcc.n	8004a2c <_UG_GetCharData+0x15c>
 8004ad0:	e002      	b.n	8004ad8 <_UG_GetCharData+0x208>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <_UG_GetCharData+0x208>
        break;
 8004ad6:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8004ad8:	7c3b      	ldrb	r3, [r7, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d034      	beq.n	8004b48 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <_UG_GetCharData+0x284>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <_UG_GetCharData+0x288>)
 8004ae6:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <_UG_GetCharData+0x28c>)
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8004aee:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <_UG_GetCharData+0x284>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	8aba      	ldrh	r2, [r7, #20]
 8004af6:	4917      	ldr	r1, [pc, #92]	; (8004b54 <_UG_GetCharData+0x284>)
 8004af8:	6809      	ldr	r1, [r1, #0]
 8004afa:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8004afc:	fb01 f202 	mul.w	r2, r1, r2
 8004b00:	4413      	add	r3, r2
 8004b02:	4a17      	ldr	r2, [pc, #92]	; (8004b60 <_UG_GetCharData+0x290>)
 8004b04:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8004b06:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <_UG_GetCharData+0x284>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <_UG_GetCharData+0x284>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b16:	8abb      	ldrh	r3, [r7, #20]
 8004b18:	4413      	add	r3, r2
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b21a      	sxth	r2, r3
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <_UG_GetCharData+0x294>)
 8004b20:	801a      	strh	r2, [r3, #0]
 8004b22:	e006      	b.n	8004b32 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <_UG_GetCharData+0x284>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004b2c:	b21a      	sxth	r2, r3
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <_UG_GetCharData+0x294>)
 8004b30:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <_UG_GetCharData+0x290>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <_UG_GetCharData+0x294>)
 8004b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b46:	e001      	b.n	8004b4c <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000a70 	.word	0x20000a70
 8004b58:	20000a74 	.word	0x20000a74
 8004b5c:	20000a78 	.word	0x20000a78
 8004b60:	20000a7c 	.word	0x20000a7c
 8004b64:	20000a80 	.word	0x20000a80

08004b68 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8004b70:	4b3d      	ldr	r3, [pc, #244]	; (8004c68 <_UG_FontSelect+0x100>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d070      	beq.n	8004c5e <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8004b7c:	4b3a      	ldr	r3, [pc, #232]	; (8004c68 <_UG_FontSelect+0x100>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	781a      	ldrb	r2, [r3, #0]
 8004b88:	4b37      	ldr	r3, [pc, #220]	; (8004c68 <_UG_FontSelect+0x100>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b25b      	sxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da01      	bge.n	8004ba8 <_UG_FontSelect+0x40>
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	e000      	b.n	8004baa <_UG_FontSelect+0x42>
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <_UG_FontSelect+0x100>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	4a2b      	ldr	r2, [pc, #172]	; (8004c68 <_UG_FontSelect+0x100>)
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	4a27      	ldr	r2, [pc, #156]	; (8004c68 <_UG_FontSelect+0x100>)
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8004bd4:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <_UG_FontSelect+0x100>)
 8004bd6:	681c      	ldr	r4, [r3, #0]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fab3 	bl	8004144 <ptr_8to16>
 8004bde:	4603      	mov	r3, r0
 8004be0:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3302      	adds	r3, #2
 8004be6:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8004be8:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <_UG_FontSelect+0x100>)
 8004bea:	681c      	ldr	r4, [r3, #0]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff faa9 	bl	8004144 <ptr_8to16>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <_UG_FontSelect+0x100>)
 8004bfe:	681c      	ldr	r4, [r3, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fa9f 	bl	8004144 <ptr_8to16>
 8004c06:	4603      	mov	r3, r0
 8004c08:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00b      	beq.n	8004c34 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <_UG_FontSelect+0x100>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8004c24:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <_UG_FontSelect+0x100>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	e003      	b.n	8004c3c <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8004c34:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <_UG_FontSelect+0x100>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <_UG_FontSelect+0x100>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <_UG_FontSelect+0x100>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4413      	add	r3, r2
 8004c52:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <_UG_FontSelect+0x100>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8004c5c:	e000      	b.n	8004c60 <_UG_FontSelect+0xf8>
    return;
 8004c5e:	bf00      	nop
}
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd90      	pop	{r4, r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000a70 	.word	0x20000a70

08004c6c <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8004c6c:	b5b0      	push	{r4, r5, r7, lr}
 8004c6e:	b08c      	sub	sp, #48	; 0x30
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4604      	mov	r4, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4623      	mov	r3, r4
 8004c7c:	80fb      	strh	r3, [r7, #6]
 8004c7e:	4603      	mov	r3, r0
 8004c80:	80bb      	strh	r3, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	807b      	strh	r3, [r7, #2]
 8004c86:	4613      	mov	r3, r2
 8004c88:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c8e:	2300      	movs	r3, #0
 8004c90:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c92:	2300      	movs	r3, #0
 8004c94:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c96:	2300      	movs	r3, #0
 8004c98:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8004c9a:	4b8c      	ldr	r3, [pc, #560]	; (8004ecc <_UG_PutChar+0x260>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004ca2:	75fb      	strb	r3, [r7, #23]
 8004ca4:	4b89      	ldr	r3, [pc, #548]	; (8004ecc <_UG_PutChar+0x260>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8004cb6:	f107 0208 	add.w	r2, r7, #8
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fe06 	bl	80048d0 <_UG_GetCharData>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8004cc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d102      	bne.n	8004cd8 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	e226      	b.n	8005126 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8004cd8:	4b7c      	ldr	r3, [pc, #496]	; (8004ecc <_UG_PutChar+0x260>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8004ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <_UG_PutChar+0x80>
     return 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e21c      	b.n	8005126 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8004cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cee:	08db      	lsrs	r3, r3, #3
 8004cf0:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8004cf2:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <_UG_PutChar+0x260>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <_UG_PutChar+0x9e>
 8004d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d06:	3301      	adds	r3, #1
 8004d08:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8004d0a:	7dbb      	ldrb	r3, [r7, #22]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01d      	beq.n	8004d4c <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8004d10:	4b6e      	ldr	r3, [pc, #440]	; (8004ecc <_UG_PutChar+0x260>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d16:	461d      	mov	r5, r3
 8004d18:	88ba      	ldrh	r2, [r7, #4]
 8004d1a:	8abb      	ldrh	r3, [r7, #20]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	b21c      	sxth	r4, r3
 8004d26:	4b69      	ldr	r3, [pc, #420]	; (8004ecc <_UG_PutChar+0x260>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	4413      	add	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	b21b      	sxth	r3, r3
 8004d3c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004d40:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8004d44:	4622      	mov	r2, r4
 8004d46:	47a8      	blx	r5
 8004d48:	4603      	mov	r3, r0
 8004d4a:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8004d4c:	4b5f      	ldr	r3, [pc, #380]	; (8004ecc <_UG_PutChar+0x260>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f040 8172 	bne.w	800503e <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d5e:	e0ec      	b.n	8004f3a <_UG_PutChar+0x2ce>
     {
       c=0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8004d64:	2300      	movs	r3, #0
 8004d66:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d68:	e0df      	b.n	8004f2a <_UG_PutChar+0x2be>
       {
         b = *data++;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	60ba      	str	r2, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8004d74:	2300      	movs	r3, #0
 8004d76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d78:	e0ca      	b.n	8004f10 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8004d7a:	7f7b      	ldrb	r3, [r7, #29]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d033      	beq.n	8004dec <_UG_PutChar+0x180>
           {
             if(driver)
 8004d84:	7dbb      	ldrb	r3, [r7, #22]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01f      	beq.n	8004dca <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8004d8a:	8c3b      	ldrh	r3, [r7, #32]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <_UG_PutChar+0x13a>
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8004d96:	8c3a      	ldrh	r2, [r7, #32]
 8004d98:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4798      	blx	r3
                 bpixels=0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8004da6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <_UG_PutChar+0x156>
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8004db2:	88ba      	ldrh	r2, [r7, #4]
 8004db4:	8bfb      	ldrh	r3, [r7, #30]
 8004db6:	4413      	add	r3, r2
 8004db8:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dbe:	4413      	add	r3, r2
 8004dc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8004dc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004dc8:	e096      	b.n	8004ef8 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8004dca:	4b40      	ldr	r3, [pc, #256]	; (8004ecc <_UG_PutChar+0x260>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	88b9      	ldrh	r1, [r7, #4]
 8004dd4:	8bfa      	ldrh	r2, [r7, #30]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	b292      	uxth	r2, r2
 8004dda:	b210      	sxth	r0, r2
 8004ddc:	8879      	ldrh	r1, [r7, #2]
 8004dde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004de0:	440a      	add	r2, r1
 8004de2:	b292      	uxth	r2, r2
 8004de4:	b211      	sxth	r1, r2
 8004de6:	883a      	ldrh	r2, [r7, #0]
 8004de8:	4798      	blx	r3
 8004dea:	e085      	b.n	8004ef8 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8004dec:	7dbb      	ldrb	r3, [r7, #22]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d06e      	beq.n	8004ed0 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8004df2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d064      	beq.n	8004ec2 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d15e      	bne.n	8004ebc <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8004dfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004e00:	8839      	ldrh	r1, [r7, #0]
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
                   fpixels=0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e0c:	e059      	b.n	8004ec2 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8004e0e:	88ba      	ldrh	r2, [r7, #4]
 8004e10:	8abb      	ldrh	r3, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8004e1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d003      	beq.n	8004e2e <_UG_PutChar+0x1c2>
 8004e26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004e28:	89fb      	ldrh	r3, [r7, #14]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d224      	bcs.n	8004e78 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8004e2e:	4b27      	ldr	r3, [pc, #156]	; (8004ecc <_UG_PutChar+0x260>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e34:	461d      	mov	r5, r3
 8004e36:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8004e3a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8004e3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e40:	89fb      	ldrh	r3, [r7, #14]
 8004e42:	4413      	add	r3, r2
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	b21c      	sxth	r4, r3
 8004e4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004e4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e5a:	4413      	add	r3, r2
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	4622      	mov	r2, r4
 8004e62:	47a8      	blx	r5
 8004e64:	4603      	mov	r3, r0
 8004e66:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8004e68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004e6a:	8839      	ldrh	r1, [r7, #0]
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4798      	blx	r3
                       fpixels=0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e76:	e021      	b.n	8004ebc <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8004e78:	4b14      	ldr	r3, [pc, #80]	; (8004ecc <_UG_PutChar+0x260>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7e:	461c      	mov	r4, r3
 8004e80:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8004e84:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8004e88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e8a:	89fb      	ldrh	r3, [r7, #14]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	b21a      	sxth	r2, r3
 8004e96:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004e9a:	47a0      	blx	r4
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8004ea0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004ea2:	8839      	ldrh	r1, [r7, #0]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4798      	blx	r3
                       fpixels -= width;
 8004eaa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004eac:	89fb      	ldrh	r3, [r7, #14]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8004eb2:	88bb      	ldrh	r3, [r7, #4]
 8004eb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8004eb6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004eb8:	3301      	adds	r3, #1
 8004eba:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8004ebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1a5      	bne.n	8004e0e <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8004ec2:	8c3b      	ldrh	r3, [r7, #32]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	843b      	strh	r3, [r7, #32]
 8004ec8:	e016      	b.n	8004ef8 <_UG_PutChar+0x28c>
 8004eca:	bf00      	nop
 8004ecc:	20000a70 	.word	0x20000a70
             }
             else if(!trans)                           // Not accelerated output
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d110      	bne.n	8004ef8 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8004ed6:	4b96      	ldr	r3, [pc, #600]	; (8005130 <_UG_PutChar+0x4c4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	88b9      	ldrh	r1, [r7, #4]
 8004ee0:	8bfa      	ldrh	r2, [r7, #30]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	b210      	sxth	r0, r2
 8004ee8:	8879      	ldrh	r1, [r7, #2]
 8004eea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004eec:	440a      	add	r2, r1
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	b211      	sxth	r1, r2
 8004ef2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004ef6:	4798      	blx	r3
             }
           }
           b >>= 1;
 8004ef8:	7f7b      	ldrb	r3, [r7, #29]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	777b      	strb	r3, [r7, #29]
           c++;
 8004efe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8004f0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f12:	2b07      	cmp	r3, #7
 8004f14:	d806      	bhi.n	8004f24 <_UG_PutChar+0x2b8>
 8004f16:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004f1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	f6ff af2b 	blt.w	8004d7a <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8004f24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f26:	3301      	adds	r3, #1
 8004f28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f2a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	f4ff af1b 	bcc.w	8004d6a <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f36:	3301      	adds	r3, #1
 8004f38:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f3a:	4b7d      	ldr	r3, [pc, #500]	; (8005130 <_UG_PutChar+0x4c4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004f46:	429a      	cmp	r2, r3
 8004f48:	f4ff af0a 	bcc.w	8004d60 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8004f4c:	7dbb      	ldrb	r3, [r7, #22]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80e7 	beq.w	8005122 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8004f54:	8c3b      	ldrh	r3, [r7, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <_UG_PutChar+0x302>
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8004f60:	8c3a      	ldrh	r2, [r7, #32]
 8004f62:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4798      	blx	r3
 8004f6c:	e0d9      	b.n	8005122 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8004f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80d6 	beq.w	8005122 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d15c      	bne.n	8005036 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8004f7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004f7e:	8839      	ldrh	r1, [r7, #0]
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	4610      	mov	r0, r2
 8004f84:	4798      	blx	r3
 8004f86:	e0cc      	b.n	8005122 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8004f88:	88ba      	ldrh	r2, [r7, #4]
 8004f8a:	8abb      	ldrh	r3, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8004f96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d003      	beq.n	8004fa8 <_UG_PutChar+0x33c>
 8004fa0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004fa2:	8a3b      	ldrh	r3, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d224      	bcs.n	8004ff2 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8004fa8:	4b61      	ldr	r3, [pc, #388]	; (8005130 <_UG_PutChar+0x4c4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fae:	461d      	mov	r5, r3
 8004fb0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8004fb4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8004fb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004fba:	8a3b      	ldrh	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	b21c      	sxth	r4, r3
 8004fc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004fc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fd4:	4413      	add	r3, r2
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	b21b      	sxth	r3, r3
 8004fda:	4622      	mov	r2, r4
 8004fdc:	47a8      	blx	r5
 8004fde:	4603      	mov	r3, r0
 8004fe0:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8004fe2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004fe4:	8839      	ldrh	r1, [r7, #0]
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4798      	blx	r3
               fpixels=0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ff0:	e021      	b.n	8005036 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	; (8005130 <_UG_PutChar+0x4c4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff8:	461c      	mov	r4, r3
 8004ffa:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8004ffe:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005002:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005004:	8a3b      	ldrh	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29b      	uxth	r3, r3
 800500e:	b21a      	sxth	r2, r3
 8005010:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005014:	47a0      	blx	r4
 8005016:	4603      	mov	r3, r0
 8005018:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800501a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800501c:	8839      	ldrh	r1, [r7, #0]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	4610      	mov	r0, r2
 8005022:	4798      	blx	r3
               fpixels -= width;
 8005024:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005026:	8a3b      	ldrh	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 800502c:	88bb      	ldrh	r3, [r7, #4]
 800502e:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8005030:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005032:	3301      	adds	r3, #1
 8005034:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8005036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1a5      	bne.n	8004f88 <_UG_PutChar+0x31c>
 800503c:	e071      	b.n	8005122 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 800503e:	4b3c      	ldr	r3, [pc, #240]	; (8005130 <_UG_PutChar+0x4c4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d16b      	bne.n	8005122 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800504a:	2300      	movs	r3, #0
 800504c:	853b      	strh	r3, [r7, #40]	; 0x28
 800504e:	e060      	b.n	8005112 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8005050:	2300      	movs	r3, #0
 8005052:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005054:	e04a      	b.n	80050ec <_UG_PutChar+0x480>
       {
         b = *data++;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	60ba      	str	r2, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005060:	883b      	ldrh	r3, [r7, #0]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	7f7a      	ldrb	r2, [r7, #29]
 8005066:	fb03 f202 	mul.w	r2, r3, r2
 800506a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800506e:	b2db      	uxtb	r3, r3
 8005070:	7f79      	ldrb	r1, [r7, #29]
 8005072:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	121b      	asrs	r3, r3, #8
 800507e:	b21b      	sxth	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8005084:	883b      	ldrh	r3, [r7, #0]
 8005086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800508a:	7f79      	ldrb	r1, [r7, #29]
 800508c:	fb03 f101 	mul.w	r1, r3, r1
 8005090:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005098:	7f78      	ldrb	r0, [r7, #29]
 800509a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800509e:	fb00 f303 	mul.w	r3, r0, r3
 80050a2:	440b      	add	r3, r1
 80050a4:	121b      	asrs	r3, r3, #8
 80050a6:	b21b      	sxth	r3, r3
 80050a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050ac:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b21b      	sxth	r3, r3
 80050b2:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80050b4:	7dbb      	ldrb	r3, [r7, #22]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80050ba:	8a7a      	ldrh	r2, [r7, #18]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	4611      	mov	r1, r2
 80050c0:	2001      	movs	r0, #1
 80050c2:	4798      	blx	r3
 80050c4:	e00f      	b.n	80050e6 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <_UG_PutChar+0x4c4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	88b9      	ldrh	r1, [r7, #4]
 80050d0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80050d2:	440a      	add	r2, r1
 80050d4:	b292      	uxth	r2, r2
 80050d6:	b210      	sxth	r0, r2
 80050d8:	8879      	ldrh	r1, [r7, #2]
 80050da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80050dc:	440a      	add	r2, r1
 80050de:	b292      	uxth	r2, r2
 80050e0:	b211      	sxth	r1, r2
 80050e2:	8a7a      	ldrh	r2, [r7, #18]
 80050e4:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80050e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050e8:	3301      	adds	r3, #1
 80050ea:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050ec:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80050ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	dbaf      	blt.n	8005056 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <_UG_PutChar+0x4c4>)
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8005100:	4611      	mov	r1, r2
 8005102:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005106:	1a8a      	subs	r2, r1, r2
 8005108:	4413      	add	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 800510c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800510e:	3301      	adds	r3, #1
 8005110:	853b      	strh	r3, [r7, #40]	; 0x28
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <_UG_PutChar+0x4c4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800511a:	b29b      	uxth	r3, r3
 800511c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800511e:	429a      	cmp	r2, r3
 8005120:	d396      	bcc.n	8005050 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8005122:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3730      	adds	r7, #48	; 0x30
 800512a:	46bd      	mov	sp, r7
 800512c:	bdb0      	pop	{r4, r5, r7, pc}
 800512e:	bf00      	nop
 8005130:	20000a70 	.word	0x20000a70

08005134 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8005134:	b480      	push	{r7}
 8005136:	b089      	sub	sp, #36	; 0x24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 800513c:	4b57      	ldr	r3, [pc, #348]	; (800529c <_UG_ProcessTouchData+0x168>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	88db      	ldrh	r3, [r3, #6]
 8005142:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8005144:	4b55      	ldr	r3, [pc, #340]	; (800529c <_UG_ProcessTouchData+0x168>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	891b      	ldrh	r3, [r3, #8]
 800514a:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 800514c:	4b53      	ldr	r3, [pc, #332]	; (800529c <_UG_ProcessTouchData+0x168>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	791b      	ldrb	r3, [r3, #4]
 8005152:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800515a:	2300      	movs	r3, #0
 800515c:	83fb      	strh	r3, [r7, #30]
 800515e:	e090      	b.n	8005282 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	8bfb      	ldrh	r3, [r7, #30]
 8005166:	015b      	lsls	r3, r3, #5
 8005168:	4413      	add	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d179      	bne.n	8005276 <_UG_ProcessTouchData+0x142>
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d074      	beq.n	8005276 <_UG_ProcessTouchData+0x142>
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d06f      	beq.n	8005276 <_UG_ProcessTouchData+0x142>
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d16a      	bne.n	8005276 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d047      	beq.n	8005236 <_UG_ProcessTouchData+0x102>
 80051a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d042      	beq.n	8005236 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80051b0:	7f7b      	ldrb	r3, [r7, #29]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d107      	bne.n	80051ca <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80051ba:	7f7b      	ldrb	r3, [r7, #29]
 80051bc:	f043 0305 	orr.w	r3, r3, #5
 80051c0:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80051c2:	7f7b      	ldrb	r3, [r7, #29]
 80051c4:	f023 0318 	bic.w	r3, r3, #24
 80051c8:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80051ca:	7f7b      	ldrb	r3, [r7, #29]
 80051cc:	f023 0320 	bic.w	r3, r3, #32
 80051d0:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051d8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80051dc:	429a      	cmp	r2, r3
 80051de:	db25      	blt.n	800522c <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80051e6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	dc1e      	bgt.n	800522c <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80051f4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	db17      	blt.n	800522c <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005202:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005206:	429a      	cmp	r2, r3
 8005208:	dc10      	bgt.n	800522c <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800520a:	7f7b      	ldrb	r3, [r7, #29]
 800520c:	f043 0320 	orr.w	r3, r3, #32
 8005210:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005212:	7f7b      	ldrb	r3, [r7, #29]
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d107      	bne.n	800522c <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 800521c:	7f7b      	ldrb	r3, [r7, #29]
 800521e:	f023 0304 	bic.w	r3, r3, #4
 8005222:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8005224:	7f7b      	ldrb	r3, [r7, #29]
 8005226:	f043 0302 	orr.w	r3, r3, #2
 800522a:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 800522c:	7f7b      	ldrb	r3, [r7, #29]
 800522e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005232:	777b      	strb	r3, [r7, #29]
 8005234:	e01f      	b.n	8005276 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005236:	7f7b      	ldrb	r3, [r7, #29]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01a      	beq.n	8005276 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8005240:	7f7b      	ldrb	r3, [r7, #29]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 800524a:	7f7b      	ldrb	r3, [r7, #29]
 800524c:	f043 0308 	orr.w	r3, r3, #8
 8005250:	777b      	strb	r3, [r7, #29]
 8005252:	e003      	b.n	800525c <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8005254:	7f7b      	ldrb	r3, [r7, #29]
 8005256:	f043 0310 	orr.w	r3, r3, #16
 800525a:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800525c:	7f7b      	ldrb	r3, [r7, #29]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8005266:	7f7b      	ldrb	r3, [r7, #29]
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 800526e:	7f7b      	ldrb	r3, [r7, #29]
 8005270:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8005274:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	7f7a      	ldrb	r2, [r7, #29]
 800527a:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 800527c:	8bfb      	ldrh	r3, [r7, #30]
 800527e:	3301      	adds	r3, #1
 8005280:	83fb      	strh	r3, [r7, #30]
 8005282:	8bfa      	ldrh	r2, [r7, #30]
 8005284:	8abb      	ldrh	r3, [r7, #20]
 8005286:	429a      	cmp	r2, r3
 8005288:	f4ff af6a 	bcc.w	8005160 <_UG_ProcessTouchData+0x2c>
   }
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000a70 	.word	0x20000a70

080052a0 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	82fb      	strh	r3, [r7, #22]
 80052b2:	e035      	b.n	8005320 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	8afb      	ldrh	r3, [r7, #22]
 80052ba:	015b      	lsls	r3, r3, #5
 80052bc:	4413      	add	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d121      	bne.n	800531a <_UG_UpdateObjects+0x7a>
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01c      	beq.n	800531a <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	6939      	ldr	r1, [r7, #16]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <_UG_UpdateObjects+0x7a>
 80052fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005302:	2b00      	cmp	r3, #0
 8005304:	da09      	bge.n	800531a <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	f003 0341 	and.w	r3, r3, #65	; 0x41
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	6939      	ldr	r1, [r7, #16]
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 800531a:	8afb      	ldrh	r3, [r7, #22]
 800531c:	3301      	adds	r3, #1
 800531e:	82fb      	strh	r3, [r7, #22]
 8005320:	8afa      	ldrh	r2, [r7, #22]
 8005322:	8abb      	ldrh	r3, [r7, #20]
 8005324:	429a      	cmp	r2, r3
 8005326:	d3c5      	bcc.n	80052b4 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 800533c:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <_UG_HandleEvents+0x94>)
 800533e:	2200      	movs	r2, #0
 8005340:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8005342:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <_UG_HandleEvents+0x94>)
 8005344:	2202      	movs	r2, #2
 8005346:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800534e:	2300      	movs	r3, #0
 8005350:	82fb      	strh	r3, [r7, #22]
 8005352:	e02f      	b.n	80053b4 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	8afb      	ldrh	r3, [r7, #22]
 800535a:	015b      	lsls	r3, r3, #5
 800535c:	4413      	add	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11e      	bne.n	80053ae <_UG_HandleEvents+0x7a>
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d019      	beq.n	80053ae <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	7e9b      	ldrb	r3, [r3, #26]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d015      	beq.n	80053ae <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8005382:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <_UG_HandleEvents+0x94>)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	7e1a      	ldrb	r2, [r3, #24]
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <_UG_HandleEvents+0x94>)
 800538e:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	7e5a      	ldrb	r2, [r3, #25]
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <_UG_HandleEvents+0x94>)
 8005396:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	7e9a      	ldrb	r2, [r3, #26]
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <_UG_HandleEvents+0x94>)
 800539e:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	4808      	ldr	r0, [pc, #32]	; (80053c8 <_UG_HandleEvents+0x94>)
 80053a6:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2200      	movs	r2, #0
 80053ac:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80053ae:	8afb      	ldrh	r3, [r7, #22]
 80053b0:	3301      	adds	r3, #1
 80053b2:	82fb      	strh	r3, [r7, #22]
 80053b4:	8afa      	ldrh	r2, [r7, #22]
 80053b6:	8abb      	ldrh	r3, [r7, #20]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d3cb      	bcc.n	8005354 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000a84 	.word	0x20000a84

080053cc <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b08f      	sub	sp, #60	; 0x3c
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 812c 	beq.w	8005636 <_UG_PutText+0x26a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8127 	beq.w	8005636 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	89db      	ldrh	r3, [r3, #14]
 80053ec:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	895b      	ldrh	r3, [r3, #10]
 80053f2:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	3302      	adds	r3, #2
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 80053fe:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005402:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005406:	1ad2      	subs	r2, r2, r3
 8005408:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800540c:	429a      	cmp	r2, r3
 800540e:	f2c0 8114 	blt.w	800563a <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	891b      	ldrh	r3, [r3, #8]
 8005416:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	899b      	ldrh	r3, [r3, #12]
 800541c:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7d1b      	ldrb	r3, [r3, #20]
 8005422:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8adb      	ldrh	r3, [r3, #22]
 8005428:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8b1b      	ldrh	r3, [r3, #24]
 800542e:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fb92 	bl	8004b68 <_UG_FontSelect>

   rc=1;
 8005444:	2301      	movs	r3, #1
 8005446:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800544c:	4b80      	ldr	r3, [pc, #512]	; (8005650 <_UG_PutText+0x284>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005454:	2b00      	cmp	r3, #0
 8005456:	d107      	bne.n	8005468 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8005458:	f107 0308 	add.w	r3, r7, #8
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff f9bf 	bl	80047e0 <_UG_DecodeUTF8>
 8005462:	4603      	mov	r3, r0
 8005464:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005466:	e004      	b.n	8005472 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	60ba      	str	r2, [r7, #8]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8005472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8005478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800547a:	2b0a      	cmp	r3, #10
 800547c:	d1e6      	bne.n	800544c <_UG_PutText+0x80>
 800547e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005480:	3301      	adds	r3, #1
 8005482:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005484:	e7e2      	b.n	800544c <_UG_PutText+0x80>
     if(!chr) break;
 8005486:	bf00      	nop
   }

   yp = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 800548c:	7e7b      	ldrb	r3, [r7, #25]
 800548e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01f      	beq.n	80054d6 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8005496:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005498:	8c3b      	ldrh	r3, [r7, #32]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	b29b      	uxth	r3, r3
 800549e:	3301      	adds	r3, #1
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 80054a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80054a6:	8bfb      	ldrh	r3, [r7, #30]
 80054a8:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80054aa:	fb11 f303 	smulbb	r3, r1, r3
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 80054b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80054b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b299      	uxth	r1, r3
 80054be:	8abb      	ldrh	r3, [r7, #20]
 80054c0:	fb11 f303 	smulbb	r3, r1, r3
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 80054cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f2c0 80b4 	blt.w	800563e <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80054d6:	7e7b      	ldrb	r3, [r7, #25]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <_UG_PutText+0x11c>
 80054e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80054e4:	105b      	asrs	r3, r3, #1
 80054e6:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 80054e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80054ea:	8c3b      	ldrh	r3, [r7, #32]
 80054ec:	4413      	add	r3, r2
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	60bb      	str	r3, [r7, #8]
      wl = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80054fe:	4b54      	ldr	r3, [pc, #336]	; (8005650 <_UG_PutText+0x284>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005506:	2b00      	cmp	r3, #0
 8005508:	d107      	bne.n	800551a <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff f966 	bl	80047e0 <_UG_DecodeUTF8>
 8005514:	4603      	mov	r3, r0
 8005516:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005518:	e004      	b.n	8005524 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	60ba      	str	r2, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8005524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01b      	beq.n	8005562 <_UG_PutText+0x196>
 800552a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800552c:	2b0a      	cmp	r3, #10
 800552e:	d018      	beq.n	8005562 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8005530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005532:	2100      	movs	r1, #0
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff f9cb 	bl	80048d0 <_UG_GetCharData>
 800553a:	4603      	mov	r3, r0
 800553c:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 800553e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d00a      	beq.n	800555e <_UG_PutText+0x192>
         sl++;
 8005548:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800554a:	3301      	adds	r3, #1
 800554c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 800554e:	8a7a      	ldrh	r2, [r7, #18]
 8005550:	8afb      	ldrh	r3, [r7, #22]
 8005552:	4413      	add	r3, r2
 8005554:	b29a      	uxth	r2, r3
 8005556:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005558:	4413      	add	r3, r2
 800555a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800555c:	e7cf      	b.n	80054fe <_UG_PutText+0x132>
         if (w == -1){continue;}
 800555e:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005560:	e7cd      	b.n	80054fe <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8005562:	8afb      	ldrh	r3, [r7, #22]
 8005564:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 800556a:	8b7a      	ldrh	r2, [r7, #26]
 800556c:	8bbb      	ldrh	r3, [r7, #28]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	b29b      	uxth	r3, r3
 8005572:	3301      	adds	r3, #1
 8005574:	b29b      	uxth	r3, r3
 8005576:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8005578:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800557a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	b29b      	uxth	r3, r3
 8005580:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8005582:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	db5b      	blt.n	8005642 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 800558a:	7e7b      	ldrb	r3, [r7, #25]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <_UG_PutText+0x1ce>
 8005594:	2300      	movs	r3, #0
 8005596:	853b      	strh	r3, [r7, #40]	; 0x28
 8005598:	e008      	b.n	80055ac <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 800559a:	7e7b      	ldrb	r3, [r7, #25]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <_UG_PutText+0x1e0>
 80055a4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80055a8:	105b      	asrs	r3, r3, #1
 80055aa:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 80055ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80055ae:	8bbb      	ldrh	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80055b6:	4b26      	ldr	r3, [pc, #152]	; (8005650 <_UG_PutText+0x284>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80055c2:	f107 030c 	add.w	r3, r7, #12
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff f90a 	bl	80047e0 <_UG_DecodeUTF8>
 80055cc:	4603      	mov	r3, r0
 80055ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055d0:	e004      	b.n	80055dc <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	60fa      	str	r2, [r7, #12]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 80055dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d031      	beq.n	8005646 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 80055e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e4:	2b0a      	cmp	r3, #10
 80055e6:	d01c      	beq.n	8005622 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8a1c      	ldrh	r4, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8a5b      	ldrh	r3, [r3, #18]
 80055f0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80055f4:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80055f8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	4623      	mov	r3, r4
 80055fe:	f7ff fb35 	bl	8004c6c <_UG_PutChar>
 8005602:	4603      	mov	r3, r0
 8005604:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8005606:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d0d2      	beq.n	80055b6 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8005610:	8a7a      	ldrh	r2, [r7, #18]
 8005612:	8afb      	ldrh	r3, [r7, #22]
 8005614:	4413      	add	r3, r2
 8005616:	b29a      	uxth	r2, r3
 8005618:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800561a:	4413      	add	r3, r2
 800561c:	b29b      	uxth	r3, r3
 800561e:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005620:	e7c9      	b.n	80055b6 <_UG_PutText+0x1ea>
           break;
 8005622:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8005624:	8bfa      	ldrh	r2, [r7, #30]
 8005626:	8abb      	ldrh	r3, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	b29a      	uxth	r2, r3
 800562c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800562e:	4413      	add	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8005634:	e75d      	b.n	80054f2 <_UG_PutText+0x126>
     return;
 8005636:	bf00      	nop
 8005638:	e006      	b.n	8005648 <_UG_PutText+0x27c>
     return;
 800563a:	bf00      	nop
 800563c:	e004      	b.n	8005648 <_UG_PutText+0x27c>
        return;
 800563e:	bf00      	nop
 8005640:	e002      	b.n	8005648 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8005642:	bf00      	nop
 8005644:	e000      	b.n	8005648 <_UG_PutText+0x27c>
           return;
 8005646:	bf00      	nop
   }
}
 8005648:	3734      	adds	r7, #52	; 0x34
 800564a:	46bd      	mov	sp, r7
 800564c:	bd90      	pop	{r4, r7, pc}
 800564e:	bf00      	nop
 8005650:	20000a70 	.word	0x20000a70

08005654 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8005654:	b5b0      	push	{r4, r5, r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af02      	add	r7, sp, #8
 800565a:	4604      	mov	r4, r0
 800565c:	4608      	mov	r0, r1
 800565e:	4611      	mov	r1, r2
 8005660:	461a      	mov	r2, r3
 8005662:	4623      	mov	r3, r4
 8005664:	80fb      	strh	r3, [r7, #6]
 8005666:	4603      	mov	r3, r0
 8005668:	80bb      	strh	r3, [r7, #4]
 800566a:	460b      	mov	r3, r1
 800566c:	807b      	strh	r3, [r7, #2]
 800566e:	4613      	mov	r3, r2
 8005670:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8005672:	887b      	ldrh	r3, [r7, #2]
 8005674:	3b01      	subs	r3, #1
 8005676:	b29b      	uxth	r3, r3
 8005678:	b21c      	sxth	r4, r3
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	1c9a      	adds	r2, r3, #2
 800567e:	61ba      	str	r2, [r7, #24]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005686:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800568a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	4622      	mov	r2, r4
 8005694:	f7fe fe92 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8005698:	88bb      	ldrh	r3, [r7, #4]
 800569a:	3301      	adds	r3, #1
 800569c:	b29b      	uxth	r3, r3
 800569e:	b219      	sxth	r1, r3
 80056a0:	883b      	ldrh	r3, [r7, #0]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	b21c      	sxth	r4, r3
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	1c9a      	adds	r2, r3, #2
 80056ac:	61ba      	str	r2, [r7, #24]
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056b4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	4623      	mov	r3, r4
 80056bc:	f7fe fe7e 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	61ba      	str	r2, [r7, #24]
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80056cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056d0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80056d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4623      	mov	r3, r4
 80056dc:	f7fe fe6e 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80056e0:	883b      	ldrh	r3, [r7, #0]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	b21c      	sxth	r4, r3
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	61ba      	str	r2, [r7, #24]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056f8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	4623      	mov	r3, r4
 8005700:	f7fe fe5c 	bl	80043bc <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	3301      	adds	r3, #1
 8005708:	b29b      	uxth	r3, r3
 800570a:	b218      	sxth	r0, r3
 800570c:	88bb      	ldrh	r3, [r7, #4]
 800570e:	3301      	adds	r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	b219      	sxth	r1, r3
 8005714:	887b      	ldrh	r3, [r7, #2]
 8005716:	3b02      	subs	r3, #2
 8005718:	b29b      	uxth	r3, r3
 800571a:	b21c      	sxth	r4, r3
 800571c:	88bb      	ldrh	r3, [r7, #4]
 800571e:	3301      	adds	r3, #1
 8005720:	b29b      	uxth	r3, r3
 8005722:	b21d      	sxth	r5, r3
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1c9a      	adds	r2, r3, #2
 8005728:	61ba      	str	r2, [r7, #24]
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	462b      	mov	r3, r5
 8005730:	4622      	mov	r2, r4
 8005732:	f7fe fe43 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	3301      	adds	r3, #1
 800573a:	b29b      	uxth	r3, r3
 800573c:	b218      	sxth	r0, r3
 800573e:	88bb      	ldrh	r3, [r7, #4]
 8005740:	3302      	adds	r3, #2
 8005742:	b29b      	uxth	r3, r3
 8005744:	b219      	sxth	r1, r3
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	3301      	adds	r3, #1
 800574a:	b29b      	uxth	r3, r3
 800574c:	b21c      	sxth	r4, r3
 800574e:	883b      	ldrh	r3, [r7, #0]
 8005750:	3b02      	subs	r3, #2
 8005752:	b29b      	uxth	r3, r3
 8005754:	b21d      	sxth	r5, r3
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	1c9a      	adds	r2, r3, #2
 800575a:	61ba      	str	r2, [r7, #24]
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	462b      	mov	r3, r5
 8005762:	4622      	mov	r2, r4
 8005764:	f7fe fe2a 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	3301      	adds	r3, #1
 800576c:	b29b      	uxth	r3, r3
 800576e:	b218      	sxth	r0, r3
 8005770:	883b      	ldrh	r3, [r7, #0]
 8005772:	3b01      	subs	r3, #1
 8005774:	b29b      	uxth	r3, r3
 8005776:	b219      	sxth	r1, r3
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	3b01      	subs	r3, #1
 800577c:	b29b      	uxth	r3, r3
 800577e:	b21c      	sxth	r4, r3
 8005780:	883b      	ldrh	r3, [r7, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	b29b      	uxth	r3, r3
 8005786:	b21d      	sxth	r5, r3
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	1c9a      	adds	r2, r3, #2
 800578c:	61ba      	str	r2, [r7, #24]
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	462b      	mov	r3, r5
 8005794:	4622      	mov	r2, r4
 8005796:	f7fe fe11 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800579a:	887b      	ldrh	r3, [r7, #2]
 800579c:	3b01      	subs	r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	b218      	sxth	r0, r3
 80057a2:	88bb      	ldrh	r3, [r7, #4]
 80057a4:	3301      	adds	r3, #1
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	b219      	sxth	r1, r3
 80057aa:	887b      	ldrh	r3, [r7, #2]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	b21c      	sxth	r4, r3
 80057b2:	883b      	ldrh	r3, [r7, #0]
 80057b4:	3b02      	subs	r3, #2
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	b21d      	sxth	r5, r3
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1c9a      	adds	r2, r3, #2
 80057be:	61ba      	str	r2, [r7, #24]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	462b      	mov	r3, r5
 80057c6:	4622      	mov	r2, r4
 80057c8:	f7fe fdf8 	bl	80043bc <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	3302      	adds	r3, #2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	b218      	sxth	r0, r3
 80057d4:	88bb      	ldrh	r3, [r7, #4]
 80057d6:	3302      	adds	r3, #2
 80057d8:	b29b      	uxth	r3, r3
 80057da:	b219      	sxth	r1, r3
 80057dc:	887b      	ldrh	r3, [r7, #2]
 80057de:	3b03      	subs	r3, #3
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	b21c      	sxth	r4, r3
 80057e4:	88bb      	ldrh	r3, [r7, #4]
 80057e6:	3302      	adds	r3, #2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	b21d      	sxth	r5, r3
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	1c9a      	adds	r2, r3, #2
 80057f0:	61ba      	str	r2, [r7, #24]
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	462b      	mov	r3, r5
 80057f8:	4622      	mov	r2, r4
 80057fa:	f7fe fddf 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	3302      	adds	r3, #2
 8005802:	b29b      	uxth	r3, r3
 8005804:	b218      	sxth	r0, r3
 8005806:	88bb      	ldrh	r3, [r7, #4]
 8005808:	3303      	adds	r3, #3
 800580a:	b29b      	uxth	r3, r3
 800580c:	b219      	sxth	r1, r3
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	3302      	adds	r3, #2
 8005812:	b29b      	uxth	r3, r3
 8005814:	b21c      	sxth	r4, r3
 8005816:	883b      	ldrh	r3, [r7, #0]
 8005818:	3b03      	subs	r3, #3
 800581a:	b29b      	uxth	r3, r3
 800581c:	b21d      	sxth	r5, r3
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	1c9a      	adds	r2, r3, #2
 8005822:	61ba      	str	r2, [r7, #24]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	462b      	mov	r3, r5
 800582a:	4622      	mov	r2, r4
 800582c:	f7fe fdc6 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	3302      	adds	r3, #2
 8005834:	b29b      	uxth	r3, r3
 8005836:	b218      	sxth	r0, r3
 8005838:	883b      	ldrh	r3, [r7, #0]
 800583a:	3b02      	subs	r3, #2
 800583c:	b29b      	uxth	r3, r3
 800583e:	b219      	sxth	r1, r3
 8005840:	887b      	ldrh	r3, [r7, #2]
 8005842:	3b02      	subs	r3, #2
 8005844:	b29b      	uxth	r3, r3
 8005846:	b21c      	sxth	r4, r3
 8005848:	883b      	ldrh	r3, [r7, #0]
 800584a:	3b02      	subs	r3, #2
 800584c:	b29b      	uxth	r3, r3
 800584e:	b21d      	sxth	r5, r3
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	1c9a      	adds	r2, r3, #2
 8005854:	61ba      	str	r2, [r7, #24]
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	462b      	mov	r3, r5
 800585c:	4622      	mov	r2, r4
 800585e:	f7fe fdad 	bl	80043bc <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8005862:	887b      	ldrh	r3, [r7, #2]
 8005864:	3b02      	subs	r3, #2
 8005866:	b29b      	uxth	r3, r3
 8005868:	b218      	sxth	r0, r3
 800586a:	88bb      	ldrh	r3, [r7, #4]
 800586c:	3302      	adds	r3, #2
 800586e:	b29b      	uxth	r3, r3
 8005870:	b219      	sxth	r1, r3
 8005872:	887b      	ldrh	r3, [r7, #2]
 8005874:	3b02      	subs	r3, #2
 8005876:	b29b      	uxth	r3, r3
 8005878:	b21a      	sxth	r2, r3
 800587a:	883b      	ldrh	r3, [r7, #0]
 800587c:	3b03      	subs	r3, #3
 800587e:	b29b      	uxth	r3, r3
 8005880:	b21c      	sxth	r4, r3
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4623      	mov	r3, r4
 800588a:	f7fe fd97 	bl	80043bc <UG_DrawLine>
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005898 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d810      	bhi.n	80058cc <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <UG_DriverRegister+0x40>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	330a      	adds	r3, #10
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <UG_DriverRegister+0x40>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	330a      	adds	r3, #10
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4413      	add	r3, r2
 80058c6:	2203      	movs	r2, #3
 80058c8:	721a      	strb	r2, [r3, #8]
 80058ca:	e000      	b.n	80058ce <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80058cc:	bf00      	nop
}
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	20000a70 	.word	0x20000a70

080058dc <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80058e2:	4b5e      	ldr	r3, [pc, #376]	; (8005a5c <UG_Update+0x180>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UG_Update+0x2c>
 80058f2:	4b5a      	ldr	r3, [pc, #360]	; (8005a5c <UG_Update+0x180>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80058fa:	4b58      	ldr	r3, [pc, #352]	; (8005a5c <UG_Update+0x180>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8005908:	4b54      	ldr	r3, [pc, #336]	; (8005a5c <UG_Update+0x180>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	4b53      	ldr	r3, [pc, #332]	; (8005a5c <UG_Update+0x180>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d071      	beq.n	80059fc <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8005918:	4b50      	ldr	r3, [pc, #320]	; (8005a5c <UG_Update+0x180>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d06c      	beq.n	80059fc <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8005922:	4b4e      	ldr	r3, [pc, #312]	; (8005a5c <UG_Update+0x180>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b4d      	ldr	r3, [pc, #308]	; (8005a5c <UG_Update+0x180>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6912      	ldr	r2, [r2, #16]
 800592c:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 800592e:	4b4b      	ldr	r3, [pc, #300]	; (8005a5c <UG_Update+0x180>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b4a      	ldr	r3, [pc, #296]	; (8005a5c <UG_Update+0x180>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68d2      	ldr	r2, [r2, #12]
 8005938:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 800593a:	4b48      	ldr	r3, [pc, #288]	; (8005a5c <UG_Update+0x180>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d045      	beq.n	80059d0 <UG_Update+0xf4>
 8005944:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <UG_Update+0x180>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	7d9b      	ldrb	r3, [r3, #22]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d03d      	beq.n	80059d0 <UG_Update+0xf4>
 8005954:	4b41      	ldr	r3, [pc, #260]	; (8005a5c <UG_Update+0x180>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	7a1b      	ldrb	r3, [r3, #8]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d035      	beq.n	80059d0 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8005964:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <UG_Update+0x180>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800596e:	4b3b      	ldr	r3, [pc, #236]	; (8005a5c <UG_Update+0x180>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005978:	429a      	cmp	r2, r3
 800597a:	d123      	bne.n	80059c4 <UG_Update+0xe8>
 800597c:	4b37      	ldr	r3, [pc, #220]	; (8005a5c <UG_Update+0x180>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8005986:	4b35      	ldr	r3, [pc, #212]	; (8005a5c <UG_Update+0x180>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005990:	429a      	cmp	r2, r3
 8005992:	d117      	bne.n	80059c4 <UG_Update+0xe8>
 8005994:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <UG_Update+0x180>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800599e:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <UG_Update+0x180>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d10b      	bne.n	80059c4 <UG_Update+0xe8>
 80059ac:	4b2b      	ldr	r3, [pc, #172]	; (8005a5c <UG_Update+0x180>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80059b6:	4b29      	ldr	r3, [pc, #164]	; (8005a5c <UG_Update+0x180>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d005      	beq.n	80059d0 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80059c4:	4b25      	ldr	r3, [pc, #148]	; (8005a5c <UG_Update+0x180>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f848 	bl	8005a60 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80059d0:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <UG_Update+0x180>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	7a1a      	ldrb	r2, [r3, #8]
 80059d8:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <UG_Update+0x180>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80059e6:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <UG_Update+0x180>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	7a1a      	ldrb	r2, [r3, #8]
 80059ee:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <UG_Update+0x180>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80059fc:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <UG_Update+0x180>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01b      	beq.n	8005a3e <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <UG_Update+0x180>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	7a1b      	ldrb	r3, [r3, #8]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8ca 	bl	8005bb4 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	7a1b      	ldrb	r3, [r3, #8]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fb81 	bl	8005134 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fc34 	bl	80052a0 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fc7b 	bl	8005334 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8005a3e:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <UG_Update+0x180>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <UG_Update+0x178>
     gui->device->flush();
 8005a4a:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <UG_Update+0x180>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4798      	blx	r3
   }
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000a70 	.word	0x20000a70

08005a60 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b08f      	sub	sp, #60	; 0x3c
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 809a 	beq.w	8005ba4 <_UG_WindowDrawTitle+0x144>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	7a1b      	ldrb	r3, [r3, #8]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 8093 	beq.w	8005ba4 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	89db      	ldrh	r3, [r3, #14]
 8005a82:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8a1b      	ldrh	r3, [r3, #16]
 8005a88:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8a5b      	ldrh	r3, [r3, #18]
 8005a8e:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8a9b      	ldrh	r3, [r3, #20]
 8005a94:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	7d9b      	ldrb	r3, [r3, #22]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00f      	beq.n	8005ac2 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8005aa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005aa4:	3303      	adds	r3, #3
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8005aaa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005aac:	3303      	adds	r3, #3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8005ab2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ab4:	3b03      	subs	r3, #3
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8005aba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005abc:	3b03      	subs	r3, #3
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8005ac2:	4b3b      	ldr	r3, [pc, #236]	; (8005bb0 <_UG_WindowDrawTitle+0x150>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d106      	bne.n	8005adc <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad2:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ad8:	83bb      	strh	r3, [r7, #28]
 8005ada:	e005      	b.n	8005ae8 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae6:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005af2:	4413      	add	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	b21c      	sxth	r4, r3
 8005afc:	8bfb      	ldrh	r3, [r7, #30]
 8005afe:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005b02:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005b06:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	4623      	mov	r3, r4
 8005b0e:	f7fe fbff 	bl	8004310 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8005b1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b20:	3303      	adds	r3, #3
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	b21b      	sxth	r3, r3
 8005b26:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8005b28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b2a:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8005b2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b2e:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b3a:	4413      	add	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	b21b      	sxth	r3, r3
 8005b44:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005b4c:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8005b56:	b21b      	sxth	r3, r3
 8005b58:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8005b60:	b21b      	sxth	r3, r3
 8005b62:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fc2f 	bl	80053cc <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b78:	4413      	add	r3, r2
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	b219      	sxth	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b88:	4413      	add	r3, r2
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	b21b      	sxth	r3, r3
 8005b8e:	f649 5413 	movw	r4, #40211	; 0x9d13
 8005b92:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005b96:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005b9a:	9400      	str	r4, [sp, #0]
 8005b9c:	f7fe fc0e 	bl	80043bc <UG_DrawLine>
      return UG_RESULT_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e001      	b.n	8005ba8 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3734      	adds	r7, #52	; 0x34
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd90      	pop	{r4, r7, pc}
 8005bb0:	20000a70 	.word	0x20000a70

08005bb4 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8005bb4:	b590      	push	{r4, r7, lr}
 8005bb6:	b089      	sub	sp, #36	; 0x24
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	89db      	ldrh	r3, [r3, #14]
 8005bc0:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8a1b      	ldrh	r3, [r3, #16]
 8005bc6:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8a5b      	ldrh	r3, [r3, #18]
 8005bcc:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8a9b      	ldrh	r3, [r3, #20]
 8005bd2:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	7a1b      	ldrb	r3, [r3, #8]
 8005bd8:	f023 0320 	bic.w	r3, r3, #32
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	7a1b      	ldrb	r3, [r3, #8]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8084 	beq.w	8005cf8 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	7d9b      	ldrb	r3, [r3, #22]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d021      	beq.n	8005c40 <_UG_WindowUpdate+0x8c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7a1b      	ldrb	r3, [r3, #8]
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11b      	bne.n	8005c40 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8005c08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c0c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005c10:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8005c14:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005c18:	4c43      	ldr	r4, [pc, #268]	; (8005d28 <_UG_WindowUpdate+0x174>)
 8005c1a:	9400      	str	r4, [sp, #0]
 8005c1c:	f7ff fd1a 	bl	8005654 <_UG_DrawObjectFrame>
         xs+=3;
 8005c20:	8abb      	ldrh	r3, [r7, #20]
 8005c22:	3303      	adds	r3, #3
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8005c28:	8a7b      	ldrh	r3, [r7, #18]
 8005c2a:	3303      	adds	r3, #3
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8005c30:	8a3b      	ldrh	r3, [r7, #16]
 8005c32:	3b03      	subs	r3, #3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8005c38:	89fb      	ldrh	r3, [r7, #14]
 8005c3a:	3b03      	subs	r3, #3
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7d9b      	ldrb	r3, [r3, #22]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff ff07 	bl	8005a60 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	8a7b      	ldrh	r3, [r7, #18]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3301      	adds	r3, #1
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	7a1b      	ldrb	r3, [r3, #8]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7a1b      	ldrb	r3, [r3, #8]
 8005c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	721a      	strb	r2, [r3, #8]
            return;
 8005c80:	e04e      	b.n	8005d20 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	899b      	ldrh	r3, [r3, #12]
 8005c86:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005c8a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005c8e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8005c92:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4623      	mov	r3, r4
 8005c9a:	f7fe fb39 	bl	8004310 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	82fb      	strh	r3, [r7, #22]
 8005ca8:	e021      	b.n	8005cee <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	8afb      	ldrh	r3, [r7, #22]
 8005cb0:	015b      	lsls	r3, r3, #5
 8005cb2:	4413      	add	r3, r2
 8005cb4:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d112      	bne.n	8005ce8 <_UG_WindowUpdate+0x134>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <_UG_WindowUpdate+0x134>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <_UG_WindowUpdate+0x134>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8005ce8:	8afb      	ldrh	r3, [r7, #22]
 8005cea:	3301      	adds	r3, #1
 8005cec:	82fb      	strh	r3, [r7, #22]
 8005cee:	8afa      	ldrh	r2, [r7, #22]
 8005cf0:	89bb      	ldrh	r3, [r7, #12]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d3d9      	bcc.n	8005caa <_UG_WindowUpdate+0xf6>
 8005cf6:	e013      	b.n	8005d20 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <_UG_WindowUpdate+0x178>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	f7fe faf8 	bl	8004310 <UG_FillFrame>
   }
}
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd90      	pop	{r4, r7, pc}
 8005d26:	bf00      	nop
 8005d28:	08016398 	.word	0x08016398
 8005d2c:	20000a70 	.word	0x20000a70

08005d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005d34:	f7fe f9f4 	bl	8004120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d38:	480c      	ldr	r0, [pc, #48]	; (8005d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8005d3a:	490d      	ldr	r1, [pc, #52]	; (8005d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005d3c:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <LoopForever+0xe>)
  movs r3, #0
 8005d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d40:	e002      	b.n	8005d48 <LoopCopyDataInit>

08005d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d46:	3304      	adds	r3, #4

08005d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d4c:	d3f9      	bcc.n	8005d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005d50:	4c0a      	ldr	r4, [pc, #40]	; (8005d7c <LoopForever+0x16>)
  movs r3, #0
 8005d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d54:	e001      	b.n	8005d5a <LoopFillZerobss>

08005d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d58:	3204      	adds	r2, #4

08005d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d5c:	d3fb      	bcc.n	8005d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d5e:	f009 f8d7 	bl	800ef10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d62:	f7fc f9dd 	bl	8002120 <main>

08005d66 <LoopForever>:

LoopForever:
    b LoopForever
 8005d66:	e7fe      	b.n	8005d66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005d68:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d70:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8005d74:	0801675c 	.word	0x0801675c
  ldr r2, =_sbss
 8005d78:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8005d7c:	20000bdc 	.word	0x20000bdc

08005d80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d80:	e7fe      	b.n	8005d80 <ADC1_IRQHandler>

08005d82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d8c:	2003      	movs	r0, #3
 8005d8e:	f001 f9dd 	bl	800714c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d92:	2000      	movs	r0, #0
 8005d94:	f000 f80e 	bl	8005db4 <HAL_InitTick>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	71fb      	strb	r3, [r7, #7]
 8005da2:	e001      	b.n	8005da8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005da4:	f7fd fb1c 	bl	80033e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005da8:	79fb      	ldrb	r3, [r7, #7]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005dc0:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <HAL_InitTick+0x6c>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d023      	beq.n	8005e10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005dc8:	4b16      	ldr	r3, [pc, #88]	; (8005e24 <HAL_InitTick+0x70>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <HAL_InitTick+0x6c>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 f9e9 	bl	80071b6 <HAL_SYSTICK_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b0f      	cmp	r3, #15
 8005dee:	d809      	bhi.n	8005e04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005df0:	2200      	movs	r2, #0
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	f001 f9b3 	bl	8007162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005dfc:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <HAL_InitTick+0x74>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e007      	b.n	8005e14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	73fb      	strb	r3, [r7, #15]
 8005e08:	e004      	b.n	8005e14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	73fb      	strb	r3, [r7, #15]
 8005e0e:	e001      	b.n	8005e14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000028 	.word	0x20000028
 8005e24:	20000020 	.word	0x20000020
 8005e28:	20000024 	.word	0x20000024

08005e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <HAL_IncTick+0x20>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <HAL_IncTick+0x24>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <HAL_IncTick+0x24>)
 8005e3e:	6013      	str	r3, [r2, #0]
}
 8005e40:	bf00      	nop
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000028 	.word	0x20000028
 8005e50:	20000a8c 	.word	0x20000a8c

08005e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  return uwTick;
 8005e58:	4b03      	ldr	r3, [pc, #12]	; (8005e68 <HAL_GetTick+0x14>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000a8c 	.word	0x20000a8c

08005e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e74:	f7ff ffee 	bl	8005e54 <HAL_GetTick>
 8005e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d005      	beq.n	8005e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005e86:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <HAL_Delay+0x44>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e92:	bf00      	nop
 8005e94:	f7ff ffde 	bl	8005e54 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d8f7      	bhi.n	8005e94 <HAL_Delay+0x28>
  {
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000028 	.word	0x20000028

08005eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3360      	adds	r3, #96	; 0x60
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <LL_ADC_SetOffset+0x44>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	03fff000 	.word	0x03fff000

08005f64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3360      	adds	r3, #96	; 0x60
 8005f72:	461a      	mov	r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3360      	adds	r3, #96	; 0x60
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	615a      	str	r2, [r3, #20]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3330      	adds	r3, #48	; 0x30
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	f003 030c 	and.w	r3, r3, #12
 8006008:	4413      	add	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	211f      	movs	r1, #31
 8006018:	fa01 f303 	lsl.w	r3, r1, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	401a      	ands	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	0e9b      	lsrs	r3, r3, #26
 8006024:	f003 011f 	and.w	r1, r3, #31
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	fa01 f303 	lsl.w	r3, r1, r3
 8006032:	431a      	orrs	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3314      	adds	r3, #20
 8006054:	461a      	mov	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	0e5b      	lsrs	r3, r3, #25
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	4413      	add	r3, r2
 8006062:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	0d1b      	lsrs	r3, r3, #20
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2107      	movs	r1, #7
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	43db      	mvns	r3, r3
 8006078:	401a      	ands	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	0d1b      	lsrs	r3, r3, #20
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	431a      	orrs	r2, r3
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b4:	43db      	mvns	r3, r3
 80060b6:	401a      	ands	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f003 0318 	and.w	r3, r3, #24
 80060be:	4908      	ldr	r1, [pc, #32]	; (80060e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80060c0:	40d9      	lsrs	r1, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	400b      	ands	r3, r1
 80060c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ca:	431a      	orrs	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	0007ffff 	.word	0x0007ffff

080060e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80060f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6093      	str	r3, [r2, #8]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800611c:	d101      	bne.n	8006122 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800616c:	d101      	bne.n	8006172 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <LL_ADC_IsEnabled+0x18>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <LL_ADC_IsEnabled+0x1a>
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d101      	bne.n	80061be <LL_ADC_REG_IsConversionOngoing+0x18>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d101      	bne.n	80061e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e129      	b.n	8006462 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	2b00      	cmp	r3, #0
 800621a:	d109      	bne.n	8006230 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fd f903 	bl	8003428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff ff67 	bl	8006108 <LL_ADC_IsDeepPowerDownEnabled>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff ff4d 	bl	80060e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff ff82 	bl	8006158 <LL_ADC_IsInternalRegulatorEnabled>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d115      	bne.n	8006286 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ff66 	bl	8006130 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006264:	4b81      	ldr	r3, [pc, #516]	; (800646c <HAL_ADC_Init+0x278>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	099b      	lsrs	r3, r3, #6
 800626a:	4a81      	ldr	r2, [pc, #516]	; (8006470 <HAL_ADC_Init+0x27c>)
 800626c:	fba2 2303 	umull	r2, r3, r2, r3
 8006270:	099b      	lsrs	r3, r3, #6
 8006272:	3301      	adds	r3, #1
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006278:	e002      	b.n	8006280 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3b01      	subs	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f9      	bne.n	800627a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff ff64 	bl	8006158 <LL_ADC_IsInternalRegulatorEnabled>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10d      	bne.n	80062b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	f043 0210 	orr.w	r2, r3, #16
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff ff75 	bl	80061a6 <LL_ADC_REG_IsConversionOngoing>
 80062bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c2:	f003 0310 	and.w	r3, r3, #16
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 80c2 	bne.w	8006450 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 80be 	bne.w	8006450 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80062dc:	f043 0202 	orr.w	r2, r3, #2
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff ff49 	bl	8006180 <LL_ADC_IsEnabled>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10b      	bne.n	800630c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062f4:	485f      	ldr	r0, [pc, #380]	; (8006474 <HAL_ADC_Init+0x280>)
 80062f6:	f7ff ff43 	bl	8006180 <LL_ADC_IsEnabled>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4619      	mov	r1, r3
 8006306:	485c      	ldr	r0, [pc, #368]	; (8006478 <HAL_ADC_Init+0x284>)
 8006308:	f7ff fdd4 	bl	8005eb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	7e5b      	ldrb	r3, [r3, #25]
 8006310:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006316:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800631c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006322:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800632a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800632c:	4313      	orrs	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d106      	bne.n	8006348 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	3b01      	subs	r3, #1
 8006340:	045b      	lsls	r3, r3, #17
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4313      	orrs	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4313      	orrs	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	4b44      	ldr	r3, [pc, #272]	; (800647c <HAL_ADC_Init+0x288>)
 800636c:	4013      	ands	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	69b9      	ldr	r1, [r7, #24]
 8006374:	430b      	orrs	r3, r1
 8006376:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff ff25 	bl	80061cc <LL_ADC_INJ_IsConversionOngoing>
 8006382:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d140      	bne.n	800640c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d13d      	bne.n	800640c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7e1b      	ldrb	r3, [r3, #24]
 8006398:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800639a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b2:	f023 0306 	bic.w	r3, r3, #6
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	69b9      	ldr	r1, [r7, #24]
 80063bc:	430b      	orrs	r3, r1
 80063be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d118      	bne.n	80063fc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80063e0:	4311      	orrs	r1, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80063e6:	4311      	orrs	r1, r2
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063ec:	430a      	orrs	r2, r1
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0201 	orr.w	r2, r2, #1
 80063f8:	611a      	str	r2, [r3, #16]
 80063fa:	e007      	b.n	800640c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d10c      	bne.n	800642e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	f023 010f 	bic.w	r1, r3, #15
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	1e5a      	subs	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
 800642c:	e007      	b.n	800643e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 020f 	bic.w	r2, r2, #15
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	f043 0201 	orr.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	659a      	str	r2, [r3, #88]	; 0x58
 800644e:	e007      	b.n	8006460 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f043 0210 	orr.w	r2, r3, #16
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006460:	7ffb      	ldrb	r3, [r7, #31]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000020 	.word	0x20000020
 8006470:	053e2d63 	.word	0x053e2d63
 8006474:	50040000 	.word	0x50040000
 8006478:	50040300 	.word	0x50040300
 800647c:	fff0c007 	.word	0xfff0c007

08006480 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b0b6      	sub	sp, #216	; 0xd8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006490:	2300      	movs	r3, #0
 8006492:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_ADC_ConfigChannel+0x22>
 800649e:	2302      	movs	r3, #2
 80064a0:	e3d5      	b.n	8006c4e <HAL_ADC_ConfigChannel+0x7ce>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fe79 	bl	80061a6 <LL_ADC_REG_IsConversionOngoing>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f040 83ba 	bne.w	8006c30 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d824      	bhi.n	8006516 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	3b02      	subs	r3, #2
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d81b      	bhi.n	800650e <HAL_ADC_ConfigChannel+0x8e>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <HAL_ADC_ConfigChannel+0x5c>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	080064f5 	.word	0x080064f5
 80064e4:	080064fd 	.word	0x080064fd
 80064e8:	08006505 	.word	0x08006505
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80064ec:	230c      	movs	r3, #12
 80064ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80064f2:	e010      	b.n	8006516 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80064f4:	2312      	movs	r3, #18
 80064f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80064fa:	e00c      	b.n	8006516 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80064fc:	2318      	movs	r3, #24
 80064fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006502:	e008      	b.n	8006516 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800650c:	e003      	b.n	8006516 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800650e:	2306      	movs	r3, #6
 8006510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006514:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006524:	f7ff fd62 	bl	8005fec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff fe3a 	bl	80061a6 <LL_ADC_REG_IsConversionOngoing>
 8006532:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fe46 	bl	80061cc <LL_ADC_INJ_IsConversionOngoing>
 8006540:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 81bf 	bne.w	80068cc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800654e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 81ba 	bne.w	80068cc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006560:	d10f      	bne.n	8006582 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	4619      	mov	r1, r3
 800656e:	f7ff fd69 	bl	8006044 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fd23 	bl	8005fc6 <LL_ADC_SetSamplingTimeCommonConfig>
 8006580:	e00e      	b.n	80065a0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	461a      	mov	r2, r3
 8006590:	f7ff fd58 	bl	8006044 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fd13 	bl	8005fc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	08db      	lsrs	r3, r3, #3
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d00a      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6919      	ldr	r1, [r3, #16]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065d2:	f7ff fca3 	bl	8005f1c <LL_ADC_SetOffset>
 80065d6:	e179      	b.n	80068cc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2100      	movs	r1, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fcc0 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <HAL_ADC_ConfigChannel+0x184>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2100      	movs	r1, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fcb5 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 80065fa:	4603      	mov	r3, r0
 80065fc:	0e9b      	lsrs	r3, r3, #26
 80065fe:	f003 021f 	and.w	r2, r3, #31
 8006602:	e01e      	b.n	8006642 <HAL_ADC_ConfigChannel+0x1c2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2100      	movs	r1, #0
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fcaa 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 8006610:	4603      	mov	r3, r0
 8006612:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800661a:	fa93 f3a3 	rbit	r3, r3
 800661e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006626:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800662a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8006632:	2320      	movs	r3, #32
 8006634:	e004      	b.n	8006640 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8006636:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800663a:	fab3 f383 	clz	r3, r3
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664a:	2b00      	cmp	r3, #0
 800664c:	d105      	bne.n	800665a <HAL_ADC_ConfigChannel+0x1da>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	0e9b      	lsrs	r3, r3, #26
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	e018      	b.n	800668c <HAL_ADC_ConfigChannel+0x20c>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006666:	fa93 f3a3 	rbit	r3, r3
 800666a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800666e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006676:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800667e:	2320      	movs	r3, #32
 8006680:	e004      	b.n	800668c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8006682:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006686:	fab3 f383 	clz	r3, r3
 800668a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800668c:	429a      	cmp	r2, r3
 800668e:	d106      	bne.n	800669e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2200      	movs	r2, #0
 8006696:	2100      	movs	r1, #0
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fc79 	bl	8005f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2101      	movs	r1, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fc5d 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x24a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2101      	movs	r1, #1
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fc52 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 80066c0:	4603      	mov	r3, r0
 80066c2:	0e9b      	lsrs	r3, r3, #26
 80066c4:	f003 021f 	and.w	r2, r3, #31
 80066c8:	e01e      	b.n	8006708 <HAL_ADC_ConfigChannel+0x288>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2101      	movs	r1, #1
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff fc47 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066e0:	fa93 f3a3 	rbit	r3, r3
 80066e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80066e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80066f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80066f8:	2320      	movs	r3, #32
 80066fa:	e004      	b.n	8006706 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80066fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006700:	fab3 f383 	clz	r3, r3
 8006704:	b2db      	uxtb	r3, r3
 8006706:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <HAL_ADC_ConfigChannel+0x2a0>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	0e9b      	lsrs	r3, r3, #26
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	e018      	b.n	8006752 <HAL_ADC_ConfigChannel+0x2d2>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006728:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800672c:	fa93 f3a3 	rbit	r3, r3
 8006730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006734:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800673c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8006744:	2320      	movs	r3, #32
 8006746:	e004      	b.n	8006752 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8006748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800674c:	fab3 f383 	clz	r3, r3
 8006750:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006752:	429a      	cmp	r2, r3
 8006754:	d106      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fc16 	bl	8005f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2102      	movs	r1, #2
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fbfa 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 8006770:	4603      	mov	r3, r0
 8006772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <HAL_ADC_ConfigChannel+0x310>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2102      	movs	r1, #2
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fbef 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 8006786:	4603      	mov	r3, r0
 8006788:	0e9b      	lsrs	r3, r3, #26
 800678a:	f003 021f 	and.w	r2, r3, #31
 800678e:	e01e      	b.n	80067ce <HAL_ADC_ConfigChannel+0x34e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2102      	movs	r1, #2
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fbe4 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 800679c:	4603      	mov	r3, r0
 800679e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067a6:	fa93 f3a3 	rbit	r3, r3
 80067aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80067ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80067b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80067be:	2320      	movs	r3, #32
 80067c0:	e004      	b.n	80067cc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80067c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067c6:	fab3 f383 	clz	r3, r3
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d105      	bne.n	80067e6 <HAL_ADC_ConfigChannel+0x366>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	0e9b      	lsrs	r3, r3, #26
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	e014      	b.n	8006810 <HAL_ADC_ConfigChannel+0x390>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067ee:	fa93 f3a3 	rbit	r3, r3
 80067f2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80067f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80067fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8006802:	2320      	movs	r3, #32
 8006804:	e004      	b.n	8006810 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8006806:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800680a:	fab3 f383 	clz	r3, r3
 800680e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006810:	429a      	cmp	r2, r3
 8006812:	d106      	bne.n	8006822 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2200      	movs	r2, #0
 800681a:	2102      	movs	r1, #2
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fbb7 	bl	8005f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2103      	movs	r1, #3
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fb9b 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 800682e:	4603      	mov	r3, r0
 8006830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <HAL_ADC_ConfigChannel+0x3ce>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2103      	movs	r1, #3
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fb90 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 8006844:	4603      	mov	r3, r0
 8006846:	0e9b      	lsrs	r3, r3, #26
 8006848:	f003 021f 	and.w	r2, r3, #31
 800684c:	e017      	b.n	800687e <HAL_ADC_ConfigChannel+0x3fe>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2103      	movs	r1, #3
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fb85 	bl	8005f64 <LL_ADC_GetOffsetChannel>
 800685a:	4603      	mov	r3, r0
 800685c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800685e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006860:	fa93 f3a3 	rbit	r3, r3
 8006864:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006868:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800686a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006870:	2320      	movs	r3, #32
 8006872:	e003      	b.n	800687c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006876:	fab3 f383 	clz	r3, r3
 800687a:	b2db      	uxtb	r3, r3
 800687c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <HAL_ADC_ConfigChannel+0x416>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	0e9b      	lsrs	r3, r3, #26
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	e011      	b.n	80068ba <HAL_ADC_ConfigChannel+0x43a>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689e:	fa93 f3a3 	rbit	r3, r3
 80068a2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80068a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068a6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80068a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80068ae:	2320      	movs	r3, #32
 80068b0:	e003      	b.n	80068ba <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80068b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068b4:	fab3 f383 	clz	r3, r3
 80068b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d106      	bne.n	80068cc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2200      	movs	r2, #0
 80068c4:	2103      	movs	r1, #3
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff fb62 	bl	8005f90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff fc55 	bl	8006180 <LL_ADC_IsEnabled>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f040 813f 	bne.w	8006b5c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6819      	ldr	r1, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f7ff fbd6 	bl	800609c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	4a8e      	ldr	r2, [pc, #568]	; (8006b30 <HAL_ADC_ConfigChannel+0x6b0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	f040 8130 	bne.w	8006b5c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <HAL_ADC_ConfigChannel+0x4a4>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	0e9b      	lsrs	r3, r3, #26
 8006912:	3301      	adds	r3, #1
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2b09      	cmp	r3, #9
 800691a:	bf94      	ite	ls
 800691c:	2301      	movls	r3, #1
 800691e:	2300      	movhi	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	e019      	b.n	8006958 <HAL_ADC_ConfigChannel+0x4d8>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800692c:	fa93 f3a3 	rbit	r3, r3
 8006930:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006934:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800693c:	2320      	movs	r3, #32
 800693e:	e003      	b.n	8006948 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8006940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006942:	fab3 f383 	clz	r3, r3
 8006946:	b2db      	uxtb	r3, r3
 8006948:	3301      	adds	r3, #1
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2b09      	cmp	r3, #9
 8006950:	bf94      	ite	ls
 8006952:	2301      	movls	r3, #1
 8006954:	2300      	movhi	r3, #0
 8006956:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006958:	2b00      	cmp	r3, #0
 800695a:	d079      	beq.n	8006a50 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006964:	2b00      	cmp	r3, #0
 8006966:	d107      	bne.n	8006978 <HAL_ADC_ConfigChannel+0x4f8>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	0e9b      	lsrs	r3, r3, #26
 800696e:	3301      	adds	r3, #1
 8006970:	069b      	lsls	r3, r3, #26
 8006972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006976:	e015      	b.n	80069a4 <HAL_ADC_ConfigChannel+0x524>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006980:	fa93 f3a3 	rbit	r3, r3
 8006984:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006988:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800698a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8006990:	2320      	movs	r3, #32
 8006992:	e003      	b.n	800699c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8006994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006996:	fab3 f383 	clz	r3, r3
 800699a:	b2db      	uxtb	r3, r3
 800699c:	3301      	adds	r3, #1
 800699e:	069b      	lsls	r3, r3, #26
 80069a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d109      	bne.n	80069c4 <HAL_ADC_ConfigChannel+0x544>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	0e9b      	lsrs	r3, r3, #26
 80069b6:	3301      	adds	r3, #1
 80069b8:	f003 031f 	and.w	r3, r3, #31
 80069bc:	2101      	movs	r1, #1
 80069be:	fa01 f303 	lsl.w	r3, r1, r3
 80069c2:	e017      	b.n	80069f4 <HAL_ADC_ConfigChannel+0x574>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069cc:	fa93 f3a3 	rbit	r3, r3
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80069d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80069d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80069dc:	2320      	movs	r3, #32
 80069de:	e003      	b.n	80069e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80069e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e2:	fab3 f383 	clz	r3, r3
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	3301      	adds	r3, #1
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2101      	movs	r1, #1
 80069f0:	fa01 f303 	lsl.w	r3, r1, r3
 80069f4:	ea42 0103 	orr.w	r1, r2, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <HAL_ADC_ConfigChannel+0x59a>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	0e9b      	lsrs	r3, r3, #26
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	f003 021f 	and.w	r2, r3, #31
 8006a10:	4613      	mov	r3, r2
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4413      	add	r3, r2
 8006a16:	051b      	lsls	r3, r3, #20
 8006a18:	e018      	b.n	8006a4c <HAL_ADC_ConfigChannel+0x5cc>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8006a32:	2320      	movs	r3, #32
 8006a34:	e003      	b.n	8006a3e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	fab3 f383 	clz	r3, r3
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f003 021f 	and.w	r2, r3, #31
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	e080      	b.n	8006b52 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d107      	bne.n	8006a6c <HAL_ADC_ConfigChannel+0x5ec>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	0e9b      	lsrs	r3, r3, #26
 8006a62:	3301      	adds	r3, #1
 8006a64:	069b      	lsls	r3, r3, #26
 8006a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a6a:	e015      	b.n	8006a98 <HAL_ADC_ConfigChannel+0x618>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	fa93 f3a3 	rbit	r3, r3
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8006a84:	2320      	movs	r3, #32
 8006a86:	e003      	b.n	8006a90 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	fab3 f383 	clz	r3, r3
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	3301      	adds	r3, #1
 8006a92:	069b      	lsls	r3, r3, #26
 8006a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <HAL_ADC_ConfigChannel+0x638>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	0e9b      	lsrs	r3, r3, #26
 8006aaa:	3301      	adds	r3, #1
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab6:	e017      	b.n	8006ae8 <HAL_ADC_ConfigChannel+0x668>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	fa93 f3a3 	rbit	r3, r3
 8006ac4:	61bb      	str	r3, [r7, #24]
  return result;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	e003      	b.n	8006adc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	fab3 f383 	clz	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	3301      	adds	r3, #1
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	ea42 0103 	orr.w	r1, r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10d      	bne.n	8006b14 <HAL_ADC_ConfigChannel+0x694>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	0e9b      	lsrs	r3, r3, #26
 8006afe:	3301      	adds	r3, #1
 8006b00:	f003 021f 	and.w	r2, r3, #31
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	3b1e      	subs	r3, #30
 8006b0c:	051b      	lsls	r3, r3, #20
 8006b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b12:	e01d      	b.n	8006b50 <HAL_ADC_ConfigChannel+0x6d0>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	fa93 f3a3 	rbit	r3, r3
 8006b20:	60fb      	str	r3, [r7, #12]
  return result;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006b2c:	2320      	movs	r3, #32
 8006b2e:	e005      	b.n	8006b3c <HAL_ADC_ConfigChannel+0x6bc>
 8006b30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	fab3 f383 	clz	r3, r3
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	f003 021f 	and.w	r2, r3, #31
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	3b1e      	subs	r3, #30
 8006b4a:	051b      	lsls	r3, r3, #20
 8006b4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b56:	4619      	mov	r1, r3
 8006b58:	f7ff fa74 	bl	8006044 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	4b3d      	ldr	r3, [pc, #244]	; (8006c58 <HAL_ADC_ConfigChannel+0x7d8>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d06c      	beq.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b68:	483c      	ldr	r0, [pc, #240]	; (8006c5c <HAL_ADC_ConfigChannel+0x7dc>)
 8006b6a:	f7ff f9c9 	bl	8005f00 <LL_ADC_GetCommonPathInternalCh>
 8006b6e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a3a      	ldr	r2, [pc, #232]	; (8006c60 <HAL_ADC_ConfigChannel+0x7e0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d127      	bne.n	8006bcc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d121      	bne.n	8006bcc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a35      	ldr	r2, [pc, #212]	; (8006c64 <HAL_ADC_ConfigChannel+0x7e4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d157      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	482f      	ldr	r0, [pc, #188]	; (8006c5c <HAL_ADC_ConfigChannel+0x7dc>)
 8006b9e:	f7ff f99c 	bl	8005eda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ba2:	4b31      	ldr	r3, [pc, #196]	; (8006c68 <HAL_ADC_ConfigChannel+0x7e8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	099b      	lsrs	r3, r3, #6
 8006ba8:	4a30      	ldr	r2, [pc, #192]	; (8006c6c <HAL_ADC_ConfigChannel+0x7ec>)
 8006baa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bae:	099b      	lsrs	r3, r3, #6
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006bbc:	e002      	b.n	8006bc4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f9      	bne.n	8006bbe <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006bca:	e03a      	b.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a27      	ldr	r2, [pc, #156]	; (8006c70 <HAL_ADC_ConfigChannel+0x7f0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d113      	bne.n	8006bfe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10d      	bne.n	8006bfe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <HAL_ADC_ConfigChannel+0x7e4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d12a      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4819      	ldr	r0, [pc, #100]	; (8006c5c <HAL_ADC_ConfigChannel+0x7dc>)
 8006bf8:	f7ff f96f 	bl	8005eda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006bfc:	e021      	b.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1c      	ldr	r2, [pc, #112]	; (8006c74 <HAL_ADC_ConfigChannel+0x7f4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d11c      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d116      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <HAL_ADC_ConfigChannel+0x7e4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d111      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c26:	4619      	mov	r1, r3
 8006c28:	480c      	ldr	r0, [pc, #48]	; (8006c5c <HAL_ADC_ConfigChannel+0x7dc>)
 8006c2a:	f7ff f956 	bl	8005eda <LL_ADC_SetCommonPathInternalCh>
 8006c2e:	e008      	b.n	8006c42 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006c4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	37d8      	adds	r7, #216	; 0xd8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	80080000 	.word	0x80080000
 8006c5c:	50040300 	.word	0x50040300
 8006c60:	c7520000 	.word	0xc7520000
 8006c64:	50040000 	.word	0x50040000
 8006c68:	20000020 	.word	0x20000020
 8006c6c:	053e2d63 	.word	0x053e2d63
 8006c70:	cb840000 	.word	0xcb840000
 8006c74:	80000001 	.word	0x80000001

08006c78 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <LL_EXTI_EnableIT_0_31+0x20>)
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4904      	ldr	r1, [pc, #16]	; (8006c98 <LL_EXTI_EnableIT_0_31+0x20>)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40010400 	.word	0x40010400

08006c9c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <LL_EXTI_DisableIT_0_31+0x24>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	43db      	mvns	r3, r3
 8006cac:	4904      	ldr	r1, [pc, #16]	; (8006cc0 <LL_EXTI_DisableIT_0_31+0x24>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010400 	.word	0x40010400

08006cc4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	4904      	ldr	r1, [pc, #16]	; (8006ce4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	604b      	str	r3, [r1, #4]

}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40010400 	.word	0x40010400

08006ce8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006cf0:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <LL_EXTI_DisableEvent_0_31+0x24>)
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	4904      	ldr	r1, [pc, #16]	; (8006d0c <LL_EXTI_DisableEvent_0_31+0x24>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	604b      	str	r3, [r1, #4]
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010400 	.word	0x40010400

08006d10 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006d18:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	4904      	ldr	r1, [pc, #16]	; (8006d30 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	608b      	str	r3, [r1, #8]

}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	40010400 	.word	0x40010400

08006d34 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	43db      	mvns	r3, r3
 8006d44:	4904      	ldr	r1, [pc, #16]	; (8006d58 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]

}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40010400 	.word	0x40010400

08006d5c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	4904      	ldr	r1, [pc, #16]	; (8006d7c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60cb      	str	r3, [r1, #12]
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	40010400 	.word	0x40010400

08006d80 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	4904      	ldr	r1, [pc, #16]	; (8006da4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	60cb      	str	r3, [r1, #12]
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40010400 	.word	0x40010400

08006da8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006db0:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6153      	str	r3, [r2, #20]
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40010400 	.word	0x40010400

08006dc8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e0d1      	b.n	8006f88 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006df2:	d102      	bne.n	8006dfa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e0c6      	b.n	8006f88 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d115      	bne.n	8006e32 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e14:	4b5f      	ldr	r3, [pc, #380]	; (8006f94 <HAL_COMP_Init+0x1cc>)
 8006e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e18:	4a5e      	ldr	r2, [pc, #376]	; (8006f94 <HAL_COMP_Init+0x1cc>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8006e20:	4b5c      	ldr	r3, [pc, #368]	; (8006f94 <HAL_COMP_Init+0x1cc>)
 8006e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7fc fb6d 	bl	800350c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e3c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	4b4b      	ldr	r3, [pc, #300]	; (8006f98 <HAL_COMP_Init+0x1d0>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	6979      	ldr	r1, [r7, #20]
 8006e72:	430b      	orrs	r3, r1
 8006e74:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e7e:	d106      	bne.n	8006e8e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006e80:	4b46      	ldr	r3, [pc, #280]	; (8006f9c <HAL_COMP_Init+0x1d4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a45      	ldr	r2, [pc, #276]	; (8006f9c <HAL_COMP_Init+0x1d4>)
 8006e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	e005      	b.n	8006e9a <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006e8e:	4b43      	ldr	r3, [pc, #268]	; (8006f9c <HAL_COMP_Init+0x1d4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a42      	ldr	r2, [pc, #264]	; (8006f9c <HAL_COMP_Init+0x1d4>)
 8006e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e98:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d016      	beq.n	8006ed6 <HAL_COMP_Init+0x10e>
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d113      	bne.n	8006ed6 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006eae:	4b3c      	ldr	r3, [pc, #240]	; (8006fa0 <HAL_COMP_Init+0x1d8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	099b      	lsrs	r3, r3, #6
 8006eb4:	4a3b      	ldr	r2, [pc, #236]	; (8006fa4 <HAL_COMP_Init+0x1dc>)
 8006eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eba:	099b      	lsrs	r3, r3, #6
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006ec8:	e002      	b.n	8006ed0 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f9      	bne.n	8006eca <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a33      	ldr	r2, [pc, #204]	; (8006fa8 <HAL_COMP_Init+0x1e0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d102      	bne.n	8006ee6 <HAL_COMP_Init+0x11e>
 8006ee0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ee4:	e001      	b.n	8006eea <HAL_COMP_Init+0x122>
 8006ee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006eea:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d037      	beq.n	8006f68 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006f04:	6938      	ldr	r0, [r7, #16]
 8006f06:	f7ff ff03 	bl	8006d10 <LL_EXTI_EnableRisingTrig_0_31>
 8006f0a:	e002      	b.n	8006f12 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006f0c:	6938      	ldr	r0, [r7, #16]
 8006f0e:	f7ff ff11 	bl	8006d34 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006f1e:	6938      	ldr	r0, [r7, #16]
 8006f20:	f7ff ff1c 	bl	8006d5c <LL_EXTI_EnableFallingTrig_0_31>
 8006f24:	e002      	b.n	8006f2c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006f26:	6938      	ldr	r0, [r7, #16]
 8006f28:	f7ff ff2a 	bl	8006d80 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006f2c:	6938      	ldr	r0, [r7, #16]
 8006f2e:	f7ff ff3b 	bl	8006da8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006f3e:	6938      	ldr	r0, [r7, #16]
 8006f40:	f7ff fec0 	bl	8006cc4 <LL_EXTI_EnableEvent_0_31>
 8006f44:	e002      	b.n	8006f4c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006f46:	6938      	ldr	r0, [r7, #16]
 8006f48:	f7ff fece 	bl	8006ce8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8006f58:	6938      	ldr	r0, [r7, #16]
 8006f5a:	f7ff fe8d 	bl	8006c78 <LL_EXTI_EnableIT_0_31>
 8006f5e:	e009      	b.n	8006f74 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006f60:	6938      	ldr	r0, [r7, #16]
 8006f62:	f7ff fe9b 	bl	8006c9c <LL_EXTI_DisableIT_0_31>
 8006f66:	e005      	b.n	8006f74 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006f68:	6938      	ldr	r0, [r7, #16]
 8006f6a:	f7ff febd 	bl	8006ce8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f7ff fe94 	bl	8006c9c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3720      	adds	r7, #32
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	40021000 	.word	0x40021000
 8006f98:	ff207d03 	.word	0xff207d03
 8006f9c:	40010204 	.word	0x40010204
 8006fa0:	20000020 	.word	0x20000020
 8006fa4:	053e2d63 	.word	0x053e2d63
 8006fa8:	40010200 	.word	0x40010200

08006fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fbc:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fde:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	60d3      	str	r3, [r2, #12]
}
 8006fe4:	bf00      	nop
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	e000ed00 	.word	0xe000ed00

08006ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ff8:	4b04      	ldr	r3, [pc, #16]	; (800700c <__NVIC_GetPriorityGrouping+0x18>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	f003 0307 	and.w	r3, r3, #7
}
 8007002:	4618      	mov	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	e000ed00 	.word	0xe000ed00

08007010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800701a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701e:	2b00      	cmp	r3, #0
 8007020:	db0b      	blt.n	800703a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	f003 021f 	and.w	r2, r3, #31
 8007028:	4907      	ldr	r1, [pc, #28]	; (8007048 <__NVIC_EnableIRQ+0x38>)
 800702a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	2001      	movs	r0, #1
 8007032:	fa00 f202 	lsl.w	r2, r0, r2
 8007036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	e000e100 	.word	0xe000e100

0800704c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705c:	2b00      	cmp	r3, #0
 800705e:	db0a      	blt.n	8007076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	490c      	ldr	r1, [pc, #48]	; (8007098 <__NVIC_SetPriority+0x4c>)
 8007066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706a:	0112      	lsls	r2, r2, #4
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	440b      	add	r3, r1
 8007070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007074:	e00a      	b.n	800708c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	4908      	ldr	r1, [pc, #32]	; (800709c <__NVIC_SetPriority+0x50>)
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	3b04      	subs	r3, #4
 8007084:	0112      	lsls	r2, r2, #4
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	440b      	add	r3, r1
 800708a:	761a      	strb	r2, [r3, #24]
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	e000e100 	.word	0xe000e100
 800709c:	e000ed00 	.word	0xe000ed00

080070a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b089      	sub	sp, #36	; 0x24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f1c3 0307 	rsb	r3, r3, #7
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	bf28      	it	cs
 80070be:	2304      	movcs	r3, #4
 80070c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3304      	adds	r3, #4
 80070c6:	2b06      	cmp	r3, #6
 80070c8:	d902      	bls.n	80070d0 <NVIC_EncodePriority+0x30>
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	3b03      	subs	r3, #3
 80070ce:	e000      	b.n	80070d2 <NVIC_EncodePriority+0x32>
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d4:	f04f 32ff 	mov.w	r2, #4294967295
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43da      	mvns	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	401a      	ands	r2, r3
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070e8:	f04f 31ff 	mov.w	r1, #4294967295
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	43d9      	mvns	r1, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070f8:	4313      	orrs	r3, r2
         );
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3724      	adds	r7, #36	; 0x24
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3b01      	subs	r3, #1
 8007114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007118:	d301      	bcc.n	800711e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800711a:	2301      	movs	r3, #1
 800711c:	e00f      	b.n	800713e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800711e:	4a0a      	ldr	r2, [pc, #40]	; (8007148 <SysTick_Config+0x40>)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3b01      	subs	r3, #1
 8007124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007126:	210f      	movs	r1, #15
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	f7ff ff8e 	bl	800704c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <SysTick_Config+0x40>)
 8007132:	2200      	movs	r2, #0
 8007134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007136:	4b04      	ldr	r3, [pc, #16]	; (8007148 <SysTick_Config+0x40>)
 8007138:	2207      	movs	r2, #7
 800713a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	e000e010 	.word	0xe000e010

0800714c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff ff29 	bl	8006fac <__NVIC_SetPriorityGrouping>
}
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	4603      	mov	r3, r0
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007170:	2300      	movs	r3, #0
 8007172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007174:	f7ff ff3e 	bl	8006ff4 <__NVIC_GetPriorityGrouping>
 8007178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	6978      	ldr	r0, [r7, #20]
 8007180:	f7ff ff8e 	bl	80070a0 <NVIC_EncodePriority>
 8007184:	4602      	mov	r2, r0
 8007186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800718a:	4611      	mov	r1, r2
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff ff5d 	bl	800704c <__NVIC_SetPriority>
}
 8007192:	bf00      	nop
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	4603      	mov	r3, r0
 80071a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff ff31 	bl	8007010 <__NVIC_EnableIRQ>
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff ffa2 	bl	8007108 <SysTick_Config>
 80071c4:	4603      	mov	r3, r0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071de:	e166      	b.n	80074ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	2101      	movs	r1, #1
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ec:	4013      	ands	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8158 	beq.w	80074a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	2b01      	cmp	r3, #1
 8007202:	d005      	beq.n	8007210 <HAL_GPIO_Init+0x40>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d130      	bne.n	8007272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	2203      	movs	r2, #3
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	43db      	mvns	r3, r3
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4013      	ands	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007246:	2201      	movs	r2, #1
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	fa02 f303 	lsl.w	r3, r2, r3
 800724e:	43db      	mvns	r3, r3
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4013      	ands	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	091b      	lsrs	r3, r3, #4
 800725c:	f003 0201 	and.w	r2, r3, #1
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	fa02 f303 	lsl.w	r3, r2, r3
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b03      	cmp	r3, #3
 800727c:	d017      	beq.n	80072ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	2203      	movs	r2, #3
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	43db      	mvns	r3, r3
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4013      	ands	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d123      	bne.n	8007302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	08da      	lsrs	r2, r3, #3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3208      	adds	r2, #8
 80072c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	220f      	movs	r2, #15
 80072d2:	fa02 f303 	lsl.w	r3, r2, r3
 80072d6:	43db      	mvns	r3, r3
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4013      	ands	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	08da      	lsrs	r2, r3, #3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3208      	adds	r2, #8
 80072fc:	6939      	ldr	r1, [r7, #16]
 80072fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	2203      	movs	r2, #3
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	43db      	mvns	r3, r3
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4013      	ands	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f003 0203 	and.w	r2, r3, #3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 80b2 	beq.w	80074a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007344:	4b61      	ldr	r3, [pc, #388]	; (80074cc <HAL_GPIO_Init+0x2fc>)
 8007346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007348:	4a60      	ldr	r2, [pc, #384]	; (80074cc <HAL_GPIO_Init+0x2fc>)
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	6613      	str	r3, [r2, #96]	; 0x60
 8007350:	4b5e      	ldr	r3, [pc, #376]	; (80074cc <HAL_GPIO_Init+0x2fc>)
 8007352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800735c:	4a5c      	ldr	r2, [pc, #368]	; (80074d0 <HAL_GPIO_Init+0x300>)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	089b      	lsrs	r3, r3, #2
 8007362:	3302      	adds	r3, #2
 8007364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	220f      	movs	r2, #15
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	43db      	mvns	r3, r3
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4013      	ands	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007386:	d02b      	beq.n	80073e0 <HAL_GPIO_Init+0x210>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a52      	ldr	r2, [pc, #328]	; (80074d4 <HAL_GPIO_Init+0x304>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d025      	beq.n	80073dc <HAL_GPIO_Init+0x20c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a51      	ldr	r2, [pc, #324]	; (80074d8 <HAL_GPIO_Init+0x308>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d01f      	beq.n	80073d8 <HAL_GPIO_Init+0x208>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a50      	ldr	r2, [pc, #320]	; (80074dc <HAL_GPIO_Init+0x30c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d019      	beq.n	80073d4 <HAL_GPIO_Init+0x204>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a4f      	ldr	r2, [pc, #316]	; (80074e0 <HAL_GPIO_Init+0x310>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d013      	beq.n	80073d0 <HAL_GPIO_Init+0x200>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a4e      	ldr	r2, [pc, #312]	; (80074e4 <HAL_GPIO_Init+0x314>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00d      	beq.n	80073cc <HAL_GPIO_Init+0x1fc>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a4d      	ldr	r2, [pc, #308]	; (80074e8 <HAL_GPIO_Init+0x318>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d007      	beq.n	80073c8 <HAL_GPIO_Init+0x1f8>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a4c      	ldr	r2, [pc, #304]	; (80074ec <HAL_GPIO_Init+0x31c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d101      	bne.n	80073c4 <HAL_GPIO_Init+0x1f4>
 80073c0:	2307      	movs	r3, #7
 80073c2:	e00e      	b.n	80073e2 <HAL_GPIO_Init+0x212>
 80073c4:	2308      	movs	r3, #8
 80073c6:	e00c      	b.n	80073e2 <HAL_GPIO_Init+0x212>
 80073c8:	2306      	movs	r3, #6
 80073ca:	e00a      	b.n	80073e2 <HAL_GPIO_Init+0x212>
 80073cc:	2305      	movs	r3, #5
 80073ce:	e008      	b.n	80073e2 <HAL_GPIO_Init+0x212>
 80073d0:	2304      	movs	r3, #4
 80073d2:	e006      	b.n	80073e2 <HAL_GPIO_Init+0x212>
 80073d4:	2303      	movs	r3, #3
 80073d6:	e004      	b.n	80073e2 <HAL_GPIO_Init+0x212>
 80073d8:	2302      	movs	r3, #2
 80073da:	e002      	b.n	80073e2 <HAL_GPIO_Init+0x212>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <HAL_GPIO_Init+0x212>
 80073e0:	2300      	movs	r3, #0
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	f002 0203 	and.w	r2, r2, #3
 80073e8:	0092      	lsls	r2, r2, #2
 80073ea:	4093      	lsls	r3, r2
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80073f2:	4937      	ldr	r1, [pc, #220]	; (80074d0 <HAL_GPIO_Init+0x300>)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	089b      	lsrs	r3, r3, #2
 80073f8:	3302      	adds	r3, #2
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007400:	4b3b      	ldr	r3, [pc, #236]	; (80074f0 <HAL_GPIO_Init+0x320>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	43db      	mvns	r3, r3
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4013      	ands	r3, r2
 800740e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007424:	4a32      	ldr	r2, [pc, #200]	; (80074f0 <HAL_GPIO_Init+0x320>)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800742a:	4b31      	ldr	r3, [pc, #196]	; (80074f0 <HAL_GPIO_Init+0x320>)
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	43db      	mvns	r3, r3
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4013      	ands	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800744e:	4a28      	ldr	r2, [pc, #160]	; (80074f0 <HAL_GPIO_Init+0x320>)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007454:	4b26      	ldr	r3, [pc, #152]	; (80074f0 <HAL_GPIO_Init+0x320>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	43db      	mvns	r3, r3
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4013      	ands	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007478:	4a1d      	ldr	r2, [pc, #116]	; (80074f0 <HAL_GPIO_Init+0x320>)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800747e:	4b1c      	ldr	r3, [pc, #112]	; (80074f0 <HAL_GPIO_Init+0x320>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	43db      	mvns	r3, r3
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4013      	ands	r3, r2
 800748c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80074a2:	4a13      	ldr	r2, [pc, #76]	; (80074f0 <HAL_GPIO_Init+0x320>)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	3301      	adds	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f47f ae91 	bne.w	80071e0 <HAL_GPIO_Init+0x10>
  }
}
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	40021000 	.word	0x40021000
 80074d0:	40010000 	.word	0x40010000
 80074d4:	48000400 	.word	0x48000400
 80074d8:	48000800 	.word	0x48000800
 80074dc:	48000c00 	.word	0x48000c00
 80074e0:	48001000 	.word	0x48001000
 80074e4:	48001400 	.word	0x48001400
 80074e8:	48001800 	.word	0x48001800
 80074ec:	48001c00 	.word	0x48001c00
 80074f0:	40010400 	.word	0x40010400

080074f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	887b      	ldrh	r3, [r7, #2]
 8007506:	4013      	ands	r3, r2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
 8007510:	e001      	b.n	8007516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	807b      	strh	r3, [r7, #2]
 8007530:	4613      	mov	r3, r2
 8007532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007534:	787b      	ldrb	r3, [r7, #1]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800753a:	887a      	ldrh	r2, [r7, #2]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007540:	e002      	b.n	8007548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e08d      	b.n	8007682 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fc f81a 	bl	80035b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2224      	movs	r2, #36	; 0x24
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0201 	bic.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d107      	bne.n	80075ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075ca:	609a      	str	r2, [r3, #8]
 80075cc:	e006      	b.n	80075dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80075da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d108      	bne.n	80075f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	e007      	b.n	8007606 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007604:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6812      	ldr	r2, [r2, #0]
 8007610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	69d9      	ldr	r1, [r3, #28]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1a      	ldr	r2, [r3, #32]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af02      	add	r7, sp, #8
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	461a      	mov	r2, r3
 8007698:	460b      	mov	r3, r1
 800769a:	817b      	strh	r3, [r7, #10]
 800769c:	4613      	mov	r3, r2
 800769e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	f040 80fd 	bne.w	80078a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_I2C_Master_Transmit+0x30>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e0f6      	b.n	80078aa <HAL_I2C_Master_Transmit+0x21e>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076c4:	f7fe fbc6 	bl	8005e54 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2319      	movs	r3, #25
 80076d0:	2201      	movs	r2, #1
 80076d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fa0a 	bl	8007af0 <I2C_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e0e1      	b.n	80078aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2221      	movs	r2, #33	; 0x21
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2210      	movs	r2, #16
 80076f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	893a      	ldrh	r2, [r7, #8]
 8007706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007712:	b29b      	uxth	r3, r3
 8007714:	2bff      	cmp	r3, #255	; 0xff
 8007716:	d906      	bls.n	8007726 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	22ff      	movs	r2, #255	; 0xff
 800771c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800771e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	e007      	b.n	8007736 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007734:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773a:	2b00      	cmp	r3, #0
 800773c:	d024      	beq.n	8007788 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	781a      	ldrb	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	b2db      	uxtb	r3, r3
 8007774:	3301      	adds	r3, #1
 8007776:	b2da      	uxtb	r2, r3
 8007778:	8979      	ldrh	r1, [r7, #10]
 800777a:	4b4e      	ldr	r3, [pc, #312]	; (80078b4 <HAL_I2C_Master_Transmit+0x228>)
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 fbf1 	bl	8007f68 <I2C_TransferConfig>
 8007786:	e066      	b.n	8007856 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	b2da      	uxtb	r2, r3
 800778e:	8979      	ldrh	r1, [r7, #10]
 8007790:	4b48      	ldr	r3, [pc, #288]	; (80078b4 <HAL_I2C_Master_Transmit+0x228>)
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fbe6 	bl	8007f68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800779c:	e05b      	b.n	8007856 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	6a39      	ldr	r1, [r7, #32]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 f9f3 	bl	8007b8e <I2C_WaitOnTXISFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e07b      	b.n	80078aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	781a      	ldrb	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d034      	beq.n	8007856 <HAL_I2C_Master_Transmit+0x1ca>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d130      	bne.n	8007856 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	2200      	movs	r2, #0
 80077fc:	2180      	movs	r1, #128	; 0x80
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 f976 	bl	8007af0 <I2C_WaitOnFlagUntilTimeout>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e04d      	b.n	80078aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29b      	uxth	r3, r3
 8007814:	2bff      	cmp	r3, #255	; 0xff
 8007816:	d90e      	bls.n	8007836 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	22ff      	movs	r2, #255	; 0xff
 800781c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007822:	b2da      	uxtb	r2, r3
 8007824:	8979      	ldrh	r1, [r7, #10]
 8007826:	2300      	movs	r3, #0
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 fb9a 	bl	8007f68 <I2C_TransferConfig>
 8007834:	e00f      	b.n	8007856 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	b2da      	uxtb	r2, r3
 8007846:	8979      	ldrh	r1, [r7, #10]
 8007848:	2300      	movs	r3, #0
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 fb89 	bl	8007f68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d19e      	bne.n	800779e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	6a39      	ldr	r1, [r7, #32]
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f9d9 	bl	8007c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e01a      	b.n	80078aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2220      	movs	r2, #32
 800787a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6859      	ldr	r1, [r3, #4]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <HAL_I2C_Master_Transmit+0x22c>)
 8007888:	400b      	ands	r3, r1
 800788a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	80002000 	.word	0x80002000
 80078b8:	fe00e800 	.word	0xfe00e800

080078bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	607a      	str	r2, [r7, #4]
 80078c6:	461a      	mov	r2, r3
 80078c8:	460b      	mov	r3, r1
 80078ca:	817b      	strh	r3, [r7, #10]
 80078cc:	4613      	mov	r3, r2
 80078ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b20      	cmp	r3, #32
 80078da:	f040 80db 	bne.w	8007a94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_I2C_Master_Receive+0x30>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e0d4      	b.n	8007a96 <HAL_I2C_Master_Receive+0x1da>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078f4:	f7fe faae 	bl	8005e54 <HAL_GetTick>
 80078f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	2319      	movs	r3, #25
 8007900:	2201      	movs	r2, #1
 8007902:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f8f2 	bl	8007af0 <I2C_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e0bf      	b.n	8007a96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2222      	movs	r2, #34	; 0x22
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2210      	movs	r2, #16
 8007922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	893a      	ldrh	r2, [r7, #8]
 8007936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007942:	b29b      	uxth	r3, r3
 8007944:	2bff      	cmp	r3, #255	; 0xff
 8007946:	d90e      	bls.n	8007966 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	22ff      	movs	r2, #255	; 0xff
 800794c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007952:	b2da      	uxtb	r2, r3
 8007954:	8979      	ldrh	r1, [r7, #10]
 8007956:	4b52      	ldr	r3, [pc, #328]	; (8007aa0 <HAL_I2C_Master_Receive+0x1e4>)
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fb02 	bl	8007f68 <I2C_TransferConfig>
 8007964:	e06d      	b.n	8007a42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007974:	b2da      	uxtb	r2, r3
 8007976:	8979      	ldrh	r1, [r7, #10]
 8007978:	4b49      	ldr	r3, [pc, #292]	; (8007aa0 <HAL_I2C_Master_Receive+0x1e4>)
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 faf1 	bl	8007f68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007986:	e05c      	b.n	8007a42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	6a39      	ldr	r1, [r7, #32]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f989 	bl	8007ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e07c      	b.n	8007a96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d034      	beq.n	8007a42 <HAL_I2C_Master_Receive+0x186>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d130      	bne.n	8007a42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	2200      	movs	r2, #0
 80079e8:	2180      	movs	r1, #128	; 0x80
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f880 	bl	8007af0 <I2C_WaitOnFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e04d      	b.n	8007a96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2bff      	cmp	r3, #255	; 0xff
 8007a02:	d90e      	bls.n	8007a22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	22ff      	movs	r2, #255	; 0xff
 8007a08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	8979      	ldrh	r1, [r7, #10]
 8007a12:	2300      	movs	r3, #0
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 faa4 	bl	8007f68 <I2C_TransferConfig>
 8007a20:	e00f      	b.n	8007a42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	8979      	ldrh	r1, [r7, #10]
 8007a34:	2300      	movs	r3, #0
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fa93 	bl	8007f68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d19d      	bne.n	8007988 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	6a39      	ldr	r1, [r7, #32]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f8e3 	bl	8007c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e01a      	b.n	8007a96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2220      	movs	r2, #32
 8007a66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6859      	ldr	r1, [r3, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <HAL_I2C_Master_Receive+0x1e8>)
 8007a74:	400b      	ands	r3, r1
 8007a76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e000      	b.n	8007a96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	80002400 	.word	0x80002400
 8007aa4:	fe00e800 	.word	0xfe00e800

08007aa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d103      	bne.n	8007ac6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d007      	beq.n	8007ae4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699a      	ldr	r2, [r3, #24]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	619a      	str	r2, [r3, #24]
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b00:	e031      	b.n	8007b66 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b08:	d02d      	beq.n	8007b66 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0a:	f7fe f9a3 	bl	8005e54 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d302      	bcc.n	8007b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d122      	bne.n	8007b66 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	bf0c      	ite	eq
 8007b30:	2301      	moveq	r3, #1
 8007b32:	2300      	movne	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d113      	bne.n	8007b66 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	f043 0220 	orr.w	r2, r3, #32
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e00f      	b.n	8007b86 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	bf0c      	ite	eq
 8007b76:	2301      	moveq	r3, #1
 8007b78:	2300      	movne	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d0be      	beq.n	8007b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b9a:	e033      	b.n	8007c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f901 	bl	8007da8 <I2C_IsErrorOccurred>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e031      	b.n	8007c14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d025      	beq.n	8007c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb8:	f7fe f94c 	bl	8005e54 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d302      	bcc.n	8007bce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d11a      	bne.n	8007c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d013      	beq.n	8007c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be0:	f043 0220 	orr.w	r2, r3, #32
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e007      	b.n	8007c14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d1c4      	bne.n	8007b9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c28:	e02f      	b.n	8007c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f8ba 	bl	8007da8 <I2C_IsErrorOccurred>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e02d      	b.n	8007c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c3e:	f7fe f909 	bl	8005e54 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d302      	bcc.n	8007c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d11a      	bne.n	8007c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d013      	beq.n	8007c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c66:	f043 0220 	orr.w	r2, r3, #32
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e007      	b.n	8007c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b20      	cmp	r3, #32
 8007c96:	d1c8      	bne.n	8007c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cb0:	e06b      	b.n	8007d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f876 	bl	8007da8 <I2C_IsErrorOccurred>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e069      	b.n	8007d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d138      	bne.n	8007d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d105      	bne.n	8007cee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	e055      	b.n	8007d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d107      	bne.n	8007d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2210      	movs	r2, #16
 8007d02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2204      	movs	r2, #4
 8007d08:	645a      	str	r2, [r3, #68]	; 0x44
 8007d0a:	e002      	b.n	8007d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2220      	movs	r2, #32
 8007d18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6859      	ldr	r1, [r3, #4]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b1f      	ldr	r3, [pc, #124]	; (8007da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8007d26:	400b      	ands	r3, r1
 8007d28:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e029      	b.n	8007d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d46:	f7fe f885 	bl	8005e54 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d302      	bcc.n	8007d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d116      	bne.n	8007d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d00f      	beq.n	8007d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6e:	f043 0220 	orr.w	r2, r3, #32
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e007      	b.n	8007d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d18c      	bne.n	8007cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	fe00e800 	.word	0xfe00e800

08007da8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f003 0310 	and.w	r3, r3, #16
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d068      	beq.n	8007ea6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2210      	movs	r2, #16
 8007dda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ddc:	e049      	b.n	8007e72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d045      	beq.n	8007e72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007de6:	f7fe f835 	bl	8005e54 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d302      	bcc.n	8007dfc <I2C_IsErrorOccurred+0x54>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d13a      	bne.n	8007e72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e1e:	d121      	bne.n	8007e64 <I2C_IsErrorOccurred+0xbc>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e26:	d01d      	beq.n	8007e64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007e28:	7cfb      	ldrb	r3, [r7, #19]
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d01a      	beq.n	8007e64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007e3e:	f7fe f809 	bl	8005e54 <HAL_GetTick>
 8007e42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e44:	e00e      	b.n	8007e64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007e46:	f7fe f805 	bl	8005e54 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b19      	cmp	r3, #25
 8007e52:	d907      	bls.n	8007e64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	f043 0320 	orr.w	r3, r3, #32
 8007e5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007e62:	e006      	b.n	8007e72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d1e9      	bne.n	8007e46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d003      	beq.n	8007e88 <I2C_IsErrorOccurred+0xe0>
 8007e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0aa      	beq.n	8007dde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2220      	movs	r2, #32
 8007e96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	f043 0304 	orr.w	r3, r3, #4
 8007e9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	f043 0301 	orr.w	r3, r3, #1
 8007ebe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	f043 0308 	orr.w	r3, r3, #8
 8007ee0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	f043 0302 	orr.w	r3, r3, #2
 8007f02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01c      	beq.n	8007f56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff fdc3 	bl	8007aa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6859      	ldr	r1, [r3, #4]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <I2C_IsErrorOccurred+0x1bc>)
 8007f2e:	400b      	ands	r3, r1
 8007f30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3728      	adds	r7, #40	; 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	fe00e800 	.word	0xfe00e800

08007f68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	607b      	str	r3, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	817b      	strh	r3, [r7, #10]
 8007f76:	4613      	mov	r3, r2
 8007f78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f7a:	897b      	ldrh	r3, [r7, #10]
 8007f7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f80:	7a7b      	ldrb	r3, [r7, #9]
 8007f82:	041b      	lsls	r3, r3, #16
 8007f84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	0d5b      	lsrs	r3, r3, #21
 8007fa2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007fa6:	4b08      	ldr	r3, [pc, #32]	; (8007fc8 <I2C_TransferConfig+0x60>)
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	43db      	mvns	r3, r3
 8007fac:	ea02 0103 	and.w	r1, r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	03ff63ff 	.word	0x03ff63ff

08007fcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d138      	bne.n	8008054 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e032      	b.n	8008056 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2224      	movs	r2, #36	; 0x24
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800801e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6819      	ldr	r1, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e000      	b.n	8008056 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b20      	cmp	r3, #32
 8008076:	d139      	bne.n	80080ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008082:	2302      	movs	r3, #2
 8008084:	e033      	b.n	80080ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2224      	movs	r2, #36	; 0x24
 8008092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0201 	bic.w	r2, r2, #1
 80080a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0201 	orr.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e000      	b.n	80080ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080ec:	2302      	movs	r3, #2
  }
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008100:	4b05      	ldr	r3, [pc, #20]	; (8008118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a04      	ldr	r2, [pc, #16]	; (8008118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800810a:	6013      	str	r3, [r2, #0]
}
 800810c:	bf00      	nop
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	40007000 	.word	0x40007000

0800811c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008120:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800812c:	d102      	bne.n	8008134 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800812e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008132:	e00b      	b.n	800814c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008134:	4b08      	ldr	r3, [pc, #32]	; (8008158 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800813a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008142:	d102      	bne.n	800814a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008148:	e000      	b.n	800814c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800814a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800814c:	4618      	mov	r0, r3
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40007000 	.word	0x40007000

0800815c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d141      	bne.n	80081ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800816a:	4b4b      	ldr	r3, [pc, #300]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008176:	d131      	bne.n	80081dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008178:	4b47      	ldr	r3, [pc, #284]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800817a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800817e:	4a46      	ldr	r2, [pc, #280]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008188:	4b43      	ldr	r3, [pc, #268]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008190:	4a41      	ldr	r2, [pc, #260]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008198:	4b40      	ldr	r3, [pc, #256]	; (800829c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2232      	movs	r2, #50	; 0x32
 800819e:	fb02 f303 	mul.w	r3, r2, r3
 80081a2:	4a3f      	ldr	r2, [pc, #252]	; (80082a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80081a4:	fba2 2303 	umull	r2, r3, r2, r3
 80081a8:	0c9b      	lsrs	r3, r3, #18
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081ae:	e002      	b.n	80081b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081b6:	4b38      	ldr	r3, [pc, #224]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c2:	d102      	bne.n	80081ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1f2      	bne.n	80081b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081ca:	4b33      	ldr	r3, [pc, #204]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d6:	d158      	bne.n	800828a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e057      	b.n	800828c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081dc:	4b2e      	ldr	r3, [pc, #184]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e2:	4a2d      	ldr	r2, [pc, #180]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80081ec:	e04d      	b.n	800828a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081f4:	d141      	bne.n	800827a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80081f6:	4b28      	ldr	r3, [pc, #160]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008202:	d131      	bne.n	8008268 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008204:	4b24      	ldr	r3, [pc, #144]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800820a:	4a23      	ldr	r2, [pc, #140]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800820c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008214:	4b20      	ldr	r3, [pc, #128]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800821c:	4a1e      	ldr	r2, [pc, #120]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800821e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008224:	4b1d      	ldr	r3, [pc, #116]	; (800829c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2232      	movs	r2, #50	; 0x32
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	4a1c      	ldr	r2, [pc, #112]	; (80082a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008230:	fba2 2303 	umull	r2, r3, r2, r3
 8008234:	0c9b      	lsrs	r3, r3, #18
 8008236:	3301      	adds	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800823a:	e002      	b.n	8008242 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3b01      	subs	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008242:	4b15      	ldr	r3, [pc, #84]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800824a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800824e:	d102      	bne.n	8008256 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1f2      	bne.n	800823c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008256:	4b10      	ldr	r3, [pc, #64]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800825e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008262:	d112      	bne.n	800828a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e011      	b.n	800828c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008268:	4b0b      	ldr	r3, [pc, #44]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800826a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800826e:	4a0a      	ldr	r2, [pc, #40]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008278:	e007      	b.n	800828a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800827a:	4b07      	ldr	r3, [pc, #28]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008282:	4a05      	ldr	r2, [pc, #20]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008288:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	40007000 	.word	0x40007000
 800829c:	20000020 	.word	0x20000020
 80082a0:	431bde83 	.word	0x431bde83

080082a4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80082a8:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4a04      	ldr	r2, [pc, #16]	; (80082c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80082ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b2:	6053      	str	r3, [r2, #4]
}
 80082b4:	bf00      	nop
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40007000 	.word	0x40007000

080082c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d102      	bne.n	80082d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	f000 bc08 	b.w	8008ae8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082d8:	4b96      	ldr	r3, [pc, #600]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 030c 	and.w	r3, r3, #12
 80082e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082e2:	4b94      	ldr	r3, [pc, #592]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 80e4 	beq.w	80084c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d007      	beq.n	8008310 <HAL_RCC_OscConfig+0x4c>
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b0c      	cmp	r3, #12
 8008304:	f040 808b 	bne.w	800841e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b01      	cmp	r3, #1
 800830c:	f040 8087 	bne.w	800841e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008310:	4b88      	ldr	r3, [pc, #544]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <HAL_RCC_OscConfig+0x64>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e3df      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a1a      	ldr	r2, [r3, #32]
 800832c:	4b81      	ldr	r3, [pc, #516]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <HAL_RCC_OscConfig+0x7e>
 8008338:	4b7e      	ldr	r3, [pc, #504]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008340:	e005      	b.n	800834e <HAL_RCC_OscConfig+0x8a>
 8008342:	4b7c      	ldr	r3, [pc, #496]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008348:	091b      	lsrs	r3, r3, #4
 800834a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800834e:	4293      	cmp	r3, r2
 8008350:	d223      	bcs.n	800839a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fdcc 	bl	8008ef4 <RCC_SetFlashLatencyFromMSIRange>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e3c0      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008366:	4b73      	ldr	r3, [pc, #460]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a72      	ldr	r2, [pc, #456]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800836c:	f043 0308 	orr.w	r3, r3, #8
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	4b70      	ldr	r3, [pc, #448]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	496d      	ldr	r1, [pc, #436]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008380:	4313      	orrs	r3, r2
 8008382:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008384:	4b6b      	ldr	r3, [pc, #428]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	4968      	ldr	r1, [pc, #416]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008394:	4313      	orrs	r3, r2
 8008396:	604b      	str	r3, [r1, #4]
 8008398:	e025      	b.n	80083e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800839a:	4b66      	ldr	r3, [pc, #408]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a65      	ldr	r2, [pc, #404]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80083a0:	f043 0308 	orr.w	r3, r3, #8
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	4b63      	ldr	r3, [pc, #396]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	4960      	ldr	r1, [pc, #384]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083b8:	4b5e      	ldr	r3, [pc, #376]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	495b      	ldr	r1, [pc, #364]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fd8c 	bl	8008ef4 <RCC_SetFlashLatencyFromMSIRange>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e380      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80083e6:	f000 fcc1 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 80083ea:	4602      	mov	r2, r0
 80083ec:	4b51      	ldr	r3, [pc, #324]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	091b      	lsrs	r3, r3, #4
 80083f2:	f003 030f 	and.w	r3, r3, #15
 80083f6:	4950      	ldr	r1, [pc, #320]	; (8008538 <HAL_RCC_OscConfig+0x274>)
 80083f8:	5ccb      	ldrb	r3, [r1, r3]
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008402:	4a4e      	ldr	r2, [pc, #312]	; (800853c <HAL_RCC_OscConfig+0x278>)
 8008404:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008406:	4b4e      	ldr	r3, [pc, #312]	; (8008540 <HAL_RCC_OscConfig+0x27c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f7fd fcd2 	bl	8005db4 <HAL_InitTick>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d052      	beq.n	80084c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	e364      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d032      	beq.n	800848c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008426:	4b43      	ldr	r3, [pc, #268]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a42      	ldr	r2, [pc, #264]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008432:	f7fd fd0f 	bl	8005e54 <HAL_GetTick>
 8008436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008438:	e008      	b.n	800844c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800843a:	f7fd fd0b 	bl	8005e54 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d901      	bls.n	800844c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e34d      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800844c:	4b39      	ldr	r3, [pc, #228]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0f0      	beq.n	800843a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008458:	4b36      	ldr	r3, [pc, #216]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a35      	ldr	r2, [pc, #212]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800845e:	f043 0308 	orr.w	r3, r3, #8
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4b33      	ldr	r3, [pc, #204]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	4930      	ldr	r1, [pc, #192]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008472:	4313      	orrs	r3, r2
 8008474:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008476:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	492b      	ldr	r1, [pc, #172]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008486:	4313      	orrs	r3, r2
 8008488:	604b      	str	r3, [r1, #4]
 800848a:	e01a      	b.n	80084c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800848c:	4b29      	ldr	r3, [pc, #164]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a28      	ldr	r2, [pc, #160]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008492:	f023 0301 	bic.w	r3, r3, #1
 8008496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008498:	f7fd fcdc 	bl	8005e54 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80084a0:	f7fd fcd8 	bl	8005e54 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e31a      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80084b2:	4b20      	ldr	r3, [pc, #128]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f0      	bne.n	80084a0 <HAL_RCC_OscConfig+0x1dc>
 80084be:	e000      	b.n	80084c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80084c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d073      	beq.n	80085b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d005      	beq.n	80084e0 <HAL_RCC_OscConfig+0x21c>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b0c      	cmp	r3, #12
 80084d8:	d10e      	bne.n	80084f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d10b      	bne.n	80084f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e0:	4b14      	ldr	r3, [pc, #80]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d063      	beq.n	80085b4 <HAL_RCC_OscConfig+0x2f0>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d15f      	bne.n	80085b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e2f7      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008500:	d106      	bne.n	8008510 <HAL_RCC_OscConfig+0x24c>
 8008502:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a0b      	ldr	r2, [pc, #44]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800850c:	6013      	str	r3, [r2, #0]
 800850e:	e025      	b.n	800855c <HAL_RCC_OscConfig+0x298>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008518:	d114      	bne.n	8008544 <HAL_RCC_OscConfig+0x280>
 800851a:	4b06      	ldr	r3, [pc, #24]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a05      	ldr	r2, [pc, #20]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	4b03      	ldr	r3, [pc, #12]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a02      	ldr	r2, [pc, #8]	; (8008534 <HAL_RCC_OscConfig+0x270>)
 800852c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e013      	b.n	800855c <HAL_RCC_OscConfig+0x298>
 8008534:	40021000 	.word	0x40021000
 8008538:	08016350 	.word	0x08016350
 800853c:	20000020 	.word	0x20000020
 8008540:	20000024 	.word	0x20000024
 8008544:	4ba0      	ldr	r3, [pc, #640]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a9f      	ldr	r2, [pc, #636]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800854a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	4b9d      	ldr	r3, [pc, #628]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a9c      	ldr	r2, [pc, #624]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800855a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d013      	beq.n	800858c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008564:	f7fd fc76 	bl	8005e54 <HAL_GetTick>
 8008568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800856a:	e008      	b.n	800857e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800856c:	f7fd fc72 	bl	8005e54 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b64      	cmp	r3, #100	; 0x64
 8008578:	d901      	bls.n	800857e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e2b4      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800857e:	4b92      	ldr	r3, [pc, #584]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0f0      	beq.n	800856c <HAL_RCC_OscConfig+0x2a8>
 800858a:	e014      	b.n	80085b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858c:	f7fd fc62 	bl	8005e54 <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008594:	f7fd fc5e 	bl	8005e54 <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b64      	cmp	r3, #100	; 0x64
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e2a0      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085a6:	4b88      	ldr	r3, [pc, #544]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f0      	bne.n	8008594 <HAL_RCC_OscConfig+0x2d0>
 80085b2:	e000      	b.n	80085b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d060      	beq.n	8008684 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d005      	beq.n	80085d4 <HAL_RCC_OscConfig+0x310>
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	2b0c      	cmp	r3, #12
 80085cc:	d119      	bne.n	8008602 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d116      	bne.n	8008602 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085d4:	4b7c      	ldr	r3, [pc, #496]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_RCC_OscConfig+0x328>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e27d      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ec:	4b76      	ldr	r3, [pc, #472]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	061b      	lsls	r3, r3, #24
 80085fa:	4973      	ldr	r1, [pc, #460]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008600:	e040      	b.n	8008684 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d023      	beq.n	8008652 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800860a:	4b6f      	ldr	r3, [pc, #444]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a6e      	ldr	r2, [pc, #440]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008616:	f7fd fc1d 	bl	8005e54 <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800861e:	f7fd fc19 	bl	8005e54 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e25b      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008630:	4b65      	ldr	r3, [pc, #404]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0f0      	beq.n	800861e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800863c:	4b62      	ldr	r3, [pc, #392]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	061b      	lsls	r3, r3, #24
 800864a:	495f      	ldr	r1, [pc, #380]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800864c:	4313      	orrs	r3, r2
 800864e:	604b      	str	r3, [r1, #4]
 8008650:	e018      	b.n	8008684 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008652:	4b5d      	ldr	r3, [pc, #372]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a5c      	ldr	r2, [pc, #368]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800865c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865e:	f7fd fbf9 	bl	8005e54 <HAL_GetTick>
 8008662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008664:	e008      	b.n	8008678 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008666:	f7fd fbf5 	bl	8005e54 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e237      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008678:	4b53      	ldr	r3, [pc, #332]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1f0      	bne.n	8008666 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0308 	and.w	r3, r3, #8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d03c      	beq.n	800870a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01c      	beq.n	80086d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008698:	4b4b      	ldr	r3, [pc, #300]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800869a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800869e:	4a4a      	ldr	r2, [pc, #296]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a8:	f7fd fbd4 	bl	8005e54 <HAL_GetTick>
 80086ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086b0:	f7fd fbd0 	bl	8005e54 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e212      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086c2:	4b41      	ldr	r3, [pc, #260]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80086c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0ef      	beq.n	80086b0 <HAL_RCC_OscConfig+0x3ec>
 80086d0:	e01b      	b.n	800870a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086d2:	4b3d      	ldr	r3, [pc, #244]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80086d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086d8:	4a3b      	ldr	r2, [pc, #236]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80086da:	f023 0301 	bic.w	r3, r3, #1
 80086de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e2:	f7fd fbb7 	bl	8005e54 <HAL_GetTick>
 80086e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086e8:	e008      	b.n	80086fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086ea:	f7fd fbb3 	bl	8005e54 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d901      	bls.n	80086fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e1f5      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086fc:	4b32      	ldr	r3, [pc, #200]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80086fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008702:	f003 0302 	and.w	r3, r3, #2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1ef      	bne.n	80086ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80a6 	beq.w	8008864 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008718:	2300      	movs	r3, #0
 800871a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800871c:	4b2a      	ldr	r3, [pc, #168]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800871e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10d      	bne.n	8008744 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008728:	4b27      	ldr	r3, [pc, #156]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800872a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872c:	4a26      	ldr	r2, [pc, #152]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800872e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008732:	6593      	str	r3, [r2, #88]	; 0x58
 8008734:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873c:	60bb      	str	r3, [r7, #8]
 800873e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008740:	2301      	movs	r3, #1
 8008742:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008744:	4b21      	ldr	r3, [pc, #132]	; (80087cc <HAL_RCC_OscConfig+0x508>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874c:	2b00      	cmp	r3, #0
 800874e:	d118      	bne.n	8008782 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008750:	4b1e      	ldr	r3, [pc, #120]	; (80087cc <HAL_RCC_OscConfig+0x508>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a1d      	ldr	r2, [pc, #116]	; (80087cc <HAL_RCC_OscConfig+0x508>)
 8008756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800875a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800875c:	f7fd fb7a 	bl	8005e54 <HAL_GetTick>
 8008760:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008762:	e008      	b.n	8008776 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008764:	f7fd fb76 	bl	8005e54 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b02      	cmp	r3, #2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e1b8      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008776:	4b15      	ldr	r3, [pc, #84]	; (80087cc <HAL_RCC_OscConfig+0x508>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f0      	beq.n	8008764 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d108      	bne.n	800879c <HAL_RCC_OscConfig+0x4d8>
 800878a:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 800878c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008790:	4a0d      	ldr	r2, [pc, #52]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800879a:	e029      	b.n	80087f0 <HAL_RCC_OscConfig+0x52c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	2b05      	cmp	r3, #5
 80087a2:	d115      	bne.n	80087d0 <HAL_RCC_OscConfig+0x50c>
 80087a4:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80087a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087aa:	4a07      	ldr	r2, [pc, #28]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80087ac:	f043 0304 	orr.w	r3, r3, #4
 80087b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80087b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ba:	4a03      	ldr	r2, [pc, #12]	; (80087c8 <HAL_RCC_OscConfig+0x504>)
 80087bc:	f043 0301 	orr.w	r3, r3, #1
 80087c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087c4:	e014      	b.n	80087f0 <HAL_RCC_OscConfig+0x52c>
 80087c6:	bf00      	nop
 80087c8:	40021000 	.word	0x40021000
 80087cc:	40007000 	.word	0x40007000
 80087d0:	4b9d      	ldr	r3, [pc, #628]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80087d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d6:	4a9c      	ldr	r2, [pc, #624]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80087d8:	f023 0301 	bic.w	r3, r3, #1
 80087dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087e0:	4b99      	ldr	r3, [pc, #612]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80087e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e6:	4a98      	ldr	r2, [pc, #608]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80087e8:	f023 0304 	bic.w	r3, r3, #4
 80087ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d016      	beq.n	8008826 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f8:	f7fd fb2c 	bl	8005e54 <HAL_GetTick>
 80087fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087fe:	e00a      	b.n	8008816 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008800:	f7fd fb28 	bl	8005e54 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	f241 3288 	movw	r2, #5000	; 0x1388
 800880e:	4293      	cmp	r3, r2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e168      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008816:	4b8c      	ldr	r3, [pc, #560]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0ed      	beq.n	8008800 <HAL_RCC_OscConfig+0x53c>
 8008824:	e015      	b.n	8008852 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008826:	f7fd fb15 	bl	8005e54 <HAL_GetTick>
 800882a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800882c:	e00a      	b.n	8008844 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800882e:	f7fd fb11 	bl	8005e54 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	f241 3288 	movw	r2, #5000	; 0x1388
 800883c:	4293      	cmp	r3, r2
 800883e:	d901      	bls.n	8008844 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e151      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008844:	4b80      	ldr	r3, [pc, #512]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1ed      	bne.n	800882e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008852:	7ffb      	ldrb	r3, [r7, #31]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d105      	bne.n	8008864 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008858:	4b7b      	ldr	r3, [pc, #492]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 800885a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885c:	4a7a      	ldr	r2, [pc, #488]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 800885e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008862:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0320 	and.w	r3, r3, #32
 800886c:	2b00      	cmp	r3, #0
 800886e:	d03c      	beq.n	80088ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01c      	beq.n	80088b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008878:	4b73      	ldr	r3, [pc, #460]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 800887a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800887e:	4a72      	ldr	r2, [pc, #456]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008888:	f7fd fae4 	bl	8005e54 <HAL_GetTick>
 800888c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800888e:	e008      	b.n	80088a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008890:	f7fd fae0 	bl	8005e54 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e122      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80088a2:	4b69      	ldr	r3, [pc, #420]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80088a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0ef      	beq.n	8008890 <HAL_RCC_OscConfig+0x5cc>
 80088b0:	e01b      	b.n	80088ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088b2:	4b65      	ldr	r3, [pc, #404]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80088b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088b8:	4a63      	ldr	r2, [pc, #396]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80088ba:	f023 0301 	bic.w	r3, r3, #1
 80088be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c2:	f7fd fac7 	bl	8005e54 <HAL_GetTick>
 80088c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088ca:	f7fd fac3 	bl	8005e54 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e105      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088dc:	4b5a      	ldr	r3, [pc, #360]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80088de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1ef      	bne.n	80088ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 80f9 	beq.w	8008ae6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f040 80cf 	bne.w	8008a9c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80088fe:	4b52      	ldr	r3, [pc, #328]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f003 0203 	and.w	r2, r3, #3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	429a      	cmp	r2, r3
 8008910:	d12c      	bne.n	800896c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	3b01      	subs	r3, #1
 800891e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008920:	429a      	cmp	r2, r3
 8008922:	d123      	bne.n	800896c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008930:	429a      	cmp	r2, r3
 8008932:	d11b      	bne.n	800896c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008940:	429a      	cmp	r2, r3
 8008942:	d113      	bne.n	800896c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894e:	085b      	lsrs	r3, r3, #1
 8008950:	3b01      	subs	r3, #1
 8008952:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008954:	429a      	cmp	r2, r3
 8008956:	d109      	bne.n	800896c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	3b01      	subs	r3, #1
 8008966:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008968:	429a      	cmp	r2, r3
 800896a:	d071      	beq.n	8008a50 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b0c      	cmp	r3, #12
 8008970:	d068      	beq.n	8008a44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008972:	4b35      	ldr	r3, [pc, #212]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d105      	bne.n	800898a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800897e:	4b32      	ldr	r3, [pc, #200]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e0ac      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800898e:	4b2e      	ldr	r3, [pc, #184]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a2d      	ldr	r2, [pc, #180]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008998:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800899a:	f7fd fa5b 	bl	8005e54 <HAL_GetTick>
 800899e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089a0:	e008      	b.n	80089b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089a2:	f7fd fa57 	bl	8005e54 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d901      	bls.n	80089b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e099      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089b4:	4b24      	ldr	r3, [pc, #144]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1f0      	bne.n	80089a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089c0:	4b21      	ldr	r3, [pc, #132]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <HAL_RCC_OscConfig+0x788>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089d0:	3a01      	subs	r2, #1
 80089d2:	0112      	lsls	r2, r2, #4
 80089d4:	4311      	orrs	r1, r2
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089da:	0212      	lsls	r2, r2, #8
 80089dc:	4311      	orrs	r1, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089e2:	0852      	lsrs	r2, r2, #1
 80089e4:	3a01      	subs	r2, #1
 80089e6:	0552      	lsls	r2, r2, #21
 80089e8:	4311      	orrs	r1, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80089ee:	0852      	lsrs	r2, r2, #1
 80089f0:	3a01      	subs	r2, #1
 80089f2:	0652      	lsls	r2, r2, #25
 80089f4:	4311      	orrs	r1, r2
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089fa:	06d2      	lsls	r2, r2, #27
 80089fc:	430a      	orrs	r2, r1
 80089fe:	4912      	ldr	r1, [pc, #72]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008a04:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a0f      	ldr	r2, [pc, #60]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a10:	4b0d      	ldr	r3, [pc, #52]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	4a0c      	ldr	r2, [pc, #48]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a1c:	f7fd fa1a 	bl	8005e54 <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a24:	f7fd fa16 	bl	8005e54 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e058      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a36:	4b04      	ldr	r3, [pc, #16]	; (8008a48 <HAL_RCC_OscConfig+0x784>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a42:	e050      	b.n	8008ae6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e04f      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
 8008a48:	40021000 	.word	0x40021000
 8008a4c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a50:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d144      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008a5c:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a23      	ldr	r2, [pc, #140]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a68:	4b21      	ldr	r3, [pc, #132]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	4a20      	ldr	r2, [pc, #128]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a74:	f7fd f9ee 	bl	8005e54 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a7c:	f7fd f9ea 	bl	8005e54 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e02c      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a8e:	4b18      	ldr	r3, [pc, #96]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0f0      	beq.n	8008a7c <HAL_RCC_OscConfig+0x7b8>
 8008a9a:	e024      	b.n	8008ae6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	2b0c      	cmp	r3, #12
 8008aa0:	d01f      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aa2:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a12      	ldr	r2, [pc, #72]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aae:	f7fd f9d1 	bl	8005e54 <HAL_GetTick>
 8008ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ab4:	e008      	b.n	8008ac8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab6:	f7fd f9cd 	bl	8005e54 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e00f      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ac8:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f0      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008ad4:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	4905      	ldr	r1, [pc, #20]	; (8008af0 <HAL_RCC_OscConfig+0x82c>)
 8008ada:	4b06      	ldr	r3, [pc, #24]	; (8008af4 <HAL_RCC_OscConfig+0x830>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	60cb      	str	r3, [r1, #12]
 8008ae0:	e001      	b.n	8008ae6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e000      	b.n	8008ae8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3720      	adds	r7, #32
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	40021000 	.word	0x40021000
 8008af4:	feeefffc 	.word	0xfeeefffc

08008af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b02:	2300      	movs	r3, #0
 8008b04:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e11d      	b.n	8008d4c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b10:	4b90      	ldr	r3, [pc, #576]	; (8008d54 <HAL_RCC_ClockConfig+0x25c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 030f 	and.w	r3, r3, #15
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d910      	bls.n	8008b40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b1e:	4b8d      	ldr	r3, [pc, #564]	; (8008d54 <HAL_RCC_ClockConfig+0x25c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f023 020f 	bic.w	r2, r3, #15
 8008b26:	498b      	ldr	r1, [pc, #556]	; (8008d54 <HAL_RCC_ClockConfig+0x25c>)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b2e:	4b89      	ldr	r3, [pc, #548]	; (8008d54 <HAL_RCC_ClockConfig+0x25c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d001      	beq.n	8008b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e105      	b.n	8008d4c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d010      	beq.n	8008b6e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	4b81      	ldr	r3, [pc, #516]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d908      	bls.n	8008b6e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b5c:	4b7e      	ldr	r3, [pc, #504]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	497b      	ldr	r1, [pc, #492]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d079      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d11e      	bne.n	8008bc0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b82:	4b75      	ldr	r3, [pc, #468]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e0dc      	b.n	8008d4c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008b92:	f000 fa09 	bl	8008fa8 <RCC_GetSysClockFreqFromPLLSource>
 8008b96:	4603      	mov	r3, r0
 8008b98:	4a70      	ldr	r2, [pc, #448]	; (8008d5c <HAL_RCC_ClockConfig+0x264>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d946      	bls.n	8008c2c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008b9e:	4b6e      	ldr	r3, [pc, #440]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d140      	bne.n	8008c2c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008baa:	4b6b      	ldr	r3, [pc, #428]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bb2:	4a69      	ldr	r2, [pc, #420]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008bba:	2380      	movs	r3, #128	; 0x80
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	e035      	b.n	8008c2c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d107      	bne.n	8008bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008bc8:	4b63      	ldr	r3, [pc, #396]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d115      	bne.n	8008c00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e0b9      	b.n	8008d4c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008be0:	4b5d      	ldr	r3, [pc, #372]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0ad      	b.n	8008d4c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bf0:	4b59      	ldr	r3, [pc, #356]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e0a5      	b.n	8008d4c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008c00:	f000 f8b4 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 8008c04:	4603      	mov	r3, r0
 8008c06:	4a55      	ldr	r2, [pc, #340]	; (8008d5c <HAL_RCC_ClockConfig+0x264>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d90f      	bls.n	8008c2c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008c0c:	4b52      	ldr	r3, [pc, #328]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d109      	bne.n	8008c2c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c18:	4b4f      	ldr	r3, [pc, #316]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c20:	4a4d      	ldr	r2, [pc, #308]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c26:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c28:	2380      	movs	r3, #128	; 0x80
 8008c2a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c2c:	4b4a      	ldr	r3, [pc, #296]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f023 0203 	bic.w	r2, r3, #3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4947      	ldr	r1, [pc, #284]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c3e:	f7fd f909 	bl	8005e54 <HAL_GetTick>
 8008c42:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c44:	e00a      	b.n	8008c5c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c46:	f7fd f905 	bl	8005e54 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d901      	bls.n	8008c5c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e077      	b.n	8008d4c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c5c:	4b3e      	ldr	r3, [pc, #248]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f003 020c 	and.w	r2, r3, #12
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d1eb      	bne.n	8008c46 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b80      	cmp	r3, #128	; 0x80
 8008c72:	d105      	bne.n	8008c80 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008c74:	4b38      	ldr	r3, [pc, #224]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	4a37      	ldr	r2, [pc, #220]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c7e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	4b31      	ldr	r3, [pc, #196]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d208      	bcs.n	8008cae <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c9c:	4b2e      	ldr	r3, [pc, #184]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	492b      	ldr	r1, [pc, #172]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <HAL_RCC_ClockConfig+0x25c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d210      	bcs.n	8008cde <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cbc:	4b25      	ldr	r3, [pc, #148]	; (8008d54 <HAL_RCC_ClockConfig+0x25c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f023 020f 	bic.w	r2, r3, #15
 8008cc4:	4923      	ldr	r1, [pc, #140]	; (8008d54 <HAL_RCC_ClockConfig+0x25c>)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ccc:	4b21      	ldr	r3, [pc, #132]	; (8008d54 <HAL_RCC_ClockConfig+0x25c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 030f 	and.w	r3, r3, #15
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d001      	beq.n	8008cde <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e036      	b.n	8008d4c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d008      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cea:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	4918      	ldr	r1, [pc, #96]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d009      	beq.n	8008d1c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d08:	4b13      	ldr	r3, [pc, #76]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	4910      	ldr	r1, [pc, #64]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d1c:	f000 f826 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 8008d20:	4602      	mov	r2, r0
 8008d22:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <HAL_RCC_ClockConfig+0x260>)
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	091b      	lsrs	r3, r3, #4
 8008d28:	f003 030f 	and.w	r3, r3, #15
 8008d2c:	490c      	ldr	r1, [pc, #48]	; (8008d60 <HAL_RCC_ClockConfig+0x268>)
 8008d2e:	5ccb      	ldrb	r3, [r1, r3]
 8008d30:	f003 031f 	and.w	r3, r3, #31
 8008d34:	fa22 f303 	lsr.w	r3, r2, r3
 8008d38:	4a0a      	ldr	r2, [pc, #40]	; (8008d64 <HAL_RCC_ClockConfig+0x26c>)
 8008d3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <HAL_RCC_ClockConfig+0x270>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fd f837 	bl	8005db4 <HAL_InitTick>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]

  return status;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	40022000 	.word	0x40022000
 8008d58:	40021000 	.word	0x40021000
 8008d5c:	04c4b400 	.word	0x04c4b400
 8008d60:	08016350 	.word	0x08016350
 8008d64:	20000020 	.word	0x20000020
 8008d68:	20000024 	.word	0x20000024

08008d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b089      	sub	sp, #36	; 0x24
 8008d70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61fb      	str	r3, [r7, #28]
 8008d76:	2300      	movs	r3, #0
 8008d78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d7a:	4b3e      	ldr	r3, [pc, #248]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 030c 	and.w	r3, r3, #12
 8008d82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d84:	4b3b      	ldr	r3, [pc, #236]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f003 0303 	and.w	r3, r3, #3
 8008d8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <HAL_RCC_GetSysClockFreq+0x34>
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b0c      	cmp	r3, #12
 8008d98:	d121      	bne.n	8008dde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d11e      	bne.n	8008dde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008da0:	4b34      	ldr	r3, [pc, #208]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0308 	and.w	r3, r3, #8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d107      	bne.n	8008dbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008dac:	4b31      	ldr	r3, [pc, #196]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008db2:	0a1b      	lsrs	r3, r3, #8
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	e005      	b.n	8008dc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008dbc:	4b2d      	ldr	r3, [pc, #180]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	091b      	lsrs	r3, r3, #4
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008dc8:	4a2b      	ldr	r2, [pc, #172]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10d      	bne.n	8008df4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ddc:	e00a      	b.n	8008df4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d102      	bne.n	8008dea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008de4:	4b25      	ldr	r3, [pc, #148]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8008de6:	61bb      	str	r3, [r7, #24]
 8008de8:	e004      	b.n	8008df4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d101      	bne.n	8008df4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008df0:	4b23      	ldr	r3, [pc, #140]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8008df2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	2b0c      	cmp	r3, #12
 8008df8:	d134      	bne.n	8008e64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008dfa:	4b1e      	ldr	r3, [pc, #120]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d003      	beq.n	8008e12 <HAL_RCC_GetSysClockFreq+0xa6>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d003      	beq.n	8008e18 <HAL_RCC_GetSysClockFreq+0xac>
 8008e10:	e005      	b.n	8008e1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008e12:	4b1a      	ldr	r3, [pc, #104]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8008e14:	617b      	str	r3, [r7, #20]
      break;
 8008e16:	e005      	b.n	8008e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008e18:	4b19      	ldr	r3, [pc, #100]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e1a:	617b      	str	r3, [r7, #20]
      break;
 8008e1c:	e002      	b.n	8008e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	617b      	str	r3, [r7, #20]
      break;
 8008e22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e24:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	091b      	lsrs	r3, r3, #4
 8008e2a:	f003 030f 	and.w	r3, r3, #15
 8008e2e:	3301      	adds	r3, #1
 8008e30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e32:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	fb03 f202 	mul.w	r2, r3, r2
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e4a:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	0e5b      	lsrs	r3, r3, #25
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	3301      	adds	r3, #1
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008e64:	69bb      	ldr	r3, [r7, #24]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3724      	adds	r7, #36	; 0x24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40021000 	.word	0x40021000
 8008e78:	08016368 	.word	0x08016368
 8008e7c:	00f42400 	.word	0x00f42400
 8008e80:	007a1200 	.word	0x007a1200

08008e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	20000020 	.word	0x20000020

08008e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008ea0:	f7ff fff0 	bl	8008e84 <HAL_RCC_GetHCLKFreq>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	f003 0307 	and.w	r3, r3, #7
 8008eb0:	4904      	ldr	r1, [pc, #16]	; (8008ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008eb2:	5ccb      	ldrb	r3, [r1, r3]
 8008eb4:	f003 031f 	and.w	r3, r3, #31
 8008eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	08016360 	.word	0x08016360

08008ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ecc:	f7ff ffda 	bl	8008e84 <HAL_RCC_GetHCLKFreq>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	4b06      	ldr	r3, [pc, #24]	; (8008eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	0adb      	lsrs	r3, r3, #11
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	4904      	ldr	r1, [pc, #16]	; (8008ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ede:	5ccb      	ldrb	r3, [r1, r3]
 8008ee0:	f003 031f 	and.w	r3, r3, #31
 8008ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	08016360 	.word	0x08016360

08008ef4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008efc:	2300      	movs	r3, #0
 8008efe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008f00:	4b27      	ldr	r3, [pc, #156]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008f0c:	f7ff f906 	bl	800811c <HAL_PWREx_GetVoltageRange>
 8008f10:	6178      	str	r0, [r7, #20]
 8008f12:	e014      	b.n	8008f3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f14:	4b22      	ldr	r3, [pc, #136]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f18:	4a21      	ldr	r2, [pc, #132]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8008f20:	4b1f      	ldr	r3, [pc, #124]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008f2c:	f7ff f8f6 	bl	800811c <HAL_PWREx_GetVoltageRange>
 8008f30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008f32:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f36:	4a1a      	ldr	r2, [pc, #104]	; (8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f44:	d10b      	bne.n	8008f5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b80      	cmp	r3, #128	; 0x80
 8008f4a:	d913      	bls.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2ba0      	cmp	r3, #160	; 0xa0
 8008f50:	d902      	bls.n	8008f58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f52:	2302      	movs	r3, #2
 8008f54:	613b      	str	r3, [r7, #16]
 8008f56:	e00d      	b.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f58:	2301      	movs	r3, #1
 8008f5a:	613b      	str	r3, [r7, #16]
 8008f5c:	e00a      	b.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b7f      	cmp	r3, #127	; 0x7f
 8008f62:	d902      	bls.n	8008f6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008f64:	2302      	movs	r3, #2
 8008f66:	613b      	str	r3, [r7, #16]
 8008f68:	e004      	b.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b70      	cmp	r3, #112	; 0x70
 8008f6e:	d101      	bne.n	8008f74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f70:	2301      	movs	r3, #1
 8008f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008f74:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f023 020f 	bic.w	r2, r3, #15
 8008f7c:	4909      	ldr	r1, [pc, #36]	; (8008fa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008f84:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 030f 	and.w	r3, r3, #15
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d001      	beq.n	8008f96 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	40021000 	.word	0x40021000
 8008fa4:	40022000 	.word	0x40022000

08008fa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008fae:	4b2d      	ldr	r3, [pc, #180]	; (8009064 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d00b      	beq.n	8008fd6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d825      	bhi.n	8009010 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d008      	beq.n	8008fdc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d11f      	bne.n	8009010 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008fd0:	4b25      	ldr	r3, [pc, #148]	; (8009068 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008fd2:	613b      	str	r3, [r7, #16]
    break;
 8008fd4:	e01f      	b.n	8009016 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008fd6:	4b25      	ldr	r3, [pc, #148]	; (800906c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008fd8:	613b      	str	r3, [r7, #16]
    break;
 8008fda:	e01c      	b.n	8009016 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008fdc:	4b21      	ldr	r3, [pc, #132]	; (8009064 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d107      	bne.n	8008ff8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fee:	0a1b      	lsrs	r3, r3, #8
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	e005      	b.n	8009004 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008ff8:	4b1a      	ldr	r3, [pc, #104]	; (8009064 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	091b      	lsrs	r3, r3, #4
 8008ffe:	f003 030f 	and.w	r3, r3, #15
 8009002:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009004:	4a1a      	ldr	r2, [pc, #104]	; (8009070 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900c:	613b      	str	r3, [r7, #16]
    break;
 800900e:	e002      	b.n	8009016 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	613b      	str	r3, [r7, #16]
    break;
 8009014:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009016:	4b13      	ldr	r3, [pc, #76]	; (8009064 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	091b      	lsrs	r3, r3, #4
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	3301      	adds	r3, #1
 8009022:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009024:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	0a1b      	lsrs	r3, r3, #8
 800902a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	fb03 f202 	mul.w	r2, r3, r2
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	fbb2 f3f3 	udiv	r3, r2, r3
 800903a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	0e5b      	lsrs	r3, r3, #25
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	3301      	adds	r3, #1
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	fbb2 f3f3 	udiv	r3, r2, r3
 8009054:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009056:	683b      	ldr	r3, [r7, #0]
}
 8009058:	4618      	mov	r0, r3
 800905a:	371c      	adds	r7, #28
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	40021000 	.word	0x40021000
 8009068:	00f42400 	.word	0x00f42400
 800906c:	007a1200 	.word	0x007a1200
 8009070:	08016368 	.word	0x08016368

08009074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800907c:	2300      	movs	r3, #0
 800907e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009080:	2300      	movs	r3, #0
 8009082:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800908c:	2b00      	cmp	r3, #0
 800908e:	d040      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009094:	2b80      	cmp	r3, #128	; 0x80
 8009096:	d02a      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009098:	2b80      	cmp	r3, #128	; 0x80
 800909a:	d825      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800909c:	2b60      	cmp	r3, #96	; 0x60
 800909e:	d026      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80090a0:	2b60      	cmp	r3, #96	; 0x60
 80090a2:	d821      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80090a4:	2b40      	cmp	r3, #64	; 0x40
 80090a6:	d006      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80090a8:	2b40      	cmp	r3, #64	; 0x40
 80090aa:	d81d      	bhi.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d009      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	d010      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80090b4:	e018      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80090b6:	4b89      	ldr	r3, [pc, #548]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	4a88      	ldr	r2, [pc, #544]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090c2:	e015      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3304      	adds	r3, #4
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f001 fa34 	bl	800a538 <RCCEx_PLLSAI1_Config>
 80090d0:	4603      	mov	r3, r0
 80090d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090d4:	e00c      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3320      	adds	r3, #32
 80090da:	2100      	movs	r1, #0
 80090dc:	4618      	mov	r0, r3
 80090de:	f001 fb1f 	bl	800a720 <RCCEx_PLLSAI2_Config>
 80090e2:	4603      	mov	r3, r0
 80090e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090e6:	e003      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	74fb      	strb	r3, [r7, #19]
      break;
 80090ec:	e000      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80090ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f0:	7cfb      	ldrb	r3, [r7, #19]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10b      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090f6:	4b79      	ldr	r3, [pc, #484]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009104:	4975      	ldr	r1, [pc, #468]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009106:	4313      	orrs	r3, r2
 8009108:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800910c:	e001      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	7cfb      	ldrb	r3, [r7, #19]
 8009110:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d047      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009126:	d030      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800912c:	d82a      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800912e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009132:	d02a      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009138:	d824      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800913a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800913e:	d008      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009144:	d81e      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800914a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800914e:	d010      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009150:	e018      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009152:	4b62      	ldr	r3, [pc, #392]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	4a61      	ldr	r2, [pc, #388]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800915c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800915e:	e015      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f001 f9e6 	bl	800a538 <RCCEx_PLLSAI1_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009170:	e00c      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3320      	adds	r3, #32
 8009176:	2100      	movs	r1, #0
 8009178:	4618      	mov	r0, r3
 800917a:	f001 fad1 	bl	800a720 <RCCEx_PLLSAI2_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009182:	e003      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	74fb      	strb	r3, [r7, #19]
      break;
 8009188:	e000      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800918a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800918c:	7cfb      	ldrb	r3, [r7, #19]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10b      	bne.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009192:	4b52      	ldr	r3, [pc, #328]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a0:	494e      	ldr	r1, [pc, #312]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80091a8:	e001      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091aa:	7cfb      	ldrb	r3, [r7, #19]
 80091ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 809f 	beq.w	80092fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091bc:	2300      	movs	r3, #0
 80091be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80091c0:	4b46      	ldr	r3, [pc, #280]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80091d0:	2300      	movs	r3, #0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00d      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d6:	4b41      	ldr	r3, [pc, #260]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091da:	4a40      	ldr	r2, [pc, #256]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e0:	6593      	str	r3, [r2, #88]	; 0x58
 80091e2:	4b3e      	ldr	r3, [pc, #248]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ea:	60bb      	str	r3, [r7, #8]
 80091ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091ee:	2301      	movs	r3, #1
 80091f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091f2:	4b3b      	ldr	r3, [pc, #236]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a3a      	ldr	r2, [pc, #232]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80091f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091fe:	f7fc fe29 	bl	8005e54 <HAL_GetTick>
 8009202:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009204:	e009      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009206:	f7fc fe25 	bl	8005e54 <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d902      	bls.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	74fb      	strb	r3, [r7, #19]
        break;
 8009218:	e005      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800921a:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0ef      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009226:	7cfb      	ldrb	r3, [r7, #19]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d15b      	bne.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800922c:	4b2b      	ldr	r3, [pc, #172]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800922e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009236:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d01f      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	429a      	cmp	r2, r3
 8009248:	d019      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800924a:	4b24      	ldr	r3, [pc, #144]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009254:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009256:	4b21      	ldr	r3, [pc, #132]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925c:	4a1f      	ldr	r2, [pc, #124]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800925e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800926c:	4a1b      	ldr	r2, [pc, #108]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800926e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009276:	4a19      	ldr	r2, [pc, #100]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d016      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009288:	f7fc fde4 	bl	8005e54 <HAL_GetTick>
 800928c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800928e:	e00b      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009290:	f7fc fde0 	bl	8005e54 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	f241 3288 	movw	r2, #5000	; 0x1388
 800929e:	4293      	cmp	r3, r2
 80092a0:	d902      	bls.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	74fb      	strb	r3, [r7, #19]
            break;
 80092a6:	e006      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0ec      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80092b6:	7cfb      	ldrb	r3, [r7, #19]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10c      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092bc:	4b07      	ldr	r3, [pc, #28]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092cc:	4903      	ldr	r1, [pc, #12]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80092d4:	e008      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092d6:	7cfb      	ldrb	r3, [r7, #19]
 80092d8:	74bb      	strb	r3, [r7, #18]
 80092da:	e005      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80092dc:	40021000 	.word	0x40021000
 80092e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e4:	7cfb      	ldrb	r3, [r7, #19]
 80092e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092e8:	7c7b      	ldrb	r3, [r7, #17]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d105      	bne.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092ee:	4ba0      	ldr	r3, [pc, #640]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f2:	4a9f      	ldr	r2, [pc, #636]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009306:	4b9a      	ldr	r3, [pc, #616]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930c:	f023 0203 	bic.w	r2, r3, #3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009314:	4996      	ldr	r1, [pc, #600]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009316:	4313      	orrs	r3, r2
 8009318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009328:	4b91      	ldr	r3, [pc, #580]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800932a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932e:	f023 020c 	bic.w	r2, r3, #12
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	498e      	ldr	r1, [pc, #568]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009338:	4313      	orrs	r3, r2
 800933a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800934a:	4b89      	ldr	r3, [pc, #548]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800934c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009350:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009358:	4985      	ldr	r1, [pc, #532]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800935a:	4313      	orrs	r3, r2
 800935c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00a      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800936c:	4b80      	ldr	r3, [pc, #512]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800936e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937a:	497d      	ldr	r1, [pc, #500]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800937c:	4313      	orrs	r3, r2
 800937e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800938e:	4b78      	ldr	r3, [pc, #480]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800939c:	4974      	ldr	r1, [pc, #464]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093b0:	4b6f      	ldr	r3, [pc, #444]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093be:	496c      	ldr	r1, [pc, #432]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093d2:	4b67      	ldr	r3, [pc, #412]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e0:	4963      	ldr	r1, [pc, #396]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093f4:	4b5e      	ldr	r3, [pc, #376]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009402:	495b      	ldr	r1, [pc, #364]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009416:	4b56      	ldr	r3, [pc, #344]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009424:	4952      	ldr	r1, [pc, #328]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009438:	4b4d      	ldr	r3, [pc, #308]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009446:	494a      	ldr	r1, [pc, #296]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009448:	4313      	orrs	r3, r2
 800944a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800945a:	4b45      	ldr	r3, [pc, #276]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800945c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009468:	4941      	ldr	r1, [pc, #260]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00a      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800947c:	4b3c      	ldr	r3, [pc, #240]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800947e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009482:	f023 0203 	bic.w	r2, r3, #3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800948a:	4939      	ldr	r1, [pc, #228]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800948c:	4313      	orrs	r3, r2
 800948e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d028      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800949e:	4b34      	ldr	r3, [pc, #208]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ac:	4930      	ldr	r1, [pc, #192]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094bc:	d106      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094be:	4b2c      	ldr	r3, [pc, #176]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	4a2b      	ldr	r2, [pc, #172]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094c8:	60d3      	str	r3, [r2, #12]
 80094ca:	e011      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094d4:	d10c      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3304      	adds	r3, #4
 80094da:	2101      	movs	r1, #1
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 f82b 	bl	800a538 <RCCEx_PLLSAI1_Config>
 80094e2:	4603      	mov	r3, r0
 80094e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80094e6:	7cfb      	ldrb	r3, [r7, #19]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80094ec:	7cfb      	ldrb	r3, [r7, #19]
 80094ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d04d      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009504:	d108      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009506:	4b1a      	ldr	r3, [pc, #104]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009508:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800950c:	4a18      	ldr	r2, [pc, #96]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800950e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009512:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009516:	e012      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009518:	4b15      	ldr	r3, [pc, #84]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800951a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800951e:	4a14      	ldr	r2, [pc, #80]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009524:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009528:	4b11      	ldr	r3, [pc, #68]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800952a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009536:	490e      	ldr	r1, [pc, #56]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009538:	4313      	orrs	r3, r2
 800953a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009546:	d106      	bne.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009548:	4b09      	ldr	r3, [pc, #36]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	4a08      	ldr	r2, [pc, #32]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800954e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009552:	60d3      	str	r3, [r2, #12]
 8009554:	e020      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800955a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800955e:	d109      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009560:	4b03      	ldr	r3, [pc, #12]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	4a02      	ldr	r2, [pc, #8]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800956a:	60d3      	str	r3, [r2, #12]
 800956c:	e014      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800956e:	bf00      	nop
 8009570:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800957c:	d10c      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3304      	adds	r3, #4
 8009582:	2101      	movs	r1, #1
 8009584:	4618      	mov	r0, r3
 8009586:	f000 ffd7 	bl	800a538 <RCCEx_PLLSAI1_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800958e:	7cfb      	ldrb	r3, [r7, #19]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009594:	7cfb      	ldrb	r3, [r7, #19]
 8009596:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d028      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095a4:	4b4a      	ldr	r3, [pc, #296]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b2:	4947      	ldr	r1, [pc, #284]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095c2:	d106      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095c4:	4b42      	ldr	r3, [pc, #264]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4a41      	ldr	r2, [pc, #260]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095ce:	60d3      	str	r3, [r2, #12]
 80095d0:	e011      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095da:	d10c      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3304      	adds	r3, #4
 80095e0:	2101      	movs	r1, #1
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 ffa8 	bl	800a538 <RCCEx_PLLSAI1_Config>
 80095e8:	4603      	mov	r3, r0
 80095ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095ec:	7cfb      	ldrb	r3, [r7, #19]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80095f2:	7cfb      	ldrb	r3, [r7, #19]
 80095f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d01e      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009602:	4b33      	ldr	r3, [pc, #204]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009608:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009612:	492f      	ldr	r1, [pc, #188]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009614:	4313      	orrs	r3, r2
 8009616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009624:	d10c      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3304      	adds	r3, #4
 800962a:	2102      	movs	r1, #2
 800962c:	4618      	mov	r0, r3
 800962e:	f000 ff83 	bl	800a538 <RCCEx_PLLSAI1_Config>
 8009632:	4603      	mov	r3, r0
 8009634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009636:	7cfb      	ldrb	r3, [r7, #19]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800963c:	7cfb      	ldrb	r3, [r7, #19]
 800963e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800964c:	4b20      	ldr	r3, [pc, #128]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800964e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009652:	f023 0204 	bic.w	r2, r3, #4
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800965c:	491c      	ldr	r1, [pc, #112]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800965e:	4313      	orrs	r3, r2
 8009660:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009670:	4b17      	ldr	r3, [pc, #92]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009676:	f023 0218 	bic.w	r2, r3, #24
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009680:	4913      	ldr	r1, [pc, #76]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009682:	4313      	orrs	r3, r2
 8009684:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d017      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009694:	4b0e      	ldr	r3, [pc, #56]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800969a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a4:	490a      	ldr	r1, [pc, #40]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096b6:	d105      	bne.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096b8:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	4a04      	ldr	r2, [pc, #16]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80096c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	40021000 	.word	0x40021000

080096d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e6:	d13e      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80096e8:	4bb6      	ldr	r3, [pc, #728]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80096ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096f2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096fa:	d028      	beq.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009702:	f200 86f4 	bhi.w	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800970c:	d005      	beq.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009714:	d00e      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009716:	f000 beea 	b.w	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800971a:	4baa      	ldr	r3, [pc, #680]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800971c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b02      	cmp	r3, #2
 8009726:	f040 86e4 	bne.w	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800972a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800972e:	61fb      	str	r3, [r7, #28]
      break;
 8009730:	f000 bedf 	b.w	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009734:	4ba3      	ldr	r3, [pc, #652]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b02      	cmp	r3, #2
 8009740:	f040 86d9 	bne.w	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8009744:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009748:	61fb      	str	r3, [r7, #28]
      break;
 800974a:	f000 bed4 	b.w	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800974e:	4b9d      	ldr	r3, [pc, #628]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800975a:	f040 86ce 	bne.w	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800975e:	4b9a      	ldr	r3, [pc, #616]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009760:	61fb      	str	r3, [r7, #28]
      break;
 8009762:	f000 beca 	b.w	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009766:	4b97      	ldr	r3, [pc, #604]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	2b03      	cmp	r3, #3
 8009774:	d036      	beq.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d840      	bhi.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d003      	beq.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d020      	beq.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009788:	e039      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800978a:	4b8e      	ldr	r3, [pc, #568]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b02      	cmp	r3, #2
 8009794:	d116      	bne.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009796:	4b8b      	ldr	r3, [pc, #556]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d005      	beq.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80097a2:	4b88      	ldr	r3, [pc, #544]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	091b      	lsrs	r3, r3, #4
 80097a8:	f003 030f 	and.w	r3, r3, #15
 80097ac:	e005      	b.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80097ae:	4b85      	ldr	r3, [pc, #532]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80097b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097b4:	0a1b      	lsrs	r3, r3, #8
 80097b6:	f003 030f 	and.w	r3, r3, #15
 80097ba:	4a84      	ldr	r2, [pc, #528]	; (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80097bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80097c2:	e01f      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	61bb      	str	r3, [r7, #24]
      break;
 80097c8:	e01c      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097ca:	4b7e      	ldr	r3, [pc, #504]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097d6:	d102      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80097d8:	4b7d      	ldr	r3, [pc, #500]	; (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80097da:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80097dc:	e012      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	61bb      	str	r3, [r7, #24]
      break;
 80097e2:	e00f      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097e4:	4b77      	ldr	r3, [pc, #476]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097f0:	d102      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80097f2:	4b78      	ldr	r3, [pc, #480]	; (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80097f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80097f6:	e005      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61bb      	str	r3, [r7, #24]
      break;
 80097fc:	e002      	b.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	61bb      	str	r3, [r7, #24]
      break;
 8009802:	bf00      	nop
    }

    switch(PeriphClk)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800980a:	f000 8606 	beq.w	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009814:	f200 8673 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800981e:	f000 8469 	beq.w	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009828:	f200 8669 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009832:	f000 8531 	beq.w	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800983c:	f200 865f 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009846:	f000 8187 	beq.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009850:	f200 8655 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800985a:	f000 80cd 	beq.w	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009864:	f200 864b 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800986e:	f000 8430 	beq.w	800a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009878:	f200 8641 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009882:	f000 83e4 	beq.w	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800988c:	f200 8637 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009896:	f000 80af 	beq.w	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a0:	f200 862d 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098aa:	f000 809d 	beq.w	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b4:	f200 8623 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098be:	f000 808b 	beq.w	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098c8:	f200 8619 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098d2:	f000 8554 	beq.w	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098dc:	f200 860f 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098e6:	f000 8500 	beq.w	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098f0:	f200 8605 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098fa:	f000 84a1 	beq.w	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009904:	f200 85fb 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b80      	cmp	r3, #128	; 0x80
 800990c:	f000 846c 	beq.w	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b80      	cmp	r3, #128	; 0x80
 8009914:	f200 85f3 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b20      	cmp	r3, #32
 800991c:	d84c      	bhi.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 85ec 	beq.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3b01      	subs	r3, #1
 800992a:	2b1f      	cmp	r3, #31
 800992c:	f200 85e7 	bhi.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009930:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	08009d4d 	.word	0x08009d4d
 800993c:	08009dbb 	.word	0x08009dbb
 8009940:	0800a4ff 	.word	0x0800a4ff
 8009944:	08009e4f 	.word	0x08009e4f
 8009948:	0800a4ff 	.word	0x0800a4ff
 800994c:	0800a4ff 	.word	0x0800a4ff
 8009950:	0800a4ff 	.word	0x0800a4ff
 8009954:	08009ec7 	.word	0x08009ec7
 8009958:	0800a4ff 	.word	0x0800a4ff
 800995c:	0800a4ff 	.word	0x0800a4ff
 8009960:	0800a4ff 	.word	0x0800a4ff
 8009964:	0800a4ff 	.word	0x0800a4ff
 8009968:	0800a4ff 	.word	0x0800a4ff
 800996c:	0800a4ff 	.word	0x0800a4ff
 8009970:	0800a4ff 	.word	0x0800a4ff
 8009974:	08009f4b 	.word	0x08009f4b
 8009978:	0800a4ff 	.word	0x0800a4ff
 800997c:	0800a4ff 	.word	0x0800a4ff
 8009980:	0800a4ff 	.word	0x0800a4ff
 8009984:	0800a4ff 	.word	0x0800a4ff
 8009988:	0800a4ff 	.word	0x0800a4ff
 800998c:	0800a4ff 	.word	0x0800a4ff
 8009990:	0800a4ff 	.word	0x0800a4ff
 8009994:	0800a4ff 	.word	0x0800a4ff
 8009998:	0800a4ff 	.word	0x0800a4ff
 800999c:	0800a4ff 	.word	0x0800a4ff
 80099a0:	0800a4ff 	.word	0x0800a4ff
 80099a4:	0800a4ff 	.word	0x0800a4ff
 80099a8:	0800a4ff 	.word	0x0800a4ff
 80099ac:	0800a4ff 	.word	0x0800a4ff
 80099b0:	0800a4ff 	.word	0x0800a4ff
 80099b4:	08009fcd 	.word	0x08009fcd
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	f000 83e8 	beq.w	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80099c0:	f000 bd9d 	b.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80099c4:	40021000 	.word	0x40021000
 80099c8:	0003d090 	.word	0x0003d090
 80099cc:	08016368 	.word	0x08016368
 80099d0:	00f42400 	.word	0x00f42400
 80099d4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80099d8:	69b9      	ldr	r1, [r7, #24]
 80099da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80099de:	f000 ff93 	bl	800a908 <RCCEx_GetSAIxPeriphCLKFreq>
 80099e2:	61f8      	str	r0, [r7, #28]
      break;
 80099e4:	f000 bd8e 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80099e8:	69b9      	ldr	r1, [r7, #24]
 80099ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80099ee:	f000 ff8b 	bl	800a908 <RCCEx_GetSAIxPeriphCLKFreq>
 80099f2:	61f8      	str	r0, [r7, #28]
      break;
 80099f4:	f000 bd86 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80099f8:	4b9a      	ldr	r3, [pc, #616]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80099fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009a0a:	d015      	beq.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009a12:	f200 8092 	bhi.w	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a1c:	d029      	beq.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a24:	f200 8089 	bhi.w	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d07b      	beq.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a34:	d04a      	beq.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8009a36:	e080      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009a38:	4b8a      	ldr	r3, [pc, #552]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d17d      	bne.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009a44:	4b87      	ldr	r3, [pc, #540]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0308 	and.w	r3, r3, #8
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d005      	beq.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8009a50:	4b84      	ldr	r3, [pc, #528]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	091b      	lsrs	r3, r3, #4
 8009a56:	f003 030f 	and.w	r3, r3, #15
 8009a5a:	e005      	b.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8009a5c:	4b81      	ldr	r3, [pc, #516]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a62:	0a1b      	lsrs	r3, r3, #8
 8009a64:	f003 030f 	and.w	r3, r3, #15
 8009a68:	4a7f      	ldr	r2, [pc, #508]	; (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a6e:	61fb      	str	r3, [r7, #28]
          break;
 8009a70:	e066      	b.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009a72:	4b7c      	ldr	r3, [pc, #496]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a7e:	d162      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009a80:	4b78      	ldr	r3, [pc, #480]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a8c:	d15b      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009a8e:	4b75      	ldr	r3, [pc, #468]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	0a1b      	lsrs	r3, r3, #8
 8009a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a98:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	fb03 f202 	mul.w	r2, r3, r2
 8009aa2:	4b70      	ldr	r3, [pc, #448]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	091b      	lsrs	r3, r3, #4
 8009aa8:	f003 030f 	and.w	r3, r3, #15
 8009aac:	3301      	adds	r3, #1
 8009aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009ab4:	4b6b      	ldr	r3, [pc, #428]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	0d5b      	lsrs	r3, r3, #21
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	3301      	adds	r3, #1
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac8:	61fb      	str	r3, [r7, #28]
          break;
 8009aca:	e03c      	b.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009acc:	4b65      	ldr	r3, [pc, #404]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ad8:	d138      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009ada:	4b62      	ldr	r3, [pc, #392]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ae6:	d131      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009ae8:	4b5e      	ldr	r3, [pc, #376]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	0a1b      	lsrs	r3, r3, #8
 8009aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	fb03 f202 	mul.w	r2, r3, r2
 8009afc:	4b59      	ldr	r3, [pc, #356]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	091b      	lsrs	r3, r3, #4
 8009b02:	f003 030f 	and.w	r3, r3, #15
 8009b06:	3301      	adds	r3, #1
 8009b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009b0e:	4b55      	ldr	r3, [pc, #340]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	0d5b      	lsrs	r3, r3, #21
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	3301      	adds	r3, #1
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b22:	61fb      	str	r3, [r7, #28]
          break;
 8009b24:	e012      	b.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009b26:	4b4f      	ldr	r3, [pc, #316]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d10e      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8009b34:	4b4d      	ldr	r3, [pc, #308]	; (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009b36:	61fb      	str	r3, [r7, #28]
          break;
 8009b38:	e00b      	b.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8009b3a:	bf00      	nop
 8009b3c:	f000 bce2 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009b40:	bf00      	nop
 8009b42:	f000 bcdf 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009b46:	bf00      	nop
 8009b48:	f000 bcdc 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009b4c:	bf00      	nop
 8009b4e:	f000 bcd9 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009b52:	bf00      	nop
        break;
 8009b54:	f000 bcd6 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8009b58:	4b42      	ldr	r3, [pc, #264]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b66:	d13d      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009b68:	4b3e      	ldr	r3, [pc, #248]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b74:	f040 84c5 	bne.w	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8009b78:	4b3a      	ldr	r3, [pc, #232]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b84:	f040 84bd 	bne.w	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009b88:	4b36      	ldr	r3, [pc, #216]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	0a1b      	lsrs	r3, r3, #8
 8009b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b92:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	fb03 f202 	mul.w	r2, r3, r2
 8009b9c:	4b31      	ldr	r3, [pc, #196]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	091b      	lsrs	r3, r3, #4
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bac:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009bae:	4b2d      	ldr	r3, [pc, #180]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	0edb      	lsrs	r3, r3, #27
 8009bb4:	f003 031f 	and.w	r3, r3, #31
 8009bb8:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009bc0:	4b28      	ldr	r3, [pc, #160]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8009bcc:	2311      	movs	r3, #17
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	e001      	b.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8009bd2:	2307      	movs	r3, #7
 8009bd4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bde:	61fb      	str	r3, [r7, #28]
      break;
 8009be0:	f000 bc8f 	b.w	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009be4:	4b1f      	ldr	r3, [pc, #124]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bea:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009bf6:	d016      	beq.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009bfe:	f200 809b 	bhi.w	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c08:	d032      	beq.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c10:	f200 8092 	bhi.w	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 8084 	beq.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c22:	d052      	beq.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8009c24:	e088      	b.n	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009c26:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	f040 8084 	bne.w	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009c34:	4b0b      	ldr	r3, [pc, #44]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0308 	and.w	r3, r3, #8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009c40:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	091b      	lsrs	r3, r3, #4
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	e005      	b.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c52:	0a1b      	lsrs	r3, r3, #8
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	4a03      	ldr	r2, [pc, #12]	; (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c5e:	61fb      	str	r3, [r7, #28]
          break;
 8009c60:	e06c      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8009c62:	bf00      	nop
 8009c64:	40021000 	.word	0x40021000
 8009c68:	08016368 	.word	0x08016368
 8009c6c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009c70:	4ba5      	ldr	r3, [pc, #660]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c7c:	d160      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009c7e:	4ba2      	ldr	r3, [pc, #648]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c8a:	d159      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009c8c:	4b9e      	ldr	r3, [pc, #632]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	0a1b      	lsrs	r3, r3, #8
 8009c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c96:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	fb03 f202 	mul.w	r2, r3, r2
 8009ca0:	4b99      	ldr	r3, [pc, #612]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	091b      	lsrs	r3, r3, #4
 8009ca6:	f003 030f 	and.w	r3, r3, #15
 8009caa:	3301      	adds	r3, #1
 8009cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009cb2:	4b95      	ldr	r3, [pc, #596]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	0d5b      	lsrs	r3, r3, #21
 8009cb8:	f003 0303 	and.w	r3, r3, #3
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	69ba      	ldr	r2, [r7, #24]
 8009cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc6:	61fb      	str	r3, [r7, #28]
          break;
 8009cc8:	e03a      	b.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009cca:	4b8f      	ldr	r3, [pc, #572]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cd6:	d135      	bne.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009cd8:	4b8b      	ldr	r3, [pc, #556]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce4:	d12e      	bne.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009ce6:	4b88      	ldr	r3, [pc, #544]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	0a1b      	lsrs	r3, r3, #8
 8009cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	fb03 f202 	mul.w	r2, r3, r2
 8009cfa:	4b83      	ldr	r3, [pc, #524]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	091b      	lsrs	r3, r3, #4
 8009d00:	f003 030f 	and.w	r3, r3, #15
 8009d04:	3301      	adds	r3, #1
 8009d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d0a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009d0c:	4b7e      	ldr	r3, [pc, #504]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	0d5b      	lsrs	r3, r3, #21
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	3301      	adds	r3, #1
 8009d18:	005b      	lsls	r3, r3, #1
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d20:	61fb      	str	r3, [r7, #28]
          break;
 8009d22:	e00f      	b.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009d24:	4b78      	ldr	r3, [pc, #480]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d10a      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8009d32:	4b76      	ldr	r3, [pc, #472]	; (8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009d34:	61fb      	str	r3, [r7, #28]
          break;
 8009d36:	e007      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8009d38:	bf00      	nop
 8009d3a:	e3e2      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8009d3c:	bf00      	nop
 8009d3e:	e3e0      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8009d40:	bf00      	nop
 8009d42:	e3de      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8009d44:	bf00      	nop
 8009d46:	e3dc      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8009d48:	bf00      	nop
      break;
 8009d4a:	e3da      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009d4c:	4b6e      	ldr	r3, [pc, #440]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d52:	f003 0303 	and.w	r3, r3, #3
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d827      	bhi.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009d5e:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009d75 	.word	0x08009d75
 8009d68:	08009d7d 	.word	0x08009d7d
 8009d6c:	08009d85 	.word	0x08009d85
 8009d70:	08009d99 	.word	0x08009d99
          frequency = HAL_RCC_GetPCLK2Freq();
 8009d74:	f7ff f8a8 	bl	8008ec8 <HAL_RCC_GetPCLK2Freq>
 8009d78:	61f8      	str	r0, [r7, #28]
          break;
 8009d7a:	e01d      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8009d7c:	f7fe fff6 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 8009d80:	61f8      	str	r0, [r7, #28]
          break;
 8009d82:	e019      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d84:	4b60      	ldr	r3, [pc, #384]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d90:	d10f      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8009d92:	4b5f      	ldr	r3, [pc, #380]	; (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009d94:	61fb      	str	r3, [r7, #28]
          break;
 8009d96:	e00c      	b.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009d98:	4b5b      	ldr	r3, [pc, #364]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d107      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8009da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009daa:	61fb      	str	r3, [r7, #28]
          break;
 8009dac:	e003      	b.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8009dae:	bf00      	nop
 8009db0:	e3a8      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009db2:	bf00      	nop
 8009db4:	e3a6      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009db6:	bf00      	nop
        break;
 8009db8:	e3a4      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009dba:	4b53      	ldr	r3, [pc, #332]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc0:	f003 030c 	and.w	r3, r3, #12
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2b0c      	cmp	r3, #12
 8009dca:	d83a      	bhi.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009dcc:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009e09 	.word	0x08009e09
 8009dd8:	08009e43 	.word	0x08009e43
 8009ddc:	08009e43 	.word	0x08009e43
 8009de0:	08009e43 	.word	0x08009e43
 8009de4:	08009e11 	.word	0x08009e11
 8009de8:	08009e43 	.word	0x08009e43
 8009dec:	08009e43 	.word	0x08009e43
 8009df0:	08009e43 	.word	0x08009e43
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e43 	.word	0x08009e43
 8009dfc:	08009e43 	.word	0x08009e43
 8009e00:	08009e43 	.word	0x08009e43
 8009e04:	08009e2d 	.word	0x08009e2d
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e08:	f7ff f848 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 8009e0c:	61f8      	str	r0, [r7, #28]
          break;
 8009e0e:	e01d      	b.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8009e10:	f7fe ffac 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 8009e14:	61f8      	str	r0, [r7, #28]
          break;
 8009e16:	e019      	b.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e18:	4b3b      	ldr	r3, [pc, #236]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e24:	d10f      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8009e26:	4b3a      	ldr	r3, [pc, #232]	; (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009e28:	61fb      	str	r3, [r7, #28]
          break;
 8009e2a:	e00c      	b.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009e2c:	4b36      	ldr	r3, [pc, #216]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d107      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8009e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e3e:	61fb      	str	r3, [r7, #28]
          break;
 8009e40:	e003      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8009e42:	bf00      	nop
 8009e44:	e35e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009e46:	bf00      	nop
 8009e48:	e35c      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009e4a:	bf00      	nop
        break;
 8009e4c:	e35a      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009e4e:	4b2e      	ldr	r3, [pc, #184]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b30      	cmp	r3, #48	; 0x30
 8009e5e:	d021      	beq.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b30      	cmp	r3, #48	; 0x30
 8009e64:	d829      	bhi.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	d011      	beq.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d823      	bhi.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d004      	beq.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8009e7e:	e01c      	b.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e80:	f7ff f80c 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 8009e84:	61f8      	str	r0, [r7, #28]
          break;
 8009e86:	e01d      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009e88:	f7fe ff70 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 8009e8c:	61f8      	str	r0, [r7, #28]
          break;
 8009e8e:	e019      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e90:	4b1d      	ldr	r3, [pc, #116]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e9c:	d10f      	bne.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8009e9e:	4b1c      	ldr	r3, [pc, #112]	; (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009ea0:	61fb      	str	r3, [r7, #28]
          break;
 8009ea2:	e00c      	b.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009ea4:	4b18      	ldr	r3, [pc, #96]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eaa:	f003 0302 	and.w	r3, r3, #2
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8009eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eb6:	61fb      	str	r3, [r7, #28]
          break;
 8009eb8:	e003      	b.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8009eba:	bf00      	nop
 8009ebc:	e322      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009ebe:	bf00      	nop
 8009ec0:	e320      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009ec2:	bf00      	nop
        break;
 8009ec4:	e31e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009ec6:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ecc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2bc0      	cmp	r3, #192	; 0xc0
 8009ed6:	d027      	beq.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2bc0      	cmp	r3, #192	; 0xc0
 8009edc:	d82f      	bhi.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b80      	cmp	r3, #128	; 0x80
 8009ee2:	d017      	beq.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b80      	cmp	r3, #128	; 0x80
 8009ee8:	d829      	bhi.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b40      	cmp	r3, #64	; 0x40
 8009ef4:	d004      	beq.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8009ef6:	e022      	b.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009ef8:	f7fe ffd0 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 8009efc:	61f8      	str	r0, [r7, #28]
          break;
 8009efe:	e023      	b.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f00:	f7fe ff34 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 8009f04:	61f8      	str	r0, [r7, #28]
          break;
 8009f06:	e01f      	b.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8009f08:	40021000 	.word	0x40021000
 8009f0c:	02dc6c00 	.word	0x02dc6c00
 8009f10:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f14:	4b9b      	ldr	r3, [pc, #620]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f20:	d10f      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8009f22:	4b99      	ldr	r3, [pc, #612]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8009f24:	61fb      	str	r3, [r7, #28]
          break;
 8009f26:	e00c      	b.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f28:	4b96      	ldr	r3, [pc, #600]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d107      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8009f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f3a:	61fb      	str	r3, [r7, #28]
          break;
 8009f3c:	e003      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8009f3e:	bf00      	nop
 8009f40:	e2e0      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009f42:	bf00      	nop
 8009f44:	e2de      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009f46:	bf00      	nop
        break;
 8009f48:	e2dc      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009f4a:	4b8e      	ldr	r3, [pc, #568]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f5c:	d025      	beq.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f64:	d82c      	bhi.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f6c:	d013      	beq.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f74:	d824      	bhi.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f82:	d004      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8009f84:	e01c      	b.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f86:	f7fe ff89 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 8009f8a:	61f8      	str	r0, [r7, #28]
          break;
 8009f8c:	e01d      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f8e:	f7fe feed 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 8009f92:	61f8      	str	r0, [r7, #28]
          break;
 8009f94:	e019      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f96:	4b7b      	ldr	r3, [pc, #492]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa2:	d10f      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8009fa4:	4b78      	ldr	r3, [pc, #480]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8009fa6:	61fb      	str	r3, [r7, #28]
          break;
 8009fa8:	e00c      	b.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009faa:	4b76      	ldr	r3, [pc, #472]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d107      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8009fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fbc:	61fb      	str	r3, [r7, #28]
          break;
 8009fbe:	e003      	b.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8009fc0:	bf00      	nop
 8009fc2:	e29f      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009fc4:	bf00      	nop
 8009fc6:	e29d      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009fc8:	bf00      	nop
        break;
 8009fca:	e29b      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009fcc:	4b6d      	ldr	r3, [pc, #436]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fde:	d025      	beq.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fe6:	d82c      	bhi.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fee:	d013      	beq.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ff6:	d824      	bhi.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d004      	beq.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a004:	d004      	beq.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800a006:	e01c      	b.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a008:	f7fe ff48 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800a00c:	61f8      	str	r0, [r7, #28]
          break;
 800a00e:	e01d      	b.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800a010:	f7fe feac 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800a014:	61f8      	str	r0, [r7, #28]
          break;
 800a016:	e019      	b.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a018:	4b5a      	ldr	r3, [pc, #360]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a024:	d10f      	bne.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800a026:	4b58      	ldr	r3, [pc, #352]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a028:	61fb      	str	r3, [r7, #28]
          break;
 800a02a:	e00c      	b.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a02c:	4b55      	ldr	r3, [pc, #340]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b02      	cmp	r3, #2
 800a038:	d107      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800a03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03e:	61fb      	str	r3, [r7, #28]
          break;
 800a040:	e003      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800a042:	bf00      	nop
 800a044:	e25e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a046:	bf00      	nop
 800a048:	e25c      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a04a:	bf00      	nop
        break;
 800a04c:	e25a      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a04e:	4b4d      	ldr	r3, [pc, #308]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a060:	d007      	beq.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a068:	d12f      	bne.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800a06a:	f7fe fe7f 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800a06e:	61f8      	str	r0, [r7, #28]
          break;
 800a070:	e02e      	b.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a072:	4b44      	ldr	r3, [pc, #272]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a07a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a07e:	d126      	bne.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800a080:	4b40      	ldr	r3, [pc, #256]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d020      	beq.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a08c:	4b3d      	ldr	r3, [pc, #244]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	0a1b      	lsrs	r3, r3, #8
 800a092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a096:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	fb03 f202 	mul.w	r2, r3, r2
 800a0a0:	4b38      	ldr	r3, [pc, #224]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	091b      	lsrs	r3, r3, #4
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a0b2:	4b34      	ldr	r3, [pc, #208]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	0e5b      	lsrs	r3, r3, #25
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	3301      	adds	r3, #1
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c6:	61fb      	str	r3, [r7, #28]
          break;
 800a0c8:	e001      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800a0ca:	bf00      	nop
 800a0cc:	e21a      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a0ce:	bf00      	nop
        break;
 800a0d0:	e218      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a0d2:	4b2c      	ldr	r3, [pc, #176]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a0d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d103      	bne.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a0e4:	f7fe fef0 	bl	8008ec8 <HAL_RCC_GetPCLK2Freq>
 800a0e8:	61f8      	str	r0, [r7, #28]
        break;
 800a0ea:	e20b      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800a0ec:	f7fe fe3e 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800a0f0:	61f8      	str	r0, [r7, #28]
        break;
 800a0f2:	e207      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800a0f4:	4b23      	ldr	r3, [pc, #140]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a0f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0fa:	f003 0318 	and.w	r3, r3, #24
 800a0fe:	60fb      	str	r3, [r7, #12]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2b10      	cmp	r3, #16
 800a104:	d010      	beq.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b10      	cmp	r3, #16
 800a10a:	d834      	bhi.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b08      	cmp	r3, #8
 800a116:	d024      	beq.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800a118:	e02d      	b.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a11a:	69b9      	ldr	r1, [r7, #24]
 800a11c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a120:	f000 fbf2 	bl	800a908 <RCCEx_GetSAIxPeriphCLKFreq>
 800a124:	61f8      	str	r0, [r7, #28]
          break;
 800a126:	e02b      	b.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a128:	4b16      	ldr	r3, [pc, #88]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b02      	cmp	r3, #2
 800a132:	d122      	bne.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a134:	4b13      	ldr	r3, [pc, #76]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800a140:	4b10      	ldr	r3, [pc, #64]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	091b      	lsrs	r3, r3, #4
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	e005      	b.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800a14c:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a14e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a152:	0a1b      	lsrs	r3, r3, #8
 800a154:	f003 030f 	and.w	r3, r3, #15
 800a158:	4a0c      	ldr	r2, [pc, #48]	; (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800a15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a15e:	61fb      	str	r3, [r7, #28]
          break;
 800a160:	e00b      	b.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a162:	4b08      	ldr	r3, [pc, #32]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a16a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a16e:	d106      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a172:	61fb      	str	r3, [r7, #28]
          break;
 800a174:	e003      	b.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800a176:	bf00      	nop
 800a178:	e1c4      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a17a:	bf00      	nop
 800a17c:	e1c2      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a17e:	bf00      	nop
        break;
 800a180:	e1c0      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800a182:	bf00      	nop
 800a184:	40021000 	.word	0x40021000
 800a188:	00f42400 	.word	0x00f42400
 800a18c:	08016368 	.word	0x08016368
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a190:	4b96      	ldr	r3, [pc, #600]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a196:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1a2:	d013      	beq.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1aa:	d819      	bhi.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b8:	d004      	beq.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800a1ba:	e011      	b.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1bc:	f7fe fe6e 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800a1c0:	61f8      	str	r0, [r7, #28]
          break;
 800a1c2:	e010      	b.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800a1c4:	f7fe fdd2 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800a1c8:	61f8      	str	r0, [r7, #28]
          break;
 800a1ca:	e00c      	b.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1cc:	4b87      	ldr	r3, [pc, #540]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d8:	d104      	bne.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800a1da:	4b85      	ldr	r3, [pc, #532]	; (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a1dc:	61fb      	str	r3, [r7, #28]
          break;
 800a1de:	e001      	b.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800a1e0:	bf00      	nop
 800a1e2:	e18f      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a1e4:	bf00      	nop
        break;
 800a1e6:	e18d      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a1e8:	4b80      	ldr	r3, [pc, #512]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1fa:	d013      	beq.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a202:	d819      	bhi.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a210:	d004      	beq.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800a212:	e011      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a214:	f7fe fe42 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800a218:	61f8      	str	r0, [r7, #28]
          break;
 800a21a:	e010      	b.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800a21c:	f7fe fda6 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800a220:	61f8      	str	r0, [r7, #28]
          break;
 800a222:	e00c      	b.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a224:	4b71      	ldr	r3, [pc, #452]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a22c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a230:	d104      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800a232:	4b6f      	ldr	r3, [pc, #444]	; (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a234:	61fb      	str	r3, [r7, #28]
          break;
 800a236:	e001      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800a238:	bf00      	nop
 800a23a:	e163      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a23c:	bf00      	nop
        break;
 800a23e:	e161      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a240:	4b6a      	ldr	r3, [pc, #424]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a252:	d013      	beq.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a25a:	d819      	bhi.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d004      	beq.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a268:	d004      	beq.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800a26a:	e011      	b.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a26c:	f7fe fe16 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800a270:	61f8      	str	r0, [r7, #28]
          break;
 800a272:	e010      	b.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800a274:	f7fe fd7a 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800a278:	61f8      	str	r0, [r7, #28]
          break;
 800a27a:	e00c      	b.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a27c:	4b5b      	ldr	r3, [pc, #364]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a288:	d104      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800a28a:	4b59      	ldr	r3, [pc, #356]	; (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a28c:	61fb      	str	r3, [r7, #28]
          break;
 800a28e:	e001      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800a290:	bf00      	nop
 800a292:	e137      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a294:	bf00      	nop
        break;
 800a296:	e135      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a298:	4b54      	ldr	r3, [pc, #336]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a29a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a29e:	f003 0303 	and.w	r3, r3, #3
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d011      	beq.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d818      	bhi.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d004      	beq.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800a2bc:	e011      	b.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2be:	f7fe fded 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800a2c2:	61f8      	str	r0, [r7, #28]
          break;
 800a2c4:	e010      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800a2c6:	f7fe fd51 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800a2ca:	61f8      	str	r0, [r7, #28]
          break;
 800a2cc:	e00c      	b.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2ce:	4b47      	ldr	r3, [pc, #284]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2da:	d104      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800a2dc:	4b44      	ldr	r3, [pc, #272]	; (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a2de:	61fb      	str	r3, [r7, #28]
          break;
 800a2e0:	e001      	b.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800a2e2:	bf00      	nop
 800a2e4:	e10e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a2e6:	bf00      	nop
        break;
 800a2e8:	e10c      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a2ea:	4b40      	ldr	r3, [pc, #256]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a2f4:	60fb      	str	r3, [r7, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a2fc:	d02c      	beq.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a304:	d833      	bhi.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a30c:	d01a      	beq.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a314:	d82b      	bhi.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d004      	beq.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a322:	d004      	beq.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800a324:	e023      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a326:	f7fe fdb9 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800a32a:	61f8      	str	r0, [r7, #28]
          break;
 800a32c:	e026      	b.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a32e:	4b2f      	ldr	r3, [pc, #188]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a334:	f003 0302 	and.w	r3, r3, #2
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d11a      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800a33c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a340:	61fb      	str	r3, [r7, #28]
          break;
 800a342:	e016      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a344:	4b29      	ldr	r3, [pc, #164]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a34c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a350:	d111      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800a352:	4b27      	ldr	r3, [pc, #156]	; (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a354:	61fb      	str	r3, [r7, #28]
          break;
 800a356:	e00e      	b.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a358:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b02      	cmp	r3, #2
 800a364:	d109      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800a366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a36a:	61fb      	str	r3, [r7, #28]
          break;
 800a36c:	e005      	b.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800a36e:	bf00      	nop
 800a370:	e0c8      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a372:	bf00      	nop
 800a374:	e0c6      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a376:	bf00      	nop
 800a378:	e0c4      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a37a:	bf00      	nop
        break;
 800a37c:	e0c2      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a37e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a384:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a390:	d030      	beq.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a398:	d837      	bhi.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3a0:	d01a      	beq.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3a8:	d82f      	bhi.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d004      	beq.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3b6:	d004      	beq.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800a3b8:	e027      	b.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3ba:	f7fe fd6f 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800a3be:	61f8      	str	r0, [r7, #28]
          break;
 800a3c0:	e02a      	b.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a3c2:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a3c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d11e      	bne.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800a3d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a3d4:	61fb      	str	r3, [r7, #28]
          break;
 800a3d6:	e01a      	b.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3d8:	4b04      	ldr	r3, [pc, #16]	; (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3e4:	d115      	bne.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800a3e6:	4b02      	ldr	r3, [pc, #8]	; (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a3e8:	61fb      	str	r3, [r7, #28]
          break;
 800a3ea:	e012      	b.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800a3ec:	40021000 	.word	0x40021000
 800a3f0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a3f4:	4b46      	ldr	r3, [pc, #280]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3fa:	f003 0302 	and.w	r3, r3, #2
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d109      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800a402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a406:	61fb      	str	r3, [r7, #28]
          break;
 800a408:	e005      	b.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800a40a:	bf00      	nop
 800a40c:	e07a      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a40e:	bf00      	nop
 800a410:	e078      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a412:	bf00      	nop
 800a414:	e076      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a416:	bf00      	nop
        break;
 800a418:	e074      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a41a:	4b3d      	ldr	r3, [pc, #244]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a41c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a420:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a424:	60fb      	str	r3, [r7, #12]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a42c:	d02c      	beq.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a434:	d855      	bhi.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d004      	beq.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a442:	d004      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800a444:	e04d      	b.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a446:	f7fe fc91 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800a44a:	61f8      	str	r0, [r7, #28]
          break;
 800a44c:	e04e      	b.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a44e:	4b30      	ldr	r3, [pc, #192]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b02      	cmp	r3, #2
 800a458:	d145      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a45a:	4b2d      	ldr	r3, [pc, #180]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 0308 	and.w	r3, r3, #8
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800a466:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	091b      	lsrs	r3, r3, #4
 800a46c:	f003 030f 	and.w	r3, r3, #15
 800a470:	e005      	b.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800a472:	4b27      	ldr	r3, [pc, #156]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a478:	0a1b      	lsrs	r3, r3, #8
 800a47a:	f003 030f 	and.w	r3, r3, #15
 800a47e:	4a25      	ldr	r2, [pc, #148]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800a480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a484:	61fb      	str	r3, [r7, #28]
          break;
 800a486:	e02e      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a488:	4b21      	ldr	r3, [pc, #132]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a494:	d129      	bne.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a496:	4b1e      	ldr	r3, [pc, #120]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a49e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4a2:	d122      	bne.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a4a4:	4b1a      	ldr	r3, [pc, #104]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	0a1b      	lsrs	r3, r3, #8
 800a4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ae:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	fb03 f202 	mul.w	r2, r3, r2
 800a4b8:	4b15      	ldr	r3, [pc, #84]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	091b      	lsrs	r3, r3, #4
 800a4be:	f003 030f 	and.w	r3, r3, #15
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a4ca:	4b11      	ldr	r3, [pc, #68]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	0d5b      	lsrs	r3, r3, #21
 800a4d0:	f003 0303 	and.w	r3, r3, #3
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4de:	61fb      	str	r3, [r7, #28]
          break;
 800a4e0:	e003      	b.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800a4e2:	bf00      	nop
 800a4e4:	e00e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a4e6:	bf00      	nop
 800a4e8:	e00c      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a4ea:	bf00      	nop
        break;
 800a4ec:	e00a      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a4ee:	bf00      	nop
 800a4f0:	e008      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a4f2:	bf00      	nop
 800a4f4:	e006      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a4f6:	bf00      	nop
 800a4f8:	e004      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a4fa:	bf00      	nop
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a4fe:	bf00      	nop
 800a500:	e000      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a502:	bf00      	nop
    }
  }

  return(frequency);
 800a504:	69fb      	ldr	r3, [r7, #28]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3720      	adds	r7, #32
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	40021000 	.word	0x40021000
 800a514:	08016368 	.word	0x08016368

0800a518 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a51c:	4b05      	ldr	r3, [pc, #20]	; (800a534 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a04      	ldr	r2, [pc, #16]	; (800a534 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a522:	f043 0304 	orr.w	r3, r3, #4
 800a526:	6013      	str	r3, [r2, #0]
}
 800a528:	bf00      	nop
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	40021000 	.word	0x40021000

0800a538 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a546:	4b72      	ldr	r3, [pc, #456]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00e      	beq.n	800a570 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a552:	4b6f      	ldr	r3, [pc, #444]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f003 0203 	and.w	r2, r3, #3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d103      	bne.n	800a56a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
       ||
 800a566:	2b00      	cmp	r3, #0
 800a568:	d142      	bne.n	800a5f0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	73fb      	strb	r3, [r7, #15]
 800a56e:	e03f      	b.n	800a5f0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b03      	cmp	r3, #3
 800a576:	d018      	beq.n	800a5aa <RCCEx_PLLSAI1_Config+0x72>
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d825      	bhi.n	800a5c8 <RCCEx_PLLSAI1_Config+0x90>
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d002      	beq.n	800a586 <RCCEx_PLLSAI1_Config+0x4e>
 800a580:	2b02      	cmp	r3, #2
 800a582:	d009      	beq.n	800a598 <RCCEx_PLLSAI1_Config+0x60>
 800a584:	e020      	b.n	800a5c8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a586:	4b62      	ldr	r3, [pc, #392]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d11d      	bne.n	800a5ce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a596:	e01a      	b.n	800a5ce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a598:	4b5d      	ldr	r3, [pc, #372]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d116      	bne.n	800a5d2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5a8:	e013      	b.n	800a5d2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a5aa:	4b59      	ldr	r3, [pc, #356]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10f      	bne.n	800a5d6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a5b6:	4b56      	ldr	r3, [pc, #344]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d109      	bne.n	800a5d6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5c6:	e006      	b.n	800a5d6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a5cc:	e004      	b.n	800a5d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a5ce:	bf00      	nop
 800a5d0:	e002      	b.n	800a5d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a5d2:	bf00      	nop
 800a5d4:	e000      	b.n	800a5d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a5d6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d108      	bne.n	800a5f0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800a5de:	4b4c      	ldr	r3, [pc, #304]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f023 0203 	bic.w	r2, r3, #3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4949      	ldr	r1, [pc, #292]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f040 8086 	bne.w	800a704 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a5f8:	4b45      	ldr	r3, [pc, #276]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a44      	ldr	r2, [pc, #272]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a5fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a604:	f7fb fc26 	bl	8005e54 <HAL_GetTick>
 800a608:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a60a:	e009      	b.n	800a620 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a60c:	f7fb fc22 	bl	8005e54 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	2b02      	cmp	r3, #2
 800a618:	d902      	bls.n	800a620 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	73fb      	strb	r3, [r7, #15]
        break;
 800a61e:	e005      	b.n	800a62c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a620:	4b3b      	ldr	r3, [pc, #236]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1ef      	bne.n	800a60c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d168      	bne.n	800a704 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d113      	bne.n	800a660 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a638:	4b35      	ldr	r3, [pc, #212]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	4b35      	ldr	r3, [pc, #212]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a63e:	4013      	ands	r3, r2
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	6892      	ldr	r2, [r2, #8]
 800a644:	0211      	lsls	r1, r2, #8
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	68d2      	ldr	r2, [r2, #12]
 800a64a:	06d2      	lsls	r2, r2, #27
 800a64c:	4311      	orrs	r1, r2
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6852      	ldr	r2, [r2, #4]
 800a652:	3a01      	subs	r2, #1
 800a654:	0112      	lsls	r2, r2, #4
 800a656:	430a      	orrs	r2, r1
 800a658:	492d      	ldr	r1, [pc, #180]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	610b      	str	r3, [r1, #16]
 800a65e:	e02d      	b.n	800a6bc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d115      	bne.n	800a692 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a666:	4b2a      	ldr	r3, [pc, #168]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a668:	691a      	ldr	r2, [r3, #16]
 800a66a:	4b2b      	ldr	r3, [pc, #172]	; (800a718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	6892      	ldr	r2, [r2, #8]
 800a672:	0211      	lsls	r1, r2, #8
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	6912      	ldr	r2, [r2, #16]
 800a678:	0852      	lsrs	r2, r2, #1
 800a67a:	3a01      	subs	r2, #1
 800a67c:	0552      	lsls	r2, r2, #21
 800a67e:	4311      	orrs	r1, r2
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6852      	ldr	r2, [r2, #4]
 800a684:	3a01      	subs	r2, #1
 800a686:	0112      	lsls	r2, r2, #4
 800a688:	430a      	orrs	r2, r1
 800a68a:	4921      	ldr	r1, [pc, #132]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	610b      	str	r3, [r1, #16]
 800a690:	e014      	b.n	800a6bc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a692:	4b1f      	ldr	r3, [pc, #124]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a694:	691a      	ldr	r2, [r3, #16]
 800a696:	4b21      	ldr	r3, [pc, #132]	; (800a71c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a698:	4013      	ands	r3, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6892      	ldr	r2, [r2, #8]
 800a69e:	0211      	lsls	r1, r2, #8
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	6952      	ldr	r2, [r2, #20]
 800a6a4:	0852      	lsrs	r2, r2, #1
 800a6a6:	3a01      	subs	r2, #1
 800a6a8:	0652      	lsls	r2, r2, #25
 800a6aa:	4311      	orrs	r1, r2
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	6852      	ldr	r2, [r2, #4]
 800a6b0:	3a01      	subs	r2, #1
 800a6b2:	0112      	lsls	r2, r2, #4
 800a6b4:	430a      	orrs	r2, r1
 800a6b6:	4916      	ldr	r1, [pc, #88]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a6bc:	4b14      	ldr	r3, [pc, #80]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a13      	ldr	r2, [pc, #76]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6c8:	f7fb fbc4 	bl	8005e54 <HAL_GetTick>
 800a6cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a6ce:	e009      	b.n	800a6e4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a6d0:	f7fb fbc0 	bl	8005e54 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d902      	bls.n	800a6e4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	73fb      	strb	r3, [r7, #15]
          break;
 800a6e2:	e005      	b.n	800a6f0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a6e4:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0ef      	beq.n	800a6d0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d106      	bne.n	800a704 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a6f6:	4b06      	ldr	r3, [pc, #24]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a6f8:	691a      	ldr	r2, [r3, #16]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	4904      	ldr	r1, [pc, #16]	; (800a710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a700:	4313      	orrs	r3, r2
 800a702:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a704:	7bfb      	ldrb	r3, [r7, #15]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	40021000 	.word	0x40021000
 800a714:	07ff800f 	.word	0x07ff800f
 800a718:	ff9f800f 	.word	0xff9f800f
 800a71c:	f9ff800f 	.word	0xf9ff800f

0800a720 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a72e:	4b72      	ldr	r3, [pc, #456]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00e      	beq.n	800a758 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a73a:	4b6f      	ldr	r3, [pc, #444]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	f003 0203 	and.w	r2, r3, #3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d103      	bne.n	800a752 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
       ||
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d142      	bne.n	800a7d8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	73fb      	strb	r3, [r7, #15]
 800a756:	e03f      	b.n	800a7d8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d018      	beq.n	800a792 <RCCEx_PLLSAI2_Config+0x72>
 800a760:	2b03      	cmp	r3, #3
 800a762:	d825      	bhi.n	800a7b0 <RCCEx_PLLSAI2_Config+0x90>
 800a764:	2b01      	cmp	r3, #1
 800a766:	d002      	beq.n	800a76e <RCCEx_PLLSAI2_Config+0x4e>
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d009      	beq.n	800a780 <RCCEx_PLLSAI2_Config+0x60>
 800a76c:	e020      	b.n	800a7b0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a76e:	4b62      	ldr	r3, [pc, #392]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0302 	and.w	r3, r3, #2
 800a776:	2b00      	cmp	r3, #0
 800a778:	d11d      	bne.n	800a7b6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a77e:	e01a      	b.n	800a7b6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a780:	4b5d      	ldr	r3, [pc, #372]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d116      	bne.n	800a7ba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a790:	e013      	b.n	800a7ba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a792:	4b59      	ldr	r3, [pc, #356]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10f      	bne.n	800a7be <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a79e:	4b56      	ldr	r3, [pc, #344]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d109      	bne.n	800a7be <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7ae:	e006      	b.n	800a7be <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b4:	e004      	b.n	800a7c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a7b6:	bf00      	nop
 800a7b8:	e002      	b.n	800a7c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a7ba:	bf00      	nop
 800a7bc:	e000      	b.n	800a7c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a7be:	bf00      	nop
    }

    if(status == HAL_OK)
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d108      	bne.n	800a7d8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a7c6:	4b4c      	ldr	r3, [pc, #304]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f023 0203 	bic.w	r2, r3, #3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4949      	ldr	r1, [pc, #292]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f040 8086 	bne.w	800a8ec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a7e0:	4b45      	ldr	r3, [pc, #276]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a44      	ldr	r2, [pc, #272]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a7e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7ec:	f7fb fb32 	bl	8005e54 <HAL_GetTick>
 800a7f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a7f2:	e009      	b.n	800a808 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a7f4:	f7fb fb2e 	bl	8005e54 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d902      	bls.n	800a808 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	73fb      	strb	r3, [r7, #15]
        break;
 800a806:	e005      	b.n	800a814 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a808:	4b3b      	ldr	r3, [pc, #236]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1ef      	bne.n	800a7f4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a814:	7bfb      	ldrb	r3, [r7, #15]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d168      	bne.n	800a8ec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d113      	bne.n	800a848 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a820:	4b35      	ldr	r3, [pc, #212]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a822:	695a      	ldr	r2, [r3, #20]
 800a824:	4b35      	ldr	r3, [pc, #212]	; (800a8fc <RCCEx_PLLSAI2_Config+0x1dc>)
 800a826:	4013      	ands	r3, r2
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6892      	ldr	r2, [r2, #8]
 800a82c:	0211      	lsls	r1, r2, #8
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	68d2      	ldr	r2, [r2, #12]
 800a832:	06d2      	lsls	r2, r2, #27
 800a834:	4311      	orrs	r1, r2
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	6852      	ldr	r2, [r2, #4]
 800a83a:	3a01      	subs	r2, #1
 800a83c:	0112      	lsls	r2, r2, #4
 800a83e:	430a      	orrs	r2, r1
 800a840:	492d      	ldr	r1, [pc, #180]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a842:	4313      	orrs	r3, r2
 800a844:	614b      	str	r3, [r1, #20]
 800a846:	e02d      	b.n	800a8a4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d115      	bne.n	800a87a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a84e:	4b2a      	ldr	r3, [pc, #168]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a850:	695a      	ldr	r2, [r3, #20]
 800a852:	4b2b      	ldr	r3, [pc, #172]	; (800a900 <RCCEx_PLLSAI2_Config+0x1e0>)
 800a854:	4013      	ands	r3, r2
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	6892      	ldr	r2, [r2, #8]
 800a85a:	0211      	lsls	r1, r2, #8
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	6912      	ldr	r2, [r2, #16]
 800a860:	0852      	lsrs	r2, r2, #1
 800a862:	3a01      	subs	r2, #1
 800a864:	0552      	lsls	r2, r2, #21
 800a866:	4311      	orrs	r1, r2
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6852      	ldr	r2, [r2, #4]
 800a86c:	3a01      	subs	r2, #1
 800a86e:	0112      	lsls	r2, r2, #4
 800a870:	430a      	orrs	r2, r1
 800a872:	4921      	ldr	r1, [pc, #132]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a874:	4313      	orrs	r3, r2
 800a876:	614b      	str	r3, [r1, #20]
 800a878:	e014      	b.n	800a8a4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a87a:	4b1f      	ldr	r3, [pc, #124]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a87c:	695a      	ldr	r2, [r3, #20]
 800a87e:	4b21      	ldr	r3, [pc, #132]	; (800a904 <RCCEx_PLLSAI2_Config+0x1e4>)
 800a880:	4013      	ands	r3, r2
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	6892      	ldr	r2, [r2, #8]
 800a886:	0211      	lsls	r1, r2, #8
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	6952      	ldr	r2, [r2, #20]
 800a88c:	0852      	lsrs	r2, r2, #1
 800a88e:	3a01      	subs	r2, #1
 800a890:	0652      	lsls	r2, r2, #25
 800a892:	4311      	orrs	r1, r2
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	6852      	ldr	r2, [r2, #4]
 800a898:	3a01      	subs	r2, #1
 800a89a:	0112      	lsls	r2, r2, #4
 800a89c:	430a      	orrs	r2, r1
 800a89e:	4916      	ldr	r1, [pc, #88]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a13      	ldr	r2, [pc, #76]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8b0:	f7fb fad0 	bl	8005e54 <HAL_GetTick>
 800a8b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a8b6:	e009      	b.n	800a8cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a8b8:	f7fb facc 	bl	8005e54 <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d902      	bls.n	800a8cc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	73fb      	strb	r3, [r7, #15]
          break;
 800a8ca:	e005      	b.n	800a8d8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0ef      	beq.n	800a8b8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d106      	bne.n	800a8ec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a8de:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8e0:	695a      	ldr	r2, [r3, #20]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	4904      	ldr	r1, [pc, #16]	; (800a8f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	40021000 	.word	0x40021000
 800a8fc:	07ff800f 	.word	0x07ff800f
 800a900:	ff9f800f 	.word	0xff9f800f
 800a904:	f9ff800f 	.word	0xf9ff800f

0800a908 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800a908:	b480      	push	{r7}
 800a90a:	b089      	sub	sp, #36	; 0x24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a924:	d10b      	bne.n	800a93e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a926:	4b7e      	ldr	r3, [pc, #504]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a92c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a930:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	2b60      	cmp	r3, #96	; 0x60
 800a936:	d112      	bne.n	800a95e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a938:	4b7a      	ldr	r3, [pc, #488]	; (800ab24 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800a93a:	61fb      	str	r3, [r7, #28]
 800a93c:	e00f      	b.n	800a95e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a944:	d10b      	bne.n	800a95e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a946:	4b76      	ldr	r3, [pc, #472]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a948:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a94c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a950:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a958:	d101      	bne.n	800a95e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800a95a:	4b72      	ldr	r3, [pc, #456]	; (800ab24 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800a95c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	2b00      	cmp	r3, #0
 800a962:	f040 80d6 	bne.w	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	2b40      	cmp	r3, #64	; 0x40
 800a96e:	d003      	beq.n	800a978 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a976:	d13b      	bne.n	800a9f0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a978:	4b69      	ldr	r3, [pc, #420]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a984:	f040 80c4 	bne.w	800ab10 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800a988:	4b65      	ldr	r3, [pc, #404]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 80bd 	beq.w	800ab10 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a996:	4b62      	ldr	r3, [pc, #392]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	091b      	lsrs	r3, r3, #4
 800a99c:	f003 030f 	and.w	r3, r3, #15
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	693a      	ldr	r2, [r7, #16]
 800a9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a9aa:	4b5d      	ldr	r3, [pc, #372]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	0a1b      	lsrs	r3, r3, #8
 800a9b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a9b6:	4b5a      	ldr	r3, [pc, #360]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	0edb      	lsrs	r3, r3, #27
 800a9bc:	f003 031f 	and.w	r3, r3, #31
 800a9c0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10a      	bne.n	800a9de <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a9c8:	4b55      	ldr	r3, [pc, #340]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800a9d4:	2311      	movs	r3, #17
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	e001      	b.n	800a9de <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800a9da:	2307      	movs	r3, #7
 800a9dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	fb03 f202 	mul.w	r2, r3, r2
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ec:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a9ee:	e08f      	b.n	800ab10 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d13a      	bne.n	800aa6c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800a9f6:	4b4a      	ldr	r3, [pc, #296]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa02:	f040 8086 	bne.w	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800aa06:	4b46      	ldr	r3, [pc, #280]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d07f      	beq.n	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800aa12:	4b43      	ldr	r3, [pc, #268]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	091b      	lsrs	r3, r3, #4
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa24:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800aa26:	4b3e      	ldr	r3, [pc, #248]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	0a1b      	lsrs	r3, r3, #8
 800aa2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa30:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800aa32:	4b3b      	ldr	r3, [pc, #236]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	0edb      	lsrs	r3, r3, #27
 800aa38:	f003 031f 	and.w	r3, r3, #31
 800aa3c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800aa44:	4b36      	ldr	r3, [pc, #216]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800aa50:	2311      	movs	r3, #17
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	e001      	b.n	800aa5a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800aa56:	2307      	movs	r3, #7
 800aa58:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	fb03 f202 	mul.w	r2, r3, r2
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa68:	61fb      	str	r3, [r7, #28]
 800aa6a:	e052      	b.n	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	2b80      	cmp	r3, #128	; 0x80
 800aa70:	d003      	beq.n	800aa7a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa78:	d109      	bne.n	800aa8e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa7a:	4b29      	ldr	r3, [pc, #164]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa86:	d144      	bne.n	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800aa88:	4b27      	ldr	r3, [pc, #156]	; (800ab28 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800aa8a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa8c:	e041      	b.n	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b20      	cmp	r3, #32
 800aa92:	d003      	beq.n	800aa9c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa9a:	d13a      	bne.n	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800aa9c:	4b20      	ldr	r3, [pc, #128]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaa8:	d133      	bne.n	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800aaaa:	4b1d      	ldr	r3, [pc, #116]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d02d      	beq.n	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800aab6:	4b1a      	ldr	r3, [pc, #104]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	091b      	lsrs	r3, r3, #4
 800aabc:	f003 030f 	and.w	r3, r3, #15
 800aac0:	3301      	adds	r3, #1
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800aaca:	4b15      	ldr	r3, [pc, #84]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	0a1b      	lsrs	r3, r3, #8
 800aad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aad4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800aad6:	4b12      	ldr	r3, [pc, #72]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	0edb      	lsrs	r3, r3, #27
 800aadc:	f003 031f 	and.w	r3, r3, #31
 800aae0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800aae8:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800aaf4:	2311      	movs	r3, #17
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e001      	b.n	800aafe <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800aafa:	2307      	movs	r3, #7
 800aafc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	fb03 f202 	mul.w	r2, r3, r2
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0c:	61fb      	str	r3, [r7, #28]
 800ab0e:	e000      	b.n	800ab12 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ab10:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800ab12:	69fb      	ldr	r3, [r7, #28]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3724      	adds	r7, #36	; 0x24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	40021000 	.word	0x40021000
 800ab24:	001fff68 	.word	0x001fff68
 800ab28:	00f42400 	.word	0x00f42400

0800ab2c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d904      	bls.n	800ab4a <HAL_SAI_InitProtocol+0x1e>
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	3b03      	subs	r3, #3
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d812      	bhi.n	800ab6e <HAL_SAI_InitProtocol+0x42>
 800ab48:	e008      	b.n	800ab5c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	68b9      	ldr	r1, [r7, #8]
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 f9fb 	bl	800af4c <SAI_InitI2S>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5a:	e00b      	b.n	800ab74 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	68b9      	ldr	r1, [r7, #8]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 faa4 	bl	800b0b0 <SAI_InitPCM>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab6c:	e002      	b.n	800ab74 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	75fb      	strb	r3, [r7, #23]
      break;
 800ab72:	bf00      	nop
  }

  if (status == HAL_OK)
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d104      	bne.n	800ab84 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 f808 	bl	800ab90 <HAL_SAI_Init>
 800ab80:	4603      	mov	r3, r0
 800ab82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	; 0x28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e1c7      	b.n	800af32 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d10e      	bne.n	800abca <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a81      	ldr	r2, [pc, #516]	; (800adb8 <HAL_SAI_Init+0x228>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d107      	bne.n	800abc6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d103      	bne.n	800abc6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e1b3      	b.n	800af32 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7f9 f8e4 	bl	8003dac <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fae5 	bl	800b1b4 <SAI_Disable>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e19e      	b.n	800af32 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d00c      	beq.n	800ac1e <HAL_SAI_Init+0x8e>
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d80d      	bhi.n	800ac24 <HAL_SAI_Init+0x94>
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <HAL_SAI_Init+0x82>
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d003      	beq.n	800ac18 <HAL_SAI_Init+0x88>
 800ac10:	e008      	b.n	800ac24 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ac16:	e008      	b.n	800ac2a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ac18:	2310      	movs	r3, #16
 800ac1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ac1c:	e005      	b.n	800ac2a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ac1e:	2320      	movs	r3, #32
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ac22:	e002      	b.n	800ac2a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ac28:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d81d      	bhi.n	800ac6e <HAL_SAI_Init+0xde>
 800ac32:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <HAL_SAI_Init+0xa8>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac49 	.word	0x0800ac49
 800ac3c:	0800ac4f 	.word	0x0800ac4f
 800ac40:	0800ac57 	.word	0x0800ac57
 800ac44:	0800ac5f 	.word	0x0800ac5f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	61fb      	str	r3, [r7, #28]
      break;
 800ac4c:	e012      	b.n	800ac74 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ac4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac52:	61fb      	str	r3, [r7, #28]
      break;
 800ac54:	e00e      	b.n	800ac74 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac5a:	61fb      	str	r3, [r7, #28]
      break;
 800ac5c:	e00a      	b.n	800ac74 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac62:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	f043 0301 	orr.w	r3, r3, #1
 800ac6a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ac6c:	e002      	b.n	800ac74 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61fb      	str	r3, [r7, #28]
      break;
 800ac72:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a4f      	ldr	r2, [pc, #316]	; (800adb8 <HAL_SAI_Init+0x228>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d004      	beq.n	800ac88 <HAL_SAI_Init+0xf8>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a4e      	ldr	r2, [pc, #312]	; (800adbc <HAL_SAI_Init+0x22c>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d103      	bne.n	800ac90 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800ac88:	4a4d      	ldr	r2, [pc, #308]	; (800adc0 <HAL_SAI_Init+0x230>)
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	e002      	b.n	800ac96 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ac90:	4a4c      	ldr	r2, [pc, #304]	; (800adc4 <HAL_SAI_Init+0x234>)
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d073      	beq.n	800ad86 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a45      	ldr	r2, [pc, #276]	; (800adb8 <HAL_SAI_Init+0x228>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d004      	beq.n	800acb2 <HAL_SAI_Init+0x122>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a43      	ldr	r2, [pc, #268]	; (800adbc <HAL_SAI_Init+0x22c>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d105      	bne.n	800acbe <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800acb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800acb6:	f7fe fd0d 	bl	80096d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800acba:	61b8      	str	r0, [r7, #24]
 800acbc:	e004      	b.n	800acc8 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800acbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800acc2:	f7fe fd07 	bl	80096d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800acc6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800acd0:	d120      	bne.n	800ad14 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	d102      	bne.n	800ace0 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800acda:	2340      	movs	r3, #64	; 0x40
 800acdc:	613b      	str	r3, [r7, #16]
 800acde:	e00a      	b.n	800acf6 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	d103      	bne.n	800acf0 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ace8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acec:	613b      	str	r3, [r7, #16]
 800acee:	e002      	b.n	800acf6 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	4613      	mov	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	4619      	mov	r1, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	fb02 f303 	mul.w	r3, r2, r3
 800ad0c:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad10:	617b      	str	r3, [r7, #20]
 800ad12:	e017      	b.n	800ad44 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad1c:	d101      	bne.n	800ad22 <HAL_SAI_Init+0x192>
 800ad1e:	2302      	movs	r3, #2
 800ad20:	e000      	b.n	800ad24 <HAL_SAI_Init+0x194>
 800ad22:	2301      	movs	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	4619      	mov	r1, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	fb02 f303 	mul.w	r3, r2, r3
 800ad3c:	021b      	lsls	r3, r3, #8
 800ad3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad42:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	4a20      	ldr	r2, [pc, #128]	; (800adc8 <HAL_SAI_Init+0x238>)
 800ad48:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4c:	08da      	lsrs	r2, r3, #3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ad52:	6979      	ldr	r1, [r7, #20]
 800ad54:	4b1c      	ldr	r3, [pc, #112]	; (800adc8 <HAL_SAI_Init+0x238>)
 800ad56:	fba3 2301 	umull	r2, r3, r3, r1
 800ad5a:	08da      	lsrs	r2, r3, #3
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	1aca      	subs	r2, r1, r3
 800ad66:	2a08      	cmp	r2, #8
 800ad68:	d904      	bls.n	800ad74 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d104      	bne.n	800ad86 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	085a      	lsrs	r2, r3, #1
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <HAL_SAI_Init+0x206>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d109      	bne.n	800adaa <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d101      	bne.n	800ada2 <HAL_SAI_Init+0x212>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e001      	b.n	800ada6 <HAL_SAI_Init+0x216>
 800ada2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ada6:	623b      	str	r3, [r7, #32]
 800ada8:	e012      	b.n	800add0 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d10c      	bne.n	800adcc <HAL_SAI_Init+0x23c>
 800adb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adb6:	e00a      	b.n	800adce <HAL_SAI_Init+0x23e>
 800adb8:	40015404 	.word	0x40015404
 800adbc:	40015424 	.word	0x40015424
 800adc0:	40015400 	.word	0x40015400
 800adc4:	40015800 	.word	0x40015800
 800adc8:	cccccccd 	.word	0xcccccccd
 800adcc:	2300      	movs	r3, #0
 800adce:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6819      	ldr	r1, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	4b58      	ldr	r3, [pc, #352]	; (800af3c <HAL_SAI_Init+0x3ac>)
 800addc:	400b      	ands	r3, r1
 800adde:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6819      	ldr	r1, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800adf4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adfa:	431a      	orrs	r2, r3
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800ae08:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ae14:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	051b      	lsls	r3, r3, #20
 800ae1c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ae22:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	6812      	ldr	r2, [r2, #0]
 800ae36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ae3a:	f023 030f 	bic.w	r3, r3, #15
 800ae3e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6859      	ldr	r1, [r3, #4]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	699a      	ldr	r2, [r3, #24]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae54:	431a      	orrs	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6899      	ldr	r1, [r3, #8]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	4b35      	ldr	r3, [pc, #212]	; (800af40 <HAL_SAI_Init+0x3b0>)
 800ae6a:	400b      	ands	r3, r1
 800ae6c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6899      	ldr	r1, [r3, #8]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae78:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae7e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 800ae84:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800ae8a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae90:	3b01      	subs	r3, #1
 800ae92:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ae94:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68d9      	ldr	r1, [r3, #12]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	f24f 0320 	movw	r3, #61472	; 0xf020
 800aeac:	400b      	ands	r3, r1
 800aeae:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68d9      	ldr	r1, [r3, #12]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aebe:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aec6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aecc:	3b01      	subs	r3, #1
 800aece:	021b      	lsls	r3, r3, #8
 800aed0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a19      	ldr	r2, [pc, #100]	; (800af44 <HAL_SAI_Init+0x3b4>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d119      	bne.n	800af18 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800aee4:	4b18      	ldr	r3, [pc, #96]	; (800af48 <HAL_SAI_Init+0x3b8>)
 800aee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee8:	4a17      	ldr	r2, [pc, #92]	; (800af48 <HAL_SAI_Init+0x3b8>)
 800aeea:	f023 0301 	bic.w	r3, r3, #1
 800aeee:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d10e      	bne.n	800af18 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	3b01      	subs	r3, #1
 800af04:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800af06:	4910      	ldr	r1, [pc, #64]	; (800af48 <HAL_SAI_Init+0x3b8>)
 800af08:	4313      	orrs	r3, r2
 800af0a:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800af0c:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <HAL_SAI_Init+0x3b8>)
 800af0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af10:	4a0d      	ldr	r2, [pc, #52]	; (800af48 <HAL_SAI_Init+0x3b8>)
 800af12:	f043 0301 	orr.w	r3, r3, #1
 800af16:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3728      	adds	r7, #40	; 0x28
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	f805c010 	.word	0xf805c010
 800af40:	fff88000 	.word	0xfff88000
 800af44:	40015404 	.word	0x40015404
 800af48:	40015400 	.word	0x40015400

0800af4c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b087      	sub	sp, #28
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <SAI_InitI2S+0x2e>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	2b02      	cmp	r3, #2
 800af78:	d103      	bne.n	800af82 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	64da      	str	r2, [r3, #76]	; 0x4c
 800af80:	e002      	b.n	800af88 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2201      	movs	r2, #1
 800af86:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af96:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e077      	b.n	800b0a2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d107      	bne.n	800afc8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800afc4:	661a      	str	r2, [r3, #96]	; 0x60
 800afc6:	e006      	b.n	800afd6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800afce:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d84f      	bhi.n	800b07c <SAI_InitI2S+0x130>
 800afdc:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <SAI_InitI2S+0x98>)
 800afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe2:	bf00      	nop
 800afe4:	0800aff5 	.word	0x0800aff5
 800afe8:	0800b017 	.word	0x0800b017
 800afec:	0800b039 	.word	0x0800b039
 800aff0:	0800b05b 	.word	0x0800b05b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2280      	movs	r2, #128	; 0x80
 800aff8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	085b      	lsrs	r3, r3, #1
 800affe:	015a      	lsls	r2, r3, #5
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	085b      	lsrs	r3, r3, #1
 800b008:	011a      	lsls	r2, r3, #4
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2240      	movs	r2, #64	; 0x40
 800b012:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b014:	e035      	b.n	800b082 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2280      	movs	r2, #128	; 0x80
 800b01a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	085b      	lsrs	r3, r3, #1
 800b020:	019a      	lsls	r2, r3, #6
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	085b      	lsrs	r3, r3, #1
 800b02a:	015a      	lsls	r2, r3, #5
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2280      	movs	r2, #128	; 0x80
 800b034:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b036:	e024      	b.n	800b082 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	22c0      	movs	r2, #192	; 0xc0
 800b03c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	085b      	lsrs	r3, r3, #1
 800b042:	019a      	lsls	r2, r3, #6
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	085b      	lsrs	r3, r3, #1
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2280      	movs	r2, #128	; 0x80
 800b056:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b058:	e013      	b.n	800b082 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	22e0      	movs	r2, #224	; 0xe0
 800b05e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	085b      	lsrs	r3, r3, #1
 800b064:	019a      	lsls	r2, r3, #6
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	085b      	lsrs	r3, r3, #1
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2280      	movs	r2, #128	; 0x80
 800b078:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b07a:	e002      	b.n	800b082 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	75fb      	strb	r3, [r7, #23]
      break;
 800b080:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b02      	cmp	r3, #2
 800b086:	d10b      	bne.n	800b0a0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d102      	bne.n	800b094 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2210      	movs	r2, #16
 800b092:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b02      	cmp	r3, #2
 800b098:	d102      	bne.n	800b0a0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2208      	movs	r2, #8
 800b09e:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	371c      	adds	r7, #28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop

0800b0b0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <SAI_InitPCM+0x2e>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d103      	bne.n	800b0e6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	64da      	str	r2, [r3, #76]	; 0x4c
 800b0e4:	e002      	b.n	800b0ec <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b0f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b100:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b114:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d103      	bne.n	800b124 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2201      	movs	r2, #1
 800b120:	655a      	str	r2, [r3, #84]	; 0x54
 800b122:	e002      	b.n	800b12a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	220d      	movs	r2, #13
 800b128:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d837      	bhi.n	800b1a0 <SAI_InitPCM+0xf0>
 800b130:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <SAI_InitPCM+0x88>)
 800b132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b136:	bf00      	nop
 800b138:	0800b149 	.word	0x0800b149
 800b13c:	0800b15f 	.word	0x0800b15f
 800b140:	0800b175 	.word	0x0800b175
 800b144:	0800b18b 	.word	0x0800b18b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2280      	movs	r2, #128	; 0x80
 800b14c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	011a      	lsls	r2, r3, #4
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2240      	movs	r2, #64	; 0x40
 800b15a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b15c:	e023      	b.n	800b1a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2280      	movs	r2, #128	; 0x80
 800b162:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	015a      	lsls	r2, r3, #5
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2280      	movs	r2, #128	; 0x80
 800b170:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b172:	e018      	b.n	800b1a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	22c0      	movs	r2, #192	; 0xc0
 800b178:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2280      	movs	r2, #128	; 0x80
 800b186:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b188:	e00d      	b.n	800b1a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	22e0      	movs	r2, #224	; 0xe0
 800b18e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2280      	movs	r2, #128	; 0x80
 800b19c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b19e:	e002      	b.n	800b1a6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	75fb      	strb	r3, [r7, #23]
      break;
 800b1a4:	bf00      	nop
  }

  return status;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	371c      	adds	r7, #28
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b1bc:	4b18      	ldr	r3, [pc, #96]	; (800b220 <SAI_Disable+0x6c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a18      	ldr	r2, [pc, #96]	; (800b224 <SAI_Disable+0x70>)
 800b1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c6:	0b1b      	lsrs	r3, r3, #12
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b1de:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10a      	bne.n	800b1fc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	72fb      	strb	r3, [r7, #11]
      break;
 800b1fa:	e009      	b.n	800b210 <SAI_Disable+0x5c>
    }
    count--;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e7      	bne.n	800b1e0 <SAI_Disable+0x2c>

  return status;
 800b210:	7afb      	ldrb	r3, [r7, #11]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	20000020 	.word	0x20000020
 800b224:	95cbec1b 	.word	0x95cbec1b

0800b228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e095      	b.n	800b366 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d108      	bne.n	800b254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b24a:	d009      	beq.n	800b260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	61da      	str	r2, [r3, #28]
 800b252:	e005      	b.n	800b260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d106      	bne.n	800b280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7f8 fb3c 	bl	80038f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2202      	movs	r2, #2
 800b284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2a0:	d902      	bls.n	800b2a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	e002      	b.n	800b2ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b2a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b2b6:	d007      	beq.n	800b2c8 <HAL_SPI_Init+0xa0>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2c0:	d002      	beq.n	800b2c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b2d8:	431a      	orrs	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f003 0302 	and.w	r3, r3, #2
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	695b      	ldr	r3, [r3, #20]
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b30a:	ea42 0103 	orr.w	r1, r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b312:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	430a      	orrs	r2, r1
 800b31c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	0c1b      	lsrs	r3, r3, #16
 800b324:	f003 0204 	and.w	r2, r3, #4
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32c:	f003 0310 	and.w	r3, r3, #16
 800b330:	431a      	orrs	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	431a      	orrs	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b344:	ea42 0103 	orr.w	r1, r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	430a      	orrs	r2, r1
 800b354:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b088      	sub	sp, #32
 800b372:	af00      	add	r7, sp, #0
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	603b      	str	r3, [r7, #0]
 800b37a:	4613      	mov	r3, r2
 800b37c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d101      	bne.n	800b390 <HAL_SPI_Transmit+0x22>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e15f      	b.n	800b650 <HAL_SPI_Transmit+0x2e2>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b398:	f7fa fd5c 	bl	8005e54 <HAL_GetTick>
 800b39c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b39e:	88fb      	ldrh	r3, [r7, #6]
 800b3a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d002      	beq.n	800b3b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b3b2:	e148      	b.n	800b646 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <HAL_SPI_Transmit+0x52>
 800b3ba:	88fb      	ldrh	r3, [r7, #6]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b3c4:	e13f      	b.n	800b646 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2203      	movs	r2, #3
 800b3ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	88fa      	ldrh	r2, [r7, #6]
 800b3de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	88fa      	ldrh	r2, [r7, #6]
 800b3e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b410:	d10f      	bne.n	800b432 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b420:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b430:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43c:	2b40      	cmp	r3, #64	; 0x40
 800b43e:	d007      	beq.n	800b450 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b44e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b458:	d94f      	bls.n	800b4fa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <HAL_SPI_Transmit+0xfa>
 800b462:	8afb      	ldrh	r3, [r7, #22]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d142      	bne.n	800b4ee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	881a      	ldrh	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b478:	1c9a      	adds	r2, r3, #2
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b482:	b29b      	uxth	r3, r3
 800b484:	3b01      	subs	r3, #1
 800b486:	b29a      	uxth	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b48c:	e02f      	b.n	800b4ee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f003 0302 	and.w	r3, r3, #2
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d112      	bne.n	800b4c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	881a      	ldrh	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ac:	1c9a      	adds	r2, r3, #2
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b4c0:	e015      	b.n	800b4ee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4c2:	f7fa fcc7 	bl	8005e54 <HAL_GetTick>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d803      	bhi.n	800b4da <HAL_SPI_Transmit+0x16c>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d8:	d102      	bne.n	800b4e0 <HAL_SPI_Transmit+0x172>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d106      	bne.n	800b4ee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b4ec:	e0ab      	b.n	800b646 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1ca      	bne.n	800b48e <HAL_SPI_Transmit+0x120>
 800b4f8:	e080      	b.n	800b5fc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d002      	beq.n	800b508 <HAL_SPI_Transmit+0x19a>
 800b502:	8afb      	ldrh	r3, [r7, #22]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d174      	bne.n	800b5f2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d912      	bls.n	800b538 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b516:	881a      	ldrh	r2, [r3, #0]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b522:	1c9a      	adds	r2, r3, #2
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	3b02      	subs	r3, #2
 800b530:	b29a      	uxth	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b536:	e05c      	b.n	800b5f2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	330c      	adds	r3, #12
 800b542:	7812      	ldrb	r2, [r2, #0]
 800b544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b554:	b29b      	uxth	r3, r3
 800b556:	3b01      	subs	r3, #1
 800b558:	b29a      	uxth	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b55e:	e048      	b.n	800b5f2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d12b      	bne.n	800b5c6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b572:	b29b      	uxth	r3, r3
 800b574:	2b01      	cmp	r3, #1
 800b576:	d912      	bls.n	800b59e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57c:	881a      	ldrh	r2, [r3, #0]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b588:	1c9a      	adds	r2, r3, #2
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b592:	b29b      	uxth	r3, r3
 800b594:	3b02      	subs	r3, #2
 800b596:	b29a      	uxth	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b59c:	e029      	b.n	800b5f2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	330c      	adds	r3, #12
 800b5a8:	7812      	ldrb	r2, [r2, #0]
 800b5aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5c4:	e015      	b.n	800b5f2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5c6:	f7fa fc45 	bl	8005e54 <HAL_GetTick>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	683a      	ldr	r2, [r7, #0]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d803      	bhi.n	800b5de <HAL_SPI_Transmit+0x270>
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5dc:	d102      	bne.n	800b5e4 <HAL_SPI_Transmit+0x276>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d106      	bne.n	800b5f2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b5f0:	e029      	b.n	800b646 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1b1      	bne.n	800b560 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5fc:	69ba      	ldr	r2, [r7, #24]
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f000 fcf9 	bl	800bff8 <SPI_EndRxTxTransaction>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2220      	movs	r2, #32
 800b610:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10a      	bne.n	800b630 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b61a:	2300      	movs	r3, #0
 800b61c:	613b      	str	r3, [r7, #16]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	613b      	str	r3, [r7, #16]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	613b      	str	r3, [r7, #16]
 800b62e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	77fb      	strb	r3, [r7, #31]
 800b63c:	e003      	b.n	800b646 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b64e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3720      	adds	r7, #32
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af02      	add	r7, sp, #8
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	4613      	mov	r3, r2
 800b666:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b01      	cmp	r3, #1
 800b676:	d002      	beq.n	800b67e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800b678:	2302      	movs	r3, #2
 800b67a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b67c:	e11a      	b.n	800b8b4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b686:	d112      	bne.n	800b6ae <HAL_SPI_Receive+0x56>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10e      	bne.n	800b6ae <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2204      	movs	r2, #4
 800b694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b698:	88fa      	ldrh	r2, [r7, #6]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 f90e 	bl	800b8c6 <HAL_SPI_TransmitReceive>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	e107      	b.n	800b8be <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d101      	bne.n	800b6bc <HAL_SPI_Receive+0x64>
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e100      	b.n	800b8be <HAL_SPI_Receive+0x266>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6c4:	f7fa fbc6 	bl	8005e54 <HAL_GetTick>
 800b6c8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <HAL_SPI_Receive+0x7e>
 800b6d0:	88fb      	ldrh	r3, [r7, #6]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6da:	e0eb      	b.n	800b8b4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2204      	movs	r2, #4
 800b6e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	88fa      	ldrh	r2, [r7, #6]
 800b6f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	88fa      	ldrh	r2, [r7, #6]
 800b6fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2200      	movs	r2, #0
 800b716:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b726:	d908      	bls.n	800b73a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b736:	605a      	str	r2, [r3, #4]
 800b738:	e007      	b.n	800b74a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b748:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b752:	d10f      	bne.n	800b774 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b762:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b772:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	d007      	beq.n	800b792 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b790:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b79a:	d86f      	bhi.n	800b87c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b79c:	e034      	b.n	800b808 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d117      	bne.n	800b7dc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f103 020c 	add.w	r2, r3, #12
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b8:	7812      	ldrb	r2, [r2, #0]
 800b7ba:	b2d2      	uxtb	r2, r2
 800b7bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b7da:	e015      	b.n	800b808 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7dc:	f7fa fb3a 	bl	8005e54 <HAL_GetTick>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d803      	bhi.n	800b7f4 <HAL_SPI_Receive+0x19c>
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f2:	d102      	bne.n	800b7fa <HAL_SPI_Receive+0x1a2>
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b806:	e055      	b.n	800b8b4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b80e:	b29b      	uxth	r3, r3
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1c4      	bne.n	800b79e <HAL_SPI_Receive+0x146>
 800b814:	e038      	b.n	800b888 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b01      	cmp	r3, #1
 800b822:	d115      	bne.n	800b850 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68da      	ldr	r2, [r3, #12]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	b292      	uxth	r2, r2
 800b830:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b836:	1c9a      	adds	r2, r3, #2
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b842:	b29b      	uxth	r3, r3
 800b844:	3b01      	subs	r3, #1
 800b846:	b29a      	uxth	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b84e:	e015      	b.n	800b87c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b850:	f7fa fb00 	bl	8005e54 <HAL_GetTick>
 800b854:	4602      	mov	r2, r0
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d803      	bhi.n	800b868 <HAL_SPI_Receive+0x210>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b866:	d102      	bne.n	800b86e <HAL_SPI_Receive+0x216>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800b86e:	2303      	movs	r3, #3
 800b870:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b87a:	e01b      	b.n	800b8b4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1c6      	bne.n	800b816 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 fb5b 	bl	800bf48 <SPI_EndRxTransaction>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2220      	movs	r2, #32
 800b89c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d002      	beq.n	800b8ac <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	75fb      	strb	r3, [r7, #23]
 800b8aa:	e003      	b.n	800b8b4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b08a      	sub	sp, #40	; 0x28
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	607a      	str	r2, [r7, #4]
 800b8d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d101      	bne.n	800b8ec <HAL_SPI_TransmitReceive+0x26>
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	e20a      	b.n	800bd02 <HAL_SPI_TransmitReceive+0x43c>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8f4:	f7fa faae 	bl	8005e54 <HAL_GetTick>
 800b8f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b900:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b908:	887b      	ldrh	r3, [r7, #2]
 800b90a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b90c:	887b      	ldrh	r3, [r7, #2]
 800b90e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b910:	7efb      	ldrb	r3, [r7, #27]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d00e      	beq.n	800b934 <HAL_SPI_TransmitReceive+0x6e>
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b91c:	d106      	bne.n	800b92c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d102      	bne.n	800b92c <HAL_SPI_TransmitReceive+0x66>
 800b926:	7efb      	ldrb	r3, [r7, #27]
 800b928:	2b04      	cmp	r3, #4
 800b92a:	d003      	beq.n	800b934 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b92c:	2302      	movs	r3, #2
 800b92e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b932:	e1e0      	b.n	800bcf6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d005      	beq.n	800b946 <HAL_SPI_TransmitReceive+0x80>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <HAL_SPI_TransmitReceive+0x80>
 800b940:	887b      	ldrh	r3, [r7, #2]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d103      	bne.n	800b94e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b94c:	e1d3      	b.n	800bcf6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b04      	cmp	r3, #4
 800b958:	d003      	beq.n	800b962 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2205      	movs	r2, #5
 800b95e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	887a      	ldrh	r2, [r7, #2]
 800b972:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	887a      	ldrh	r2, [r7, #2]
 800b97a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	887a      	ldrh	r2, [r7, #2]
 800b988:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	887a      	ldrh	r2, [r7, #2]
 800b98e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9a4:	d802      	bhi.n	800b9ac <HAL_SPI_TransmitReceive+0xe6>
 800b9a6:	8a3b      	ldrh	r3, [r7, #16]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d908      	bls.n	800b9be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9ba:	605a      	str	r2, [r3, #4]
 800b9bc:	e007      	b.n	800b9ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b9cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d8:	2b40      	cmp	r3, #64	; 0x40
 800b9da:	d007      	beq.n	800b9ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9f4:	f240 8081 	bls.w	800bafa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <HAL_SPI_TransmitReceive+0x140>
 800ba00:	8a7b      	ldrh	r3, [r7, #18]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d16d      	bne.n	800bae2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0a:	881a      	ldrh	r2, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba16:	1c9a      	adds	r2, r3, #2
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	3b01      	subs	r3, #1
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba2a:	e05a      	b.n	800bae2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d11b      	bne.n	800ba72 <HAL_SPI_TransmitReceive+0x1ac>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d016      	beq.n	800ba72 <HAL_SPI_TransmitReceive+0x1ac>
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d113      	bne.n	800ba72 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4e:	881a      	ldrh	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5a:	1c9a      	adds	r2, r3, #2
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	3b01      	subs	r3, #1
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d11c      	bne.n	800baba <HAL_SPI_TransmitReceive+0x1f4>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d016      	beq.n	800baba <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68da      	ldr	r2, [r3, #12]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	b292      	uxth	r2, r2
 800ba98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9e:	1c9a      	adds	r2, r3, #2
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800baaa:	b29b      	uxth	r3, r3
 800baac:	3b01      	subs	r3, #1
 800baae:	b29a      	uxth	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bab6:	2301      	movs	r3, #1
 800bab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800baba:	f7fa f9cb 	bl	8005e54 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d80b      	bhi.n	800bae2 <HAL_SPI_TransmitReceive+0x21c>
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad0:	d007      	beq.n	800bae2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800bae0:	e109      	b.n	800bcf6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d19f      	bne.n	800ba2c <HAL_SPI_TransmitReceive+0x166>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d199      	bne.n	800ba2c <HAL_SPI_TransmitReceive+0x166>
 800baf8:	e0e3      	b.n	800bcc2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <HAL_SPI_TransmitReceive+0x244>
 800bb02:	8a7b      	ldrh	r3, [r7, #18]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	f040 80cf 	bne.w	800bca8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d912      	bls.n	800bb3a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb18:	881a      	ldrh	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb24:	1c9a      	adds	r2, r3, #2
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	3b02      	subs	r3, #2
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb38:	e0b6      	b.n	800bca8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	330c      	adds	r3, #12
 800bb44:	7812      	ldrb	r2, [r2, #0]
 800bb46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb60:	e0a2      	b.n	800bca8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f003 0302 	and.w	r3, r3, #2
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d134      	bne.n	800bbda <HAL_SPI_TransmitReceive+0x314>
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d02f      	beq.n	800bbda <HAL_SPI_TransmitReceive+0x314>
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d12c      	bne.n	800bbda <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d912      	bls.n	800bbb0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8e:	881a      	ldrh	r2, [r3, #0]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9a:	1c9a      	adds	r2, r3, #2
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	3b02      	subs	r3, #2
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bbae:	e012      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	330c      	adds	r3, #12
 800bbba:	7812      	ldrb	r2, [r2, #0]
 800bbbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc2:	1c5a      	adds	r2, r3, #1
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d148      	bne.n	800bc7a <HAL_SPI_TransmitReceive+0x3b4>
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d042      	beq.n	800bc7a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d923      	bls.n	800bc48 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68da      	ldr	r2, [r3, #12]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0a:	b292      	uxth	r2, r2
 800bc0c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc12:	1c9a      	adds	r2, r3, #2
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	3b02      	subs	r3, #2
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d81f      	bhi.n	800bc76 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bc44:	605a      	str	r2, [r3, #4]
 800bc46:	e016      	b.n	800bc76 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f103 020c 	add.w	r2, r3, #12
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc54:	7812      	ldrb	r2, [r2, #0]
 800bc56:	b2d2      	uxtb	r2, r2
 800bc58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	1c5a      	adds	r2, r3, #1
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc76:	2301      	movs	r3, #1
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bc7a:	f7fa f8eb 	bl	8005e54 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d803      	bhi.n	800bc92 <HAL_SPI_TransmitReceive+0x3cc>
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc90:	d102      	bne.n	800bc98 <HAL_SPI_TransmitReceive+0x3d2>
 800bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d107      	bne.n	800bca8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2201      	movs	r2, #1
 800bca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800bca6:	e026      	b.n	800bcf6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f47f af57 	bne.w	800bb62 <HAL_SPI_TransmitReceive+0x29c>
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f47f af50 	bne.w	800bb62 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bcc2:	69fa      	ldr	r2, [r7, #28]
 800bcc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f000 f996 	bl	800bff8 <SPI_EndRxTxTransaction>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d005      	beq.n	800bcde <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2220      	movs	r2, #32
 800bcdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcec:	e003      	b.n	800bcf6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bcfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3728      	adds	r7, #40	; 0x28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
	...

0800bd0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bd1c:	f7fa f89a 	bl	8005e54 <HAL_GetTick>
 800bd20:	4602      	mov	r2, r0
 800bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd24:	1a9b      	subs	r3, r3, r2
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	4413      	add	r3, r2
 800bd2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bd2c:	f7fa f892 	bl	8005e54 <HAL_GetTick>
 800bd30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd32:	4b39      	ldr	r3, [pc, #228]	; (800be18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	015b      	lsls	r3, r3, #5
 800bd38:	0d1b      	lsrs	r3, r3, #20
 800bd3a:	69fa      	ldr	r2, [r7, #28]
 800bd3c:	fb02 f303 	mul.w	r3, r2, r3
 800bd40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd42:	e054      	b.n	800bdee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4a:	d050      	beq.n	800bdee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd4c:	f7fa f882 	bl	8005e54 <HAL_GetTick>
 800bd50:	4602      	mov	r2, r0
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	69fa      	ldr	r2, [r7, #28]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d902      	bls.n	800bd62 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d13d      	bne.n	800bdde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bd70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd7a:	d111      	bne.n	800bda0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd84:	d004      	beq.n	800bd90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd8e:	d107      	bne.n	800bda0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bda8:	d10f      	bne.n	800bdca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bdc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e017      	b.n	800be0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bde4:	2300      	movs	r3, #0
 800bde6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689a      	ldr	r2, [r3, #8]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	4013      	ands	r3, r2
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	bf0c      	ite	eq
 800bdfe:	2301      	moveq	r3, #1
 800be00:	2300      	movne	r3, #0
 800be02:	b2db      	uxtb	r3, r3
 800be04:	461a      	mov	r2, r3
 800be06:	79fb      	ldrb	r3, [r7, #7]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d19b      	bne.n	800bd44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3720      	adds	r7, #32
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20000020 	.word	0x20000020

0800be1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b08a      	sub	sp, #40	; 0x28
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800be2a:	2300      	movs	r3, #0
 800be2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800be2e:	f7fa f811 	bl	8005e54 <HAL_GetTick>
 800be32:	4602      	mov	r2, r0
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	1a9b      	subs	r3, r3, r2
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	4413      	add	r3, r2
 800be3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800be3e:	f7fa f809 	bl	8005e54 <HAL_GetTick>
 800be42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	330c      	adds	r3, #12
 800be4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800be4c:	4b3d      	ldr	r3, [pc, #244]	; (800bf44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	00da      	lsls	r2, r3, #3
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	0d1b      	lsrs	r3, r3, #20
 800be5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be5e:	fb02 f303 	mul.w	r3, r2, r3
 800be62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800be64:	e060      	b.n	800bf28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800be6c:	d107      	bne.n	800be7e <SPI_WaitFifoStateUntilTimeout+0x62>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d104      	bne.n	800be7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be84:	d050      	beq.n	800bf28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be86:	f7f9 ffe5 	bl	8005e54 <HAL_GetTick>
 800be8a:	4602      	mov	r2, r0
 800be8c:	6a3b      	ldr	r3, [r7, #32]
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be92:	429a      	cmp	r2, r3
 800be94:	d902      	bls.n	800be9c <SPI_WaitFifoStateUntilTimeout+0x80>
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d13d      	bne.n	800bf18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800beaa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800beb4:	d111      	bne.n	800beda <SPI_WaitFifoStateUntilTimeout+0xbe>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bebe:	d004      	beq.n	800beca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bec8:	d107      	bne.n	800beda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bed8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bee2:	d10f      	bne.n	800bf04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bf14:	2303      	movs	r3, #3
 800bf16:	e010      	b.n	800bf3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	4013      	ands	r3, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d196      	bne.n	800be66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3728      	adds	r7, #40	; 0x28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20000020 	.word	0x20000020

0800bf48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af02      	add	r7, sp, #8
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf5c:	d111      	bne.n	800bf82 <SPI_EndRxTransaction+0x3a>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf66:	d004      	beq.n	800bf72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf70:	d107      	bne.n	800bf82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf80:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2180      	movs	r1, #128	; 0x80
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f7ff febd 	bl	800bd0c <SPI_WaitFlagStateUntilTimeout>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d007      	beq.n	800bfa8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf9c:	f043 0220 	orr.w	r2, r3, #32
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e023      	b.n	800bff0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bfb0:	d11d      	bne.n	800bfee <SPI_EndRxTransaction+0xa6>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfba:	d004      	beq.n	800bfc6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfc4:	d113      	bne.n	800bfee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff ff22 	bl	800be1c <SPI_WaitFifoStateUntilTimeout>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d007      	beq.n	800bfee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfe2:	f043 0220 	orr.w	r2, r3, #32
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bfea:	2303      	movs	r3, #3
 800bfec:	e000      	b.n	800bff0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af02      	add	r7, sp, #8
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f7ff ff03 	bl	800be1c <SPI_WaitFifoStateUntilTimeout>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c020:	f043 0220 	orr.w	r2, r3, #32
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	e027      	b.n	800c07c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2200      	movs	r2, #0
 800c034:	2180      	movs	r1, #128	; 0x80
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff fe68 	bl	800bd0c <SPI_WaitFlagStateUntilTimeout>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d007      	beq.n	800c052 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c046:	f043 0220 	orr.w	r2, r3, #32
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e014      	b.n	800c07c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2200      	movs	r2, #0
 800c05a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f7ff fedc 	bl	800be1c <SPI_WaitFifoStateUntilTimeout>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d007      	beq.n	800c07a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c06e:	f043 0220 	orr.w	r2, r3, #32
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e000      	b.n	800c07c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d101      	bne.n	800c096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e049      	b.n	800c12a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d106      	bne.n	800c0b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7f7 fd50 	bl	8003b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	3304      	adds	r3, #4
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4610      	mov	r0, r2
 800c0c4:	f000 fc16 	bl	800c8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
	...

0800c134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c142:	b2db      	uxtb	r3, r3
 800c144:	2b01      	cmp	r3, #1
 800c146:	d001      	beq.n	800c14c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e04f      	b.n	800c1ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2202      	movs	r2, #2
 800c150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68da      	ldr	r2, [r3, #12]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f042 0201 	orr.w	r2, r2, #1
 800c162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a23      	ldr	r2, [pc, #140]	; (800c1f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d01d      	beq.n	800c1aa <HAL_TIM_Base_Start_IT+0x76>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c176:	d018      	beq.n	800c1aa <HAL_TIM_Base_Start_IT+0x76>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a1f      	ldr	r2, [pc, #124]	; (800c1fc <HAL_TIM_Base_Start_IT+0xc8>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d013      	beq.n	800c1aa <HAL_TIM_Base_Start_IT+0x76>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a1e      	ldr	r2, [pc, #120]	; (800c200 <HAL_TIM_Base_Start_IT+0xcc>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d00e      	beq.n	800c1aa <HAL_TIM_Base_Start_IT+0x76>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a1c      	ldr	r2, [pc, #112]	; (800c204 <HAL_TIM_Base_Start_IT+0xd0>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d009      	beq.n	800c1aa <HAL_TIM_Base_Start_IT+0x76>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a1b      	ldr	r2, [pc, #108]	; (800c208 <HAL_TIM_Base_Start_IT+0xd4>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d004      	beq.n	800c1aa <HAL_TIM_Base_Start_IT+0x76>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a19      	ldr	r2, [pc, #100]	; (800c20c <HAL_TIM_Base_Start_IT+0xd8>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d115      	bne.n	800c1d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	4b17      	ldr	r3, [pc, #92]	; (800c210 <HAL_TIM_Base_Start_IT+0xdc>)
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b06      	cmp	r3, #6
 800c1ba:	d015      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0xb4>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1c2:	d011      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f042 0201 	orr.w	r2, r2, #1
 800c1d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1d4:	e008      	b.n	800c1e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f042 0201 	orr.w	r2, r2, #1
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	e000      	b.n	800c1ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	40012c00 	.word	0x40012c00
 800c1fc:	40000400 	.word	0x40000400
 800c200:	40000800 	.word	0x40000800
 800c204:	40000c00 	.word	0x40000c00
 800c208:	40013400 	.word	0x40013400
 800c20c:	40014000 	.word	0x40014000
 800c210:	00010007 	.word	0x00010007

0800c214 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	e049      	b.n	800c2ba <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f841 	bl	800c2c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2202      	movs	r2, #2
 800c244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3304      	adds	r3, #4
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f000 fb4e 	bl	800c8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b083      	sub	sp, #12
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c2ca:	bf00      	nop
 800c2cc:	370c      	adds	r7, #12
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b082      	sub	sp, #8
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e049      	b.n	800c37c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d106      	bne.n	800c302 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7f7 fb71 	bl	80039e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2202      	movs	r2, #2
 800c306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3304      	adds	r3, #4
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f000 faed 	bl	800c8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2201      	movs	r2, #1
 800c326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2201      	movs	r2, #1
 800c32e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2201      	movs	r2, #1
 800c346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2201      	movs	r2, #1
 800c356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2201      	movs	r2, #1
 800c376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d020      	beq.n	800c3e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f003 0302 	and.w	r3, r3, #2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d01b      	beq.n	800c3e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f06f 0202 	mvn.w	r2, #2
 800c3b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	699b      	ldr	r3, [r3, #24]
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fa72 	bl	800c8b8 <HAL_TIM_IC_CaptureCallback>
 800c3d4:	e005      	b.n	800c3e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa64 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fa75 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f003 0304 	and.w	r3, r3, #4
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d020      	beq.n	800c434 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f003 0304 	and.w	r3, r3, #4
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d01b      	beq.n	800c434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f06f 0204 	mvn.w	r2, #4
 800c404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2202      	movs	r2, #2
 800c40a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fa4c 	bl	800c8b8 <HAL_TIM_IC_CaptureCallback>
 800c420:	e005      	b.n	800c42e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa3e 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 fa4f 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	f003 0308 	and.w	r3, r3, #8
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d020      	beq.n	800c480 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f003 0308 	and.w	r3, r3, #8
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01b      	beq.n	800c480 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f06f 0208 	mvn.w	r2, #8
 800c450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2204      	movs	r2, #4
 800c456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	69db      	ldr	r3, [r3, #28]
 800c45e:	f003 0303 	and.w	r3, r3, #3
 800c462:	2b00      	cmp	r3, #0
 800c464:	d003      	beq.n	800c46e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fa26 	bl	800c8b8 <HAL_TIM_IC_CaptureCallback>
 800c46c:	e005      	b.n	800c47a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa18 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 fa29 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	f003 0310 	and.w	r3, r3, #16
 800c486:	2b00      	cmp	r3, #0
 800c488:	d020      	beq.n	800c4cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f003 0310 	and.w	r3, r3, #16
 800c490:	2b00      	cmp	r3, #0
 800c492:	d01b      	beq.n	800c4cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f06f 0210 	mvn.w	r2, #16
 800c49c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2208      	movs	r2, #8
 800c4a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fa00 	bl	800c8b8 <HAL_TIM_IC_CaptureCallback>
 800c4b8:	e005      	b.n	800c4c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f9f2 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fa03 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00c      	beq.n	800c4f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d007      	beq.n	800c4f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f06f 0201 	mvn.w	r2, #1
 800c4e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7f6 ff4a 	bl	8003384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00c      	beq.n	800c514 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c500:	2b00      	cmp	r3, #0
 800c502:	d007      	beq.n	800c514 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c50c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 ff36 	bl	800d380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00c      	beq.n	800c538 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c524:	2b00      	cmp	r3, #0
 800c526:	d007      	beq.n	800c538 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 ff2e 	bl	800d394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00c      	beq.n	800c55c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d007      	beq.n	800c55c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f9c2 	bl	800c8e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f003 0320 	and.w	r3, r3, #32
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00c      	beq.n	800c580 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f003 0320 	and.w	r3, r3, #32
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d007      	beq.n	800c580 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f06f 0220 	mvn.w	r2, #32
 800c578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fef6 	bl	800d36c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c580:	bf00      	nop
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d101      	bne.n	800c5a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	e066      	b.n	800c674 <HAL_TIM_OC_ConfigChannel+0xec>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b14      	cmp	r3, #20
 800c5b2:	d857      	bhi.n	800c664 <HAL_TIM_OC_ConfigChannel+0xdc>
 800c5b4:	a201      	add	r2, pc, #4	; (adr r2, 800c5bc <HAL_TIM_OC_ConfigChannel+0x34>)
 800c5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ba:	bf00      	nop
 800c5bc:	0800c611 	.word	0x0800c611
 800c5c0:	0800c665 	.word	0x0800c665
 800c5c4:	0800c665 	.word	0x0800c665
 800c5c8:	0800c665 	.word	0x0800c665
 800c5cc:	0800c61f 	.word	0x0800c61f
 800c5d0:	0800c665 	.word	0x0800c665
 800c5d4:	0800c665 	.word	0x0800c665
 800c5d8:	0800c665 	.word	0x0800c665
 800c5dc:	0800c62d 	.word	0x0800c62d
 800c5e0:	0800c665 	.word	0x0800c665
 800c5e4:	0800c665 	.word	0x0800c665
 800c5e8:	0800c665 	.word	0x0800c665
 800c5ec:	0800c63b 	.word	0x0800c63b
 800c5f0:	0800c665 	.word	0x0800c665
 800c5f4:	0800c665 	.word	0x0800c665
 800c5f8:	0800c665 	.word	0x0800c665
 800c5fc:	0800c649 	.word	0x0800c649
 800c600:	0800c665 	.word	0x0800c665
 800c604:	0800c665 	.word	0x0800c665
 800c608:	0800c665 	.word	0x0800c665
 800c60c:	0800c657 	.word	0x0800c657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68b9      	ldr	r1, [r7, #8]
 800c616:	4618      	mov	r0, r3
 800c618:	f000 fa06 	bl	800ca28 <TIM_OC1_SetConfig>
      break;
 800c61c:	e025      	b.n	800c66a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68b9      	ldr	r1, [r7, #8]
 800c624:	4618      	mov	r0, r3
 800c626:	f000 fa8f 	bl	800cb48 <TIM_OC2_SetConfig>
      break;
 800c62a:	e01e      	b.n	800c66a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68b9      	ldr	r1, [r7, #8]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 fb12 	bl	800cc5c <TIM_OC3_SetConfig>
      break;
 800c638:	e017      	b.n	800c66a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68b9      	ldr	r1, [r7, #8]
 800c640:	4618      	mov	r0, r3
 800c642:	f000 fb93 	bl	800cd6c <TIM_OC4_SetConfig>
      break;
 800c646:	e010      	b.n	800c66a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68b9      	ldr	r1, [r7, #8]
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fbf6 	bl	800ce40 <TIM_OC5_SetConfig>
      break;
 800c654:	e009      	b.n	800c66a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	68b9      	ldr	r1, [r7, #8]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 fc53 	bl	800cf08 <TIM_OC6_SetConfig>
      break;
 800c662:	e002      	b.n	800c66a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	75fb      	strb	r3, [r7, #23]
      break;
 800c668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c672:	7dfb      	ldrb	r3, [r7, #23]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c692:	2b01      	cmp	r3, #1
 800c694:	d101      	bne.n	800c69a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c696:	2302      	movs	r3, #2
 800c698:	e0ff      	b.n	800c89a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2b14      	cmp	r3, #20
 800c6a6:	f200 80f0 	bhi.w	800c88a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c6aa:	a201      	add	r2, pc, #4	; (adr r2, 800c6b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b0:	0800c705 	.word	0x0800c705
 800c6b4:	0800c88b 	.word	0x0800c88b
 800c6b8:	0800c88b 	.word	0x0800c88b
 800c6bc:	0800c88b 	.word	0x0800c88b
 800c6c0:	0800c745 	.word	0x0800c745
 800c6c4:	0800c88b 	.word	0x0800c88b
 800c6c8:	0800c88b 	.word	0x0800c88b
 800c6cc:	0800c88b 	.word	0x0800c88b
 800c6d0:	0800c787 	.word	0x0800c787
 800c6d4:	0800c88b 	.word	0x0800c88b
 800c6d8:	0800c88b 	.word	0x0800c88b
 800c6dc:	0800c88b 	.word	0x0800c88b
 800c6e0:	0800c7c7 	.word	0x0800c7c7
 800c6e4:	0800c88b 	.word	0x0800c88b
 800c6e8:	0800c88b 	.word	0x0800c88b
 800c6ec:	0800c88b 	.word	0x0800c88b
 800c6f0:	0800c809 	.word	0x0800c809
 800c6f4:	0800c88b 	.word	0x0800c88b
 800c6f8:	0800c88b 	.word	0x0800c88b
 800c6fc:	0800c88b 	.word	0x0800c88b
 800c700:	0800c849 	.word	0x0800c849
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68b9      	ldr	r1, [r7, #8]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 f98c 	bl	800ca28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	699a      	ldr	r2, [r3, #24]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f042 0208 	orr.w	r2, r2, #8
 800c71e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	699a      	ldr	r2, [r3, #24]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f022 0204 	bic.w	r2, r2, #4
 800c72e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	6999      	ldr	r1, [r3, #24]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	691a      	ldr	r2, [r3, #16]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	430a      	orrs	r2, r1
 800c740:	619a      	str	r2, [r3, #24]
      break;
 800c742:	e0a5      	b.n	800c890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68b9      	ldr	r1, [r7, #8]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f9fc 	bl	800cb48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	699a      	ldr	r2, [r3, #24]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c75e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	699a      	ldr	r2, [r3, #24]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c76e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6999      	ldr	r1, [r3, #24]
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	021a      	lsls	r2, r3, #8
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	430a      	orrs	r2, r1
 800c782:	619a      	str	r2, [r3, #24]
      break;
 800c784:	e084      	b.n	800c890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 fa65 	bl	800cc5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	69da      	ldr	r2, [r3, #28]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f042 0208 	orr.w	r2, r2, #8
 800c7a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	69da      	ldr	r2, [r3, #28]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f022 0204 	bic.w	r2, r2, #4
 800c7b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	69d9      	ldr	r1, [r3, #28]
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	691a      	ldr	r2, [r3, #16]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	61da      	str	r2, [r3, #28]
      break;
 800c7c4:	e064      	b.n	800c890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68b9      	ldr	r1, [r7, #8]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 facd 	bl	800cd6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	69da      	ldr	r2, [r3, #28]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	69da      	ldr	r2, [r3, #28]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	69d9      	ldr	r1, [r3, #28]
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	021a      	lsls	r2, r3, #8
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	430a      	orrs	r2, r1
 800c804:	61da      	str	r2, [r3, #28]
      break;
 800c806:	e043      	b.n	800c890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68b9      	ldr	r1, [r7, #8]
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 fb16 	bl	800ce40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f042 0208 	orr.w	r2, r2, #8
 800c822:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f022 0204 	bic.w	r2, r2, #4
 800c832:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	691a      	ldr	r2, [r3, #16]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	430a      	orrs	r2, r1
 800c844:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c846:	e023      	b.n	800c890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68b9      	ldr	r1, [r7, #8]
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 fb5a 	bl	800cf08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c862:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c872:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	021a      	lsls	r2, r3, #8
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	430a      	orrs	r2, r1
 800c886:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c888:	e002      	b.n	800c890 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	75fb      	strb	r3, [r7, #23]
      break;
 800c88e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c898:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop

0800c8a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8ac:	bf00      	nop
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a40      	ldr	r2, [pc, #256]	; (800ca08 <TIM_Base_SetConfig+0x114>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d013      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c912:	d00f      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a3d      	ldr	r2, [pc, #244]	; (800ca0c <TIM_Base_SetConfig+0x118>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d00b      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a3c      	ldr	r2, [pc, #240]	; (800ca10 <TIM_Base_SetConfig+0x11c>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d007      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a3b      	ldr	r2, [pc, #236]	; (800ca14 <TIM_Base_SetConfig+0x120>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d003      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4a3a      	ldr	r2, [pc, #232]	; (800ca18 <TIM_Base_SetConfig+0x124>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d108      	bne.n	800c946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c93a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	4313      	orrs	r3, r2
 800c944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a2f      	ldr	r2, [pc, #188]	; (800ca08 <TIM_Base_SetConfig+0x114>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d01f      	beq.n	800c98e <TIM_Base_SetConfig+0x9a>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c954:	d01b      	beq.n	800c98e <TIM_Base_SetConfig+0x9a>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a2c      	ldr	r2, [pc, #176]	; (800ca0c <TIM_Base_SetConfig+0x118>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d017      	beq.n	800c98e <TIM_Base_SetConfig+0x9a>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a2b      	ldr	r2, [pc, #172]	; (800ca10 <TIM_Base_SetConfig+0x11c>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d013      	beq.n	800c98e <TIM_Base_SetConfig+0x9a>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a2a      	ldr	r2, [pc, #168]	; (800ca14 <TIM_Base_SetConfig+0x120>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d00f      	beq.n	800c98e <TIM_Base_SetConfig+0x9a>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a29      	ldr	r2, [pc, #164]	; (800ca18 <TIM_Base_SetConfig+0x124>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d00b      	beq.n	800c98e <TIM_Base_SetConfig+0x9a>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a28      	ldr	r2, [pc, #160]	; (800ca1c <TIM_Base_SetConfig+0x128>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d007      	beq.n	800c98e <TIM_Base_SetConfig+0x9a>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a27      	ldr	r2, [pc, #156]	; (800ca20 <TIM_Base_SetConfig+0x12c>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d003      	beq.n	800c98e <TIM_Base_SetConfig+0x9a>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a26      	ldr	r2, [pc, #152]	; (800ca24 <TIM_Base_SetConfig+0x130>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d108      	bne.n	800c9a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	689a      	ldr	r2, [r3, #8]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a10      	ldr	r2, [pc, #64]	; (800ca08 <TIM_Base_SetConfig+0x114>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d00f      	beq.n	800c9ec <TIM_Base_SetConfig+0xf8>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a12      	ldr	r2, [pc, #72]	; (800ca18 <TIM_Base_SetConfig+0x124>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d00b      	beq.n	800c9ec <TIM_Base_SetConfig+0xf8>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a11      	ldr	r2, [pc, #68]	; (800ca1c <TIM_Base_SetConfig+0x128>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d007      	beq.n	800c9ec <TIM_Base_SetConfig+0xf8>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a10      	ldr	r2, [pc, #64]	; (800ca20 <TIM_Base_SetConfig+0x12c>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d003      	beq.n	800c9ec <TIM_Base_SetConfig+0xf8>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a0f      	ldr	r2, [pc, #60]	; (800ca24 <TIM_Base_SetConfig+0x130>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d103      	bne.n	800c9f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	691a      	ldr	r2, [r3, #16]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	615a      	str	r2, [r3, #20]
}
 800c9fa:	bf00      	nop
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	40012c00 	.word	0x40012c00
 800ca0c:	40000400 	.word	0x40000400
 800ca10:	40000800 	.word	0x40000800
 800ca14:	40000c00 	.word	0x40000c00
 800ca18:	40013400 	.word	0x40013400
 800ca1c:	40014000 	.word	0x40014000
 800ca20:	40014400 	.word	0x40014400
 800ca24:	40014800 	.word	0x40014800

0800ca28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b087      	sub	sp, #28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	f023 0201 	bic.w	r2, r3, #1
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f023 0303 	bic.w	r3, r3, #3
 800ca62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	f023 0302 	bic.w	r3, r3, #2
 800ca74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a2c      	ldr	r2, [pc, #176]	; (800cb34 <TIM_OC1_SetConfig+0x10c>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d00f      	beq.n	800caa8 <TIM_OC1_SetConfig+0x80>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a2b      	ldr	r2, [pc, #172]	; (800cb38 <TIM_OC1_SetConfig+0x110>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d00b      	beq.n	800caa8 <TIM_OC1_SetConfig+0x80>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a2a      	ldr	r2, [pc, #168]	; (800cb3c <TIM_OC1_SetConfig+0x114>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d007      	beq.n	800caa8 <TIM_OC1_SetConfig+0x80>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a29      	ldr	r2, [pc, #164]	; (800cb40 <TIM_OC1_SetConfig+0x118>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d003      	beq.n	800caa8 <TIM_OC1_SetConfig+0x80>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4a28      	ldr	r2, [pc, #160]	; (800cb44 <TIM_OC1_SetConfig+0x11c>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d10c      	bne.n	800cac2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	f023 0308 	bic.w	r3, r3, #8
 800caae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f023 0304 	bic.w	r3, r3, #4
 800cac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	4a1b      	ldr	r2, [pc, #108]	; (800cb34 <TIM_OC1_SetConfig+0x10c>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d00f      	beq.n	800caea <TIM_OC1_SetConfig+0xc2>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4a1a      	ldr	r2, [pc, #104]	; (800cb38 <TIM_OC1_SetConfig+0x110>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d00b      	beq.n	800caea <TIM_OC1_SetConfig+0xc2>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4a19      	ldr	r2, [pc, #100]	; (800cb3c <TIM_OC1_SetConfig+0x114>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d007      	beq.n	800caea <TIM_OC1_SetConfig+0xc2>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a18      	ldr	r2, [pc, #96]	; (800cb40 <TIM_OC1_SetConfig+0x118>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d003      	beq.n	800caea <TIM_OC1_SetConfig+0xc2>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a17      	ldr	r2, [pc, #92]	; (800cb44 <TIM_OC1_SetConfig+0x11c>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d111      	bne.n	800cb0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800caf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	693a      	ldr	r2, [r7, #16]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	699b      	ldr	r3, [r3, #24]
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	697a      	ldr	r2, [r7, #20]
 800cb26:	621a      	str	r2, [r3, #32]
}
 800cb28:	bf00      	nop
 800cb2a:	371c      	adds	r7, #28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	40012c00 	.word	0x40012c00
 800cb38:	40013400 	.word	0x40013400
 800cb3c:	40014000 	.word	0x40014000
 800cb40:	40014400 	.word	0x40014400
 800cb44:	40014800 	.word	0x40014800

0800cb48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b087      	sub	sp, #28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	f023 0210 	bic.w	r2, r3, #16
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	021b      	lsls	r3, r3, #8
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	f023 0320 	bic.w	r3, r3, #32
 800cb96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	011b      	lsls	r3, r3, #4
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a28      	ldr	r2, [pc, #160]	; (800cc48 <TIM_OC2_SetConfig+0x100>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d003      	beq.n	800cbb4 <TIM_OC2_SetConfig+0x6c>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a27      	ldr	r2, [pc, #156]	; (800cc4c <TIM_OC2_SetConfig+0x104>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d10d      	bne.n	800cbd0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	011b      	lsls	r3, r3, #4
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4a1d      	ldr	r2, [pc, #116]	; (800cc48 <TIM_OC2_SetConfig+0x100>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d00f      	beq.n	800cbf8 <TIM_OC2_SetConfig+0xb0>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a1c      	ldr	r2, [pc, #112]	; (800cc4c <TIM_OC2_SetConfig+0x104>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d00b      	beq.n	800cbf8 <TIM_OC2_SetConfig+0xb0>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a1b      	ldr	r2, [pc, #108]	; (800cc50 <TIM_OC2_SetConfig+0x108>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d007      	beq.n	800cbf8 <TIM_OC2_SetConfig+0xb0>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4a1a      	ldr	r2, [pc, #104]	; (800cc54 <TIM_OC2_SetConfig+0x10c>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d003      	beq.n	800cbf8 <TIM_OC2_SetConfig+0xb0>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a19      	ldr	r2, [pc, #100]	; (800cc58 <TIM_OC2_SetConfig+0x110>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d113      	bne.n	800cc20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cbfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	693a      	ldr	r2, [r7, #16]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	685a      	ldr	r2, [r3, #4]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	621a      	str	r2, [r3, #32]
}
 800cc3a:	bf00      	nop
 800cc3c:	371c      	adds	r7, #28
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	40012c00 	.word	0x40012c00
 800cc4c:	40013400 	.word	0x40013400
 800cc50:	40014000 	.word	0x40014000
 800cc54:	40014400 	.word	0x40014400
 800cc58:	40014800 	.word	0x40014800

0800cc5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b087      	sub	sp, #28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6a1b      	ldr	r3, [r3, #32]
 800cc70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f023 0303 	bic.w	r3, r3, #3
 800cc96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	021b      	lsls	r3, r3, #8
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a27      	ldr	r2, [pc, #156]	; (800cd58 <TIM_OC3_SetConfig+0xfc>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d003      	beq.n	800ccc6 <TIM_OC3_SetConfig+0x6a>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4a26      	ldr	r2, [pc, #152]	; (800cd5c <TIM_OC3_SetConfig+0x100>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d10d      	bne.n	800cce2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	021b      	lsls	r3, r3, #8
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a1c      	ldr	r2, [pc, #112]	; (800cd58 <TIM_OC3_SetConfig+0xfc>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d00f      	beq.n	800cd0a <TIM_OC3_SetConfig+0xae>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a1b      	ldr	r2, [pc, #108]	; (800cd5c <TIM_OC3_SetConfig+0x100>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d00b      	beq.n	800cd0a <TIM_OC3_SetConfig+0xae>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a1a      	ldr	r2, [pc, #104]	; (800cd60 <TIM_OC3_SetConfig+0x104>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d007      	beq.n	800cd0a <TIM_OC3_SetConfig+0xae>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a19      	ldr	r2, [pc, #100]	; (800cd64 <TIM_OC3_SetConfig+0x108>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d003      	beq.n	800cd0a <TIM_OC3_SetConfig+0xae>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a18      	ldr	r2, [pc, #96]	; (800cd68 <TIM_OC3_SetConfig+0x10c>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d113      	bne.n	800cd32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	011b      	lsls	r3, r3, #4
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	693a      	ldr	r2, [r7, #16]
 800cd36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	697a      	ldr	r2, [r7, #20]
 800cd4a:	621a      	str	r2, [r3, #32]
}
 800cd4c:	bf00      	nop
 800cd4e:	371c      	adds	r7, #28
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	40012c00 	.word	0x40012c00
 800cd5c:	40013400 	.word	0x40013400
 800cd60:	40014000 	.word	0x40014000
 800cd64:	40014400 	.word	0x40014400
 800cd68:	40014800 	.word	0x40014800

0800cd6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b087      	sub	sp, #28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a1b      	ldr	r3, [r3, #32]
 800cd80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	69db      	ldr	r3, [r3, #28]
 800cd92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cda6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	021b      	lsls	r3, r3, #8
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	031b      	lsls	r3, r3, #12
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a18      	ldr	r2, [pc, #96]	; (800ce2c <TIM_OC4_SetConfig+0xc0>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d00f      	beq.n	800cdf0 <TIM_OC4_SetConfig+0x84>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4a17      	ldr	r2, [pc, #92]	; (800ce30 <TIM_OC4_SetConfig+0xc4>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d00b      	beq.n	800cdf0 <TIM_OC4_SetConfig+0x84>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a16      	ldr	r2, [pc, #88]	; (800ce34 <TIM_OC4_SetConfig+0xc8>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d007      	beq.n	800cdf0 <TIM_OC4_SetConfig+0x84>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a15      	ldr	r2, [pc, #84]	; (800ce38 <TIM_OC4_SetConfig+0xcc>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d003      	beq.n	800cdf0 <TIM_OC4_SetConfig+0x84>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a14      	ldr	r2, [pc, #80]	; (800ce3c <TIM_OC4_SetConfig+0xd0>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d109      	bne.n	800ce04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	695b      	ldr	r3, [r3, #20]
 800cdfc:	019b      	lsls	r3, r3, #6
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	685a      	ldr	r2, [r3, #4]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	621a      	str	r2, [r3, #32]
}
 800ce1e:	bf00      	nop
 800ce20:	371c      	adds	r7, #28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	40012c00 	.word	0x40012c00
 800ce30:	40013400 	.word	0x40013400
 800ce34:	40014000 	.word	0x40014000
 800ce38:	40014400 	.word	0x40014400
 800ce3c:	40014800 	.word	0x40014800

0800ce40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b087      	sub	sp, #28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ce84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	041b      	lsls	r3, r3, #16
 800ce8c:	693a      	ldr	r2, [r7, #16]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a17      	ldr	r2, [pc, #92]	; (800cef4 <TIM_OC5_SetConfig+0xb4>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d00f      	beq.n	800ceba <TIM_OC5_SetConfig+0x7a>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a16      	ldr	r2, [pc, #88]	; (800cef8 <TIM_OC5_SetConfig+0xb8>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d00b      	beq.n	800ceba <TIM_OC5_SetConfig+0x7a>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a15      	ldr	r2, [pc, #84]	; (800cefc <TIM_OC5_SetConfig+0xbc>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d007      	beq.n	800ceba <TIM_OC5_SetConfig+0x7a>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4a14      	ldr	r2, [pc, #80]	; (800cf00 <TIM_OC5_SetConfig+0xc0>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d003      	beq.n	800ceba <TIM_OC5_SetConfig+0x7a>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a13      	ldr	r2, [pc, #76]	; (800cf04 <TIM_OC5_SetConfig+0xc4>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d109      	bne.n	800cece <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cec0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	021b      	lsls	r3, r3, #8
 800cec8:	697a      	ldr	r2, [r7, #20]
 800ceca:	4313      	orrs	r3, r2
 800cecc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	621a      	str	r2, [r3, #32]
}
 800cee8:	bf00      	nop
 800ceea:	371c      	adds	r7, #28
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	40012c00 	.word	0x40012c00
 800cef8:	40013400 	.word	0x40013400
 800cefc:	40014000 	.word	0x40014000
 800cf00:	40014400 	.word	0x40014400
 800cf04:	40014800 	.word	0x40014800

0800cf08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a1b      	ldr	r3, [r3, #32]
 800cf16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a1b      	ldr	r3, [r3, #32]
 800cf1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	021b      	lsls	r3, r3, #8
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	051b      	lsls	r3, r3, #20
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a18      	ldr	r2, [pc, #96]	; (800cfc0 <TIM_OC6_SetConfig+0xb8>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d00f      	beq.n	800cf84 <TIM_OC6_SetConfig+0x7c>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a17      	ldr	r2, [pc, #92]	; (800cfc4 <TIM_OC6_SetConfig+0xbc>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d00b      	beq.n	800cf84 <TIM_OC6_SetConfig+0x7c>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4a16      	ldr	r2, [pc, #88]	; (800cfc8 <TIM_OC6_SetConfig+0xc0>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d007      	beq.n	800cf84 <TIM_OC6_SetConfig+0x7c>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4a15      	ldr	r2, [pc, #84]	; (800cfcc <TIM_OC6_SetConfig+0xc4>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d003      	beq.n	800cf84 <TIM_OC6_SetConfig+0x7c>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a14      	ldr	r2, [pc, #80]	; (800cfd0 <TIM_OC6_SetConfig+0xc8>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d109      	bne.n	800cf98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	695b      	ldr	r3, [r3, #20]
 800cf90:	029b      	lsls	r3, r3, #10
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	693a      	ldr	r2, [r7, #16]
 800cfb0:	621a      	str	r2, [r3, #32]
}
 800cfb2:	bf00      	nop
 800cfb4:	371c      	adds	r7, #28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	40012c00 	.word	0x40012c00
 800cfc4:	40013400 	.word	0x40013400
 800cfc8:	40014000 	.word	0x40014000
 800cfcc:	40014400 	.word	0x40014400
 800cfd0:	40014800 	.word	0x40014800

0800cfd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d101      	bne.n	800cfec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfe8:	2302      	movs	r3, #2
 800cfea:	e068      	b.n	800d0be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2202      	movs	r2, #2
 800cff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a2e      	ldr	r2, [pc, #184]	; (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d004      	beq.n	800d020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a2d      	ldr	r2, [pc, #180]	; (800d0d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d108      	bne.n	800d032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	4313      	orrs	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a1e      	ldr	r2, [pc, #120]	; (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d01d      	beq.n	800d092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d05e:	d018      	beq.n	800d092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a1b      	ldr	r2, [pc, #108]	; (800d0d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d013      	beq.n	800d092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a1a      	ldr	r2, [pc, #104]	; (800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d00e      	beq.n	800d092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a18      	ldr	r2, [pc, #96]	; (800d0dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d009      	beq.n	800d092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a13      	ldr	r2, [pc, #76]	; (800d0d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d004      	beq.n	800d092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a14      	ldr	r2, [pc, #80]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d10c      	bne.n	800d0ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3714      	adds	r7, #20
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	40012c00 	.word	0x40012c00
 800d0d0:	40013400 	.word	0x40013400
 800d0d4:	40000400 	.word	0x40000400
 800d0d8:	40000800 	.word	0x40000800
 800d0dc:	40000c00 	.word	0x40000c00
 800d0e0:	40014000 	.word	0x40014000

0800d0e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d101      	bne.n	800d100 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	e065      	b.n	800d1cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	4313      	orrs	r3, r2
 800d114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	4313      	orrs	r3, r2
 800d122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	4313      	orrs	r3, r2
 800d130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	4313      	orrs	r3, r2
 800d15a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d166:	4313      	orrs	r3, r2
 800d168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	041b      	lsls	r3, r3, #16
 800d176:	4313      	orrs	r3, r2
 800d178:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4a16      	ldr	r2, [pc, #88]	; (800d1d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d004      	beq.n	800d18e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a14      	ldr	r2, [pc, #80]	; (800d1dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d115      	bne.n	800d1ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d198:	051b      	lsls	r3, r3, #20
 800d19a:	4313      	orrs	r3, r2
 800d19c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	69db      	ldr	r3, [r3, #28]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3714      	adds	r7, #20
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	40012c00 	.word	0x40012c00
 800d1dc:	40013400 	.word	0x40013400

0800d1e0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b08b      	sub	sp, #44	; 0x2c
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d101      	bne.n	800d200 <HAL_TIMEx_ConfigBreakInput+0x20>
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	e0af      	b.n	800d360 <HAL_TIMEx_ConfigBreakInput+0x180>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	2b07      	cmp	r3, #7
 800d210:	d83a      	bhi.n	800d288 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800d212:	a201      	add	r2, pc, #4	; (adr r2, 800d218 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800d214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d218:	0800d239 	.word	0x0800d239
 800d21c:	0800d24d 	.word	0x0800d24d
 800d220:	0800d289 	.word	0x0800d289
 800d224:	0800d261 	.word	0x0800d261
 800d228:	0800d289 	.word	0x0800d289
 800d22c:	0800d289 	.word	0x0800d289
 800d230:	0800d289 	.word	0x0800d289
 800d234:	0800d275 	.word	0x0800d275
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800d238:	2301      	movs	r3, #1
 800d23a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800d23c:	2300      	movs	r3, #0
 800d23e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800d240:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d244:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800d246:	2309      	movs	r3, #9
 800d248:	613b      	str	r3, [r7, #16]
      break;
 800d24a:	e026      	b.n	800d29a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800d24c:	2302      	movs	r3, #2
 800d24e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800d250:	2301      	movs	r3, #1
 800d252:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800d254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d258:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800d25a:	230a      	movs	r3, #10
 800d25c:	613b      	str	r3, [r7, #16]
      break;
 800d25e:	e01c      	b.n	800d29a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800d260:	2304      	movs	r3, #4
 800d262:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800d264:	2302      	movs	r3, #2
 800d266:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800d268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d26c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800d26e:	230b      	movs	r3, #11
 800d270:	613b      	str	r3, [r7, #16]
      break;
 800d272:	e012      	b.n	800d29a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800d274:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d278:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800d27a:	2308      	movs	r3, #8
 800d27c:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800d27e:	2300      	movs	r3, #0
 800d280:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800d282:	2300      	movs	r3, #0
 800d284:	613b      	str	r3, [r7, #16]
      break;
 800d286:	e008      	b.n	800d29a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800d288:	2300      	movs	r3, #0
 800d28a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800d28c:	2300      	movs	r3, #0
 800d28e:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800d290:	2300      	movs	r3, #0
 800d292:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800d294:	2300      	movs	r3, #0
 800d296:	613b      	str	r3, [r7, #16]
      break;
 800d298:	bf00      	nop
    }
  }

  switch (BreakInput)
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d003      	beq.n	800d2a8 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d029      	beq.n	800d2fa <HAL_TIMEx_ConfigBreakInput+0x11a>
 800d2a6:	e051      	b.n	800d34c <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2ae:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	43db      	mvns	r3, r3
 800d2b4:	6a3a      	ldr	r2, [r7, #32]
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	409a      	lsls	r2, r3
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	4013      	ands	r3, r2
 800d2c6:	6a3a      	ldr	r2, [r7, #32]
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b08      	cmp	r3, #8
 800d2d2:	d00d      	beq.n	800d2f0 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	43db      	mvns	r3, r3
 800d2d8:	6a3a      	ldr	r2, [r7, #32]
 800d2da:	4013      	ands	r3, r2
 800d2dc:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	689a      	ldr	r2, [r3, #8]
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	409a      	lsls	r2, r3
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	6a3a      	ldr	r2, [r7, #32]
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6a3a      	ldr	r2, [r7, #32]
 800d2f6:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800d2f8:	e02c      	b.n	800d354 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d300:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	43db      	mvns	r3, r3
 800d306:	6a3a      	ldr	r2, [r7, #32]
 800d308:	4013      	ands	r3, r2
 800d30a:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	409a      	lsls	r2, r3
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	4013      	ands	r3, r2
 800d318:	6a3a      	ldr	r2, [r7, #32]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b08      	cmp	r3, #8
 800d324:	d00d      	beq.n	800d342 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	43db      	mvns	r3, r3
 800d32a:	6a3a      	ldr	r2, [r7, #32]
 800d32c:	4013      	ands	r3, r2
 800d32e:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	689a      	ldr	r2, [r3, #8]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	409a      	lsls	r2, r3
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	4013      	ands	r3, r2
 800d33c:	6a3a      	ldr	r2, [r7, #32]
 800d33e:	4313      	orrs	r3, r2
 800d340:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6a3a      	ldr	r2, [r7, #32]
 800d348:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800d34a:	e003      	b.n	800d354 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800d352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d360:	4618      	mov	r0, r3
 800d362:	372c      	adds	r7, #44	; 0x2c
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d374:	bf00      	nop
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d388:	bf00      	nop
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e042      	b.n	800d440 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d106      	bne.n	800d3d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7f6 f9a9 	bl	8003724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2224      	movs	r2, #36	; 0x24
 800d3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f022 0201 	bic.w	r2, r2, #1
 800d3e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d002      	beq.n	800d3f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fbb4 	bl	800db60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f8b5 	bl	800d568 <UART_SetConfig>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b01      	cmp	r3, #1
 800d402:	d101      	bne.n	800d408 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	e01b      	b.n	800d440 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	689a      	ldr	r2, [r3, #8]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f042 0201 	orr.w	r2, r2, #1
 800d436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 fc33 	bl	800dca4 <UART_CheckIdleState>
 800d43e:	4603      	mov	r3, r0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08a      	sub	sp, #40	; 0x28
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	603b      	str	r3, [r7, #0]
 800d454:	4613      	mov	r3, r2
 800d456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d45e:	2b20      	cmp	r3, #32
 800d460:	d17c      	bne.n	800d55c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <HAL_UART_Transmit+0x26>
 800d468:	88fb      	ldrh	r3, [r7, #6]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d101      	bne.n	800d472 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	e075      	b.n	800d55e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2200      	movs	r2, #0
 800d476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2221      	movs	r2, #33	; 0x21
 800d47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d482:	f7f8 fce7 	bl	8005e54 <HAL_GetTick>
 800d486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	88fa      	ldrh	r2, [r7, #6]
 800d48c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	88fa      	ldrh	r2, [r7, #6]
 800d494:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4a0:	d108      	bne.n	800d4b4 <HAL_UART_Transmit+0x6c>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d104      	bne.n	800d4b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	61bb      	str	r3, [r7, #24]
 800d4b2:	e003      	b.n	800d4bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d4bc:	e031      	b.n	800d522 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	2180      	movs	r1, #128	; 0x80
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f000 fc95 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d005      	beq.n	800d4e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2220      	movs	r2, #32
 800d4d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d4dc:	2303      	movs	r3, #3
 800d4de:	e03e      	b.n	800d55e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10b      	bne.n	800d4fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	881a      	ldrh	r2, [r3, #0]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4f2:	b292      	uxth	r2, r2
 800d4f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	3302      	adds	r3, #2
 800d4fa:	61bb      	str	r3, [r7, #24]
 800d4fc:	e008      	b.n	800d510 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	781a      	ldrb	r2, [r3, #0]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	b292      	uxth	r2, r2
 800d508:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	3301      	adds	r3, #1
 800d50e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d516:	b29b      	uxth	r3, r3
 800d518:	3b01      	subs	r3, #1
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d528:	b29b      	uxth	r3, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1c7      	bne.n	800d4be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2200      	movs	r2, #0
 800d536:	2140      	movs	r1, #64	; 0x40
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f000 fc5d 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d005      	beq.n	800d550 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2220      	movs	r2, #32
 800d548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d54c:	2303      	movs	r3, #3
 800d54e:	e006      	b.n	800d55e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2220      	movs	r2, #32
 800d554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	e000      	b.n	800d55e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800d55c:	2302      	movs	r3, #2
  }
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3720      	adds	r7, #32
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
	...

0800d568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d56c:	b08c      	sub	sp, #48	; 0x30
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d572:	2300      	movs	r3, #0
 800d574:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	689a      	ldr	r2, [r3, #8]
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	691b      	ldr	r3, [r3, #16]
 800d580:	431a      	orrs	r2, r3
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	695b      	ldr	r3, [r3, #20]
 800d586:	431a      	orrs	r2, r3
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	69db      	ldr	r3, [r3, #28]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	4baa      	ldr	r3, [pc, #680]	; (800d840 <UART_SetConfig+0x2d8>)
 800d598:	4013      	ands	r3, r2
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	6812      	ldr	r2, [r2, #0]
 800d59e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5a0:	430b      	orrs	r3, r1
 800d5a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	68da      	ldr	r2, [r3, #12]
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	430a      	orrs	r2, r1
 800d5b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	699b      	ldr	r3, [r3, #24]
 800d5be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a9f      	ldr	r2, [pc, #636]	; (800d844 <UART_SetConfig+0x2dc>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d004      	beq.n	800d5d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d5de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	6812      	ldr	r2, [r2, #0]
 800d5e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5e8:	430b      	orrs	r3, r1
 800d5ea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f2:	f023 010f 	bic.w	r1, r3, #15
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	430a      	orrs	r2, r1
 800d600:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a90      	ldr	r2, [pc, #576]	; (800d848 <UART_SetConfig+0x2e0>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d125      	bne.n	800d658 <UART_SetConfig+0xf0>
 800d60c:	4b8f      	ldr	r3, [pc, #572]	; (800d84c <UART_SetConfig+0x2e4>)
 800d60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d612:	f003 0303 	and.w	r3, r3, #3
 800d616:	2b03      	cmp	r3, #3
 800d618:	d81a      	bhi.n	800d650 <UART_SetConfig+0xe8>
 800d61a:	a201      	add	r2, pc, #4	; (adr r2, 800d620 <UART_SetConfig+0xb8>)
 800d61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d620:	0800d631 	.word	0x0800d631
 800d624:	0800d641 	.word	0x0800d641
 800d628:	0800d639 	.word	0x0800d639
 800d62c:	0800d649 	.word	0x0800d649
 800d630:	2301      	movs	r3, #1
 800d632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d636:	e116      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d638:	2302      	movs	r3, #2
 800d63a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d63e:	e112      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d640:	2304      	movs	r3, #4
 800d642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d646:	e10e      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d648:	2308      	movs	r3, #8
 800d64a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d64e:	e10a      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d650:	2310      	movs	r3, #16
 800d652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d656:	e106      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a7c      	ldr	r2, [pc, #496]	; (800d850 <UART_SetConfig+0x2e8>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d138      	bne.n	800d6d4 <UART_SetConfig+0x16c>
 800d662:	4b7a      	ldr	r3, [pc, #488]	; (800d84c <UART_SetConfig+0x2e4>)
 800d664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d668:	f003 030c 	and.w	r3, r3, #12
 800d66c:	2b0c      	cmp	r3, #12
 800d66e:	d82d      	bhi.n	800d6cc <UART_SetConfig+0x164>
 800d670:	a201      	add	r2, pc, #4	; (adr r2, 800d678 <UART_SetConfig+0x110>)
 800d672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d676:	bf00      	nop
 800d678:	0800d6ad 	.word	0x0800d6ad
 800d67c:	0800d6cd 	.word	0x0800d6cd
 800d680:	0800d6cd 	.word	0x0800d6cd
 800d684:	0800d6cd 	.word	0x0800d6cd
 800d688:	0800d6bd 	.word	0x0800d6bd
 800d68c:	0800d6cd 	.word	0x0800d6cd
 800d690:	0800d6cd 	.word	0x0800d6cd
 800d694:	0800d6cd 	.word	0x0800d6cd
 800d698:	0800d6b5 	.word	0x0800d6b5
 800d69c:	0800d6cd 	.word	0x0800d6cd
 800d6a0:	0800d6cd 	.word	0x0800d6cd
 800d6a4:	0800d6cd 	.word	0x0800d6cd
 800d6a8:	0800d6c5 	.word	0x0800d6c5
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6b2:	e0d8      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6ba:	e0d4      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d6bc:	2304      	movs	r3, #4
 800d6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6c2:	e0d0      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d6c4:	2308      	movs	r3, #8
 800d6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6ca:	e0cc      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d6cc:	2310      	movs	r3, #16
 800d6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6d2:	e0c8      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a5e      	ldr	r2, [pc, #376]	; (800d854 <UART_SetConfig+0x2ec>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d125      	bne.n	800d72a <UART_SetConfig+0x1c2>
 800d6de:	4b5b      	ldr	r3, [pc, #364]	; (800d84c <UART_SetConfig+0x2e4>)
 800d6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d6e8:	2b30      	cmp	r3, #48	; 0x30
 800d6ea:	d016      	beq.n	800d71a <UART_SetConfig+0x1b2>
 800d6ec:	2b30      	cmp	r3, #48	; 0x30
 800d6ee:	d818      	bhi.n	800d722 <UART_SetConfig+0x1ba>
 800d6f0:	2b20      	cmp	r3, #32
 800d6f2:	d00a      	beq.n	800d70a <UART_SetConfig+0x1a2>
 800d6f4:	2b20      	cmp	r3, #32
 800d6f6:	d814      	bhi.n	800d722 <UART_SetConfig+0x1ba>
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d002      	beq.n	800d702 <UART_SetConfig+0x19a>
 800d6fc:	2b10      	cmp	r3, #16
 800d6fe:	d008      	beq.n	800d712 <UART_SetConfig+0x1aa>
 800d700:	e00f      	b.n	800d722 <UART_SetConfig+0x1ba>
 800d702:	2300      	movs	r3, #0
 800d704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d708:	e0ad      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d70a:	2302      	movs	r3, #2
 800d70c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d710:	e0a9      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d712:	2304      	movs	r3, #4
 800d714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d718:	e0a5      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d71a:	2308      	movs	r3, #8
 800d71c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d720:	e0a1      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d722:	2310      	movs	r3, #16
 800d724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d728:	e09d      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a4a      	ldr	r2, [pc, #296]	; (800d858 <UART_SetConfig+0x2f0>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d125      	bne.n	800d780 <UART_SetConfig+0x218>
 800d734:	4b45      	ldr	r3, [pc, #276]	; (800d84c <UART_SetConfig+0x2e4>)
 800d736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d73a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d73e:	2bc0      	cmp	r3, #192	; 0xc0
 800d740:	d016      	beq.n	800d770 <UART_SetConfig+0x208>
 800d742:	2bc0      	cmp	r3, #192	; 0xc0
 800d744:	d818      	bhi.n	800d778 <UART_SetConfig+0x210>
 800d746:	2b80      	cmp	r3, #128	; 0x80
 800d748:	d00a      	beq.n	800d760 <UART_SetConfig+0x1f8>
 800d74a:	2b80      	cmp	r3, #128	; 0x80
 800d74c:	d814      	bhi.n	800d778 <UART_SetConfig+0x210>
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d002      	beq.n	800d758 <UART_SetConfig+0x1f0>
 800d752:	2b40      	cmp	r3, #64	; 0x40
 800d754:	d008      	beq.n	800d768 <UART_SetConfig+0x200>
 800d756:	e00f      	b.n	800d778 <UART_SetConfig+0x210>
 800d758:	2300      	movs	r3, #0
 800d75a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d75e:	e082      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d760:	2302      	movs	r3, #2
 800d762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d766:	e07e      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d768:	2304      	movs	r3, #4
 800d76a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d76e:	e07a      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d770:	2308      	movs	r3, #8
 800d772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d776:	e076      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d778:	2310      	movs	r3, #16
 800d77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d77e:	e072      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a35      	ldr	r2, [pc, #212]	; (800d85c <UART_SetConfig+0x2f4>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d12a      	bne.n	800d7e0 <UART_SetConfig+0x278>
 800d78a:	4b30      	ldr	r3, [pc, #192]	; (800d84c <UART_SetConfig+0x2e4>)
 800d78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d798:	d01a      	beq.n	800d7d0 <UART_SetConfig+0x268>
 800d79a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d79e:	d81b      	bhi.n	800d7d8 <UART_SetConfig+0x270>
 800d7a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7a4:	d00c      	beq.n	800d7c0 <UART_SetConfig+0x258>
 800d7a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7aa:	d815      	bhi.n	800d7d8 <UART_SetConfig+0x270>
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d003      	beq.n	800d7b8 <UART_SetConfig+0x250>
 800d7b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b4:	d008      	beq.n	800d7c8 <UART_SetConfig+0x260>
 800d7b6:	e00f      	b.n	800d7d8 <UART_SetConfig+0x270>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7be:	e052      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7c6:	e04e      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d7c8:	2304      	movs	r3, #4
 800d7ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7ce:	e04a      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d7d0:	2308      	movs	r3, #8
 800d7d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7d6:	e046      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d7d8:	2310      	movs	r3, #16
 800d7da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7de:	e042      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a17      	ldr	r2, [pc, #92]	; (800d844 <UART_SetConfig+0x2dc>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d13a      	bne.n	800d860 <UART_SetConfig+0x2f8>
 800d7ea:	4b18      	ldr	r3, [pc, #96]	; (800d84c <UART_SetConfig+0x2e4>)
 800d7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d7f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d7f8:	d01a      	beq.n	800d830 <UART_SetConfig+0x2c8>
 800d7fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d7fe:	d81b      	bhi.n	800d838 <UART_SetConfig+0x2d0>
 800d800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d804:	d00c      	beq.n	800d820 <UART_SetConfig+0x2b8>
 800d806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d80a:	d815      	bhi.n	800d838 <UART_SetConfig+0x2d0>
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d003      	beq.n	800d818 <UART_SetConfig+0x2b0>
 800d810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d814:	d008      	beq.n	800d828 <UART_SetConfig+0x2c0>
 800d816:	e00f      	b.n	800d838 <UART_SetConfig+0x2d0>
 800d818:	2300      	movs	r3, #0
 800d81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d81e:	e022      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d820:	2302      	movs	r3, #2
 800d822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d826:	e01e      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d828:	2304      	movs	r3, #4
 800d82a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d82e:	e01a      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d830:	2308      	movs	r3, #8
 800d832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d836:	e016      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d838:	2310      	movs	r3, #16
 800d83a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d83e:	e012      	b.n	800d866 <UART_SetConfig+0x2fe>
 800d840:	cfff69f3 	.word	0xcfff69f3
 800d844:	40008000 	.word	0x40008000
 800d848:	40013800 	.word	0x40013800
 800d84c:	40021000 	.word	0x40021000
 800d850:	40004400 	.word	0x40004400
 800d854:	40004800 	.word	0x40004800
 800d858:	40004c00 	.word	0x40004c00
 800d85c:	40005000 	.word	0x40005000
 800d860:	2310      	movs	r3, #16
 800d862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4aae      	ldr	r2, [pc, #696]	; (800db24 <UART_SetConfig+0x5bc>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	f040 8097 	bne.w	800d9a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d872:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d876:	2b08      	cmp	r3, #8
 800d878:	d823      	bhi.n	800d8c2 <UART_SetConfig+0x35a>
 800d87a:	a201      	add	r2, pc, #4	; (adr r2, 800d880 <UART_SetConfig+0x318>)
 800d87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d880:	0800d8a5 	.word	0x0800d8a5
 800d884:	0800d8c3 	.word	0x0800d8c3
 800d888:	0800d8ad 	.word	0x0800d8ad
 800d88c:	0800d8c3 	.word	0x0800d8c3
 800d890:	0800d8b3 	.word	0x0800d8b3
 800d894:	0800d8c3 	.word	0x0800d8c3
 800d898:	0800d8c3 	.word	0x0800d8c3
 800d89c:	0800d8c3 	.word	0x0800d8c3
 800d8a0:	0800d8bb 	.word	0x0800d8bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8a4:	f7fb fafa 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800d8a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d8aa:	e010      	b.n	800d8ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d8ac:	4b9e      	ldr	r3, [pc, #632]	; (800db28 <UART_SetConfig+0x5c0>)
 800d8ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d8b0:	e00d      	b.n	800d8ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d8b2:	f7fb fa5b 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800d8b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d8b8:	e009      	b.n	800d8ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d8c0:	e005      	b.n	800d8ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d8cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 8130 	beq.w	800db36 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8da:	4a94      	ldr	r2, [pc, #592]	; (800db2c <UART_SetConfig+0x5c4>)
 800d8dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	4413      	add	r3, r2
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d305      	bcc.n	800d906 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	429a      	cmp	r2, r3
 800d904:	d903      	bls.n	800d90e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d906:	2301      	movs	r3, #1
 800d908:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d90c:	e113      	b.n	800db36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	2200      	movs	r2, #0
 800d912:	60bb      	str	r3, [r7, #8]
 800d914:	60fa      	str	r2, [r7, #12]
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	4a84      	ldr	r2, [pc, #528]	; (800db2c <UART_SetConfig+0x5c4>)
 800d91c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d920:	b29b      	uxth	r3, r3
 800d922:	2200      	movs	r2, #0
 800d924:	603b      	str	r3, [r7, #0]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d92c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d930:	f7f3 f952 	bl	8000bd8 <__aeabi_uldivmod>
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	4610      	mov	r0, r2
 800d93a:	4619      	mov	r1, r3
 800d93c:	f04f 0200 	mov.w	r2, #0
 800d940:	f04f 0300 	mov.w	r3, #0
 800d944:	020b      	lsls	r3, r1, #8
 800d946:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d94a:	0202      	lsls	r2, r0, #8
 800d94c:	6979      	ldr	r1, [r7, #20]
 800d94e:	6849      	ldr	r1, [r1, #4]
 800d950:	0849      	lsrs	r1, r1, #1
 800d952:	2000      	movs	r0, #0
 800d954:	460c      	mov	r4, r1
 800d956:	4605      	mov	r5, r0
 800d958:	eb12 0804 	adds.w	r8, r2, r4
 800d95c:	eb43 0905 	adc.w	r9, r3, r5
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	469a      	mov	sl, r3
 800d968:	4693      	mov	fp, r2
 800d96a:	4652      	mov	r2, sl
 800d96c:	465b      	mov	r3, fp
 800d96e:	4640      	mov	r0, r8
 800d970:	4649      	mov	r1, r9
 800d972:	f7f3 f931 	bl	8000bd8 <__aeabi_uldivmod>
 800d976:	4602      	mov	r2, r0
 800d978:	460b      	mov	r3, r1
 800d97a:	4613      	mov	r3, r2
 800d97c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d984:	d308      	bcc.n	800d998 <UART_SetConfig+0x430>
 800d986:	6a3b      	ldr	r3, [r7, #32]
 800d988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d98c:	d204      	bcs.n	800d998 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6a3a      	ldr	r2, [r7, #32]
 800d994:	60da      	str	r2, [r3, #12]
 800d996:	e0ce      	b.n	800db36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d99e:	e0ca      	b.n	800db36 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	69db      	ldr	r3, [r3, #28]
 800d9a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9a8:	d166      	bne.n	800da78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d9aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9ae:	2b08      	cmp	r3, #8
 800d9b0:	d827      	bhi.n	800da02 <UART_SetConfig+0x49a>
 800d9b2:	a201      	add	r2, pc, #4	; (adr r2, 800d9b8 <UART_SetConfig+0x450>)
 800d9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b8:	0800d9dd 	.word	0x0800d9dd
 800d9bc:	0800d9e5 	.word	0x0800d9e5
 800d9c0:	0800d9ed 	.word	0x0800d9ed
 800d9c4:	0800da03 	.word	0x0800da03
 800d9c8:	0800d9f3 	.word	0x0800d9f3
 800d9cc:	0800da03 	.word	0x0800da03
 800d9d0:	0800da03 	.word	0x0800da03
 800d9d4:	0800da03 	.word	0x0800da03
 800d9d8:	0800d9fb 	.word	0x0800d9fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9dc:	f7fb fa5e 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800d9e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d9e2:	e014      	b.n	800da0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9e4:	f7fb fa70 	bl	8008ec8 <HAL_RCC_GetPCLK2Freq>
 800d9e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d9ea:	e010      	b.n	800da0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d9ec:	4b4e      	ldr	r3, [pc, #312]	; (800db28 <UART_SetConfig+0x5c0>)
 800d9ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d9f0:	e00d      	b.n	800da0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d9f2:	f7fb f9bb 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800d9f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d9f8:	e009      	b.n	800da0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800da00:	e005      	b.n	800da0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800da02:	2300      	movs	r3, #0
 800da04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800da06:	2301      	movs	r3, #1
 800da08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800da0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 8090 	beq.w	800db36 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1a:	4a44      	ldr	r2, [pc, #272]	; (800db2c <UART_SetConfig+0x5c4>)
 800da1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da20:	461a      	mov	r2, r3
 800da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da24:	fbb3 f3f2 	udiv	r3, r3, r2
 800da28:	005a      	lsls	r2, r3, #1
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	085b      	lsrs	r3, r3, #1
 800da30:	441a      	add	r2, r3
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	fbb2 f3f3 	udiv	r3, r2, r3
 800da3a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	2b0f      	cmp	r3, #15
 800da40:	d916      	bls.n	800da70 <UART_SetConfig+0x508>
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da48:	d212      	bcs.n	800da70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da4a:	6a3b      	ldr	r3, [r7, #32]
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	f023 030f 	bic.w	r3, r3, #15
 800da52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	085b      	lsrs	r3, r3, #1
 800da58:	b29b      	uxth	r3, r3
 800da5a:	f003 0307 	and.w	r3, r3, #7
 800da5e:	b29a      	uxth	r2, r3
 800da60:	8bfb      	ldrh	r3, [r7, #30]
 800da62:	4313      	orrs	r3, r2
 800da64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	8bfa      	ldrh	r2, [r7, #30]
 800da6c:	60da      	str	r2, [r3, #12]
 800da6e:	e062      	b.n	800db36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800da76:	e05e      	b.n	800db36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da7c:	2b08      	cmp	r3, #8
 800da7e:	d828      	bhi.n	800dad2 <UART_SetConfig+0x56a>
 800da80:	a201      	add	r2, pc, #4	; (adr r2, 800da88 <UART_SetConfig+0x520>)
 800da82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da86:	bf00      	nop
 800da88:	0800daad 	.word	0x0800daad
 800da8c:	0800dab5 	.word	0x0800dab5
 800da90:	0800dabd 	.word	0x0800dabd
 800da94:	0800dad3 	.word	0x0800dad3
 800da98:	0800dac3 	.word	0x0800dac3
 800da9c:	0800dad3 	.word	0x0800dad3
 800daa0:	0800dad3 	.word	0x0800dad3
 800daa4:	0800dad3 	.word	0x0800dad3
 800daa8:	0800dacb 	.word	0x0800dacb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800daac:	f7fb f9f6 	bl	8008e9c <HAL_RCC_GetPCLK1Freq>
 800dab0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dab2:	e014      	b.n	800dade <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dab4:	f7fb fa08 	bl	8008ec8 <HAL_RCC_GetPCLK2Freq>
 800dab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800daba:	e010      	b.n	800dade <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dabc:	4b1a      	ldr	r3, [pc, #104]	; (800db28 <UART_SetConfig+0x5c0>)
 800dabe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dac0:	e00d      	b.n	800dade <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dac2:	f7fb f953 	bl	8008d6c <HAL_RCC_GetSysClockFreq>
 800dac6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dac8:	e009      	b.n	800dade <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800daca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dad0:	e005      	b.n	800dade <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800dad2:	2300      	movs	r3, #0
 800dad4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dadc:	bf00      	nop
    }

    if (pclk != 0U)
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d028      	beq.n	800db36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae8:	4a10      	ldr	r2, [pc, #64]	; (800db2c <UART_SetConfig+0x5c4>)
 800daea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daee:	461a      	mov	r2, r3
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	fbb3 f2f2 	udiv	r2, r3, r2
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	085b      	lsrs	r3, r3, #1
 800dafc:	441a      	add	r2, r3
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	fbb2 f3f3 	udiv	r3, r2, r3
 800db06:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	2b0f      	cmp	r3, #15
 800db0c:	d910      	bls.n	800db30 <UART_SetConfig+0x5c8>
 800db0e:	6a3b      	ldr	r3, [r7, #32]
 800db10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db14:	d20c      	bcs.n	800db30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	b29a      	uxth	r2, r3
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	60da      	str	r2, [r3, #12]
 800db20:	e009      	b.n	800db36 <UART_SetConfig+0x5ce>
 800db22:	bf00      	nop
 800db24:	40008000 	.word	0x40008000
 800db28:	00f42400 	.word	0x00f42400
 800db2c:	080163b0 	.word	0x080163b0
      }
      else
      {
        ret = HAL_ERROR;
 800db30:	2301      	movs	r3, #1
 800db32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2201      	movs	r2, #1
 800db3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	2201      	movs	r2, #1
 800db42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	2200      	movs	r2, #0
 800db4a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	2200      	movs	r2, #0
 800db50:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800db52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800db56:	4618      	mov	r0, r3
 800db58:	3730      	adds	r7, #48	; 0x30
 800db5a:	46bd      	mov	sp, r7
 800db5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6c:	f003 0308 	and.w	r3, r3, #8
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00a      	beq.n	800db8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	430a      	orrs	r2, r1
 800db88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8e:	f003 0301 	and.w	r3, r3, #1
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00a      	beq.n	800dbac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	430a      	orrs	r2, r1
 800dbaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb0:	f003 0302 	and.w	r3, r3, #2
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00a      	beq.n	800dbce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd2:	f003 0304 	and.w	r3, r3, #4
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00a      	beq.n	800dbf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	430a      	orrs	r2, r1
 800dbee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf4:	f003 0310 	and.w	r3, r3, #16
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00a      	beq.n	800dc12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	430a      	orrs	r2, r1
 800dc10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc16:	f003 0320 	and.w	r3, r3, #32
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00a      	beq.n	800dc34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	430a      	orrs	r2, r1
 800dc32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d01a      	beq.n	800dc76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc5e:	d10a      	bne.n	800dc76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	430a      	orrs	r2, r1
 800dc74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00a      	beq.n	800dc98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	430a      	orrs	r2, r1
 800dc96:	605a      	str	r2, [r3, #4]
  }
}
 800dc98:	bf00      	nop
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b098      	sub	sp, #96	; 0x60
 800dca8:	af02      	add	r7, sp, #8
 800dcaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dcb4:	f7f8 f8ce 	bl	8005e54 <HAL_GetTick>
 800dcb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f003 0308 	and.w	r3, r3, #8
 800dcc4:	2b08      	cmp	r3, #8
 800dcc6:	d12f      	bne.n	800dd28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f88e 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d022      	beq.n	800dd28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcea:	e853 3f00 	ldrex	r3, [r3]
 800dcee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcf6:	653b      	str	r3, [r7, #80]	; 0x50
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd00:	647b      	str	r3, [r7, #68]	; 0x44
 800dd02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd08:	e841 2300 	strex	r3, r2, [r1]
 800dd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1e6      	bne.n	800dce2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2220      	movs	r2, #32
 800dd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd24:	2303      	movs	r3, #3
 800dd26:	e063      	b.n	800ddf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f003 0304 	and.w	r3, r3, #4
 800dd32:	2b04      	cmp	r3, #4
 800dd34:	d149      	bne.n	800ddca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 f857 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d03c      	beq.n	800ddca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd58:	e853 3f00 	ldrex	r3, [r3]
 800dd5c:	623b      	str	r3, [r7, #32]
   return(result);
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd6e:	633b      	str	r3, [r7, #48]	; 0x30
 800dd70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd76:	e841 2300 	strex	r3, r2, [r1]
 800dd7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1e6      	bne.n	800dd50 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	3308      	adds	r3, #8
 800dd88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	e853 3f00 	ldrex	r3, [r3]
 800dd90:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f023 0301 	bic.w	r3, r3, #1
 800dd98:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	3308      	adds	r3, #8
 800dda0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dda2:	61fa      	str	r2, [r7, #28]
 800dda4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda6:	69b9      	ldr	r1, [r7, #24]
 800dda8:	69fa      	ldr	r2, [r7, #28]
 800ddaa:	e841 2300 	strex	r3, r2, [r1]
 800ddae:	617b      	str	r3, [r7, #20]
   return(result);
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1e5      	bne.n	800dd82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2220      	movs	r2, #32
 800ddba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	e012      	b.n	800ddf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2220      	movs	r2, #32
 800ddce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2220      	movs	r2, #32
 800ddd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3758      	adds	r7, #88	; 0x58
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	603b      	str	r3, [r7, #0]
 800de04:	4613      	mov	r3, r2
 800de06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de08:	e049      	b.n	800de9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de10:	d045      	beq.n	800de9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de12:	f7f8 f81f 	bl	8005e54 <HAL_GetTick>
 800de16:	4602      	mov	r2, r0
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	69ba      	ldr	r2, [r7, #24]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d302      	bcc.n	800de28 <UART_WaitOnFlagUntilTimeout+0x30>
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d101      	bne.n	800de2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800de28:	2303      	movs	r3, #3
 800de2a:	e048      	b.n	800debe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f003 0304 	and.w	r3, r3, #4
 800de36:	2b00      	cmp	r3, #0
 800de38:	d031      	beq.n	800de9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	69db      	ldr	r3, [r3, #28]
 800de40:	f003 0308 	and.w	r3, r3, #8
 800de44:	2b08      	cmp	r3, #8
 800de46:	d110      	bne.n	800de6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2208      	movs	r2, #8
 800de4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 f838 	bl	800dec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2208      	movs	r2, #8
 800de5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	e029      	b.n	800debe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	69db      	ldr	r3, [r3, #28]
 800de70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de78:	d111      	bne.n	800de9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f000 f81e 	bl	800dec6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2220      	movs	r2, #32
 800de8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800de9a:	2303      	movs	r3, #3
 800de9c:	e00f      	b.n	800debe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	69da      	ldr	r2, [r3, #28]
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	4013      	ands	r3, r2
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	429a      	cmp	r2, r3
 800deac:	bf0c      	ite	eq
 800deae:	2301      	moveq	r3, #1
 800deb0:	2300      	movne	r3, #0
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	461a      	mov	r2, r3
 800deb6:	79fb      	ldrb	r3, [r7, #7]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d0a6      	beq.n	800de0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dec6:	b480      	push	{r7}
 800dec8:	b095      	sub	sp, #84	; 0x54
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded6:	e853 3f00 	ldrex	r3, [r3]
 800deda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	461a      	mov	r2, r3
 800deea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deec:	643b      	str	r3, [r7, #64]	; 0x40
 800deee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800def2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800def4:	e841 2300 	strex	r3, r2, [r1]
 800def8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800defa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1e6      	bne.n	800dece <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3308      	adds	r3, #8
 800df06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	e853 3f00 	ldrex	r3, [r3]
 800df0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df16:	f023 0301 	bic.w	r3, r3, #1
 800df1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3308      	adds	r3, #8
 800df22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df2c:	e841 2300 	strex	r3, r2, [r1]
 800df30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1e3      	bne.n	800df00 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d118      	bne.n	800df72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	e853 3f00 	ldrex	r3, [r3]
 800df4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	f023 0310 	bic.w	r3, r3, #16
 800df54:	647b      	str	r3, [r7, #68]	; 0x44
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	461a      	mov	r2, r3
 800df5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df5e:	61bb      	str	r3, [r7, #24]
 800df60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df62:	6979      	ldr	r1, [r7, #20]
 800df64:	69ba      	ldr	r2, [r7, #24]
 800df66:	e841 2300 	strex	r3, r2, [r1]
 800df6a:	613b      	str	r3, [r7, #16]
   return(result);
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1e6      	bne.n	800df40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2220      	movs	r2, #32
 800df76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	675a      	str	r2, [r3, #116]	; 0x74
}
 800df86:	bf00      	nop
 800df88:	3754      	adds	r7, #84	; 0x54
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr

0800df92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800df92:	b480      	push	{r7}
 800df94:	b085      	sub	sp, #20
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d101      	bne.n	800dfa8 <HAL_UARTEx_DisableFifoMode+0x16>
 800dfa4:	2302      	movs	r3, #2
 800dfa6:	e027      	b.n	800dff8 <HAL_UARTEx_DisableFifoMode+0x66>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2224      	movs	r2, #36	; 0x24
 800dfb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f022 0201 	bic.w	r2, r2, #1
 800dfce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dfd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2220      	movs	r2, #32
 800dfea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e014:	2b01      	cmp	r3, #1
 800e016:	d101      	bne.n	800e01c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e018:	2302      	movs	r3, #2
 800e01a:	e02d      	b.n	800e078 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2224      	movs	r2, #36	; 0x24
 800e028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f022 0201 	bic.w	r2, r2, #1
 800e042:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	683a      	ldr	r2, [r7, #0]
 800e054:	430a      	orrs	r2, r1
 800e056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 f84f 	bl	800e0fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2220      	movs	r2, #32
 800e06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e090:	2b01      	cmp	r3, #1
 800e092:	d101      	bne.n	800e098 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e094:	2302      	movs	r3, #2
 800e096:	e02d      	b.n	800e0f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2224      	movs	r2, #36	; 0x24
 800e0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f022 0201 	bic.w	r2, r2, #1
 800e0be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	683a      	ldr	r2, [r7, #0]
 800e0d0:	430a      	orrs	r2, r1
 800e0d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 f811 	bl	800e0fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2220      	movs	r2, #32
 800e0e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d108      	bne.n	800e11e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2201      	movs	r2, #1
 800e110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2201      	movs	r2, #1
 800e118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e11c:	e031      	b.n	800e182 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e11e:	2308      	movs	r3, #8
 800e120:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e122:	2308      	movs	r3, #8
 800e124:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	0e5b      	lsrs	r3, r3, #25
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	f003 0307 	and.w	r3, r3, #7
 800e134:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	0f5b      	lsrs	r3, r3, #29
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	f003 0307 	and.w	r3, r3, #7
 800e144:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e146:	7bbb      	ldrb	r3, [r7, #14]
 800e148:	7b3a      	ldrb	r2, [r7, #12]
 800e14a:	4911      	ldr	r1, [pc, #68]	; (800e190 <UARTEx_SetNbDataToProcess+0x94>)
 800e14c:	5c8a      	ldrb	r2, [r1, r2]
 800e14e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e152:	7b3a      	ldrb	r2, [r7, #12]
 800e154:	490f      	ldr	r1, [pc, #60]	; (800e194 <UARTEx_SetNbDataToProcess+0x98>)
 800e156:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e158:	fb93 f3f2 	sdiv	r3, r3, r2
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e164:	7bfb      	ldrb	r3, [r7, #15]
 800e166:	7b7a      	ldrb	r2, [r7, #13]
 800e168:	4909      	ldr	r1, [pc, #36]	; (800e190 <UARTEx_SetNbDataToProcess+0x94>)
 800e16a:	5c8a      	ldrb	r2, [r1, r2]
 800e16c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e170:	7b7a      	ldrb	r2, [r7, #13]
 800e172:	4908      	ldr	r1, [pc, #32]	; (800e194 <UARTEx_SetNbDataToProcess+0x98>)
 800e174:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e176:	fb93 f3f2 	sdiv	r3, r3, r2
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e182:	bf00      	nop
 800e184:	3714      	adds	r7, #20
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	080163c8 	.word	0x080163c8
 800e194:	080163d0 	.word	0x080163d0

0800e198 <malloc>:
 800e198:	4b02      	ldr	r3, [pc, #8]	; (800e1a4 <malloc+0xc>)
 800e19a:	4601      	mov	r1, r0
 800e19c:	6818      	ldr	r0, [r3, #0]
 800e19e:	f000 b823 	b.w	800e1e8 <_malloc_r>
 800e1a2:	bf00      	nop
 800e1a4:	20000084 	.word	0x20000084

0800e1a8 <sbrk_aligned>:
 800e1a8:	b570      	push	{r4, r5, r6, lr}
 800e1aa:	4e0e      	ldr	r6, [pc, #56]	; (800e1e4 <sbrk_aligned+0x3c>)
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	6831      	ldr	r1, [r6, #0]
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	b911      	cbnz	r1, 800e1ba <sbrk_aligned+0x12>
 800e1b4:	f000 fe84 	bl	800eec0 <_sbrk_r>
 800e1b8:	6030      	str	r0, [r6, #0]
 800e1ba:	4621      	mov	r1, r4
 800e1bc:	4628      	mov	r0, r5
 800e1be:	f000 fe7f 	bl	800eec0 <_sbrk_r>
 800e1c2:	1c43      	adds	r3, r0, #1
 800e1c4:	d00a      	beq.n	800e1dc <sbrk_aligned+0x34>
 800e1c6:	1cc4      	adds	r4, r0, #3
 800e1c8:	f024 0403 	bic.w	r4, r4, #3
 800e1cc:	42a0      	cmp	r0, r4
 800e1ce:	d007      	beq.n	800e1e0 <sbrk_aligned+0x38>
 800e1d0:	1a21      	subs	r1, r4, r0
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f000 fe74 	bl	800eec0 <_sbrk_r>
 800e1d8:	3001      	adds	r0, #1
 800e1da:	d101      	bne.n	800e1e0 <sbrk_aligned+0x38>
 800e1dc:	f04f 34ff 	mov.w	r4, #4294967295
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	bd70      	pop	{r4, r5, r6, pc}
 800e1e4:	20000a94 	.word	0x20000a94

0800e1e8 <_malloc_r>:
 800e1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ec:	1ccd      	adds	r5, r1, #3
 800e1ee:	f025 0503 	bic.w	r5, r5, #3
 800e1f2:	3508      	adds	r5, #8
 800e1f4:	2d0c      	cmp	r5, #12
 800e1f6:	bf38      	it	cc
 800e1f8:	250c      	movcc	r5, #12
 800e1fa:	2d00      	cmp	r5, #0
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	db01      	blt.n	800e204 <_malloc_r+0x1c>
 800e200:	42a9      	cmp	r1, r5
 800e202:	d905      	bls.n	800e210 <_malloc_r+0x28>
 800e204:	230c      	movs	r3, #12
 800e206:	603b      	str	r3, [r7, #0]
 800e208:	2600      	movs	r6, #0
 800e20a:	4630      	mov	r0, r6
 800e20c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e210:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e2e4 <_malloc_r+0xfc>
 800e214:	f000 f868 	bl	800e2e8 <__malloc_lock>
 800e218:	f8d8 3000 	ldr.w	r3, [r8]
 800e21c:	461c      	mov	r4, r3
 800e21e:	bb5c      	cbnz	r4, 800e278 <_malloc_r+0x90>
 800e220:	4629      	mov	r1, r5
 800e222:	4638      	mov	r0, r7
 800e224:	f7ff ffc0 	bl	800e1a8 <sbrk_aligned>
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	4604      	mov	r4, r0
 800e22c:	d155      	bne.n	800e2da <_malloc_r+0xf2>
 800e22e:	f8d8 4000 	ldr.w	r4, [r8]
 800e232:	4626      	mov	r6, r4
 800e234:	2e00      	cmp	r6, #0
 800e236:	d145      	bne.n	800e2c4 <_malloc_r+0xdc>
 800e238:	2c00      	cmp	r4, #0
 800e23a:	d048      	beq.n	800e2ce <_malloc_r+0xe6>
 800e23c:	6823      	ldr	r3, [r4, #0]
 800e23e:	4631      	mov	r1, r6
 800e240:	4638      	mov	r0, r7
 800e242:	eb04 0903 	add.w	r9, r4, r3
 800e246:	f000 fe3b 	bl	800eec0 <_sbrk_r>
 800e24a:	4581      	cmp	r9, r0
 800e24c:	d13f      	bne.n	800e2ce <_malloc_r+0xe6>
 800e24e:	6821      	ldr	r1, [r4, #0]
 800e250:	1a6d      	subs	r5, r5, r1
 800e252:	4629      	mov	r1, r5
 800e254:	4638      	mov	r0, r7
 800e256:	f7ff ffa7 	bl	800e1a8 <sbrk_aligned>
 800e25a:	3001      	adds	r0, #1
 800e25c:	d037      	beq.n	800e2ce <_malloc_r+0xe6>
 800e25e:	6823      	ldr	r3, [r4, #0]
 800e260:	442b      	add	r3, r5
 800e262:	6023      	str	r3, [r4, #0]
 800e264:	f8d8 3000 	ldr.w	r3, [r8]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d038      	beq.n	800e2de <_malloc_r+0xf6>
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	42a2      	cmp	r2, r4
 800e270:	d12b      	bne.n	800e2ca <_malloc_r+0xe2>
 800e272:	2200      	movs	r2, #0
 800e274:	605a      	str	r2, [r3, #4]
 800e276:	e00f      	b.n	800e298 <_malloc_r+0xb0>
 800e278:	6822      	ldr	r2, [r4, #0]
 800e27a:	1b52      	subs	r2, r2, r5
 800e27c:	d41f      	bmi.n	800e2be <_malloc_r+0xd6>
 800e27e:	2a0b      	cmp	r2, #11
 800e280:	d917      	bls.n	800e2b2 <_malloc_r+0xca>
 800e282:	1961      	adds	r1, r4, r5
 800e284:	42a3      	cmp	r3, r4
 800e286:	6025      	str	r5, [r4, #0]
 800e288:	bf18      	it	ne
 800e28a:	6059      	strne	r1, [r3, #4]
 800e28c:	6863      	ldr	r3, [r4, #4]
 800e28e:	bf08      	it	eq
 800e290:	f8c8 1000 	streq.w	r1, [r8]
 800e294:	5162      	str	r2, [r4, r5]
 800e296:	604b      	str	r3, [r1, #4]
 800e298:	4638      	mov	r0, r7
 800e29a:	f104 060b 	add.w	r6, r4, #11
 800e29e:	f000 f829 	bl	800e2f4 <__malloc_unlock>
 800e2a2:	f026 0607 	bic.w	r6, r6, #7
 800e2a6:	1d23      	adds	r3, r4, #4
 800e2a8:	1af2      	subs	r2, r6, r3
 800e2aa:	d0ae      	beq.n	800e20a <_malloc_r+0x22>
 800e2ac:	1b9b      	subs	r3, r3, r6
 800e2ae:	50a3      	str	r3, [r4, r2]
 800e2b0:	e7ab      	b.n	800e20a <_malloc_r+0x22>
 800e2b2:	42a3      	cmp	r3, r4
 800e2b4:	6862      	ldr	r2, [r4, #4]
 800e2b6:	d1dd      	bne.n	800e274 <_malloc_r+0x8c>
 800e2b8:	f8c8 2000 	str.w	r2, [r8]
 800e2bc:	e7ec      	b.n	800e298 <_malloc_r+0xb0>
 800e2be:	4623      	mov	r3, r4
 800e2c0:	6864      	ldr	r4, [r4, #4]
 800e2c2:	e7ac      	b.n	800e21e <_malloc_r+0x36>
 800e2c4:	4634      	mov	r4, r6
 800e2c6:	6876      	ldr	r6, [r6, #4]
 800e2c8:	e7b4      	b.n	800e234 <_malloc_r+0x4c>
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	e7cc      	b.n	800e268 <_malloc_r+0x80>
 800e2ce:	230c      	movs	r3, #12
 800e2d0:	603b      	str	r3, [r7, #0]
 800e2d2:	4638      	mov	r0, r7
 800e2d4:	f000 f80e 	bl	800e2f4 <__malloc_unlock>
 800e2d8:	e797      	b.n	800e20a <_malloc_r+0x22>
 800e2da:	6025      	str	r5, [r4, #0]
 800e2dc:	e7dc      	b.n	800e298 <_malloc_r+0xb0>
 800e2de:	605b      	str	r3, [r3, #4]
 800e2e0:	deff      	udf	#255	; 0xff
 800e2e2:	bf00      	nop
 800e2e4:	20000a90 	.word	0x20000a90

0800e2e8 <__malloc_lock>:
 800e2e8:	4801      	ldr	r0, [pc, #4]	; (800e2f0 <__malloc_lock+0x8>)
 800e2ea:	f000 be36 	b.w	800ef5a <__retarget_lock_acquire_recursive>
 800e2ee:	bf00      	nop
 800e2f0:	20000bd8 	.word	0x20000bd8

0800e2f4 <__malloc_unlock>:
 800e2f4:	4801      	ldr	r0, [pc, #4]	; (800e2fc <__malloc_unlock+0x8>)
 800e2f6:	f000 be31 	b.w	800ef5c <__retarget_lock_release_recursive>
 800e2fa:	bf00      	nop
 800e2fc:	20000bd8 	.word	0x20000bd8

0800e300 <__cvt>:
 800e300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e304:	ec55 4b10 	vmov	r4, r5, d0
 800e308:	2d00      	cmp	r5, #0
 800e30a:	460e      	mov	r6, r1
 800e30c:	4619      	mov	r1, r3
 800e30e:	462b      	mov	r3, r5
 800e310:	bfbb      	ittet	lt
 800e312:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e316:	461d      	movlt	r5, r3
 800e318:	2300      	movge	r3, #0
 800e31a:	232d      	movlt	r3, #45	; 0x2d
 800e31c:	700b      	strb	r3, [r1, #0]
 800e31e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e320:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e324:	4691      	mov	r9, r2
 800e326:	f023 0820 	bic.w	r8, r3, #32
 800e32a:	bfbc      	itt	lt
 800e32c:	4622      	movlt	r2, r4
 800e32e:	4614      	movlt	r4, r2
 800e330:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e334:	d005      	beq.n	800e342 <__cvt+0x42>
 800e336:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e33a:	d100      	bne.n	800e33e <__cvt+0x3e>
 800e33c:	3601      	adds	r6, #1
 800e33e:	2102      	movs	r1, #2
 800e340:	e000      	b.n	800e344 <__cvt+0x44>
 800e342:	2103      	movs	r1, #3
 800e344:	ab03      	add	r3, sp, #12
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	ab02      	add	r3, sp, #8
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	ec45 4b10 	vmov	d0, r4, r5
 800e350:	4653      	mov	r3, sl
 800e352:	4632      	mov	r2, r6
 800e354:	f000 fe9c 	bl	800f090 <_dtoa_r>
 800e358:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e35c:	4607      	mov	r7, r0
 800e35e:	d102      	bne.n	800e366 <__cvt+0x66>
 800e360:	f019 0f01 	tst.w	r9, #1
 800e364:	d022      	beq.n	800e3ac <__cvt+0xac>
 800e366:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e36a:	eb07 0906 	add.w	r9, r7, r6
 800e36e:	d110      	bne.n	800e392 <__cvt+0x92>
 800e370:	783b      	ldrb	r3, [r7, #0]
 800e372:	2b30      	cmp	r3, #48	; 0x30
 800e374:	d10a      	bne.n	800e38c <__cvt+0x8c>
 800e376:	2200      	movs	r2, #0
 800e378:	2300      	movs	r3, #0
 800e37a:	4620      	mov	r0, r4
 800e37c:	4629      	mov	r1, r5
 800e37e:	f7f2 fbbb 	bl	8000af8 <__aeabi_dcmpeq>
 800e382:	b918      	cbnz	r0, 800e38c <__cvt+0x8c>
 800e384:	f1c6 0601 	rsb	r6, r6, #1
 800e388:	f8ca 6000 	str.w	r6, [sl]
 800e38c:	f8da 3000 	ldr.w	r3, [sl]
 800e390:	4499      	add	r9, r3
 800e392:	2200      	movs	r2, #0
 800e394:	2300      	movs	r3, #0
 800e396:	4620      	mov	r0, r4
 800e398:	4629      	mov	r1, r5
 800e39a:	f7f2 fbad 	bl	8000af8 <__aeabi_dcmpeq>
 800e39e:	b108      	cbz	r0, 800e3a4 <__cvt+0xa4>
 800e3a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3a4:	2230      	movs	r2, #48	; 0x30
 800e3a6:	9b03      	ldr	r3, [sp, #12]
 800e3a8:	454b      	cmp	r3, r9
 800e3aa:	d307      	bcc.n	800e3bc <__cvt+0xbc>
 800e3ac:	9b03      	ldr	r3, [sp, #12]
 800e3ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3b0:	1bdb      	subs	r3, r3, r7
 800e3b2:	4638      	mov	r0, r7
 800e3b4:	6013      	str	r3, [r2, #0]
 800e3b6:	b004      	add	sp, #16
 800e3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3bc:	1c59      	adds	r1, r3, #1
 800e3be:	9103      	str	r1, [sp, #12]
 800e3c0:	701a      	strb	r2, [r3, #0]
 800e3c2:	e7f0      	b.n	800e3a6 <__cvt+0xa6>

0800e3c4 <__exponent>:
 800e3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2900      	cmp	r1, #0
 800e3ca:	bfb8      	it	lt
 800e3cc:	4249      	neglt	r1, r1
 800e3ce:	f803 2b02 	strb.w	r2, [r3], #2
 800e3d2:	bfb4      	ite	lt
 800e3d4:	222d      	movlt	r2, #45	; 0x2d
 800e3d6:	222b      	movge	r2, #43	; 0x2b
 800e3d8:	2909      	cmp	r1, #9
 800e3da:	7042      	strb	r2, [r0, #1]
 800e3dc:	dd2a      	ble.n	800e434 <__exponent+0x70>
 800e3de:	f10d 0207 	add.w	r2, sp, #7
 800e3e2:	4617      	mov	r7, r2
 800e3e4:	260a      	movs	r6, #10
 800e3e6:	4694      	mov	ip, r2
 800e3e8:	fb91 f5f6 	sdiv	r5, r1, r6
 800e3ec:	fb06 1415 	mls	r4, r6, r5, r1
 800e3f0:	3430      	adds	r4, #48	; 0x30
 800e3f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	2c63      	cmp	r4, #99	; 0x63
 800e3fa:	f102 32ff 	add.w	r2, r2, #4294967295
 800e3fe:	4629      	mov	r1, r5
 800e400:	dcf1      	bgt.n	800e3e6 <__exponent+0x22>
 800e402:	3130      	adds	r1, #48	; 0x30
 800e404:	f1ac 0402 	sub.w	r4, ip, #2
 800e408:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e40c:	1c41      	adds	r1, r0, #1
 800e40e:	4622      	mov	r2, r4
 800e410:	42ba      	cmp	r2, r7
 800e412:	d30a      	bcc.n	800e42a <__exponent+0x66>
 800e414:	f10d 0209 	add.w	r2, sp, #9
 800e418:	eba2 020c 	sub.w	r2, r2, ip
 800e41c:	42bc      	cmp	r4, r7
 800e41e:	bf88      	it	hi
 800e420:	2200      	movhi	r2, #0
 800e422:	4413      	add	r3, r2
 800e424:	1a18      	subs	r0, r3, r0
 800e426:	b003      	add	sp, #12
 800e428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e42a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e42e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e432:	e7ed      	b.n	800e410 <__exponent+0x4c>
 800e434:	2330      	movs	r3, #48	; 0x30
 800e436:	3130      	adds	r1, #48	; 0x30
 800e438:	7083      	strb	r3, [r0, #2]
 800e43a:	70c1      	strb	r1, [r0, #3]
 800e43c:	1d03      	adds	r3, r0, #4
 800e43e:	e7f1      	b.n	800e424 <__exponent+0x60>

0800e440 <_printf_float>:
 800e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e444:	ed2d 8b02 	vpush	{d8}
 800e448:	b08d      	sub	sp, #52	; 0x34
 800e44a:	460c      	mov	r4, r1
 800e44c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e450:	4616      	mov	r6, r2
 800e452:	461f      	mov	r7, r3
 800e454:	4605      	mov	r5, r0
 800e456:	f000 fcfb 	bl	800ee50 <_localeconv_r>
 800e45a:	f8d0 a000 	ldr.w	sl, [r0]
 800e45e:	4650      	mov	r0, sl
 800e460:	f7f1 ff1e 	bl	80002a0 <strlen>
 800e464:	2300      	movs	r3, #0
 800e466:	930a      	str	r3, [sp, #40]	; 0x28
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	9305      	str	r3, [sp, #20]
 800e46c:	f8d8 3000 	ldr.w	r3, [r8]
 800e470:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e474:	3307      	adds	r3, #7
 800e476:	f023 0307 	bic.w	r3, r3, #7
 800e47a:	f103 0208 	add.w	r2, r3, #8
 800e47e:	f8c8 2000 	str.w	r2, [r8]
 800e482:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e486:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e48a:	9307      	str	r3, [sp, #28]
 800e48c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e490:	ee08 0a10 	vmov	s16, r0
 800e494:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e49c:	4b9e      	ldr	r3, [pc, #632]	; (800e718 <_printf_float+0x2d8>)
 800e49e:	f04f 32ff 	mov.w	r2, #4294967295
 800e4a2:	f7f2 fb5b 	bl	8000b5c <__aeabi_dcmpun>
 800e4a6:	bb88      	cbnz	r0, 800e50c <_printf_float+0xcc>
 800e4a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4ac:	4b9a      	ldr	r3, [pc, #616]	; (800e718 <_printf_float+0x2d8>)
 800e4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b2:	f7f2 fb35 	bl	8000b20 <__aeabi_dcmple>
 800e4b6:	bb48      	cbnz	r0, 800e50c <_printf_float+0xcc>
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	4640      	mov	r0, r8
 800e4be:	4649      	mov	r1, r9
 800e4c0:	f7f2 fb24 	bl	8000b0c <__aeabi_dcmplt>
 800e4c4:	b110      	cbz	r0, 800e4cc <_printf_float+0x8c>
 800e4c6:	232d      	movs	r3, #45	; 0x2d
 800e4c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4cc:	4a93      	ldr	r2, [pc, #588]	; (800e71c <_printf_float+0x2dc>)
 800e4ce:	4b94      	ldr	r3, [pc, #592]	; (800e720 <_printf_float+0x2e0>)
 800e4d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e4d4:	bf94      	ite	ls
 800e4d6:	4690      	movls	r8, r2
 800e4d8:	4698      	movhi	r8, r3
 800e4da:	2303      	movs	r3, #3
 800e4dc:	6123      	str	r3, [r4, #16]
 800e4de:	9b05      	ldr	r3, [sp, #20]
 800e4e0:	f023 0304 	bic.w	r3, r3, #4
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	f04f 0900 	mov.w	r9, #0
 800e4ea:	9700      	str	r7, [sp, #0]
 800e4ec:	4633      	mov	r3, r6
 800e4ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f000 f9da 	bl	800e8ac <_printf_common>
 800e4f8:	3001      	adds	r0, #1
 800e4fa:	f040 8090 	bne.w	800e61e <_printf_float+0x1de>
 800e4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e502:	b00d      	add	sp, #52	; 0x34
 800e504:	ecbd 8b02 	vpop	{d8}
 800e508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e50c:	4642      	mov	r2, r8
 800e50e:	464b      	mov	r3, r9
 800e510:	4640      	mov	r0, r8
 800e512:	4649      	mov	r1, r9
 800e514:	f7f2 fb22 	bl	8000b5c <__aeabi_dcmpun>
 800e518:	b140      	cbz	r0, 800e52c <_printf_float+0xec>
 800e51a:	464b      	mov	r3, r9
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	bfbc      	itt	lt
 800e520:	232d      	movlt	r3, #45	; 0x2d
 800e522:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e526:	4a7f      	ldr	r2, [pc, #508]	; (800e724 <_printf_float+0x2e4>)
 800e528:	4b7f      	ldr	r3, [pc, #508]	; (800e728 <_printf_float+0x2e8>)
 800e52a:	e7d1      	b.n	800e4d0 <_printf_float+0x90>
 800e52c:	6863      	ldr	r3, [r4, #4]
 800e52e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e532:	9206      	str	r2, [sp, #24]
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	d13f      	bne.n	800e5b8 <_printf_float+0x178>
 800e538:	2306      	movs	r3, #6
 800e53a:	6063      	str	r3, [r4, #4]
 800e53c:	9b05      	ldr	r3, [sp, #20]
 800e53e:	6861      	ldr	r1, [r4, #4]
 800e540:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e544:	2300      	movs	r3, #0
 800e546:	9303      	str	r3, [sp, #12]
 800e548:	ab0a      	add	r3, sp, #40	; 0x28
 800e54a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e54e:	ab09      	add	r3, sp, #36	; 0x24
 800e550:	ec49 8b10 	vmov	d0, r8, r9
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	6022      	str	r2, [r4, #0]
 800e558:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e55c:	4628      	mov	r0, r5
 800e55e:	f7ff fecf 	bl	800e300 <__cvt>
 800e562:	9b06      	ldr	r3, [sp, #24]
 800e564:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e566:	2b47      	cmp	r3, #71	; 0x47
 800e568:	4680      	mov	r8, r0
 800e56a:	d108      	bne.n	800e57e <_printf_float+0x13e>
 800e56c:	1cc8      	adds	r0, r1, #3
 800e56e:	db02      	blt.n	800e576 <_printf_float+0x136>
 800e570:	6863      	ldr	r3, [r4, #4]
 800e572:	4299      	cmp	r1, r3
 800e574:	dd41      	ble.n	800e5fa <_printf_float+0x1ba>
 800e576:	f1ab 0302 	sub.w	r3, fp, #2
 800e57a:	fa5f fb83 	uxtb.w	fp, r3
 800e57e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e582:	d820      	bhi.n	800e5c6 <_printf_float+0x186>
 800e584:	3901      	subs	r1, #1
 800e586:	465a      	mov	r2, fp
 800e588:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e58c:	9109      	str	r1, [sp, #36]	; 0x24
 800e58e:	f7ff ff19 	bl	800e3c4 <__exponent>
 800e592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e594:	1813      	adds	r3, r2, r0
 800e596:	2a01      	cmp	r2, #1
 800e598:	4681      	mov	r9, r0
 800e59a:	6123      	str	r3, [r4, #16]
 800e59c:	dc02      	bgt.n	800e5a4 <_printf_float+0x164>
 800e59e:	6822      	ldr	r2, [r4, #0]
 800e5a0:	07d2      	lsls	r2, r2, #31
 800e5a2:	d501      	bpl.n	800e5a8 <_printf_float+0x168>
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	6123      	str	r3, [r4, #16]
 800e5a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d09c      	beq.n	800e4ea <_printf_float+0xaa>
 800e5b0:	232d      	movs	r3, #45	; 0x2d
 800e5b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5b6:	e798      	b.n	800e4ea <_printf_float+0xaa>
 800e5b8:	9a06      	ldr	r2, [sp, #24]
 800e5ba:	2a47      	cmp	r2, #71	; 0x47
 800e5bc:	d1be      	bne.n	800e53c <_printf_float+0xfc>
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1bc      	bne.n	800e53c <_printf_float+0xfc>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e7b9      	b.n	800e53a <_printf_float+0xfa>
 800e5c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e5ca:	d118      	bne.n	800e5fe <_printf_float+0x1be>
 800e5cc:	2900      	cmp	r1, #0
 800e5ce:	6863      	ldr	r3, [r4, #4]
 800e5d0:	dd0b      	ble.n	800e5ea <_printf_float+0x1aa>
 800e5d2:	6121      	str	r1, [r4, #16]
 800e5d4:	b913      	cbnz	r3, 800e5dc <_printf_float+0x19c>
 800e5d6:	6822      	ldr	r2, [r4, #0]
 800e5d8:	07d0      	lsls	r0, r2, #31
 800e5da:	d502      	bpl.n	800e5e2 <_printf_float+0x1a2>
 800e5dc:	3301      	adds	r3, #1
 800e5de:	440b      	add	r3, r1
 800e5e0:	6123      	str	r3, [r4, #16]
 800e5e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e5e4:	f04f 0900 	mov.w	r9, #0
 800e5e8:	e7de      	b.n	800e5a8 <_printf_float+0x168>
 800e5ea:	b913      	cbnz	r3, 800e5f2 <_printf_float+0x1b2>
 800e5ec:	6822      	ldr	r2, [r4, #0]
 800e5ee:	07d2      	lsls	r2, r2, #31
 800e5f0:	d501      	bpl.n	800e5f6 <_printf_float+0x1b6>
 800e5f2:	3302      	adds	r3, #2
 800e5f4:	e7f4      	b.n	800e5e0 <_printf_float+0x1a0>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e7f2      	b.n	800e5e0 <_printf_float+0x1a0>
 800e5fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e600:	4299      	cmp	r1, r3
 800e602:	db05      	blt.n	800e610 <_printf_float+0x1d0>
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	6121      	str	r1, [r4, #16]
 800e608:	07d8      	lsls	r0, r3, #31
 800e60a:	d5ea      	bpl.n	800e5e2 <_printf_float+0x1a2>
 800e60c:	1c4b      	adds	r3, r1, #1
 800e60e:	e7e7      	b.n	800e5e0 <_printf_float+0x1a0>
 800e610:	2900      	cmp	r1, #0
 800e612:	bfd4      	ite	le
 800e614:	f1c1 0202 	rsble	r2, r1, #2
 800e618:	2201      	movgt	r2, #1
 800e61a:	4413      	add	r3, r2
 800e61c:	e7e0      	b.n	800e5e0 <_printf_float+0x1a0>
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	055a      	lsls	r2, r3, #21
 800e622:	d407      	bmi.n	800e634 <_printf_float+0x1f4>
 800e624:	6923      	ldr	r3, [r4, #16]
 800e626:	4642      	mov	r2, r8
 800e628:	4631      	mov	r1, r6
 800e62a:	4628      	mov	r0, r5
 800e62c:	47b8      	blx	r7
 800e62e:	3001      	adds	r0, #1
 800e630:	d12c      	bne.n	800e68c <_printf_float+0x24c>
 800e632:	e764      	b.n	800e4fe <_printf_float+0xbe>
 800e634:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e638:	f240 80e0 	bls.w	800e7fc <_printf_float+0x3bc>
 800e63c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e640:	2200      	movs	r2, #0
 800e642:	2300      	movs	r3, #0
 800e644:	f7f2 fa58 	bl	8000af8 <__aeabi_dcmpeq>
 800e648:	2800      	cmp	r0, #0
 800e64a:	d034      	beq.n	800e6b6 <_printf_float+0x276>
 800e64c:	4a37      	ldr	r2, [pc, #220]	; (800e72c <_printf_float+0x2ec>)
 800e64e:	2301      	movs	r3, #1
 800e650:	4631      	mov	r1, r6
 800e652:	4628      	mov	r0, r5
 800e654:	47b8      	blx	r7
 800e656:	3001      	adds	r0, #1
 800e658:	f43f af51 	beq.w	800e4fe <_printf_float+0xbe>
 800e65c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e660:	429a      	cmp	r2, r3
 800e662:	db02      	blt.n	800e66a <_printf_float+0x22a>
 800e664:	6823      	ldr	r3, [r4, #0]
 800e666:	07d8      	lsls	r0, r3, #31
 800e668:	d510      	bpl.n	800e68c <_printf_float+0x24c>
 800e66a:	ee18 3a10 	vmov	r3, s16
 800e66e:	4652      	mov	r2, sl
 800e670:	4631      	mov	r1, r6
 800e672:	4628      	mov	r0, r5
 800e674:	47b8      	blx	r7
 800e676:	3001      	adds	r0, #1
 800e678:	f43f af41 	beq.w	800e4fe <_printf_float+0xbe>
 800e67c:	f04f 0800 	mov.w	r8, #0
 800e680:	f104 091a 	add.w	r9, r4, #26
 800e684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e686:	3b01      	subs	r3, #1
 800e688:	4543      	cmp	r3, r8
 800e68a:	dc09      	bgt.n	800e6a0 <_printf_float+0x260>
 800e68c:	6823      	ldr	r3, [r4, #0]
 800e68e:	079b      	lsls	r3, r3, #30
 800e690:	f100 8107 	bmi.w	800e8a2 <_printf_float+0x462>
 800e694:	68e0      	ldr	r0, [r4, #12]
 800e696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e698:	4298      	cmp	r0, r3
 800e69a:	bfb8      	it	lt
 800e69c:	4618      	movlt	r0, r3
 800e69e:	e730      	b.n	800e502 <_printf_float+0xc2>
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	464a      	mov	r2, r9
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	47b8      	blx	r7
 800e6aa:	3001      	adds	r0, #1
 800e6ac:	f43f af27 	beq.w	800e4fe <_printf_float+0xbe>
 800e6b0:	f108 0801 	add.w	r8, r8, #1
 800e6b4:	e7e6      	b.n	800e684 <_printf_float+0x244>
 800e6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	dc39      	bgt.n	800e730 <_printf_float+0x2f0>
 800e6bc:	4a1b      	ldr	r2, [pc, #108]	; (800e72c <_printf_float+0x2ec>)
 800e6be:	2301      	movs	r3, #1
 800e6c0:	4631      	mov	r1, r6
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	47b8      	blx	r7
 800e6c6:	3001      	adds	r0, #1
 800e6c8:	f43f af19 	beq.w	800e4fe <_printf_float+0xbe>
 800e6cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	d102      	bne.n	800e6da <_printf_float+0x29a>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	07d9      	lsls	r1, r3, #31
 800e6d8:	d5d8      	bpl.n	800e68c <_printf_float+0x24c>
 800e6da:	ee18 3a10 	vmov	r3, s16
 800e6de:	4652      	mov	r2, sl
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b8      	blx	r7
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	f43f af09 	beq.w	800e4fe <_printf_float+0xbe>
 800e6ec:	f04f 0900 	mov.w	r9, #0
 800e6f0:	f104 0a1a 	add.w	sl, r4, #26
 800e6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f6:	425b      	negs	r3, r3
 800e6f8:	454b      	cmp	r3, r9
 800e6fa:	dc01      	bgt.n	800e700 <_printf_float+0x2c0>
 800e6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6fe:	e792      	b.n	800e626 <_printf_float+0x1e6>
 800e700:	2301      	movs	r3, #1
 800e702:	4652      	mov	r2, sl
 800e704:	4631      	mov	r1, r6
 800e706:	4628      	mov	r0, r5
 800e708:	47b8      	blx	r7
 800e70a:	3001      	adds	r0, #1
 800e70c:	f43f aef7 	beq.w	800e4fe <_printf_float+0xbe>
 800e710:	f109 0901 	add.w	r9, r9, #1
 800e714:	e7ee      	b.n	800e6f4 <_printf_float+0x2b4>
 800e716:	bf00      	nop
 800e718:	7fefffff 	.word	0x7fefffff
 800e71c:	080163d8 	.word	0x080163d8
 800e720:	080163dc 	.word	0x080163dc
 800e724:	080163e0 	.word	0x080163e0
 800e728:	080163e4 	.word	0x080163e4
 800e72c:	080163e8 	.word	0x080163e8
 800e730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e734:	429a      	cmp	r2, r3
 800e736:	bfa8      	it	ge
 800e738:	461a      	movge	r2, r3
 800e73a:	2a00      	cmp	r2, #0
 800e73c:	4691      	mov	r9, r2
 800e73e:	dc37      	bgt.n	800e7b0 <_printf_float+0x370>
 800e740:	f04f 0b00 	mov.w	fp, #0
 800e744:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e748:	f104 021a 	add.w	r2, r4, #26
 800e74c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e74e:	9305      	str	r3, [sp, #20]
 800e750:	eba3 0309 	sub.w	r3, r3, r9
 800e754:	455b      	cmp	r3, fp
 800e756:	dc33      	bgt.n	800e7c0 <_printf_float+0x380>
 800e758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e75c:	429a      	cmp	r2, r3
 800e75e:	db3b      	blt.n	800e7d8 <_printf_float+0x398>
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	07da      	lsls	r2, r3, #31
 800e764:	d438      	bmi.n	800e7d8 <_printf_float+0x398>
 800e766:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e76a:	eba2 0903 	sub.w	r9, r2, r3
 800e76e:	9b05      	ldr	r3, [sp, #20]
 800e770:	1ad2      	subs	r2, r2, r3
 800e772:	4591      	cmp	r9, r2
 800e774:	bfa8      	it	ge
 800e776:	4691      	movge	r9, r2
 800e778:	f1b9 0f00 	cmp.w	r9, #0
 800e77c:	dc35      	bgt.n	800e7ea <_printf_float+0x3aa>
 800e77e:	f04f 0800 	mov.w	r8, #0
 800e782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e786:	f104 0a1a 	add.w	sl, r4, #26
 800e78a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e78e:	1a9b      	subs	r3, r3, r2
 800e790:	eba3 0309 	sub.w	r3, r3, r9
 800e794:	4543      	cmp	r3, r8
 800e796:	f77f af79 	ble.w	800e68c <_printf_float+0x24c>
 800e79a:	2301      	movs	r3, #1
 800e79c:	4652      	mov	r2, sl
 800e79e:	4631      	mov	r1, r6
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	47b8      	blx	r7
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	f43f aeaa 	beq.w	800e4fe <_printf_float+0xbe>
 800e7aa:	f108 0801 	add.w	r8, r8, #1
 800e7ae:	e7ec      	b.n	800e78a <_printf_float+0x34a>
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	4631      	mov	r1, r6
 800e7b4:	4642      	mov	r2, r8
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b8      	blx	r7
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	d1c0      	bne.n	800e740 <_printf_float+0x300>
 800e7be:	e69e      	b.n	800e4fe <_printf_float+0xbe>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	4631      	mov	r1, r6
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	9205      	str	r2, [sp, #20]
 800e7c8:	47b8      	blx	r7
 800e7ca:	3001      	adds	r0, #1
 800e7cc:	f43f ae97 	beq.w	800e4fe <_printf_float+0xbe>
 800e7d0:	9a05      	ldr	r2, [sp, #20]
 800e7d2:	f10b 0b01 	add.w	fp, fp, #1
 800e7d6:	e7b9      	b.n	800e74c <_printf_float+0x30c>
 800e7d8:	ee18 3a10 	vmov	r3, s16
 800e7dc:	4652      	mov	r2, sl
 800e7de:	4631      	mov	r1, r6
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	47b8      	blx	r7
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d1be      	bne.n	800e766 <_printf_float+0x326>
 800e7e8:	e689      	b.n	800e4fe <_printf_float+0xbe>
 800e7ea:	9a05      	ldr	r2, [sp, #20]
 800e7ec:	464b      	mov	r3, r9
 800e7ee:	4442      	add	r2, r8
 800e7f0:	4631      	mov	r1, r6
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	47b8      	blx	r7
 800e7f6:	3001      	adds	r0, #1
 800e7f8:	d1c1      	bne.n	800e77e <_printf_float+0x33e>
 800e7fa:	e680      	b.n	800e4fe <_printf_float+0xbe>
 800e7fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7fe:	2a01      	cmp	r2, #1
 800e800:	dc01      	bgt.n	800e806 <_printf_float+0x3c6>
 800e802:	07db      	lsls	r3, r3, #31
 800e804:	d53a      	bpl.n	800e87c <_printf_float+0x43c>
 800e806:	2301      	movs	r3, #1
 800e808:	4642      	mov	r2, r8
 800e80a:	4631      	mov	r1, r6
 800e80c:	4628      	mov	r0, r5
 800e80e:	47b8      	blx	r7
 800e810:	3001      	adds	r0, #1
 800e812:	f43f ae74 	beq.w	800e4fe <_printf_float+0xbe>
 800e816:	ee18 3a10 	vmov	r3, s16
 800e81a:	4652      	mov	r2, sl
 800e81c:	4631      	mov	r1, r6
 800e81e:	4628      	mov	r0, r5
 800e820:	47b8      	blx	r7
 800e822:	3001      	adds	r0, #1
 800e824:	f43f ae6b 	beq.w	800e4fe <_printf_float+0xbe>
 800e828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e82c:	2200      	movs	r2, #0
 800e82e:	2300      	movs	r3, #0
 800e830:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e834:	f7f2 f960 	bl	8000af8 <__aeabi_dcmpeq>
 800e838:	b9d8      	cbnz	r0, 800e872 <_printf_float+0x432>
 800e83a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e83e:	f108 0201 	add.w	r2, r8, #1
 800e842:	4631      	mov	r1, r6
 800e844:	4628      	mov	r0, r5
 800e846:	47b8      	blx	r7
 800e848:	3001      	adds	r0, #1
 800e84a:	d10e      	bne.n	800e86a <_printf_float+0x42a>
 800e84c:	e657      	b.n	800e4fe <_printf_float+0xbe>
 800e84e:	2301      	movs	r3, #1
 800e850:	4652      	mov	r2, sl
 800e852:	4631      	mov	r1, r6
 800e854:	4628      	mov	r0, r5
 800e856:	47b8      	blx	r7
 800e858:	3001      	adds	r0, #1
 800e85a:	f43f ae50 	beq.w	800e4fe <_printf_float+0xbe>
 800e85e:	f108 0801 	add.w	r8, r8, #1
 800e862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e864:	3b01      	subs	r3, #1
 800e866:	4543      	cmp	r3, r8
 800e868:	dcf1      	bgt.n	800e84e <_printf_float+0x40e>
 800e86a:	464b      	mov	r3, r9
 800e86c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e870:	e6da      	b.n	800e628 <_printf_float+0x1e8>
 800e872:	f04f 0800 	mov.w	r8, #0
 800e876:	f104 0a1a 	add.w	sl, r4, #26
 800e87a:	e7f2      	b.n	800e862 <_printf_float+0x422>
 800e87c:	2301      	movs	r3, #1
 800e87e:	4642      	mov	r2, r8
 800e880:	e7df      	b.n	800e842 <_printf_float+0x402>
 800e882:	2301      	movs	r3, #1
 800e884:	464a      	mov	r2, r9
 800e886:	4631      	mov	r1, r6
 800e888:	4628      	mov	r0, r5
 800e88a:	47b8      	blx	r7
 800e88c:	3001      	adds	r0, #1
 800e88e:	f43f ae36 	beq.w	800e4fe <_printf_float+0xbe>
 800e892:	f108 0801 	add.w	r8, r8, #1
 800e896:	68e3      	ldr	r3, [r4, #12]
 800e898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e89a:	1a5b      	subs	r3, r3, r1
 800e89c:	4543      	cmp	r3, r8
 800e89e:	dcf0      	bgt.n	800e882 <_printf_float+0x442>
 800e8a0:	e6f8      	b.n	800e694 <_printf_float+0x254>
 800e8a2:	f04f 0800 	mov.w	r8, #0
 800e8a6:	f104 0919 	add.w	r9, r4, #25
 800e8aa:	e7f4      	b.n	800e896 <_printf_float+0x456>

0800e8ac <_printf_common>:
 800e8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b0:	4616      	mov	r6, r2
 800e8b2:	4699      	mov	r9, r3
 800e8b4:	688a      	ldr	r2, [r1, #8]
 800e8b6:	690b      	ldr	r3, [r1, #16]
 800e8b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	bfb8      	it	lt
 800e8c0:	4613      	movlt	r3, r2
 800e8c2:	6033      	str	r3, [r6, #0]
 800e8c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8c8:	4607      	mov	r7, r0
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	b10a      	cbz	r2, 800e8d2 <_printf_common+0x26>
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	6033      	str	r3, [r6, #0]
 800e8d2:	6823      	ldr	r3, [r4, #0]
 800e8d4:	0699      	lsls	r1, r3, #26
 800e8d6:	bf42      	ittt	mi
 800e8d8:	6833      	ldrmi	r3, [r6, #0]
 800e8da:	3302      	addmi	r3, #2
 800e8dc:	6033      	strmi	r3, [r6, #0]
 800e8de:	6825      	ldr	r5, [r4, #0]
 800e8e0:	f015 0506 	ands.w	r5, r5, #6
 800e8e4:	d106      	bne.n	800e8f4 <_printf_common+0x48>
 800e8e6:	f104 0a19 	add.w	sl, r4, #25
 800e8ea:	68e3      	ldr	r3, [r4, #12]
 800e8ec:	6832      	ldr	r2, [r6, #0]
 800e8ee:	1a9b      	subs	r3, r3, r2
 800e8f0:	42ab      	cmp	r3, r5
 800e8f2:	dc26      	bgt.n	800e942 <_printf_common+0x96>
 800e8f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8f8:	1e13      	subs	r3, r2, #0
 800e8fa:	6822      	ldr	r2, [r4, #0]
 800e8fc:	bf18      	it	ne
 800e8fe:	2301      	movne	r3, #1
 800e900:	0692      	lsls	r2, r2, #26
 800e902:	d42b      	bmi.n	800e95c <_printf_common+0xb0>
 800e904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e908:	4649      	mov	r1, r9
 800e90a:	4638      	mov	r0, r7
 800e90c:	47c0      	blx	r8
 800e90e:	3001      	adds	r0, #1
 800e910:	d01e      	beq.n	800e950 <_printf_common+0xa4>
 800e912:	6823      	ldr	r3, [r4, #0]
 800e914:	6922      	ldr	r2, [r4, #16]
 800e916:	f003 0306 	and.w	r3, r3, #6
 800e91a:	2b04      	cmp	r3, #4
 800e91c:	bf02      	ittt	eq
 800e91e:	68e5      	ldreq	r5, [r4, #12]
 800e920:	6833      	ldreq	r3, [r6, #0]
 800e922:	1aed      	subeq	r5, r5, r3
 800e924:	68a3      	ldr	r3, [r4, #8]
 800e926:	bf0c      	ite	eq
 800e928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e92c:	2500      	movne	r5, #0
 800e92e:	4293      	cmp	r3, r2
 800e930:	bfc4      	itt	gt
 800e932:	1a9b      	subgt	r3, r3, r2
 800e934:	18ed      	addgt	r5, r5, r3
 800e936:	2600      	movs	r6, #0
 800e938:	341a      	adds	r4, #26
 800e93a:	42b5      	cmp	r5, r6
 800e93c:	d11a      	bne.n	800e974 <_printf_common+0xc8>
 800e93e:	2000      	movs	r0, #0
 800e940:	e008      	b.n	800e954 <_printf_common+0xa8>
 800e942:	2301      	movs	r3, #1
 800e944:	4652      	mov	r2, sl
 800e946:	4649      	mov	r1, r9
 800e948:	4638      	mov	r0, r7
 800e94a:	47c0      	blx	r8
 800e94c:	3001      	adds	r0, #1
 800e94e:	d103      	bne.n	800e958 <_printf_common+0xac>
 800e950:	f04f 30ff 	mov.w	r0, #4294967295
 800e954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e958:	3501      	adds	r5, #1
 800e95a:	e7c6      	b.n	800e8ea <_printf_common+0x3e>
 800e95c:	18e1      	adds	r1, r4, r3
 800e95e:	1c5a      	adds	r2, r3, #1
 800e960:	2030      	movs	r0, #48	; 0x30
 800e962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e966:	4422      	add	r2, r4
 800e968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e96c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e970:	3302      	adds	r3, #2
 800e972:	e7c7      	b.n	800e904 <_printf_common+0x58>
 800e974:	2301      	movs	r3, #1
 800e976:	4622      	mov	r2, r4
 800e978:	4649      	mov	r1, r9
 800e97a:	4638      	mov	r0, r7
 800e97c:	47c0      	blx	r8
 800e97e:	3001      	adds	r0, #1
 800e980:	d0e6      	beq.n	800e950 <_printf_common+0xa4>
 800e982:	3601      	adds	r6, #1
 800e984:	e7d9      	b.n	800e93a <_printf_common+0x8e>
	...

0800e988 <_printf_i>:
 800e988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e98c:	7e0f      	ldrb	r7, [r1, #24]
 800e98e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e990:	2f78      	cmp	r7, #120	; 0x78
 800e992:	4691      	mov	r9, r2
 800e994:	4680      	mov	r8, r0
 800e996:	460c      	mov	r4, r1
 800e998:	469a      	mov	sl, r3
 800e99a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e99e:	d807      	bhi.n	800e9b0 <_printf_i+0x28>
 800e9a0:	2f62      	cmp	r7, #98	; 0x62
 800e9a2:	d80a      	bhi.n	800e9ba <_printf_i+0x32>
 800e9a4:	2f00      	cmp	r7, #0
 800e9a6:	f000 80d4 	beq.w	800eb52 <_printf_i+0x1ca>
 800e9aa:	2f58      	cmp	r7, #88	; 0x58
 800e9ac:	f000 80c0 	beq.w	800eb30 <_printf_i+0x1a8>
 800e9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e9b8:	e03a      	b.n	800ea30 <_printf_i+0xa8>
 800e9ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e9be:	2b15      	cmp	r3, #21
 800e9c0:	d8f6      	bhi.n	800e9b0 <_printf_i+0x28>
 800e9c2:	a101      	add	r1, pc, #4	; (adr r1, 800e9c8 <_printf_i+0x40>)
 800e9c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9c8:	0800ea21 	.word	0x0800ea21
 800e9cc:	0800ea35 	.word	0x0800ea35
 800e9d0:	0800e9b1 	.word	0x0800e9b1
 800e9d4:	0800e9b1 	.word	0x0800e9b1
 800e9d8:	0800e9b1 	.word	0x0800e9b1
 800e9dc:	0800e9b1 	.word	0x0800e9b1
 800e9e0:	0800ea35 	.word	0x0800ea35
 800e9e4:	0800e9b1 	.word	0x0800e9b1
 800e9e8:	0800e9b1 	.word	0x0800e9b1
 800e9ec:	0800e9b1 	.word	0x0800e9b1
 800e9f0:	0800e9b1 	.word	0x0800e9b1
 800e9f4:	0800eb39 	.word	0x0800eb39
 800e9f8:	0800ea61 	.word	0x0800ea61
 800e9fc:	0800eaf3 	.word	0x0800eaf3
 800ea00:	0800e9b1 	.word	0x0800e9b1
 800ea04:	0800e9b1 	.word	0x0800e9b1
 800ea08:	0800eb5b 	.word	0x0800eb5b
 800ea0c:	0800e9b1 	.word	0x0800e9b1
 800ea10:	0800ea61 	.word	0x0800ea61
 800ea14:	0800e9b1 	.word	0x0800e9b1
 800ea18:	0800e9b1 	.word	0x0800e9b1
 800ea1c:	0800eafb 	.word	0x0800eafb
 800ea20:	682b      	ldr	r3, [r5, #0]
 800ea22:	1d1a      	adds	r2, r3, #4
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	602a      	str	r2, [r5, #0]
 800ea28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea30:	2301      	movs	r3, #1
 800ea32:	e09f      	b.n	800eb74 <_printf_i+0x1ec>
 800ea34:	6820      	ldr	r0, [r4, #0]
 800ea36:	682b      	ldr	r3, [r5, #0]
 800ea38:	0607      	lsls	r7, r0, #24
 800ea3a:	f103 0104 	add.w	r1, r3, #4
 800ea3e:	6029      	str	r1, [r5, #0]
 800ea40:	d501      	bpl.n	800ea46 <_printf_i+0xbe>
 800ea42:	681e      	ldr	r6, [r3, #0]
 800ea44:	e003      	b.n	800ea4e <_printf_i+0xc6>
 800ea46:	0646      	lsls	r6, r0, #25
 800ea48:	d5fb      	bpl.n	800ea42 <_printf_i+0xba>
 800ea4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ea4e:	2e00      	cmp	r6, #0
 800ea50:	da03      	bge.n	800ea5a <_printf_i+0xd2>
 800ea52:	232d      	movs	r3, #45	; 0x2d
 800ea54:	4276      	negs	r6, r6
 800ea56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea5a:	485a      	ldr	r0, [pc, #360]	; (800ebc4 <_printf_i+0x23c>)
 800ea5c:	230a      	movs	r3, #10
 800ea5e:	e012      	b.n	800ea86 <_printf_i+0xfe>
 800ea60:	682b      	ldr	r3, [r5, #0]
 800ea62:	6820      	ldr	r0, [r4, #0]
 800ea64:	1d19      	adds	r1, r3, #4
 800ea66:	6029      	str	r1, [r5, #0]
 800ea68:	0605      	lsls	r5, r0, #24
 800ea6a:	d501      	bpl.n	800ea70 <_printf_i+0xe8>
 800ea6c:	681e      	ldr	r6, [r3, #0]
 800ea6e:	e002      	b.n	800ea76 <_printf_i+0xee>
 800ea70:	0641      	lsls	r1, r0, #25
 800ea72:	d5fb      	bpl.n	800ea6c <_printf_i+0xe4>
 800ea74:	881e      	ldrh	r6, [r3, #0]
 800ea76:	4853      	ldr	r0, [pc, #332]	; (800ebc4 <_printf_i+0x23c>)
 800ea78:	2f6f      	cmp	r7, #111	; 0x6f
 800ea7a:	bf0c      	ite	eq
 800ea7c:	2308      	moveq	r3, #8
 800ea7e:	230a      	movne	r3, #10
 800ea80:	2100      	movs	r1, #0
 800ea82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea86:	6865      	ldr	r5, [r4, #4]
 800ea88:	60a5      	str	r5, [r4, #8]
 800ea8a:	2d00      	cmp	r5, #0
 800ea8c:	bfa2      	ittt	ge
 800ea8e:	6821      	ldrge	r1, [r4, #0]
 800ea90:	f021 0104 	bicge.w	r1, r1, #4
 800ea94:	6021      	strge	r1, [r4, #0]
 800ea96:	b90e      	cbnz	r6, 800ea9c <_printf_i+0x114>
 800ea98:	2d00      	cmp	r5, #0
 800ea9a:	d04b      	beq.n	800eb34 <_printf_i+0x1ac>
 800ea9c:	4615      	mov	r5, r2
 800ea9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800eaa2:	fb03 6711 	mls	r7, r3, r1, r6
 800eaa6:	5dc7      	ldrb	r7, [r0, r7]
 800eaa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eaac:	4637      	mov	r7, r6
 800eaae:	42bb      	cmp	r3, r7
 800eab0:	460e      	mov	r6, r1
 800eab2:	d9f4      	bls.n	800ea9e <_printf_i+0x116>
 800eab4:	2b08      	cmp	r3, #8
 800eab6:	d10b      	bne.n	800ead0 <_printf_i+0x148>
 800eab8:	6823      	ldr	r3, [r4, #0]
 800eaba:	07de      	lsls	r6, r3, #31
 800eabc:	d508      	bpl.n	800ead0 <_printf_i+0x148>
 800eabe:	6923      	ldr	r3, [r4, #16]
 800eac0:	6861      	ldr	r1, [r4, #4]
 800eac2:	4299      	cmp	r1, r3
 800eac4:	bfde      	ittt	le
 800eac6:	2330      	movle	r3, #48	; 0x30
 800eac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eacc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ead0:	1b52      	subs	r2, r2, r5
 800ead2:	6122      	str	r2, [r4, #16]
 800ead4:	f8cd a000 	str.w	sl, [sp]
 800ead8:	464b      	mov	r3, r9
 800eada:	aa03      	add	r2, sp, #12
 800eadc:	4621      	mov	r1, r4
 800eade:	4640      	mov	r0, r8
 800eae0:	f7ff fee4 	bl	800e8ac <_printf_common>
 800eae4:	3001      	adds	r0, #1
 800eae6:	d14a      	bne.n	800eb7e <_printf_i+0x1f6>
 800eae8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaec:	b004      	add	sp, #16
 800eaee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaf2:	6823      	ldr	r3, [r4, #0]
 800eaf4:	f043 0320 	orr.w	r3, r3, #32
 800eaf8:	6023      	str	r3, [r4, #0]
 800eafa:	4833      	ldr	r0, [pc, #204]	; (800ebc8 <_printf_i+0x240>)
 800eafc:	2778      	movs	r7, #120	; 0x78
 800eafe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	6829      	ldr	r1, [r5, #0]
 800eb06:	061f      	lsls	r7, r3, #24
 800eb08:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb0c:	d402      	bmi.n	800eb14 <_printf_i+0x18c>
 800eb0e:	065f      	lsls	r7, r3, #25
 800eb10:	bf48      	it	mi
 800eb12:	b2b6      	uxthmi	r6, r6
 800eb14:	07df      	lsls	r7, r3, #31
 800eb16:	bf48      	it	mi
 800eb18:	f043 0320 	orrmi.w	r3, r3, #32
 800eb1c:	6029      	str	r1, [r5, #0]
 800eb1e:	bf48      	it	mi
 800eb20:	6023      	strmi	r3, [r4, #0]
 800eb22:	b91e      	cbnz	r6, 800eb2c <_printf_i+0x1a4>
 800eb24:	6823      	ldr	r3, [r4, #0]
 800eb26:	f023 0320 	bic.w	r3, r3, #32
 800eb2a:	6023      	str	r3, [r4, #0]
 800eb2c:	2310      	movs	r3, #16
 800eb2e:	e7a7      	b.n	800ea80 <_printf_i+0xf8>
 800eb30:	4824      	ldr	r0, [pc, #144]	; (800ebc4 <_printf_i+0x23c>)
 800eb32:	e7e4      	b.n	800eafe <_printf_i+0x176>
 800eb34:	4615      	mov	r5, r2
 800eb36:	e7bd      	b.n	800eab4 <_printf_i+0x12c>
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	6826      	ldr	r6, [r4, #0]
 800eb3c:	6961      	ldr	r1, [r4, #20]
 800eb3e:	1d18      	adds	r0, r3, #4
 800eb40:	6028      	str	r0, [r5, #0]
 800eb42:	0635      	lsls	r5, r6, #24
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	d501      	bpl.n	800eb4c <_printf_i+0x1c4>
 800eb48:	6019      	str	r1, [r3, #0]
 800eb4a:	e002      	b.n	800eb52 <_printf_i+0x1ca>
 800eb4c:	0670      	lsls	r0, r6, #25
 800eb4e:	d5fb      	bpl.n	800eb48 <_printf_i+0x1c0>
 800eb50:	8019      	strh	r1, [r3, #0]
 800eb52:	2300      	movs	r3, #0
 800eb54:	6123      	str	r3, [r4, #16]
 800eb56:	4615      	mov	r5, r2
 800eb58:	e7bc      	b.n	800ead4 <_printf_i+0x14c>
 800eb5a:	682b      	ldr	r3, [r5, #0]
 800eb5c:	1d1a      	adds	r2, r3, #4
 800eb5e:	602a      	str	r2, [r5, #0]
 800eb60:	681d      	ldr	r5, [r3, #0]
 800eb62:	6862      	ldr	r2, [r4, #4]
 800eb64:	2100      	movs	r1, #0
 800eb66:	4628      	mov	r0, r5
 800eb68:	f7f1 fb4a 	bl	8000200 <memchr>
 800eb6c:	b108      	cbz	r0, 800eb72 <_printf_i+0x1ea>
 800eb6e:	1b40      	subs	r0, r0, r5
 800eb70:	6060      	str	r0, [r4, #4]
 800eb72:	6863      	ldr	r3, [r4, #4]
 800eb74:	6123      	str	r3, [r4, #16]
 800eb76:	2300      	movs	r3, #0
 800eb78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb7c:	e7aa      	b.n	800ead4 <_printf_i+0x14c>
 800eb7e:	6923      	ldr	r3, [r4, #16]
 800eb80:	462a      	mov	r2, r5
 800eb82:	4649      	mov	r1, r9
 800eb84:	4640      	mov	r0, r8
 800eb86:	47d0      	blx	sl
 800eb88:	3001      	adds	r0, #1
 800eb8a:	d0ad      	beq.n	800eae8 <_printf_i+0x160>
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	079b      	lsls	r3, r3, #30
 800eb90:	d413      	bmi.n	800ebba <_printf_i+0x232>
 800eb92:	68e0      	ldr	r0, [r4, #12]
 800eb94:	9b03      	ldr	r3, [sp, #12]
 800eb96:	4298      	cmp	r0, r3
 800eb98:	bfb8      	it	lt
 800eb9a:	4618      	movlt	r0, r3
 800eb9c:	e7a6      	b.n	800eaec <_printf_i+0x164>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	4632      	mov	r2, r6
 800eba2:	4649      	mov	r1, r9
 800eba4:	4640      	mov	r0, r8
 800eba6:	47d0      	blx	sl
 800eba8:	3001      	adds	r0, #1
 800ebaa:	d09d      	beq.n	800eae8 <_printf_i+0x160>
 800ebac:	3501      	adds	r5, #1
 800ebae:	68e3      	ldr	r3, [r4, #12]
 800ebb0:	9903      	ldr	r1, [sp, #12]
 800ebb2:	1a5b      	subs	r3, r3, r1
 800ebb4:	42ab      	cmp	r3, r5
 800ebb6:	dcf2      	bgt.n	800eb9e <_printf_i+0x216>
 800ebb8:	e7eb      	b.n	800eb92 <_printf_i+0x20a>
 800ebba:	2500      	movs	r5, #0
 800ebbc:	f104 0619 	add.w	r6, r4, #25
 800ebc0:	e7f5      	b.n	800ebae <_printf_i+0x226>
 800ebc2:	bf00      	nop
 800ebc4:	080163ea 	.word	0x080163ea
 800ebc8:	080163fb 	.word	0x080163fb

0800ebcc <std>:
 800ebcc:	2300      	movs	r3, #0
 800ebce:	b510      	push	{r4, lr}
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	e9c0 3300 	strd	r3, r3, [r0]
 800ebd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebda:	6083      	str	r3, [r0, #8]
 800ebdc:	8181      	strh	r1, [r0, #12]
 800ebde:	6643      	str	r3, [r0, #100]	; 0x64
 800ebe0:	81c2      	strh	r2, [r0, #14]
 800ebe2:	6183      	str	r3, [r0, #24]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	2208      	movs	r2, #8
 800ebe8:	305c      	adds	r0, #92	; 0x5c
 800ebea:	f000 f928 	bl	800ee3e <memset>
 800ebee:	4b0d      	ldr	r3, [pc, #52]	; (800ec24 <std+0x58>)
 800ebf0:	6263      	str	r3, [r4, #36]	; 0x24
 800ebf2:	4b0d      	ldr	r3, [pc, #52]	; (800ec28 <std+0x5c>)
 800ebf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebf6:	4b0d      	ldr	r3, [pc, #52]	; (800ec2c <std+0x60>)
 800ebf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebfa:	4b0d      	ldr	r3, [pc, #52]	; (800ec30 <std+0x64>)
 800ebfc:	6323      	str	r3, [r4, #48]	; 0x30
 800ebfe:	4b0d      	ldr	r3, [pc, #52]	; (800ec34 <std+0x68>)
 800ec00:	6224      	str	r4, [r4, #32]
 800ec02:	429c      	cmp	r4, r3
 800ec04:	d006      	beq.n	800ec14 <std+0x48>
 800ec06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ec0a:	4294      	cmp	r4, r2
 800ec0c:	d002      	beq.n	800ec14 <std+0x48>
 800ec0e:	33d0      	adds	r3, #208	; 0xd0
 800ec10:	429c      	cmp	r4, r3
 800ec12:	d105      	bne.n	800ec20 <std+0x54>
 800ec14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec1c:	f000 b99c 	b.w	800ef58 <__retarget_lock_init_recursive>
 800ec20:	bd10      	pop	{r4, pc}
 800ec22:	bf00      	nop
 800ec24:	0800edb9 	.word	0x0800edb9
 800ec28:	0800eddb 	.word	0x0800eddb
 800ec2c:	0800ee13 	.word	0x0800ee13
 800ec30:	0800ee37 	.word	0x0800ee37
 800ec34:	20000a98 	.word	0x20000a98

0800ec38 <stdio_exit_handler>:
 800ec38:	4a02      	ldr	r2, [pc, #8]	; (800ec44 <stdio_exit_handler+0xc>)
 800ec3a:	4903      	ldr	r1, [pc, #12]	; (800ec48 <stdio_exit_handler+0x10>)
 800ec3c:	4803      	ldr	r0, [pc, #12]	; (800ec4c <stdio_exit_handler+0x14>)
 800ec3e:	f000 b869 	b.w	800ed14 <_fwalk_sglue>
 800ec42:	bf00      	nop
 800ec44:	2000002c 	.word	0x2000002c
 800ec48:	08010a49 	.word	0x08010a49
 800ec4c:	20000038 	.word	0x20000038

0800ec50 <cleanup_stdio>:
 800ec50:	6841      	ldr	r1, [r0, #4]
 800ec52:	4b0c      	ldr	r3, [pc, #48]	; (800ec84 <cleanup_stdio+0x34>)
 800ec54:	4299      	cmp	r1, r3
 800ec56:	b510      	push	{r4, lr}
 800ec58:	4604      	mov	r4, r0
 800ec5a:	d001      	beq.n	800ec60 <cleanup_stdio+0x10>
 800ec5c:	f001 fef4 	bl	8010a48 <_fflush_r>
 800ec60:	68a1      	ldr	r1, [r4, #8]
 800ec62:	4b09      	ldr	r3, [pc, #36]	; (800ec88 <cleanup_stdio+0x38>)
 800ec64:	4299      	cmp	r1, r3
 800ec66:	d002      	beq.n	800ec6e <cleanup_stdio+0x1e>
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f001 feed 	bl	8010a48 <_fflush_r>
 800ec6e:	68e1      	ldr	r1, [r4, #12]
 800ec70:	4b06      	ldr	r3, [pc, #24]	; (800ec8c <cleanup_stdio+0x3c>)
 800ec72:	4299      	cmp	r1, r3
 800ec74:	d004      	beq.n	800ec80 <cleanup_stdio+0x30>
 800ec76:	4620      	mov	r0, r4
 800ec78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec7c:	f001 bee4 	b.w	8010a48 <_fflush_r>
 800ec80:	bd10      	pop	{r4, pc}
 800ec82:	bf00      	nop
 800ec84:	20000a98 	.word	0x20000a98
 800ec88:	20000b00 	.word	0x20000b00
 800ec8c:	20000b68 	.word	0x20000b68

0800ec90 <global_stdio_init.part.0>:
 800ec90:	b510      	push	{r4, lr}
 800ec92:	4b0b      	ldr	r3, [pc, #44]	; (800ecc0 <global_stdio_init.part.0+0x30>)
 800ec94:	4c0b      	ldr	r4, [pc, #44]	; (800ecc4 <global_stdio_init.part.0+0x34>)
 800ec96:	4a0c      	ldr	r2, [pc, #48]	; (800ecc8 <global_stdio_init.part.0+0x38>)
 800ec98:	601a      	str	r2, [r3, #0]
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	2104      	movs	r1, #4
 800eca0:	f7ff ff94 	bl	800ebcc <std>
 800eca4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eca8:	2201      	movs	r2, #1
 800ecaa:	2109      	movs	r1, #9
 800ecac:	f7ff ff8e 	bl	800ebcc <std>
 800ecb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ecb4:	2202      	movs	r2, #2
 800ecb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecba:	2112      	movs	r1, #18
 800ecbc:	f7ff bf86 	b.w	800ebcc <std>
 800ecc0:	20000bd0 	.word	0x20000bd0
 800ecc4:	20000a98 	.word	0x20000a98
 800ecc8:	0800ec39 	.word	0x0800ec39

0800eccc <__sfp_lock_acquire>:
 800eccc:	4801      	ldr	r0, [pc, #4]	; (800ecd4 <__sfp_lock_acquire+0x8>)
 800ecce:	f000 b944 	b.w	800ef5a <__retarget_lock_acquire_recursive>
 800ecd2:	bf00      	nop
 800ecd4:	20000bd9 	.word	0x20000bd9

0800ecd8 <__sfp_lock_release>:
 800ecd8:	4801      	ldr	r0, [pc, #4]	; (800ece0 <__sfp_lock_release+0x8>)
 800ecda:	f000 b93f 	b.w	800ef5c <__retarget_lock_release_recursive>
 800ecde:	bf00      	nop
 800ece0:	20000bd9 	.word	0x20000bd9

0800ece4 <__sinit>:
 800ece4:	b510      	push	{r4, lr}
 800ece6:	4604      	mov	r4, r0
 800ece8:	f7ff fff0 	bl	800eccc <__sfp_lock_acquire>
 800ecec:	6a23      	ldr	r3, [r4, #32]
 800ecee:	b11b      	cbz	r3, 800ecf8 <__sinit+0x14>
 800ecf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecf4:	f7ff bff0 	b.w	800ecd8 <__sfp_lock_release>
 800ecf8:	4b04      	ldr	r3, [pc, #16]	; (800ed0c <__sinit+0x28>)
 800ecfa:	6223      	str	r3, [r4, #32]
 800ecfc:	4b04      	ldr	r3, [pc, #16]	; (800ed10 <__sinit+0x2c>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d1f5      	bne.n	800ecf0 <__sinit+0xc>
 800ed04:	f7ff ffc4 	bl	800ec90 <global_stdio_init.part.0>
 800ed08:	e7f2      	b.n	800ecf0 <__sinit+0xc>
 800ed0a:	bf00      	nop
 800ed0c:	0800ec51 	.word	0x0800ec51
 800ed10:	20000bd0 	.word	0x20000bd0

0800ed14 <_fwalk_sglue>:
 800ed14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed18:	4607      	mov	r7, r0
 800ed1a:	4688      	mov	r8, r1
 800ed1c:	4614      	mov	r4, r2
 800ed1e:	2600      	movs	r6, #0
 800ed20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed24:	f1b9 0901 	subs.w	r9, r9, #1
 800ed28:	d505      	bpl.n	800ed36 <_fwalk_sglue+0x22>
 800ed2a:	6824      	ldr	r4, [r4, #0]
 800ed2c:	2c00      	cmp	r4, #0
 800ed2e:	d1f7      	bne.n	800ed20 <_fwalk_sglue+0xc>
 800ed30:	4630      	mov	r0, r6
 800ed32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed36:	89ab      	ldrh	r3, [r5, #12]
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d907      	bls.n	800ed4c <_fwalk_sglue+0x38>
 800ed3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed40:	3301      	adds	r3, #1
 800ed42:	d003      	beq.n	800ed4c <_fwalk_sglue+0x38>
 800ed44:	4629      	mov	r1, r5
 800ed46:	4638      	mov	r0, r7
 800ed48:	47c0      	blx	r8
 800ed4a:	4306      	orrs	r6, r0
 800ed4c:	3568      	adds	r5, #104	; 0x68
 800ed4e:	e7e9      	b.n	800ed24 <_fwalk_sglue+0x10>

0800ed50 <sniprintf>:
 800ed50:	b40c      	push	{r2, r3}
 800ed52:	b530      	push	{r4, r5, lr}
 800ed54:	4b17      	ldr	r3, [pc, #92]	; (800edb4 <sniprintf+0x64>)
 800ed56:	1e0c      	subs	r4, r1, #0
 800ed58:	681d      	ldr	r5, [r3, #0]
 800ed5a:	b09d      	sub	sp, #116	; 0x74
 800ed5c:	da08      	bge.n	800ed70 <sniprintf+0x20>
 800ed5e:	238b      	movs	r3, #139	; 0x8b
 800ed60:	602b      	str	r3, [r5, #0]
 800ed62:	f04f 30ff 	mov.w	r0, #4294967295
 800ed66:	b01d      	add	sp, #116	; 0x74
 800ed68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed6c:	b002      	add	sp, #8
 800ed6e:	4770      	bx	lr
 800ed70:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ed74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ed78:	bf14      	ite	ne
 800ed7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ed7e:	4623      	moveq	r3, r4
 800ed80:	9304      	str	r3, [sp, #16]
 800ed82:	9307      	str	r3, [sp, #28]
 800ed84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed88:	9002      	str	r0, [sp, #8]
 800ed8a:	9006      	str	r0, [sp, #24]
 800ed8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ed90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ed92:	ab21      	add	r3, sp, #132	; 0x84
 800ed94:	a902      	add	r1, sp, #8
 800ed96:	4628      	mov	r0, r5
 800ed98:	9301      	str	r3, [sp, #4]
 800ed9a:	f001 fb8d 	bl	80104b8 <_svfiprintf_r>
 800ed9e:	1c43      	adds	r3, r0, #1
 800eda0:	bfbc      	itt	lt
 800eda2:	238b      	movlt	r3, #139	; 0x8b
 800eda4:	602b      	strlt	r3, [r5, #0]
 800eda6:	2c00      	cmp	r4, #0
 800eda8:	d0dd      	beq.n	800ed66 <sniprintf+0x16>
 800edaa:	9b02      	ldr	r3, [sp, #8]
 800edac:	2200      	movs	r2, #0
 800edae:	701a      	strb	r2, [r3, #0]
 800edb0:	e7d9      	b.n	800ed66 <sniprintf+0x16>
 800edb2:	bf00      	nop
 800edb4:	20000084 	.word	0x20000084

0800edb8 <__sread>:
 800edb8:	b510      	push	{r4, lr}
 800edba:	460c      	mov	r4, r1
 800edbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edc0:	f000 f86c 	bl	800ee9c <_read_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	bfab      	itete	ge
 800edc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800edca:	89a3      	ldrhlt	r3, [r4, #12]
 800edcc:	181b      	addge	r3, r3, r0
 800edce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edd2:	bfac      	ite	ge
 800edd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800edd6:	81a3      	strhlt	r3, [r4, #12]
 800edd8:	bd10      	pop	{r4, pc}

0800edda <__swrite>:
 800edda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edde:	461f      	mov	r7, r3
 800ede0:	898b      	ldrh	r3, [r1, #12]
 800ede2:	05db      	lsls	r3, r3, #23
 800ede4:	4605      	mov	r5, r0
 800ede6:	460c      	mov	r4, r1
 800ede8:	4616      	mov	r6, r2
 800edea:	d505      	bpl.n	800edf8 <__swrite+0x1e>
 800edec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edf0:	2302      	movs	r3, #2
 800edf2:	2200      	movs	r2, #0
 800edf4:	f000 f840 	bl	800ee78 <_lseek_r>
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee02:	81a3      	strh	r3, [r4, #12]
 800ee04:	4632      	mov	r2, r6
 800ee06:	463b      	mov	r3, r7
 800ee08:	4628      	mov	r0, r5
 800ee0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0e:	f000 b867 	b.w	800eee0 <_write_r>

0800ee12 <__sseek>:
 800ee12:	b510      	push	{r4, lr}
 800ee14:	460c      	mov	r4, r1
 800ee16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee1a:	f000 f82d 	bl	800ee78 <_lseek_r>
 800ee1e:	1c43      	adds	r3, r0, #1
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	bf15      	itete	ne
 800ee24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee2e:	81a3      	strheq	r3, [r4, #12]
 800ee30:	bf18      	it	ne
 800ee32:	81a3      	strhne	r3, [r4, #12]
 800ee34:	bd10      	pop	{r4, pc}

0800ee36 <__sclose>:
 800ee36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee3a:	f000 b80d 	b.w	800ee58 <_close_r>

0800ee3e <memset>:
 800ee3e:	4402      	add	r2, r0
 800ee40:	4603      	mov	r3, r0
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d100      	bne.n	800ee48 <memset+0xa>
 800ee46:	4770      	bx	lr
 800ee48:	f803 1b01 	strb.w	r1, [r3], #1
 800ee4c:	e7f9      	b.n	800ee42 <memset+0x4>
	...

0800ee50 <_localeconv_r>:
 800ee50:	4800      	ldr	r0, [pc, #0]	; (800ee54 <_localeconv_r+0x4>)
 800ee52:	4770      	bx	lr
 800ee54:	20000178 	.word	0x20000178

0800ee58 <_close_r>:
 800ee58:	b538      	push	{r3, r4, r5, lr}
 800ee5a:	4d06      	ldr	r5, [pc, #24]	; (800ee74 <_close_r+0x1c>)
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	4604      	mov	r4, r0
 800ee60:	4608      	mov	r0, r1
 800ee62:	602b      	str	r3, [r5, #0]
 800ee64:	f7f5 f8f1 	bl	800404a <_close>
 800ee68:	1c43      	adds	r3, r0, #1
 800ee6a:	d102      	bne.n	800ee72 <_close_r+0x1a>
 800ee6c:	682b      	ldr	r3, [r5, #0]
 800ee6e:	b103      	cbz	r3, 800ee72 <_close_r+0x1a>
 800ee70:	6023      	str	r3, [r4, #0]
 800ee72:	bd38      	pop	{r3, r4, r5, pc}
 800ee74:	20000bd4 	.word	0x20000bd4

0800ee78 <_lseek_r>:
 800ee78:	b538      	push	{r3, r4, r5, lr}
 800ee7a:	4d07      	ldr	r5, [pc, #28]	; (800ee98 <_lseek_r+0x20>)
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	4608      	mov	r0, r1
 800ee80:	4611      	mov	r1, r2
 800ee82:	2200      	movs	r2, #0
 800ee84:	602a      	str	r2, [r5, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	f7f5 f906 	bl	8004098 <_lseek>
 800ee8c:	1c43      	adds	r3, r0, #1
 800ee8e:	d102      	bne.n	800ee96 <_lseek_r+0x1e>
 800ee90:	682b      	ldr	r3, [r5, #0]
 800ee92:	b103      	cbz	r3, 800ee96 <_lseek_r+0x1e>
 800ee94:	6023      	str	r3, [r4, #0]
 800ee96:	bd38      	pop	{r3, r4, r5, pc}
 800ee98:	20000bd4 	.word	0x20000bd4

0800ee9c <_read_r>:
 800ee9c:	b538      	push	{r3, r4, r5, lr}
 800ee9e:	4d07      	ldr	r5, [pc, #28]	; (800eebc <_read_r+0x20>)
 800eea0:	4604      	mov	r4, r0
 800eea2:	4608      	mov	r0, r1
 800eea4:	4611      	mov	r1, r2
 800eea6:	2200      	movs	r2, #0
 800eea8:	602a      	str	r2, [r5, #0]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	f7f5 f894 	bl	8003fd8 <_read>
 800eeb0:	1c43      	adds	r3, r0, #1
 800eeb2:	d102      	bne.n	800eeba <_read_r+0x1e>
 800eeb4:	682b      	ldr	r3, [r5, #0]
 800eeb6:	b103      	cbz	r3, 800eeba <_read_r+0x1e>
 800eeb8:	6023      	str	r3, [r4, #0]
 800eeba:	bd38      	pop	{r3, r4, r5, pc}
 800eebc:	20000bd4 	.word	0x20000bd4

0800eec0 <_sbrk_r>:
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	4d06      	ldr	r5, [pc, #24]	; (800eedc <_sbrk_r+0x1c>)
 800eec4:	2300      	movs	r3, #0
 800eec6:	4604      	mov	r4, r0
 800eec8:	4608      	mov	r0, r1
 800eeca:	602b      	str	r3, [r5, #0]
 800eecc:	f7f5 f8f2 	bl	80040b4 <_sbrk>
 800eed0:	1c43      	adds	r3, r0, #1
 800eed2:	d102      	bne.n	800eeda <_sbrk_r+0x1a>
 800eed4:	682b      	ldr	r3, [r5, #0]
 800eed6:	b103      	cbz	r3, 800eeda <_sbrk_r+0x1a>
 800eed8:	6023      	str	r3, [r4, #0]
 800eeda:	bd38      	pop	{r3, r4, r5, pc}
 800eedc:	20000bd4 	.word	0x20000bd4

0800eee0 <_write_r>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4d07      	ldr	r5, [pc, #28]	; (800ef00 <_write_r+0x20>)
 800eee4:	4604      	mov	r4, r0
 800eee6:	4608      	mov	r0, r1
 800eee8:	4611      	mov	r1, r2
 800eeea:	2200      	movs	r2, #0
 800eeec:	602a      	str	r2, [r5, #0]
 800eeee:	461a      	mov	r2, r3
 800eef0:	f7f5 f88f 	bl	8004012 <_write>
 800eef4:	1c43      	adds	r3, r0, #1
 800eef6:	d102      	bne.n	800eefe <_write_r+0x1e>
 800eef8:	682b      	ldr	r3, [r5, #0]
 800eefa:	b103      	cbz	r3, 800eefe <_write_r+0x1e>
 800eefc:	6023      	str	r3, [r4, #0]
 800eefe:	bd38      	pop	{r3, r4, r5, pc}
 800ef00:	20000bd4 	.word	0x20000bd4

0800ef04 <__errno>:
 800ef04:	4b01      	ldr	r3, [pc, #4]	; (800ef0c <__errno+0x8>)
 800ef06:	6818      	ldr	r0, [r3, #0]
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	20000084 	.word	0x20000084

0800ef10 <__libc_init_array>:
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	4d0d      	ldr	r5, [pc, #52]	; (800ef48 <__libc_init_array+0x38>)
 800ef14:	4c0d      	ldr	r4, [pc, #52]	; (800ef4c <__libc_init_array+0x3c>)
 800ef16:	1b64      	subs	r4, r4, r5
 800ef18:	10a4      	asrs	r4, r4, #2
 800ef1a:	2600      	movs	r6, #0
 800ef1c:	42a6      	cmp	r6, r4
 800ef1e:	d109      	bne.n	800ef34 <__libc_init_array+0x24>
 800ef20:	4d0b      	ldr	r5, [pc, #44]	; (800ef50 <__libc_init_array+0x40>)
 800ef22:	4c0c      	ldr	r4, [pc, #48]	; (800ef54 <__libc_init_array+0x44>)
 800ef24:	f001 ffd4 	bl	8010ed0 <_init>
 800ef28:	1b64      	subs	r4, r4, r5
 800ef2a:	10a4      	asrs	r4, r4, #2
 800ef2c:	2600      	movs	r6, #0
 800ef2e:	42a6      	cmp	r6, r4
 800ef30:	d105      	bne.n	800ef3e <__libc_init_array+0x2e>
 800ef32:	bd70      	pop	{r4, r5, r6, pc}
 800ef34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef38:	4798      	blx	r3
 800ef3a:	3601      	adds	r6, #1
 800ef3c:	e7ee      	b.n	800ef1c <__libc_init_array+0xc>
 800ef3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef42:	4798      	blx	r3
 800ef44:	3601      	adds	r6, #1
 800ef46:	e7f2      	b.n	800ef2e <__libc_init_array+0x1e>
 800ef48:	08016754 	.word	0x08016754
 800ef4c:	08016754 	.word	0x08016754
 800ef50:	08016754 	.word	0x08016754
 800ef54:	08016758 	.word	0x08016758

0800ef58 <__retarget_lock_init_recursive>:
 800ef58:	4770      	bx	lr

0800ef5a <__retarget_lock_acquire_recursive>:
 800ef5a:	4770      	bx	lr

0800ef5c <__retarget_lock_release_recursive>:
 800ef5c:	4770      	bx	lr

0800ef5e <memcpy>:
 800ef5e:	440a      	add	r2, r1
 800ef60:	4291      	cmp	r1, r2
 800ef62:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef66:	d100      	bne.n	800ef6a <memcpy+0xc>
 800ef68:	4770      	bx	lr
 800ef6a:	b510      	push	{r4, lr}
 800ef6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef74:	4291      	cmp	r1, r2
 800ef76:	d1f9      	bne.n	800ef6c <memcpy+0xe>
 800ef78:	bd10      	pop	{r4, pc}

0800ef7a <quorem>:
 800ef7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7e:	6903      	ldr	r3, [r0, #16]
 800ef80:	690c      	ldr	r4, [r1, #16]
 800ef82:	42a3      	cmp	r3, r4
 800ef84:	4607      	mov	r7, r0
 800ef86:	db7e      	blt.n	800f086 <quorem+0x10c>
 800ef88:	3c01      	subs	r4, #1
 800ef8a:	f101 0814 	add.w	r8, r1, #20
 800ef8e:	f100 0514 	add.w	r5, r0, #20
 800ef92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef96:	9301      	str	r3, [sp, #4]
 800ef98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efa0:	3301      	adds	r3, #1
 800efa2:	429a      	cmp	r2, r3
 800efa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800efa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efac:	fbb2 f6f3 	udiv	r6, r2, r3
 800efb0:	d331      	bcc.n	800f016 <quorem+0x9c>
 800efb2:	f04f 0e00 	mov.w	lr, #0
 800efb6:	4640      	mov	r0, r8
 800efb8:	46ac      	mov	ip, r5
 800efba:	46f2      	mov	sl, lr
 800efbc:	f850 2b04 	ldr.w	r2, [r0], #4
 800efc0:	b293      	uxth	r3, r2
 800efc2:	fb06 e303 	mla	r3, r6, r3, lr
 800efc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800efca:	0c1a      	lsrs	r2, r3, #16
 800efcc:	b29b      	uxth	r3, r3
 800efce:	ebaa 0303 	sub.w	r3, sl, r3
 800efd2:	f8dc a000 	ldr.w	sl, [ip]
 800efd6:	fa13 f38a 	uxtah	r3, r3, sl
 800efda:	fb06 220e 	mla	r2, r6, lr, r2
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	9b00      	ldr	r3, [sp, #0]
 800efe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800efe6:	b292      	uxth	r2, r2
 800efe8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800efec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eff0:	f8bd 3000 	ldrh.w	r3, [sp]
 800eff4:	4581      	cmp	r9, r0
 800eff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800effa:	f84c 3b04 	str.w	r3, [ip], #4
 800effe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f002:	d2db      	bcs.n	800efbc <quorem+0x42>
 800f004:	f855 300b 	ldr.w	r3, [r5, fp]
 800f008:	b92b      	cbnz	r3, 800f016 <quorem+0x9c>
 800f00a:	9b01      	ldr	r3, [sp, #4]
 800f00c:	3b04      	subs	r3, #4
 800f00e:	429d      	cmp	r5, r3
 800f010:	461a      	mov	r2, r3
 800f012:	d32c      	bcc.n	800f06e <quorem+0xf4>
 800f014:	613c      	str	r4, [r7, #16]
 800f016:	4638      	mov	r0, r7
 800f018:	f001 f8f4 	bl	8010204 <__mcmp>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	db22      	blt.n	800f066 <quorem+0xec>
 800f020:	3601      	adds	r6, #1
 800f022:	4629      	mov	r1, r5
 800f024:	2000      	movs	r0, #0
 800f026:	f858 2b04 	ldr.w	r2, [r8], #4
 800f02a:	f8d1 c000 	ldr.w	ip, [r1]
 800f02e:	b293      	uxth	r3, r2
 800f030:	1ac3      	subs	r3, r0, r3
 800f032:	0c12      	lsrs	r2, r2, #16
 800f034:	fa13 f38c 	uxtah	r3, r3, ip
 800f038:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f03c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f040:	b29b      	uxth	r3, r3
 800f042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f046:	45c1      	cmp	r9, r8
 800f048:	f841 3b04 	str.w	r3, [r1], #4
 800f04c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f050:	d2e9      	bcs.n	800f026 <quorem+0xac>
 800f052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f05a:	b922      	cbnz	r2, 800f066 <quorem+0xec>
 800f05c:	3b04      	subs	r3, #4
 800f05e:	429d      	cmp	r5, r3
 800f060:	461a      	mov	r2, r3
 800f062:	d30a      	bcc.n	800f07a <quorem+0x100>
 800f064:	613c      	str	r4, [r7, #16]
 800f066:	4630      	mov	r0, r6
 800f068:	b003      	add	sp, #12
 800f06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06e:	6812      	ldr	r2, [r2, #0]
 800f070:	3b04      	subs	r3, #4
 800f072:	2a00      	cmp	r2, #0
 800f074:	d1ce      	bne.n	800f014 <quorem+0x9a>
 800f076:	3c01      	subs	r4, #1
 800f078:	e7c9      	b.n	800f00e <quorem+0x94>
 800f07a:	6812      	ldr	r2, [r2, #0]
 800f07c:	3b04      	subs	r3, #4
 800f07e:	2a00      	cmp	r2, #0
 800f080:	d1f0      	bne.n	800f064 <quorem+0xea>
 800f082:	3c01      	subs	r4, #1
 800f084:	e7eb      	b.n	800f05e <quorem+0xe4>
 800f086:	2000      	movs	r0, #0
 800f088:	e7ee      	b.n	800f068 <quorem+0xee>
 800f08a:	0000      	movs	r0, r0
 800f08c:	0000      	movs	r0, r0
	...

0800f090 <_dtoa_r>:
 800f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f094:	ed2d 8b04 	vpush	{d8-d9}
 800f098:	69c5      	ldr	r5, [r0, #28]
 800f09a:	b093      	sub	sp, #76	; 0x4c
 800f09c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f0a0:	ec57 6b10 	vmov	r6, r7, d0
 800f0a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f0a8:	9107      	str	r1, [sp, #28]
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	920a      	str	r2, [sp, #40]	; 0x28
 800f0ae:	930d      	str	r3, [sp, #52]	; 0x34
 800f0b0:	b975      	cbnz	r5, 800f0d0 <_dtoa_r+0x40>
 800f0b2:	2010      	movs	r0, #16
 800f0b4:	f7ff f870 	bl	800e198 <malloc>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	61e0      	str	r0, [r4, #28]
 800f0bc:	b920      	cbnz	r0, 800f0c8 <_dtoa_r+0x38>
 800f0be:	4bae      	ldr	r3, [pc, #696]	; (800f378 <_dtoa_r+0x2e8>)
 800f0c0:	21ef      	movs	r1, #239	; 0xef
 800f0c2:	48ae      	ldr	r0, [pc, #696]	; (800f37c <_dtoa_r+0x2ec>)
 800f0c4:	f001 fd98 	bl	8010bf8 <__assert_func>
 800f0c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f0cc:	6005      	str	r5, [r0, #0]
 800f0ce:	60c5      	str	r5, [r0, #12]
 800f0d0:	69e3      	ldr	r3, [r4, #28]
 800f0d2:	6819      	ldr	r1, [r3, #0]
 800f0d4:	b151      	cbz	r1, 800f0ec <_dtoa_r+0x5c>
 800f0d6:	685a      	ldr	r2, [r3, #4]
 800f0d8:	604a      	str	r2, [r1, #4]
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4093      	lsls	r3, r2
 800f0de:	608b      	str	r3, [r1, #8]
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f000 fe53 	bl	800fd8c <_Bfree>
 800f0e6:	69e3      	ldr	r3, [r4, #28]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	601a      	str	r2, [r3, #0]
 800f0ec:	1e3b      	subs	r3, r7, #0
 800f0ee:	bfbb      	ittet	lt
 800f0f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f0f4:	9303      	strlt	r3, [sp, #12]
 800f0f6:	2300      	movge	r3, #0
 800f0f8:	2201      	movlt	r2, #1
 800f0fa:	bfac      	ite	ge
 800f0fc:	f8c8 3000 	strge.w	r3, [r8]
 800f100:	f8c8 2000 	strlt.w	r2, [r8]
 800f104:	4b9e      	ldr	r3, [pc, #632]	; (800f380 <_dtoa_r+0x2f0>)
 800f106:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f10a:	ea33 0308 	bics.w	r3, r3, r8
 800f10e:	d11b      	bne.n	800f148 <_dtoa_r+0xb8>
 800f110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f112:	f242 730f 	movw	r3, #9999	; 0x270f
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f11c:	4333      	orrs	r3, r6
 800f11e:	f000 8593 	beq.w	800fc48 <_dtoa_r+0xbb8>
 800f122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f124:	b963      	cbnz	r3, 800f140 <_dtoa_r+0xb0>
 800f126:	4b97      	ldr	r3, [pc, #604]	; (800f384 <_dtoa_r+0x2f4>)
 800f128:	e027      	b.n	800f17a <_dtoa_r+0xea>
 800f12a:	4b97      	ldr	r3, [pc, #604]	; (800f388 <_dtoa_r+0x2f8>)
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	3308      	adds	r3, #8
 800f130:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f132:	6013      	str	r3, [r2, #0]
 800f134:	9800      	ldr	r0, [sp, #0]
 800f136:	b013      	add	sp, #76	; 0x4c
 800f138:	ecbd 8b04 	vpop	{d8-d9}
 800f13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f140:	4b90      	ldr	r3, [pc, #576]	; (800f384 <_dtoa_r+0x2f4>)
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	3303      	adds	r3, #3
 800f146:	e7f3      	b.n	800f130 <_dtoa_r+0xa0>
 800f148:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f14c:	2200      	movs	r2, #0
 800f14e:	ec51 0b17 	vmov	r0, r1, d7
 800f152:	eeb0 8a47 	vmov.f32	s16, s14
 800f156:	eef0 8a67 	vmov.f32	s17, s15
 800f15a:	2300      	movs	r3, #0
 800f15c:	f7f1 fccc 	bl	8000af8 <__aeabi_dcmpeq>
 800f160:	4681      	mov	r9, r0
 800f162:	b160      	cbz	r0, 800f17e <_dtoa_r+0xee>
 800f164:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f166:	2301      	movs	r3, #1
 800f168:	6013      	str	r3, [r2, #0]
 800f16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f000 8568 	beq.w	800fc42 <_dtoa_r+0xbb2>
 800f172:	4b86      	ldr	r3, [pc, #536]	; (800f38c <_dtoa_r+0x2fc>)
 800f174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	3b01      	subs	r3, #1
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	e7da      	b.n	800f134 <_dtoa_r+0xa4>
 800f17e:	aa10      	add	r2, sp, #64	; 0x40
 800f180:	a911      	add	r1, sp, #68	; 0x44
 800f182:	4620      	mov	r0, r4
 800f184:	eeb0 0a48 	vmov.f32	s0, s16
 800f188:	eef0 0a68 	vmov.f32	s1, s17
 800f18c:	f001 f8e0 	bl	8010350 <__d2b>
 800f190:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f194:	4682      	mov	sl, r0
 800f196:	2d00      	cmp	r5, #0
 800f198:	d07f      	beq.n	800f29a <_dtoa_r+0x20a>
 800f19a:	ee18 3a90 	vmov	r3, s17
 800f19e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f1a6:	ec51 0b18 	vmov	r0, r1, d8
 800f1aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f1ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f1b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	4b75      	ldr	r3, [pc, #468]	; (800f390 <_dtoa_r+0x300>)
 800f1bc:	f7f1 f87c 	bl	80002b8 <__aeabi_dsub>
 800f1c0:	a367      	add	r3, pc, #412	; (adr r3, 800f360 <_dtoa_r+0x2d0>)
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	f7f1 fa2f 	bl	8000628 <__aeabi_dmul>
 800f1ca:	a367      	add	r3, pc, #412	; (adr r3, 800f368 <_dtoa_r+0x2d8>)
 800f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d0:	f7f1 f874 	bl	80002bc <__adddf3>
 800f1d4:	4606      	mov	r6, r0
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	460f      	mov	r7, r1
 800f1da:	f7f1 f9bb 	bl	8000554 <__aeabi_i2d>
 800f1de:	a364      	add	r3, pc, #400	; (adr r3, 800f370 <_dtoa_r+0x2e0>)
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	f7f1 fa20 	bl	8000628 <__aeabi_dmul>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	4639      	mov	r1, r7
 800f1f0:	f7f1 f864 	bl	80002bc <__adddf3>
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	460f      	mov	r7, r1
 800f1f8:	f7f1 fcc6 	bl	8000b88 <__aeabi_d2iz>
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	4683      	mov	fp, r0
 800f200:	2300      	movs	r3, #0
 800f202:	4630      	mov	r0, r6
 800f204:	4639      	mov	r1, r7
 800f206:	f7f1 fc81 	bl	8000b0c <__aeabi_dcmplt>
 800f20a:	b148      	cbz	r0, 800f220 <_dtoa_r+0x190>
 800f20c:	4658      	mov	r0, fp
 800f20e:	f7f1 f9a1 	bl	8000554 <__aeabi_i2d>
 800f212:	4632      	mov	r2, r6
 800f214:	463b      	mov	r3, r7
 800f216:	f7f1 fc6f 	bl	8000af8 <__aeabi_dcmpeq>
 800f21a:	b908      	cbnz	r0, 800f220 <_dtoa_r+0x190>
 800f21c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f220:	f1bb 0f16 	cmp.w	fp, #22
 800f224:	d857      	bhi.n	800f2d6 <_dtoa_r+0x246>
 800f226:	4b5b      	ldr	r3, [pc, #364]	; (800f394 <_dtoa_r+0x304>)
 800f228:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f230:	ec51 0b18 	vmov	r0, r1, d8
 800f234:	f7f1 fc6a 	bl	8000b0c <__aeabi_dcmplt>
 800f238:	2800      	cmp	r0, #0
 800f23a:	d04e      	beq.n	800f2da <_dtoa_r+0x24a>
 800f23c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f240:	2300      	movs	r3, #0
 800f242:	930c      	str	r3, [sp, #48]	; 0x30
 800f244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f246:	1b5b      	subs	r3, r3, r5
 800f248:	1e5a      	subs	r2, r3, #1
 800f24a:	bf45      	ittet	mi
 800f24c:	f1c3 0301 	rsbmi	r3, r3, #1
 800f250:	9305      	strmi	r3, [sp, #20]
 800f252:	2300      	movpl	r3, #0
 800f254:	2300      	movmi	r3, #0
 800f256:	9206      	str	r2, [sp, #24]
 800f258:	bf54      	ite	pl
 800f25a:	9305      	strpl	r3, [sp, #20]
 800f25c:	9306      	strmi	r3, [sp, #24]
 800f25e:	f1bb 0f00 	cmp.w	fp, #0
 800f262:	db3c      	blt.n	800f2de <_dtoa_r+0x24e>
 800f264:	9b06      	ldr	r3, [sp, #24]
 800f266:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f26a:	445b      	add	r3, fp
 800f26c:	9306      	str	r3, [sp, #24]
 800f26e:	2300      	movs	r3, #0
 800f270:	9308      	str	r3, [sp, #32]
 800f272:	9b07      	ldr	r3, [sp, #28]
 800f274:	2b09      	cmp	r3, #9
 800f276:	d868      	bhi.n	800f34a <_dtoa_r+0x2ba>
 800f278:	2b05      	cmp	r3, #5
 800f27a:	bfc4      	itt	gt
 800f27c:	3b04      	subgt	r3, #4
 800f27e:	9307      	strgt	r3, [sp, #28]
 800f280:	9b07      	ldr	r3, [sp, #28]
 800f282:	f1a3 0302 	sub.w	r3, r3, #2
 800f286:	bfcc      	ite	gt
 800f288:	2500      	movgt	r5, #0
 800f28a:	2501      	movle	r5, #1
 800f28c:	2b03      	cmp	r3, #3
 800f28e:	f200 8085 	bhi.w	800f39c <_dtoa_r+0x30c>
 800f292:	e8df f003 	tbb	[pc, r3]
 800f296:	3b2e      	.short	0x3b2e
 800f298:	5839      	.short	0x5839
 800f29a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f29e:	441d      	add	r5, r3
 800f2a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f2a4:	2b20      	cmp	r3, #32
 800f2a6:	bfc1      	itttt	gt
 800f2a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800f2b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f2b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f2b8:	bfd6      	itet	le
 800f2ba:	f1c3 0320 	rsble	r3, r3, #32
 800f2be:	ea48 0003 	orrgt.w	r0, r8, r3
 800f2c2:	fa06 f003 	lslle.w	r0, r6, r3
 800f2c6:	f7f1 f935 	bl	8000534 <__aeabi_ui2d>
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f2d0:	3d01      	subs	r5, #1
 800f2d2:	920e      	str	r2, [sp, #56]	; 0x38
 800f2d4:	e76f      	b.n	800f1b6 <_dtoa_r+0x126>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e7b3      	b.n	800f242 <_dtoa_r+0x1b2>
 800f2da:	900c      	str	r0, [sp, #48]	; 0x30
 800f2dc:	e7b2      	b.n	800f244 <_dtoa_r+0x1b4>
 800f2de:	9b05      	ldr	r3, [sp, #20]
 800f2e0:	eba3 030b 	sub.w	r3, r3, fp
 800f2e4:	9305      	str	r3, [sp, #20]
 800f2e6:	f1cb 0300 	rsb	r3, fp, #0
 800f2ea:	9308      	str	r3, [sp, #32]
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2f0:	e7bf      	b.n	800f272 <_dtoa_r+0x1e2>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	dc52      	bgt.n	800f3a2 <_dtoa_r+0x312>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	9301      	str	r3, [sp, #4]
 800f300:	9304      	str	r3, [sp, #16]
 800f302:	461a      	mov	r2, r3
 800f304:	920a      	str	r2, [sp, #40]	; 0x28
 800f306:	e00b      	b.n	800f320 <_dtoa_r+0x290>
 800f308:	2301      	movs	r3, #1
 800f30a:	e7f3      	b.n	800f2f4 <_dtoa_r+0x264>
 800f30c:	2300      	movs	r3, #0
 800f30e:	9309      	str	r3, [sp, #36]	; 0x24
 800f310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f312:	445b      	add	r3, fp
 800f314:	9301      	str	r3, [sp, #4]
 800f316:	3301      	adds	r3, #1
 800f318:	2b01      	cmp	r3, #1
 800f31a:	9304      	str	r3, [sp, #16]
 800f31c:	bfb8      	it	lt
 800f31e:	2301      	movlt	r3, #1
 800f320:	69e0      	ldr	r0, [r4, #28]
 800f322:	2100      	movs	r1, #0
 800f324:	2204      	movs	r2, #4
 800f326:	f102 0614 	add.w	r6, r2, #20
 800f32a:	429e      	cmp	r6, r3
 800f32c:	d93d      	bls.n	800f3aa <_dtoa_r+0x31a>
 800f32e:	6041      	str	r1, [r0, #4]
 800f330:	4620      	mov	r0, r4
 800f332:	f000 fceb 	bl	800fd0c <_Balloc>
 800f336:	9000      	str	r0, [sp, #0]
 800f338:	2800      	cmp	r0, #0
 800f33a:	d139      	bne.n	800f3b0 <_dtoa_r+0x320>
 800f33c:	4b16      	ldr	r3, [pc, #88]	; (800f398 <_dtoa_r+0x308>)
 800f33e:	4602      	mov	r2, r0
 800f340:	f240 11af 	movw	r1, #431	; 0x1af
 800f344:	e6bd      	b.n	800f0c2 <_dtoa_r+0x32>
 800f346:	2301      	movs	r3, #1
 800f348:	e7e1      	b.n	800f30e <_dtoa_r+0x27e>
 800f34a:	2501      	movs	r5, #1
 800f34c:	2300      	movs	r3, #0
 800f34e:	9307      	str	r3, [sp, #28]
 800f350:	9509      	str	r5, [sp, #36]	; 0x24
 800f352:	f04f 33ff 	mov.w	r3, #4294967295
 800f356:	9301      	str	r3, [sp, #4]
 800f358:	9304      	str	r3, [sp, #16]
 800f35a:	2200      	movs	r2, #0
 800f35c:	2312      	movs	r3, #18
 800f35e:	e7d1      	b.n	800f304 <_dtoa_r+0x274>
 800f360:	636f4361 	.word	0x636f4361
 800f364:	3fd287a7 	.word	0x3fd287a7
 800f368:	8b60c8b3 	.word	0x8b60c8b3
 800f36c:	3fc68a28 	.word	0x3fc68a28
 800f370:	509f79fb 	.word	0x509f79fb
 800f374:	3fd34413 	.word	0x3fd34413
 800f378:	08016419 	.word	0x08016419
 800f37c:	08016430 	.word	0x08016430
 800f380:	7ff00000 	.word	0x7ff00000
 800f384:	08016415 	.word	0x08016415
 800f388:	0801640c 	.word	0x0801640c
 800f38c:	080163e9 	.word	0x080163e9
 800f390:	3ff80000 	.word	0x3ff80000
 800f394:	08016520 	.word	0x08016520
 800f398:	08016488 	.word	0x08016488
 800f39c:	2301      	movs	r3, #1
 800f39e:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a0:	e7d7      	b.n	800f352 <_dtoa_r+0x2c2>
 800f3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a4:	9301      	str	r3, [sp, #4]
 800f3a6:	9304      	str	r3, [sp, #16]
 800f3a8:	e7ba      	b.n	800f320 <_dtoa_r+0x290>
 800f3aa:	3101      	adds	r1, #1
 800f3ac:	0052      	lsls	r2, r2, #1
 800f3ae:	e7ba      	b.n	800f326 <_dtoa_r+0x296>
 800f3b0:	69e3      	ldr	r3, [r4, #28]
 800f3b2:	9a00      	ldr	r2, [sp, #0]
 800f3b4:	601a      	str	r2, [r3, #0]
 800f3b6:	9b04      	ldr	r3, [sp, #16]
 800f3b8:	2b0e      	cmp	r3, #14
 800f3ba:	f200 80a8 	bhi.w	800f50e <_dtoa_r+0x47e>
 800f3be:	2d00      	cmp	r5, #0
 800f3c0:	f000 80a5 	beq.w	800f50e <_dtoa_r+0x47e>
 800f3c4:	f1bb 0f00 	cmp.w	fp, #0
 800f3c8:	dd38      	ble.n	800f43c <_dtoa_r+0x3ac>
 800f3ca:	4bc0      	ldr	r3, [pc, #768]	; (800f6cc <_dtoa_r+0x63c>)
 800f3cc:	f00b 020f 	and.w	r2, fp, #15
 800f3d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f3d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f3dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f3e0:	d019      	beq.n	800f416 <_dtoa_r+0x386>
 800f3e2:	4bbb      	ldr	r3, [pc, #748]	; (800f6d0 <_dtoa_r+0x640>)
 800f3e4:	ec51 0b18 	vmov	r0, r1, d8
 800f3e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3ec:	f7f1 fa46 	bl	800087c <__aeabi_ddiv>
 800f3f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3f4:	f008 080f 	and.w	r8, r8, #15
 800f3f8:	2503      	movs	r5, #3
 800f3fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f6d0 <_dtoa_r+0x640>
 800f3fe:	f1b8 0f00 	cmp.w	r8, #0
 800f402:	d10a      	bne.n	800f41a <_dtoa_r+0x38a>
 800f404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f408:	4632      	mov	r2, r6
 800f40a:	463b      	mov	r3, r7
 800f40c:	f7f1 fa36 	bl	800087c <__aeabi_ddiv>
 800f410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f414:	e02b      	b.n	800f46e <_dtoa_r+0x3de>
 800f416:	2502      	movs	r5, #2
 800f418:	e7ef      	b.n	800f3fa <_dtoa_r+0x36a>
 800f41a:	f018 0f01 	tst.w	r8, #1
 800f41e:	d008      	beq.n	800f432 <_dtoa_r+0x3a2>
 800f420:	4630      	mov	r0, r6
 800f422:	4639      	mov	r1, r7
 800f424:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f428:	f7f1 f8fe 	bl	8000628 <__aeabi_dmul>
 800f42c:	3501      	adds	r5, #1
 800f42e:	4606      	mov	r6, r0
 800f430:	460f      	mov	r7, r1
 800f432:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f436:	f109 0908 	add.w	r9, r9, #8
 800f43a:	e7e0      	b.n	800f3fe <_dtoa_r+0x36e>
 800f43c:	f000 809f 	beq.w	800f57e <_dtoa_r+0x4ee>
 800f440:	f1cb 0600 	rsb	r6, fp, #0
 800f444:	4ba1      	ldr	r3, [pc, #644]	; (800f6cc <_dtoa_r+0x63c>)
 800f446:	4fa2      	ldr	r7, [pc, #648]	; (800f6d0 <_dtoa_r+0x640>)
 800f448:	f006 020f 	and.w	r2, r6, #15
 800f44c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f454:	ec51 0b18 	vmov	r0, r1, d8
 800f458:	f7f1 f8e6 	bl	8000628 <__aeabi_dmul>
 800f45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f460:	1136      	asrs	r6, r6, #4
 800f462:	2300      	movs	r3, #0
 800f464:	2502      	movs	r5, #2
 800f466:	2e00      	cmp	r6, #0
 800f468:	d17e      	bne.n	800f568 <_dtoa_r+0x4d8>
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1d0      	bne.n	800f410 <_dtoa_r+0x380>
 800f46e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f470:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f474:	2b00      	cmp	r3, #0
 800f476:	f000 8084 	beq.w	800f582 <_dtoa_r+0x4f2>
 800f47a:	4b96      	ldr	r3, [pc, #600]	; (800f6d4 <_dtoa_r+0x644>)
 800f47c:	2200      	movs	r2, #0
 800f47e:	4640      	mov	r0, r8
 800f480:	4649      	mov	r1, r9
 800f482:	f7f1 fb43 	bl	8000b0c <__aeabi_dcmplt>
 800f486:	2800      	cmp	r0, #0
 800f488:	d07b      	beq.n	800f582 <_dtoa_r+0x4f2>
 800f48a:	9b04      	ldr	r3, [sp, #16]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d078      	beq.n	800f582 <_dtoa_r+0x4f2>
 800f490:	9b01      	ldr	r3, [sp, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	dd39      	ble.n	800f50a <_dtoa_r+0x47a>
 800f496:	4b90      	ldr	r3, [pc, #576]	; (800f6d8 <_dtoa_r+0x648>)
 800f498:	2200      	movs	r2, #0
 800f49a:	4640      	mov	r0, r8
 800f49c:	4649      	mov	r1, r9
 800f49e:	f7f1 f8c3 	bl	8000628 <__aeabi_dmul>
 800f4a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4a6:	9e01      	ldr	r6, [sp, #4]
 800f4a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f4ac:	3501      	adds	r5, #1
 800f4ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f7f1 f84e 	bl	8000554 <__aeabi_i2d>
 800f4b8:	4642      	mov	r2, r8
 800f4ba:	464b      	mov	r3, r9
 800f4bc:	f7f1 f8b4 	bl	8000628 <__aeabi_dmul>
 800f4c0:	4b86      	ldr	r3, [pc, #536]	; (800f6dc <_dtoa_r+0x64c>)
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f7f0 fefa 	bl	80002bc <__adddf3>
 800f4c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4d0:	9303      	str	r3, [sp, #12]
 800f4d2:	2e00      	cmp	r6, #0
 800f4d4:	d158      	bne.n	800f588 <_dtoa_r+0x4f8>
 800f4d6:	4b82      	ldr	r3, [pc, #520]	; (800f6e0 <_dtoa_r+0x650>)
 800f4d8:	2200      	movs	r2, #0
 800f4da:	4640      	mov	r0, r8
 800f4dc:	4649      	mov	r1, r9
 800f4de:	f7f0 feeb 	bl	80002b8 <__aeabi_dsub>
 800f4e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4e6:	4680      	mov	r8, r0
 800f4e8:	4689      	mov	r9, r1
 800f4ea:	f7f1 fb2d 	bl	8000b48 <__aeabi_dcmpgt>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	f040 8296 	bne.w	800fa20 <_dtoa_r+0x990>
 800f4f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f4f8:	4640      	mov	r0, r8
 800f4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4fe:	4649      	mov	r1, r9
 800f500:	f7f1 fb04 	bl	8000b0c <__aeabi_dcmplt>
 800f504:	2800      	cmp	r0, #0
 800f506:	f040 8289 	bne.w	800fa1c <_dtoa_r+0x98c>
 800f50a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f50e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f510:	2b00      	cmp	r3, #0
 800f512:	f2c0 814e 	blt.w	800f7b2 <_dtoa_r+0x722>
 800f516:	f1bb 0f0e 	cmp.w	fp, #14
 800f51a:	f300 814a 	bgt.w	800f7b2 <_dtoa_r+0x722>
 800f51e:	4b6b      	ldr	r3, [pc, #428]	; (800f6cc <_dtoa_r+0x63c>)
 800f520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f524:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	f280 80dc 	bge.w	800f6e8 <_dtoa_r+0x658>
 800f530:	9b04      	ldr	r3, [sp, #16]
 800f532:	2b00      	cmp	r3, #0
 800f534:	f300 80d8 	bgt.w	800f6e8 <_dtoa_r+0x658>
 800f538:	f040 826f 	bne.w	800fa1a <_dtoa_r+0x98a>
 800f53c:	4b68      	ldr	r3, [pc, #416]	; (800f6e0 <_dtoa_r+0x650>)
 800f53e:	2200      	movs	r2, #0
 800f540:	4640      	mov	r0, r8
 800f542:	4649      	mov	r1, r9
 800f544:	f7f1 f870 	bl	8000628 <__aeabi_dmul>
 800f548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f54c:	f7f1 faf2 	bl	8000b34 <__aeabi_dcmpge>
 800f550:	9e04      	ldr	r6, [sp, #16]
 800f552:	4637      	mov	r7, r6
 800f554:	2800      	cmp	r0, #0
 800f556:	f040 8245 	bne.w	800f9e4 <_dtoa_r+0x954>
 800f55a:	9d00      	ldr	r5, [sp, #0]
 800f55c:	2331      	movs	r3, #49	; 0x31
 800f55e:	f805 3b01 	strb.w	r3, [r5], #1
 800f562:	f10b 0b01 	add.w	fp, fp, #1
 800f566:	e241      	b.n	800f9ec <_dtoa_r+0x95c>
 800f568:	07f2      	lsls	r2, r6, #31
 800f56a:	d505      	bpl.n	800f578 <_dtoa_r+0x4e8>
 800f56c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f570:	f7f1 f85a 	bl	8000628 <__aeabi_dmul>
 800f574:	3501      	adds	r5, #1
 800f576:	2301      	movs	r3, #1
 800f578:	1076      	asrs	r6, r6, #1
 800f57a:	3708      	adds	r7, #8
 800f57c:	e773      	b.n	800f466 <_dtoa_r+0x3d6>
 800f57e:	2502      	movs	r5, #2
 800f580:	e775      	b.n	800f46e <_dtoa_r+0x3de>
 800f582:	9e04      	ldr	r6, [sp, #16]
 800f584:	465f      	mov	r7, fp
 800f586:	e792      	b.n	800f4ae <_dtoa_r+0x41e>
 800f588:	9900      	ldr	r1, [sp, #0]
 800f58a:	4b50      	ldr	r3, [pc, #320]	; (800f6cc <_dtoa_r+0x63c>)
 800f58c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f590:	4431      	add	r1, r6
 800f592:	9102      	str	r1, [sp, #8]
 800f594:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f596:	eeb0 9a47 	vmov.f32	s18, s14
 800f59a:	eef0 9a67 	vmov.f32	s19, s15
 800f59e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f5a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5a6:	2900      	cmp	r1, #0
 800f5a8:	d044      	beq.n	800f634 <_dtoa_r+0x5a4>
 800f5aa:	494e      	ldr	r1, [pc, #312]	; (800f6e4 <_dtoa_r+0x654>)
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	f7f1 f965 	bl	800087c <__aeabi_ddiv>
 800f5b2:	ec53 2b19 	vmov	r2, r3, d9
 800f5b6:	f7f0 fe7f 	bl	80002b8 <__aeabi_dsub>
 800f5ba:	9d00      	ldr	r5, [sp, #0]
 800f5bc:	ec41 0b19 	vmov	d9, r0, r1
 800f5c0:	4649      	mov	r1, r9
 800f5c2:	4640      	mov	r0, r8
 800f5c4:	f7f1 fae0 	bl	8000b88 <__aeabi_d2iz>
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	f7f0 ffc3 	bl	8000554 <__aeabi_i2d>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	4640      	mov	r0, r8
 800f5d4:	4649      	mov	r1, r9
 800f5d6:	f7f0 fe6f 	bl	80002b8 <__aeabi_dsub>
 800f5da:	3630      	adds	r6, #48	; 0x30
 800f5dc:	f805 6b01 	strb.w	r6, [r5], #1
 800f5e0:	ec53 2b19 	vmov	r2, r3, d9
 800f5e4:	4680      	mov	r8, r0
 800f5e6:	4689      	mov	r9, r1
 800f5e8:	f7f1 fa90 	bl	8000b0c <__aeabi_dcmplt>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	d164      	bne.n	800f6ba <_dtoa_r+0x62a>
 800f5f0:	4642      	mov	r2, r8
 800f5f2:	464b      	mov	r3, r9
 800f5f4:	4937      	ldr	r1, [pc, #220]	; (800f6d4 <_dtoa_r+0x644>)
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	f7f0 fe5e 	bl	80002b8 <__aeabi_dsub>
 800f5fc:	ec53 2b19 	vmov	r2, r3, d9
 800f600:	f7f1 fa84 	bl	8000b0c <__aeabi_dcmplt>
 800f604:	2800      	cmp	r0, #0
 800f606:	f040 80b6 	bne.w	800f776 <_dtoa_r+0x6e6>
 800f60a:	9b02      	ldr	r3, [sp, #8]
 800f60c:	429d      	cmp	r5, r3
 800f60e:	f43f af7c 	beq.w	800f50a <_dtoa_r+0x47a>
 800f612:	4b31      	ldr	r3, [pc, #196]	; (800f6d8 <_dtoa_r+0x648>)
 800f614:	ec51 0b19 	vmov	r0, r1, d9
 800f618:	2200      	movs	r2, #0
 800f61a:	f7f1 f805 	bl	8000628 <__aeabi_dmul>
 800f61e:	4b2e      	ldr	r3, [pc, #184]	; (800f6d8 <_dtoa_r+0x648>)
 800f620:	ec41 0b19 	vmov	d9, r0, r1
 800f624:	2200      	movs	r2, #0
 800f626:	4640      	mov	r0, r8
 800f628:	4649      	mov	r1, r9
 800f62a:	f7f0 fffd 	bl	8000628 <__aeabi_dmul>
 800f62e:	4680      	mov	r8, r0
 800f630:	4689      	mov	r9, r1
 800f632:	e7c5      	b.n	800f5c0 <_dtoa_r+0x530>
 800f634:	ec51 0b17 	vmov	r0, r1, d7
 800f638:	f7f0 fff6 	bl	8000628 <__aeabi_dmul>
 800f63c:	9b02      	ldr	r3, [sp, #8]
 800f63e:	9d00      	ldr	r5, [sp, #0]
 800f640:	930f      	str	r3, [sp, #60]	; 0x3c
 800f642:	ec41 0b19 	vmov	d9, r0, r1
 800f646:	4649      	mov	r1, r9
 800f648:	4640      	mov	r0, r8
 800f64a:	f7f1 fa9d 	bl	8000b88 <__aeabi_d2iz>
 800f64e:	4606      	mov	r6, r0
 800f650:	f7f0 ff80 	bl	8000554 <__aeabi_i2d>
 800f654:	3630      	adds	r6, #48	; 0x30
 800f656:	4602      	mov	r2, r0
 800f658:	460b      	mov	r3, r1
 800f65a:	4640      	mov	r0, r8
 800f65c:	4649      	mov	r1, r9
 800f65e:	f7f0 fe2b 	bl	80002b8 <__aeabi_dsub>
 800f662:	f805 6b01 	strb.w	r6, [r5], #1
 800f666:	9b02      	ldr	r3, [sp, #8]
 800f668:	429d      	cmp	r5, r3
 800f66a:	4680      	mov	r8, r0
 800f66c:	4689      	mov	r9, r1
 800f66e:	f04f 0200 	mov.w	r2, #0
 800f672:	d124      	bne.n	800f6be <_dtoa_r+0x62e>
 800f674:	4b1b      	ldr	r3, [pc, #108]	; (800f6e4 <_dtoa_r+0x654>)
 800f676:	ec51 0b19 	vmov	r0, r1, d9
 800f67a:	f7f0 fe1f 	bl	80002bc <__adddf3>
 800f67e:	4602      	mov	r2, r0
 800f680:	460b      	mov	r3, r1
 800f682:	4640      	mov	r0, r8
 800f684:	4649      	mov	r1, r9
 800f686:	f7f1 fa5f 	bl	8000b48 <__aeabi_dcmpgt>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	d173      	bne.n	800f776 <_dtoa_r+0x6e6>
 800f68e:	ec53 2b19 	vmov	r2, r3, d9
 800f692:	4914      	ldr	r1, [pc, #80]	; (800f6e4 <_dtoa_r+0x654>)
 800f694:	2000      	movs	r0, #0
 800f696:	f7f0 fe0f 	bl	80002b8 <__aeabi_dsub>
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	4640      	mov	r0, r8
 800f6a0:	4649      	mov	r1, r9
 800f6a2:	f7f1 fa33 	bl	8000b0c <__aeabi_dcmplt>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	f43f af2f 	beq.w	800f50a <_dtoa_r+0x47a>
 800f6ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f6ae:	1e6b      	subs	r3, r5, #1
 800f6b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6b6:	2b30      	cmp	r3, #48	; 0x30
 800f6b8:	d0f8      	beq.n	800f6ac <_dtoa_r+0x61c>
 800f6ba:	46bb      	mov	fp, r7
 800f6bc:	e04a      	b.n	800f754 <_dtoa_r+0x6c4>
 800f6be:	4b06      	ldr	r3, [pc, #24]	; (800f6d8 <_dtoa_r+0x648>)
 800f6c0:	f7f0 ffb2 	bl	8000628 <__aeabi_dmul>
 800f6c4:	4680      	mov	r8, r0
 800f6c6:	4689      	mov	r9, r1
 800f6c8:	e7bd      	b.n	800f646 <_dtoa_r+0x5b6>
 800f6ca:	bf00      	nop
 800f6cc:	08016520 	.word	0x08016520
 800f6d0:	080164f8 	.word	0x080164f8
 800f6d4:	3ff00000 	.word	0x3ff00000
 800f6d8:	40240000 	.word	0x40240000
 800f6dc:	401c0000 	.word	0x401c0000
 800f6e0:	40140000 	.word	0x40140000
 800f6e4:	3fe00000 	.word	0x3fe00000
 800f6e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f6ec:	9d00      	ldr	r5, [sp, #0]
 800f6ee:	4642      	mov	r2, r8
 800f6f0:	464b      	mov	r3, r9
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	f7f1 f8c1 	bl	800087c <__aeabi_ddiv>
 800f6fa:	f7f1 fa45 	bl	8000b88 <__aeabi_d2iz>
 800f6fe:	9001      	str	r0, [sp, #4]
 800f700:	f7f0 ff28 	bl	8000554 <__aeabi_i2d>
 800f704:	4642      	mov	r2, r8
 800f706:	464b      	mov	r3, r9
 800f708:	f7f0 ff8e 	bl	8000628 <__aeabi_dmul>
 800f70c:	4602      	mov	r2, r0
 800f70e:	460b      	mov	r3, r1
 800f710:	4630      	mov	r0, r6
 800f712:	4639      	mov	r1, r7
 800f714:	f7f0 fdd0 	bl	80002b8 <__aeabi_dsub>
 800f718:	9e01      	ldr	r6, [sp, #4]
 800f71a:	9f04      	ldr	r7, [sp, #16]
 800f71c:	3630      	adds	r6, #48	; 0x30
 800f71e:	f805 6b01 	strb.w	r6, [r5], #1
 800f722:	9e00      	ldr	r6, [sp, #0]
 800f724:	1bae      	subs	r6, r5, r6
 800f726:	42b7      	cmp	r7, r6
 800f728:	4602      	mov	r2, r0
 800f72a:	460b      	mov	r3, r1
 800f72c:	d134      	bne.n	800f798 <_dtoa_r+0x708>
 800f72e:	f7f0 fdc5 	bl	80002bc <__adddf3>
 800f732:	4642      	mov	r2, r8
 800f734:	464b      	mov	r3, r9
 800f736:	4606      	mov	r6, r0
 800f738:	460f      	mov	r7, r1
 800f73a:	f7f1 fa05 	bl	8000b48 <__aeabi_dcmpgt>
 800f73e:	b9c8      	cbnz	r0, 800f774 <_dtoa_r+0x6e4>
 800f740:	4642      	mov	r2, r8
 800f742:	464b      	mov	r3, r9
 800f744:	4630      	mov	r0, r6
 800f746:	4639      	mov	r1, r7
 800f748:	f7f1 f9d6 	bl	8000af8 <__aeabi_dcmpeq>
 800f74c:	b110      	cbz	r0, 800f754 <_dtoa_r+0x6c4>
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	07db      	lsls	r3, r3, #31
 800f752:	d40f      	bmi.n	800f774 <_dtoa_r+0x6e4>
 800f754:	4651      	mov	r1, sl
 800f756:	4620      	mov	r0, r4
 800f758:	f000 fb18 	bl	800fd8c <_Bfree>
 800f75c:	2300      	movs	r3, #0
 800f75e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f760:	702b      	strb	r3, [r5, #0]
 800f762:	f10b 0301 	add.w	r3, fp, #1
 800f766:	6013      	str	r3, [r2, #0]
 800f768:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f43f ace2 	beq.w	800f134 <_dtoa_r+0xa4>
 800f770:	601d      	str	r5, [r3, #0]
 800f772:	e4df      	b.n	800f134 <_dtoa_r+0xa4>
 800f774:	465f      	mov	r7, fp
 800f776:	462b      	mov	r3, r5
 800f778:	461d      	mov	r5, r3
 800f77a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f77e:	2a39      	cmp	r2, #57	; 0x39
 800f780:	d106      	bne.n	800f790 <_dtoa_r+0x700>
 800f782:	9a00      	ldr	r2, [sp, #0]
 800f784:	429a      	cmp	r2, r3
 800f786:	d1f7      	bne.n	800f778 <_dtoa_r+0x6e8>
 800f788:	9900      	ldr	r1, [sp, #0]
 800f78a:	2230      	movs	r2, #48	; 0x30
 800f78c:	3701      	adds	r7, #1
 800f78e:	700a      	strb	r2, [r1, #0]
 800f790:	781a      	ldrb	r2, [r3, #0]
 800f792:	3201      	adds	r2, #1
 800f794:	701a      	strb	r2, [r3, #0]
 800f796:	e790      	b.n	800f6ba <_dtoa_r+0x62a>
 800f798:	4ba3      	ldr	r3, [pc, #652]	; (800fa28 <_dtoa_r+0x998>)
 800f79a:	2200      	movs	r2, #0
 800f79c:	f7f0 ff44 	bl	8000628 <__aeabi_dmul>
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	4606      	mov	r6, r0
 800f7a6:	460f      	mov	r7, r1
 800f7a8:	f7f1 f9a6 	bl	8000af8 <__aeabi_dcmpeq>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d09e      	beq.n	800f6ee <_dtoa_r+0x65e>
 800f7b0:	e7d0      	b.n	800f754 <_dtoa_r+0x6c4>
 800f7b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7b4:	2a00      	cmp	r2, #0
 800f7b6:	f000 80ca 	beq.w	800f94e <_dtoa_r+0x8be>
 800f7ba:	9a07      	ldr	r2, [sp, #28]
 800f7bc:	2a01      	cmp	r2, #1
 800f7be:	f300 80ad 	bgt.w	800f91c <_dtoa_r+0x88c>
 800f7c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7c4:	2a00      	cmp	r2, #0
 800f7c6:	f000 80a5 	beq.w	800f914 <_dtoa_r+0x884>
 800f7ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f7ce:	9e08      	ldr	r6, [sp, #32]
 800f7d0:	9d05      	ldr	r5, [sp, #20]
 800f7d2:	9a05      	ldr	r2, [sp, #20]
 800f7d4:	441a      	add	r2, r3
 800f7d6:	9205      	str	r2, [sp, #20]
 800f7d8:	9a06      	ldr	r2, [sp, #24]
 800f7da:	2101      	movs	r1, #1
 800f7dc:	441a      	add	r2, r3
 800f7de:	4620      	mov	r0, r4
 800f7e0:	9206      	str	r2, [sp, #24]
 800f7e2:	f000 fb89 	bl	800fef8 <__i2b>
 800f7e6:	4607      	mov	r7, r0
 800f7e8:	b165      	cbz	r5, 800f804 <_dtoa_r+0x774>
 800f7ea:	9b06      	ldr	r3, [sp, #24]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	dd09      	ble.n	800f804 <_dtoa_r+0x774>
 800f7f0:	42ab      	cmp	r3, r5
 800f7f2:	9a05      	ldr	r2, [sp, #20]
 800f7f4:	bfa8      	it	ge
 800f7f6:	462b      	movge	r3, r5
 800f7f8:	1ad2      	subs	r2, r2, r3
 800f7fa:	9205      	str	r2, [sp, #20]
 800f7fc:	9a06      	ldr	r2, [sp, #24]
 800f7fe:	1aed      	subs	r5, r5, r3
 800f800:	1ad3      	subs	r3, r2, r3
 800f802:	9306      	str	r3, [sp, #24]
 800f804:	9b08      	ldr	r3, [sp, #32]
 800f806:	b1f3      	cbz	r3, 800f846 <_dtoa_r+0x7b6>
 800f808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f000 80a3 	beq.w	800f956 <_dtoa_r+0x8c6>
 800f810:	2e00      	cmp	r6, #0
 800f812:	dd10      	ble.n	800f836 <_dtoa_r+0x7a6>
 800f814:	4639      	mov	r1, r7
 800f816:	4632      	mov	r2, r6
 800f818:	4620      	mov	r0, r4
 800f81a:	f000 fc2d 	bl	8010078 <__pow5mult>
 800f81e:	4652      	mov	r2, sl
 800f820:	4601      	mov	r1, r0
 800f822:	4607      	mov	r7, r0
 800f824:	4620      	mov	r0, r4
 800f826:	f000 fb7d 	bl	800ff24 <__multiply>
 800f82a:	4651      	mov	r1, sl
 800f82c:	4680      	mov	r8, r0
 800f82e:	4620      	mov	r0, r4
 800f830:	f000 faac 	bl	800fd8c <_Bfree>
 800f834:	46c2      	mov	sl, r8
 800f836:	9b08      	ldr	r3, [sp, #32]
 800f838:	1b9a      	subs	r2, r3, r6
 800f83a:	d004      	beq.n	800f846 <_dtoa_r+0x7b6>
 800f83c:	4651      	mov	r1, sl
 800f83e:	4620      	mov	r0, r4
 800f840:	f000 fc1a 	bl	8010078 <__pow5mult>
 800f844:	4682      	mov	sl, r0
 800f846:	2101      	movs	r1, #1
 800f848:	4620      	mov	r0, r4
 800f84a:	f000 fb55 	bl	800fef8 <__i2b>
 800f84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f850:	2b00      	cmp	r3, #0
 800f852:	4606      	mov	r6, r0
 800f854:	f340 8081 	ble.w	800f95a <_dtoa_r+0x8ca>
 800f858:	461a      	mov	r2, r3
 800f85a:	4601      	mov	r1, r0
 800f85c:	4620      	mov	r0, r4
 800f85e:	f000 fc0b 	bl	8010078 <__pow5mult>
 800f862:	9b07      	ldr	r3, [sp, #28]
 800f864:	2b01      	cmp	r3, #1
 800f866:	4606      	mov	r6, r0
 800f868:	dd7a      	ble.n	800f960 <_dtoa_r+0x8d0>
 800f86a:	f04f 0800 	mov.w	r8, #0
 800f86e:	6933      	ldr	r3, [r6, #16]
 800f870:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f874:	6918      	ldr	r0, [r3, #16]
 800f876:	f000 faf1 	bl	800fe5c <__hi0bits>
 800f87a:	f1c0 0020 	rsb	r0, r0, #32
 800f87e:	9b06      	ldr	r3, [sp, #24]
 800f880:	4418      	add	r0, r3
 800f882:	f010 001f 	ands.w	r0, r0, #31
 800f886:	f000 8094 	beq.w	800f9b2 <_dtoa_r+0x922>
 800f88a:	f1c0 0320 	rsb	r3, r0, #32
 800f88e:	2b04      	cmp	r3, #4
 800f890:	f340 8085 	ble.w	800f99e <_dtoa_r+0x90e>
 800f894:	9b05      	ldr	r3, [sp, #20]
 800f896:	f1c0 001c 	rsb	r0, r0, #28
 800f89a:	4403      	add	r3, r0
 800f89c:	9305      	str	r3, [sp, #20]
 800f89e:	9b06      	ldr	r3, [sp, #24]
 800f8a0:	4403      	add	r3, r0
 800f8a2:	4405      	add	r5, r0
 800f8a4:	9306      	str	r3, [sp, #24]
 800f8a6:	9b05      	ldr	r3, [sp, #20]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	dd05      	ble.n	800f8b8 <_dtoa_r+0x828>
 800f8ac:	4651      	mov	r1, sl
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 fc3b 	bl	801012c <__lshift>
 800f8b6:	4682      	mov	sl, r0
 800f8b8:	9b06      	ldr	r3, [sp, #24]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	dd05      	ble.n	800f8ca <_dtoa_r+0x83a>
 800f8be:	4631      	mov	r1, r6
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f000 fc32 	bl	801012c <__lshift>
 800f8c8:	4606      	mov	r6, r0
 800f8ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d072      	beq.n	800f9b6 <_dtoa_r+0x926>
 800f8d0:	4631      	mov	r1, r6
 800f8d2:	4650      	mov	r0, sl
 800f8d4:	f000 fc96 	bl	8010204 <__mcmp>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	da6c      	bge.n	800f9b6 <_dtoa_r+0x926>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	4651      	mov	r1, sl
 800f8e0:	220a      	movs	r2, #10
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f000 fa74 	bl	800fdd0 <__multadd>
 800f8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8ee:	4682      	mov	sl, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 81b0 	beq.w	800fc56 <_dtoa_r+0xbc6>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	4639      	mov	r1, r7
 800f8fa:	220a      	movs	r2, #10
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f000 fa67 	bl	800fdd0 <__multadd>
 800f902:	9b01      	ldr	r3, [sp, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	4607      	mov	r7, r0
 800f908:	f300 8096 	bgt.w	800fa38 <_dtoa_r+0x9a8>
 800f90c:	9b07      	ldr	r3, [sp, #28]
 800f90e:	2b02      	cmp	r3, #2
 800f910:	dc59      	bgt.n	800f9c6 <_dtoa_r+0x936>
 800f912:	e091      	b.n	800fa38 <_dtoa_r+0x9a8>
 800f914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f91a:	e758      	b.n	800f7ce <_dtoa_r+0x73e>
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	1e5e      	subs	r6, r3, #1
 800f920:	9b08      	ldr	r3, [sp, #32]
 800f922:	42b3      	cmp	r3, r6
 800f924:	bfbf      	itttt	lt
 800f926:	9b08      	ldrlt	r3, [sp, #32]
 800f928:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f92a:	9608      	strlt	r6, [sp, #32]
 800f92c:	1af3      	sublt	r3, r6, r3
 800f92e:	bfb4      	ite	lt
 800f930:	18d2      	addlt	r2, r2, r3
 800f932:	1b9e      	subge	r6, r3, r6
 800f934:	9b04      	ldr	r3, [sp, #16]
 800f936:	bfbc      	itt	lt
 800f938:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f93a:	2600      	movlt	r6, #0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	bfb7      	itett	lt
 800f940:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f944:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f948:	1a9d      	sublt	r5, r3, r2
 800f94a:	2300      	movlt	r3, #0
 800f94c:	e741      	b.n	800f7d2 <_dtoa_r+0x742>
 800f94e:	9e08      	ldr	r6, [sp, #32]
 800f950:	9d05      	ldr	r5, [sp, #20]
 800f952:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f954:	e748      	b.n	800f7e8 <_dtoa_r+0x758>
 800f956:	9a08      	ldr	r2, [sp, #32]
 800f958:	e770      	b.n	800f83c <_dtoa_r+0x7ac>
 800f95a:	9b07      	ldr	r3, [sp, #28]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	dc19      	bgt.n	800f994 <_dtoa_r+0x904>
 800f960:	9b02      	ldr	r3, [sp, #8]
 800f962:	b9bb      	cbnz	r3, 800f994 <_dtoa_r+0x904>
 800f964:	9b03      	ldr	r3, [sp, #12]
 800f966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f96a:	b99b      	cbnz	r3, 800f994 <_dtoa_r+0x904>
 800f96c:	9b03      	ldr	r3, [sp, #12]
 800f96e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f972:	0d1b      	lsrs	r3, r3, #20
 800f974:	051b      	lsls	r3, r3, #20
 800f976:	b183      	cbz	r3, 800f99a <_dtoa_r+0x90a>
 800f978:	9b05      	ldr	r3, [sp, #20]
 800f97a:	3301      	adds	r3, #1
 800f97c:	9305      	str	r3, [sp, #20]
 800f97e:	9b06      	ldr	r3, [sp, #24]
 800f980:	3301      	adds	r3, #1
 800f982:	9306      	str	r3, [sp, #24]
 800f984:	f04f 0801 	mov.w	r8, #1
 800f988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f47f af6f 	bne.w	800f86e <_dtoa_r+0x7de>
 800f990:	2001      	movs	r0, #1
 800f992:	e774      	b.n	800f87e <_dtoa_r+0x7ee>
 800f994:	f04f 0800 	mov.w	r8, #0
 800f998:	e7f6      	b.n	800f988 <_dtoa_r+0x8f8>
 800f99a:	4698      	mov	r8, r3
 800f99c:	e7f4      	b.n	800f988 <_dtoa_r+0x8f8>
 800f99e:	d082      	beq.n	800f8a6 <_dtoa_r+0x816>
 800f9a0:	9a05      	ldr	r2, [sp, #20]
 800f9a2:	331c      	adds	r3, #28
 800f9a4:	441a      	add	r2, r3
 800f9a6:	9205      	str	r2, [sp, #20]
 800f9a8:	9a06      	ldr	r2, [sp, #24]
 800f9aa:	441a      	add	r2, r3
 800f9ac:	441d      	add	r5, r3
 800f9ae:	9206      	str	r2, [sp, #24]
 800f9b0:	e779      	b.n	800f8a6 <_dtoa_r+0x816>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	e7f4      	b.n	800f9a0 <_dtoa_r+0x910>
 800f9b6:	9b04      	ldr	r3, [sp, #16]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	dc37      	bgt.n	800fa2c <_dtoa_r+0x99c>
 800f9bc:	9b07      	ldr	r3, [sp, #28]
 800f9be:	2b02      	cmp	r3, #2
 800f9c0:	dd34      	ble.n	800fa2c <_dtoa_r+0x99c>
 800f9c2:	9b04      	ldr	r3, [sp, #16]
 800f9c4:	9301      	str	r3, [sp, #4]
 800f9c6:	9b01      	ldr	r3, [sp, #4]
 800f9c8:	b963      	cbnz	r3, 800f9e4 <_dtoa_r+0x954>
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	2205      	movs	r2, #5
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f000 f9fe 	bl	800fdd0 <__multadd>
 800f9d4:	4601      	mov	r1, r0
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	4650      	mov	r0, sl
 800f9da:	f000 fc13 	bl	8010204 <__mcmp>
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	f73f adbb 	bgt.w	800f55a <_dtoa_r+0x4ca>
 800f9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9e6:	9d00      	ldr	r5, [sp, #0]
 800f9e8:	ea6f 0b03 	mvn.w	fp, r3
 800f9ec:	f04f 0800 	mov.w	r8, #0
 800f9f0:	4631      	mov	r1, r6
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f000 f9ca 	bl	800fd8c <_Bfree>
 800f9f8:	2f00      	cmp	r7, #0
 800f9fa:	f43f aeab 	beq.w	800f754 <_dtoa_r+0x6c4>
 800f9fe:	f1b8 0f00 	cmp.w	r8, #0
 800fa02:	d005      	beq.n	800fa10 <_dtoa_r+0x980>
 800fa04:	45b8      	cmp	r8, r7
 800fa06:	d003      	beq.n	800fa10 <_dtoa_r+0x980>
 800fa08:	4641      	mov	r1, r8
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f000 f9be 	bl	800fd8c <_Bfree>
 800fa10:	4639      	mov	r1, r7
 800fa12:	4620      	mov	r0, r4
 800fa14:	f000 f9ba 	bl	800fd8c <_Bfree>
 800fa18:	e69c      	b.n	800f754 <_dtoa_r+0x6c4>
 800fa1a:	2600      	movs	r6, #0
 800fa1c:	4637      	mov	r7, r6
 800fa1e:	e7e1      	b.n	800f9e4 <_dtoa_r+0x954>
 800fa20:	46bb      	mov	fp, r7
 800fa22:	4637      	mov	r7, r6
 800fa24:	e599      	b.n	800f55a <_dtoa_r+0x4ca>
 800fa26:	bf00      	nop
 800fa28:	40240000 	.word	0x40240000
 800fa2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f000 80c8 	beq.w	800fbc4 <_dtoa_r+0xb34>
 800fa34:	9b04      	ldr	r3, [sp, #16]
 800fa36:	9301      	str	r3, [sp, #4]
 800fa38:	2d00      	cmp	r5, #0
 800fa3a:	dd05      	ble.n	800fa48 <_dtoa_r+0x9b8>
 800fa3c:	4639      	mov	r1, r7
 800fa3e:	462a      	mov	r2, r5
 800fa40:	4620      	mov	r0, r4
 800fa42:	f000 fb73 	bl	801012c <__lshift>
 800fa46:	4607      	mov	r7, r0
 800fa48:	f1b8 0f00 	cmp.w	r8, #0
 800fa4c:	d05b      	beq.n	800fb06 <_dtoa_r+0xa76>
 800fa4e:	6879      	ldr	r1, [r7, #4]
 800fa50:	4620      	mov	r0, r4
 800fa52:	f000 f95b 	bl	800fd0c <_Balloc>
 800fa56:	4605      	mov	r5, r0
 800fa58:	b928      	cbnz	r0, 800fa66 <_dtoa_r+0x9d6>
 800fa5a:	4b83      	ldr	r3, [pc, #524]	; (800fc68 <_dtoa_r+0xbd8>)
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fa62:	f7ff bb2e 	b.w	800f0c2 <_dtoa_r+0x32>
 800fa66:	693a      	ldr	r2, [r7, #16]
 800fa68:	3202      	adds	r2, #2
 800fa6a:	0092      	lsls	r2, r2, #2
 800fa6c:	f107 010c 	add.w	r1, r7, #12
 800fa70:	300c      	adds	r0, #12
 800fa72:	f7ff fa74 	bl	800ef5e <memcpy>
 800fa76:	2201      	movs	r2, #1
 800fa78:	4629      	mov	r1, r5
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f000 fb56 	bl	801012c <__lshift>
 800fa80:	9b00      	ldr	r3, [sp, #0]
 800fa82:	3301      	adds	r3, #1
 800fa84:	9304      	str	r3, [sp, #16]
 800fa86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	9308      	str	r3, [sp, #32]
 800fa8e:	9b02      	ldr	r3, [sp, #8]
 800fa90:	f003 0301 	and.w	r3, r3, #1
 800fa94:	46b8      	mov	r8, r7
 800fa96:	9306      	str	r3, [sp, #24]
 800fa98:	4607      	mov	r7, r0
 800fa9a:	9b04      	ldr	r3, [sp, #16]
 800fa9c:	4631      	mov	r1, r6
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	4650      	mov	r0, sl
 800faa2:	9301      	str	r3, [sp, #4]
 800faa4:	f7ff fa69 	bl	800ef7a <quorem>
 800faa8:	4641      	mov	r1, r8
 800faaa:	9002      	str	r0, [sp, #8]
 800faac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fab0:	4650      	mov	r0, sl
 800fab2:	f000 fba7 	bl	8010204 <__mcmp>
 800fab6:	463a      	mov	r2, r7
 800fab8:	9005      	str	r0, [sp, #20]
 800faba:	4631      	mov	r1, r6
 800fabc:	4620      	mov	r0, r4
 800fabe:	f000 fbbd 	bl	801023c <__mdiff>
 800fac2:	68c2      	ldr	r2, [r0, #12]
 800fac4:	4605      	mov	r5, r0
 800fac6:	bb02      	cbnz	r2, 800fb0a <_dtoa_r+0xa7a>
 800fac8:	4601      	mov	r1, r0
 800faca:	4650      	mov	r0, sl
 800facc:	f000 fb9a 	bl	8010204 <__mcmp>
 800fad0:	4602      	mov	r2, r0
 800fad2:	4629      	mov	r1, r5
 800fad4:	4620      	mov	r0, r4
 800fad6:	9209      	str	r2, [sp, #36]	; 0x24
 800fad8:	f000 f958 	bl	800fd8c <_Bfree>
 800fadc:	9b07      	ldr	r3, [sp, #28]
 800fade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fae0:	9d04      	ldr	r5, [sp, #16]
 800fae2:	ea43 0102 	orr.w	r1, r3, r2
 800fae6:	9b06      	ldr	r3, [sp, #24]
 800fae8:	4319      	orrs	r1, r3
 800faea:	d110      	bne.n	800fb0e <_dtoa_r+0xa7e>
 800faec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800faf0:	d029      	beq.n	800fb46 <_dtoa_r+0xab6>
 800faf2:	9b05      	ldr	r3, [sp, #20]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	dd02      	ble.n	800fafe <_dtoa_r+0xa6e>
 800faf8:	9b02      	ldr	r3, [sp, #8]
 800fafa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fafe:	9b01      	ldr	r3, [sp, #4]
 800fb00:	f883 9000 	strb.w	r9, [r3]
 800fb04:	e774      	b.n	800f9f0 <_dtoa_r+0x960>
 800fb06:	4638      	mov	r0, r7
 800fb08:	e7ba      	b.n	800fa80 <_dtoa_r+0x9f0>
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	e7e1      	b.n	800fad2 <_dtoa_r+0xa42>
 800fb0e:	9b05      	ldr	r3, [sp, #20]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	db04      	blt.n	800fb1e <_dtoa_r+0xa8e>
 800fb14:	9907      	ldr	r1, [sp, #28]
 800fb16:	430b      	orrs	r3, r1
 800fb18:	9906      	ldr	r1, [sp, #24]
 800fb1a:	430b      	orrs	r3, r1
 800fb1c:	d120      	bne.n	800fb60 <_dtoa_r+0xad0>
 800fb1e:	2a00      	cmp	r2, #0
 800fb20:	dded      	ble.n	800fafe <_dtoa_r+0xa6e>
 800fb22:	4651      	mov	r1, sl
 800fb24:	2201      	movs	r2, #1
 800fb26:	4620      	mov	r0, r4
 800fb28:	f000 fb00 	bl	801012c <__lshift>
 800fb2c:	4631      	mov	r1, r6
 800fb2e:	4682      	mov	sl, r0
 800fb30:	f000 fb68 	bl	8010204 <__mcmp>
 800fb34:	2800      	cmp	r0, #0
 800fb36:	dc03      	bgt.n	800fb40 <_dtoa_r+0xab0>
 800fb38:	d1e1      	bne.n	800fafe <_dtoa_r+0xa6e>
 800fb3a:	f019 0f01 	tst.w	r9, #1
 800fb3e:	d0de      	beq.n	800fafe <_dtoa_r+0xa6e>
 800fb40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb44:	d1d8      	bne.n	800faf8 <_dtoa_r+0xa68>
 800fb46:	9a01      	ldr	r2, [sp, #4]
 800fb48:	2339      	movs	r3, #57	; 0x39
 800fb4a:	7013      	strb	r3, [r2, #0]
 800fb4c:	462b      	mov	r3, r5
 800fb4e:	461d      	mov	r5, r3
 800fb50:	3b01      	subs	r3, #1
 800fb52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb56:	2a39      	cmp	r2, #57	; 0x39
 800fb58:	d06c      	beq.n	800fc34 <_dtoa_r+0xba4>
 800fb5a:	3201      	adds	r2, #1
 800fb5c:	701a      	strb	r2, [r3, #0]
 800fb5e:	e747      	b.n	800f9f0 <_dtoa_r+0x960>
 800fb60:	2a00      	cmp	r2, #0
 800fb62:	dd07      	ble.n	800fb74 <_dtoa_r+0xae4>
 800fb64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb68:	d0ed      	beq.n	800fb46 <_dtoa_r+0xab6>
 800fb6a:	9a01      	ldr	r2, [sp, #4]
 800fb6c:	f109 0301 	add.w	r3, r9, #1
 800fb70:	7013      	strb	r3, [r2, #0]
 800fb72:	e73d      	b.n	800f9f0 <_dtoa_r+0x960>
 800fb74:	9b04      	ldr	r3, [sp, #16]
 800fb76:	9a08      	ldr	r2, [sp, #32]
 800fb78:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d043      	beq.n	800fc08 <_dtoa_r+0xb78>
 800fb80:	4651      	mov	r1, sl
 800fb82:	2300      	movs	r3, #0
 800fb84:	220a      	movs	r2, #10
 800fb86:	4620      	mov	r0, r4
 800fb88:	f000 f922 	bl	800fdd0 <__multadd>
 800fb8c:	45b8      	cmp	r8, r7
 800fb8e:	4682      	mov	sl, r0
 800fb90:	f04f 0300 	mov.w	r3, #0
 800fb94:	f04f 020a 	mov.w	r2, #10
 800fb98:	4641      	mov	r1, r8
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	d107      	bne.n	800fbae <_dtoa_r+0xb1e>
 800fb9e:	f000 f917 	bl	800fdd0 <__multadd>
 800fba2:	4680      	mov	r8, r0
 800fba4:	4607      	mov	r7, r0
 800fba6:	9b04      	ldr	r3, [sp, #16]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	9304      	str	r3, [sp, #16]
 800fbac:	e775      	b.n	800fa9a <_dtoa_r+0xa0a>
 800fbae:	f000 f90f 	bl	800fdd0 <__multadd>
 800fbb2:	4639      	mov	r1, r7
 800fbb4:	4680      	mov	r8, r0
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	220a      	movs	r2, #10
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f000 f908 	bl	800fdd0 <__multadd>
 800fbc0:	4607      	mov	r7, r0
 800fbc2:	e7f0      	b.n	800fba6 <_dtoa_r+0xb16>
 800fbc4:	9b04      	ldr	r3, [sp, #16]
 800fbc6:	9301      	str	r3, [sp, #4]
 800fbc8:	9d00      	ldr	r5, [sp, #0]
 800fbca:	4631      	mov	r1, r6
 800fbcc:	4650      	mov	r0, sl
 800fbce:	f7ff f9d4 	bl	800ef7a <quorem>
 800fbd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fbd6:	9b00      	ldr	r3, [sp, #0]
 800fbd8:	f805 9b01 	strb.w	r9, [r5], #1
 800fbdc:	1aea      	subs	r2, r5, r3
 800fbde:	9b01      	ldr	r3, [sp, #4]
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	dd07      	ble.n	800fbf4 <_dtoa_r+0xb64>
 800fbe4:	4651      	mov	r1, sl
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	220a      	movs	r2, #10
 800fbea:	4620      	mov	r0, r4
 800fbec:	f000 f8f0 	bl	800fdd0 <__multadd>
 800fbf0:	4682      	mov	sl, r0
 800fbf2:	e7ea      	b.n	800fbca <_dtoa_r+0xb3a>
 800fbf4:	9b01      	ldr	r3, [sp, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	bfc8      	it	gt
 800fbfa:	461d      	movgt	r5, r3
 800fbfc:	9b00      	ldr	r3, [sp, #0]
 800fbfe:	bfd8      	it	le
 800fc00:	2501      	movle	r5, #1
 800fc02:	441d      	add	r5, r3
 800fc04:	f04f 0800 	mov.w	r8, #0
 800fc08:	4651      	mov	r1, sl
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f000 fa8d 	bl	801012c <__lshift>
 800fc12:	4631      	mov	r1, r6
 800fc14:	4682      	mov	sl, r0
 800fc16:	f000 faf5 	bl	8010204 <__mcmp>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	dc96      	bgt.n	800fb4c <_dtoa_r+0xabc>
 800fc1e:	d102      	bne.n	800fc26 <_dtoa_r+0xb96>
 800fc20:	f019 0f01 	tst.w	r9, #1
 800fc24:	d192      	bne.n	800fb4c <_dtoa_r+0xabc>
 800fc26:	462b      	mov	r3, r5
 800fc28:	461d      	mov	r5, r3
 800fc2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc2e:	2a30      	cmp	r2, #48	; 0x30
 800fc30:	d0fa      	beq.n	800fc28 <_dtoa_r+0xb98>
 800fc32:	e6dd      	b.n	800f9f0 <_dtoa_r+0x960>
 800fc34:	9a00      	ldr	r2, [sp, #0]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d189      	bne.n	800fb4e <_dtoa_r+0xabe>
 800fc3a:	f10b 0b01 	add.w	fp, fp, #1
 800fc3e:	2331      	movs	r3, #49	; 0x31
 800fc40:	e796      	b.n	800fb70 <_dtoa_r+0xae0>
 800fc42:	4b0a      	ldr	r3, [pc, #40]	; (800fc6c <_dtoa_r+0xbdc>)
 800fc44:	f7ff ba99 	b.w	800f17a <_dtoa_r+0xea>
 800fc48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f47f aa6d 	bne.w	800f12a <_dtoa_r+0x9a>
 800fc50:	4b07      	ldr	r3, [pc, #28]	; (800fc70 <_dtoa_r+0xbe0>)
 800fc52:	f7ff ba92 	b.w	800f17a <_dtoa_r+0xea>
 800fc56:	9b01      	ldr	r3, [sp, #4]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	dcb5      	bgt.n	800fbc8 <_dtoa_r+0xb38>
 800fc5c:	9b07      	ldr	r3, [sp, #28]
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	f73f aeb1 	bgt.w	800f9c6 <_dtoa_r+0x936>
 800fc64:	e7b0      	b.n	800fbc8 <_dtoa_r+0xb38>
 800fc66:	bf00      	nop
 800fc68:	08016488 	.word	0x08016488
 800fc6c:	080163e8 	.word	0x080163e8
 800fc70:	0801640c 	.word	0x0801640c

0800fc74 <_free_r>:
 800fc74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc76:	2900      	cmp	r1, #0
 800fc78:	d044      	beq.n	800fd04 <_free_r+0x90>
 800fc7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc7e:	9001      	str	r0, [sp, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f1a1 0404 	sub.w	r4, r1, #4
 800fc86:	bfb8      	it	lt
 800fc88:	18e4      	addlt	r4, r4, r3
 800fc8a:	f7fe fb2d 	bl	800e2e8 <__malloc_lock>
 800fc8e:	4a1e      	ldr	r2, [pc, #120]	; (800fd08 <_free_r+0x94>)
 800fc90:	9801      	ldr	r0, [sp, #4]
 800fc92:	6813      	ldr	r3, [r2, #0]
 800fc94:	b933      	cbnz	r3, 800fca4 <_free_r+0x30>
 800fc96:	6063      	str	r3, [r4, #4]
 800fc98:	6014      	str	r4, [r2, #0]
 800fc9a:	b003      	add	sp, #12
 800fc9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fca0:	f7fe bb28 	b.w	800e2f4 <__malloc_unlock>
 800fca4:	42a3      	cmp	r3, r4
 800fca6:	d908      	bls.n	800fcba <_free_r+0x46>
 800fca8:	6825      	ldr	r5, [r4, #0]
 800fcaa:	1961      	adds	r1, r4, r5
 800fcac:	428b      	cmp	r3, r1
 800fcae:	bf01      	itttt	eq
 800fcb0:	6819      	ldreq	r1, [r3, #0]
 800fcb2:	685b      	ldreq	r3, [r3, #4]
 800fcb4:	1949      	addeq	r1, r1, r5
 800fcb6:	6021      	streq	r1, [r4, #0]
 800fcb8:	e7ed      	b.n	800fc96 <_free_r+0x22>
 800fcba:	461a      	mov	r2, r3
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	b10b      	cbz	r3, 800fcc4 <_free_r+0x50>
 800fcc0:	42a3      	cmp	r3, r4
 800fcc2:	d9fa      	bls.n	800fcba <_free_r+0x46>
 800fcc4:	6811      	ldr	r1, [r2, #0]
 800fcc6:	1855      	adds	r5, r2, r1
 800fcc8:	42a5      	cmp	r5, r4
 800fcca:	d10b      	bne.n	800fce4 <_free_r+0x70>
 800fccc:	6824      	ldr	r4, [r4, #0]
 800fcce:	4421      	add	r1, r4
 800fcd0:	1854      	adds	r4, r2, r1
 800fcd2:	42a3      	cmp	r3, r4
 800fcd4:	6011      	str	r1, [r2, #0]
 800fcd6:	d1e0      	bne.n	800fc9a <_free_r+0x26>
 800fcd8:	681c      	ldr	r4, [r3, #0]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	6053      	str	r3, [r2, #4]
 800fcde:	440c      	add	r4, r1
 800fce0:	6014      	str	r4, [r2, #0]
 800fce2:	e7da      	b.n	800fc9a <_free_r+0x26>
 800fce4:	d902      	bls.n	800fcec <_free_r+0x78>
 800fce6:	230c      	movs	r3, #12
 800fce8:	6003      	str	r3, [r0, #0]
 800fcea:	e7d6      	b.n	800fc9a <_free_r+0x26>
 800fcec:	6825      	ldr	r5, [r4, #0]
 800fcee:	1961      	adds	r1, r4, r5
 800fcf0:	428b      	cmp	r3, r1
 800fcf2:	bf04      	itt	eq
 800fcf4:	6819      	ldreq	r1, [r3, #0]
 800fcf6:	685b      	ldreq	r3, [r3, #4]
 800fcf8:	6063      	str	r3, [r4, #4]
 800fcfa:	bf04      	itt	eq
 800fcfc:	1949      	addeq	r1, r1, r5
 800fcfe:	6021      	streq	r1, [r4, #0]
 800fd00:	6054      	str	r4, [r2, #4]
 800fd02:	e7ca      	b.n	800fc9a <_free_r+0x26>
 800fd04:	b003      	add	sp, #12
 800fd06:	bd30      	pop	{r4, r5, pc}
 800fd08:	20000a90 	.word	0x20000a90

0800fd0c <_Balloc>:
 800fd0c:	b570      	push	{r4, r5, r6, lr}
 800fd0e:	69c6      	ldr	r6, [r0, #28]
 800fd10:	4604      	mov	r4, r0
 800fd12:	460d      	mov	r5, r1
 800fd14:	b976      	cbnz	r6, 800fd34 <_Balloc+0x28>
 800fd16:	2010      	movs	r0, #16
 800fd18:	f7fe fa3e 	bl	800e198 <malloc>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	61e0      	str	r0, [r4, #28]
 800fd20:	b920      	cbnz	r0, 800fd2c <_Balloc+0x20>
 800fd22:	4b18      	ldr	r3, [pc, #96]	; (800fd84 <_Balloc+0x78>)
 800fd24:	4818      	ldr	r0, [pc, #96]	; (800fd88 <_Balloc+0x7c>)
 800fd26:	216b      	movs	r1, #107	; 0x6b
 800fd28:	f000 ff66 	bl	8010bf8 <__assert_func>
 800fd2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd30:	6006      	str	r6, [r0, #0]
 800fd32:	60c6      	str	r6, [r0, #12]
 800fd34:	69e6      	ldr	r6, [r4, #28]
 800fd36:	68f3      	ldr	r3, [r6, #12]
 800fd38:	b183      	cbz	r3, 800fd5c <_Balloc+0x50>
 800fd3a:	69e3      	ldr	r3, [r4, #28]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd42:	b9b8      	cbnz	r0, 800fd74 <_Balloc+0x68>
 800fd44:	2101      	movs	r1, #1
 800fd46:	fa01 f605 	lsl.w	r6, r1, r5
 800fd4a:	1d72      	adds	r2, r6, #5
 800fd4c:	0092      	lsls	r2, r2, #2
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 ff70 	bl	8010c34 <_calloc_r>
 800fd54:	b160      	cbz	r0, 800fd70 <_Balloc+0x64>
 800fd56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd5a:	e00e      	b.n	800fd7a <_Balloc+0x6e>
 800fd5c:	2221      	movs	r2, #33	; 0x21
 800fd5e:	2104      	movs	r1, #4
 800fd60:	4620      	mov	r0, r4
 800fd62:	f000 ff67 	bl	8010c34 <_calloc_r>
 800fd66:	69e3      	ldr	r3, [r4, #28]
 800fd68:	60f0      	str	r0, [r6, #12]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1e4      	bne.n	800fd3a <_Balloc+0x2e>
 800fd70:	2000      	movs	r0, #0
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
 800fd74:	6802      	ldr	r2, [r0, #0]
 800fd76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd80:	e7f7      	b.n	800fd72 <_Balloc+0x66>
 800fd82:	bf00      	nop
 800fd84:	08016419 	.word	0x08016419
 800fd88:	08016499 	.word	0x08016499

0800fd8c <_Bfree>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	69c6      	ldr	r6, [r0, #28]
 800fd90:	4605      	mov	r5, r0
 800fd92:	460c      	mov	r4, r1
 800fd94:	b976      	cbnz	r6, 800fdb4 <_Bfree+0x28>
 800fd96:	2010      	movs	r0, #16
 800fd98:	f7fe f9fe 	bl	800e198 <malloc>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	61e8      	str	r0, [r5, #28]
 800fda0:	b920      	cbnz	r0, 800fdac <_Bfree+0x20>
 800fda2:	4b09      	ldr	r3, [pc, #36]	; (800fdc8 <_Bfree+0x3c>)
 800fda4:	4809      	ldr	r0, [pc, #36]	; (800fdcc <_Bfree+0x40>)
 800fda6:	218f      	movs	r1, #143	; 0x8f
 800fda8:	f000 ff26 	bl	8010bf8 <__assert_func>
 800fdac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdb0:	6006      	str	r6, [r0, #0]
 800fdb2:	60c6      	str	r6, [r0, #12]
 800fdb4:	b13c      	cbz	r4, 800fdc6 <_Bfree+0x3a>
 800fdb6:	69eb      	ldr	r3, [r5, #28]
 800fdb8:	6862      	ldr	r2, [r4, #4]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdc0:	6021      	str	r1, [r4, #0]
 800fdc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}
 800fdc8:	08016419 	.word	0x08016419
 800fdcc:	08016499 	.word	0x08016499

0800fdd0 <__multadd>:
 800fdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd4:	690d      	ldr	r5, [r1, #16]
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	460c      	mov	r4, r1
 800fdda:	461e      	mov	r6, r3
 800fddc:	f101 0c14 	add.w	ip, r1, #20
 800fde0:	2000      	movs	r0, #0
 800fde2:	f8dc 3000 	ldr.w	r3, [ip]
 800fde6:	b299      	uxth	r1, r3
 800fde8:	fb02 6101 	mla	r1, r2, r1, r6
 800fdec:	0c1e      	lsrs	r6, r3, #16
 800fdee:	0c0b      	lsrs	r3, r1, #16
 800fdf0:	fb02 3306 	mla	r3, r2, r6, r3
 800fdf4:	b289      	uxth	r1, r1
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fdfc:	4285      	cmp	r5, r0
 800fdfe:	f84c 1b04 	str.w	r1, [ip], #4
 800fe02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe06:	dcec      	bgt.n	800fde2 <__multadd+0x12>
 800fe08:	b30e      	cbz	r6, 800fe4e <__multadd+0x7e>
 800fe0a:	68a3      	ldr	r3, [r4, #8]
 800fe0c:	42ab      	cmp	r3, r5
 800fe0e:	dc19      	bgt.n	800fe44 <__multadd+0x74>
 800fe10:	6861      	ldr	r1, [r4, #4]
 800fe12:	4638      	mov	r0, r7
 800fe14:	3101      	adds	r1, #1
 800fe16:	f7ff ff79 	bl	800fd0c <_Balloc>
 800fe1a:	4680      	mov	r8, r0
 800fe1c:	b928      	cbnz	r0, 800fe2a <__multadd+0x5a>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	4b0c      	ldr	r3, [pc, #48]	; (800fe54 <__multadd+0x84>)
 800fe22:	480d      	ldr	r0, [pc, #52]	; (800fe58 <__multadd+0x88>)
 800fe24:	21ba      	movs	r1, #186	; 0xba
 800fe26:	f000 fee7 	bl	8010bf8 <__assert_func>
 800fe2a:	6922      	ldr	r2, [r4, #16]
 800fe2c:	3202      	adds	r2, #2
 800fe2e:	f104 010c 	add.w	r1, r4, #12
 800fe32:	0092      	lsls	r2, r2, #2
 800fe34:	300c      	adds	r0, #12
 800fe36:	f7ff f892 	bl	800ef5e <memcpy>
 800fe3a:	4621      	mov	r1, r4
 800fe3c:	4638      	mov	r0, r7
 800fe3e:	f7ff ffa5 	bl	800fd8c <_Bfree>
 800fe42:	4644      	mov	r4, r8
 800fe44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe48:	3501      	adds	r5, #1
 800fe4a:	615e      	str	r6, [r3, #20]
 800fe4c:	6125      	str	r5, [r4, #16]
 800fe4e:	4620      	mov	r0, r4
 800fe50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe54:	08016488 	.word	0x08016488
 800fe58:	08016499 	.word	0x08016499

0800fe5c <__hi0bits>:
 800fe5c:	0c03      	lsrs	r3, r0, #16
 800fe5e:	041b      	lsls	r3, r3, #16
 800fe60:	b9d3      	cbnz	r3, 800fe98 <__hi0bits+0x3c>
 800fe62:	0400      	lsls	r0, r0, #16
 800fe64:	2310      	movs	r3, #16
 800fe66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe6a:	bf04      	itt	eq
 800fe6c:	0200      	lsleq	r0, r0, #8
 800fe6e:	3308      	addeq	r3, #8
 800fe70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe74:	bf04      	itt	eq
 800fe76:	0100      	lsleq	r0, r0, #4
 800fe78:	3304      	addeq	r3, #4
 800fe7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe7e:	bf04      	itt	eq
 800fe80:	0080      	lsleq	r0, r0, #2
 800fe82:	3302      	addeq	r3, #2
 800fe84:	2800      	cmp	r0, #0
 800fe86:	db05      	blt.n	800fe94 <__hi0bits+0x38>
 800fe88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe8c:	f103 0301 	add.w	r3, r3, #1
 800fe90:	bf08      	it	eq
 800fe92:	2320      	moveq	r3, #32
 800fe94:	4618      	mov	r0, r3
 800fe96:	4770      	bx	lr
 800fe98:	2300      	movs	r3, #0
 800fe9a:	e7e4      	b.n	800fe66 <__hi0bits+0xa>

0800fe9c <__lo0bits>:
 800fe9c:	6803      	ldr	r3, [r0, #0]
 800fe9e:	f013 0207 	ands.w	r2, r3, #7
 800fea2:	d00c      	beq.n	800febe <__lo0bits+0x22>
 800fea4:	07d9      	lsls	r1, r3, #31
 800fea6:	d422      	bmi.n	800feee <__lo0bits+0x52>
 800fea8:	079a      	lsls	r2, r3, #30
 800feaa:	bf49      	itett	mi
 800feac:	085b      	lsrmi	r3, r3, #1
 800feae:	089b      	lsrpl	r3, r3, #2
 800feb0:	6003      	strmi	r3, [r0, #0]
 800feb2:	2201      	movmi	r2, #1
 800feb4:	bf5c      	itt	pl
 800feb6:	6003      	strpl	r3, [r0, #0]
 800feb8:	2202      	movpl	r2, #2
 800feba:	4610      	mov	r0, r2
 800febc:	4770      	bx	lr
 800febe:	b299      	uxth	r1, r3
 800fec0:	b909      	cbnz	r1, 800fec6 <__lo0bits+0x2a>
 800fec2:	0c1b      	lsrs	r3, r3, #16
 800fec4:	2210      	movs	r2, #16
 800fec6:	b2d9      	uxtb	r1, r3
 800fec8:	b909      	cbnz	r1, 800fece <__lo0bits+0x32>
 800feca:	3208      	adds	r2, #8
 800fecc:	0a1b      	lsrs	r3, r3, #8
 800fece:	0719      	lsls	r1, r3, #28
 800fed0:	bf04      	itt	eq
 800fed2:	091b      	lsreq	r3, r3, #4
 800fed4:	3204      	addeq	r2, #4
 800fed6:	0799      	lsls	r1, r3, #30
 800fed8:	bf04      	itt	eq
 800feda:	089b      	lsreq	r3, r3, #2
 800fedc:	3202      	addeq	r2, #2
 800fede:	07d9      	lsls	r1, r3, #31
 800fee0:	d403      	bmi.n	800feea <__lo0bits+0x4e>
 800fee2:	085b      	lsrs	r3, r3, #1
 800fee4:	f102 0201 	add.w	r2, r2, #1
 800fee8:	d003      	beq.n	800fef2 <__lo0bits+0x56>
 800feea:	6003      	str	r3, [r0, #0]
 800feec:	e7e5      	b.n	800feba <__lo0bits+0x1e>
 800feee:	2200      	movs	r2, #0
 800fef0:	e7e3      	b.n	800feba <__lo0bits+0x1e>
 800fef2:	2220      	movs	r2, #32
 800fef4:	e7e1      	b.n	800feba <__lo0bits+0x1e>
	...

0800fef8 <__i2b>:
 800fef8:	b510      	push	{r4, lr}
 800fefa:	460c      	mov	r4, r1
 800fefc:	2101      	movs	r1, #1
 800fefe:	f7ff ff05 	bl	800fd0c <_Balloc>
 800ff02:	4602      	mov	r2, r0
 800ff04:	b928      	cbnz	r0, 800ff12 <__i2b+0x1a>
 800ff06:	4b05      	ldr	r3, [pc, #20]	; (800ff1c <__i2b+0x24>)
 800ff08:	4805      	ldr	r0, [pc, #20]	; (800ff20 <__i2b+0x28>)
 800ff0a:	f240 1145 	movw	r1, #325	; 0x145
 800ff0e:	f000 fe73 	bl	8010bf8 <__assert_func>
 800ff12:	2301      	movs	r3, #1
 800ff14:	6144      	str	r4, [r0, #20]
 800ff16:	6103      	str	r3, [r0, #16]
 800ff18:	bd10      	pop	{r4, pc}
 800ff1a:	bf00      	nop
 800ff1c:	08016488 	.word	0x08016488
 800ff20:	08016499 	.word	0x08016499

0800ff24 <__multiply>:
 800ff24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff28:	4691      	mov	r9, r2
 800ff2a:	690a      	ldr	r2, [r1, #16]
 800ff2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	bfb8      	it	lt
 800ff34:	460b      	movlt	r3, r1
 800ff36:	460c      	mov	r4, r1
 800ff38:	bfbc      	itt	lt
 800ff3a:	464c      	movlt	r4, r9
 800ff3c:	4699      	movlt	r9, r3
 800ff3e:	6927      	ldr	r7, [r4, #16]
 800ff40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff44:	68a3      	ldr	r3, [r4, #8]
 800ff46:	6861      	ldr	r1, [r4, #4]
 800ff48:	eb07 060a 	add.w	r6, r7, sl
 800ff4c:	42b3      	cmp	r3, r6
 800ff4e:	b085      	sub	sp, #20
 800ff50:	bfb8      	it	lt
 800ff52:	3101      	addlt	r1, #1
 800ff54:	f7ff feda 	bl	800fd0c <_Balloc>
 800ff58:	b930      	cbnz	r0, 800ff68 <__multiply+0x44>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	4b44      	ldr	r3, [pc, #272]	; (8010070 <__multiply+0x14c>)
 800ff5e:	4845      	ldr	r0, [pc, #276]	; (8010074 <__multiply+0x150>)
 800ff60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ff64:	f000 fe48 	bl	8010bf8 <__assert_func>
 800ff68:	f100 0514 	add.w	r5, r0, #20
 800ff6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff70:	462b      	mov	r3, r5
 800ff72:	2200      	movs	r2, #0
 800ff74:	4543      	cmp	r3, r8
 800ff76:	d321      	bcc.n	800ffbc <__multiply+0x98>
 800ff78:	f104 0314 	add.w	r3, r4, #20
 800ff7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ff80:	f109 0314 	add.w	r3, r9, #20
 800ff84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ff88:	9202      	str	r2, [sp, #8]
 800ff8a:	1b3a      	subs	r2, r7, r4
 800ff8c:	3a15      	subs	r2, #21
 800ff8e:	f022 0203 	bic.w	r2, r2, #3
 800ff92:	3204      	adds	r2, #4
 800ff94:	f104 0115 	add.w	r1, r4, #21
 800ff98:	428f      	cmp	r7, r1
 800ff9a:	bf38      	it	cc
 800ff9c:	2204      	movcc	r2, #4
 800ff9e:	9201      	str	r2, [sp, #4]
 800ffa0:	9a02      	ldr	r2, [sp, #8]
 800ffa2:	9303      	str	r3, [sp, #12]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d80c      	bhi.n	800ffc2 <__multiply+0x9e>
 800ffa8:	2e00      	cmp	r6, #0
 800ffaa:	dd03      	ble.n	800ffb4 <__multiply+0x90>
 800ffac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d05b      	beq.n	801006c <__multiply+0x148>
 800ffb4:	6106      	str	r6, [r0, #16]
 800ffb6:	b005      	add	sp, #20
 800ffb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffbc:	f843 2b04 	str.w	r2, [r3], #4
 800ffc0:	e7d8      	b.n	800ff74 <__multiply+0x50>
 800ffc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800ffc6:	f1ba 0f00 	cmp.w	sl, #0
 800ffca:	d024      	beq.n	8010016 <__multiply+0xf2>
 800ffcc:	f104 0e14 	add.w	lr, r4, #20
 800ffd0:	46a9      	mov	r9, r5
 800ffd2:	f04f 0c00 	mov.w	ip, #0
 800ffd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ffda:	f8d9 1000 	ldr.w	r1, [r9]
 800ffde:	fa1f fb82 	uxth.w	fp, r2
 800ffe2:	b289      	uxth	r1, r1
 800ffe4:	fb0a 110b 	mla	r1, sl, fp, r1
 800ffe8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ffec:	f8d9 2000 	ldr.w	r2, [r9]
 800fff0:	4461      	add	r1, ip
 800fff2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fff6:	fb0a c20b 	mla	r2, sl, fp, ip
 800fffa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fffe:	b289      	uxth	r1, r1
 8010000:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010004:	4577      	cmp	r7, lr
 8010006:	f849 1b04 	str.w	r1, [r9], #4
 801000a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801000e:	d8e2      	bhi.n	800ffd6 <__multiply+0xb2>
 8010010:	9a01      	ldr	r2, [sp, #4]
 8010012:	f845 c002 	str.w	ip, [r5, r2]
 8010016:	9a03      	ldr	r2, [sp, #12]
 8010018:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801001c:	3304      	adds	r3, #4
 801001e:	f1b9 0f00 	cmp.w	r9, #0
 8010022:	d021      	beq.n	8010068 <__multiply+0x144>
 8010024:	6829      	ldr	r1, [r5, #0]
 8010026:	f104 0c14 	add.w	ip, r4, #20
 801002a:	46ae      	mov	lr, r5
 801002c:	f04f 0a00 	mov.w	sl, #0
 8010030:	f8bc b000 	ldrh.w	fp, [ip]
 8010034:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010038:	fb09 220b 	mla	r2, r9, fp, r2
 801003c:	4452      	add	r2, sl
 801003e:	b289      	uxth	r1, r1
 8010040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010044:	f84e 1b04 	str.w	r1, [lr], #4
 8010048:	f85c 1b04 	ldr.w	r1, [ip], #4
 801004c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010050:	f8be 1000 	ldrh.w	r1, [lr]
 8010054:	fb09 110a 	mla	r1, r9, sl, r1
 8010058:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801005c:	4567      	cmp	r7, ip
 801005e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010062:	d8e5      	bhi.n	8010030 <__multiply+0x10c>
 8010064:	9a01      	ldr	r2, [sp, #4]
 8010066:	50a9      	str	r1, [r5, r2]
 8010068:	3504      	adds	r5, #4
 801006a:	e799      	b.n	800ffa0 <__multiply+0x7c>
 801006c:	3e01      	subs	r6, #1
 801006e:	e79b      	b.n	800ffa8 <__multiply+0x84>
 8010070:	08016488 	.word	0x08016488
 8010074:	08016499 	.word	0x08016499

08010078 <__pow5mult>:
 8010078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801007c:	4615      	mov	r5, r2
 801007e:	f012 0203 	ands.w	r2, r2, #3
 8010082:	4606      	mov	r6, r0
 8010084:	460f      	mov	r7, r1
 8010086:	d007      	beq.n	8010098 <__pow5mult+0x20>
 8010088:	4c25      	ldr	r4, [pc, #148]	; (8010120 <__pow5mult+0xa8>)
 801008a:	3a01      	subs	r2, #1
 801008c:	2300      	movs	r3, #0
 801008e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010092:	f7ff fe9d 	bl	800fdd0 <__multadd>
 8010096:	4607      	mov	r7, r0
 8010098:	10ad      	asrs	r5, r5, #2
 801009a:	d03d      	beq.n	8010118 <__pow5mult+0xa0>
 801009c:	69f4      	ldr	r4, [r6, #28]
 801009e:	b97c      	cbnz	r4, 80100c0 <__pow5mult+0x48>
 80100a0:	2010      	movs	r0, #16
 80100a2:	f7fe f879 	bl	800e198 <malloc>
 80100a6:	4602      	mov	r2, r0
 80100a8:	61f0      	str	r0, [r6, #28]
 80100aa:	b928      	cbnz	r0, 80100b8 <__pow5mult+0x40>
 80100ac:	4b1d      	ldr	r3, [pc, #116]	; (8010124 <__pow5mult+0xac>)
 80100ae:	481e      	ldr	r0, [pc, #120]	; (8010128 <__pow5mult+0xb0>)
 80100b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80100b4:	f000 fda0 	bl	8010bf8 <__assert_func>
 80100b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100bc:	6004      	str	r4, [r0, #0]
 80100be:	60c4      	str	r4, [r0, #12]
 80100c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80100c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100c8:	b94c      	cbnz	r4, 80100de <__pow5mult+0x66>
 80100ca:	f240 2171 	movw	r1, #625	; 0x271
 80100ce:	4630      	mov	r0, r6
 80100d0:	f7ff ff12 	bl	800fef8 <__i2b>
 80100d4:	2300      	movs	r3, #0
 80100d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80100da:	4604      	mov	r4, r0
 80100dc:	6003      	str	r3, [r0, #0]
 80100de:	f04f 0900 	mov.w	r9, #0
 80100e2:	07eb      	lsls	r3, r5, #31
 80100e4:	d50a      	bpl.n	80100fc <__pow5mult+0x84>
 80100e6:	4639      	mov	r1, r7
 80100e8:	4622      	mov	r2, r4
 80100ea:	4630      	mov	r0, r6
 80100ec:	f7ff ff1a 	bl	800ff24 <__multiply>
 80100f0:	4639      	mov	r1, r7
 80100f2:	4680      	mov	r8, r0
 80100f4:	4630      	mov	r0, r6
 80100f6:	f7ff fe49 	bl	800fd8c <_Bfree>
 80100fa:	4647      	mov	r7, r8
 80100fc:	106d      	asrs	r5, r5, #1
 80100fe:	d00b      	beq.n	8010118 <__pow5mult+0xa0>
 8010100:	6820      	ldr	r0, [r4, #0]
 8010102:	b938      	cbnz	r0, 8010114 <__pow5mult+0x9c>
 8010104:	4622      	mov	r2, r4
 8010106:	4621      	mov	r1, r4
 8010108:	4630      	mov	r0, r6
 801010a:	f7ff ff0b 	bl	800ff24 <__multiply>
 801010e:	6020      	str	r0, [r4, #0]
 8010110:	f8c0 9000 	str.w	r9, [r0]
 8010114:	4604      	mov	r4, r0
 8010116:	e7e4      	b.n	80100e2 <__pow5mult+0x6a>
 8010118:	4638      	mov	r0, r7
 801011a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801011e:	bf00      	nop
 8010120:	080165e8 	.word	0x080165e8
 8010124:	08016419 	.word	0x08016419
 8010128:	08016499 	.word	0x08016499

0801012c <__lshift>:
 801012c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010130:	460c      	mov	r4, r1
 8010132:	6849      	ldr	r1, [r1, #4]
 8010134:	6923      	ldr	r3, [r4, #16]
 8010136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801013a:	68a3      	ldr	r3, [r4, #8]
 801013c:	4607      	mov	r7, r0
 801013e:	4691      	mov	r9, r2
 8010140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010144:	f108 0601 	add.w	r6, r8, #1
 8010148:	42b3      	cmp	r3, r6
 801014a:	db0b      	blt.n	8010164 <__lshift+0x38>
 801014c:	4638      	mov	r0, r7
 801014e:	f7ff fddd 	bl	800fd0c <_Balloc>
 8010152:	4605      	mov	r5, r0
 8010154:	b948      	cbnz	r0, 801016a <__lshift+0x3e>
 8010156:	4602      	mov	r2, r0
 8010158:	4b28      	ldr	r3, [pc, #160]	; (80101fc <__lshift+0xd0>)
 801015a:	4829      	ldr	r0, [pc, #164]	; (8010200 <__lshift+0xd4>)
 801015c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010160:	f000 fd4a 	bl	8010bf8 <__assert_func>
 8010164:	3101      	adds	r1, #1
 8010166:	005b      	lsls	r3, r3, #1
 8010168:	e7ee      	b.n	8010148 <__lshift+0x1c>
 801016a:	2300      	movs	r3, #0
 801016c:	f100 0114 	add.w	r1, r0, #20
 8010170:	f100 0210 	add.w	r2, r0, #16
 8010174:	4618      	mov	r0, r3
 8010176:	4553      	cmp	r3, sl
 8010178:	db33      	blt.n	80101e2 <__lshift+0xb6>
 801017a:	6920      	ldr	r0, [r4, #16]
 801017c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010180:	f104 0314 	add.w	r3, r4, #20
 8010184:	f019 091f 	ands.w	r9, r9, #31
 8010188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801018c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010190:	d02b      	beq.n	80101ea <__lshift+0xbe>
 8010192:	f1c9 0e20 	rsb	lr, r9, #32
 8010196:	468a      	mov	sl, r1
 8010198:	2200      	movs	r2, #0
 801019a:	6818      	ldr	r0, [r3, #0]
 801019c:	fa00 f009 	lsl.w	r0, r0, r9
 80101a0:	4310      	orrs	r0, r2
 80101a2:	f84a 0b04 	str.w	r0, [sl], #4
 80101a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80101aa:	459c      	cmp	ip, r3
 80101ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80101b0:	d8f3      	bhi.n	801019a <__lshift+0x6e>
 80101b2:	ebac 0304 	sub.w	r3, ip, r4
 80101b6:	3b15      	subs	r3, #21
 80101b8:	f023 0303 	bic.w	r3, r3, #3
 80101bc:	3304      	adds	r3, #4
 80101be:	f104 0015 	add.w	r0, r4, #21
 80101c2:	4584      	cmp	ip, r0
 80101c4:	bf38      	it	cc
 80101c6:	2304      	movcc	r3, #4
 80101c8:	50ca      	str	r2, [r1, r3]
 80101ca:	b10a      	cbz	r2, 80101d0 <__lshift+0xa4>
 80101cc:	f108 0602 	add.w	r6, r8, #2
 80101d0:	3e01      	subs	r6, #1
 80101d2:	4638      	mov	r0, r7
 80101d4:	612e      	str	r6, [r5, #16]
 80101d6:	4621      	mov	r1, r4
 80101d8:	f7ff fdd8 	bl	800fd8c <_Bfree>
 80101dc:	4628      	mov	r0, r5
 80101de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80101e6:	3301      	adds	r3, #1
 80101e8:	e7c5      	b.n	8010176 <__lshift+0x4a>
 80101ea:	3904      	subs	r1, #4
 80101ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80101f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80101f4:	459c      	cmp	ip, r3
 80101f6:	d8f9      	bhi.n	80101ec <__lshift+0xc0>
 80101f8:	e7ea      	b.n	80101d0 <__lshift+0xa4>
 80101fa:	bf00      	nop
 80101fc:	08016488 	.word	0x08016488
 8010200:	08016499 	.word	0x08016499

08010204 <__mcmp>:
 8010204:	b530      	push	{r4, r5, lr}
 8010206:	6902      	ldr	r2, [r0, #16]
 8010208:	690c      	ldr	r4, [r1, #16]
 801020a:	1b12      	subs	r2, r2, r4
 801020c:	d10e      	bne.n	801022c <__mcmp+0x28>
 801020e:	f100 0314 	add.w	r3, r0, #20
 8010212:	3114      	adds	r1, #20
 8010214:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010218:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801021c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010220:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010224:	42a5      	cmp	r5, r4
 8010226:	d003      	beq.n	8010230 <__mcmp+0x2c>
 8010228:	d305      	bcc.n	8010236 <__mcmp+0x32>
 801022a:	2201      	movs	r2, #1
 801022c:	4610      	mov	r0, r2
 801022e:	bd30      	pop	{r4, r5, pc}
 8010230:	4283      	cmp	r3, r0
 8010232:	d3f3      	bcc.n	801021c <__mcmp+0x18>
 8010234:	e7fa      	b.n	801022c <__mcmp+0x28>
 8010236:	f04f 32ff 	mov.w	r2, #4294967295
 801023a:	e7f7      	b.n	801022c <__mcmp+0x28>

0801023c <__mdiff>:
 801023c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010240:	460c      	mov	r4, r1
 8010242:	4606      	mov	r6, r0
 8010244:	4611      	mov	r1, r2
 8010246:	4620      	mov	r0, r4
 8010248:	4690      	mov	r8, r2
 801024a:	f7ff ffdb 	bl	8010204 <__mcmp>
 801024e:	1e05      	subs	r5, r0, #0
 8010250:	d110      	bne.n	8010274 <__mdiff+0x38>
 8010252:	4629      	mov	r1, r5
 8010254:	4630      	mov	r0, r6
 8010256:	f7ff fd59 	bl	800fd0c <_Balloc>
 801025a:	b930      	cbnz	r0, 801026a <__mdiff+0x2e>
 801025c:	4b3a      	ldr	r3, [pc, #232]	; (8010348 <__mdiff+0x10c>)
 801025e:	4602      	mov	r2, r0
 8010260:	f240 2137 	movw	r1, #567	; 0x237
 8010264:	4839      	ldr	r0, [pc, #228]	; (801034c <__mdiff+0x110>)
 8010266:	f000 fcc7 	bl	8010bf8 <__assert_func>
 801026a:	2301      	movs	r3, #1
 801026c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010274:	bfa4      	itt	ge
 8010276:	4643      	movge	r3, r8
 8010278:	46a0      	movge	r8, r4
 801027a:	4630      	mov	r0, r6
 801027c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010280:	bfa6      	itte	ge
 8010282:	461c      	movge	r4, r3
 8010284:	2500      	movge	r5, #0
 8010286:	2501      	movlt	r5, #1
 8010288:	f7ff fd40 	bl	800fd0c <_Balloc>
 801028c:	b920      	cbnz	r0, 8010298 <__mdiff+0x5c>
 801028e:	4b2e      	ldr	r3, [pc, #184]	; (8010348 <__mdiff+0x10c>)
 8010290:	4602      	mov	r2, r0
 8010292:	f240 2145 	movw	r1, #581	; 0x245
 8010296:	e7e5      	b.n	8010264 <__mdiff+0x28>
 8010298:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801029c:	6926      	ldr	r6, [r4, #16]
 801029e:	60c5      	str	r5, [r0, #12]
 80102a0:	f104 0914 	add.w	r9, r4, #20
 80102a4:	f108 0514 	add.w	r5, r8, #20
 80102a8:	f100 0e14 	add.w	lr, r0, #20
 80102ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80102b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80102b4:	f108 0210 	add.w	r2, r8, #16
 80102b8:	46f2      	mov	sl, lr
 80102ba:	2100      	movs	r1, #0
 80102bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80102c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80102c4:	fa11 f88b 	uxtah	r8, r1, fp
 80102c8:	b299      	uxth	r1, r3
 80102ca:	0c1b      	lsrs	r3, r3, #16
 80102cc:	eba8 0801 	sub.w	r8, r8, r1
 80102d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80102d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80102d8:	fa1f f888 	uxth.w	r8, r8
 80102dc:	1419      	asrs	r1, r3, #16
 80102de:	454e      	cmp	r6, r9
 80102e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80102e4:	f84a 3b04 	str.w	r3, [sl], #4
 80102e8:	d8e8      	bhi.n	80102bc <__mdiff+0x80>
 80102ea:	1b33      	subs	r3, r6, r4
 80102ec:	3b15      	subs	r3, #21
 80102ee:	f023 0303 	bic.w	r3, r3, #3
 80102f2:	3304      	adds	r3, #4
 80102f4:	3415      	adds	r4, #21
 80102f6:	42a6      	cmp	r6, r4
 80102f8:	bf38      	it	cc
 80102fa:	2304      	movcc	r3, #4
 80102fc:	441d      	add	r5, r3
 80102fe:	4473      	add	r3, lr
 8010300:	469e      	mov	lr, r3
 8010302:	462e      	mov	r6, r5
 8010304:	4566      	cmp	r6, ip
 8010306:	d30e      	bcc.n	8010326 <__mdiff+0xea>
 8010308:	f10c 0203 	add.w	r2, ip, #3
 801030c:	1b52      	subs	r2, r2, r5
 801030e:	f022 0203 	bic.w	r2, r2, #3
 8010312:	3d03      	subs	r5, #3
 8010314:	45ac      	cmp	ip, r5
 8010316:	bf38      	it	cc
 8010318:	2200      	movcc	r2, #0
 801031a:	4413      	add	r3, r2
 801031c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010320:	b17a      	cbz	r2, 8010342 <__mdiff+0x106>
 8010322:	6107      	str	r7, [r0, #16]
 8010324:	e7a4      	b.n	8010270 <__mdiff+0x34>
 8010326:	f856 8b04 	ldr.w	r8, [r6], #4
 801032a:	fa11 f288 	uxtah	r2, r1, r8
 801032e:	1414      	asrs	r4, r2, #16
 8010330:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010334:	b292      	uxth	r2, r2
 8010336:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801033a:	f84e 2b04 	str.w	r2, [lr], #4
 801033e:	1421      	asrs	r1, r4, #16
 8010340:	e7e0      	b.n	8010304 <__mdiff+0xc8>
 8010342:	3f01      	subs	r7, #1
 8010344:	e7ea      	b.n	801031c <__mdiff+0xe0>
 8010346:	bf00      	nop
 8010348:	08016488 	.word	0x08016488
 801034c:	08016499 	.word	0x08016499

08010350 <__d2b>:
 8010350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010354:	460f      	mov	r7, r1
 8010356:	2101      	movs	r1, #1
 8010358:	ec59 8b10 	vmov	r8, r9, d0
 801035c:	4616      	mov	r6, r2
 801035e:	f7ff fcd5 	bl	800fd0c <_Balloc>
 8010362:	4604      	mov	r4, r0
 8010364:	b930      	cbnz	r0, 8010374 <__d2b+0x24>
 8010366:	4602      	mov	r2, r0
 8010368:	4b24      	ldr	r3, [pc, #144]	; (80103fc <__d2b+0xac>)
 801036a:	4825      	ldr	r0, [pc, #148]	; (8010400 <__d2b+0xb0>)
 801036c:	f240 310f 	movw	r1, #783	; 0x30f
 8010370:	f000 fc42 	bl	8010bf8 <__assert_func>
 8010374:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801037c:	bb2d      	cbnz	r5, 80103ca <__d2b+0x7a>
 801037e:	9301      	str	r3, [sp, #4]
 8010380:	f1b8 0300 	subs.w	r3, r8, #0
 8010384:	d026      	beq.n	80103d4 <__d2b+0x84>
 8010386:	4668      	mov	r0, sp
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	f7ff fd87 	bl	800fe9c <__lo0bits>
 801038e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010392:	b1e8      	cbz	r0, 80103d0 <__d2b+0x80>
 8010394:	f1c0 0320 	rsb	r3, r0, #32
 8010398:	fa02 f303 	lsl.w	r3, r2, r3
 801039c:	430b      	orrs	r3, r1
 801039e:	40c2      	lsrs	r2, r0
 80103a0:	6163      	str	r3, [r4, #20]
 80103a2:	9201      	str	r2, [sp, #4]
 80103a4:	9b01      	ldr	r3, [sp, #4]
 80103a6:	61a3      	str	r3, [r4, #24]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	bf14      	ite	ne
 80103ac:	2202      	movne	r2, #2
 80103ae:	2201      	moveq	r2, #1
 80103b0:	6122      	str	r2, [r4, #16]
 80103b2:	b1bd      	cbz	r5, 80103e4 <__d2b+0x94>
 80103b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80103b8:	4405      	add	r5, r0
 80103ba:	603d      	str	r5, [r7, #0]
 80103bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80103c0:	6030      	str	r0, [r6, #0]
 80103c2:	4620      	mov	r0, r4
 80103c4:	b003      	add	sp, #12
 80103c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103ce:	e7d6      	b.n	801037e <__d2b+0x2e>
 80103d0:	6161      	str	r1, [r4, #20]
 80103d2:	e7e7      	b.n	80103a4 <__d2b+0x54>
 80103d4:	a801      	add	r0, sp, #4
 80103d6:	f7ff fd61 	bl	800fe9c <__lo0bits>
 80103da:	9b01      	ldr	r3, [sp, #4]
 80103dc:	6163      	str	r3, [r4, #20]
 80103de:	3020      	adds	r0, #32
 80103e0:	2201      	movs	r2, #1
 80103e2:	e7e5      	b.n	80103b0 <__d2b+0x60>
 80103e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80103ec:	6038      	str	r0, [r7, #0]
 80103ee:	6918      	ldr	r0, [r3, #16]
 80103f0:	f7ff fd34 	bl	800fe5c <__hi0bits>
 80103f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103f8:	e7e2      	b.n	80103c0 <__d2b+0x70>
 80103fa:	bf00      	nop
 80103fc:	08016488 	.word	0x08016488
 8010400:	08016499 	.word	0x08016499

08010404 <__ssputs_r>:
 8010404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010408:	688e      	ldr	r6, [r1, #8]
 801040a:	461f      	mov	r7, r3
 801040c:	42be      	cmp	r6, r7
 801040e:	680b      	ldr	r3, [r1, #0]
 8010410:	4682      	mov	sl, r0
 8010412:	460c      	mov	r4, r1
 8010414:	4690      	mov	r8, r2
 8010416:	d82c      	bhi.n	8010472 <__ssputs_r+0x6e>
 8010418:	898a      	ldrh	r2, [r1, #12]
 801041a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801041e:	d026      	beq.n	801046e <__ssputs_r+0x6a>
 8010420:	6965      	ldr	r5, [r4, #20]
 8010422:	6909      	ldr	r1, [r1, #16]
 8010424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010428:	eba3 0901 	sub.w	r9, r3, r1
 801042c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010430:	1c7b      	adds	r3, r7, #1
 8010432:	444b      	add	r3, r9
 8010434:	106d      	asrs	r5, r5, #1
 8010436:	429d      	cmp	r5, r3
 8010438:	bf38      	it	cc
 801043a:	461d      	movcc	r5, r3
 801043c:	0553      	lsls	r3, r2, #21
 801043e:	d527      	bpl.n	8010490 <__ssputs_r+0x8c>
 8010440:	4629      	mov	r1, r5
 8010442:	f7fd fed1 	bl	800e1e8 <_malloc_r>
 8010446:	4606      	mov	r6, r0
 8010448:	b360      	cbz	r0, 80104a4 <__ssputs_r+0xa0>
 801044a:	6921      	ldr	r1, [r4, #16]
 801044c:	464a      	mov	r2, r9
 801044e:	f7fe fd86 	bl	800ef5e <memcpy>
 8010452:	89a3      	ldrh	r3, [r4, #12]
 8010454:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801045c:	81a3      	strh	r3, [r4, #12]
 801045e:	6126      	str	r6, [r4, #16]
 8010460:	6165      	str	r5, [r4, #20]
 8010462:	444e      	add	r6, r9
 8010464:	eba5 0509 	sub.w	r5, r5, r9
 8010468:	6026      	str	r6, [r4, #0]
 801046a:	60a5      	str	r5, [r4, #8]
 801046c:	463e      	mov	r6, r7
 801046e:	42be      	cmp	r6, r7
 8010470:	d900      	bls.n	8010474 <__ssputs_r+0x70>
 8010472:	463e      	mov	r6, r7
 8010474:	6820      	ldr	r0, [r4, #0]
 8010476:	4632      	mov	r2, r6
 8010478:	4641      	mov	r1, r8
 801047a:	f000 fba3 	bl	8010bc4 <memmove>
 801047e:	68a3      	ldr	r3, [r4, #8]
 8010480:	1b9b      	subs	r3, r3, r6
 8010482:	60a3      	str	r3, [r4, #8]
 8010484:	6823      	ldr	r3, [r4, #0]
 8010486:	4433      	add	r3, r6
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	2000      	movs	r0, #0
 801048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010490:	462a      	mov	r2, r5
 8010492:	f000 fbf7 	bl	8010c84 <_realloc_r>
 8010496:	4606      	mov	r6, r0
 8010498:	2800      	cmp	r0, #0
 801049a:	d1e0      	bne.n	801045e <__ssputs_r+0x5a>
 801049c:	6921      	ldr	r1, [r4, #16]
 801049e:	4650      	mov	r0, sl
 80104a0:	f7ff fbe8 	bl	800fc74 <_free_r>
 80104a4:	230c      	movs	r3, #12
 80104a6:	f8ca 3000 	str.w	r3, [sl]
 80104aa:	89a3      	ldrh	r3, [r4, #12]
 80104ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104b0:	81a3      	strh	r3, [r4, #12]
 80104b2:	f04f 30ff 	mov.w	r0, #4294967295
 80104b6:	e7e9      	b.n	801048c <__ssputs_r+0x88>

080104b8 <_svfiprintf_r>:
 80104b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	4698      	mov	r8, r3
 80104be:	898b      	ldrh	r3, [r1, #12]
 80104c0:	061b      	lsls	r3, r3, #24
 80104c2:	b09d      	sub	sp, #116	; 0x74
 80104c4:	4607      	mov	r7, r0
 80104c6:	460d      	mov	r5, r1
 80104c8:	4614      	mov	r4, r2
 80104ca:	d50e      	bpl.n	80104ea <_svfiprintf_r+0x32>
 80104cc:	690b      	ldr	r3, [r1, #16]
 80104ce:	b963      	cbnz	r3, 80104ea <_svfiprintf_r+0x32>
 80104d0:	2140      	movs	r1, #64	; 0x40
 80104d2:	f7fd fe89 	bl	800e1e8 <_malloc_r>
 80104d6:	6028      	str	r0, [r5, #0]
 80104d8:	6128      	str	r0, [r5, #16]
 80104da:	b920      	cbnz	r0, 80104e6 <_svfiprintf_r+0x2e>
 80104dc:	230c      	movs	r3, #12
 80104de:	603b      	str	r3, [r7, #0]
 80104e0:	f04f 30ff 	mov.w	r0, #4294967295
 80104e4:	e0d0      	b.n	8010688 <_svfiprintf_r+0x1d0>
 80104e6:	2340      	movs	r3, #64	; 0x40
 80104e8:	616b      	str	r3, [r5, #20]
 80104ea:	2300      	movs	r3, #0
 80104ec:	9309      	str	r3, [sp, #36]	; 0x24
 80104ee:	2320      	movs	r3, #32
 80104f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80104f8:	2330      	movs	r3, #48	; 0x30
 80104fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80106a0 <_svfiprintf_r+0x1e8>
 80104fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010502:	f04f 0901 	mov.w	r9, #1
 8010506:	4623      	mov	r3, r4
 8010508:	469a      	mov	sl, r3
 801050a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801050e:	b10a      	cbz	r2, 8010514 <_svfiprintf_r+0x5c>
 8010510:	2a25      	cmp	r2, #37	; 0x25
 8010512:	d1f9      	bne.n	8010508 <_svfiprintf_r+0x50>
 8010514:	ebba 0b04 	subs.w	fp, sl, r4
 8010518:	d00b      	beq.n	8010532 <_svfiprintf_r+0x7a>
 801051a:	465b      	mov	r3, fp
 801051c:	4622      	mov	r2, r4
 801051e:	4629      	mov	r1, r5
 8010520:	4638      	mov	r0, r7
 8010522:	f7ff ff6f 	bl	8010404 <__ssputs_r>
 8010526:	3001      	adds	r0, #1
 8010528:	f000 80a9 	beq.w	801067e <_svfiprintf_r+0x1c6>
 801052c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801052e:	445a      	add	r2, fp
 8010530:	9209      	str	r2, [sp, #36]	; 0x24
 8010532:	f89a 3000 	ldrb.w	r3, [sl]
 8010536:	2b00      	cmp	r3, #0
 8010538:	f000 80a1 	beq.w	801067e <_svfiprintf_r+0x1c6>
 801053c:	2300      	movs	r3, #0
 801053e:	f04f 32ff 	mov.w	r2, #4294967295
 8010542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010546:	f10a 0a01 	add.w	sl, sl, #1
 801054a:	9304      	str	r3, [sp, #16]
 801054c:	9307      	str	r3, [sp, #28]
 801054e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010552:	931a      	str	r3, [sp, #104]	; 0x68
 8010554:	4654      	mov	r4, sl
 8010556:	2205      	movs	r2, #5
 8010558:	f814 1b01 	ldrb.w	r1, [r4], #1
 801055c:	4850      	ldr	r0, [pc, #320]	; (80106a0 <_svfiprintf_r+0x1e8>)
 801055e:	f7ef fe4f 	bl	8000200 <memchr>
 8010562:	9a04      	ldr	r2, [sp, #16]
 8010564:	b9d8      	cbnz	r0, 801059e <_svfiprintf_r+0xe6>
 8010566:	06d0      	lsls	r0, r2, #27
 8010568:	bf44      	itt	mi
 801056a:	2320      	movmi	r3, #32
 801056c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010570:	0711      	lsls	r1, r2, #28
 8010572:	bf44      	itt	mi
 8010574:	232b      	movmi	r3, #43	; 0x2b
 8010576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801057a:	f89a 3000 	ldrb.w	r3, [sl]
 801057e:	2b2a      	cmp	r3, #42	; 0x2a
 8010580:	d015      	beq.n	80105ae <_svfiprintf_r+0xf6>
 8010582:	9a07      	ldr	r2, [sp, #28]
 8010584:	4654      	mov	r4, sl
 8010586:	2000      	movs	r0, #0
 8010588:	f04f 0c0a 	mov.w	ip, #10
 801058c:	4621      	mov	r1, r4
 801058e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010592:	3b30      	subs	r3, #48	; 0x30
 8010594:	2b09      	cmp	r3, #9
 8010596:	d94d      	bls.n	8010634 <_svfiprintf_r+0x17c>
 8010598:	b1b0      	cbz	r0, 80105c8 <_svfiprintf_r+0x110>
 801059a:	9207      	str	r2, [sp, #28]
 801059c:	e014      	b.n	80105c8 <_svfiprintf_r+0x110>
 801059e:	eba0 0308 	sub.w	r3, r0, r8
 80105a2:	fa09 f303 	lsl.w	r3, r9, r3
 80105a6:	4313      	orrs	r3, r2
 80105a8:	9304      	str	r3, [sp, #16]
 80105aa:	46a2      	mov	sl, r4
 80105ac:	e7d2      	b.n	8010554 <_svfiprintf_r+0x9c>
 80105ae:	9b03      	ldr	r3, [sp, #12]
 80105b0:	1d19      	adds	r1, r3, #4
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	9103      	str	r1, [sp, #12]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	bfbb      	ittet	lt
 80105ba:	425b      	neglt	r3, r3
 80105bc:	f042 0202 	orrlt.w	r2, r2, #2
 80105c0:	9307      	strge	r3, [sp, #28]
 80105c2:	9307      	strlt	r3, [sp, #28]
 80105c4:	bfb8      	it	lt
 80105c6:	9204      	strlt	r2, [sp, #16]
 80105c8:	7823      	ldrb	r3, [r4, #0]
 80105ca:	2b2e      	cmp	r3, #46	; 0x2e
 80105cc:	d10c      	bne.n	80105e8 <_svfiprintf_r+0x130>
 80105ce:	7863      	ldrb	r3, [r4, #1]
 80105d0:	2b2a      	cmp	r3, #42	; 0x2a
 80105d2:	d134      	bne.n	801063e <_svfiprintf_r+0x186>
 80105d4:	9b03      	ldr	r3, [sp, #12]
 80105d6:	1d1a      	adds	r2, r3, #4
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	9203      	str	r2, [sp, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	bfb8      	it	lt
 80105e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80105e4:	3402      	adds	r4, #2
 80105e6:	9305      	str	r3, [sp, #20]
 80105e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80106b0 <_svfiprintf_r+0x1f8>
 80105ec:	7821      	ldrb	r1, [r4, #0]
 80105ee:	2203      	movs	r2, #3
 80105f0:	4650      	mov	r0, sl
 80105f2:	f7ef fe05 	bl	8000200 <memchr>
 80105f6:	b138      	cbz	r0, 8010608 <_svfiprintf_r+0x150>
 80105f8:	9b04      	ldr	r3, [sp, #16]
 80105fa:	eba0 000a 	sub.w	r0, r0, sl
 80105fe:	2240      	movs	r2, #64	; 0x40
 8010600:	4082      	lsls	r2, r0
 8010602:	4313      	orrs	r3, r2
 8010604:	3401      	adds	r4, #1
 8010606:	9304      	str	r3, [sp, #16]
 8010608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060c:	4825      	ldr	r0, [pc, #148]	; (80106a4 <_svfiprintf_r+0x1ec>)
 801060e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010612:	2206      	movs	r2, #6
 8010614:	f7ef fdf4 	bl	8000200 <memchr>
 8010618:	2800      	cmp	r0, #0
 801061a:	d038      	beq.n	801068e <_svfiprintf_r+0x1d6>
 801061c:	4b22      	ldr	r3, [pc, #136]	; (80106a8 <_svfiprintf_r+0x1f0>)
 801061e:	bb1b      	cbnz	r3, 8010668 <_svfiprintf_r+0x1b0>
 8010620:	9b03      	ldr	r3, [sp, #12]
 8010622:	3307      	adds	r3, #7
 8010624:	f023 0307 	bic.w	r3, r3, #7
 8010628:	3308      	adds	r3, #8
 801062a:	9303      	str	r3, [sp, #12]
 801062c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801062e:	4433      	add	r3, r6
 8010630:	9309      	str	r3, [sp, #36]	; 0x24
 8010632:	e768      	b.n	8010506 <_svfiprintf_r+0x4e>
 8010634:	fb0c 3202 	mla	r2, ip, r2, r3
 8010638:	460c      	mov	r4, r1
 801063a:	2001      	movs	r0, #1
 801063c:	e7a6      	b.n	801058c <_svfiprintf_r+0xd4>
 801063e:	2300      	movs	r3, #0
 8010640:	3401      	adds	r4, #1
 8010642:	9305      	str	r3, [sp, #20]
 8010644:	4619      	mov	r1, r3
 8010646:	f04f 0c0a 	mov.w	ip, #10
 801064a:	4620      	mov	r0, r4
 801064c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010650:	3a30      	subs	r2, #48	; 0x30
 8010652:	2a09      	cmp	r2, #9
 8010654:	d903      	bls.n	801065e <_svfiprintf_r+0x1a6>
 8010656:	2b00      	cmp	r3, #0
 8010658:	d0c6      	beq.n	80105e8 <_svfiprintf_r+0x130>
 801065a:	9105      	str	r1, [sp, #20]
 801065c:	e7c4      	b.n	80105e8 <_svfiprintf_r+0x130>
 801065e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010662:	4604      	mov	r4, r0
 8010664:	2301      	movs	r3, #1
 8010666:	e7f0      	b.n	801064a <_svfiprintf_r+0x192>
 8010668:	ab03      	add	r3, sp, #12
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	462a      	mov	r2, r5
 801066e:	4b0f      	ldr	r3, [pc, #60]	; (80106ac <_svfiprintf_r+0x1f4>)
 8010670:	a904      	add	r1, sp, #16
 8010672:	4638      	mov	r0, r7
 8010674:	f7fd fee4 	bl	800e440 <_printf_float>
 8010678:	1c42      	adds	r2, r0, #1
 801067a:	4606      	mov	r6, r0
 801067c:	d1d6      	bne.n	801062c <_svfiprintf_r+0x174>
 801067e:	89ab      	ldrh	r3, [r5, #12]
 8010680:	065b      	lsls	r3, r3, #25
 8010682:	f53f af2d 	bmi.w	80104e0 <_svfiprintf_r+0x28>
 8010686:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010688:	b01d      	add	sp, #116	; 0x74
 801068a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068e:	ab03      	add	r3, sp, #12
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	462a      	mov	r2, r5
 8010694:	4b05      	ldr	r3, [pc, #20]	; (80106ac <_svfiprintf_r+0x1f4>)
 8010696:	a904      	add	r1, sp, #16
 8010698:	4638      	mov	r0, r7
 801069a:	f7fe f975 	bl	800e988 <_printf_i>
 801069e:	e7eb      	b.n	8010678 <_svfiprintf_r+0x1c0>
 80106a0:	080165f4 	.word	0x080165f4
 80106a4:	080165fe 	.word	0x080165fe
 80106a8:	0800e441 	.word	0x0800e441
 80106ac:	08010405 	.word	0x08010405
 80106b0:	080165fa 	.word	0x080165fa

080106b4 <__sfputc_r>:
 80106b4:	6893      	ldr	r3, [r2, #8]
 80106b6:	3b01      	subs	r3, #1
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	b410      	push	{r4}
 80106bc:	6093      	str	r3, [r2, #8]
 80106be:	da08      	bge.n	80106d2 <__sfputc_r+0x1e>
 80106c0:	6994      	ldr	r4, [r2, #24]
 80106c2:	42a3      	cmp	r3, r4
 80106c4:	db01      	blt.n	80106ca <__sfputc_r+0x16>
 80106c6:	290a      	cmp	r1, #10
 80106c8:	d103      	bne.n	80106d2 <__sfputc_r+0x1e>
 80106ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106ce:	f000 b9e3 	b.w	8010a98 <__swbuf_r>
 80106d2:	6813      	ldr	r3, [r2, #0]
 80106d4:	1c58      	adds	r0, r3, #1
 80106d6:	6010      	str	r0, [r2, #0]
 80106d8:	7019      	strb	r1, [r3, #0]
 80106da:	4608      	mov	r0, r1
 80106dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <__sfputs_r>:
 80106e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e4:	4606      	mov	r6, r0
 80106e6:	460f      	mov	r7, r1
 80106e8:	4614      	mov	r4, r2
 80106ea:	18d5      	adds	r5, r2, r3
 80106ec:	42ac      	cmp	r4, r5
 80106ee:	d101      	bne.n	80106f4 <__sfputs_r+0x12>
 80106f0:	2000      	movs	r0, #0
 80106f2:	e007      	b.n	8010704 <__sfputs_r+0x22>
 80106f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106f8:	463a      	mov	r2, r7
 80106fa:	4630      	mov	r0, r6
 80106fc:	f7ff ffda 	bl	80106b4 <__sfputc_r>
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	d1f3      	bne.n	80106ec <__sfputs_r+0xa>
 8010704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010708 <_vfiprintf_r>:
 8010708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070c:	460d      	mov	r5, r1
 801070e:	b09d      	sub	sp, #116	; 0x74
 8010710:	4614      	mov	r4, r2
 8010712:	4698      	mov	r8, r3
 8010714:	4606      	mov	r6, r0
 8010716:	b118      	cbz	r0, 8010720 <_vfiprintf_r+0x18>
 8010718:	6a03      	ldr	r3, [r0, #32]
 801071a:	b90b      	cbnz	r3, 8010720 <_vfiprintf_r+0x18>
 801071c:	f7fe fae2 	bl	800ece4 <__sinit>
 8010720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010722:	07d9      	lsls	r1, r3, #31
 8010724:	d405      	bmi.n	8010732 <_vfiprintf_r+0x2a>
 8010726:	89ab      	ldrh	r3, [r5, #12]
 8010728:	059a      	lsls	r2, r3, #22
 801072a:	d402      	bmi.n	8010732 <_vfiprintf_r+0x2a>
 801072c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801072e:	f7fe fc14 	bl	800ef5a <__retarget_lock_acquire_recursive>
 8010732:	89ab      	ldrh	r3, [r5, #12]
 8010734:	071b      	lsls	r3, r3, #28
 8010736:	d501      	bpl.n	801073c <_vfiprintf_r+0x34>
 8010738:	692b      	ldr	r3, [r5, #16]
 801073a:	b99b      	cbnz	r3, 8010764 <_vfiprintf_r+0x5c>
 801073c:	4629      	mov	r1, r5
 801073e:	4630      	mov	r0, r6
 8010740:	f000 f9e8 	bl	8010b14 <__swsetup_r>
 8010744:	b170      	cbz	r0, 8010764 <_vfiprintf_r+0x5c>
 8010746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010748:	07dc      	lsls	r4, r3, #31
 801074a:	d504      	bpl.n	8010756 <_vfiprintf_r+0x4e>
 801074c:	f04f 30ff 	mov.w	r0, #4294967295
 8010750:	b01d      	add	sp, #116	; 0x74
 8010752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010756:	89ab      	ldrh	r3, [r5, #12]
 8010758:	0598      	lsls	r0, r3, #22
 801075a:	d4f7      	bmi.n	801074c <_vfiprintf_r+0x44>
 801075c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801075e:	f7fe fbfd 	bl	800ef5c <__retarget_lock_release_recursive>
 8010762:	e7f3      	b.n	801074c <_vfiprintf_r+0x44>
 8010764:	2300      	movs	r3, #0
 8010766:	9309      	str	r3, [sp, #36]	; 0x24
 8010768:	2320      	movs	r3, #32
 801076a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801076e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010772:	2330      	movs	r3, #48	; 0x30
 8010774:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010928 <_vfiprintf_r+0x220>
 8010778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801077c:	f04f 0901 	mov.w	r9, #1
 8010780:	4623      	mov	r3, r4
 8010782:	469a      	mov	sl, r3
 8010784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010788:	b10a      	cbz	r2, 801078e <_vfiprintf_r+0x86>
 801078a:	2a25      	cmp	r2, #37	; 0x25
 801078c:	d1f9      	bne.n	8010782 <_vfiprintf_r+0x7a>
 801078e:	ebba 0b04 	subs.w	fp, sl, r4
 8010792:	d00b      	beq.n	80107ac <_vfiprintf_r+0xa4>
 8010794:	465b      	mov	r3, fp
 8010796:	4622      	mov	r2, r4
 8010798:	4629      	mov	r1, r5
 801079a:	4630      	mov	r0, r6
 801079c:	f7ff ffa1 	bl	80106e2 <__sfputs_r>
 80107a0:	3001      	adds	r0, #1
 80107a2:	f000 80a9 	beq.w	80108f8 <_vfiprintf_r+0x1f0>
 80107a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107a8:	445a      	add	r2, fp
 80107aa:	9209      	str	r2, [sp, #36]	; 0x24
 80107ac:	f89a 3000 	ldrb.w	r3, [sl]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f000 80a1 	beq.w	80108f8 <_vfiprintf_r+0x1f0>
 80107b6:	2300      	movs	r3, #0
 80107b8:	f04f 32ff 	mov.w	r2, #4294967295
 80107bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107c0:	f10a 0a01 	add.w	sl, sl, #1
 80107c4:	9304      	str	r3, [sp, #16]
 80107c6:	9307      	str	r3, [sp, #28]
 80107c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107cc:	931a      	str	r3, [sp, #104]	; 0x68
 80107ce:	4654      	mov	r4, sl
 80107d0:	2205      	movs	r2, #5
 80107d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107d6:	4854      	ldr	r0, [pc, #336]	; (8010928 <_vfiprintf_r+0x220>)
 80107d8:	f7ef fd12 	bl	8000200 <memchr>
 80107dc:	9a04      	ldr	r2, [sp, #16]
 80107de:	b9d8      	cbnz	r0, 8010818 <_vfiprintf_r+0x110>
 80107e0:	06d1      	lsls	r1, r2, #27
 80107e2:	bf44      	itt	mi
 80107e4:	2320      	movmi	r3, #32
 80107e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107ea:	0713      	lsls	r3, r2, #28
 80107ec:	bf44      	itt	mi
 80107ee:	232b      	movmi	r3, #43	; 0x2b
 80107f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107f4:	f89a 3000 	ldrb.w	r3, [sl]
 80107f8:	2b2a      	cmp	r3, #42	; 0x2a
 80107fa:	d015      	beq.n	8010828 <_vfiprintf_r+0x120>
 80107fc:	9a07      	ldr	r2, [sp, #28]
 80107fe:	4654      	mov	r4, sl
 8010800:	2000      	movs	r0, #0
 8010802:	f04f 0c0a 	mov.w	ip, #10
 8010806:	4621      	mov	r1, r4
 8010808:	f811 3b01 	ldrb.w	r3, [r1], #1
 801080c:	3b30      	subs	r3, #48	; 0x30
 801080e:	2b09      	cmp	r3, #9
 8010810:	d94d      	bls.n	80108ae <_vfiprintf_r+0x1a6>
 8010812:	b1b0      	cbz	r0, 8010842 <_vfiprintf_r+0x13a>
 8010814:	9207      	str	r2, [sp, #28]
 8010816:	e014      	b.n	8010842 <_vfiprintf_r+0x13a>
 8010818:	eba0 0308 	sub.w	r3, r0, r8
 801081c:	fa09 f303 	lsl.w	r3, r9, r3
 8010820:	4313      	orrs	r3, r2
 8010822:	9304      	str	r3, [sp, #16]
 8010824:	46a2      	mov	sl, r4
 8010826:	e7d2      	b.n	80107ce <_vfiprintf_r+0xc6>
 8010828:	9b03      	ldr	r3, [sp, #12]
 801082a:	1d19      	adds	r1, r3, #4
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	9103      	str	r1, [sp, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	bfbb      	ittet	lt
 8010834:	425b      	neglt	r3, r3
 8010836:	f042 0202 	orrlt.w	r2, r2, #2
 801083a:	9307      	strge	r3, [sp, #28]
 801083c:	9307      	strlt	r3, [sp, #28]
 801083e:	bfb8      	it	lt
 8010840:	9204      	strlt	r2, [sp, #16]
 8010842:	7823      	ldrb	r3, [r4, #0]
 8010844:	2b2e      	cmp	r3, #46	; 0x2e
 8010846:	d10c      	bne.n	8010862 <_vfiprintf_r+0x15a>
 8010848:	7863      	ldrb	r3, [r4, #1]
 801084a:	2b2a      	cmp	r3, #42	; 0x2a
 801084c:	d134      	bne.n	80108b8 <_vfiprintf_r+0x1b0>
 801084e:	9b03      	ldr	r3, [sp, #12]
 8010850:	1d1a      	adds	r2, r3, #4
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	9203      	str	r2, [sp, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	bfb8      	it	lt
 801085a:	f04f 33ff 	movlt.w	r3, #4294967295
 801085e:	3402      	adds	r4, #2
 8010860:	9305      	str	r3, [sp, #20]
 8010862:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010938 <_vfiprintf_r+0x230>
 8010866:	7821      	ldrb	r1, [r4, #0]
 8010868:	2203      	movs	r2, #3
 801086a:	4650      	mov	r0, sl
 801086c:	f7ef fcc8 	bl	8000200 <memchr>
 8010870:	b138      	cbz	r0, 8010882 <_vfiprintf_r+0x17a>
 8010872:	9b04      	ldr	r3, [sp, #16]
 8010874:	eba0 000a 	sub.w	r0, r0, sl
 8010878:	2240      	movs	r2, #64	; 0x40
 801087a:	4082      	lsls	r2, r0
 801087c:	4313      	orrs	r3, r2
 801087e:	3401      	adds	r4, #1
 8010880:	9304      	str	r3, [sp, #16]
 8010882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010886:	4829      	ldr	r0, [pc, #164]	; (801092c <_vfiprintf_r+0x224>)
 8010888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801088c:	2206      	movs	r2, #6
 801088e:	f7ef fcb7 	bl	8000200 <memchr>
 8010892:	2800      	cmp	r0, #0
 8010894:	d03f      	beq.n	8010916 <_vfiprintf_r+0x20e>
 8010896:	4b26      	ldr	r3, [pc, #152]	; (8010930 <_vfiprintf_r+0x228>)
 8010898:	bb1b      	cbnz	r3, 80108e2 <_vfiprintf_r+0x1da>
 801089a:	9b03      	ldr	r3, [sp, #12]
 801089c:	3307      	adds	r3, #7
 801089e:	f023 0307 	bic.w	r3, r3, #7
 80108a2:	3308      	adds	r3, #8
 80108a4:	9303      	str	r3, [sp, #12]
 80108a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108a8:	443b      	add	r3, r7
 80108aa:	9309      	str	r3, [sp, #36]	; 0x24
 80108ac:	e768      	b.n	8010780 <_vfiprintf_r+0x78>
 80108ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80108b2:	460c      	mov	r4, r1
 80108b4:	2001      	movs	r0, #1
 80108b6:	e7a6      	b.n	8010806 <_vfiprintf_r+0xfe>
 80108b8:	2300      	movs	r3, #0
 80108ba:	3401      	adds	r4, #1
 80108bc:	9305      	str	r3, [sp, #20]
 80108be:	4619      	mov	r1, r3
 80108c0:	f04f 0c0a 	mov.w	ip, #10
 80108c4:	4620      	mov	r0, r4
 80108c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108ca:	3a30      	subs	r2, #48	; 0x30
 80108cc:	2a09      	cmp	r2, #9
 80108ce:	d903      	bls.n	80108d8 <_vfiprintf_r+0x1d0>
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d0c6      	beq.n	8010862 <_vfiprintf_r+0x15a>
 80108d4:	9105      	str	r1, [sp, #20]
 80108d6:	e7c4      	b.n	8010862 <_vfiprintf_r+0x15a>
 80108d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80108dc:	4604      	mov	r4, r0
 80108de:	2301      	movs	r3, #1
 80108e0:	e7f0      	b.n	80108c4 <_vfiprintf_r+0x1bc>
 80108e2:	ab03      	add	r3, sp, #12
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	462a      	mov	r2, r5
 80108e8:	4b12      	ldr	r3, [pc, #72]	; (8010934 <_vfiprintf_r+0x22c>)
 80108ea:	a904      	add	r1, sp, #16
 80108ec:	4630      	mov	r0, r6
 80108ee:	f7fd fda7 	bl	800e440 <_printf_float>
 80108f2:	4607      	mov	r7, r0
 80108f4:	1c78      	adds	r0, r7, #1
 80108f6:	d1d6      	bne.n	80108a6 <_vfiprintf_r+0x19e>
 80108f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108fa:	07d9      	lsls	r1, r3, #31
 80108fc:	d405      	bmi.n	801090a <_vfiprintf_r+0x202>
 80108fe:	89ab      	ldrh	r3, [r5, #12]
 8010900:	059a      	lsls	r2, r3, #22
 8010902:	d402      	bmi.n	801090a <_vfiprintf_r+0x202>
 8010904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010906:	f7fe fb29 	bl	800ef5c <__retarget_lock_release_recursive>
 801090a:	89ab      	ldrh	r3, [r5, #12]
 801090c:	065b      	lsls	r3, r3, #25
 801090e:	f53f af1d 	bmi.w	801074c <_vfiprintf_r+0x44>
 8010912:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010914:	e71c      	b.n	8010750 <_vfiprintf_r+0x48>
 8010916:	ab03      	add	r3, sp, #12
 8010918:	9300      	str	r3, [sp, #0]
 801091a:	462a      	mov	r2, r5
 801091c:	4b05      	ldr	r3, [pc, #20]	; (8010934 <_vfiprintf_r+0x22c>)
 801091e:	a904      	add	r1, sp, #16
 8010920:	4630      	mov	r0, r6
 8010922:	f7fe f831 	bl	800e988 <_printf_i>
 8010926:	e7e4      	b.n	80108f2 <_vfiprintf_r+0x1ea>
 8010928:	080165f4 	.word	0x080165f4
 801092c:	080165fe 	.word	0x080165fe
 8010930:	0800e441 	.word	0x0800e441
 8010934:	080106e3 	.word	0x080106e3
 8010938:	080165fa 	.word	0x080165fa

0801093c <__sflush_r>:
 801093c:	898a      	ldrh	r2, [r1, #12]
 801093e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010942:	4605      	mov	r5, r0
 8010944:	0710      	lsls	r0, r2, #28
 8010946:	460c      	mov	r4, r1
 8010948:	d458      	bmi.n	80109fc <__sflush_r+0xc0>
 801094a:	684b      	ldr	r3, [r1, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	dc05      	bgt.n	801095c <__sflush_r+0x20>
 8010950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010952:	2b00      	cmp	r3, #0
 8010954:	dc02      	bgt.n	801095c <__sflush_r+0x20>
 8010956:	2000      	movs	r0, #0
 8010958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801095c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801095e:	2e00      	cmp	r6, #0
 8010960:	d0f9      	beq.n	8010956 <__sflush_r+0x1a>
 8010962:	2300      	movs	r3, #0
 8010964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010968:	682f      	ldr	r7, [r5, #0]
 801096a:	6a21      	ldr	r1, [r4, #32]
 801096c:	602b      	str	r3, [r5, #0]
 801096e:	d032      	beq.n	80109d6 <__sflush_r+0x9a>
 8010970:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010972:	89a3      	ldrh	r3, [r4, #12]
 8010974:	075a      	lsls	r2, r3, #29
 8010976:	d505      	bpl.n	8010984 <__sflush_r+0x48>
 8010978:	6863      	ldr	r3, [r4, #4]
 801097a:	1ac0      	subs	r0, r0, r3
 801097c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801097e:	b10b      	cbz	r3, 8010984 <__sflush_r+0x48>
 8010980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010982:	1ac0      	subs	r0, r0, r3
 8010984:	2300      	movs	r3, #0
 8010986:	4602      	mov	r2, r0
 8010988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801098a:	6a21      	ldr	r1, [r4, #32]
 801098c:	4628      	mov	r0, r5
 801098e:	47b0      	blx	r6
 8010990:	1c43      	adds	r3, r0, #1
 8010992:	89a3      	ldrh	r3, [r4, #12]
 8010994:	d106      	bne.n	80109a4 <__sflush_r+0x68>
 8010996:	6829      	ldr	r1, [r5, #0]
 8010998:	291d      	cmp	r1, #29
 801099a:	d82b      	bhi.n	80109f4 <__sflush_r+0xb8>
 801099c:	4a29      	ldr	r2, [pc, #164]	; (8010a44 <__sflush_r+0x108>)
 801099e:	410a      	asrs	r2, r1
 80109a0:	07d6      	lsls	r6, r2, #31
 80109a2:	d427      	bmi.n	80109f4 <__sflush_r+0xb8>
 80109a4:	2200      	movs	r2, #0
 80109a6:	6062      	str	r2, [r4, #4]
 80109a8:	04d9      	lsls	r1, r3, #19
 80109aa:	6922      	ldr	r2, [r4, #16]
 80109ac:	6022      	str	r2, [r4, #0]
 80109ae:	d504      	bpl.n	80109ba <__sflush_r+0x7e>
 80109b0:	1c42      	adds	r2, r0, #1
 80109b2:	d101      	bne.n	80109b8 <__sflush_r+0x7c>
 80109b4:	682b      	ldr	r3, [r5, #0]
 80109b6:	b903      	cbnz	r3, 80109ba <__sflush_r+0x7e>
 80109b8:	6560      	str	r0, [r4, #84]	; 0x54
 80109ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109bc:	602f      	str	r7, [r5, #0]
 80109be:	2900      	cmp	r1, #0
 80109c0:	d0c9      	beq.n	8010956 <__sflush_r+0x1a>
 80109c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109c6:	4299      	cmp	r1, r3
 80109c8:	d002      	beq.n	80109d0 <__sflush_r+0x94>
 80109ca:	4628      	mov	r0, r5
 80109cc:	f7ff f952 	bl	800fc74 <_free_r>
 80109d0:	2000      	movs	r0, #0
 80109d2:	6360      	str	r0, [r4, #52]	; 0x34
 80109d4:	e7c0      	b.n	8010958 <__sflush_r+0x1c>
 80109d6:	2301      	movs	r3, #1
 80109d8:	4628      	mov	r0, r5
 80109da:	47b0      	blx	r6
 80109dc:	1c41      	adds	r1, r0, #1
 80109de:	d1c8      	bne.n	8010972 <__sflush_r+0x36>
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d0c5      	beq.n	8010972 <__sflush_r+0x36>
 80109e6:	2b1d      	cmp	r3, #29
 80109e8:	d001      	beq.n	80109ee <__sflush_r+0xb2>
 80109ea:	2b16      	cmp	r3, #22
 80109ec:	d101      	bne.n	80109f2 <__sflush_r+0xb6>
 80109ee:	602f      	str	r7, [r5, #0]
 80109f0:	e7b1      	b.n	8010956 <__sflush_r+0x1a>
 80109f2:	89a3      	ldrh	r3, [r4, #12]
 80109f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109f8:	81a3      	strh	r3, [r4, #12]
 80109fa:	e7ad      	b.n	8010958 <__sflush_r+0x1c>
 80109fc:	690f      	ldr	r7, [r1, #16]
 80109fe:	2f00      	cmp	r7, #0
 8010a00:	d0a9      	beq.n	8010956 <__sflush_r+0x1a>
 8010a02:	0793      	lsls	r3, r2, #30
 8010a04:	680e      	ldr	r6, [r1, #0]
 8010a06:	bf08      	it	eq
 8010a08:	694b      	ldreq	r3, [r1, #20]
 8010a0a:	600f      	str	r7, [r1, #0]
 8010a0c:	bf18      	it	ne
 8010a0e:	2300      	movne	r3, #0
 8010a10:	eba6 0807 	sub.w	r8, r6, r7
 8010a14:	608b      	str	r3, [r1, #8]
 8010a16:	f1b8 0f00 	cmp.w	r8, #0
 8010a1a:	dd9c      	ble.n	8010956 <__sflush_r+0x1a>
 8010a1c:	6a21      	ldr	r1, [r4, #32]
 8010a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a20:	4643      	mov	r3, r8
 8010a22:	463a      	mov	r2, r7
 8010a24:	4628      	mov	r0, r5
 8010a26:	47b0      	blx	r6
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	dc06      	bgt.n	8010a3a <__sflush_r+0xfe>
 8010a2c:	89a3      	ldrh	r3, [r4, #12]
 8010a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a32:	81a3      	strh	r3, [r4, #12]
 8010a34:	f04f 30ff 	mov.w	r0, #4294967295
 8010a38:	e78e      	b.n	8010958 <__sflush_r+0x1c>
 8010a3a:	4407      	add	r7, r0
 8010a3c:	eba8 0800 	sub.w	r8, r8, r0
 8010a40:	e7e9      	b.n	8010a16 <__sflush_r+0xda>
 8010a42:	bf00      	nop
 8010a44:	dfbffffe 	.word	0xdfbffffe

08010a48 <_fflush_r>:
 8010a48:	b538      	push	{r3, r4, r5, lr}
 8010a4a:	690b      	ldr	r3, [r1, #16]
 8010a4c:	4605      	mov	r5, r0
 8010a4e:	460c      	mov	r4, r1
 8010a50:	b913      	cbnz	r3, 8010a58 <_fflush_r+0x10>
 8010a52:	2500      	movs	r5, #0
 8010a54:	4628      	mov	r0, r5
 8010a56:	bd38      	pop	{r3, r4, r5, pc}
 8010a58:	b118      	cbz	r0, 8010a62 <_fflush_r+0x1a>
 8010a5a:	6a03      	ldr	r3, [r0, #32]
 8010a5c:	b90b      	cbnz	r3, 8010a62 <_fflush_r+0x1a>
 8010a5e:	f7fe f941 	bl	800ece4 <__sinit>
 8010a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d0f3      	beq.n	8010a52 <_fflush_r+0xa>
 8010a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a6c:	07d0      	lsls	r0, r2, #31
 8010a6e:	d404      	bmi.n	8010a7a <_fflush_r+0x32>
 8010a70:	0599      	lsls	r1, r3, #22
 8010a72:	d402      	bmi.n	8010a7a <_fflush_r+0x32>
 8010a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a76:	f7fe fa70 	bl	800ef5a <__retarget_lock_acquire_recursive>
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	4621      	mov	r1, r4
 8010a7e:	f7ff ff5d 	bl	801093c <__sflush_r>
 8010a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a84:	07da      	lsls	r2, r3, #31
 8010a86:	4605      	mov	r5, r0
 8010a88:	d4e4      	bmi.n	8010a54 <_fflush_r+0xc>
 8010a8a:	89a3      	ldrh	r3, [r4, #12]
 8010a8c:	059b      	lsls	r3, r3, #22
 8010a8e:	d4e1      	bmi.n	8010a54 <_fflush_r+0xc>
 8010a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a92:	f7fe fa63 	bl	800ef5c <__retarget_lock_release_recursive>
 8010a96:	e7dd      	b.n	8010a54 <_fflush_r+0xc>

08010a98 <__swbuf_r>:
 8010a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a9a:	460e      	mov	r6, r1
 8010a9c:	4614      	mov	r4, r2
 8010a9e:	4605      	mov	r5, r0
 8010aa0:	b118      	cbz	r0, 8010aaa <__swbuf_r+0x12>
 8010aa2:	6a03      	ldr	r3, [r0, #32]
 8010aa4:	b90b      	cbnz	r3, 8010aaa <__swbuf_r+0x12>
 8010aa6:	f7fe f91d 	bl	800ece4 <__sinit>
 8010aaa:	69a3      	ldr	r3, [r4, #24]
 8010aac:	60a3      	str	r3, [r4, #8]
 8010aae:	89a3      	ldrh	r3, [r4, #12]
 8010ab0:	071a      	lsls	r2, r3, #28
 8010ab2:	d525      	bpl.n	8010b00 <__swbuf_r+0x68>
 8010ab4:	6923      	ldr	r3, [r4, #16]
 8010ab6:	b31b      	cbz	r3, 8010b00 <__swbuf_r+0x68>
 8010ab8:	6823      	ldr	r3, [r4, #0]
 8010aba:	6922      	ldr	r2, [r4, #16]
 8010abc:	1a98      	subs	r0, r3, r2
 8010abe:	6963      	ldr	r3, [r4, #20]
 8010ac0:	b2f6      	uxtb	r6, r6
 8010ac2:	4283      	cmp	r3, r0
 8010ac4:	4637      	mov	r7, r6
 8010ac6:	dc04      	bgt.n	8010ad2 <__swbuf_r+0x3a>
 8010ac8:	4621      	mov	r1, r4
 8010aca:	4628      	mov	r0, r5
 8010acc:	f7ff ffbc 	bl	8010a48 <_fflush_r>
 8010ad0:	b9e0      	cbnz	r0, 8010b0c <__swbuf_r+0x74>
 8010ad2:	68a3      	ldr	r3, [r4, #8]
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	60a3      	str	r3, [r4, #8]
 8010ad8:	6823      	ldr	r3, [r4, #0]
 8010ada:	1c5a      	adds	r2, r3, #1
 8010adc:	6022      	str	r2, [r4, #0]
 8010ade:	701e      	strb	r6, [r3, #0]
 8010ae0:	6962      	ldr	r2, [r4, #20]
 8010ae2:	1c43      	adds	r3, r0, #1
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d004      	beq.n	8010af2 <__swbuf_r+0x5a>
 8010ae8:	89a3      	ldrh	r3, [r4, #12]
 8010aea:	07db      	lsls	r3, r3, #31
 8010aec:	d506      	bpl.n	8010afc <__swbuf_r+0x64>
 8010aee:	2e0a      	cmp	r6, #10
 8010af0:	d104      	bne.n	8010afc <__swbuf_r+0x64>
 8010af2:	4621      	mov	r1, r4
 8010af4:	4628      	mov	r0, r5
 8010af6:	f7ff ffa7 	bl	8010a48 <_fflush_r>
 8010afa:	b938      	cbnz	r0, 8010b0c <__swbuf_r+0x74>
 8010afc:	4638      	mov	r0, r7
 8010afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b00:	4621      	mov	r1, r4
 8010b02:	4628      	mov	r0, r5
 8010b04:	f000 f806 	bl	8010b14 <__swsetup_r>
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	d0d5      	beq.n	8010ab8 <__swbuf_r+0x20>
 8010b0c:	f04f 37ff 	mov.w	r7, #4294967295
 8010b10:	e7f4      	b.n	8010afc <__swbuf_r+0x64>
	...

08010b14 <__swsetup_r>:
 8010b14:	b538      	push	{r3, r4, r5, lr}
 8010b16:	4b2a      	ldr	r3, [pc, #168]	; (8010bc0 <__swsetup_r+0xac>)
 8010b18:	4605      	mov	r5, r0
 8010b1a:	6818      	ldr	r0, [r3, #0]
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	b118      	cbz	r0, 8010b28 <__swsetup_r+0x14>
 8010b20:	6a03      	ldr	r3, [r0, #32]
 8010b22:	b90b      	cbnz	r3, 8010b28 <__swsetup_r+0x14>
 8010b24:	f7fe f8de 	bl	800ece4 <__sinit>
 8010b28:	89a3      	ldrh	r3, [r4, #12]
 8010b2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b2e:	0718      	lsls	r0, r3, #28
 8010b30:	d422      	bmi.n	8010b78 <__swsetup_r+0x64>
 8010b32:	06d9      	lsls	r1, r3, #27
 8010b34:	d407      	bmi.n	8010b46 <__swsetup_r+0x32>
 8010b36:	2309      	movs	r3, #9
 8010b38:	602b      	str	r3, [r5, #0]
 8010b3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b3e:	81a3      	strh	r3, [r4, #12]
 8010b40:	f04f 30ff 	mov.w	r0, #4294967295
 8010b44:	e034      	b.n	8010bb0 <__swsetup_r+0x9c>
 8010b46:	0758      	lsls	r0, r3, #29
 8010b48:	d512      	bpl.n	8010b70 <__swsetup_r+0x5c>
 8010b4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b4c:	b141      	cbz	r1, 8010b60 <__swsetup_r+0x4c>
 8010b4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b52:	4299      	cmp	r1, r3
 8010b54:	d002      	beq.n	8010b5c <__swsetup_r+0x48>
 8010b56:	4628      	mov	r0, r5
 8010b58:	f7ff f88c 	bl	800fc74 <_free_r>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	6363      	str	r3, [r4, #52]	; 0x34
 8010b60:	89a3      	ldrh	r3, [r4, #12]
 8010b62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b66:	81a3      	strh	r3, [r4, #12]
 8010b68:	2300      	movs	r3, #0
 8010b6a:	6063      	str	r3, [r4, #4]
 8010b6c:	6923      	ldr	r3, [r4, #16]
 8010b6e:	6023      	str	r3, [r4, #0]
 8010b70:	89a3      	ldrh	r3, [r4, #12]
 8010b72:	f043 0308 	orr.w	r3, r3, #8
 8010b76:	81a3      	strh	r3, [r4, #12]
 8010b78:	6923      	ldr	r3, [r4, #16]
 8010b7a:	b94b      	cbnz	r3, 8010b90 <__swsetup_r+0x7c>
 8010b7c:	89a3      	ldrh	r3, [r4, #12]
 8010b7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b86:	d003      	beq.n	8010b90 <__swsetup_r+0x7c>
 8010b88:	4621      	mov	r1, r4
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	f000 f8ee 	bl	8010d6c <__smakebuf_r>
 8010b90:	89a0      	ldrh	r0, [r4, #12]
 8010b92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b96:	f010 0301 	ands.w	r3, r0, #1
 8010b9a:	d00a      	beq.n	8010bb2 <__swsetup_r+0x9e>
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	60a3      	str	r3, [r4, #8]
 8010ba0:	6963      	ldr	r3, [r4, #20]
 8010ba2:	425b      	negs	r3, r3
 8010ba4:	61a3      	str	r3, [r4, #24]
 8010ba6:	6923      	ldr	r3, [r4, #16]
 8010ba8:	b943      	cbnz	r3, 8010bbc <__swsetup_r+0xa8>
 8010baa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010bae:	d1c4      	bne.n	8010b3a <__swsetup_r+0x26>
 8010bb0:	bd38      	pop	{r3, r4, r5, pc}
 8010bb2:	0781      	lsls	r1, r0, #30
 8010bb4:	bf58      	it	pl
 8010bb6:	6963      	ldrpl	r3, [r4, #20]
 8010bb8:	60a3      	str	r3, [r4, #8]
 8010bba:	e7f4      	b.n	8010ba6 <__swsetup_r+0x92>
 8010bbc:	2000      	movs	r0, #0
 8010bbe:	e7f7      	b.n	8010bb0 <__swsetup_r+0x9c>
 8010bc0:	20000084 	.word	0x20000084

08010bc4 <memmove>:
 8010bc4:	4288      	cmp	r0, r1
 8010bc6:	b510      	push	{r4, lr}
 8010bc8:	eb01 0402 	add.w	r4, r1, r2
 8010bcc:	d902      	bls.n	8010bd4 <memmove+0x10>
 8010bce:	4284      	cmp	r4, r0
 8010bd0:	4623      	mov	r3, r4
 8010bd2:	d807      	bhi.n	8010be4 <memmove+0x20>
 8010bd4:	1e43      	subs	r3, r0, #1
 8010bd6:	42a1      	cmp	r1, r4
 8010bd8:	d008      	beq.n	8010bec <memmove+0x28>
 8010bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010be2:	e7f8      	b.n	8010bd6 <memmove+0x12>
 8010be4:	4402      	add	r2, r0
 8010be6:	4601      	mov	r1, r0
 8010be8:	428a      	cmp	r2, r1
 8010bea:	d100      	bne.n	8010bee <memmove+0x2a>
 8010bec:	bd10      	pop	{r4, pc}
 8010bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bf6:	e7f7      	b.n	8010be8 <memmove+0x24>

08010bf8 <__assert_func>:
 8010bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010bfa:	4614      	mov	r4, r2
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	4b09      	ldr	r3, [pc, #36]	; (8010c24 <__assert_func+0x2c>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	4605      	mov	r5, r0
 8010c04:	68d8      	ldr	r0, [r3, #12]
 8010c06:	b14c      	cbz	r4, 8010c1c <__assert_func+0x24>
 8010c08:	4b07      	ldr	r3, [pc, #28]	; (8010c28 <__assert_func+0x30>)
 8010c0a:	9100      	str	r1, [sp, #0]
 8010c0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c10:	4906      	ldr	r1, [pc, #24]	; (8010c2c <__assert_func+0x34>)
 8010c12:	462b      	mov	r3, r5
 8010c14:	f000 f872 	bl	8010cfc <fiprintf>
 8010c18:	f000 f906 	bl	8010e28 <abort>
 8010c1c:	4b04      	ldr	r3, [pc, #16]	; (8010c30 <__assert_func+0x38>)
 8010c1e:	461c      	mov	r4, r3
 8010c20:	e7f3      	b.n	8010c0a <__assert_func+0x12>
 8010c22:	bf00      	nop
 8010c24:	20000084 	.word	0x20000084
 8010c28:	0801660f 	.word	0x0801660f
 8010c2c:	0801661c 	.word	0x0801661c
 8010c30:	0801664a 	.word	0x0801664a

08010c34 <_calloc_r>:
 8010c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c36:	fba1 2402 	umull	r2, r4, r1, r2
 8010c3a:	b94c      	cbnz	r4, 8010c50 <_calloc_r+0x1c>
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	9201      	str	r2, [sp, #4]
 8010c40:	f7fd fad2 	bl	800e1e8 <_malloc_r>
 8010c44:	9a01      	ldr	r2, [sp, #4]
 8010c46:	4605      	mov	r5, r0
 8010c48:	b930      	cbnz	r0, 8010c58 <_calloc_r+0x24>
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	b003      	add	sp, #12
 8010c4e:	bd30      	pop	{r4, r5, pc}
 8010c50:	220c      	movs	r2, #12
 8010c52:	6002      	str	r2, [r0, #0]
 8010c54:	2500      	movs	r5, #0
 8010c56:	e7f8      	b.n	8010c4a <_calloc_r+0x16>
 8010c58:	4621      	mov	r1, r4
 8010c5a:	f7fe f8f0 	bl	800ee3e <memset>
 8010c5e:	e7f4      	b.n	8010c4a <_calloc_r+0x16>

08010c60 <__ascii_mbtowc>:
 8010c60:	b082      	sub	sp, #8
 8010c62:	b901      	cbnz	r1, 8010c66 <__ascii_mbtowc+0x6>
 8010c64:	a901      	add	r1, sp, #4
 8010c66:	b142      	cbz	r2, 8010c7a <__ascii_mbtowc+0x1a>
 8010c68:	b14b      	cbz	r3, 8010c7e <__ascii_mbtowc+0x1e>
 8010c6a:	7813      	ldrb	r3, [r2, #0]
 8010c6c:	600b      	str	r3, [r1, #0]
 8010c6e:	7812      	ldrb	r2, [r2, #0]
 8010c70:	1e10      	subs	r0, r2, #0
 8010c72:	bf18      	it	ne
 8010c74:	2001      	movne	r0, #1
 8010c76:	b002      	add	sp, #8
 8010c78:	4770      	bx	lr
 8010c7a:	4610      	mov	r0, r2
 8010c7c:	e7fb      	b.n	8010c76 <__ascii_mbtowc+0x16>
 8010c7e:	f06f 0001 	mvn.w	r0, #1
 8010c82:	e7f8      	b.n	8010c76 <__ascii_mbtowc+0x16>

08010c84 <_realloc_r>:
 8010c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c88:	4680      	mov	r8, r0
 8010c8a:	4614      	mov	r4, r2
 8010c8c:	460e      	mov	r6, r1
 8010c8e:	b921      	cbnz	r1, 8010c9a <_realloc_r+0x16>
 8010c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c94:	4611      	mov	r1, r2
 8010c96:	f7fd baa7 	b.w	800e1e8 <_malloc_r>
 8010c9a:	b92a      	cbnz	r2, 8010ca8 <_realloc_r+0x24>
 8010c9c:	f7fe ffea 	bl	800fc74 <_free_r>
 8010ca0:	4625      	mov	r5, r4
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca8:	f000 f8c5 	bl	8010e36 <_malloc_usable_size_r>
 8010cac:	4284      	cmp	r4, r0
 8010cae:	4607      	mov	r7, r0
 8010cb0:	d802      	bhi.n	8010cb8 <_realloc_r+0x34>
 8010cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010cb6:	d812      	bhi.n	8010cde <_realloc_r+0x5a>
 8010cb8:	4621      	mov	r1, r4
 8010cba:	4640      	mov	r0, r8
 8010cbc:	f7fd fa94 	bl	800e1e8 <_malloc_r>
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	d0ed      	beq.n	8010ca2 <_realloc_r+0x1e>
 8010cc6:	42bc      	cmp	r4, r7
 8010cc8:	4622      	mov	r2, r4
 8010cca:	4631      	mov	r1, r6
 8010ccc:	bf28      	it	cs
 8010cce:	463a      	movcs	r2, r7
 8010cd0:	f7fe f945 	bl	800ef5e <memcpy>
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	4640      	mov	r0, r8
 8010cd8:	f7fe ffcc 	bl	800fc74 <_free_r>
 8010cdc:	e7e1      	b.n	8010ca2 <_realloc_r+0x1e>
 8010cde:	4635      	mov	r5, r6
 8010ce0:	e7df      	b.n	8010ca2 <_realloc_r+0x1e>

08010ce2 <__ascii_wctomb>:
 8010ce2:	b149      	cbz	r1, 8010cf8 <__ascii_wctomb+0x16>
 8010ce4:	2aff      	cmp	r2, #255	; 0xff
 8010ce6:	bf85      	ittet	hi
 8010ce8:	238a      	movhi	r3, #138	; 0x8a
 8010cea:	6003      	strhi	r3, [r0, #0]
 8010cec:	700a      	strbls	r2, [r1, #0]
 8010cee:	f04f 30ff 	movhi.w	r0, #4294967295
 8010cf2:	bf98      	it	ls
 8010cf4:	2001      	movls	r0, #1
 8010cf6:	4770      	bx	lr
 8010cf8:	4608      	mov	r0, r1
 8010cfa:	4770      	bx	lr

08010cfc <fiprintf>:
 8010cfc:	b40e      	push	{r1, r2, r3}
 8010cfe:	b503      	push	{r0, r1, lr}
 8010d00:	4601      	mov	r1, r0
 8010d02:	ab03      	add	r3, sp, #12
 8010d04:	4805      	ldr	r0, [pc, #20]	; (8010d1c <fiprintf+0x20>)
 8010d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d0a:	6800      	ldr	r0, [r0, #0]
 8010d0c:	9301      	str	r3, [sp, #4]
 8010d0e:	f7ff fcfb 	bl	8010708 <_vfiprintf_r>
 8010d12:	b002      	add	sp, #8
 8010d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d18:	b003      	add	sp, #12
 8010d1a:	4770      	bx	lr
 8010d1c:	20000084 	.word	0x20000084

08010d20 <__swhatbuf_r>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	460c      	mov	r4, r1
 8010d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d28:	2900      	cmp	r1, #0
 8010d2a:	b096      	sub	sp, #88	; 0x58
 8010d2c:	4615      	mov	r5, r2
 8010d2e:	461e      	mov	r6, r3
 8010d30:	da0d      	bge.n	8010d4e <__swhatbuf_r+0x2e>
 8010d32:	89a3      	ldrh	r3, [r4, #12]
 8010d34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010d38:	f04f 0100 	mov.w	r1, #0
 8010d3c:	bf0c      	ite	eq
 8010d3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010d42:	2340      	movne	r3, #64	; 0x40
 8010d44:	2000      	movs	r0, #0
 8010d46:	6031      	str	r1, [r6, #0]
 8010d48:	602b      	str	r3, [r5, #0]
 8010d4a:	b016      	add	sp, #88	; 0x58
 8010d4c:	bd70      	pop	{r4, r5, r6, pc}
 8010d4e:	466a      	mov	r2, sp
 8010d50:	f000 f848 	bl	8010de4 <_fstat_r>
 8010d54:	2800      	cmp	r0, #0
 8010d56:	dbec      	blt.n	8010d32 <__swhatbuf_r+0x12>
 8010d58:	9901      	ldr	r1, [sp, #4]
 8010d5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010d5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010d62:	4259      	negs	r1, r3
 8010d64:	4159      	adcs	r1, r3
 8010d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d6a:	e7eb      	b.n	8010d44 <__swhatbuf_r+0x24>

08010d6c <__smakebuf_r>:
 8010d6c:	898b      	ldrh	r3, [r1, #12]
 8010d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d70:	079d      	lsls	r5, r3, #30
 8010d72:	4606      	mov	r6, r0
 8010d74:	460c      	mov	r4, r1
 8010d76:	d507      	bpl.n	8010d88 <__smakebuf_r+0x1c>
 8010d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d7c:	6023      	str	r3, [r4, #0]
 8010d7e:	6123      	str	r3, [r4, #16]
 8010d80:	2301      	movs	r3, #1
 8010d82:	6163      	str	r3, [r4, #20]
 8010d84:	b002      	add	sp, #8
 8010d86:	bd70      	pop	{r4, r5, r6, pc}
 8010d88:	ab01      	add	r3, sp, #4
 8010d8a:	466a      	mov	r2, sp
 8010d8c:	f7ff ffc8 	bl	8010d20 <__swhatbuf_r>
 8010d90:	9900      	ldr	r1, [sp, #0]
 8010d92:	4605      	mov	r5, r0
 8010d94:	4630      	mov	r0, r6
 8010d96:	f7fd fa27 	bl	800e1e8 <_malloc_r>
 8010d9a:	b948      	cbnz	r0, 8010db0 <__smakebuf_r+0x44>
 8010d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010da0:	059a      	lsls	r2, r3, #22
 8010da2:	d4ef      	bmi.n	8010d84 <__smakebuf_r+0x18>
 8010da4:	f023 0303 	bic.w	r3, r3, #3
 8010da8:	f043 0302 	orr.w	r3, r3, #2
 8010dac:	81a3      	strh	r3, [r4, #12]
 8010dae:	e7e3      	b.n	8010d78 <__smakebuf_r+0xc>
 8010db0:	89a3      	ldrh	r3, [r4, #12]
 8010db2:	6020      	str	r0, [r4, #0]
 8010db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010db8:	81a3      	strh	r3, [r4, #12]
 8010dba:	9b00      	ldr	r3, [sp, #0]
 8010dbc:	6163      	str	r3, [r4, #20]
 8010dbe:	9b01      	ldr	r3, [sp, #4]
 8010dc0:	6120      	str	r0, [r4, #16]
 8010dc2:	b15b      	cbz	r3, 8010ddc <__smakebuf_r+0x70>
 8010dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f000 f81d 	bl	8010e08 <_isatty_r>
 8010dce:	b128      	cbz	r0, 8010ddc <__smakebuf_r+0x70>
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	f023 0303 	bic.w	r3, r3, #3
 8010dd6:	f043 0301 	orr.w	r3, r3, #1
 8010dda:	81a3      	strh	r3, [r4, #12]
 8010ddc:	89a3      	ldrh	r3, [r4, #12]
 8010dde:	431d      	orrs	r5, r3
 8010de0:	81a5      	strh	r5, [r4, #12]
 8010de2:	e7cf      	b.n	8010d84 <__smakebuf_r+0x18>

08010de4 <_fstat_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	4d07      	ldr	r5, [pc, #28]	; (8010e04 <_fstat_r+0x20>)
 8010de8:	2300      	movs	r3, #0
 8010dea:	4604      	mov	r4, r0
 8010dec:	4608      	mov	r0, r1
 8010dee:	4611      	mov	r1, r2
 8010df0:	602b      	str	r3, [r5, #0]
 8010df2:	f7f3 f936 	bl	8004062 <_fstat>
 8010df6:	1c43      	adds	r3, r0, #1
 8010df8:	d102      	bne.n	8010e00 <_fstat_r+0x1c>
 8010dfa:	682b      	ldr	r3, [r5, #0]
 8010dfc:	b103      	cbz	r3, 8010e00 <_fstat_r+0x1c>
 8010dfe:	6023      	str	r3, [r4, #0]
 8010e00:	bd38      	pop	{r3, r4, r5, pc}
 8010e02:	bf00      	nop
 8010e04:	20000bd4 	.word	0x20000bd4

08010e08 <_isatty_r>:
 8010e08:	b538      	push	{r3, r4, r5, lr}
 8010e0a:	4d06      	ldr	r5, [pc, #24]	; (8010e24 <_isatty_r+0x1c>)
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	4604      	mov	r4, r0
 8010e10:	4608      	mov	r0, r1
 8010e12:	602b      	str	r3, [r5, #0]
 8010e14:	f7f3 f935 	bl	8004082 <_isatty>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	d102      	bne.n	8010e22 <_isatty_r+0x1a>
 8010e1c:	682b      	ldr	r3, [r5, #0]
 8010e1e:	b103      	cbz	r3, 8010e22 <_isatty_r+0x1a>
 8010e20:	6023      	str	r3, [r4, #0]
 8010e22:	bd38      	pop	{r3, r4, r5, pc}
 8010e24:	20000bd4 	.word	0x20000bd4

08010e28 <abort>:
 8010e28:	b508      	push	{r3, lr}
 8010e2a:	2006      	movs	r0, #6
 8010e2c:	f000 f834 	bl	8010e98 <raise>
 8010e30:	2001      	movs	r0, #1
 8010e32:	f7f3 f8c7 	bl	8003fc4 <_exit>

08010e36 <_malloc_usable_size_r>:
 8010e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e3a:	1f18      	subs	r0, r3, #4
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	bfbc      	itt	lt
 8010e40:	580b      	ldrlt	r3, [r1, r0]
 8010e42:	18c0      	addlt	r0, r0, r3
 8010e44:	4770      	bx	lr

08010e46 <_raise_r>:
 8010e46:	291f      	cmp	r1, #31
 8010e48:	b538      	push	{r3, r4, r5, lr}
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	460d      	mov	r5, r1
 8010e4e:	d904      	bls.n	8010e5a <_raise_r+0x14>
 8010e50:	2316      	movs	r3, #22
 8010e52:	6003      	str	r3, [r0, #0]
 8010e54:	f04f 30ff 	mov.w	r0, #4294967295
 8010e58:	bd38      	pop	{r3, r4, r5, pc}
 8010e5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010e5c:	b112      	cbz	r2, 8010e64 <_raise_r+0x1e>
 8010e5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e62:	b94b      	cbnz	r3, 8010e78 <_raise_r+0x32>
 8010e64:	4620      	mov	r0, r4
 8010e66:	f000 f831 	bl	8010ecc <_getpid_r>
 8010e6a:	462a      	mov	r2, r5
 8010e6c:	4601      	mov	r1, r0
 8010e6e:	4620      	mov	r0, r4
 8010e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e74:	f000 b818 	b.w	8010ea8 <_kill_r>
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d00a      	beq.n	8010e92 <_raise_r+0x4c>
 8010e7c:	1c59      	adds	r1, r3, #1
 8010e7e:	d103      	bne.n	8010e88 <_raise_r+0x42>
 8010e80:	2316      	movs	r3, #22
 8010e82:	6003      	str	r3, [r0, #0]
 8010e84:	2001      	movs	r0, #1
 8010e86:	e7e7      	b.n	8010e58 <_raise_r+0x12>
 8010e88:	2400      	movs	r4, #0
 8010e8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e8e:	4628      	mov	r0, r5
 8010e90:	4798      	blx	r3
 8010e92:	2000      	movs	r0, #0
 8010e94:	e7e0      	b.n	8010e58 <_raise_r+0x12>
	...

08010e98 <raise>:
 8010e98:	4b02      	ldr	r3, [pc, #8]	; (8010ea4 <raise+0xc>)
 8010e9a:	4601      	mov	r1, r0
 8010e9c:	6818      	ldr	r0, [r3, #0]
 8010e9e:	f7ff bfd2 	b.w	8010e46 <_raise_r>
 8010ea2:	bf00      	nop
 8010ea4:	20000084 	.word	0x20000084

08010ea8 <_kill_r>:
 8010ea8:	b538      	push	{r3, r4, r5, lr}
 8010eaa:	4d07      	ldr	r5, [pc, #28]	; (8010ec8 <_kill_r+0x20>)
 8010eac:	2300      	movs	r3, #0
 8010eae:	4604      	mov	r4, r0
 8010eb0:	4608      	mov	r0, r1
 8010eb2:	4611      	mov	r1, r2
 8010eb4:	602b      	str	r3, [r5, #0]
 8010eb6:	f7f3 f875 	bl	8003fa4 <_kill>
 8010eba:	1c43      	adds	r3, r0, #1
 8010ebc:	d102      	bne.n	8010ec4 <_kill_r+0x1c>
 8010ebe:	682b      	ldr	r3, [r5, #0]
 8010ec0:	b103      	cbz	r3, 8010ec4 <_kill_r+0x1c>
 8010ec2:	6023      	str	r3, [r4, #0]
 8010ec4:	bd38      	pop	{r3, r4, r5, pc}
 8010ec6:	bf00      	nop
 8010ec8:	20000bd4 	.word	0x20000bd4

08010ecc <_getpid_r>:
 8010ecc:	f7f3 b862 	b.w	8003f94 <_getpid>

08010ed0 <_init>:
 8010ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed2:	bf00      	nop
 8010ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ed6:	bc08      	pop	{r3}
 8010ed8:	469e      	mov	lr, r3
 8010eda:	4770      	bx	lr

08010edc <_fini>:
 8010edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ede:	bf00      	nop
 8010ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ee2:	bc08      	pop	{r3}
 8010ee4:	469e      	mov	lr, r3
 8010ee6:	4770      	bx	lr
